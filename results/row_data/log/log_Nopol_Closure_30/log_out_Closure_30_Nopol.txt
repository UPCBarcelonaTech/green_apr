Sleep 1m start
GPR[SSLI]-1659911930969
GPR[ESLI]-1659911990973
Running Nopol Closure 30b with approach: smt
Timezone: America/Los_Angeles
Seed 264
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/30/seed_264/
The file script/workingdir/Nopol/Closure_30 does not exist!
script/workingdir/Nopol/Closure_30
script/workingdir/Nopol/Closure_30
classpath:  script/workingdir/Nopol/Closure_30/build/classes:script/workingdir/Nopol/Closure_30/lib/args4j.jar:script/workingdir/Nopol/Closure_30/lib/guava.jar:script/workingdir/Nopol/Closure_30/lib/json.jar:script/workingdir/Nopol/Closure_30/lib/jsr305.jar:script/workingdir/Nopol/Closure_30/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_30/build/lib/rhino.jar:script/workingdir/Nopol/Closure_30/lib/ant.jar:script/workingdir/Nopol/Closure_30/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_30/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_30/lib/jarjar.jar:script/workingdir/Nopol/Closure_30/lib/junit.jar:script/workingdir/Nopol/Closure_30/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659912009688
GPR[ESLB]-1659912069695
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_30//build/classes:script/workingdir/Nopol/Closure_30//build/test:script/workingdir/Nopol/Closure_30/build/classes:script/workingdir/Nopol/Closure_30/lib/args4j.jar:script/workingdir/Nopol/Closure_30/lib/guava.jar:script/workingdir/Nopol/Closure_30/lib/json.jar:script/workingdir/Nopol/Closure_30/lib/jsr305.jar:script/workingdir/Nopol/Closure_30/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_30/build/lib/rhino.jar:script/workingdir/Nopol/Closure_30/lib/ant.jar:script/workingdir/Nopol/Closure_30/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_30/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_30/lib/jarjar.jar:script/workingdir/Nopol/Closure_30/lib/junit.jar:script/workingdir/Nopol/Closure_30/build/test
Node: host-50
Date init: Sun 07 Aug 2022 03:41:09 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_30/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_30/build/classes/, file:script/workingdir/Nopol/Closure_30/build/test/, file:script/workingdir/Nopol/Closure_30/build/classes/, file:script/workingdir/Nopol/Closure_30/lib/args4j.jar, file:script/workingdir/Nopol/Closure_30/lib/guava.jar, file:script/workingdir/Nopol/Closure_30/lib/json.jar, file:script/workingdir/Nopol/Closure_30/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_30/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_30/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_30/lib/ant.jar, file:script/workingdir/Nopol/Closure_30/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_30/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_30/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_30/lib/junit.jar, file:script/workingdir/Nopol/Closure_30/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_30/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/30/seed_264/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[9] INFO NoPol - Java version: 1.8.0_45
[10] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[10] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659912075045
GPR[ESUP]-1659912075045
GPR[SFL]-1659912075045
GPR[EFL]-1659912114354
GPR[SFP]-1659912114354
GPR[SSUN]-1659912116001
2433571
GPR[ESUN]-1659912116585
GPR[SSUN]-1659912116585
-283827935
GPR[SPVATF]-1659912116793
GPR[EPVATF]-1659912116833
[46342] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912116833
GPR[SSUN]-1659912116833
2433571
GPR[SPVATF]-1659912117092
GPR[EPVATF]-1659912118071
GPR[SPS]-1659912118071
[48866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1459.
GPR[EPS]-1659912119357
GPR[ESUN]-1659912119357
GPR[SSUN]-1659912119357
2433571
GPR[SPVATF]-1659912119614
GPR[EPVATF]-1659912120124
GPR[SPS]-1659912120124
GPR[EPS]-1659912123992
GPR[SPVATR]-1659912123992
[53501] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1430: PRECONDITION node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP
[53934] INFO TestPatch - Running test suite to check the patch "node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP" is working
GPR[EPVATR]-1659912124642
[54151] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659912124642
[54178] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1429,7 +1429,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/30/seed_264/patch_49624_1ts_1659912124669.diff
GPR[ESUN]-1659912124670
GPR[SSUN]-1659912124670
80988634
GPR[ESUN]-1659912124859
GPR[SSUN]-1659912124859
2433571
GPR[SPVATF]-1659912125110
GPR[EPVATF]-1659912125612
GPR[SPS]-1659912125612
[55817] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1446.
GPR[EPS]-1659912126308
GPR[ESUN]-1659912126308
GPR[SSUN]-1659912126308
-1966087783
GPR[ESUN]-1659912126508
GPR[SSUN]-1659912126508
-1966087783
GPR[SPVATF]-1659912126701
GPR[EPVATF]-1659912126726
[56235] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912126726
GPR[SSUN]-1659912126726
-128675625
GPR[SPVATF]-1659912126955
GPR[EPVATF]-1659912127383
GPR[SPS]-1659912127383
[57462] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:364.
GPR[EPS]-1659912127953
GPR[SPVATF]-1659912127953
GPR[EPVATF]-1659912128385
GPR[SPS]-1659912128385
[58479] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:364.
GPR[EPS]-1659912128970
GPR[ESUN]-1659912128970
GPR[SSUN]-1659912128970
-128675625
GPR[ESUN]-1659912129220
GPR[SSUN]-1659912129220
-1516948592
GPR[ESUN]-1659912129404
GPR[SSUN]-1659912129404
-1516948592
GPR[SPVATF]-1659912129585
GPR[EPVATF]-1659912131786
GPR[SPS]-1659912131786
[61799] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:206.
GPR[EPS]-1659912132290
GPR[ESUN]-1659912132290
GPR[SSUN]-1659912132290
2433571
GPR[ESUN]-1659912132529
GPR[SSUN]-1659912132529
-1516948592
GPR[ESUN]-1659912132708
GPR[SSUN]-1659912132708
-1659631726
GPR[ESUN]-1659912132889
GPR[SSUN]-1659912132889
130004992
GPR[ESUN]-1659912133063
GPR[SSUN]-1659912133063
130004992
GPR[SPVATF]-1659912133235
GPR[EPVATF]-1659912133259
[62768] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912133259
GPR[SSUN]-1659912133260
130004992
GPR[ESUN]-1659912133435
GPR[SSUN]-1659912133435
-128675625
GPR[ESUN]-1659912133667
GPR[SSUN]-1659912133667
-128675625
GPR[SPVATF]-1659912133892
GPR[EPVATF]-1659912134384
GPR[SPS]-1659912134384
[64474] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:391.
GPR[EPS]-1659912134965
GPR[ESUN]-1659912134965
GPR[SSUN]-1659912134965
-128675625
GPR[SPVATF]-1659912135190
GPR[EPVATF]-1659912135715
GPR[SPS]-1659912135715
[65753] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:390.
GPR[EPS]-1659912136244
GPR[ESUN]-1659912136244
GPR[SSUN]-1659912136244
-128675625
GPR[ESUN]-1659912136471
GPR[SSUN]-1659912136471
-1119592721
GPR[ESUN]-1659912136693
GPR[SSUN]-1659912136693
-1119592721
GPR[SPVATF]-1659912136918
GPR[EPVATF]-1659912137435
GPR[SPS]-1659912137435
[67492] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:432.
GPR[EPS]-1659912137983
GPR[SPVATF]-1659912137984
GPR[EPVATF]-1659912138479
GPR[SPS]-1659912138479
[68541] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:432.
GPR[EPS]-1659912139032
GPR[ESUN]-1659912139032
GPR[SSUN]-1659912139032
80988634
GPR[ESUN]-1659912139207
GPR[SSUN]-1659912139207
-1516948592
GPR[SPVATF]-1659912139386
GPR[EPVATF]-1659912139813
GPR[SPS]-1659912139813
[69874] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:224.
GPR[EPS]-1659912140365
GPR[SPVATF]-1659912140365
GPR[EPVATF]-1659912140815
GPR[SPS]-1659912140815
[70869] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:224.
GPR[EPS]-1659912141360
GPR[ESUN]-1659912141360
GPR[SSUN]-1659912141360
-1516948592
GPR[ESUN]-1659912141543
GPR[SSUN]-1659912141543
-1516948592
GPR[SPVATF]-1659912141722
GPR[EPVATF]-1659912142149
GPR[SPS]-1659912142149
[72676] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:219.
GPR[EPS]-1659912143167
GPR[SPVATF]-1659912143168
GPR[EPVATF]-1659912143674
GPR[SPS]-1659912143674
[73670] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:219.
GPR[EPS]-1659912144161
GPR[ESUN]-1659912144161
GPR[SSUN]-1659912144161
-1516948592
GPR[SPVATF]-1659912144341
GPR[EPVATF]-1659912144769
GPR[SPS]-1659912144769
[74741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:216.
GPR[EPS]-1659912145232
GPR[SPVATF]-1659912145232
GPR[EPVATF]-1659912145657
GPR[SPS]-1659912145657
[75649] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:216.
GPR[EPS]-1659912146140
GPR[ESUN]-1659912146140
GPR[SSUN]-1659912146140
-1516948592
GPR[SPVATF]-1659912146322
GPR[EPVATF]-1659912146744
GPR[SPS]-1659912146744
[76754] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:214.
GPR[EPS]-1659912147245
GPR[ESUN]-1659912147245
GPR[SSUN]-1659912147245
-1516948592
GPR[SPVATF]-1659912147430
GPR[EPVATF]-1659912147851
GPR[SPS]-1659912147851
[77832] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:211.
GPR[EPS]-1659912148323
GPR[SPVATF]-1659912148323
GPR[EPVATF]-1659912148756
GPR[SPS]-1659912148756
[78768] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:211.
GPR[EPS]-1659912149259
GPR[ESUN]-1659912149259
GPR[SSUN]-1659912149259
80988634
GPR[ESUN]-1659912149463
GPR[SSUN]-1659912149463
2433571
GPR[SPVATF]-1659912149698
GPR[EPVATF]-1659912150304
GPR[SPS]-1659912150304
[80475] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:965.
GPR[EPS]-1659912150966
GPR[ESUN]-1659912150966
GPR[SSUN]-1659912150966
-1516948592
GPR[SPVATF]-1659912151155
GPR[EPVATF]-1659912151601
GPR[SPS]-1659912151601
[81588] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:208.
GPR[EPS]-1659912152080
GPR[ESUN]-1659912152080
GPR[SSUN]-1659912152080
-1516948592
GPR[SPVATF]-1659912152267
GPR[EPVATF]-1659912152741
GPR[SPS]-1659912152741
[82735] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:205.
GPR[EPS]-1659912153226
GPR[SPVATF]-1659912153226
GPR[EPVATF]-1659912153711
GPR[SPS]-1659912153712
[83702] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:205.
GPR[EPS]-1659912154193
GPR[ESUN]-1659912154193
GPR[SSUN]-1659912154193
-1516948592
GPR[SPVATF]-1659912154376
GPR[EPVATF]-1659912154812
GPR[SPS]-1659912154812
[85500] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:201.
GPR[EPS]-1659912155991
GPR[SPVATF]-1659912155991
GPR[EPVATF]-1659912156584
GPR[SPS]-1659912156584
[86588] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:201.
GPR[EPS]-1659912157079
GPR[ESUN]-1659912157079
GPR[SSUN]-1659912157079
-1516948592
GPR[ESUN]-1659912157262
GPR[SSUN]-1659912157262
-1516948592
GPR[SPVATF]-1659912157440
GPR[EPVATF]-1659912157877
GPR[SPS]-1659912157877
[87857] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:124.
GPR[EPS]-1659912158348
GPR[ESUN]-1659912158348
GPR[SSUN]-1659912158348
-1516948592
GPR[ESUN]-1659912158530
GPR[SSUN]-1659912158530
-1516948592
GPR[SPVATF]-1659912158708
GPR[EPVATF]-1659912159125
GPR[SPS]-1659912159125
[89099] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:122.
GPR[EPS]-1659912159590
GPR[ESUN]-1659912159590
GPR[SSUN]-1659912159590
2433571
GPR[SPVATF]-1659912159850
GPR[EPVATF]-1659912160362
GPR[SPS]-1659912160362
[90526] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:962.
GPR[EPS]-1659912161017
GPR[SPVATF]-1659912161017
GPR[EPVATF]-1659912161525
GPR[SPS]-1659912161525
[91676] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:962.
GPR[EPS]-1659912162167
GPR[ESUN]-1659912162167
GPR[SSUN]-1659912162167
2433571
GPR[SPVATF]-1659912162401
GPR[EPVATF]-1659912162951
GPR[SPS]-1659912162951
[93093] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:958.
GPR[EPS]-1659912163584
GPR[ESUN]-1659912163585
GPR[SSUN]-1659912163585
2433571
GPR[ESUN]-1659912163819
GPR[SSUN]-1659912163819
2433571
GPR[ESUN]-1659912164048
GPR[SSUN]-1659912164048
-675467674
GPR[ESUN]-1659912164233
GPR[SSUN]-1659912164233
-128675625
GPR[SPVATF]-1659912164458
GPR[EPVATF]-1659912164906
GPR[SPS]-1659912164906
[94955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:485.
GPR[EPS]-1659912165446
GPR[SPVATF]-1659912165447
GPR[EPVATF]-1659912165906
GPR[SPS]-1659912165906
[95984] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:485.
GPR[EPS]-1659912166475
GPR[ESUN]-1659912166475
GPR[SSUN]-1659912166475
1187751237
GPR[SPVATF]-1659912166758
GPR[EPVATF]-1659912167230
GPR[SPS]-1659912167230
[97476] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:863.
GPR[EPS]-1659912167967
GPR[ESUN]-1659912167967
GPR[SSUN]-1659912167967
-1966087783
GPR[SPVATF]-1659912168160
GPR[EPVATF]-1659912168180
[97689] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912168180
GPR[SSUN]-1659912168180
-1966087783
GPR[SPVATF]-1659912168369
GPR[EPVATF]-1659912168388
[97897] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912168388
GPR[SSUN]-1659912168388
-128675625
GPR[ESUN]-1659912168655
GPR[SSUN]-1659912168655
-128675625
GPR[ESUN]-1659912168878
GPR[SSUN]-1659912168878
-128675625
GPR[SPVATF]-1659912169101
GPR[EPVATF]-1659912169615
GPR[SPS]-1659912169615
[99661] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:395.
GPR[EPS]-1659912170152
GPR[ESUN]-1659912170152
GPR[SSUN]-1659912170152
-128675625
GPR[SPVATF]-1659912170384
GPR[EPVATF]-1659912170908
GPR[SPS]-1659912170908
[100955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:378.
GPR[EPS]-1659912171446
GPR[SPVATF]-1659912171446
GPR[EPVATF]-1659912171986
GPR[SPS]-1659912171986
[102754] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:378.
GPR[EPS]-1659912173245
GPR[ESUN]-1659912173246
GPR[SSUN]-1659912173246
-128675625
GPR[ESUN]-1659912173473
GPR[SSUN]-1659912173473
-128675625
GPR[ESUN]-1659912173693
GPR[SSUN]-1659912173693
-128675625
GPR[ESUN]-1659912173909
GPR[SSUN]-1659912173909
-128675625
GPR[SPVATF]-1659912174132
GPR[EPVATF]-1659912174730
GPR[SPS]-1659912174730
[104786] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:147.
GPR[EPS]-1659912175277
GPR[ESUN]-1659912175277
GPR[SSUN]-1659912175277
-128675625
GPR[SPVATF]-1659912175505
GPR[EPVATF]-1659912176010
GPR[SPS]-1659912176010
[106065] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:350.
GPR[EPS]-1659912176556
GPR[SPVATF]-1659912176556
GPR[EPVATF]-1659912177059
GPR[SPS]-1659912177059
[107099] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:350.
GPR[EPS]-1659912177591
GPR[ESUN]-1659912177591
GPR[SSUN]-1659912177591
-128675625
GPR[SPVATF]-1659912177825
GPR[EPVATF]-1659912178164
GPR[SPS]-1659912178164
[108191] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:464.
GPR[EPS]-1659912178682
GPR[SPVATF]-1659912178682
GPR[EPVATF]-1659912179024
GPR[SPS]-1659912179024
[109052] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:464.
GPR[EPS]-1659912179543
GPR[ESUN]-1659912179543
GPR[SSUN]-1659912179543
890942016
GPR[ESUN]-1659912179736
GPR[SSUN]-1659912179736
890942016
GPR[SPVATF]-1659912179924
GPR[EPVATF]-1659912179943
[109452] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912179943
GPR[SSUN]-1659912179943
890942016
GPR[SPVATF]-1659912180131
GPR[EPVATF]-1659912180149
[109658] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912180149
GPR[EPVATF]-1659912180166
[109675] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912180166
GPR[SSUN]-1659912180166
890942016
GPR[ESUN]-1659912180382
GPR[SSUN]-1659912180382
890942016
GPR[ESUN]-1659912180573
GPR[SSUN]-1659912180573
-1966087783
GPR[ESUN]-1659912180762
GPR[SSUN]-1659912180762
-1966087783
GPR[SPVATF]-1659912180947
GPR[EPVATF]-1659912180964
[110474] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912180965
GPR[EPVATF]-1659912180981
[110490] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912180981
GPR[SSUN]-1659912180981
-1966087783
GPR[ESUN]-1659912181169
GPR[SSUN]-1659912181169
-1966087783
GPR[SPVATF]-1659912181357
GPR[EPVATF]-1659912181375
[110884] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912181376
GPR[EPVATF]-1659912181393
[110902] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912181393
GPR[SSUN]-1659912181393
-1966087783
GPR[ESUN]-1659912181579
GPR[SSUN]-1659912181579
-1966087783
GPR[ESUN]-1659912181762
GPR[SSUN]-1659912181762
-1966087783
GPR[ESUN]-1659912181949
GPR[SSUN]-1659912181949
-128675625
GPR[SPVATF]-1659912182166
GPR[EPVATF]-1659912182664
GPR[SPS]-1659912182664
[112712] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:412.
GPR[EPS]-1659912183203
GPR[ESUN]-1659912183204
GPR[SSUN]-1659912183204
-128675625
GPR[SPVATF]-1659912183441
GPR[EPVATF]-1659912183943
GPR[SPS]-1659912183944
[114091] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:322.
GPR[EPS]-1659912184582
GPR[SPVATF]-1659912184583
GPR[EPVATF]-1659912185085
GPR[SPS]-1659912185085
[115128] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:322.
GPR[EPS]-1659912185619
GPR[ESUN]-1659912185619
GPR[SSUN]-1659912185620
80988634
GPR[ESUN]-1659912185794
GPR[SSUN]-1659912185794
-1119592721
GPR[SPVATF]-1659912186013
GPR[EPVATF]-1659912186517
GPR[SPS]-1659912186517
[116570] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:398.
GPR[EPS]-1659912187061
GPR[ESUN]-1659912187061
GPR[SSUN]-1659912187061
-1119592721
GPR[ESUN]-1659912187287
GPR[SSUN]-1659912187287
80988634
GPR[ESUN]-1659912187458
GPR[SSUN]-1659912187458
80988634
GPR[ESUN]-1659912187629
GPR[SSUN]-1659912187629
80988634
GPR[ESUN]-1659912187799
GPR[SSUN]-1659912187799
-128675625
GPR[SPVATF]-1659912188054
GPR[EPVATF]-1659912188598
GPR[SPS]-1659912188598
[118736] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:311.
GPR[EPS]-1659912189227
GPR[SPVATF]-1659912189227
GPR[EPVATF]-1659912189737
GPR[SPS]-1659912189737
[119834] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:311.
GPR[EPS]-1659912190325
GPR[ESUN]-1659912190325
GPR[SSUN]-1659912190325
-128675625
GPR[ESUN]-1659912190552
GPR[SSUN]-1659912190552
-128675625
GPR[ESUN]-1659912190775
GPR[SSUN]-1659912190775
1613130706
GPR[ESUN]-1659912190980
GPR[SSUN]-1659912190980
1613130706
GPR[ESUN]-1659912191179
GPR[SSUN]-1659912191180
1613130706
GPR[SPVATF]-1659912191382
GPR[EPVATF]-1659912191556
[121066] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912191557
GPR[SSUN]-1659912191557
2433571
GPR[SPVATF]-1659912191788
GPR[EPVATF]-1659912192363
GPR[SPS]-1659912192363
[122465] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1038.
GPR[EPS]-1659912192956
GPR[ESUN]-1659912192956
GPR[SSUN]-1659912192956
2433571
GPR[SPVATF]-1659912193191
GPR[EPVATF]-1659912193705
GPR[SPS]-1659912193705
[123840] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1031.
GPR[EPS]-1659912194331
GPR[ESUN]-1659912194331
GPR[SSUN]-1659912194331
2433571
GPR[ESUN]-1659912194560
GPR[SSUN]-1659912194560
-128675625
GPR[SPVATF]-1659912194780
GPR[EPVATF]-1659912196082
GPR[SPS]-1659912196082
[126167] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:304.
GPR[EPS]-1659912196658
GPR[SPVATF]-1659912196658
GPR[EPVATF]-1659912197214
GPR[SPS]-1659912197214
[127275] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:304.
GPR[EPS]-1659912197766
GPR[ESUN]-1659912197766
GPR[SSUN]-1659912197766
2433571
GPR[ESUN]-1659912198006
GPR[SSUN]-1659912198006
2433571
GPR[ESUN]-1659912198232
GPR[SSUN]-1659912198232
2433571
GPR[SPVATF]-1659912198455
GPR[EPVATF]-1659912198962
GPR[SPS]-1659912198962
[129074] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1035.
GPR[EPS]-1659912199565
GPR[ESUN]-1659912199565
GPR[SSUN]-1659912199565
2433571
GPR[SPVATF]-1659912199800
GPR[EPVATF]-1659912200331
GPR[SPS]-1659912200331
[130431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1034.
GPR[EPS]-1659912200922
GPR[ESUN]-1659912200922
GPR[SSUN]-1659912200922
2433571
GPR[SPVATF]-1659912201154
GPR[EPVATF]-1659912201687
GPR[SPS]-1659912201687
[131777] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1033.
GPR[EPS]-1659912202268
GPR[ESUN]-1659912202268
GPR[SSUN]-1659912202268
2433571
GPR[SPVATF]-1659912202503
GPR[EPVATF]-1659912203012
GPR[SPS]-1659912203012
[133133] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1030.
GPR[EPS]-1659912203624
GPR[ESUN]-1659912203624
GPR[SSUN]-1659912203624
2433571
GPR[ESUN]-1659912203860
GPR[SSUN]-1659912203860
2433571
GPR[SPVATF]-1659912204091
GPR[EPVATF]-1659912204624
GPR[SPS]-1659912204624
[134748] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1025.
GPR[EPS]-1659912205239
GPR[ESUN]-1659912205239
GPR[SSUN]-1659912205239
2433571
GPR[ESUN]-1659912205466
GPR[SSUN]-1659912205466
2433571
GPR[SPVATF]-1659912205688
GPR[EPVATF]-1659912206193
GPR[SPS]-1659912206193
[136356] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1017.
GPR[EPS]-1659912206847
GPR[ESUN]-1659912206848
GPR[SSUN]-1659912206848
2433571
GPR[ESUN]-1659912207080
GPR[SSUN]-1659912207080
2433571
GPR[ESUN]-1659912207306
GPR[SSUN]-1659912207306
-128675625
GPR[SPVATF]-1659912207526
GPR[EPVATF]-1659912208034
GPR[SPS]-1659912208034
[138078] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:299.
GPR[EPS]-1659912208569
GPR[SPVATF]-1659912208569
GPR[EPVATF]-1659912209077
GPR[SPS]-1659912209077
[139120] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:299.
GPR[EPS]-1659912209611
GPR[ESUN]-1659912209611
GPR[SSUN]-1659912209611
79711797
GPR[SPVATF]-1659912209841
GPR[EPVATF]-1659912210399
GPR[SPS]-1659912210399
[140453] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope:569.
GPR[EPS]-1659912210944
GPR[ESUN]-1659912210944
GPR[SSUN]-1659912210944
80988634
GPR[ESUN]-1659912211116
GPR[SSUN]-1659912211116
2433571
GPR[SPVATF]-1659912211341
GPR[EPVATF]-1659912211877
GPR[SPS]-1659912211877
[142069] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:994.
GPR[EPS]-1659912212560
GPR[ESUN]-1659912212560
GPR[SSUN]-1659912212560
2433571
GPR[SPVATF]-1659912212791
GPR[EPVATF]-1659912213360
GPR[SPS]-1659912213360
[143553] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:993.
GPR[EPS]-1659912214044
GPR[ESUN]-1659912214044
GPR[SSUN]-1659912214044
2433571
GPR[SPVATF]-1659912214273
GPR[EPVATF]-1659912214810
GPR[SPS]-1659912214811
[144916] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(62).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            if (com.google.javascript.rhino.Node.this.last!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.parent!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.next!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.first!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            value = x.toString();

                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[144917] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912215408
GPR[SSUN]-1659912215408
2433571
GPR[SPVATF]-1659912215638
GPR[EPVATF]-1659912216178
GPR[SPS]-1659912216178
[146270] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(63).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectionEnds();
                }
                if (runtimeAngelicValue)
                    switch (type) {
                        default :
                            value = x.toString();
                            break;
                    }

                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[146271] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912216762
GPR[SSUN]-1659912216762
2433571
GPR[SPVATF]-1659912216995
GPR[EPVATF]-1659912217592
GPR[SPS]-1659912217592
[147735] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:986.
GPR[EPS]-1659912218227
GPR[ESUN]-1659912218227
GPR[SSUN]-1659912218227
2433571
GPR[SPVATF]-1659912218456
GPR[EPVATF]-1659912219022
GPR[SPS]-1659912219022
[149162] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:985.
GPR[EPS]-1659912219653
GPR[ESUN]-1659912219653
GPR[SSUN]-1659912219653
2433571
GPR[SPVATF]-1659912219883
GPR[EPVATF]-1659912221282
GPR[SPS]-1659912221282
[151514] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:984.
GPR[EPS]-1659912222005
GPR[ESUN]-1659912222005
GPR[SSUN]-1659912222005
2433571
GPR[ESUN]-1659912222233
GPR[SSUN]-1659912222233
2433571
GPR[ESUN]-1659912222459
GPR[SSUN]-1659912222459
2433571
GPR[SPVATF]-1659912222685
GPR[EPVATF]-1659912223217
GPR[SPS]-1659912223217
[153374] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:975.
GPR[EPS]-1659912223865
GPR[ESUN]-1659912223865
GPR[SSUN]-1659912223865
2433571
GPR[SPVATF]-1659912224092
GPR[EPVATF]-1659912224616
GPR[SPS]-1659912224616
[154782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:974.
GPR[EPS]-1659912225273
GPR[ESUN]-1659912225273
GPR[SSUN]-1659912225273
2433571
GPR[SPVATF]-1659912225505
GPR[EPVATF]-1659912226008
GPR[SPS]-1659912226008
[156133] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:887.
GPR[EPS]-1659912226624
GPR[ESUN]-1659912226624
GPR[SSUN]-1659912226624
2433571
GPR[SPVATF]-1659912226848
GPR[EPVATF]-1659912227359
GPR[SPS]-1659912227359
[157484] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:886.
GPR[EPS]-1659912227975
GPR[ESUN]-1659912227976
GPR[SSUN]-1659912227976
2433571
GPR[SPVATF]-1659912228233
GPR[EPVATF]-1659912228746
GPR[SPS]-1659912228746
[158869] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:881.
GPR[EPS]-1659912229360
GPR[ESUN]-1659912229360
GPR[SSUN]-1659912229360
2433571
GPR[ESUN]-1659912229583
GPR[SSUN]-1659912229583
2433571
GPR[ESUN]-1659912229806
GPR[SSUN]-1659912229806
2433571
GPR[ESUN]-1659912230032
GPR[SSUN]-1659912230032
881600600
GPR[ESUN]-1659912230216
GPR[SSUN]-1659912230216
-128675625
GPR[SPVATF]-1659912230437
GPR[EPVATF]-1659912230948
GPR[SPS]-1659912230948
[161009] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:483.
GPR[EPS]-1659912231500
GPR[ESUN]-1659912231500
GPR[SSUN]-1659912231500
-1119592721
GPR[ESUN]-1659912231726
GPR[SSUN]-1659912231726
80988634
GPR[ESUN]-1659912231895
GPR[SSUN]-1659912231895
-128675625
GPR[SPVATF]-1659912232145
GPR[EPVATF]-1659912232662
GPR[SPS]-1659912232662
[162706] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:290.
GPR[EPS]-1659912233197
GPR[SPVATF]-1659912233198
GPR[EPVATF]-1659912233729
GPR[SPS]-1659912233729
[163766] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:290.
GPR[EPS]-1659912234257
GPR[ESUN]-1659912234257
GPR[SSUN]-1659912234257
-128675625
GPR[ESUN]-1659912234478
GPR[SSUN]-1659912234478
2433571
GPR[SPVATF]-1659912234704
GPR[EPVATF]-1659912235221
GPR[SPS]-1659912235221
[165366] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:999.
GPR[EPS]-1659912235857
GPR[SPVATF]-1659912235857
GPR[EPVATF]-1659912236384
GPR[SPS]-1659912236384
[166554] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:999.
GPR[EPS]-1659912237045
GPR[ESUN]-1659912237045
GPR[SSUN]-1659912237045
2433571
GPR[SPVATF]-1659912237278
GPR[EPVATF]-1659912237807
GPR[SPS]-1659912237807
[167945] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:981.
GPR[EPS]-1659912238436
GPR[ESUN]-1659912238436
GPR[SSUN]-1659912238436
2433571
GPR[ESUN]-1659912238662
GPR[SSUN]-1659912238662
2433571
GPR[SPVATF]-1659912238887
GPR[EPVATF]-1659912239418
GPR[SPS]-1659912239418
[169552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659912240043
GPR[SPVATF]-1659912240043
GPR[EPVATF]-1659912240640
GPR[SPS]-1659912240640
[170791] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659912241282
GPR[ESUN]-1659912241282
GPR[SSUN]-1659912241282
2433571
GPR[ESUN]-1659912241510
GPR[SSUN]-1659912241510
2433571
GPR[ESUN]-1659912241731
GPR[SSUN]-1659912241731
2433571
GPR[ESUN]-1659912241949
GPR[SSUN]-1659912241949
2433571
GPR[SPVATF]-1659912242171
GPR[EPVATF]-1659912242739
GPR[SPS]-1659912242739
[172872] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:890.
GPR[EPS]-1659912243363
GPR[ESUN]-1659912243364
GPR[SSUN]-1659912243364
2433571
GPR[SPVATF]-1659912243594
GPR[EPVATF]-1659912244139
GPR[SPS]-1659912244139
[174326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:885.
GPR[EPS]-1659912244817
GPR[ESUN]-1659912244817
GPR[SSUN]-1659912244817
2433571
GPR[ESUN]-1659912245043
GPR[SSUN]-1659912245043
2433571
GPR[SPVATF]-1659912245268
GPR[EPVATF]-1659912245842
GPR[SPS]-1659912245842
[175959] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:880.
GPR[EPS]-1659912246451
GPR[ESUN]-1659912246451
GPR[SSUN]-1659912246451
2433571
GPR[ESUN]-1659912246681
GPR[SSUN]-1659912246681
-128675625
GPR[SPVATF]-1659912246903
GPR[EPVATF]-1659912247475
GPR[SPS]-1659912247475
[177521] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:282.
GPR[EPS]-1659912248012
GPR[SPVATF]-1659912248012
GPR[EPVATF]-1659912248707
GPR[SPS]-1659912248707
[178837] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:282.
GPR[EPS]-1659912249328
GPR[ESUN]-1659912249328
GPR[SSUN]-1659912249328
-128675625
GPR[SPVATF]-1659912249548
GPR[EPVATF]-1659912250983
GPR[SPS]-1659912250983
[181408] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:482.
GPR[EPS]-1659912251900
GPR[ESUN]-1659912251900
GPR[SSUN]-1659912251900
-128675625
GPR[ESUN]-1659912252122
GPR[SSUN]-1659912252122
234947553
GPR[ESUN]-1659912252307
GPR[SSUN]-1659912252307
234947553
GPR[SPVATF]-1659912252489
GPR[EPVATF]-1659912252505
[182014] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912252506
GPR[EPVATF]-1659912252521
[182030] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912252521
GPR[SSUN]-1659912252521
234947553
GPR[ESUN]-1659912252709
GPR[SSUN]-1659912252709
234947553
GPR[SPVATF]-1659912252892
GPR[EPVATF]-1659912252908
[182417] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912252908
GPR[EPVATF]-1659912252924
[182433] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912252924
GPR[SSUN]-1659912252924
234947553
GPR[SPVATF]-1659912253111
GPR[EPVATF]-1659912253127
[182636] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912253127
GPR[SSUN]-1659912253127
234947553
GPR[ESUN]-1659912253319
GPR[SSUN]-1659912253319
234947553
GPR[ESUN]-1659912253506
GPR[SSUN]-1659912253506
234947553
GPR[SPVATF]-1659912253693
GPR[EPVATF]-1659912253707
[183217] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912253708
GPR[SSUN]-1659912253708
234947553
GPR[SPVATF]-1659912253896
GPR[EPVATF]-1659912253911
[183420] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912253911
GPR[SSUN]-1659912253911
234947553
GPR[SPVATF]-1659912254095
GPR[EPVATF]-1659912254112
[183621] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912254112
GPR[SSUN]-1659912254112
234947553
GPR[ESUN]-1659912254296
GPR[SSUN]-1659912254296
234947553
GPR[ESUN]-1659912254479
GPR[SSUN]-1659912254479
234947553
GPR[SPVATF]-1659912254661
GPR[EPVATF]-1659912254676
[184185] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912254676
GPR[SSUN]-1659912254676
234947553
GPR[SPVATF]-1659912254860
GPR[EPVATF]-1659912254874
[184383] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912254874
GPR[SSUN]-1659912254874
234947553
GPR[ESUN]-1659912255058
GPR[SSUN]-1659912255058
234947553
GPR[SPVATF]-1659912255239
GPR[EPVATF]-1659912255255
[184764] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912255255
GPR[SSUN]-1659912255255
234947553
GPR[SPVATF]-1659912255449
GPR[EPVATF]-1659912255466
[184975] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912255466
GPR[SSUN]-1659912255466
234947553
GPR[ESUN]-1659912255650
GPR[SSUN]-1659912255650
890942016
GPR[SPVATF]-1659912255838
GPR[EPVATF]-1659912255856
[185365] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912255856
GPR[EPVATF]-1659912255873
[185382] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912255873
GPR[SSUN]-1659912255873
890942016
GPR[SPVATF]-1659912256064
GPR[EPVATF]-1659912256083
[185592] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912256083
GPR[SSUN]-1659912256083
890942016
GPR[ESUN]-1659912256268
GPR[SSUN]-1659912256268
890942016
GPR[SPVATF]-1659912256451
GPR[EPVATF]-1659912256469
[185978] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912256469
GPR[SSUN]-1659912256469
890942016
GPR[SPVATF]-1659912256655
GPR[EPVATF]-1659912256674
[186183] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912256674
GPR[EPVATF]-1659912256692
[186201] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912256692
GPR[SSUN]-1659912256692
890942016
GPR[SPVATF]-1659912256878
GPR[EPVATF]-1659912256895
[186404] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912256895
GPR[SSUN]-1659912256895
890942016
GPR[SPVATF]-1659912257084
GPR[EPVATF]-1659912257102
[186611] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912257103
GPR[EPVATF]-1659912257121
[186630] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912257121
GPR[SSUN]-1659912257121
890942016
GPR[ESUN]-1659912257309
GPR[SSUN]-1659912257309
890942016
GPR[SPVATF]-1659912257494
GPR[EPVATF]-1659912257512
[187021] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912257512
GPR[SSUN]-1659912257512
890942016
GPR[SPVATF]-1659912257699
GPR[EPVATF]-1659912257716
[187225] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912257716
GPR[SSUN]-1659912257716
890942016
GPR[SPVATF]-1659912257900
GPR[EPVATF]-1659912257918
[187427] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912257918
GPR[SSUN]-1659912257918
890942016
GPR[ESUN]-1659912258103
GPR[SSUN]-1659912258103
1613130706
GPR[SPVATF]-1659912258302
GPR[EPVATF]-1659912258478
[187987] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912258478
GPR[EPVATF]-1659912258657
[188166] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912258657
GPR[SSUN]-1659912258657
1613130706
GPR[SPVATF]-1659912258860
GPR[EPVATF]-1659912259038
[188547] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912259038
GPR[SSUN]-1659912259038
1613130706
GPR[SPVATF]-1659912259240
GPR[EPVATF]-1659912259417
[188926] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912259417
GPR[EPVATF]-1659912259593
[189102] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912259593
GPR[SSUN]-1659912259593
-128675625
GPR[SPVATF]-1659912259817
GPR[EPVATF]-1659912260369
GPR[SPS]-1659912260369
[190401] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:275.
GPR[EPS]-1659912260892
GPR[SPVATF]-1659912260892
GPR[EPVATF]-1659912261425
GPR[SPS]-1659912261425
[191466] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:275.
GPR[EPS]-1659912261957
GPR[ESUN]-1659912261957
GPR[SSUN]-1659912261957
-128675625
GPR[SPVATF]-1659912262181
GPR[EPVATF]-1659912262707
GPR[SPS]-1659912262707
[192739] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:463.
GPR[EPS]-1659912263230
GPR[ESUN]-1659912263230
GPR[SSUN]-1659912263230
-128675625
GPR[SPVATF]-1659912263454
GPR[EPVATF]-1659912263978
GPR[SPS]-1659912263978
[194020] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:462.
GPR[EPS]-1659912264511
GPR[ESUN]-1659912264511
GPR[SSUN]-1659912264511
-1765952779
GPR[ESUN]-1659912264738
GPR[SSUN]-1659912264738
-1765952779
GPR[ESUN]-1659912264949
GPR[SSUN]-1659912264949
-1765952779
GPR[SPVATF]-1659912265186
GPR[EPVATF]-1659912265708
GPR[SPS]-1659912265708
[195765] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:281.
GPR[EPS]-1659912266257
GPR[ESUN]-1659912266257
GPR[SSUN]-1659912266257
-1765952779
GPR[ESUN]-1659912266470
GPR[SSUN]-1659912266470
2433571
GPR[SPVATF]-1659912266694
GPR[EPVATF]-1659912267218
GPR[SPS]-1659912267218
[197347] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:956.
GPR[EPS]-1659912267838
GPR[ESUN]-1659912267838
GPR[SSUN]-1659912267838
2433571
GPR[SPVATF]-1659912268067
GPR[EPVATF]-1659912268624
GPR[SPS]-1659912268624
[198750] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:955.
GPR[EPS]-1659912269241
GPR[ESUN]-1659912269241
GPR[SSUN]-1659912269241
1965452846
GPR[ESUN]-1659912269462
GPR[SSUN]-1659912269462
1965452846
GPR[SPVATF]-1659912269667
GPR[EPVATF]-1659912270155
GPR[SPS]-1659912270155
[200251] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph$AnnotatedLinkedDirectedGraphEdge:578.
GPR[EPS]-1659912270742
GPR[ESUN]-1659912270742
GPR[SSUN]-1659912270742
1965452846
GPR[ESUN]-1659912270950
GPR[SSUN]-1659912270950
-1516948592
GPR[ESUN]-1659912271127
GPR[SSUN]-1659912271127
-1516948592
GPR[ESUN]-1659912271303
GPR[SSUN]-1659912271303
-1516948592
GPR[SPVATF]-1659912271479
GPR[EPVATF]-1659912271921
GPR[SPS]-1659912271921
[201911] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:147.
GPR[EPS]-1659912272403
GPR[ESUN]-1659912272403
GPR[SSUN]-1659912272403
-1516948592
GPR[SPVATF]-1659912272591
GPR[EPVATF]-1659912273041
GPR[SPS]-1659912273041
[203017] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:146.
GPR[EPS]-1659912273508
GPR[SPVATF]-1659912273508
GPR[EPVATF]-1659912273971
GPR[SPS]-1659912273971
[203951] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:146.
GPR[EPS]-1659912274442
GPR[ESUN]-1659912274442
GPR[SSUN]-1659912274442
-1516948592
GPR[ESUN]-1659912274620
GPR[SSUN]-1659912274620
-1516948592
GPR[SPVATF]-1659912274796
GPR[EPVATF]-1659912275277
GPR[SPS]-1659912275277
[205307] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:142.
GPR[EPS]-1659912275798
GPR[SPVATF]-1659912275798
GPR[EPVATF]-1659912276271
GPR[SPS]-1659912276271
[206252] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:142.
GPR[EPS]-1659912276743
GPR[ESUN]-1659912276743
GPR[SSUN]-1659912276743
1965452846
GPR[ESUN]-1659912276951
GPR[SSUN]-1659912276951
1965452846
GPR[SPVATF]-1659912277153
GPR[EPVATF]-1659912277625
GPR[SPS]-1659912277625
[207685] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:316.
GPR[EPS]-1659912278176
GPR[ESUN]-1659912278176
GPR[SSUN]-1659912278176
-128675625
GPR[ESUN]-1659912278400
GPR[SSUN]-1659912278400
-128675625
GPR[SPVATF]-1659912278616
GPR[EPVATF]-1659912279177
GPR[SPS]-1659912279177
[209221] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$4:443.
GPR[EPS]-1659912279712
GPR[ESUN]-1659912279712
GPR[SSUN]-1659912279713
-128675625
GPR[SPVATF]-1659912279935
GPR[EPVATF]-1659912280530
GPR[SPS]-1659912280530
[210568] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$4:439.
GPR[EPS]-1659912281059
GPR[SPVATF]-1659912281059
GPR[EPVATF]-1659912282475
GPR[SPS]-1659912282475
[212609] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$4:439.
GPR[EPS]-1659912283100
GPR[ESUN]-1659912283100
GPR[SSUN]-1659912283100
-128675625
GPR[ESUN]-1659912283320
GPR[SSUN]-1659912283320
-128675625
GPR[ESUN]-1659912283539
GPR[SSUN]-1659912283539
-128675625
GPR[SPVATF]-1659912283752
GPR[EPVATF]-1659912284294
GPR[SPS]-1659912284294
[214331] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:411.
GPR[EPS]-1659912284822
GPR[SPVATF]-1659912284822
GPR[EPVATF]-1659912285359
GPR[SPS]-1659912285359
[215415] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:411.
GPR[EPS]-1659912285906
GPR[ESUN]-1659912285906
GPR[SSUN]-1659912285906
-128675625
GPR[SPVATF]-1659912286131
GPR[EPVATF]-1659912286663
GPR[SPS]-1659912286663
[216701] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:409.
GPR[EPS]-1659912287192
GPR[ESUN]-1659912287192
GPR[SSUN]-1659912287192
-128675625
GPR[ESUN]-1659912287418
GPR[SSUN]-1659912287418
-128675625
GPR[SPVATF]-1659912287667
GPR[EPVATF]-1659912288197
GPR[SPS]-1659912288197
[218283] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:448.
GPR[EPS]-1659912288774
GPR[ESUN]-1659912288774
GPR[SSUN]-1659912288774
-128675625
GPR[ESUN]-1659912289000
GPR[SSUN]-1659912289000
-128675625
GPR[ESUN]-1659912289221
GPR[SSUN]-1659912289221
-128675625
GPR[SPVATF]-1659912289440
GPR[EPVATF]-1659912289961
GPR[SPS]-1659912289961
[220006] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:425.
GPR[EPS]-1659912290497
GPR[ESUN]-1659912290497
GPR[SSUN]-1659912290497
-128675625
GPR[ESUN]-1659912290723
GPR[SSUN]-1659912290723
-128675625
GPR[SPVATF]-1659912290941
GPR[EPVATF]-1659912291479
GPR[SPS]-1659912291479
[221529] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:267.
GPR[EPS]-1659912292020
GPR[SPVATF]-1659912292021
GPR[EPVATF]-1659912292560
GPR[SPS]-1659912292560
[222601] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:267.
GPR[EPS]-1659912293092
GPR[ESUN]-1659912293092
GPR[SSUN]-1659912293092
-128675625
GPR[SPVATF]-1659912293317
GPR[EPVATF]-1659912293927
GPR[SPS]-1659912293927
[223961] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:261.
GPR[EPS]-1659912294452
GPR[SPVATF]-1659912294452
GPR[EPVATF]-1659912294983
GPR[SPS]-1659912294983
[225024] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:261.
GPR[EPS]-1659912295515
GPR[ESUN]-1659912295515
GPR[SSUN]-1659912295515
-128675625
GPR[SPVATF]-1659912295737
GPR[EPVATF]-1659912296279
GPR[SPS]-1659912296279
[226312] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:258.
GPR[EPS]-1659912296803
GPR[ESUN]-1659912296803
GPR[SSUN]-1659912296803
-128675625
GPR[SPVATF]-1659912297026
GPR[EPVATF]-1659912297575
GPR[SPS]-1659912297575
[227615] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:257.
GPR[EPS]-1659912298106
GPR[ESUN]-1659912298106
GPR[SSUN]-1659912298106
-1516948592
GPR[ESUN]-1659912298285
GPR[SSUN]-1659912298285
-1516948592
GPR[SPVATF]-1659912298461
GPR[EPVATF]-1659912298958
GPR[SPS]-1659912298958
[228934] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:152.
GPR[EPS]-1659912299425
GPR[ESUN]-1659912299425
GPR[SSUN]-1659912299425
-1516948592
GPR[SPVATF]-1659912299607
GPR[EPVATF]-1659912300152
GPR[SPS]-1659912300152
[230139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:141.
GPR[EPS]-1659912300630
GPR[ESUN]-1659912300630
GPR[SSUN]-1659912300630
-1516948592
GPR[SPVATF]-1659912300809
GPR[EPVATF]-1659912301299
GPR[SPS]-1659912301299
[231282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:140.
GPR[EPS]-1659912301773
GPR[ESUN]-1659912301773
GPR[SSUN]-1659912301773
-1516948592
GPR[ESUN]-1659912301955
GPR[SSUN]-1659912301955
-1516948592
GPR[SPVATF]-1659912302134
GPR[EPVATF]-1659912302651
GPR[SPS]-1659912302651
[232649] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:136.
GPR[EPS]-1659912303140
GPR[ESUN]-1659912303140
GPR[SSUN]-1659912303140
-1516948592
GPR[SPVATF]-1659912303321
GPR[EPVATF]-1659912303831
GPR[SPS]-1659912303831
[233801] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:135.
GPR[EPS]-1659912304292
GPR[ESUN]-1659912304292
GPR[SSUN]-1659912304292
-1516948592
GPR[ESUN]-1659912304469
GPR[SSUN]-1659912304469
-1516948592
GPR[SPVATF]-1659912304644
GPR[EPVATF]-1659912305199
GPR[SPS]-1659912305199
[235171] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:131.
GPR[EPS]-1659912305662
GPR[ESUN]-1659912305662
GPR[SSUN]-1659912305663
-1516948592
GPR[SPVATF]-1659912305842
GPR[EPVATF]-1659912306381
GPR[SPS]-1659912306381
[236429] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:130.
GPR[EPS]-1659912306920
GPR[ESUN]-1659912306920
GPR[SSUN]-1659912306920
-1516948592
GPR[SPVATF]-1659912307100
GPR[EPVATF]-1659912307649
GPR[SPS]-1659912307649
[237651] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:129.
GPR[EPS]-1659912308143
GPR[ESUN]-1659912308143
GPR[SSUN]-1659912308143
1965452846
GPR[ESUN]-1659912308355
GPR[SSUN]-1659912308355
1965452846
GPR[ESUN]-1659912308559
GPR[SSUN]-1659912308559
1965452846
GPR[SPVATF]-1659912308763
GPR[EPVATF]-1659912309320
GPR[SPS]-1659912309320
[239464] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:315.
GPR[EPS]-1659912309955
GPR[ESUN]-1659912309956
GPR[SSUN]-1659912309956
1965452846
GPR[SPVATF]-1659912310160
GPR[EPVATF]-1659912310724
GPR[SPS]-1659912310724
[240773] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:314.
GPR[EPS]-1659912311264
GPR[ESUN]-1659912311264
GPR[SSUN]-1659912311264
1965452846
GPR[ESUN]-1659912311488
GPR[SSUN]-1659912311488
2433571
GPR[SPVATF]-1659912311716
GPR[EPVATF]-1659912313246
GPR[SPS]-1659912313246
[243766] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:967.
GPR[EPS]-1659912314257
GPR[SPVATF]-1659912314257
GPR[EPVATF]-1659912314847
GPR[SPS]-1659912314847
[444999] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659912515490
GPR[SSUN]-1659912515490
-1765952779
GPR[ESUN]-1659912515856
GPR[SSUN]-1659912515856
-1765952779
GPR[SPVATF]-1659912516064
GPR[EPVATF]-1659912516435
GPR[SPS]-1659912516435
[446460] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:192.
GPR[EPS]-1659912516951
GPR[ESUN]-1659912516951
GPR[SSUN]-1659912516951
-1765952779
GPR[SPVATF]-1659912517162
GPR[EPVATF]-1659912517531
GPR[SPS]-1659912517531
[447553] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:191.
GPR[EPS]-1659912518044
GPR[ESUN]-1659912518044
GPR[SSUN]-1659912518044
-1119592721
GPR[ESUN]-1659912518267
GPR[SSUN]-1659912518267
-1119592721
GPR[SPVATF]-1659912518490
GPR[EPVATF]-1659912518849
GPR[SPS]-1659912518849
[448916] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:259.
GPR[EPS]-1659912519407
GPR[ESUN]-1659912519408
GPR[SSUN]-1659912519408
-1119592721
GPR[SPVATF]-1659912519630
GPR[EPVATF]-1659912519990
GPR[SPS]-1659912519990
[450023] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:258.
GPR[EPS]-1659912520514
GPR[ESUN]-1659912520514
GPR[SSUN]-1659912520514
69062959
GPR[ESUN]-1659912520720
GPR[SSUN]-1659912520720
69062959
GPR[ESUN]-1659912520902
GPR[SSUN]-1659912520902
69062959
GPR[ESUN]-1659912521083
GPR[SSUN]-1659912521083
69062959
GPR[SPVATF]-1659912521265
GPR[EPVATF]-1659912521732
GPR[SPS]-1659912521732
[451733] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:350.
GPR[EPS]-1659912522224
GPR[ESUN]-1659912522224
GPR[SSUN]-1659912522224
69062959
GPR[SPVATF]-1659912522411
GPR[EPVATF]-1659912522861
GPR[SPS]-1659912522861
[452848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:349.
GPR[EPS]-1659912523339
GPR[ESUN]-1659912523340
GPR[SSUN]-1659912523340
69062959
GPR[ESUN]-1659912523526
GPR[SSUN]-1659912523526
69062959
GPR[ESUN]-1659912523709
GPR[SSUN]-1659912523709
69062959
GPR[SPVATF]-1659912523892
GPR[EPVATF]-1659912524342
GPR[SPS]-1659912524342
[454342] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:341.
GPR[EPS]-1659912524833
GPR[ESUN]-1659912524833
GPR[SSUN]-1659912524833
69062959
GPR[SPVATF]-1659912525021
GPR[EPVATF]-1659912525468
GPR[SPS]-1659912525468
[455513] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:340.
GPR[EPS]-1659912526004
GPR[ESUN]-1659912526004
GPR[SSUN]-1659912526004
69062959
GPR[SPVATF]-1659912526188
GPR[EPVATF]-1659912526681
GPR[SPS]-1659912526681
[456675] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:339.
GPR[EPS]-1659912527166
GPR[ESUN]-1659912527166
GPR[SSUN]-1659912527166
69062959
GPR[SPVATF]-1659912527354
GPR[EPVATF]-1659912527815
GPR[SPS]-1659912527815
[457802] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:338.
GPR[EPS]-1659912528293
GPR[ESUN]-1659912528293
GPR[SSUN]-1659912528293
69062959
GPR[ESUN]-1659912528478
GPR[SSUN]-1659912528478
69062959
GPR[SPVATF]-1659912528661
GPR[EPVATF]-1659912529120
GPR[SPS]-1659912529120
[459127] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:280.
GPR[EPS]-1659912529618
GPR[ESUN]-1659912529618
GPR[SSUN]-1659912529618
69062959
GPR[SPVATF]-1659912529803
GPR[EPVATF]-1659912530268
GPR[SPS]-1659912530268
[460270] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:278.
GPR[EPS]-1659912530761
GPR[ESUN]-1659912530761
GPR[SSUN]-1659912530761
69062959
GPR[ESUN]-1659912530948
GPR[SSUN]-1659912530948
69062959
GPR[SPVATF]-1659912531130
GPR[EPVATF]-1659912531608
GPR[SPS]-1659912531608
[461596] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:270.
GPR[EPS]-1659912532087
GPR[ESUN]-1659912532087
GPR[SSUN]-1659912532087
69062959
GPR[SPVATF]-1659912532339
GPR[EPVATF]-1659912532851
GPR[SPS]-1659912532851
[462840] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:268.
GPR[EPS]-1659912533331
GPR[ESUN]-1659912533331
GPR[SSUN]-1659912533331
69062959
GPR[SPVATF]-1659912533517
GPR[EPVATF]-1659912534002
GPR[SPS]-1659912534002
[463988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:267.
GPR[EPS]-1659912534479
GPR[SPVATF]-1659912534479
GPR[EPVATF]-1659912534973
GPR[SPS]-1659912534973
[464962] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:267.
GPR[EPS]-1659912535453
GPR[ESUN]-1659912535453
GPR[SSUN]-1659912535453
69062959
GPR[ESUN]-1659912535637
GPR[SSUN]-1659912535637
69062959
GPR[SPVATF]-1659912535816
GPR[EPVATF]-1659912536367
GPR[SPS]-1659912536367
[466355] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:259.
GPR[EPS]-1659912536846
GPR[ESUN]-1659912536846
GPR[SSUN]-1659912536846
69062959
GPR[SPVATF]-1659912537030
GPR[EPVATF]-1659912537528
GPR[SPS]-1659912537528
[467522] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:257.
GPR[EPS]-1659912538013
GPR[ESUN]-1659912538013
GPR[SSUN]-1659912538013
69062959
GPR[ESUN]-1659912538200
GPR[SSUN]-1659912538200
69062959
GPR[SPVATF]-1659912538383
GPR[EPVATF]-1659912538899
GPR[SPS]-1659912538900
[468883] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:249.
GPR[EPS]-1659912539374
GPR[ESUN]-1659912539374
GPR[SSUN]-1659912539374
69062959
GPR[SPVATF]-1659912539562
GPR[EPVATF]-1659912540151
GPR[SPS]-1659912540151
[470145] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:247.
GPR[EPS]-1659912540636
GPR[ESUN]-1659912540636
GPR[SSUN]-1659912540636
69062959
GPR[SPVATF]-1659912540820
GPR[EPVATF]-1659912541351
GPR[SPS]-1659912541351
[471335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:246.
GPR[EPS]-1659912541826
GPR[SPVATF]-1659912541826
GPR[EPVATF]-1659912542377
GPR[SPS]-1659912542377
[472363] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:246.
GPR[EPS]-1659912542854
GPR[ESUN]-1659912542854
GPR[SSUN]-1659912542855
80988634
GPR[ESUN]-1659912543028
GPR[SSUN]-1659912543028
2433571
GPR[SPVATF]-1659912543256
GPR[EPVATF]-1659912543920
GPR[SPS]-1659912543920
[474036] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659912544527
GPR[SPVATF]-1659912544528
GPR[EPVATF]-1659912545191
GPR[SPS]-1659912545191
[476115] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659912546606
GPR[ESUN]-1659912546606
GPR[SSUN]-1659912546606
-1765952779
GPR[SPVATF]-1659912546823
GPR[EPVATF]-1659912547662
GPR[SPS]-1659912547662
[477784] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:208.
GPR[EPS]-1659912548275
GPR[ESUN]-1659912548275
GPR[SSUN]-1659912548275
-1765952779
GPR[SPVATF]-1659912548485
GPR[EPVATF]-1659912549037
GPR[SPS]-1659912549037
[479074] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:207.
GPR[EPS]-1659912549565
GPR[SPVATF]-1659912549565
GPR[EPVATF]-1659912550106
GPR[SPS]-1659912550106
[480136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:207.
GPR[EPS]-1659912550627
GPR[ESUN]-1659912550627
GPR[SSUN]-1659912550627
-1765952779
GPR[SPVATF]-1659912550837
GPR[EPVATF]-1659912551366
GPR[SPS]-1659912551366
[481439] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:206.
GPR[EPS]-1659912551930
GPR[ESUN]-1659912551930
GPR[SSUN]-1659912551930
2433571
GPR[ESUN]-1659912552165
GPR[SSUN]-1659912552165
2433571
GPR[SPVATF]-1659912552391
GPR[EPVATF]-1659912552959
GPR[SPS]-1659912552959
[483117] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:998.
GPR[EPS]-1659912553608
GPR[SPVATF]-1659912553609
GPR[EPVATF]-1659912554135
GPR[SPS]-1659912554135
[484273] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:998.
GPR[EPS]-1659912554764
GPR[ESUN]-1659912554764
GPR[SSUN]-1659912554764
2433571
GPR[SPVATF]-1659912554997
GPR[EPVATF]-1659912555554
GPR[SPS]-1659912555554
[485691] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659912556182
GPR[SPVATF]-1659912556183
GPR[EPVATF]-1659912556733
GPR[SPS]-1659912556733
[486887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659912557378
GPR[ESUN]-1659912557378
GPR[SSUN]-1659912557378
2433571
GPR[SPVATF]-1659912557612
GPR[EPVATF]-1659912558140
GPR[SPS]-1659912558140
[488288] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659912558779
GPR[SPVATF]-1659912558823
GPR[EPVATF]-1659912559358
GPR[SPS]-1659912559358
[489510] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659912560001
GPR[ESUN]-1659912560001
GPR[SSUN]-1659912560001
2433571
GPR[SPVATF]-1659912560234
GPR[EPVATF]-1659912560778
GPR[SPS]-1659912560778
[490919] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659912561410
GPR[SPVATF]-1659912561410
GPR[EPVATF]-1659912561961
GPR[SPS]-1659912561961
[492156] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659912562647
GPR[ESUN]-1659912562647
GPR[SSUN]-1659912562647
2433571
GPR[SPVATF]-1659912562875
GPR[EPVATF]-1659912563442
GPR[SPS]-1659912563442
[493574] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:953.
GPR[EPS]-1659912564065
GPR[ESUN]-1659912564065
GPR[SSUN]-1659912564066
2433571
GPR[ESUN]-1659912564298
GPR[SSUN]-1659912564298
2433571
GPR[SPVATF]-1659912564584
GPR[EPVATF]-1659912565163
GPR[SPS]-1659912565164
[495345] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:944.
GPR[EPS]-1659912565836
GPR[ESUN]-1659912565836
GPR[SSUN]-1659912565836
2433571
GPR[ESUN]-1659912566067
GPR[SSUN]-1659912566067
1852376448
GPR[ESUN]-1659912566279
GPR[SSUN]-1659912566279
1852376448
GPR[SPVATF]-1659912566489
GPR[EPVATF]-1659912567001
GPR[SPS]-1659912567001
[497020] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:196.
GPR[EPS]-1659912567511
GPR[ESUN]-1659912567511
GPR[SSUN]-1659912567511
-1119592721
GPR[SPVATF]-1659912567732
GPR[EPVATF]-1659912568324
GPR[SPS]-1659912568324
[498371] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:272.
GPR[EPS]-1659912568862
GPR[ESUN]-1659912568862
GPR[SSUN]-1659912568862
-1119592721
GPR[SPVATF]-1659912569083
GPR[EPVATF]-1659912569699
GPR[SPS]-1659912569699
[499730] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:271.
GPR[EPS]-1659912570221
GPR[ESUN]-1659912570221
GPR[SSUN]-1659912570221
2433571
GPR[ESUN]-1659912570446
GPR[SSUN]-1659912570446
-1119592721
GPR[SPVATF]-1659912570731
GPR[EPVATF]-1659912571127
GPR[SPS]-1659912571127
[501169] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:333.
GPR[EPS]-1659912571660
GPR[ESUN]-1659912571660
GPR[SSUN]-1659912571661
1852376448
GPR[ESUN]-1659912571874
GPR[SSUN]-1659912571874
-128675625
GPR[SPVATF]-1659912572093
GPR[EPVATF]-1659912572772
GPR[SPS]-1659912572772
[502824] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:253.
GPR[EPS]-1659912573315
GPR[SPVATF]-1659912573315
GPR[EPVATF]-1659912573988
GPR[SPS]-1659912573988
[504079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:253.
GPR[EPS]-1659912574570
GPR[ESUN]-1659912574570
GPR[SSUN]-1659912574570
-1119592721
GPR[ESUN]-1659912574796
GPR[SSUN]-1659912574796
-128675625
GPR[SPVATF]-1659912575020
GPR[EPVATF]-1659912575738
GPR[SPS]-1659912575738
[505981] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:212.
GPR[EPS]-1659912576472
GPR[ESUN]-1659912576472
GPR[SSUN]-1659912576472
-128675625
GPR[ESUN]-1659912576698
GPR[SSUN]-1659912576698
-128675625
GPR[SPVATF]-1659912576920
GPR[EPVATF]-1659912577611
GPR[SPS]-1659912577611
[507707] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:146.
GPR[EPS]-1659912578198
GPR[SPVATF]-1659912578198
GPR[EPVATF]-1659912578930
GPR[SPS]-1659912578930
[508950] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:146.
GPR[EPS]-1659912579441
GPR[ESUN]-1659912579441
GPR[SSUN]-1659912579441
-1119592721
GPR[SPVATF]-1659912579663
GPR[EPVATF]-1659912580409
GPR[SPS]-1659912580409
[510438] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:431.
GPR[EPS]-1659912580929
GPR[ESUN]-1659912580929
GPR[SSUN]-1659912580929
-1119592721
GPR[ESUN]-1659912581150
GPR[SSUN]-1659912581150
-1119592721
GPR[ESUN]-1659912581372
GPR[SSUN]-1659912581372
-1119592721
GPR[ESUN]-1659912581591
GPR[SSUN]-1659912581591
-1119592721
GPR[SPVATF]-1659912581810
GPR[EPVATF]-1659912583423
GPR[SPS]-1659912583423
[513932] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:426.
GPR[EPS]-1659912584423
GPR[ESUN]-1659912584423
GPR[SSUN]-1659912584423
-128675625
GPR[SPVATF]-1659912584826
GPR[EPVATF]-1659912585516
GPR[SPS]-1659912585516
[515662] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:199.
GPR[EPS]-1659912586153
GPR[ESUN]-1659912586153
GPR[SSUN]-1659912586153
-128675625
GPR[SPVATF]-1659912586374
GPR[EPVATF]-1659912586846
GPR[SPS]-1659912586846
[516883] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:254.
GPR[EPS]-1659912587374
GPR[ESUN]-1659912587374
GPR[SSUN]-1659912587374
1613130706
GPR[SPVATF]-1659912587581
GPR[EPVATF]-1659912587756
[517265] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912587756
GPR[EPVATF]-1659912587933
[517443] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912587934
GPR[SSUN]-1659912587934
1613130706
GPR[SPVATF]-1659912588137
GPR[EPVATF]-1659912588309
[517818] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912588309
GPR[EPVATF]-1659912588484
[517993] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912588484
GPR[SSUN]-1659912588484
1613130706
GPR[ESUN]-1659912588689
GPR[SSUN]-1659912588689
1613130706
GPR[ESUN]-1659912588890
GPR[SSUN]-1659912588890
1613130706
GPR[ESUN]-1659912589091
GPR[SSUN]-1659912589091
1613130706
GPR[ESUN]-1659912589292
GPR[SSUN]-1659912589292
1613130706
GPR[SPVATF]-1659912589494
GPR[EPVATF]-1659912589670
[519179] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912589670
GPR[EPVATF]-1659912589843
[519352] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912589843
GPR[SSUN]-1659912589843
-1119592721
GPR[SPVATF]-1659912590063
GPR[EPVATF]-1659912590461
GPR[SPS]-1659912590461
[520534] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:342.
GPR[EPS]-1659912591025
GPR[ESUN]-1659912591025
GPR[SSUN]-1659912591025
-1765952779
GPR[SPVATF]-1659912591238
GPR[EPVATF]-1659912591764
GPR[SPS]-1659912591764
[521811] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:247.
GPR[EPS]-1659912592302
GPR[ESUN]-1659912592302
GPR[SSUN]-1659912592302
-1765952779
GPR[SPVATF]-1659912592514
GPR[EPVATF]-1659912593054
GPR[SPS]-1659912593054
[523097] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:265.
GPR[EPS]-1659912593588
GPR[ESUN]-1659912593588
GPR[SSUN]-1659912593588
-1765952779
GPR[ESUN]-1659912593798
GPR[SSUN]-1659912593798
-1765952779
GPR[SPVATF]-1659912594005
GPR[EPVATF]-1659912594539
GPR[SPS]-1659912594539
[524575] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:205.
GPR[EPS]-1659912595066
GPR[SPVATF]-1659912595066
GPR[EPVATF]-1659912595598
GPR[SPS]-1659912595598
[525627] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:205.
GPR[EPS]-1659912596118
GPR[ESUN]-1659912596118
GPR[SSUN]-1659912596118
-1765952779
GPR[SPVATF]-1659912596330
GPR[EPVATF]-1659912596871
GPR[SPS]-1659912596871
[526897] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:203.
GPR[EPS]-1659912597388
GPR[ESUN]-1659912597388
GPR[SSUN]-1659912597388
-1765952779
GPR[ESUN]-1659912597653
GPR[SSUN]-1659912597653
80988634
GPR[ESUN]-1659912597824
GPR[SSUN]-1659912597824
-1765952779
GPR[ESUN]-1659912598029
GPR[SSUN]-1659912598029
-1765952779
GPR[SPVATF]-1659912598237
GPR[EPVATF]-1659912598767
GPR[SPS]-1659912598767
[528796] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:264.
GPR[EPS]-1659912599287
GPR[SPVATF]-1659912599287
GPR[EPVATF]-1659912599836
GPR[SPS]-1659912599836
[529873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:264.
GPR[EPS]-1659912600364
GPR[ESUN]-1659912600364
GPR[SSUN]-1659912600364
-1966087783
GPR[ESUN]-1659912600552
GPR[SSUN]-1659912600552
-1966087783
GPR[SPVATF]-1659912600735
GPR[EPVATF]-1659912600756
[530265] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912600756
GPR[EPVATF]-1659912600775
[530284] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912600775
GPR[SSUN]-1659912600775
-1966087783
GPR[SPVATF]-1659912600959
GPR[EPVATF]-1659912600978
[530487] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912600978
GPR[SSUN]-1659912600978
-1765952779
GPR[SPVATF]-1659912601185
GPR[EPVATF]-1659912601722
GPR[SPS]-1659912601722
[531760] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:261.
GPR[EPS]-1659912602251
GPR[SPVATF]-1659912602251
GPR[EPVATF]-1659912602798
GPR[SPS]-1659912602798
[532830] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:261.
GPR[EPS]-1659912603321
GPR[ESUN]-1659912603321
GPR[SSUN]-1659912603321
-1765952779
GPR[ESUN]-1659912603533
GPR[SSUN]-1659912603534
-128675625
GPR[SPVATF]-1659912603753
GPR[EPVATF]-1659912604299
GPR[SPS]-1659912604299
[534395] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:210.
GPR[EPS]-1659912604886
GPR[SPVATF]-1659912604886
GPR[EPVATF]-1659912605444
GPR[SPS]-1659912605444
[535477] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:210.
GPR[EPS]-1659912605968
GPR[ESUN]-1659912605968
GPR[SSUN]-1659912605968
-128675625
GPR[ESUN]-1659912606186
GPR[SSUN]-1659912606186
-128675625
GPR[SPVATF]-1659912606405
GPR[EPVATF]-1659912607058
GPR[SPS]-1659912607058
[537081] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:203.
GPR[EPS]-1659912607572
GPR[SPVATF]-1659912607572
GPR[EPVATF]-1659912608147
GPR[SPS]-1659912608147
[538178] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:203.
GPR[EPS]-1659912608670
GPR[ESUN]-1659912608670
GPR[SSUN]-1659912608670
-128675625
GPR[ESUN]-1659912608889
GPR[SSUN]-1659912608889
1613130706
GPR[SPVATF]-1659912609091
GPR[EPVATF]-1659912609269
[538778] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912609269
GPR[SSUN]-1659912609269
1613130706
GPR[ESUN]-1659912609474
GPR[SSUN]-1659912609474
1613130706
GPR[SPVATF]-1659912609676
GPR[EPVATF]-1659912609852
[539361] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912609853
GPR[EPVATF]-1659912610033
[539542] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912610034
GPR[SSUN]-1659912610034
1613130706
GPR[ESUN]-1659912610240
GPR[SSUN]-1659912610240
1613130706
GPR[SPVATF]-1659912610446
GPR[EPVATF]-1659912610624
[540133] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912610624
GPR[EPVATF]-1659912610803
[540312] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912610803
GPR[SSUN]-1659912610803
-1119592721
GPR[SPVATF]-1659912611025
GPR[EPVATF]-1659912611623
GPR[SPS]-1659912611623
[541479] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class MustBeReachingVariableDef extends com.google.javascript.jscomp.DataFlowAnalysis<com.google.javascript.rhino.Node, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> {
    private final com.google.javascript.jscomp.Scope jsScope;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final java.util.Set<com.google.javascript.jscomp.Scope.Var> escaped;

    MustBeReachingVariableDef(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg, com.google.javascript.jscomp.Scope jsScope, com.google.javascript.jscomp.AbstractCompiler compiler) {
        super(cfg, new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDefJoin());
        this.jsScope = jsScope;
        this.compiler = compiler;
        this.escaped = com.google.common.collect.Sets.newHashSet();
        com.google.javascript.jscomp.DataFlowAnalysis.computeEscaped(jsScope, escaped, compiler);
    }

    private static class Definition {
        final com.google.javascript.rhino.Node node;

        final java.util.Set<com.google.javascript.jscomp.Scope.Var> depends = com.google.common.collect.Sets.newHashSet();

        Definition(com.google.javascript.rhino.Node node) {
            this.node = node;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.MustBeReachingVariableDef.Definition)) {
                return false;
            }
            com.google.javascript.jscomp.MustBeReachingVariableDef.Definition otherDef = ((com.google.javascript.jscomp.MustBeReachingVariableDef.Definition) (other));
            return otherDef.node == node;
        }
    }

    static final class MustDef implements com.google.javascript.jscomp.graph.LatticeElement {
        final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> reachingDef;

        public MustDef() {
            reachingDef = com.google.common.collect.Maps.newHashMap();
        }

        public MustDef(java.util.Iterator<com.google.javascript.jscomp.Scope.Var> vars) {
            this();
            while (vars.hasNext()) {
                com.google.javascript.jscomp.Scope.Var var = vars.next();
                reachingDef.put(var, new com.google.javascript.jscomp.MustBeReachingVariableDef.Definition(var.scope.getRootNode()));
            } 
        }

        public MustDef(com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef other) {
            reachingDef = com.google.common.collect.Maps.newHashMap(other.reachingDef);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            return (other instanceof com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef) && ((com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef) (other)).reachingDef.equals(this.reachingDef);
        }
    }

    private static class MustDefJoin extends com.google.javascript.jscomp.JoinOp.BinaryJoinOp<com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> {
        @java.lang.Override
        public com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef apply(com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef a, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef b) {
            com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef result = new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef();
            java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> resultMap = result.reachingDef;
            for (java.util.Map.Entry<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> varEntry : a.reachingDef.entrySet()) {
                com.google.javascript.jscomp.Scope.Var var = varEntry.getKey();
                com.google.javascript.jscomp.MustBeReachingVariableDef.Definition aDef = varEntry.getValue();
                if (aDef == null) {
                    resultMap.put(var, null);
                    continue;
                }
                com.google.javascript.rhino.Node aNode = aDef.node;
                if (b.reachingDef.containsKey(var)) {
                    com.google.javascript.jscomp.MustBeReachingVariableDef.Definition bDef = b.reachingDef.get(var);
                    if (aDef.equals(bDef)) {
                        resultMap.put(var, aDef);
                    } else {
                        resultMap.put(var, null);
                    }
                } else {
                    resultMap.put(var, aDef);
                }
            }
            for (java.util.Map.Entry<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> entry : b.reachingDef.entrySet()) {
                com.google.javascript.jscomp.Scope.Var var = entry.getKey();
                if (!a.reachingDef.containsKey(var)) {
                    resultMap.put(var, entry.getValue());
                }
            }
            return result;
        }
    }

    @java.lang.Override
    boolean isForward() {
        return true;
    }

    @java.lang.Override
    com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef createEntryLattice() {
        return new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef(jsScope.getVars());
    }

    @java.lang.Override
    com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef createInitialEstimateLattice() {
        return new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef();
    }

    @java.lang.Override
    com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef flowThrough(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef input) {
        com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef output = new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef(input);
        computeMustDef(n, n, output, false);
        return output;
    }

    private void computeMustDef(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node cfgNode, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef output, boolean conditional) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.FUNCTION :
                return;
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.IF :
                computeMustDef(com.google.javascript.jscomp.NodeUtil.getConditionExpression(n), cfgNode, output, conditional);
                return;
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    computeMustDef(com.google.javascript.jscomp.NodeUtil.getConditionExpression(n), cfgNode, output, conditional);
                } else {
                    com.google.javascript.rhino.Node lhs = n.getFirstChild();
                    com.google.javascript.rhino.Node rhs = lhs.getNext();
                    if (lhs.isVar()) {
                        lhs = lhs.getLastChild();
                    }
                    if (lhs.isName()) {
                        addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);
                    }
                }
                return;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                computeMustDef(n.getFirstChild(), cfgNode, output, conditional);
                computeMustDef(n.getLastChild(), cfgNode, output, true);
                return;
            case com.google.javascript.rhino.Token.HOOK :
                computeMustDef(n.getFirstChild(), cfgNode, output, conditional);
                computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);
                computeMustDef(n.getLastChild(), cfgNode, output, true);
                return;
            case com.google.javascript.rhino.Token.VAR :
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (c.hasChildren()) {
                        computeMustDef(c.getFirstChild(), cfgNode, output, conditional);
                        addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output);
                    }
                }
                return;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    if (n.getFirstChild().isName()) {
                        com.google.javascript.rhino.Node name = n.getFirstChild();
                        computeMustDef(name.getNext(), cfgNode, output, conditional);
                        addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output);
                        return;
                    } else if (com.google.javascript.jscomp.NodeUtil.isGet(n.getFirstChild())) {
                        com.google.javascript.rhino.Node obj = n.getFirstChild().getFirstChild();
                        if (obj.isName() && "arguments".equals(obj.getString())) {
                            escapeParameters(output);
                        }
                    }
                }
                if (n.isName() && "arguments".equals(n.getString())) {
                    escapeParameters(output);
                }
                if (n.isDec() || n.isInc()) {
                    com.google.javascript.rhino.Node target = n.getFirstChild();
                    if (target.isName()) {
                        addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output);
                        return;
                    }
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    computeMustDef(c, cfgNode, output, conditional);
                }
        }
    }

    private void addToDefIfLocal(java.lang.String name, @javax.annotation.Nullable
    com.google.javascript.rhino.Node node, @javax.annotation.Nullable
    com.google.javascript.rhino.Node rValue, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef def) {
        com.google.javascript.jscomp.Scope.Var var = jsScope.getVar(name);
        if ((var == null) || (var.scope != jsScope)) {
            return;
        }
        for (com.google.javascript.jscomp.Scope.Var other : def.reachingDef.keySet()) {
            com.google.javascript.jscomp.MustBeReachingVariableDef.Definition otherDef = def.reachingDef.get(other);
            if (otherDef == null) {
                continue;
            }
            if (otherDef.depends.contains(var)) {
                def.reachingDef.put(other, null);
            }
        }
        if (!escaped.contains(var)) {
            if (node == null) {
                def.reachingDef.put(var, null);
            } else {
                com.google.javascript.jscomp.MustBeReachingVariableDef.Definition definition = new com.google.javascript.jscomp.MustBeReachingVariableDef.Definition(node);
                if (rValue != null) {
                    computeDependence(definition, rValue);
                }
                def.reachingDef.put(var, definition);
            }
        }
    }

    private void escapeParameters(com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef output) {
        for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> i = jsScope.getVars(); i.hasNext();) {
            com.google.javascript.jscomp.Scope.Var v = i.next();
            if (isParameter(v)) {
                output.reachingDef.put(v, null);
            }
        }
        for (java.util.Map.Entry<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> pair : output.reachingDef.entrySet()) {
            com.google.javascript.jscomp.MustBeReachingVariableDef.Definition value = pair.getValue();
            if (value == null) {
                continue;
            }
            for (com.google.javascript.jscomp.Scope.Var dep : value.depends) {
                if (isParameter(dep)) {
                    output.reachingDef.put(pair.getKey(), null);
                }
            }
        }
    }

    private boolean isParameter(com.google.javascript.jscomp.Scope.Var v) {
        return v.getParentNode().isParamList();
    }

    private void computeDependence(final com.google.javascript.jscomp.MustBeReachingVariableDef.Definition def, com.google.javascript.rhino.Node rValue) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, rValue, new com.google.javascript.jscomp.ControlFlowGraph.AbstractCfgNodeTraversalCallback() {
            @java.lang.Override
            public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
                if (n.isName() && jsScope.isDeclared(n.getString(), true)) {
                    com.google.javascript.jscomp.Scope.Var dep = jsScope.getVar(n.getString());
                    def.depends.add(dep);
                }
            }
        });
    }

    com.google.javascript.rhino.Node getDef(java.lang.String name, com.google.javascript.rhino.Node useNode) {
        com.google.common.base.Preconditions.checkArgument(getCfg().hasNode(useNode));
        com.google.javascript.jscomp.graph.GraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n = getCfg().getNode(useNode);
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> state = n.getAnnotation();
        com.google.javascript.jscomp.MustBeReachingVariableDef.Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));
        if (def == null) {
            return null;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(191).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.jscomp.MustBeReachingVariableDef.this.jsScope",com.google.javascript.jscomp.MustBeReachingVariableDef.this.jsScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("useNode",useNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("def",def);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.jscomp.MustBeReachingVariableDef.this.compiler",com.google.javascript.jscomp.MustBeReachingVariableDef.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped",com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("state",state);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectionEnds();
            }
            if (runtimeAngelicValue)
                return def.node;

        }
    }

    boolean dependsOnOuterScopeVars(java.lang.String name, com.google.javascript.rhino.Node useNode) {
        com.google.common.base.Preconditions.checkArgument(getCfg().hasNode(useNode));
        com.google.javascript.jscomp.graph.GraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n = getCfg().getNode(useNode);
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> state = n.getAnnotation();
        com.google.javascript.jscomp.MustBeReachingVariableDef.Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));
        for (com.google.javascript.jscomp.Scope.Var s : def.depends) {
            if (s.scope != jsScope) {
                return true;
            }
        }
        return false;
    }
}
[541479] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912611970
GPR[SSUN]-1659912611971
-1119592721
GPR[SPVATF]-1659912612267
GPR[EPVATF]-1659912612934
GPR[SPS]-1659912612934
[542786] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class MustBeReachingVariableDef extends com.google.javascript.jscomp.DataFlowAnalysis<com.google.javascript.rhino.Node, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> {
    private final com.google.javascript.jscomp.Scope jsScope;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final java.util.Set<com.google.javascript.jscomp.Scope.Var> escaped;

    MustBeReachingVariableDef(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg, com.google.javascript.jscomp.Scope jsScope, com.google.javascript.jscomp.AbstractCompiler compiler) {
        super(cfg, new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDefJoin());
        this.jsScope = jsScope;
        this.compiler = compiler;
        this.escaped = com.google.common.collect.Sets.newHashSet();
        com.google.javascript.jscomp.DataFlowAnalysis.computeEscaped(jsScope, escaped, compiler);
    }

    private static class Definition {
        final com.google.javascript.rhino.Node node;

        final java.util.Set<com.google.javascript.jscomp.Scope.Var> depends = com.google.common.collect.Sets.newHashSet();

        Definition(com.google.javascript.rhino.Node node) {
            this.node = node;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.MustBeReachingVariableDef.Definition)) {
                return false;
            }
            com.google.javascript.jscomp.MustBeReachingVariableDef.Definition otherDef = ((com.google.javascript.jscomp.MustBeReachingVariableDef.Definition) (other));
            return otherDef.node == node;
        }
    }

    static final class MustDef implements com.google.javascript.jscomp.graph.LatticeElement {
        final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> reachingDef;

        public MustDef() {
            reachingDef = com.google.common.collect.Maps.newHashMap();
        }

        public MustDef(java.util.Iterator<com.google.javascript.jscomp.Scope.Var> vars) {
            this();
            while (vars.hasNext()) {
                com.google.javascript.jscomp.Scope.Var var = vars.next();
                reachingDef.put(var, new com.google.javascript.jscomp.MustBeReachingVariableDef.Definition(var.scope.getRootNode()));
            } 
        }

        public MustDef(com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef other) {
            reachingDef = com.google.common.collect.Maps.newHashMap(other.reachingDef);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            return (other instanceof com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef) && ((com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef) (other)).reachingDef.equals(this.reachingDef);
        }
    }

    private static class MustDefJoin extends com.google.javascript.jscomp.JoinOp.BinaryJoinOp<com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> {
        @java.lang.Override
        public com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef apply(com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef a, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef b) {
            com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef result = new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef();
            java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> resultMap = result.reachingDef;
            for (java.util.Map.Entry<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> varEntry : a.reachingDef.entrySet()) {
                com.google.javascript.jscomp.Scope.Var var = varEntry.getKey();
                com.google.javascript.jscomp.MustBeReachingVariableDef.Definition aDef = varEntry.getValue();
                if (aDef == null) {
                    resultMap.put(var, null);
                    continue;
                }
                com.google.javascript.rhino.Node aNode = aDef.node;
                if (b.reachingDef.containsKey(var)) {
                    com.google.javascript.jscomp.MustBeReachingVariableDef.Definition bDef = b.reachingDef.get(var);
                    if (aDef.equals(bDef)) {
                        resultMap.put(var, aDef);
                    } else {
                        resultMap.put(var, null);
                    }
                } else {
                    resultMap.put(var, aDef);
                }
            }
            for (java.util.Map.Entry<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> entry : b.reachingDef.entrySet()) {
                com.google.javascript.jscomp.Scope.Var var = entry.getKey();
                if (!a.reachingDef.containsKey(var)) {
                    resultMap.put(var, entry.getValue());
                }
            }
            return result;
        }
    }

    @java.lang.Override
    boolean isForward() {
        return true;
    }

    @java.lang.Override
    com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef createEntryLattice() {
        return new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef(jsScope.getVars());
    }

    @java.lang.Override
    com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef createInitialEstimateLattice() {
        return new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef();
    }

    @java.lang.Override
    com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef flowThrough(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef input) {
        com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef output = new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef(input);
        computeMustDef(n, n, output, false);
        return output;
    }

    private void computeMustDef(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node cfgNode, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef output, boolean conditional) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.FUNCTION :
                return;
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.IF :
                computeMustDef(com.google.javascript.jscomp.NodeUtil.getConditionExpression(n), cfgNode, output, conditional);
                return;
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    computeMustDef(com.google.javascript.jscomp.NodeUtil.getConditionExpression(n), cfgNode, output, conditional);
                } else {
                    com.google.javascript.rhino.Node lhs = n.getFirstChild();
                    com.google.javascript.rhino.Node rhs = lhs.getNext();
                    if (lhs.isVar()) {
                        lhs = lhs.getLastChild();
                    }
                    if (lhs.isName()) {
                        addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);
                    }
                }
                return;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                computeMustDef(n.getFirstChild(), cfgNode, output, conditional);
                computeMustDef(n.getLastChild(), cfgNode, output, true);
                return;
            case com.google.javascript.rhino.Token.HOOK :
                computeMustDef(n.getFirstChild(), cfgNode, output, conditional);
                computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);
                computeMustDef(n.getLastChild(), cfgNode, output, true);
                return;
            case com.google.javascript.rhino.Token.VAR :
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (c.hasChildren()) {
                        computeMustDef(c.getFirstChild(), cfgNode, output, conditional);
                        addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output);
                    }
                }
                return;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    if (n.getFirstChild().isName()) {
                        com.google.javascript.rhino.Node name = n.getFirstChild();
                        computeMustDef(name.getNext(), cfgNode, output, conditional);
                        addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output);
                        return;
                    } else if (com.google.javascript.jscomp.NodeUtil.isGet(n.getFirstChild())) {
                        com.google.javascript.rhino.Node obj = n.getFirstChild().getFirstChild();
                        if (obj.isName() && "arguments".equals(obj.getString())) {
                            escapeParameters(output);
                        }
                    }
                }
                if (n.isName() && "arguments".equals(n.getString())) {
                    escapeParameters(output);
                }
                if (n.isDec() || n.isInc()) {
                    com.google.javascript.rhino.Node target = n.getFirstChild();
                    if (target.isName()) {
                        addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output);
                        return;
                    }
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    computeMustDef(c, cfgNode, output, conditional);
                }
        }
    }

    private void addToDefIfLocal(java.lang.String name, @javax.annotation.Nullable
    com.google.javascript.rhino.Node node, @javax.annotation.Nullable
    com.google.javascript.rhino.Node rValue, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef def) {
        com.google.javascript.jscomp.Scope.Var var = jsScope.getVar(name);
        if ((var == null) || (var.scope != jsScope)) {
            return;
        }
        for (com.google.javascript.jscomp.Scope.Var other : def.reachingDef.keySet()) {
            com.google.javascript.jscomp.MustBeReachingVariableDef.Definition otherDef = def.reachingDef.get(other);
            if (otherDef == null) {
                continue;
            }
            if (otherDef.depends.contains(var)) {
                def.reachingDef.put(other, null);
            }
        }
        if (!escaped.contains(var)) {
            if (node == null) {
                def.reachingDef.put(var, null);
            } else {
                com.google.javascript.jscomp.MustBeReachingVariableDef.Definition definition = new com.google.javascript.jscomp.MustBeReachingVariableDef.Definition(node);
                if (rValue != null) {
                    computeDependence(definition, rValue);
                }
                def.reachingDef.put(var, definition);
            }
        }
    }

    private void escapeParameters(com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef output) {
        for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> i = jsScope.getVars(); i.hasNext();) {
            com.google.javascript.jscomp.Scope.Var v = i.next();
            if (isParameter(v)) {
                output.reachingDef.put(v, null);
            }
        }
        for (java.util.Map.Entry<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> pair : output.reachingDef.entrySet()) {
            com.google.javascript.jscomp.MustBeReachingVariableDef.Definition value = pair.getValue();
            if (value == null) {
                continue;
            }
            for (com.google.javascript.jscomp.Scope.Var dep : value.depends) {
                if (isParameter(dep)) {
                    output.reachingDef.put(pair.getKey(), null);
                }
            }
        }
    }

    private boolean isParameter(com.google.javascript.jscomp.Scope.Var v) {
        return v.getParentNode().isParamList();
    }

    private void computeDependence(final com.google.javascript.jscomp.MustBeReachingVariableDef.Definition def, com.google.javascript.rhino.Node rValue) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, rValue, new com.google.javascript.jscomp.ControlFlowGraph.AbstractCfgNodeTraversalCallback() {
            @java.lang.Override
            public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
                if (n.isName() && jsScope.isDeclared(n.getString(), true)) {
                    com.google.javascript.jscomp.Scope.Var dep = jsScope.getVar(n.getString());
                    def.depends.add(dep);
                }
            }
        });
    }

    com.google.javascript.rhino.Node getDef(java.lang.String name, com.google.javascript.rhino.Node useNode) {
        com.google.common.base.Preconditions.checkArgument(getCfg().hasNode(useNode));
        com.google.javascript.jscomp.graph.GraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n = getCfg().getNode(useNode);
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> state = n.getAnnotation();
        com.google.javascript.jscomp.MustBeReachingVariableDef.Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));
        if (def == null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(192).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("com.google.javascript.jscomp.MustBeReachingVariableDef.this.jsScope",com.google.javascript.jscomp.MustBeReachingVariableDef.this.jsScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("useNode",useNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("def",def);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("com.google.javascript.jscomp.MustBeReachingVariableDef.this.compiler",com.google.javascript.jscomp.MustBeReachingVariableDef.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped",com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("state",state);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectionEnds();
            }
            if (runtimeAngelicValue)
                return null;

        } else {
            return def.node;
        }
    }

    boolean dependsOnOuterScopeVars(java.lang.String name, com.google.javascript.rhino.Node useNode) {
        com.google.common.base.Preconditions.checkArgument(getCfg().hasNode(useNode));
        com.google.javascript.jscomp.graph.GraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n = getCfg().getNode(useNode);
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> state = n.getAnnotation();
        com.google.javascript.jscomp.MustBeReachingVariableDef.Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));
        for (com.google.javascript.jscomp.Scope.Var s : def.depends) {
            if (s.scope != jsScope) {
                return true;
            }
        }
        return false;
    }
}
[542786] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912613277
GPR[SSUN]-1659912613277
-128675625
GPR[SPVATF]-1659912613499
GPR[EPVATF]-1659912614134
GPR[SPS]-1659912614134
[544157] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:195.
GPR[EPS]-1659912614649
GPR[SPVATF]-1659912614649
GPR[EPVATF]-1659912615314
GPR[SPS]-1659912615314
[545340] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:195.
GPR[EPS]-1659912615831
GPR[ESUN]-1659912615831
GPR[SSUN]-1659912615831
-1119592721
GPR[ESUN]-1659912616056
GPR[SSUN]-1659912616056
-1119592721
GPR[SPVATF]-1659912616275
GPR[EPVATF]-1659912616934
GPR[SPS]-1659912616934
[546983] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:270.
GPR[EPS]-1659912617474
GPR[SPVATF]-1659912617474
GPR[EPVATF]-1659912618166
GPR[SPS]-1659912618166
[549062] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:270.
GPR[EPS]-1659912619553
GPR[ESUN]-1659912619553
GPR[SSUN]-1659912619553
-1119592721
GPR[SPVATF]-1659912619789
GPR[EPVATF]-1659912620594
GPR[SPS]-1659912620594
[550844] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:269.
GPR[EPS]-1659912621335
GPR[ESUN]-1659912621335
GPR[SSUN]-1659912621336
-1119592721
GPR[ESUN]-1659912621556
GPR[SSUN]-1659912621556
-1119592721
GPR[SPVATF]-1659912621775
GPR[EPVATF]-1659912622344
GPR[SPS]-1659912622344
[552396] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:396.
GPR[EPS]-1659912622887
GPR[SPVATF]-1659912622888
GPR[EPVATF]-1659912623421
GPR[SPS]-1659912623421
[553462] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:396.
GPR[EPS]-1659912623953
GPR[ESUN]-1659912623953
GPR[SSUN]-1659912623953
-1119592721
GPR[ESUN]-1659912624173
GPR[SSUN]-1659912624173
-1119592721
GPR[SPVATF]-1659912624394
GPR[EPVATF]-1659912624936
GPR[SPS]-1659912624936
[554982] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:392.
GPR[EPS]-1659912625473
GPR[ESUN]-1659912625473
GPR[SSUN]-1659912625473
-1119592721
GPR[SPVATF]-1659912625693
GPR[EPVATF]-1659912626231
GPR[SPS]-1659912626231
[556305] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:352.
GPR[EPS]-1659912626796
GPR[ESUN]-1659912626796
GPR[SSUN]-1659912626796
-1119592721
GPR[SPVATF]-1659912627016
GPR[EPVATF]-1659912627547
GPR[SPS]-1659912627547
[557589] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:354.
GPR[EPS]-1659912628080
GPR[ESUN]-1659912628080
GPR[SSUN]-1659912628080
-1119592721
GPR[SPVATF]-1659912628301
GPR[EPVATF]-1659912628840
GPR[SPS]-1659912628840
[558893] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:351.
GPR[EPS]-1659912629384
GPR[SPVATF]-1659912629384
GPR[EPVATF]-1659912629931
GPR[SPS]-1659912629931
[559993] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:351.
GPR[EPS]-1659912630484
GPR[ESUN]-1659912630484
GPR[SSUN]-1659912630484
-1119592721
GPR[ESUN]-1659912630707
GPR[SSUN]-1659912630707
-1119592721
GPR[SPVATF]-1659912630926
GPR[EPVATF]-1659912631460
GPR[SPS]-1659912631460
[561512] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:347.
GPR[EPS]-1659912632003
GPR[SPVATF]-1659912632003
GPR[EPVATF]-1659912632547
GPR[SPS]-1659912632547
[562594] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:347.
GPR[EPS]-1659912633085
GPR[ESUN]-1659912633085
GPR[SSUN]-1659912633085
-1765952779
GPR[SPVATF]-1659912633297
GPR[EPVATF]-1659912633843
GPR[SPS]-1659912633843
[563928] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:250.
GPR[EPS]-1659912634419
GPR[ESUN]-1659912634419
GPR[SSUN]-1659912634419
1187751237
GPR[SPVATF]-1659912634691
GPR[EPVATF]-1659912635251
GPR[SPS]-1659912635251
[565442] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1608.
GPR[EPS]-1659912635933
GPR[ESUN]-1659912635933
GPR[SSUN]-1659912635933
-1119592721
GPR[ESUN]-1659912636276
GPR[SSUN]-1659912636276
-1119592721
GPR[SPVATF]-1659912636493
GPR[EPVATF]-1659912637052
GPR[SPS]-1659912637052
[567105] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:346.
GPR[EPS]-1659912637596
GPR[SPVATF]-1659912637596
GPR[EPVATF]-1659912638222
GPR[SPS]-1659912638222
[568266] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:346.
GPR[EPS]-1659912638757
GPR[ESUN]-1659912638757
GPR[SSUN]-1659912638757
-1119592721
GPR[ESUN]-1659912638978
GPR[SSUN]-1659912638978
-1119592721
GPR[SPVATF]-1659912639196
GPR[EPVATF]-1659912639781
GPR[SPS]-1659912639781
[569823] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:341.
GPR[EPS]-1659912640314
GPR[SPVATF]-1659912640314
GPR[EPVATF]-1659912640907
GPR[SPS]-1659912640907
[571008] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:341.
GPR[EPS]-1659912641499
GPR[ESUN]-1659912641499
GPR[SSUN]-1659912641499
-1119592721
GPR[SPVATF]-1659912641722
GPR[EPVATF]-1659912642411
GPR[SPS]-1659912642411
[572441] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:338.
GPR[EPS]-1659912642932
GPR[SPVATF]-1659912642933
GPR[EPVATF]-1659912643562
GPR[SPS]-1659912643562
[573596] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:338.
GPR[EPS]-1659912644087
GPR[ESUN]-1659912644088
GPR[SSUN]-1659912644088
-1119592721
GPR[ESUN]-1659912644310
GPR[SSUN]-1659912644310
-1119592721
GPR[SPVATF]-1659912644529
GPR[EPVATF]-1659912645185
GPR[SPS]-1659912645185
[575219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:336.
GPR[EPS]-1659912645710
GPR[ESUN]-1659912645710
GPR[SSUN]-1659912645710
-1765952779
GPR[ESUN]-1659912645918
GPR[SSUN]-1659912645918
-1765952779
GPR[SPVATF]-1659912646126
GPR[EPVATF]-1659912646800
GPR[SPS]-1659912646800
[576816] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:249.
GPR[EPS]-1659912647307
GPR[SPVATF]-1659912647307
GPR[EPVATF]-1659912647983
GPR[SPS]-1659912647983
[578079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:249.
GPR[EPS]-1659912648570
GPR[ESUN]-1659912648570
GPR[SSUN]-1659912648570
1852376448
GPR[SPVATF]-1659912648786
GPR[EPVATF]-1659912649484
GPR[SPS]-1659912649484
[579488] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:158.
GPR[EPS]-1659912649979
GPR[ESUN]-1659912649979
GPR[SSUN]-1659912649979
-1119592721
GPR[SPVATF]-1659912650200
GPR[EPVATF]-1659912650922
GPR[SPS]-1659912650922
[580953] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:332.
GPR[EPS]-1659912651444
GPR[SPVATF]-1659912651444
GPR[EPVATF]-1659912652187
GPR[SPS]-1659912652187
[582220] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:332.
GPR[EPS]-1659912652711
GPR[ESUN]-1659912652711
GPR[SSUN]-1659912652711
-1119592721
GPR[ESUN]-1659912652935
GPR[SSUN]-1659912652935
-1765952779
GPR[ESUN]-1659912653141
GPR[SSUN]-1659912653141
-1765952779
GPR[SPVATF]-1659912653349
GPR[EPVATF]-1659912654110
GPR[SPS]-1659912654110
[584995] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:161.
GPR[EPS]-1659912655486
GPR[ESUN]-1659912655486
GPR[SSUN]-1659912655486
-128675625
GPR[SPVATF]-1659912655714
GPR[EPVATF]-1659912656573
GPR[SPS]-1659912656573
[587006] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates:182.
GPR[EPS]-1659912657497
GPR[ESUN]-1659912657497
GPR[SSUN]-1659912657498
80988634
GPR[ESUN]-1659912657675
GPR[SSUN]-1659912657675
-1765952779
GPR[SPVATF]-1659912657883
GPR[EPVATF]-1659912658445
GPR[SPS]-1659912658445
[588499] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:246.
GPR[EPS]-1659912658990
GPR[SPVATF]-1659912658990
GPR[EPVATF]-1659912659542
GPR[SPS]-1659912659542
[589606] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:246.
GPR[EPS]-1659912660098
GPR[ESUN]-1659912660098
GPR[SSUN]-1659912660098
-1765952779
GPR[ESUN]-1659912660312
GPR[SSUN]-1659912660312
-1765952779
GPR[SPVATF]-1659912660522
GPR[EPVATF]-1659912661097
GPR[SPS]-1659912661097
[591179] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:233.
GPR[EPS]-1659912661670
GPR[ESUN]-1659912661670
GPR[SSUN]-1659912661670
-1966087783
GPR[SPVATF]-1659912661861
GPR[EPVATF]-1659912661883
[591392] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912661883
GPR[EPVATF]-1659912661904
[591413] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912661904
GPR[SSUN]-1659912661904
-1966087783
GPR[SPVATF]-1659912662091
GPR[EPVATF]-1659912662112
[591621] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912662112
GPR[EPVATF]-1659912662133
[591642] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912662133
GPR[SSUN]-1659912662133
-1966087783
GPR[SPVATF]-1659912662321
GPR[EPVATF]-1659912662343
[591852] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912662343
GPR[EPVATF]-1659912662363
[591872] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912662363
GPR[SSUN]-1659912662363
-1966087783
GPR[ESUN]-1659912662550
GPR[SSUN]-1659912662550
-1966087783
GPR[ESUN]-1659912662736
GPR[SSUN]-1659912662736
-1966087783
GPR[SPVATF]-1659912662922
GPR[EPVATF]-1659912662944
[592453] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912662944
GPR[EPVATF]-1659912662965
[592474] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912662965
GPR[SSUN]-1659912662965
-1966087783
GPR[SPVATF]-1659912663185
GPR[EPVATF]-1659912663207
[592716] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912663207
GPR[EPVATF]-1659912663228
[592737] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912663228
GPR[SSUN]-1659912663228
-1966087783
GPR[ESUN]-1659912663423
GPR[SSUN]-1659912663423
-1966087783
GPR[SPVATF]-1659912663611
GPR[EPVATF]-1659912663632
[593141] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912663632
GPR[SSUN]-1659912663632
-1765952779
GPR[ESUN]-1659912663845
GPR[SSUN]-1659912663845
-1765952779
GPR[SPVATF]-1659912664051
GPR[EPVATF]-1659912664657
GPR[SPS]-1659912664657
[594680] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:232.
GPR[EPS]-1659912665171
GPR[ESUN]-1659912665171
GPR[SSUN]-1659912665171
-1765952779
GPR[SPVATF]-1659912665380
GPR[EPVATF]-1659912665913
GPR[SPS]-1659912665913
[595949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:214.
GPR[EPS]-1659912666440
GPR[SPVATF]-1659912666440
GPR[EPVATF]-1659912666980
GPR[SPS]-1659912666980
[597007] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:214.
GPR[EPS]-1659912667498
GPR[ESUN]-1659912667498
GPR[SSUN]-1659912667498
-1119592721
GPR[SPVATF]-1659912667719
GPR[EPVATF]-1659912668257
GPR[SPS]-1659912668257
[598300] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:418.
GPR[EPS]-1659912668791
GPR[ESUN]-1659912668791
GPR[SSUN]-1659912668791
-1119592721
GPR[ESUN]-1659912669014
GPR[SSUN]-1659912669015
-1119592721
GPR[ESUN]-1659912669241
GPR[SSUN]-1659912669241
-1119592721
GPR[ESUN]-1659912669464
GPR[SSUN]-1659912669464
-1119592721
GPR[SPVATF]-1659912669700
GPR[EPVATF]-1659912670259
GPR[SPS]-1659912670259
[600348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:414.
GPR[EPS]-1659912670839
GPR[ESUN]-1659912670839
GPR[SSUN]-1659912670839
-128675625
GPR[ESUN]-1659912671060
GPR[SSUN]-1659912671060
-128675625
GPR[SPVATF]-1659912671277
GPR[EPVATF]-1659912671808
GPR[SPS]-1659912671808
[601850] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:192.
GPR[EPS]-1659912672341
GPR[SPVATF]-1659912672342
GPR[EPVATF]-1659912672881
GPR[SPS]-1659912672881
[602909] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:192.
GPR[EPS]-1659912673400
GPR[ESUN]-1659912673400
GPR[SSUN]-1659912673400
-128675625
GPR[ESUN]-1659912673623
GPR[SSUN]-1659912673623
-128675625
GPR[SPVATF]-1659912673842
GPR[EPVATF]-1659912674383
GPR[SPS]-1659912674383
[604441] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:145.
GPR[EPS]-1659912674932
GPR[ESUN]-1659912674932
GPR[SSUN]-1659912674932
-128675625
GPR[SPVATF]-1659912675154
GPR[EPVATF]-1659912675707
GPR[SPS]-1659912675707
[605738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:144.
GPR[EPS]-1659912676229
GPR[ESUN]-1659912676229
GPR[SSUN]-1659912676229
-128675625
GPR[SPVATF]-1659912676450
GPR[EPVATF]-1659912677008
GPR[SPS]-1659912677008
[607102] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:143.
GPR[EPS]-1659912677593
GPR[ESUN]-1659912677593
GPR[SSUN]-1659912677593
-128675625
GPR[SPVATF]-1659912677817
GPR[EPVATF]-1659912678374
GPR[SPS]-1659912678374
[608410] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:139.
GPR[EPS]-1659912678901
GPR[ESUN]-1659912678901
GPR[SSUN]-1659912678901
-128675625
GPR[SPVATF]-1659912679122
GPR[EPVATF]-1659912679695
GPR[SPS]-1659912679695
[609724] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:135.
GPR[EPS]-1659912680215
GPR[ESUN]-1659912680215
GPR[SSUN]-1659912680215
-128675625
GPR[SPVATF]-1659912680438
GPR[EPVATF]-1659912681021
GPR[SPS]-1659912681021
[611044] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:134.
GPR[EPS]-1659912681535
GPR[ESUN]-1659912681535
GPR[SSUN]-1659912681535
-128675625
GPR[SPVATF]-1659912681757
GPR[EPVATF]-1659912682405
GPR[SPS]-1659912682405
[612421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:133.
GPR[EPS]-1659912682912
GPR[ESUN]-1659912682912
GPR[SSUN]-1659912682912
-128675625
GPR[SPVATF]-1659912683132
GPR[EPVATF]-1659912683744
GPR[SPS]-1659912683744
[613761] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:132.
GPR[EPS]-1659912684252
GPR[ESUN]-1659912684252
GPR[SSUN]-1659912684252
-128675625
GPR[SPVATF]-1659912684473
GPR[EPVATF]-1659912685179
GPR[SPS]-1659912685179
[615194] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:131.
GPR[EPS]-1659912685685
GPR[ESUN]-1659912685685
GPR[SSUN]-1659912685685
-128675625
GPR[SPVATF]-1659912685906
GPR[EPVATF]-1659912686595
GPR[SPS]-1659912686595
[616612] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:130.
GPR[EPS]-1659912687103
GPR[ESUN]-1659912687103
GPR[SSUN]-1659912687103
-128675625
GPR[ESUN]-1659912687324
GPR[SSUN]-1659912687324
-128675625
GPR[SPVATF]-1659912687544
GPR[EPVATF]-1659912688215
GPR[SPS]-1659912688215
[618238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:122.
GPR[EPS]-1659912688729
GPR[SPVATF]-1659912688729
GPR[EPVATF]-1659912689418
GPR[SPS]-1659912689418
[619445] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:122.
GPR[EPS]-1659912689936
GPR[ESUN]-1659912689936
GPR[SSUN]-1659912689936
-128675625
GPR[ESUN]-1659912690158
GPR[SSUN]-1659912690158
-128675625
GPR[SPVATF]-1659912690378
GPR[EPVATF]-1659912691085
GPR[SPS]-1659912691085
[621114] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates:218.
GPR[EPS]-1659912691605
GPR[ESUN]-1659912691605
GPR[SSUN]-1659912691605
-128675625
GPR[ESUN]-1659912691829
GPR[SSUN]-1659912691829
-128675625
GPR[ESUN]-1659912692048
GPR[SSUN]-1659912692048
-128675625
GPR[ESUN]-1659912692269
GPR[SSUN]-1659912692269
-128675625
GPR[ESUN]-1659912692489
GPR[SSUN]-1659912692489
-128675625
GPR[SPVATF]-1659912692789
GPR[EPVATF]-1659912693612
GPR[SPS]-1659912693612
[623639] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates:180.
GPR[EPS]-1659912694130
GPR[SPVATF]-1659912694130
GPR[EPVATF]-1659912695700
GPR[SPS]-1659912695700
[626090] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates:180.
GPR[EPS]-1659912696581
GPR[ESUN]-1659912696581
GPR[SSUN]-1659912696581
-128675625
GPR[ESUN]-1659912696881
GPR[SSUN]-1659912696881
-1966087783
GPR[SPVATF]-1659912697077
GPR[EPVATF]-1659912697220
[626729] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912697220
GPR[SSUN]-1659912697220
-1966087783
GPR[ESUN]-1659912697404
GPR[SSUN]-1659912697404
-1966087783
GPR[SPVATF]-1659912697587
GPR[EPVATF]-1659912697608
[627117] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912697608
GPR[SSUN]-1659912697608
-1966087783
GPR[ESUN]-1659912697791
GPR[SSUN]-1659912697791
-1966087783
GPR[ESUN]-1659912697976
GPR[SSUN]-1659912697976
-1966087783
GPR[SPVATF]-1659912698160
GPR[EPVATF]-1659912698181
[627690] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912698181
GPR[SSUN]-1659912698181
-1966087783
GPR[SPVATF]-1659912698365
GPR[EPVATF]-1659912698386
[627896] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912698387
GPR[SSUN]-1659912698387
GPR[ESUN]-1659912698387
GPR[SSUN]-1659912698387
-1765952779
GPR[ESUN]-1659912698596
GPR[SSUN]-1659912698596
-1765952779
GPR[ESUN]-1659912698801
GPR[SSUN]-1659912698801
-1119592721
GPR[SPVATF]-1659912699020
GPR[EPVATF]-1659912699597
GPR[SPS]-1659912699597
[629654] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:314.
GPR[EPS]-1659912700145
GPR[ESUN]-1659912700145
GPR[SSUN]-1659912700146
-1765952779
GPR[ESUN]-1659912700354
GPR[SSUN]-1659912700354
-1765952779
GPR[SPVATF]-1659912700564
GPR[EPVATF]-1659912701118
GPR[SPS]-1659912701118
[631160] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:154.
GPR[EPS]-1659912701651
GPR[ESUN]-1659912701651
GPR[SSUN]-1659912701651
-1765952779
GPR[ESUN]-1659912701861
GPR[SSUN]-1659912701861
-1765952779
GPR[SPVATF]-1659912702069
GPR[EPVATF]-1659912702609
GPR[SPS]-1659912702609
[632666] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:148.
GPR[EPS]-1659912703157
GPR[ESUN]-1659912703157
GPR[SSUN]-1659912703157
-1765952779
GPR[ESUN]-1659912703370
GPR[SSUN]-1659912703370
-1765952779
GPR[ESUN]-1659912703577
GPR[SSUN]-1659912703577
-1765952779
GPR[ESUN]-1659912703784
GPR[SSUN]-1659912703784
-1119592721
GPR[ESUN]-1659912704002
GPR[SSUN]-1659912704002
-1119592721
GPR[SPVATF]-1659912704222
GPR[EPVATF]-1659912704759
GPR[SPS]-1659912704759
[634807] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:313.
GPR[EPS]-1659912705298
GPR[ESUN]-1659912705298
GPR[SSUN]-1659912705298
-1119592721
GPR[SPVATF]-1659912705521
GPR[EPVATF]-1659912706064
GPR[SPS]-1659912706064
[636110] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:304.
GPR[EPS]-1659912706601
GPR[SPVATF]-1659912706602
GPR[EPVATF]-1659912707206
GPR[SPS]-1659912707206
[637238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:304.
GPR[EPS]-1659912707729
GPR[ESUN]-1659912707729
GPR[SSUN]-1659912707729
-1119592721
GPR[SPVATF]-1659912707949
GPR[EPVATF]-1659912708485
GPR[SPS]-1659912708485
[638543] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:299.
GPR[EPS]-1659912709034
GPR[SPVATF]-1659912709035
GPR[EPVATF]-1659912709569
GPR[SPS]-1659912709569
[639662] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:299.
GPR[EPS]-1659912710153
GPR[ESUN]-1659912710153
GPR[SSUN]-1659912710153
-1119592721
GPR[SPVATF]-1659912710377
GPR[EPVATF]-1659912710909
GPR[SPS]-1659912710909
[640958] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:279.
GPR[EPS]-1659912711449
GPR[SPVATF]-1659912711449
GPR[EPVATF]-1659912712021
GPR[SPS]-1659912712021
[642062] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:279.
GPR[EPS]-1659912712553
GPR[ESUN]-1659912712553
GPR[SSUN]-1659912712553
-1765952779
GPR[ESUN]-1659912712765
GPR[SSUN]-1659912712765
1207178244
GPR[ESUN]-1659912712967
GPR[SSUN]-1659912712967
-1119592721
GPR[ESUN]-1659912713184
GPR[SSUN]-1659912713184
-1119592721
GPR[SPVATF]-1659912713404
GPR[EPVATF]-1659912713943
GPR[SPS]-1659912713943
[643997] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:226.
GPR[EPS]-1659912714488
GPR[ESUN]-1659912714488
GPR[SSUN]-1659912714488
-1119592721
GPR[ESUN]-1659912714710
GPR[SSUN]-1659912714710
-1119592721
GPR[SPVATF]-1659912714928
GPR[EPVATF]-1659912715470
GPR[SPS]-1659912715470
[645547] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:215.
GPR[EPS]-1659912716038
GPR[ESUN]-1659912716038
GPR[SSUN]-1659912716038
-1119592721
GPR[ESUN]-1659912716260
GPR[SSUN]-1659912716260
-1119592721
GPR[ESUN]-1659912716479
GPR[SSUN]-1659912716479
-1119592721
GPR[ESUN]-1659912716698
GPR[SSUN]-1659912716698
-1119592721
GPR[ESUN]-1659912716915
GPR[SSUN]-1659912716915
-1119592721
GPR[ESUN]-1659912717132
GPR[SSUN]-1659912717132
GPR[ESUN]-1659912717132
GPR[SSUN]-1659912717132
GPR[ESUN]-1659912717132
GPR[SSUN]-1659912717132
948429589
GPR[ESUN]-1659912717405
GPR[SSUN]-1659912717405
948429589
GPR[SPVATF]-1659912717623
GPR[EPVATF]-1659912718178
GPR[SPS]-1659912718178
[648248] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:296.
GPR[EPS]-1659912718739
GPR[SPVATF]-1659912718739
GPR[EPVATF]-1659912719291
GPR[SPS]-1659912719291
[649351] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:296.
GPR[EPS]-1659912719842
GPR[ESUN]-1659912719842
GPR[SSUN]-1659912719842
948429589
GPR[SPVATF]-1659912720063
GPR[EPVATF]-1659912720625
GPR[SPS]-1659912720625
[650675] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:295.
GPR[EPS]-1659912721166
GPR[ESUN]-1659912721166
GPR[SSUN]-1659912721166
948429589
GPR[ESUN]-1659912721389
GPR[SSUN]-1659912721389
948429589
GPR[SPVATF]-1659912721613
GPR[EPVATF]-1659912722208
GPR[SPS]-1659912722208
[652254] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:293.
GPR[EPS]-1659912722745
GPR[SPVATF]-1659912722745
GPR[EPVATF]-1659912723331
GPR[SPS]-1659912723331
[653375] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:293.
GPR[EPS]-1659912723866
GPR[ESUN]-1659912723866
GPR[SSUN]-1659912723866
948429589
GPR[ESUN]-1659912724088
GPR[SSUN]-1659912724088
948429589
GPR[SPVATF]-1659912724306
GPR[EPVATF]-1659912724983
GPR[SPS]-1659912724983
[655018] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:290.
GPR[EPS]-1659912725509
GPR[ESUN]-1659912725509
GPR[SSUN]-1659912725509
948429589
GPR[SPVATF]-1659912725732
GPR[EPVATF]-1659912726385
GPR[SPS]-1659912726385
[656421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:289.
GPR[EPS]-1659912726912
GPR[SPVATF]-1659912726912
GPR[EPVATF]-1659912727540
GPR[SPS]-1659912727540
[657570] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:289.
GPR[EPS]-1659912728061
GPR[ESUN]-1659912728061
GPR[SSUN]-1659912728061
948429589
GPR[SPVATF]-1659912728278
GPR[EPVATF]-1659912728932
GPR[SPS]-1659912728932
[658796] ERROR ConstraintModelBuilder - Unable to compile the change: 
abstract class DataFlowAnalysis<N, L extends com.google.javascript.jscomp.graph.LatticeElement> {
    private final com.google.javascript.jscomp.ControlFlowGraph<N> cfg;

    final com.google.javascript.jscomp.JoinOp<L> joinOp;

    protected final java.util.Set<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> orderedWorkSet;

    public static final int MAX_STEPS = 200000;

    DataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N> targetCfg, com.google.javascript.jscomp.JoinOp<L> joinOp) {
        this.cfg = targetCfg;
        this.joinOp = joinOp;
        java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> nodeComparator = cfg.getOptionalNodeComparator(isForward());
        if (nodeComparator != null) {
            this.orderedWorkSet = com.google.common.collect.Sets.newTreeSet(nodeComparator);
        } else {
            this.orderedWorkSet = com.google.common.collect.Sets.newLinkedHashSet();
        }
    }

    final com.google.javascript.jscomp.ControlFlowGraph<N> getCfg() {
        return cfg;
    }

    L getExitLatticeElement() {
        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node = getCfg().getImplicitReturn();
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        return state.getIn();
    }

    @java.lang.SuppressWarnings("unchecked")
    protected L join(L latticeA, L latticeB) {
        return joinOp.apply(com.google.common.collect.Lists.<L>newArrayList(latticeA, latticeB));
    }

    abstract boolean isForward();

    abstract L flowThrough(N node, L input);

    final void analyze() {
        analyze(com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS);
    }

    final void analyze(int maxSteps) {
        initialize();
        int step = 0;
        while (!orderedWorkSet.isEmpty()) {
            if (step > maxSteps) {
                throw new com.google.javascript.jscomp.DataFlowAnalysis.MaxIterationsExceededException(("Analysis did not terminate after " + maxSteps) + " iterations");
            }
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> curNode = orderedWorkSet.iterator().next();
            orderedWorkSet.remove(curNode);
            joinInputs(curNode);
            if (flow(curNode)) {
                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> nextNodes = (isForward()) ? cfg.getDirectedSuccNodes(curNode) : cfg.getDirectedPredNodes(curNode);
                for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> nextNode : nextNodes) {
                    if (nextNode != cfg.getImplicitReturn()) {
                        orderedWorkSet.add(nextNode);
                    }
                }
            }
            step++;
        } 
        if (isForward()) {
            joinInputs(getCfg().getImplicitReturn());
        }
    }

    abstract L createInitialEstimateLattice();

    abstract L createEntryLattice();

    protected void initialize() {
        orderedWorkSet.clear();
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node : cfg.getDirectedGraphNodes()) {
            node.setAnnotation(new com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L>(createInitialEstimateLattice(), createInitialEstimateLattice()));
            if (node != cfg.getImplicitReturn()) {
                orderedWorkSet.add(node);
            }
        }
    }

    protected boolean flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        if (isForward()) {
            L outBefore = state.out;
            state.out = flowThrough(node.getValue(), state.in);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(268).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(268).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(268).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(268).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS",com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(268).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.orderedWorkSet",com.google.javascript.jscomp.DataFlowAnalysis.this.orderedWorkSet);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(268).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.cfg",com.google.javascript.jscomp.DataFlowAnalysis.this.cfg);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(268).collectInput("outBefore",outBefore);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(268).collectInput("state",state);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(268).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.joinOp",com.google.javascript.jscomp.DataFlowAnalysis.this.joinOp);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(268).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(268).collectionEnds();
            }
            if (runtimeAngelicValue)
                return !outBefore.equals(state.out);

        } else {
            L inBefore = state.in;
            state.in = flowThrough(node.getValue(), state.out);
            return !inBefore.equals(state.in);
        }
    }

    protected void joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        if (isForward()) {
            if (cfg.getEntry() == node) {
                state.setIn(createEntryLattice());
            } else {
                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> inNodes = cfg.getDirectedPredNodes(node);
                if (inNodes.size() == 1) {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> inNodeState = inNodes.get(0).getAnnotation();
                    state.setIn(inNodeState.getOut());
                } else if (inNodes.size() > 1) {
                    java.util.List<L> values = new java.util.ArrayList<L>(inNodes.size());
                    for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> currentNode : inNodes) {
                        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> currentNodeState = currentNode.getAnnotation();
                        values.add(currentNodeState.getOut());
                    }
                    state.setIn(joinOp.apply(values));
                }
            }
        } else {
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> inNodes = cfg.getDirectedSuccNodes(node);
            if (inNodes.size() == 1) {
                com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> inNode = inNodes.get(0);
                if (inNode == cfg.getImplicitReturn()) {
                    state.setOut(createEntryLattice());
                } else {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> inNodeState = inNode.getAnnotation();
                    state.setOut(inNodeState.getIn());
                }
            } else if (inNodes.size() > 1) {
                java.util.List<L> values = new java.util.ArrayList<L>(inNodes.size());
                for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> currentNode : inNodes) {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> currentNodeState = currentNode.getAnnotation();
                    values.add(currentNodeState.getIn());
                }
                state.setOut(joinOp.apply(values));
            }
        }
    }

    static class FlowState<L extends com.google.javascript.jscomp.graph.LatticeElement> implements com.google.javascript.jscomp.graph.Annotation {
        private L in;

        private L out;

        private FlowState(L inState, L outState) {
            com.google.common.base.Preconditions.checkNotNull(inState);
            com.google.common.base.Preconditions.checkNotNull(outState);
            this.in = inState;
            this.out = outState;
        }

        L getIn() {
            return in;
        }

        void setIn(L in) {
            com.google.common.base.Preconditions.checkNotNull(in);
            this.in = in;
        }

        L getOut() {
            return out;
        }

        void setOut(L out) {
            com.google.common.base.Preconditions.checkNotNull(out);
            this.out = out;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.format("IN: %s OUT: %s", in, out);
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(in, out);
        }
    }

    static class MaxIterationsExceededException extends java.lang.RuntimeException {
        private static final long serialVersionUID = 1L;

        MaxIterationsExceededException(java.lang.String msg) {
            super(msg);
        }
    }

    static abstract class BranchedForwardDataFlowAnalysis<N, L extends com.google.javascript.jscomp.graph.LatticeElement> extends com.google.javascript.jscomp.DataFlowAnalysis<N, L> {
        @java.lang.Override
        protected void initialize() {
            orderedWorkSet.clear();
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node : getCfg().getDirectedGraphNodes()) {
                int outEdgeCount = getCfg().getOutEdges(node.getValue()).size();
                java.util.List<L> outLattices = com.google.common.collect.Lists.newArrayList();
                for (int i = 0; i < outEdgeCount; i++) {
                    outLattices.add(createInitialEstimateLattice());
                }
                node.setAnnotation(new com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L>(createInitialEstimateLattice(), outLattices));
                if (node != getCfg().getImplicitReturn()) {
                    orderedWorkSet.add(node);
                }
            }
        }

        BranchedForwardDataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N> targetCfg, com.google.javascript.jscomp.JoinOp<L> joinOp) {
            super(targetCfg, joinOp);
        }

        @java.lang.Override
        L getExitLatticeElement() {
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node = getCfg().getImplicitReturn();
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            return state.getIn();
        }

        @java.lang.Override
        final boolean isForward() {
            return true;
        }

        abstract java.util.List<L> branchedFlowThrough(N node, L input);

        @java.lang.Override
        protected final boolean flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            java.util.List<L> outBefore = state.out;
            state.out = branchedFlowThrough(node.getValue(), state.in);
            com.google.common.base.Preconditions.checkState(outBefore.size() == state.out.size());
            for (int i = 0; i < outBefore.size(); i++) {
                if (!outBefore.get(i).equals(state.out.get(i))) {
                    return true;
                }
            }
            return false;
        }

        @java.lang.Override
        protected void joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> predNodes = getCfg().getDirectedPredNodes(node);
            java.util.List<L> values = new java.util.ArrayList<L>(predNodes.size());
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> predNode : predNodes) {
                com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> predNodeState = predNode.getAnnotation();
                L in = predNodeState.out.get(getCfg().getDirectedSuccNodes(predNode).indexOf(node));
                values.add(in);
            }
            if (getCfg().getEntry() == node) {
                state.setIn(createEntryLattice());
            } else if (!values.isEmpty()) {
                state.setIn(joinOp.apply(values));
            }
        }
    }

    static class BranchedFlowState<L extends com.google.javascript.jscomp.graph.LatticeElement> implements com.google.javascript.jscomp.graph.Annotation {
        private L in;

        private java.util.List<L> out;

        private BranchedFlowState(L inState, java.util.List<L> outState) {
            com.google.common.base.Preconditions.checkNotNull(inState);
            com.google.common.base.Preconditions.checkNotNull(outState);
            this.in = inState;
            this.out = outState;
        }

        L getIn() {
            return in;
        }

        void setIn(L in) {
            com.google.common.base.Preconditions.checkNotNull(in);
            this.in = in;
        }

        java.util.List<L> getOut() {
            return out;
        }

        void setOut(java.util.List<L> out) {
            com.google.common.base.Preconditions.checkNotNull(out);
            for (L item : out) {
                com.google.common.base.Preconditions.checkNotNull(item);
            }
            this.out = out;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.format("IN: %s OUT: %s", in, out);
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(in, out);
        }
    }

    static void computeEscaped(final com.google.javascript.jscomp.Scope jsScope, final java.util.Set<com.google.javascript.jscomp.Scope.Var> escaped, com.google.javascript.jscomp.AbstractCompiler compiler) {
        com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback finder = new com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback() {
            @java.lang.Override
            public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
                if (((jsScope == t.getScope()) || (!n.isName())) || parent.isFunction()) {
                    return;
                }
                java.lang.String name = n.getString();
                com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name);
                if ((var != null) && (var.scope == jsScope)) {
                    escaped.add(jsScope.getVar(name));
                }
            }
        };
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, finder);
        t.traverseAtScope(jsScope);
        for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> i = jsScope.getVars(); i.hasNext();) {
            com.google.javascript.jscomp.Scope.Var var = i.next();
            if (var.getParentNode().isCatch() || compiler.getCodingConvention().isExported(var.getName())) {
                escaped.add(var);
            }
        }
    }
}
[658796] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912729287
GPR[SSUN]-1659912729287
948429589
GPR[SPVATF]-1659912729508
GPR[EPVATF]-1659912730201
GPR[SPS]-1659912730201
[660236] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:271.
GPR[EPS]-1659912730727
GPR[ESUN]-1659912730728
GPR[SSUN]-1659912730728
948429589
GPR[ESUN]-1659912730947
GPR[SSUN]-1659912730947
948429589
GPR[ESUN]-1659912731165
GPR[SSUN]-1659912731165
948429589
GPR[ESUN]-1659912731382
GPR[SSUN]-1659912731382
948429589
GPR[SPVATF]-1659912731602
GPR[EPVATF]-1659912732306
GPR[SPS]-1659912732306
[662419] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$FlowState:354.
GPR[EPS]-1659912732910
GPR[ESUN]-1659912732910
GPR[SSUN]-1659912732910
948429589
GPR[SPVATF]-1659912733128
GPR[EPVATF]-1659912733863
GPR[SPS]-1659912733864
[663896] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$FlowState:353.
GPR[EPS]-1659912734387
GPR[ESUN]-1659912734387
GPR[SSUN]-1659912734387
-128675625
GPR[SPVATF]-1659912734609
GPR[EPVATF]-1659912735044
GPR[SPS]-1659912735044
[665105] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:388.
GPR[EPS]-1659912735596
GPR[SPVATF]-1659912735597
GPR[EPVATF]-1659912736044
GPR[SPS]-1659912736044
[666071] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:388.
GPR[EPS]-1659912736562
GPR[ESUN]-1659912736562
GPR[SSUN]-1659912736562
-128675625
GPR[SPVATF]-1659912736791
GPR[EPVATF]-1659912737247
GPR[SPS]-1659912737247
[667288] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:387.
GPR[EPS]-1659912737779
GPR[ESUN]-1659912737779
GPR[SSUN]-1659912737779
-128675625
GPR[SPVATF]-1659912738005
GPR[EPVATF]-1659912738489
GPR[SPS]-1659912738489
[669372] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:386.
GPR[EPS]-1659912739864
GPR[ESUN]-1659912739864
GPR[SSUN]-1659912739864
-128675625
GPR[SPVATF]-1659912740095
GPR[EPVATF]-1659912740688
GPR[SPS]-1659912740688
[670825] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:383.
GPR[EPS]-1659912741316
GPR[ESUN]-1659912741316
GPR[SSUN]-1659912741316
-128675625
GPR[SPVATF]-1659912741542
GPR[EPVATF]-1659912741975
GPR[SPS]-1659912741975
[672009] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:382.
GPR[EPS]-1659912742500
GPR[ESUN]-1659912742500
GPR[SSUN]-1659912742500
-128675625
GPR[SPVATF]-1659912742721
GPR[EPVATF]-1659912743113
GPR[SPS]-1659912743113
[673146] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:380.
GPR[EPS]-1659912743637
GPR[ESUN]-1659912743637
GPR[SSUN]-1659912743637
-128675625
GPR[ESUN]-1659912743857
GPR[SSUN]-1659912743857
1207178244
GPR[SPVATF]-1659912744060
GPR[EPVATF]-1659912744618
GPR[SPS]-1659912744618
[674661] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowGraph$AbstractCfgNodeTraversalCallback:141.
GPR[EPS]-1659912745152
GPR[ESUN]-1659912745152
GPR[SSUN]-1659912745152
1207178244
GPR[SPVATF]-1659912745356
GPR[EPVATF]-1659912745905
GPR[SPS]-1659912745905
[675949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowGraph$AbstractCfgNodeTraversalCallback:140.
GPR[EPS]-1659912746440
GPR[SPVATF]-1659912746440
GPR[EPVATF]-1659912746987
GPR[SPS]-1659912746987
[677014] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowGraph$AbstractCfgNodeTraversalCallback:140.
GPR[EPS]-1659912747506
GPR[ESUN]-1659912747506
GPR[SSUN]-1659912747506
69062959
GPR[ESUN]-1659912747728
GPR[SSUN]-1659912747728
-128675625
GPR[ESUN]-1659912747947
GPR[SSUN]-1659912747947
-128675625
GPR[ESUN]-1659912748166
GPR[SSUN]-1659912748166
-128675625
GPR[SPVATF]-1659912748385
GPR[EPVATF]-1659912748951
GPR[SPS]-1659912748951
[678996] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:157.
GPR[EPS]-1659912749487
GPR[ESUN]-1659912749487
GPR[SSUN]-1659912749487
-128675625
GPR[ESUN]-1659912749708
GPR[SSUN]-1659912749708
-128675625
GPR[SPVATF]-1659912749926
GPR[EPVATF]-1659912750510
GPR[SPS]-1659912750510
[680537] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:119.
GPR[EPS]-1659912751028
GPR[ESUN]-1659912751028
GPR[SSUN]-1659912751028
-128675625
GPR[SPVATF]-1659912751250
GPR[EPVATF]-1659912751794
GPR[SPS]-1659912751794
[681835] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:118.
GPR[EPS]-1659912752326
GPR[SPVATF]-1659912752326
GPR[EPVATF]-1659912752870
GPR[SPS]-1659912752870
[682886] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:118.
GPR[EPS]-1659912753377
GPR[ESUN]-1659912753377
GPR[SSUN]-1659912753377
-1966087783
GPR[SPVATF]-1659912753568
GPR[EPVATF]-1659912753586
[683095] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912753586
GPR[SSUN]-1659912753586
1207178244
GPR[ESUN]-1659912753788
GPR[SSUN]-1659912753788
1187751237
GPR[SPVATF]-1659912754055
GPR[EPVATF]-1659912754533
GPR[SPS]-1659912754533
[684781] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:995.
GPR[EPS]-1659912755272
GPR[ESUN]-1659912755272
GPR[SSUN]-1659912755272
-1966087783
GPR[SPVATF]-1659912755459
GPR[EPVATF]-1659912755477
[684986] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912755477
GPR[SSUN]-1659912755477
-1966087783
GPR[SPVATF]-1659912755663
GPR[EPVATF]-1659912755680
[685189] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912755681
GPR[SSUN]-1659912755681
-1966087783
GPR[SPVATF]-1659912755866
GPR[EPVATF]-1659912755884
[685393] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912755884
GPR[SSUN]-1659912755884
-1966087783
GPR[SPVATF]-1659912756175
GPR[EPVATF]-1659912756194
[685703] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912756194
GPR[SSUN]-1659912756194
-1966087783
GPR[SPVATF]-1659912756381
GPR[EPVATF]-1659912756398
[685907] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912756398
GPR[SSUN]-1659912756398
-1966087783
GPR[SPVATF]-1659912756583
GPR[EPVATF]-1659912756601
[686110] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912756601
GPR[EPVATF]-1659912756618
[686127] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912756618
GPR[SSUN]-1659912756618
-1966087783
GPR[ESUN]-1659912756823
GPR[SSUN]-1659912756823
80988634
GPR[ESUN]-1659912756995
GPR[SSUN]-1659912756995
948429589
GPR[SPVATF]-1659912757212
GPR[EPVATF]-1659912757768
GPR[SPS]-1659912757768
[687827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:310.
GPR[EPS]-1659912758318
GPR[ESUN]-1659912758318
GPR[SSUN]-1659912758318
2433571
GPR[SPVATF]-1659912758551
GPR[EPVATF]-1659912758926
GPR[SPS]-1659912758926
[689055] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:969.
GPR[EPS]-1659912759546
GPR[ESUN]-1659912759546
GPR[SSUN]-1659912759546
2433571
GPR[SPVATF]-1659912759779
GPR[EPVATF]-1659912760162
GPR[SPS]-1659912760162
[690330] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:968.
GPR[EPS]-1659912760821
GPR[ESUN]-1659912760821
GPR[SSUN]-1659912760821
1187751237
GPR[ESUN]-1659912761093
GPR[SSUN]-1659912761093
948429589
GPR[ESUN]-1659912761314
GPR[SSUN]-1659912761314
948429589
GPR[SPVATF]-1659912761533
GPR[EPVATF]-1659912762089
GPR[SPS]-1659912762089
[692149] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:573.
GPR[EPS]-1659912762640
GPR[SPVATF]-1659912762640
GPR[EPVATF]-1659912763216
GPR[SPS]-1659912763216
[693263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:573.
GPR[EPS]-1659912763754
GPR[ESUN]-1659912763754
GPR[SSUN]-1659912763754
948429589
GPR[ESUN]-1659912763980
GPR[SSUN]-1659912763980
160819208
GPR[SPVATF]-1659912764223
GPR[EPVATF]-1659912764808
GPR[SPS]-1659912764808
[694735] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class ControlFlowAnalysis implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg;

    private java.util.Map<com.google.javascript.rhino.Node, java.lang.Integer> astPosition;

    private java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> nodePriorities;

    private final java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> priorityComparator = new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
        @java.lang.Override
        public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> a, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> b) {
            return astPosition.get(a.getValue()) - astPosition.get(b.getValue());
        }
    };

    private int astPositionCounter;

    private int priorityCounter;

    private final boolean shouldTraverseFunctions;

    private final boolean edgeAnnotations;

    private com.google.javascript.rhino.Node root;

    private final java.util.Deque<com.google.javascript.rhino.Node> exceptionHandler = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> finallyMap = com.google.common.collect.HashMultimap.create();

    ControlFlowAnalysis(com.google.javascript.jscomp.AbstractCompiler compiler, boolean shouldTraverseFunctions, boolean edgeAnnotations) {
        this.compiler = compiler;
        this.shouldTraverseFunctions = shouldTraverseFunctions;
        this.edgeAnnotations = edgeAnnotations;
    }

    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getCfg() {
        return cfg;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        this.root = root;
        astPositionCounter = 0;
        astPosition = com.google.common.collect.Maps.newHashMap();
        nodePriorities = com.google.common.collect.Maps.newHashMap();
        cfg = new com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph(com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(root), nodePriorities, edgeAnnotations);
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, this);
        astPosition.put(null, ++astPositionCounter);
        priorityCounter = 0;
        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry = cfg.getEntry();
        prioritizeFromEntryNode(entry);
        if (shouldTraverseFunctions) {
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
                com.google.javascript.rhino.Node value = candidate.getValue();
                if ((value != null) && value.isFunction()) {
                    com.google.common.base.Preconditions.checkState((!nodePriorities.containsKey(candidate)) || (candidate == entry));
                    prioritizeFromEntryNode(candidate);
                }
            }
        }
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
            if (!nodePriorities.containsKey(candidate)) {
                nodePriorities.put(candidate, ++priorityCounter);
            }
        }
        nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);
    }

    private void prioritizeFromEntryNode(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry) {
        java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> worklist = new java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>(10, priorityComparator);
        worklist.add(entry);
        while (!worklist.isEmpty()) {
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> current = worklist.remove();
            if (nodePriorities.containsKey(current)) {
                continue;
            }
            nodePriorities.put(current, ++priorityCounter);
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> successors = cfg.getDirectedSuccNodes(current);
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : successors) {
                worklist.add(candidate);
            }
        } 
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        astPosition.put(n, astPositionCounter++);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                if (shouldTraverseFunctions || (n == cfg.getEntry().getValue())) {
                    exceptionHandler.push(n);
                    return true;
                }
                return false;
            case com.google.javascript.rhino.Token.TRY :
                exceptionHandler.push(n);
                return true;
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.FOR :
                    return n == parent.getLastChild();
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return n != parent.getFirstChild();
                case com.google.javascript.rhino.Token.DO :
                    return n != parent.getFirstChild().getNext();
                case com.google.javascript.rhino.Token.SWITCH :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.CATCH :
                case com.google.javascript.rhino.Token.LABEL :
                    return n != parent.getFirstChild();
                case com.google.javascript.rhino.Token.FUNCTION :
                    return n == parent.getFirstChild().getNext().getNext();
                case com.google.javascript.rhino.Token.CONTINUE :
                case com.google.javascript.rhino.Token.BREAK :
                case com.google.javascript.rhino.Token.EXPR_RESULT :
                case com.google.javascript.rhino.Token.VAR :
                case com.google.javascript.rhino.Token.RETURN :
                case com.google.javascript.rhino.Token.THROW :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if (n == parent.getFirstChild().getNext()) {
                        com.google.common.base.Preconditions.checkState(exceptionHandler.peek() == parent);
                        exceptionHandler.pop();
                    }
            }
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
                handleIf(n);
                return;
            case com.google.javascript.rhino.Token.WHILE :
                handleWhile(n);
                return;
            case com.google.javascript.rhino.Token.DO :
                handleDo(n);
                return;
            case com.google.javascript.rhino.Token.FOR :
                handleFor(n);
                return;
            case com.google.javascript.rhino.Token.SWITCH :
                handleSwitch(n);
                return;
            case com.google.javascript.rhino.Token.CASE :
                handleCase(n);
                return;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                handleDefault(n);
                return;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.SCRIPT :
                handleStmtList(n);
                return;
            case com.google.javascript.rhino.Token.FUNCTION :
                handleFunction(n);
                return;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                handleExpr(n);
                return;
            case com.google.javascript.rhino.Token.THROW :
                handleThrow(n);
                return;
            case com.google.javascript.rhino.Token.TRY :
                handleTry(n);
                return;
            case com.google.javascript.rhino.Token.CATCH :
                handleCatch(n);
                return;
            case com.google.javascript.rhino.Token.BREAK :
                handleBreak(n);
                return;
            case com.google.javascript.rhino.Token.CONTINUE :
                handleContinue(n);
                return;
            case com.google.javascript.rhino.Token.RETURN :
                handleReturn(n);
                return;
            case com.google.javascript.rhino.Token.WITH :
                handleWith(n);
                return;
            case com.google.javascript.rhino.Token.LABEL :
                return;
            default :
                handleStmt(n);
                return;
        }
    }

    private void handleIf(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node thenBlock = node.getFirstChild().getNext();
        com.google.javascript.rhino.Node elseBlock = thenBlock.getNext();
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(thenBlock));
        if (elseBlock == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(elseBlock));
        }
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleWhile(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleDo(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleFor(com.google.javascript.rhino.Node forNode) {
        if (forNode.getChildCount() == 4) {
            com.google.javascript.rhino.Node init = forNode.getFirstChild();
            com.google.javascript.rhino.Node cond = init.getNext();
            com.google.javascript.rhino.Node iter = cond.getNext();
            com.google.javascript.rhino.Node body = iter.getNext();
            createEdge(init, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            createEdge(iter, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            connectToPossibleExceptionHandler(init, init);
            connectToPossibleExceptionHandler(forNode, cond);
            connectToPossibleExceptionHandler(iter, iter);
        } else {
            com.google.javascript.rhino.Node item = forNode.getFirstChild();
            com.google.javascript.rhino.Node collection = item.getNext();
            com.google.javascript.rhino.Node body = collection.getNext();
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            connectToPossibleExceptionHandler(forNode, collection);
        }
    }

    private void handleSwitch(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getFirstChild().getNext(), com.google.javascript.rhino.Token.CASE, com.google.javascript.rhino.Token.EMPTY);
        if (next != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, next);
        } else if (node.getFirstChild().getNext() != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild().getNext());
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleCase(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, node.getFirstChild().getNext());
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getNext(), com.google.javascript.rhino.Token.CASE);
        if (next != null) {
            com.google.common.base.Preconditions.checkState(next.isCase());
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, next);
        } else {
            com.google.javascript.rhino.Node parent = node.getParent();
            com.google.javascript.rhino.Node deflt = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(parent.getFirstChild().getNext(), com.google.javascript.rhino.Token.DEFAULT_CASE);
            if (deflt != null) {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, deflt);
            } else {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
            }
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleDefault(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleWith(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleStmtList(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if ((((node.isBlock() && (parent != null)) && parent.isTry()) && (com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent) == node)) && (!com.google.javascript.jscomp.NodeUtil.hasCatchHandler(node))) {
            return;
        }
        com.google.javascript.rhino.Node child = node.getFirstChild();
        while ((child != null) && child.isFunction()) {
            child = child.getNext();
        } 
        if (child != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(child));
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.TRY :
                    break;
                default :
                    if (node.isBlock() && node.isSyntheticBlock()) {
                        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.SYN_BLOCK, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
                    }
                    break;
            }
        }
    }

    private void handleFunction(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(node.getChildCount() >= 3);
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext().getNext()));
        com.google.common.base.Preconditions.checkState(exceptionHandler.peek() == node);
        exceptionHandler.pop();
    }

    private void handleExpr(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleThrow(com.google.javascript.rhino.Node node) {
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleTry(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleCatch(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
    }

    private void handleBreak(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !com.google.javascript.jscomp.ControlFlowAnalysis.isBreakTarget(cur, label); cur = parent , parent = parent.getParent()) {
            if ((cur.isTry() && com.google.javascript.jscomp.NodeUtil.hasFinally(cur)) && (cur.getLastChild() != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            if (parent == null) {
                if (compiler.isIdeMode()) {
                    return;
                } else {
                    throw new java.lang.IllegalStateException("Cannot find break target.");
                }
            }
            previous = cur;
        }
        if (lastJump == node) {
            createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        } else {
            finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        }
    }

    private void handleContinue(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !com.google.javascript.jscomp.ControlFlowAnalysis.isContinueTarget(cur, parent, label); cur = parent , parent = parent.getParent()) {
            if ((cur.isTry() && com.google.javascript.jscomp.NodeUtil.hasFinally(cur)) && (cur.getLastChild() != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, cur.getLastChild());
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            com.google.common.base.Preconditions.checkState(parent != null, "Cannot find continue target.");
            previous = cur;
        }
        com.google.javascript.rhino.Node iter = cur;
        if (cur.getChildCount() == 4) {
            iter = cur.getFirstChild().getNext().getNext();
        }
        if (lastJump == node) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, iter);
        } else {
            finallyMap.put(lastJump, iter);
        }
    }

    private void handleReturn(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node lastJump = null;
        for (java.util.Iterator<com.google.javascript.rhino.Node> iter = exceptionHandler.iterator(); iter.hasNext();) {
            com.google.javascript.rhino.Node curHandler = iter.next();
            if (curHandler.isFunction()) {
                break;
            }
            if (com.google.javascript.jscomp.NodeUtil.hasFinally(curHandler)) {
                if (lastJump == null) {
                    createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, curHandler.getLastChild());
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(curHandler.getLastChild()));
                }
                lastJump = curHandler;
            }
        }
        if (node.hasChildren()) {
            connectToPossibleExceptionHandler(node, node.getFirstChild());
        }
        if (lastJump == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, null);
        } else {
            finallyMap.put(lastJump, null);
        }
    }

    private void handleStmt(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, cfa);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, null);
    }

    private static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node fromNode, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if (((parent == null) || parent.isFunction()) || ((cfa != null) && (node == cfa.root))) {
            return null;
        }
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.IF :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                if (parent.getNext() != null) {
                    if (parent.getNext().isCase()) {
                        return parent.getNext().getFirstChild().getNext();
                    } else if (parent.getNext().isDefaultCase()) {
                        return parent.getNext().getFirstChild();
                    } else {
                        com.google.common.base.Preconditions.checkState(false, "Not reachable");
                    }
                } else {
                    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                }
                break;
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent;
                } else {
                    return parent.getFirstChild().getNext().getNext();
                }
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
                return parent;
            case com.google.javascript.rhino.Token.TRY :
                if (parent.getFirstChild() == node) {
                    if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(parent.getLastChild());
                    } else {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                    }
                } else if (com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent) == node) {
                    if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getNext());
                    } else {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                    }
                } else if (parent.getLastChild() == node) {
                    if (cfa != null) {
                        for (com.google.javascript.rhino.Node finallyNode : cfa.finallyMap.get(parent)) {
                            cfa.createEdge(fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, finallyNode);
                        }
                    }
                    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                }
        }
        com.google.javascript.rhino.Node nextSibling = node.getNext();
        while ((nextSibling != null) && nextSibling.isFunction()) {
            nextSibling = nextSibling.getNext();
        } 
        if (nextSibling != null) {
            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(nextSibling);
        } else {
            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
        }
    }

    static com.google.javascript.rhino.Node computeFallThrough(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DO :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    return n;
                }
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.LABEL :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getLastChild());
            default :
                return n;
        }
    }

    private void createEdge(com.google.javascript.rhino.Node fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch branch, com.google.javascript.rhino.Node toNode) {
        cfg.createNode(fromNode);
        cfg.createNode(toNode);
        cfg.connectIfNotFound(fromNode, branch, toNode);
    }

    private void connectToPossibleExceptionHandler(com.google.javascript.rhino.Node cfgNode, com.google.javascript.rhino.Node target) {
        if (com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(target) && (!exceptionHandler.isEmpty())) {
            com.google.javascript.rhino.Node lastJump = cfgNode;
            for (com.google.javascript.rhino.Node handler : exceptionHandler) {
                if (handler.isFunction()) {
                    return;
                }
                com.google.common.base.Preconditions.checkState(handler.isTry());
                com.google.javascript.rhino.Node catchBlock = com.google.javascript.jscomp.NodeUtil.getCatchBlock(handler);
                if (!com.google.javascript.jscomp.NodeUtil.hasCatchHandler(catchBlock)) {
                    if (lastJump == cfgNode) {
                        createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, handler.getLastChild());
                    } else {
                        finallyMap.put(lastJump, handler.getLastChild());
                    }
                } else if (lastJump == cfgNode) {
                    createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, catchBlock);
                    return;
                } else {
                    finallyMap.put(lastJump, catchBlock);
                }
                lastJump = handler;
            }
        }
    }

    private static com.google.javascript.rhino.Node getNextSiblingOfType(com.google.javascript.rhino.Node first, int... types) {
        for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
            for (int type : types) {
                if (c.getType() == type) {
                    return c;
                }
            }
        }
        return null;
    }

    public static boolean isBreakTarget(com.google.javascript.rhino.Node target, java.lang.String label) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.isBreakStructure(target, label != null) && com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(target.getParent(), label);
    }

    private static boolean isContinueTarget(com.google.javascript.rhino.Node target, com.google.javascript.rhino.Node parent, java.lang.String label) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.isContinueStructure(target) && com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(parent, label);
    }

    private static boolean matchLabel(com.google.javascript.rhino.Node target, java.lang.String label) {
        if (label == null) {
            return true;
        }
        while (target.isLabel()) {
            if (target.getFirstChild().getString().equals(label)) {
                return true;
            }
            target = target.getParent();
        } 
        return false;
    }

    public static boolean mayThrowException(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if ((!com.google.javascript.jscomp.ControlFlowGraph.isEnteringNewCfgNode(c)) && com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(c)) {
                return true;
            }
        }
        return false;
    }

    static boolean isBreakStructure(com.google.javascript.rhino.Node n, boolean labeled) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.SWITCH :
                return true;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.TRY :
                return labeled;
            default :
                return false;
        }
    }

    static boolean isContinueStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getExceptionHandler(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node cur = n; (!cur.isScript()) && (!cur.isFunction()); cur = cur.getParent()) {
            com.google.javascript.rhino.Node catchNode = com.google.javascript.jscomp.ControlFlowAnalysis.getCatchHandlerForBlock(cur);
            if (catchNode != null) {
                return catchNode;
            }
        }
        return null;
    }

    static com.google.javascript.rhino.Node getCatchHandlerForBlock(com.google.javascript.rhino.Node block) {
        if ((block.isBlock() && block.getParent().isTry()) && (block.getParent().getFirstChild() == block)) {
            for (com.google.javascript.rhino.Node s = block.getNext(); s != null; s = s.getNext()) {
                if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(s)) {
                    return s.getFirstChild();
                }
            }
        }
        return null;
    }

    private static class AstControlFlowGraph extends com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> {
        private final java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities;

        private AstControlFlowGraph(com.google.javascript.rhino.Node entry, java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities, boolean edgeAnnotations) {
            super(entry, true, edgeAnnotations);
            this.priorities = priorities;
        }

        @java.lang.Override
        public java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> getOptionalNodeComparator(boolean isForward) {
            if (isForward) {
                return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                    @java.lang.Override
                    public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                        return getPosition(n1) - getPosition(n2);
                    }
                };
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(292).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("isForward",isForward);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                        @java.lang.Override
                        public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                            return getPosition(n2) - getPosition(n1);
                        }
                    };

            }
        }

        private int getPosition(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n) {
            java.lang.Integer priority = priorities.get(n);
            com.google.common.base.Preconditions.checkNotNull(priority);
            return priority;
        }
    }
}
[694736] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912765227
GPR[SSUN]-1659912765227
948429589
GPR[SPVATF]-1659912765446
GPR[EPVATF]-1659912766057
GPR[SPS]-1659912766057
[696102] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:315.
GPR[EPS]-1659912766593
GPR[SPVATF]-1659912766593
GPR[EPVATF]-1659912767197
GPR[SPS]-1659912767197
[697241] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:315.
GPR[EPS]-1659912767732
GPR[ESUN]-1659912767732
GPR[SSUN]-1659912767732
948429589
GPR[SPVATF]-1659912767952
GPR[EPVATF]-1659912768673
GPR[SPS]-1659912768673
[698710] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:313.
GPR[EPS]-1659912769201
GPR[ESUN]-1659912769201
GPR[SSUN]-1659912769201
948429589
GPR[ESUN]-1659912769419
GPR[SSUN]-1659912769419
948429589
GPR[SPVATF]-1659912769639
GPR[EPVATF]-1659912770304
GPR[SPS]-1659912770304
[700341] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:309.
GPR[EPS]-1659912770832
GPR[SPVATF]-1659912770833
GPR[EPVATF]-1659912771493
GPR[SPS]-1659912771493
[701536] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:309.
GPR[EPS]-1659912772027
GPR[ESUN]-1659912772027
GPR[SSUN]-1659912772027
948429589
GPR[ESUN]-1659912772248
GPR[SSUN]-1659912772248
948429589
GPR[SPVATF]-1659912772467
GPR[EPVATF]-1659912773168
GPR[SPS]-1659912773168
[703214] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:307.
GPR[EPS]-1659912773705
GPR[SPVATF]-1659912773705
GPR[EPVATF]-1659912774404
GPR[SPS]-1659912774404
[704451] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:307.
GPR[EPS]-1659912774942
GPR[ESUN]-1659912774942
GPR[SSUN]-1659912774942
948429589
GPR[ESUN]-1659912775164
GPR[SSUN]-1659912775164
948429589
GPR[SPVATF]-1659912775382
GPR[EPVATF]-1659912776176
GPR[SPS]-1659912776176
[706035] ERROR ConstraintModelBuilder - Unable to compile the change: 
abstract class DataFlowAnalysis<N, L extends com.google.javascript.jscomp.graph.LatticeElement> {
    private final com.google.javascript.jscomp.ControlFlowGraph<N> cfg;

    final com.google.javascript.jscomp.JoinOp<L> joinOp;

    protected final java.util.Set<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> orderedWorkSet;

    public static final int MAX_STEPS = 200000;

    DataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N> targetCfg, com.google.javascript.jscomp.JoinOp<L> joinOp) {
        this.cfg = targetCfg;
        this.joinOp = joinOp;
        java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> nodeComparator = cfg.getOptionalNodeComparator(isForward());
        if (nodeComparator != null) {
            this.orderedWorkSet = com.google.common.collect.Sets.newTreeSet(nodeComparator);
        } else {
            this.orderedWorkSet = com.google.common.collect.Sets.newLinkedHashSet();
        }
    }

    final com.google.javascript.jscomp.ControlFlowGraph<N> getCfg() {
        return cfg;
    }

    L getExitLatticeElement() {
        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node = getCfg().getImplicitReturn();
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        return state.getIn();
    }

    @java.lang.SuppressWarnings("unchecked")
    protected L join(L latticeA, L latticeB) {
        return joinOp.apply(com.google.common.collect.Lists.<L>newArrayList(latticeA, latticeB));
    }

    abstract boolean isForward();

    abstract L flowThrough(N node, L input);

    final void analyze() {
        analyze(com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS);
    }

    final void analyze(int maxSteps) {
        initialize();
        int step = 0;
        while (!orderedWorkSet.isEmpty()) {
            if (step > maxSteps) {
                throw new com.google.javascript.jscomp.DataFlowAnalysis.MaxIterationsExceededException(("Analysis did not terminate after " + maxSteps) + " iterations");
            }
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> curNode = orderedWorkSet.iterator().next();
            orderedWorkSet.remove(curNode);
            joinInputs(curNode);
            if (flow(curNode)) {
                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> nextNodes = (isForward()) ? cfg.getDirectedSuccNodes(curNode) : cfg.getDirectedPredNodes(curNode);
                for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> nextNode : nextNodes) {
                    if (nextNode != cfg.getImplicitReturn()) {
                        orderedWorkSet.add(nextNode);
                    }
                }
            }
            step++;
        } 
        if (isForward()) {
            joinInputs(getCfg().getImplicitReturn());
        }
    }

    abstract L createInitialEstimateLattice();

    abstract L createEntryLattice();

    protected void initialize() {
        orderedWorkSet.clear();
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node : cfg.getDirectedGraphNodes()) {
            node.setAnnotation(new com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L>(createInitialEstimateLattice(), createInitialEstimateLattice()));
            if (node != cfg.getImplicitReturn()) {
                orderedWorkSet.add(node);
            }
        }
    }

    protected boolean flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        if (isForward()) {
            L outBefore = state.out;
            state.out = flowThrough(node.getValue(), state.in);
            return !outBefore.equals(state.out);
        } else {
            L inBefore = state.in;
            state.in = flowThrough(node.getValue(), state.out);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(300).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(300).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(300).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(300).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS",com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(300).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.orderedWorkSet",com.google.javascript.jscomp.DataFlowAnalysis.this.orderedWorkSet);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(300).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.cfg",com.google.javascript.jscomp.DataFlowAnalysis.this.cfg);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(300).collectInput("state",state);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(300).collectInput("inBefore",inBefore);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(300).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.joinOp",com.google.javascript.jscomp.DataFlowAnalysis.this.joinOp);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(300).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(300).collectionEnds();
            }
            if (runtimeAngelicValue)
                return !inBefore.equals(state.in);

        }
    }

    protected void joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        if (isForward()) {
            if (cfg.getEntry() == node) {
                state.setIn(createEntryLattice());
            } else {
                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> inNodes = cfg.getDirectedPredNodes(node);
                if (inNodes.size() == 1) {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> inNodeState = inNodes.get(0).getAnnotation();
                    state.setIn(inNodeState.getOut());
                } else if (inNodes.size() > 1) {
                    java.util.List<L> values = new java.util.ArrayList<L>(inNodes.size());
                    for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> currentNode : inNodes) {
                        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> currentNodeState = currentNode.getAnnotation();
                        values.add(currentNodeState.getOut());
                    }
                    state.setIn(joinOp.apply(values));
                }
            }
        } else {
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> inNodes = cfg.getDirectedSuccNodes(node);
            if (inNodes.size() == 1) {
                com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> inNode = inNodes.get(0);
                if (inNode == cfg.getImplicitReturn()) {
                    state.setOut(createEntryLattice());
                } else {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> inNodeState = inNode.getAnnotation();
                    state.setOut(inNodeState.getIn());
                }
            } else if (inNodes.size() > 1) {
                java.util.List<L> values = new java.util.ArrayList<L>(inNodes.size());
                for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> currentNode : inNodes) {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> currentNodeState = currentNode.getAnnotation();
                    values.add(currentNodeState.getIn());
                }
                state.setOut(joinOp.apply(values));
            }
        }
    }

    static class FlowState<L extends com.google.javascript.jscomp.graph.LatticeElement> implements com.google.javascript.jscomp.graph.Annotation {
        private L in;

        private L out;

        private FlowState(L inState, L outState) {
            com.google.common.base.Preconditions.checkNotNull(inState);
            com.google.common.base.Preconditions.checkNotNull(outState);
            this.in = inState;
            this.out = outState;
        }

        L getIn() {
            return in;
        }

        void setIn(L in) {
            com.google.common.base.Preconditions.checkNotNull(in);
            this.in = in;
        }

        L getOut() {
            return out;
        }

        void setOut(L out) {
            com.google.common.base.Preconditions.checkNotNull(out);
            this.out = out;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.format("IN: %s OUT: %s", in, out);
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(in, out);
        }
    }

    static class MaxIterationsExceededException extends java.lang.RuntimeException {
        private static final long serialVersionUID = 1L;

        MaxIterationsExceededException(java.lang.String msg) {
            super(msg);
        }
    }

    static abstract class BranchedForwardDataFlowAnalysis<N, L extends com.google.javascript.jscomp.graph.LatticeElement> extends com.google.javascript.jscomp.DataFlowAnalysis<N, L> {
        @java.lang.Override
        protected void initialize() {
            orderedWorkSet.clear();
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node : getCfg().getDirectedGraphNodes()) {
                int outEdgeCount = getCfg().getOutEdges(node.getValue()).size();
                java.util.List<L> outLattices = com.google.common.collect.Lists.newArrayList();
                for (int i = 0; i < outEdgeCount; i++) {
                    outLattices.add(createInitialEstimateLattice());
                }
                node.setAnnotation(new com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L>(createInitialEstimateLattice(), outLattices));
                if (node != getCfg().getImplicitReturn()) {
                    orderedWorkSet.add(node);
                }
            }
        }

        BranchedForwardDataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N> targetCfg, com.google.javascript.jscomp.JoinOp<L> joinOp) {
            super(targetCfg, joinOp);
        }

        @java.lang.Override
        L getExitLatticeElement() {
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node = getCfg().getImplicitReturn();
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            return state.getIn();
        }

        @java.lang.Override
        final boolean isForward() {
            return true;
        }

        abstract java.util.List<L> branchedFlowThrough(N node, L input);

        @java.lang.Override
        protected final boolean flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            java.util.List<L> outBefore = state.out;
            state.out = branchedFlowThrough(node.getValue(), state.in);
            com.google.common.base.Preconditions.checkState(outBefore.size() == state.out.size());
            for (int i = 0; i < outBefore.size(); i++) {
                if (!outBefore.get(i).equals(state.out.get(i))) {
                    return true;
                }
            }
            return false;
        }

        @java.lang.Override
        protected void joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> predNodes = getCfg().getDirectedPredNodes(node);
            java.util.List<L> values = new java.util.ArrayList<L>(predNodes.size());
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> predNode : predNodes) {
                com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> predNodeState = predNode.getAnnotation();
                L in = predNodeState.out.get(getCfg().getDirectedSuccNodes(predNode).indexOf(node));
                values.add(in);
            }
            if (getCfg().getEntry() == node) {
                state.setIn(createEntryLattice());
            } else if (!values.isEmpty()) {
                state.setIn(joinOp.apply(values));
            }
        }
    }

    static class BranchedFlowState<L extends com.google.javascript.jscomp.graph.LatticeElement> implements com.google.javascript.jscomp.graph.Annotation {
        private L in;

        private java.util.List<L> out;

        private BranchedFlowState(L inState, java.util.List<L> outState) {
            com.google.common.base.Preconditions.checkNotNull(inState);
            com.google.common.base.Preconditions.checkNotNull(outState);
            this.in = inState;
            this.out = outState;
        }

        L getIn() {
            return in;
        }

        void setIn(L in) {
            com.google.common.base.Preconditions.checkNotNull(in);
            this.in = in;
        }

        java.util.List<L> getOut() {
            return out;
        }

        void setOut(java.util.List<L> out) {
            com.google.common.base.Preconditions.checkNotNull(out);
            for (L item : out) {
                com.google.common.base.Preconditions.checkNotNull(item);
            }
            this.out = out;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.format("IN: %s OUT: %s", in, out);
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(in, out);
        }
    }

    static void computeEscaped(final com.google.javascript.jscomp.Scope jsScope, final java.util.Set<com.google.javascript.jscomp.Scope.Var> escaped, com.google.javascript.jscomp.AbstractCompiler compiler) {
        com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback finder = new com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback() {
            @java.lang.Override
            public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
                if (((jsScope == t.getScope()) || (!n.isName())) || parent.isFunction()) {
                    return;
                }
                java.lang.String name = n.getString();
                com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name);
                if ((var != null) && (var.scope == jsScope)) {
                    escaped.add(jsScope.getVar(name));
                }
            }
        };
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, finder);
        t.traverseAtScope(jsScope);
        for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> i = jsScope.getVars(); i.hasNext();) {
            com.google.javascript.jscomp.Scope.Var var = i.next();
            if (var.getParentNode().isCatch() || compiler.getCodingConvention().isExported(var.getName())) {
                escaped.add(var);
            }
        }
    }
}
[706036] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912776527
GPR[SSUN]-1659912776527
948429589
GPR[SPVATF]-1659912776745
GPR[EPVATF]-1659912778255
GPR[SPS]-1659912778255
[708635] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:275.
GPR[EPS]-1659912779127
GPR[ESUN]-1659912779127
GPR[SSUN]-1659912779127
948429589
GPR[ESUN]-1659912779407
GPR[SSUN]-1659912779407
948429589
GPR[ESUN]-1659912779678
GPR[SSUN]-1659912779678
948429589
GPR[SPVATF]-1659912779895
GPR[EPVATF]-1659912780487
GPR[SPS]-1659912780487
[710535] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$FlowState:363.
GPR[EPS]-1659912781026
GPR[ESUN]-1659912781026
GPR[SSUN]-1659912781026
948429589
GPR[SPVATF]-1659912781245
GPR[EPVATF]-1659912781806
GPR[SPS]-1659912781806
[711854] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$FlowState:362.
GPR[EPS]-1659912782345
GPR[ESUN]-1659912782345
GPR[SSUN]-1659912782345
948429589
GPR[ESUN]-1659912782565
GPR[SSUN]-1659912782565
1187751237
GPR[ESUN]-1659912782832
GPR[SSUN]-1659912782832
1187751237
GPR[SPVATF]-1659912783097
GPR[EPVATF]-1659912783652
GPR[SPS]-1659912783652
[713841] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1607.
GPR[EPS]-1659912784332
GPR[SPVATF]-1659912784332
GPR[EPVATF]-1659912784901
GPR[SPS]-1659912784901
[715090] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1607.
GPR[EPS]-1659912785581
GPR[ESUN]-1659912785581
GPR[SSUN]-1659912785581
1187751237
GPR[SPVATF]-1659912785852
GPR[EPVATF]-1659912786394
GPR[SPS]-1659912786394
[716573] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1603.
GPR[EPS]-1659912787064
GPR[SPVATF]-1659912787064
GPR[EPVATF]-1659912787644
GPR[SPS]-1659912787644
[717818] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1603.
GPR[EPS]-1659912788309
GPR[ESUN]-1659912788309
GPR[SSUN]-1659912788310
1187751237
GPR[SPVATF]-1659912788578
GPR[EPVATF]-1659912789118
GPR[SPS]-1659912789118
[719295] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1602.
GPR[EPS]-1659912789786
GPR[ESUN]-1659912789786
GPR[SSUN]-1659912789786
-128675625
GPR[SPVATF]-1659912790005
GPR[EPVATF]-1659912790403
GPR[SPS]-1659912790403
[720431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:419.
GPR[EPS]-1659912790922
GPR[ESUN]-1659912790922
GPR[SSUN]-1659912790922
-132053243
GPR[SPVATF]-1659912791151
GPR[EPVATF]-1659912791169
[720678] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912791169
GPR[SSUN]-1659912791169
-132053243
GPR[SPVATF]-1659912791355
GPR[EPVATF]-1659912791372
[720881] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912791372
GPR[SSUN]-1659912791372
79711797
GPR[ESUN]-1659912791603
GPR[SSUN]-1659912791603
948429589
GPR[SPVATF]-1659912791818
GPR[EPVATF]-1659912792387
GPR[SPS]-1659912792387
[722478] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$1:556.
GPR[EPS]-1659912792969
GPR[ESUN]-1659912792969
GPR[SSUN]-1659912792969
948429589
GPR[SPVATF]-1659912793188
GPR[EPVATF]-1659912793729
GPR[SPS]-1659912793729
[723787] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$1:554.
GPR[EPS]-1659912794278
GPR[SPVATF]-1659912794278
GPR[EPVATF]-1659912794818
GPR[SPS]-1659912794818
[724864] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$1:554.
GPR[EPS]-1659912795355
GPR[ESUN]-1659912795355
GPR[SSUN]-1659912795356
948429589
GPR[ESUN]-1659912795575
GPR[SSUN]-1659912795575
948429589
GPR[SPVATF]-1659912795792
GPR[EPVATF]-1659912796353
GPR[SPS]-1659912796353
[726407] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:571.
GPR[EPS]-1659912796898
GPR[ESUN]-1659912796898
GPR[SSUN]-1659912796898
948429589
GPR[SPVATF]-1659912797117
GPR[EPVATF]-1659912797705
GPR[SPS]-1659912797705
[727815] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:567.
GPR[EPS]-1659912798306
GPR[ESUN]-1659912798306
GPR[SSUN]-1659912798306
948429589
GPR[ESUN]-1659912798528
GPR[SSUN]-1659912798528
948429589
GPR[ESUN]-1659912798750
GPR[SSUN]-1659912798751
948429589
GPR[ESUN]-1659912798968
GPR[SSUN]-1659912798968
948429589
GPR[ESUN]-1659912799184
GPR[SSUN]-1659912799184
948429589
GPR[SPVATF]-1659912799408
GPR[EPVATF]-1659912799968
GPR[SPS]-1659912799968
[730016] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:288.
GPR[EPS]-1659912800507
GPR[SPVATF]-1659912800507
GPR[EPVATF]-1659912801085
GPR[SPS]-1659912801085
[731144] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:288.
GPR[EPS]-1659912801635
GPR[ESUN]-1659912801635
GPR[SSUN]-1659912801635
948429589
GPR[ESUN]-1659912801855
GPR[SSUN]-1659912801855
948429589
GPR[SPVATF]-1659912802072
GPR[EPVATF]-1659912802688
GPR[SPS]-1659912802688
[732730] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:269.
GPR[EPS]-1659912803221
GPR[ESUN]-1659912803221
GPR[SSUN]-1659912803221
948429589
GPR[ESUN]-1659912803439
GPR[SSUN]-1659912803439
948429589
GPR[ESUN]-1659912803655
GPR[SSUN]-1659912803655
948429589
GPR[ESUN]-1659912803872
GPR[SSUN]-1659912803872
948429589
GPR[SPVATF]-1659912804088
GPR[EPVATF]-1659912804687
GPR[SPS]-1659912804687
[734732] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:257.
GPR[EPS]-1659912805223
GPR[ESUN]-1659912805223
GPR[SSUN]-1659912805223
948429589
GPR[SPVATF]-1659912805511
GPR[EPVATF]-1659912806131
GPR[SPS]-1659912806131
[736160] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:256.
GPR[EPS]-1659912806651
GPR[SPVATF]-1659912806651
GPR[EPVATF]-1659912807288
GPR[SPS]-1659912807288
[737309] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:256.
GPR[EPS]-1659912807800
GPR[ESUN]-1659912807801
GPR[SSUN]-1659912807801
948429589
GPR[SPVATF]-1659912808020
GPR[EPVATF]-1659912808665
GPR[SPS]-1659912808665
[738685] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:254.
GPR[EPS]-1659912809176
GPR[ESUN]-1659912809176
GPR[SSUN]-1659912809176
948429589
GPR[SPVATF]-1659912809396
GPR[EPVATF]-1659912810039
GPR[SPS]-1659912810039
[740056] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:253.
GPR[EPS]-1659912810547
GPR[ESUN]-1659912810547
GPR[SSUN]-1659912810547
948429589
GPR[SPVATF]-1659912810766
GPR[EPVATF]-1659912811434
GPR[SPS]-1659912811434
[741467] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:252.
GPR[EPS]-1659912811958
GPR[ESUN]-1659912811958
GPR[SSUN]-1659912811958
-128675625
GPR[ESUN]-1659912812180
GPR[SSUN]-1659912812180
-128675625
GPR[SPVATF]-1659912812399
GPR[EPVATF]-1659912812845
GPR[SPS]-1659912812845
[742994] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:418.
GPR[EPS]-1659912813485
GPR[SPVATF]-1659912813485
GPR[EPVATF]-1659912813914
GPR[SPS]-1659912813914
[743946] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:418.
GPR[EPS]-1659912814437
GPR[ESUN]-1659912814437
GPR[SSUN]-1659912814437
-128675625
GPR[ESUN]-1659912814660
GPR[SSUN]-1659912814660
-132053243
GPR[SPVATF]-1659912814846
GPR[EPVATF]-1659912814864
[744373] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912814864
GPR[SSUN]-1659912814864
1331276989
GPR[SPVATF]-1659912815068
GPR[EPVATF]-1659912815774
GPR[SPS]-1659912815774
[745891] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:356.
GPR[EPS]-1659912816382
GPR[ESUN]-1659912816382
GPR[SSUN]-1659912816382
1331276989
GPR[ESUN]-1659912816589
GPR[SSUN]-1659912816589
1331276989
GPR[ESUN]-1659912816809
GPR[SSUN]-1659912816809
1331276989
GPR[SPVATF]-1659912817010
GPR[EPVATF]-1659912817733
GPR[SPS]-1659912817733
[747744] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:367.
GPR[EPS]-1659912818235
GPR[ESUN]-1659912818235
GPR[SSUN]-1659912818235
1331276989
GPR[SPVATF]-1659912818438
GPR[EPVATF]-1659912819209
GPR[SPS]-1659912819209
[749218] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:365.
GPR[EPS]-1659912819709
GPR[ESUN]-1659912819709
GPR[SSUN]-1659912819709
1331276989
GPR[SPVATF]-1659912819913
GPR[EPVATF]-1659912820742
GPR[SPS]-1659912820742
[750832] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:364.
GPR[EPS]-1659912821323
GPR[ESUN]-1659912821323
GPR[SSUN]-1659912821323
1331276989
GPR[ESUN]-1659912821530
GPR[SSUN]-1659912821530
1331276989
GPR[ESUN]-1659912821732
GPR[SSUN]-1659912821732
1331276989
GPR[SPVATF]-1659912821935
GPR[EPVATF]-1659912823658
GPR[SPS]-1659912823658
[753873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:360.
GPR[EPS]-1659912824364
GPR[ESUN]-1659912824364
GPR[SSUN]-1659912824364
1331276989
GPR[SPVATF]-1659912824583
GPR[EPVATF]-1659912825246
GPR[SPS]-1659912825246
[755292] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:359.
GPR[EPS]-1659912825783
GPR[ESUN]-1659912825783
GPR[SSUN]-1659912825783
1331276989
GPR[SPVATF]-1659912825987
GPR[EPVATF]-1659912826553
GPR[SPS]-1659912826553
[756582] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:358.
GPR[EPS]-1659912827073
GPR[ESUN]-1659912827073
GPR[SSUN]-1659912827073
1331276989
GPR[SPVATF]-1659912827279
GPR[EPVATF]-1659912827843
GPR[SPS]-1659912827843
[757873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:355.
GPR[EPS]-1659912828364
GPR[SPVATF]-1659912828364
GPR[EPVATF]-1659912828913
GPR[SPS]-1659912828913
[758948] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:355.
GPR[EPS]-1659912829439
GPR[ESUN]-1659912829439
GPR[SSUN]-1659912829439
1331276989
GPR[SPVATF]-1659912829646
GPR[EPVATF]-1659912830200
GPR[SPS]-1659912830200
[760255] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:352.
GPR[EPS]-1659912830746
GPR[SPVATF]-1659912830746
GPR[EPVATF]-1659912831293
GPR[SPS]-1659912831293
[761319] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:352.
GPR[EPS]-1659912831810
GPR[ESUN]-1659912831810
GPR[SSUN]-1659912831810
1331276989
GPR[ESUN]-1659912832013
GPR[SSUN]-1659912832013
1187751237
GPR[ESUN]-1659912832279
GPR[SSUN]-1659912832279
1187751237
GPR[ESUN]-1659912832541
GPR[SSUN]-1659912832541
-132053243
GPR[ESUN]-1659912832727
GPR[SSUN]-1659912832727
-132053243
GPR[SPVATF]-1659912832912
GPR[EPVATF]-1659912832930
[762439] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912832930
GPR[EPVATF]-1659912832947
[762456] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912832947
GPR[SSUN]-1659912832947
-132053243
GPR[ESUN]-1659912833133
GPR[SSUN]-1659912833134
-132053243
GPR[ESUN]-1659912833318
GPR[SSUN]-1659912833318
-132053243
GPR[SPVATF]-1659912833503
GPR[EPVATF]-1659912833521
[763030] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912833521
GPR[EPVATF]-1659912833538
[763047] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912833538
GPR[SSUN]-1659912833538
-132053243
GPR[SPVATF]-1659912833728
GPR[EPVATF]-1659912833744
[763253] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912833744
GPR[SSUN]-1659912833744
GPR[ESUN]-1659912833745
GPR[SSUN]-1659912833745
-132053243
GPR[SPVATF]-1659912833931
GPR[EPVATF]-1659912833947
[763456] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912833947
GPR[SSUN]-1659912833947
-132053243
GPR[SPVATF]-1659912834132
GPR[EPVATF]-1659912834149
[763658] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912834149
GPR[SSUN]-1659912834149
-132053243
GPR[SPVATF]-1659912834332
GPR[EPVATF]-1659912834349
[763858] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912834349
GPR[EPVATF]-1659912834366
[763875] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912834366
GPR[SSUN]-1659912834366
80988634
GPR[ESUN]-1659912834537
GPR[SSUN]-1659912834537
-132053243
GPR[ESUN]-1659912834723
GPR[SSUN]-1659912834723
-132053243
GPR[SPVATF]-1659912834908
GPR[EPVATF]-1659912834925
[764434] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912834926
GPR[EPVATF]-1659912834943
[764452] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912834943
GPR[SSUN]-1659912834943
-132053243
GPR[ESUN]-1659912835127
GPR[SSUN]-1659912835127
-132053243
GPR[SPVATF]-1659912835309
GPR[EPVATF]-1659912835326
[764835] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912835327
GPR[SSUN]-1659912835327
-132053243
GPR[SPVATF]-1659912835510
GPR[EPVATF]-1659912835527
[765036] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912835527
GPR[SSUN]-1659912835527
-132053243
GPR[SPVATF]-1659912835711
GPR[EPVATF]-1659912835727
[765236] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912835727
GPR[SSUN]-1659912835728
-132053243
GPR[SPVATF]-1659912835915
GPR[EPVATF]-1659912835933
[765442] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912835933
GPR[SSUN]-1659912835933
-132053243
GPR[SPVATF]-1659912836118
GPR[EPVATF]-1659912836135
[765644] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912836135
GPR[SSUN]-1659912836135
-132053243
GPR[ESUN]-1659912836337
GPR[SSUN]-1659912836337
2013302092
GPR[SPVATF]-1659912836558
GPR[EPVATF]-1659912837124
GPR[SPS]-1659912837124
[767171] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:205.
GPR[EPS]-1659912837662
GPR[ESUN]-1659912837662
GPR[SSUN]-1659912837662
2013302092
GPR[SPVATF]-1659912837887
GPR[EPVATF]-1659912838425
GPR[SPS]-1659912838425
[768509] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:194.
GPR[EPS]-1659912839000
GPR[ESUN]-1659912839000
GPR[SSUN]-1659912839000
2013302092
GPR[SPVATF]-1659912839272
GPR[EPVATF]-1659912839830
GPR[SPS]-1659912839830
[769904] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:193.
GPR[EPS]-1659912840395
GPR[SPVATF]-1659912840395
GPR[EPVATF]-1659912840939
GPR[SPS]-1659912840939
[771002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:193.
GPR[EPS]-1659912841493
GPR[ESUN]-1659912841493
GPR[SSUN]-1659912841493
2013302092
GPR[ESUN]-1659912841724
GPR[SSUN]-1659912841724
2013302092
GPR[ESUN]-1659912841948
GPR[SSUN]-1659912841948
2433571
GPR[ESUN]-1659912842182
GPR[SSUN]-1659912842182
2433571
GPR[ESUN]-1659912842413
GPR[SSUN]-1659912842413
-1966087783
GPR[ESUN]-1659912842600
GPR[SSUN]-1659912842600
-1966087783
GPR[SPVATF]-1659912842784
GPR[EPVATF]-1659912842804
[772313] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912842804
GPR[EPVATF]-1659912842823
[772332] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912842823
GPR[SSUN]-1659912842823
GPR[ESUN]-1659912842823
GPR[SSUN]-1659912842823
GPR[ESUN]-1659912842823
GPR[SSUN]-1659912842823
-1765952779
GPR[SPVATF]-1659912843034
GPR[EPVATF]-1659912843412
GPR[SPS]-1659912843412
[773552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:217.
GPR[EPS]-1659912844043
GPR[ESUN]-1659912844043
GPR[SSUN]-1659912844043
-1765952779
GPR[ESUN]-1659912844254
GPR[SSUN]-1659912844254
-1765952779
GPR[SPVATF]-1659912844460
GPR[EPVATF]-1659912844834
GPR[SPS]-1659912844834
[774873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:225.
GPR[EPS]-1659912845364
GPR[ESUN]-1659912845364
GPR[SSUN]-1659912845364
-1765952779
GPR[SPVATF]-1659912845574
GPR[EPVATF]-1659912845944
GPR[SPS]-1659912845945
[775971] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:221.
GPR[EPS]-1659912846462
GPR[SPVATF]-1659912846462
GPR[EPVATF]-1659912846839
GPR[SPS]-1659912846839
[776877] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:221.
GPR[EPS]-1659912847368
GPR[ESUN]-1659912847368
GPR[SSUN]-1659912847368
-1765952779
GPR[SPVATF]-1659912847579
GPR[EPVATF]-1659912847955
GPR[SPS]-1659912847955
[777978] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:216.
GPR[EPS]-1659912848470
GPR[SPVATF]-1659912848470
GPR[EPVATF]-1659912848853
GPR[SPS]-1659912848853
[778886] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:216.
GPR[EPS]-1659912849377
GPR[ESUN]-1659912849377
GPR[SSUN]-1659912849377
-1765952779
GPR[ESUN]-1659912849586
GPR[SSUN]-1659912849586
1852376448
GPR[ESUN]-1659912849795
GPR[SSUN]-1659912849795
2433571
GPR[ESUN]-1659912850021
GPR[SSUN]-1659912850021
2433571
GPR[SPVATF]-1659912850246
GPR[EPVATF]-1659912850738
GPR[SPS]-1659912850738
[780930] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2008.
GPR[EPS]-1659912851421
GPR[ESUN]-1659912851421
GPR[SSUN]-1659912851421
2433571
GPR[SPVATF]-1659912851656
GPR[EPVATF]-1659912852161
GPR[SPS]-1659912852161
[782287] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2003.
GPR[EPS]-1659912852778
GPR[ESUN]-1659912852778
GPR[SSUN]-1659912852778
1187751237
GPR[SPVATF]-1659912853049
GPR[EPVATF]-1659912853646
GPR[SPS]-1659912853647
[783836] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:834.
GPR[EPS]-1659912854327
GPR[SPVATF]-1659912854327
GPR[EPVATF]-1659912854943
GPR[SPS]-1659912854944
GPR[EPS]-1659912874742
GPR[ESUN]-1659912874742
GPR[SSUN]-1659912874742
-1251822497
GPR[SPVATF]-1659912874932
GPR[EPVATF]-1659912875591
GPR[SPS]-1659912875591
[805331] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class JSDocInfoBuilder {
    private com.google.javascript.rhino.JSDocInfo currentInfo;

    private boolean populated = false;

    private boolean parseDocumentation = false;

    private com.google.javascript.rhino.JSDocInfo.Marker currentMarker = null;

    public JSDocInfoBuilder(boolean parseDocumentation) {
        this.currentInfo = new com.google.javascript.rhino.JSDocInfo(parseDocumentation);
        this.parseDocumentation = parseDocumentation;
    }

    public void recordOriginalCommentString(java.lang.String sourceComment) {
        if (parseDocumentation) {
            currentInfo.setOriginalCommentString(sourceComment);
        }
    }

    public boolean shouldParseDocumentation() {
        return parseDocumentation;
    }

    public boolean isPopulated() {
        return populated;
    }

    public boolean isPopulatedWithFileOverview() {
        return isPopulated() && ((currentInfo.hasFileOverview() || currentInfo.isExterns()) || currentInfo.isNoCompile());
    }

    public boolean isDescriptionRecorded() {
        return currentInfo.getDescription() != null;
    }

    public com.google.javascript.rhino.JSDocInfo build(com.google.javascript.rhino.Node associatedNode) {
        if (populated) {
            com.google.javascript.rhino.JSDocInfo built = currentInfo;
            built.setAssociatedNode(associatedNode);
            com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(built);
            populated = false;
            currentInfo = new com.google.javascript.rhino.JSDocInfo(this.parseDocumentation);
            return built;
        } else {
            return null;
        }
    }

    private static void populateDefaults(com.google.javascript.rhino.JSDocInfo info) {
        if (info.getVisibility() == null) {
            info.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED);
        }
    }

    public void markAnnotation(java.lang.String annotation, int lineno, int charno) {
        com.google.javascript.rhino.JSDocInfo.Marker marker = currentInfo.addMarker();
        if (marker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(annotation);
            position.setPositionInformation(lineno, charno, lineno, charno + annotation.length());
            marker.setAnnotation(position);
            populated = true;
        }
        currentMarker = marker;
    }

    public void markText(java.lang.String text, int startLineno, int startCharno, int endLineno, int endCharno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.StringPosition position = new com.google.javascript.rhino.JSDocInfo.StringPosition();
            position.setItem(text);
            position.setPositionInformation(startLineno, startCharno, endLineno, endCharno);
            currentMarker.setDescription(position);
        }
    }

    public void markTypeNode(com.google.javascript.rhino.Node typeNode, int lineno, int startCharno, int endLineno, int endCharno, boolean hasLC) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TypePosition position = new com.google.javascript.rhino.JSDocInfo.TypePosition();
            position.setItem(typeNode);
            position.setHasBrackets(hasLC);
            position.setPositionInformation(lineno, startCharno, endLineno, endCharno);
            currentMarker.setType(position);
        }
    }

    @java.lang.Deprecated
    public void markName(java.lang.String name, int lineno, int charno) {
        markName(name, null, lineno, charno);
    }

    public void markName(java.lang.String name, com.google.javascript.rhino.jstype.StaticSourceFile file, int lineno, int charno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(name);
            position.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setName(position);
            com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodePos = new com.google.javascript.rhino.JSDocInfo.NamePosition();
            com.google.javascript.rhino.Node node = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, name, lineno, charno);
            node.setLength(name.length());
            node.setStaticSourceFile(file);
            nodePos.setItem(node);
            nodePos.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setNameNode(nodePos);
        }
    }

    public boolean recordBlockDescription(java.lang.String description) {
        populated = true;
        return currentInfo.documentBlock(description);
    }

    public boolean recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility visibility) {
        if (currentInfo.getVisibility() == null) {
            populated = true;
            currentInfo.setVisibility(visibility);
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameter(java.lang.String parameterName, com.google.javascript.rhino.JSTypeExpression type) {
        if ((!hasAnySingletonTypeTags()) && currentInfo.declareParam(type, parameterName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameterDescription(java.lang.String parameterName, java.lang.String description) {
        if (currentInfo.documentParam(parameterName, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTemplateTypeName(java.lang.String name) {
        if (currentInfo.declareTemplateTypeName(name)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThrowType(com.google.javascript.rhino.JSTypeExpression type) {
        if (!hasAnySingletonTypeTags()) {
            currentInfo.declareThrows(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordThrowDescription(com.google.javascript.rhino.JSTypeExpression type, java.lang.String description) {
        if (currentInfo.documentThrows(type, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addAuthor(java.lang.String author) {
        if (currentInfo.documentAuthor(author)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addReference(java.lang.String reference) {
        if (currentInfo.documentReference(reference)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConsistentIdGenerator() {
        if (!currentInfo.isConsistentIdGenerator()) {
            currentInfo.setConsistentIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordVersion(java.lang.String version) {
        if (currentInfo.documentVersion(version)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecationReason(java.lang.String reason) {
        if (currentInfo.setDeprecationReason(reason)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordSuppressions(java.util.Set<java.lang.String> suppressions) {
        if (currentInfo.setSuppressions(suppressions)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordModifies(java.util.Set<java.lang.String> modifies) {
        if ((!hasAnySingletonSideEffectTags()) && currentInfo.setModifies(modifies)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTypedef(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setTypedefType(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordIdGenerator() {
        if (!currentInfo.isIdGenerator()) {
            currentInfo.setIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (currentInfo.getReturnType() == null)) && (!hasAnySingletonTypeTags())) {
            currentInfo.setReturnType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnDescription(java.lang.String description) {
        if (currentInfo.documentReturn(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDefineType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((((type != null) && (!currentInfo.isConstant())) && (!currentInfo.isDefine())) && recordType(type)) {
            currentInfo.setDefine(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordEnumParameterType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setEnumParameterType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThisType(com.google.javascript.rhino.JSTypeExpression type) {
        if (((type != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasThisType())) {
            currentInfo.setThisType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordBaseType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasBaseType())) {
            currentInfo.setBaseType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstancy() {
        if (!currentInfo.isConstant()) {
            currentInfo.setConstant(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDescription(java.lang.String description) {
        if ((description != null) && (currentInfo.getDescription() == null)) {
            currentInfo.setDescription(description);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordMeaning(java.lang.String meaning) {
        if ((meaning != null) && (currentInfo.getMeaning() == null)) {
            currentInfo.setMeaning(meaning);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordFileOverview(java.lang.String description) {
        if (currentInfo.documentFileOverview(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordHiddenness() {
        if (!currentInfo.isHidden()) {
            currentInfo.setHidden(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoCompile() {
        if (!currentInfo.isNoCompile()) {
            currentInfo.setNoCompile(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoTypeCheck() {
        if (!currentInfo.isNoTypeCheck()) {
            currentInfo.setNoCheck(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstructor() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setConstructor(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isConstructorRecorded() {
        return currentInfo.isConstructor();
    }

    public boolean recordJavaDispatch() {
        if (!currentInfo.isJavaDispatch()) {
            currentInfo.setJavaDispatch(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isJavaDispatch() {
        return currentInfo.isJavaDispatch();
    }

    public boolean recordPreserveTry() {
        if (!currentInfo.shouldPreserveTry()) {
            currentInfo.setShouldPreserveTry(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordOverride() {
        if (!currentInfo.isOverride()) {
            currentInfo.setOverride(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoAlias() {
        if (!currentInfo.isNoAlias()) {
            currentInfo.setNoAlias(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecated() {
        if (!currentInfo.isDeprecated()) {
            currentInfo.setDeprecated(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordInterface() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setInterface(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExport() {
        if (!currentInfo.isExport()) {
            currentInfo.setExport(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExpose() {
        if (!currentInfo.isExpose()) {
            currentInfo.setExpose(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoShadow() {
        if (!currentInfo.isNoShadow()) {
            currentInfo.setNoShadow(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordImplicitCast() {
        if (!currentInfo.isImplicitCast()) {
            currentInfo.setImplicitCast(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoSideEffects() {
        if ((!hasAnySingletonSideEffectTags()) && (!currentInfo.isNoSideEffects())) {
            currentInfo.setNoSideEffects(true);
            populated = true;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(351).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.populated",com.google.javascript.rhino.JSDocInfoBuilder.this.populated);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation",com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker",com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo",com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectionEnds();
            }
            if (runtimeAngelicValue)
                return true;

        } else {
            return false;
        }
    }

    public boolean recordExterns() {
        if (!currentInfo.isExterns()) {
            currentInfo.setExterns(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isInterfaceRecorded() {
        return currentInfo.isInterface();
    }

    public boolean hasParameter(java.lang.String name) {
        return currentInfo.hasParameter(name);
    }

    public boolean recordImplementedInterface(com.google.javascript.rhino.JSTypeExpression interfaceName) {
        if (currentInfo.addImplementedInterface(interfaceName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExtendedInterface(com.google.javascript.rhino.JSTypeExpression interfaceType) {
        if (currentInfo.addExtendedInterface(interfaceType)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordLends(java.lang.String name) {
        if (!hasAnyTypeRelatedTags()) {
            currentInfo.setLendsName(name);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    private boolean hasAnyTypeRelatedTags() {
        return (((((((currentInfo.isConstructor() || currentInfo.isInterface()) || (currentInfo.getParameterCount() > 0)) || currentInfo.hasReturnType()) || currentInfo.hasBaseType()) || (currentInfo.getExtendedInterfacesCount() > 0)) || (currentInfo.getLendsName() != null)) || currentInfo.hasThisType()) || hasAnySingletonTypeTags();
    }

    private boolean hasAnySingletonTypeTags() {
        return (currentInfo.hasType() || currentInfo.hasTypedefType()) || currentInfo.hasEnumParameterType();
    }

    private boolean hasAnySingletonSideEffectTags() {
        return currentInfo.isNoSideEffects() || currentInfo.hasModifies();
    }
}
[805331] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912875822
GPR[SSUN]-1659912875822
-1251822497
GPR[SPVATF]-1659912876011
GPR[EPVATF]-1659912876703
GPR[SPS]-1659912876703
[806725] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:885.
GPR[EPS]-1659912877216
GPR[ESUN]-1659912877216
GPR[SSUN]-1659912877216
-1251822497
GPR[SPVATF]-1659912877405
GPR[EPVATF]-1659912878115
GPR[SPS]-1659912878115
[808087] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:884.
GPR[EPS]-1659912878578
GPR[ESUN]-1659912878578
GPR[SSUN]-1659912878578
1508981886
GPR[ESUN]-1659912878789
GPR[SSUN]-1659912878789
1508981886
GPR[SPVATF]-1659912878993
GPR[EPVATF]-1659912879721
GPR[SPS]-1659912879721
[809696] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:406.
GPR[EPS]-1659912880187
GPR[ESUN]-1659912880187
GPR[SSUN]-1659912880187
-1251822497
GPR[SPVATF]-1659912880376
GPR[EPVATF]-1659912881119
GPR[SPS]-1659912881119
[811044] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:882.
GPR[EPS]-1659912881535
GPR[ESUN]-1659912881535
GPR[SSUN]-1659912881535
-179796259
GPR[SPVATF]-1659912881772
GPR[EPVATF]-1659912882544
GPR[SPS]-1659912882544
[812777] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:740.
GPR[EPS]-1659912883268
GPR[ESUN]-1659912883268
GPR[SSUN]-1659912883268
-179796259
GPR[SPVATF]-1659912883503
GPR[EPVATF]-1659912884290
GPR[SPS]-1659912884290
[814452] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:739.
GPR[EPS]-1659912884943
GPR[ESUN]-1659912884943
GPR[SSUN]-1659912884943
-179796259
GPR[SPVATF]-1659912885195
GPR[EPVATF]-1659912885984
GPR[SPS]-1659912885984
[816152] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:735.
GPR[EPS]-1659912886643
GPR[SPVATF]-1659912886643
GPR[EPVATF]-1659912888351
GPR[SPS]-1659912888351
[818907] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:735.
GPR[EPS]-1659912889398
GPR[ESUN]-1659912889398
GPR[SSUN]-1659912889398
1187751237
GPR[ESUN]-1659912889719
GPR[SSUN]-1659912889719
-1251822497
GPR[ESUN]-1659912889906
GPR[SSUN]-1659912889906
1508981886
GPR[ESUN]-1659912890109
GPR[SSUN]-1659912890109
1508981886
GPR[ESUN]-1659912890309
GPR[SSUN]-1659912890309
1852376448
GPR[SPVATF]-1659912890520
GPR[EPVATF]-1659912891146
GPR[SPS]-1659912891146
[821182] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:157.
GPR[EPS]-1659912891673
GPR[SPVATF]-1659912891673
GPR[EPVATF]-1659912892271
GPR[SPS]-1659912892271
[822299] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:157.
GPR[EPS]-1659912892790
GPR[ESUN]-1659912892790
GPR[SSUN]-1659912892790
1852376448
GPR[SPVATF]-1659912893005
GPR[EPVATF]-1659912893591
GPR[SPS]-1659912893591
[823615] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:140.
GPR[EPS]-1659912894106
GPR[SPVATF]-1659912894106
GPR[EPVATF]-1659912894674
GPR[SPS]-1659912894674
[824701] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:140.
GPR[EPS]-1659912895192
GPR[ESUN]-1659912895192
GPR[SSUN]-1659912895192
1852376448
GPR[ESUN]-1659912895407
GPR[SSUN]-1659912895407
1852376448
GPR[SPVATF]-1659912895646
GPR[EPVATF]-1659912896219
GPR[SPS]-1659912896219
[826246] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:136.
GPR[EPS]-1659912896737
GPR[ESUN]-1659912896737
GPR[SSUN]-1659912896737
1852376448
GPR[ESUN]-1659912896949
GPR[SSUN]-1659912896949
1852376448
GPR[ESUN]-1659912897159
GPR[SSUN]-1659912897159
-1119592721
GPR[SPVATF]-1659912897376
GPR[EPVATF]-1659912897770
GPR[SPS]-1659912897770
[827819] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:285.
GPR[EPS]-1659912898310
GPR[ESUN]-1659912898310
GPR[SSUN]-1659912898310
-1119592721
GPR[SPVATF]-1659912898531
GPR[EPVATF]-1659912898930
GPR[SPS]-1659912898930
[828977] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:283.
GPR[EPS]-1659912899468
GPR[ESUN]-1659912899468
GPR[SSUN]-1659912899468
-1119592721
GPR[SPVATF]-1659912899690
GPR[EPVATF]-1659912900077
GPR[SPS]-1659912900077
[830130] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:282.
GPR[EPS]-1659912900621
GPR[ESUN]-1659912900621
GPR[SSUN]-1659912900621
-1119592721
GPR[ESUN]-1659912900842
GPR[SSUN]-1659912900842
1187751237
GPR[SPVATF]-1659912901108
GPR[EPVATF]-1659912901674
GPR[SPS]-1659912901674
[831864] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2669.
GPR[EPS]-1659912902355
GPR[SPVATF]-1659912902355
GPR[EPVATF]-1659912902969
GPR[SPS]-1659912902969
GPR[EPS]-1659912915157
GPR[ESUN]-1659912915157
GPR[SSUN]-1659912915157
1331276989
GPR[ESUN]-1659912915360
GPR[SSUN]-1659912915360
1187751237
GPR[SPVATF]-1659912915622
GPR[EPVATF]-1659912916230
GPR[SPS]-1659912916230
[846451] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:921.
GPR[EPS]-1659912916942
GPR[SPVATF]-1659912916942
GPR[EPVATF]-1659912917555
GPR[SPS]-1659912917555
GPR[EPS]-1659912940051
GPR[ESUN]-1659912940051
GPR[SSUN]-1659912940051
2013302092
GPR[SPVATF]-1659912940370
GPR[EPVATF]-1659912940986
GPR[SPS]-1659912940986
[870833] ERROR ConstraintModelBuilder - Unable to compile the change: 
class SimpleDefinitionFinder implements com.google.javascript.jscomp.CompilerPass , com.google.javascript.jscomp.DefinitionProvider {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.jscomp.DefinitionSite> definitionSiteMap;

    private final com.google.common.collect.Multimap<java.lang.String, com.google.javascript.jscomp.DefinitionsRemover.Definition> nameDefinitionMultimap;

    private final com.google.common.collect.Multimap<java.lang.String, com.google.javascript.jscomp.UseSite> nameUseSiteMultimap;

    public SimpleDefinitionFinder(com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.compiler = compiler;
        this.definitionSiteMap = com.google.common.collect.Maps.newLinkedHashMap();
        this.nameDefinitionMultimap = com.google.common.collect.LinkedHashMultimap.create();
        this.nameUseSiteMultimap = com.google.common.collect.LinkedHashMultimap.create();
    }

    public java.util.Collection<com.google.javascript.jscomp.DefinitionSite> getDefinitionSites() {
        return definitionSiteMap.values();
    }

    private com.google.javascript.jscomp.DefinitionSite getDefinitionAt(com.google.javascript.rhino.Node node) {
        return definitionSiteMap.get(node);
    }

    com.google.javascript.jscomp.DefinitionSite getDefinitionForFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return getDefinitionAt(com.google.javascript.jscomp.SimpleDefinitionFinder.getNameNodeFromFunctionNode(function));
    }

    @java.lang.Override
    public java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> getDefinitionsReferencedAt(com.google.javascript.rhino.Node useSite) {
        if (definitionSiteMap.containsKey(useSite)) {
            return null;
        }
        if (useSite.isGetProp()) {
            java.lang.String propName = useSite.getLastChild().getString();
            if (propName.equals("apply") || propName.equals("call")) {
                useSite = useSite.getFirstChild();
            }
        }
        java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(useSite);
        if (name != null) {
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> defs = nameDefinitionMultimap.get(name);
            if (!defs.isEmpty()) {
                return defs;
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(372).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(372).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(372).collectInput("defs",defs);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(372).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.compiler",com.google.javascript.jscomp.SimpleDefinitionFinder.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(372).collectInput("useSite",useSite);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(372).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameDefinitionMultimap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameDefinitionMultimap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(372).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameUseSiteMultimap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameUseSiteMultimap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(372).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(372).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.definitionSiteMap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.definitionSiteMap);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(372).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(372).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return null;

            }
        } else {
            return null;
        }
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node source) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, externs, new com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback(true));
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, source, new com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback(false));
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, source, new com.google.javascript.jscomp.SimpleDefinitionFinder.UseSiteGatheringCallback());
    }

    java.util.Collection<com.google.javascript.jscomp.UseSite> getUseSites(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(definition.getLValue());
        return nameUseSiteMultimap.get(name);
    }

    private static java.lang.String getSimplifiedName(com.google.javascript.rhino.Node node) {
        if (node.isName()) {
            java.lang.String name = node.getString();
            if ((name != null) && (!name.isEmpty())) {
                return name;
            } else {
                return null;
            }
        } else if (node.isGetProp()) {
            return "this." + node.getLastChild().getString();
        }
        return null;
    }

    private class DefinitionGatheringCallback extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        private boolean inExterns;

        DefinitionGatheringCallback(boolean inExterns) {
            this.inExterns = inExterns;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            if ((inExterns && node.isName()) && parent.isParamList()) {
                return;
            }
            com.google.javascript.jscomp.DefinitionsRemover.Definition def = com.google.javascript.jscomp.DefinitionsRemover.getDefinition(node, inExterns);
            if (def != null) {
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(def.getLValue());
                if (name != null) {
                    com.google.javascript.rhino.Node rValue = def.getRValue();
                    if (((rValue != null) && (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(rValue))) && (!rValue.isFunction())) {
                        com.google.javascript.jscomp.DefinitionsRemover.Definition unknownDef = new com.google.javascript.jscomp.DefinitionsRemover.UnknownDefinition(def.getLValue(), inExterns);
                        def = unknownDef;
                    }
                    if (inExterns) {
                        java.util.List<com.google.javascript.jscomp.DefinitionsRemover.Definition> stubsToRemove = com.google.common.collect.Lists.newArrayList();
                        java.lang.String qualifiedName = node.getQualifiedName();
                        if (qualifiedName != null) {
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : nameDefinitionMultimap.get(name)) {
                                if ((prevDef instanceof com.google.javascript.jscomp.DefinitionsRemover.ExternalNameOnlyDefinition) && (!jsdocContainsDeclarations(node))) {
                                    java.lang.String prevName = prevDef.getLValue().getQualifiedName();
                                    if (qualifiedName.equals(prevName)) {
                                        stubsToRemove.add(prevDef);
                                    }
                                }
                            }
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : stubsToRemove) {
                                nameDefinitionMultimap.remove(name, prevDef);
                            }
                        }
                    }
                    nameDefinitionMultimap.put(name, def);
                    definitionSiteMap.put(node, new com.google.javascript.jscomp.DefinitionSite(node, def, traversal.getModule(), traversal.inGlobalScope(), inExterns));
                }
            }
            if ((inExterns && (parent != null)) && parent.isExprResult()) {
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(node);
                if (name != null) {
                    boolean dropStub = false;
                    if (!jsdocContainsDeclarations(node)) {
                        java.lang.String qualifiedName = node.getQualifiedName();
                        if (qualifiedName != null) {
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : nameDefinitionMultimap.get(name)) {
                                java.lang.String prevName = prevDef.getLValue().getQualifiedName();
                                if (qualifiedName.equals(prevName)) {
                                    dropStub = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (!dropStub) {
                        com.google.javascript.jscomp.DefinitionsRemover.Definition definition = new com.google.javascript.jscomp.DefinitionsRemover.ExternalNameOnlyDefinition(node);
                        nameDefinitionMultimap.put(name, definition);
                        definitionSiteMap.put(node, new com.google.javascript.jscomp.DefinitionSite(node, definition, traversal.getModule(), traversal.inGlobalScope(), inExterns));
                    }
                }
            }
        }

        private boolean jsdocContainsDeclarations(com.google.javascript.rhino.Node node) {
            com.google.javascript.rhino.JSDocInfo info = node.getJSDocInfo();
            return (info != null) && info.containsDeclaration();
        }
    }

    private class UseSiteGatheringCallback extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> defs = getDefinitionsReferencedAt(node);
            if (defs == null) {
                return;
            }
            com.google.javascript.jscomp.DefinitionsRemover.Definition first = defs.iterator().next();
            java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(first.getLValue());
            com.google.common.base.Preconditions.checkNotNull(name);
            nameUseSiteMultimap.put(name, new com.google.javascript.jscomp.UseSite(node, traversal.getScope(), traversal.getModule()));
        }
    }

    static boolean isCallOrNewSite(com.google.javascript.jscomp.UseSite use) {
        com.google.javascript.rhino.Node call = use.node.getParent();
        if (call == null) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isCallOrNew(call) && (call.getFirstChild() == use.node);
    }

    boolean canModifyDefinition(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        if (isExported(definition)) {
            return false;
        }
        java.util.Collection<com.google.javascript.jscomp.UseSite> useSites = getUseSites(definition);
        if (useSites.isEmpty()) {
            return false;
        }
        for (com.google.javascript.jscomp.UseSite site : useSites) {
            com.google.javascript.rhino.Node nameNode = site.node;
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> singleSiteDefinitions = getDefinitionsReferencedAt(nameNode);
            if (singleSiteDefinitions.size() > 1) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(!singleSiteDefinitions.isEmpty());
            com.google.common.base.Preconditions.checkState(singleSiteDefinitions.contains(definition));
        }
        return true;
    }

    private boolean isExported(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        com.google.javascript.rhino.Node lValue = definition.getLValue();
        if (lValue == null) {
            return true;
        }
        java.lang.String partialName;
        if (lValue.isGetProp()) {
            partialName = lValue.getLastChild().getString();
        } else if (lValue.isName()) {
            partialName = lValue.getString();
        } else {
            return true;
        }
        com.google.javascript.jscomp.CodingConvention codingConvention = compiler.getCodingConvention();
        if (codingConvention.isExported(partialName)) {
            return true;
        }
        return false;
    }

    static boolean isSimpleFunctionDeclaration(com.google.javascript.rhino.Node fn) {
        com.google.javascript.rhino.Node parent = fn.getParent();
        com.google.javascript.rhino.Node gramps = parent.getParent();
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.SimpleDefinitionFinder.getNameNodeFromFunctionNode(fn);
        if ((nameNode != null) && nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (name.equals(com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN) || name.equals(com.google.javascript.jscomp.ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {
                return false;
            }
        }
        if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(fn)) {
            return true;
        }
        if (fn.getFirstChild().getString().isEmpty() && (com.google.javascript.jscomp.NodeUtil.isExprAssign(gramps) || parent.isName())) {
            return true;
        }
        return false;
    }

    static com.google.javascript.rhino.Node getNameNodeFromFunctionNode(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(function)) {
            return function.getFirstChild();
        } else {
            com.google.javascript.rhino.Node parent = function.getParent();
            if (com.google.javascript.jscomp.NodeUtil.isVarDeclaration(parent)) {
                return parent;
            } else if (parent.isAssign()) {
                return parent.getFirstChild();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent;
            }
        }
        return null;
    }

    void removeReferences(com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.DefinitionsRemover.isDefinitionNode(node)) {
            com.google.javascript.jscomp.DefinitionSite defSite = definitionSiteMap.get(node);
            if (defSite != null) {
                com.google.javascript.jscomp.DefinitionsRemover.Definition def = defSite.definition;
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(def.getLValue());
                if (name != null) {
                    this.definitionSiteMap.remove(node);
                    this.nameDefinitionMultimap.remove(name, node);
                }
            }
        } else {
            com.google.javascript.rhino.Node useSite = node;
            if (useSite.isGetProp()) {
                java.lang.String propName = useSite.getLastChild().getString();
                if (propName.equals("apply") || propName.equals("call")) {
                    useSite = useSite.getFirstChild();
                }
            }
            java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(useSite);
            if (name != null) {
                this.nameUseSiteMultimap.remove(name, new com.google.javascript.jscomp.UseSite(useSite, null, null));
            }
        }
        for (com.google.javascript.rhino.Node child : node.children()) {
            removeReferences(child);
        }
    }
}
[870834] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912941325
GPR[SSUN]-1659912941325
-1966087783
GPR[SPVATF]-1659912941512
GPR[EPVATF]-1659912941530
[871039] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659912941530
GPR[EPVATF]-1659912941548
[871057] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659912941548
GPR[SSUN]-1659912941548
-1966087783
GPR[ESUN]-1659912941733
GPR[SSUN]-1659912941733
1852376448
GPR[SPVATF]-1659912941944
GPR[EPVATF]-1659912942487
GPR[SPS]-1659912942487
[872506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:184.
GPR[EPS]-1659912942998
GPR[ESUN]-1659912942998
GPR[SSUN]-1659912942998
602654447
GPR[ESUN]-1659912943195
GPR[SSUN]-1659912943195
-1119592721
GPR[SPVATF]-1659912943412
GPR[EPVATF]-1659912943850
GPR[SPS]-1659912943850
[873895] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:280.
GPR[EPS]-1659912944386
GPR[SPVATF]-1659912944386
GPR[EPVATF]-1659912944826
GPR[SPS]-1659912944826
[874863] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:280.
GPR[EPS]-1659912945354
GPR[ESUN]-1659912945354
GPR[SSUN]-1659912945354
2013302092
GPR[SPVATF]-1659912945579
GPR[EPVATF]-1659912946267
GPR[SPS]-1659912946267
[876300] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:178.
GPR[EPS]-1659912946791
GPR[ESUN]-1659912946791
GPR[SSUN]-1659912946792
2013302092
GPR[ESUN]-1659912947016
GPR[SSUN]-1659912947016
-718432441
GPR[SPVATF]-1659912947224
GPR[EPVATF]-1659912947669
GPR[SPS]-1659912947669
[877852] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:224.
GPR[EPS]-1659912948343
GPR[ESUN]-1659912948343
GPR[SSUN]-1659912948343
-718432441
GPR[SPVATF]-1659912948554
GPR[EPVATF]-1659912948991
GPR[SPS]-1659912948991
[879160] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:223.
GPR[EPS]-1659912949651
GPR[ESUN]-1659912949651
GPR[SSUN]-1659912949651
-718432441
GPR[SPVATF]-1659912949861
GPR[EPVATF]-1659912950299
GPR[SPS]-1659912950299
[880463] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:222.
GPR[EPS]-1659912950954
GPR[ESUN]-1659912950954
GPR[SSUN]-1659912950954
1852376448
GPR[ESUN]-1659912951164
GPR[SSUN]-1659912951164
1852376448
GPR[ESUN]-1659912951372
GPR[SSUN]-1659912951372
1852376448
GPR[ESUN]-1659912951607
GPR[SSUN]-1659912951607
1852376448
GPR[SPVATF]-1659912951817
GPR[EPVATF]-1659912952548
GPR[SPS]-1659912952548
[882553] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:69.
GPR[EPS]-1659912953044
GPR[ESUN]-1659912953044
GPR[SSUN]-1659912953044
1852376448
GPR[SPVATF]-1659912953254
GPR[EPVATF]-1659912954005
GPR[SPS]-1659912954005
[884003] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:66.
GPR[EPS]-1659912954494
GPR[ESUN]-1659912954494
GPR[SSUN]-1659912954494
1852376448
GPR[SPVATF]-1659912954704
GPR[EPVATF]-1659912955496
GPR[SPS]-1659912955496
[885501] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:64.
GPR[EPS]-1659912955992
GPR[ESUN]-1659912955992
GPR[SSUN]-1659912955992
1852376448
GPR[SPVATF]-1659912956204
GPR[EPVATF]-1659912957019
GPR[SPS]-1659912957019
[887031] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:60.
GPR[EPS]-1659912957522
GPR[ESUN]-1659912957522
GPR[SSUN]-1659912957522
1852376448
GPR[ESUN]-1659912957734
GPR[SSUN]-1659912957734
1852376448
GPR[ESUN]-1659912957943
GPR[SSUN]-1659912957943
1852376448
GPR[SPVATF]-1659912958152
GPR[EPVATF]-1659912958947
GPR[SPS]-1659912958947
[888952] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:130.
GPR[EPS]-1659912959443
GPR[SPVATF]-1659912959443
GPR[EPVATF]-1659912960300
GPR[SPS]-1659912960301
[891176] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:130.
GPR[EPS]-1659912961667
GPR[ESUN]-1659912961667
GPR[SSUN]-1659912961667
1852376448
GPR[SPVATF]-1659912961886
GPR[EPVATF]-1659912962775
GPR[SPS]-1659912962775
[893143] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:125.
GPR[EPS]-1659912963634
GPR[SPVATF]-1659912963634
GPR[EPVATF]-1659912964746
GPR[SPS]-1659912964746
[894764] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:125.
GPR[EPS]-1659912965255
GPR[ESUN]-1659912965255
GPR[SSUN]-1659912965255
1852376448
GPR[SPVATF]-1659912965468
GPR[EPVATF]-1659912966078
GPR[SPS]-1659912966078
[896113] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:121.
GPR[EPS]-1659912966604
GPR[SPVATF]-1659912966605
GPR[EPVATF]-1659912967276
GPR[SPS]-1659912967276
[897286] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:121.
GPR[EPS]-1659912967777
GPR[ESUN]-1659912967777
GPR[SSUN]-1659912967778
1852376448
GPR[SPVATF]-1659912967991
GPR[EPVATF]-1659912968580
GPR[SPS]-1659912968580
[898599] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:178.
GPR[EPS]-1659912969090
GPR[ESUN]-1659912969090
GPR[SSUN]-1659912969090
1852376448
GPR[SPVATF]-1659912969302
GPR[EPVATF]-1659912969886
GPR[SPS]-1659912969886
[899952] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:177.
GPR[EPS]-1659912970443
GPR[SPVATF]-1659912970443
GPR[EPVATF]-1659912971032
GPR[SPS]-1659912971032
[901045] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:177.
GPR[EPS]-1659912971536
GPR[ESUN]-1659912971536
GPR[SSUN]-1659912971536
2433571
GPR[ESUN]-1659912971772
GPR[SSUN]-1659912971772
2433571
GPR[ESUN]-1659912972013
GPR[SSUN]-1659912972013
2433571
GPR[ESUN]-1659912972239
GPR[SSUN]-1659912972239
2433571
GPR[SPVATF]-1659912972464
GPR[EPVATF]-1659912973047
GPR[SPS]-1659912973047
[1121760] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659913192251
GPR[SSUN]-1659913192251
\n\nNode: host-50\n
\n\nDate: Sun 07 Aug 2022 04:04:33 PM PDT\n
End running Nopol Closure/30 results at /experiment_home///results/Nopol/Closure/30/seed_264/
Removing checked out dir script/workingdir/Nopol/Closure_30
GPR[SSLE]-1659913474466
GPR[ESLE]-1659913534470
