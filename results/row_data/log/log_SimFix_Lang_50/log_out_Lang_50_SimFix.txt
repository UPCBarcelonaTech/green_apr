Sleep 1m start
GPR[SSLI]-1659928795768
GPR[ESLI]-1659928855773
Running SimFix Lang 50b
Timezone: America/Los_Angeles
Seed 263
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Lang/50/seed_263/
Project lc: lang
New out script/workingdir/SimFix/lang/lang_50_buggy
The file script/workingdir/SimFix/lang/lang_50_buggy does not exist!
script/workingdir/SimFix/lang/lang_50_buggy
Current directory: script/workingdir/SimFix/lang/lang_50_buggy
classpath:  script/workingdir/SimFix/lang/lang_50_buggy/target/classes:script/workingdir/SimFix/lang/lang_50_buggy/target/tests:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:/experiment_home/defects4j/framework/projects/Lang/lib/cglib.jar:/experiment_home/defects4j/framework/projects/Lang/lib/asm.jar:/experiment_home/defects4j/framework/projects/Lang/lib/easymock.jar:/experiment_home/defects4j/framework/projects/Lang/lib/commons-io.jar
Src java:  /src/java
Classes Java:  /target/classes
Src Test:  /src/test
Classes Test:  /target/tests
GPR[SSLB]-1659928868140
GPR[ESLB]-1659928928144
Calling SimFix: at script/workingdir/SimFix/lang/lang_50_buggy
build.xml
checkstyle.xml
d4j-info
default.properties
defects4j.build.properties
doap_lang.rdf
LICENSE.txt
maven.xml
NOTICE.txt
pom.xml
project.properties
project.xml
PROPOSAL.html
RELEASE-NOTES.txt
src
STATUS.html
target
xdocs
content current dir: build.xml checkstyle.xml d4j-info default.properties defects4j.build.properties doap_lang.rdf LICENSE.txt maven.xml NOTICE.txt pom.xml project.properties project.xml PROPOSAL.html RELEASE-NOTES.txt src STATUS.html target xdocs
Node: host-59
Date init: Sun 07 Aug 2022 08:22:10 PM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659928930303
=================================================
Project : lang_50	start : 22/08/07 20:22

TESTING : org.apache.commons.lang.text.MessageFormatExtensionTest::testLongTime
MM: Failing tests: 0
TESTING : org.apache.commons.lang.text.MessageFormatTest::testLongTime
MM: Failing tests: 0
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateTimeInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateTimeInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatBaselineTest::testLongTime
MM: Failing tests: 0
GPR[ESUP]-1659928937983
MM Purify? true
GPR[SFL]-1659928938155
GPR[EFL]-1659928938159
GPR[SFP]-1659928938159
TIMEOUT : 9000000
GPR[SSUN]-1659928938169
org.apache.commons.lang.time.FastDateFormat,620
========
if(tokenLen==1){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928938668
GPR[SPVAP]-1659928938668
GPR[EPVAP]-1659928941806
GPR[SPVATF]-1659928941806
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928942734
GPR[EPVS]-1659928942734
========
if(tokenLen==2){
rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928942737
GPR[SPVAP]-1659928942737
GPR[EPVAP]-1659928943904
GPR[SPVATF]-1659928943904
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928944842
GPR[EPVS]-1659928944842
========
if(tokenLen==2){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=TimeZoneNumberRule.INSTANCE_COLON;
}

========
MM Copying to MM
GPR[SPVS]-1659928944844
GPR[SPVAP]-1659928944844
GPR[EPVAP]-1659928946016
GPR[SPVATF]-1659928946016
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928946950
GPR[EPVS]-1659928946950
========
if(tokenLen==1){
rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928946952
GPR[SPVAP]-1659928946952
GPR[EPVAP]-1659928948120
GPR[SPVATF]-1659928948120
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928949057
GPR[EPVS]-1659928949057
========
if(tokenLen==1){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=TimeZoneNumberRule.INSTANCE_COLON;
}

========
MM Copying to MM
GPR[SPVS]-1659928949059
GPR[SPVAP]-1659928949059
GPR[EPVAP]-1659928950211
GPR[SPVATF]-1659928950211
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928951150
GPR[EPVS]-1659928951150
========
if(tokenLen==2){
rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
}else {
rule=TimeZoneNumberRule.INSTANCE_COLON;
}

========
MM Copying to MM
GPR[SPVS]-1659928951152
GPR[SPVAP]-1659928951152
GPR[EPVAP]-1659928952320
GPR[SPVATF]-1659928952320
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928953249
GPR[EPVS]-1659928953249
========
if(tokenLen==1){
rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
}else {
rule=TimeZoneNumberRule.INSTANCE_COLON;
}

========
MM Copying to MM
GPR[SPVS]-1659928953250
GPR[SPVAP]-1659928953250
GPR[EPVAP]-1659928954413
GPR[SPVATF]-1659928954413
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928955337
GPR[EPVS]-1659928955337
========
if(tokenLen==4){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928955339
GPR[SPVAP]-1659928955339
GPR[EPVAP]-1659928956497
GPR[SPVATF]-1659928956497
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928957433
GPR[EPVS]-1659928957433
========
if(tokenLen==2){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=TwoDigitYearField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928957436
GPR[SPVAP]-1659928957436
GPR[EPVAP]-1659928958599
GPR[SPVATF]-1659928958599
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928959535
GPR[EPVS]-1659928959535
========
if(tokenLen==4){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=TwoDigitYearField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928959538
GPR[SPVAP]-1659928959538
GPR[EPVAP]-1659928960712
GPR[SPVATF]-1659928960712
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928961647
GPR[EPVS]-1659928961647
========
if(tokenLen==0){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928961650
GPR[SPVAP]-1659928961650
GPR[EPVAP]-1659928962824
GPR[SPVATF]-1659928962825
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928963781
GPR[EPVS]-1659928963781
========
i=indexRef[0];
if(tokenLen==2){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928963784
GPR[SPVAP]-1659928963784
GPR[EPVAP]-1659928964961
GPR[SPVATF]-1659928964961
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928965880
GPR[EPVS]-1659928965880
========
i=indexRef[0];
if(tokenLen==0){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928965883
GPR[SPVAP]-1659928965883
GPR[EPVAP]-1659928967043
GPR[SPVATF]-1659928967043
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928967978
GPR[EPVS]-1659928967978
========
if(tokenLen==1){
rule=new TextField(Calendar.MONTH,shortMonths);
}else if(tokenLen==2){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928968320
GPR[SPVAP]-1659928968320
GPR[EPVAP]-1659928969489
GPR[SPVATF]-1659928969489
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928970410
GPR[EPVS]-1659928970410
========
if(tokenLen==4){
rule=new TextField(Calendar.MONTH,shortMonths);
}else if(tokenLen==2){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928970412
GPR[SPVAP]-1659928970412
GPR[EPVAP]-1659928971571
GPR[SPVATF]-1659928971571
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928972497
GPR[EPVS]-1659928972497
========
if(tokenLen==0){
rule=new TextField(Calendar.MONTH,shortMonths);
}else if(tokenLen==2){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928972500
GPR[SPVAP]-1659928972500
GPR[EPVAP]-1659928973654
GPR[SPVATF]-1659928973654
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928974570
GPR[EPVS]-1659928974570
========
indexRef[0]=i;
if(tokenLen==3){
rule=new TextField(Calendar.MONTH,shortMonths);
}else if(tokenLen==2){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928974572
GPR[SPVAP]-1659928974572
GPR[EPVAP]-1659928975741
GPR[SPVATF]-1659928975741
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928976669
GPR[EPVS]-1659928976669
========
i=indexRef[0];
if(tokenLen==3){
rule=new TextField(Calendar.MONTH,shortMonths);
}else if(tokenLen==2){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928976671
GPR[SPVAP]-1659928976671
GPR[EPVAP]-1659928977833
GPR[SPVATF]-1659928977833
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928978757
GPR[EPVS]-1659928978757
========
indexRef[0]=i;
if(tokenLen==0){
rule=new TextField(Calendar.MONTH,shortMonths);
}else if(tokenLen==2){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928978759
GPR[SPVAP]-1659928978759
GPR[EPVAP]-1659928979920
GPR[SPVATF]-1659928979920
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928980849
GPR[EPVS]-1659928980849
========
i=indexRef[0];
if(tokenLen==0){
rule=new TextField(Calendar.MONTH,shortMonths);
}else if(tokenLen==2){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928980851
GPR[SPVAP]-1659928980851
GPR[EPVAP]-1659928982010
GPR[SPVATF]-1659928982010
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928982927
GPR[EPVS]-1659928982927
========
indexRef[0]=i;
i=indexRef[0];
if(tokenLen==3){
rule=new TextField(Calendar.MONTH,shortMonths);
}else if(tokenLen==2){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928982929
GPR[SPVAP]-1659928982929
GPR[EPVAP]-1659928984089
GPR[SPVATF]-1659928984089
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928985017
GPR[EPVS]-1659928985017
========
indexRef[0]=i;
i=indexRef[0];
if(tokenLen==0){
rule=new TextField(Calendar.MONTH,shortMonths);
}else if(tokenLen==2){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928985019
GPR[SPVAP]-1659928985019
GPR[EPVAP]-1659928986183
GPR[SPVATF]-1659928986183
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928987117
GPR[EPVS]-1659928987117
========
if(tokenLen>=1){
rule=new TextField(Calendar.MONTH,months);
}else if(tokenLen==3){
rule=new TextField(Calendar.MONTH,shortMonths);
}else if(tokenLen==2){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928987463
GPR[SPVAP]-1659928987463
GPR[EPVAP]-1659928988639
GPR[SPVATF]-1659928988639
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928989577
GPR[EPVS]-1659928989577
========
if(tokenLen>=0){
rule=new TextField(Calendar.MONTH,months);
}else if(tokenLen==3){
rule=new TextField(Calendar.MONTH,shortMonths);
}else if(tokenLen==2){
rule=TwoDigitMonthField.INSTANCE;
}else {
rule=UnpaddedMonthField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659928989580
GPR[SPVAP]-1659928989580
GPR[EPVAP]-1659928990783
GPR[SPVATF]-1659928990783
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928991714
GPR[EPVS]-1659928991714
GPR[ESUN]-1659928991714
GPR[SSUN]-1659928991714
org.apache.commons.lang.time.FastDateFormat,1708
Find no block!
GPR[SSUN]-1659928991836
org.apache.commons.lang.time.FastDateFormat,1709
GPR[ESUN]-1659928992218
GPR[SSUN]-1659928992218
org.apache.commons.lang.time.FastDateFormat,1710
GPR[ESUN]-1659928992276
GPR[SSUN]-1659928992276
org.apache.commons.lang.time.FastDateFormat,1711
Find no block!
GPR[SSUN]-1659928992332
org.apache.commons.lang.time.FastDateFormat,1738
GPR[ESUN]-1659928992748
GPR[SSUN]-1659928992748
org.apache.commons.lang.time.FastDateFormat,234
========
return getDateInstance(style,null,mLocale);

========
MM Copying to MM
GPR[SPVS]-1659928993088
GPR[SPVAP]-1659928993088
GPR[EPVAP]-1659928994313
GPR[EPVS]-1659928994313
========
return getDateInstance(style,mTimeZone,null);

========
MM Copying to MM
GPR[SPVS]-1659928994315
GPR[SPVAP]-1659928994315
GPR[EPVAP]-1659928995068
GPR[EPVS]-1659928995068
========
return getTimeInstance(style,null,null);

========
MM Copying to MM
GPR[SPVS]-1659928995069
GPR[SPVAP]-1659928995069
GPR[EPVAP]-1659928997721
GPR[SPVATF]-1659928997721
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659928998639
GPR[EPVS]-1659928998639
========
return getTimeInstance(style,null,mLocale);

========
MM Copying to MM
GPR[SPVS]-1659928998641
GPR[SPVAP]-1659928998641
GPR[EPVAP]-1659928999335
GPR[EPVS]-1659928999335
========
return getTimeInstance(style,mTimeZone,null);

========
MM Copying to MM
GPR[SPVS]-1659928999337
GPR[SPVAP]-1659928999337
GPR[EPVAP]-1659929000030
GPR[EPVS]-1659929000030
GPR[ESUN]-1659929000030
GPR[SSUN]-1659929000030
org.apache.commons.lang.time.FastDateFormat,293
UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date pattern for locale: " + locale);
}

UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date pattern for locale: " + locale);
}

UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
}

========
if(locale!=null){
locale=Locale.getDefault();
}

========
MM Copying to MM
GPR[SPVS]-1659929000465
GPR[SPVAP]-1659929000465
GPR[EPVAP]-1659929003634
GPR[SPVATF]-1659929003635
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929004557
GPR[EPVS]-1659929004557
========
if(locale==null){
cTimeZoneDisplayCache.put(key,mStandard);
locale=Locale.getDefault();
}

========
MM Copying to MM
GPR[SPVS]-1659929004560
GPR[SPVAP]-1659929004560
GPR[EPVAP]-1659929005261
GPR[EPVS]-1659929005261
GPR[ESUN]-1659929005262
GPR[SSUN]-1659929005262
org.apache.commons.lang.time.FastDateFormat,408
========
return getDateTimeInstance(dateStyle,timeStyle,null,mLocale);

========
MM Copying to MM
GPR[SPVS]-1659929005675
GPR[SPVAP]-1659929005675
GPR[EPVAP]-1659929006870
GPR[EPVS]-1659929006870
========
return getDateTimeInstance(dateStyle,timeStyle,mTimeZone,null);

========
MM Copying to MM
GPR[SPVS]-1659929006873
GPR[SPVAP]-1659929006873
GPR[EPVAP]-1659929007658
GPR[EPVS]-1659929007658
GPR[ESUN]-1659929007658
GPR[SSUN]-1659929007658
org.apache.commons.lang.time.FastDateFormat,425
========
return getDateTimeInstance(dateStyle,timeStyle,null,null);

========
MM Copying to MM
GPR[SPVS]-1659929008042
GPR[SPVAP]-1659929008042
GPR[EPVAP]-1659929011181
GPR[SPVATF]-1659929011181
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929012110
GPR[EPVS]-1659929012110
========
return getDateTimeInstance(dateStyle,timeStyle,mTimeZone,null);

========
MM Copying to MM
GPR[SPVS]-1659929012113
GPR[SPVAP]-1659929012113
GPR[EPVAP]-1659929012813
GPR[EPVS]-1659929012813
========
return getInstance(mStandard,null,locale);

========
MM Copying to MM
GPR[SPVS]-1659929012815
GPR[SPVAP]-1659929012815
GPR[EPVAP]-1659929013511
GPR[EPVS]-1659929013511
========
return getDateInstance(dateStyle,null,locale);

========
MM Copying to MM
GPR[SPVS]-1659929013513
GPR[SPVAP]-1659929013513
GPR[EPVAP]-1659929014691
GPR[SPVATF]-1659929014691
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929015636
GPR[EPVS]-1659929015636
========
return getTimeInstance(dateStyle,null,locale);

========
MM Copying to MM
GPR[SPVS]-1659929015638
GPR[SPVAP]-1659929015638
GPR[EPVAP]-1659929016801
GPR[SPVATF]-1659929016801
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929017730
GPR[EPVS]-1659929017730
GPR[ESUN]-1659929017732
GPR[SSUN]-1659929017732
org.apache.commons.lang.time.FastDateFormat,461
========
if(locale!=null){
key=new Pair(key,locale);
}
Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));
if(timeZone!=null){
key=new Pair(key,timeZone);
}

========
MM Copying to MM
GPR[SPVS]-1659929018190
GPR[SPVAP]-1659929018190
GPR[EPVAP]-1659929019397
GPR[EPVS]-1659929019397
========
Object key=new Pair(new Integer(dateStyle),new Integer(timeStyle));
if(timeZone==null){
key=new Pair(key,timeZone);
}

========
MM Copying to MM
GPR[SPVS]-1659929019399
GPR[SPVAP]-1659929019399
GPR[EPVAP]-1659929022064
GPR[SPVATF]-1659929022064
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929023014
GPR[EPVS]-1659929023014
GPR[ESUN]-1659929023016
GPR[SSUN]-1659929023016
org.apache.commons.lang.time.FastDateFormat,462
========
if(timeZone==null){
key=new Pair(key,timeZone);
}

========
MM Copying to MM
GPR[SPVS]-1659929023401
GPR[SPVAP]-1659929023401
GPR[EPVAP]-1659929026486
GPR[SPVATF]-1659929026486
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929027417
GPR[EPVS]-1659929027417
GPR[ESUN]-1659929027418
GPR[SSUN]-1659929027418
org.apache.commons.lang.time.FastDateFormat,465
UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date pattern for locale: " + locale);
}

UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date pattern for locale: " + locale);
}

UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
}

========
if(locale==null){
key=new Pair(key,locale);
}

========
MM Copying to MM
GPR[SPVS]-1659929027815
GPR[SPVAP]-1659929027815
GPR[EPVAP]-1659929030864
GPR[SPVATF]-1659929030864
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929031785
GPR[EPVS]-1659929031785
GPR[ESUN]-1659929031786
GPR[SSUN]-1659929031786
org.apache.commons.lang.time.FastDateFormat,466
GPR[ESUN]-1659929031883
GPR[SSUN]-1659929031883
org.apache.commons.lang.time.FastDateFormat,469
========
if(timeZone!=null){
key=new Pair(key,timeZone);
}
if(locale!=null){
key=new Pair(key,locale);
}
FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);

========
MM Copying to MM
GPR[SPVS]-1659929032398
GPR[SPVAP]-1659929032398
GPR[EPVAP]-1659929035548
GPR[SPVATF]-1659929035548
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929036470
GPR[EPVS]-1659929036470
========
if(locale==null){
key=new Pair(key,locale);
}
FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);

========
MM Copying to MM
GPR[SPVS]-1659929036473
GPR[SPVAP]-1659929036473
GPR[EPVAP]-1659929037639
GPR[SPVATF]-1659929037639
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929038585
GPR[EPVS]-1659929038585
========
if((Entry)cDateTimeInstanceCache.get(getEnumClass())==null){
return null;
}
if(locale!=null){
key=new Pair(key,locale);
}
FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);

========
MM Copying to MM
GPR[SPVS]-1659929038587
GPR[SPVAP]-1659929038587
GPR[EPVAP]-1659929039292
GPR[EPVS]-1659929039292
========
if(locale!=null){
key=new Pair(key,locale);
}
initialize();
FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);

========
MM Copying to MM
GPR[SPVS]-1659929039295
GPR[SPVAP]-1659929039295
GPR[EPVAP]-1659929039997
GPR[EPVS]-1659929039997
========
if(locale!=null){
key=new Pair(key,locale);
}
if(this==mObj1){
return true;
}
FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);

========
MM Copying to MM
GPR[SPVS]-1659929040000
GPR[SPVAP]-1659929040000
GPR[EPVAP]-1659929040706
GPR[EPVS]-1659929040706
========
if(locale!=null){
key=new Pair(key,locale);
}
if(!(mObj1 instanceof Pair)){
return false;
}
FastDateFormat format=(FastDateFormat)cDateTimeInstanceCache.get(key);

========
MM Copying to MM
GPR[SPVS]-1659929040708
GPR[SPVAP]-1659929040708
GPR[EPVAP]-1659929041407
GPR[EPVS]-1659929041407
GPR[ESUN]-1659929041409
GPR[SSUN]-1659929041409
org.apache.commons.lang.time.FastDateFormat,470
========
Calendar.getInstance().add(dateStyle,timeStyle);
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929041973
GPR[SPVAP]-1659929041973
GPR[EPVAP]-1659929045083
GPR[SPVATF]-1659929045083
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929046009
GPR[EPVS]-1659929046009
========
applyPatternPre(mStandard);
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929046012
GPR[SPVAP]-1659929046012
GPR[EPVAP]-1659929046706
GPR[EPVS]-1659929046706
========
pattern=PARSER.stripFormats(mStandard);
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929046708
GPR[SPVAP]-1659929046708
GPR[EPVAP]-1659929047409
GPR[EPVS]-1659929047409
========
super.applyPattern(pattern);
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929047410
GPR[SPVAP]-1659929047411
GPR[EPVAP]-1659929048109
GPR[EPVS]-1659929048109
========
applyPatternPost(mStandard);
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929048110
GPR[SPVAP]-1659929048110
GPR[EPVAP]-1659929048817
GPR[EPVS]-1659929048817
========
modify(Calendar.getInstance(),dateStyle,true);
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929048820
GPR[SPVAP]-1659929048820
GPR[EPVAP]-1659929049525
GPR[EPVS]-1659929049525
========
modify(Calendar.getInstance(),dateStyle,false);
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929049527
GPR[SPVAP]-1659929049527
GPR[EPVAP]-1659929050225
GPR[EPVS]-1659929050225
GPR[ESUN]-1659929050227
GPR[SSUN]-1659929050227
org.apache.commons.lang.time.FastDateFormat,471
GPR[ESUN]-1659929050349
GPR[SSUN]-1659929050349
org.apache.commons.lang.time.FastDateFormat,472
GPR[ESUN]-1659929050401
GPR[SSUN]-1659929050401
org.apache.commons.lang.time.FastDateFormat,475
========
cDateTimeInstanceCache.put(key,format);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929050787
GPR[SPVAP]-1659929050787
GPR[EPVAP]-1659929053892
GPR[SPVATF]-1659929053892
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929054822
GPR[EPVS]-1659929054822
========
cDateInstanceCache.put(key,format);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929054824
GPR[SPVAP]-1659929054824
GPR[EPVAP]-1659929055991
GPR[SPVATF]-1659929055991
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929056958
GPR[EPVS]-1659929056958
========
cTimeInstanceCache.put(key,format);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929056959
GPR[SPVAP]-1659929056959
GPR[EPVAP]-1659929058140
GPR[SPVATF]-1659929058140
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929059073
GPR[EPVS]-1659929059073
========
Calendar.getInstance(timeZone).setTime(new Date(serialVersionUID));
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929059076
GPR[SPVAP]-1659929059076
GPR[EPVAP]-1659929060242
GPR[SPVATF]-1659929060242
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929061177
GPR[EPVS]-1659929061177
========
if(timeZone!=null){
key=new Pair(key,timeZone);
}
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929061178
GPR[SPVAP]-1659929061178
GPR[EPVAP]-1659929062334
GPR[SPVATF]-1659929062334
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929063278
GPR[EPVS]-1659929063278
========
if(locale!=null){
key=new Pair(key,locale);
}
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929063279
GPR[SPVAP]-1659929063279
GPR[EPVAP]-1659929064462
GPR[SPVATF]-1659929064462
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929065402
GPR[EPVS]-1659929065402
========
if(timeZone!=null){
key=new Pair(key,timeZone);
}
if(locale!=null){
key=new Pair(key,locale);
}
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929065403
GPR[SPVAP]-1659929065404
GPR[EPVAP]-1659929066575
GPR[SPVATF]-1659929066575
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929067510
GPR[EPVS]-1659929067510
========
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
if(StringUtils.isEmpty(mStandard)||ArrayUtils.isEmpty(mValues)){
return 0;
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929067512
GPR[SPVAP]-1659929067512
GPR[EPVAP]-1659929068210
GPR[EPVS]-1659929068210
========
mTimeZoneForced=(timeZone!=null);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929068212
GPR[SPVAP]-1659929068212
GPR[EPVAP]-1659929068913
GPR[EPVS]-1659929068913
========
if(timeZone==null){
timeZone=TimeZone.getDefault();
}
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929068915
GPR[SPVAP]-1659929068915
GPR[EPVAP]-1659929070097
GPR[SPVATF]-1659929070097
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929071033
GPR[EPVS]-1659929071033
========
mLocaleForced=(locale!=null);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929071034
GPR[SPVAP]-1659929071034
GPR[EPVAP]-1659929071735
GPR[EPVS]-1659929071735
========
if(locale==null){
locale=Locale.getDefault();
}
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929071738
GPR[SPVAP]-1659929071738
GPR[EPVAP]-1659929072900
GPR[SPVATF]-1659929072900
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929073828
GPR[EPVS]-1659929073828
========
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
if(StringUtils.isEmpty(mStandard)||ArrayUtils.isEmpty(mValues)){
return str;
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929073830
GPR[SPVAP]-1659929073830
GPR[EPVAP]-1659929074531
GPR[EPVS]-1659929074531
========
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
mTimeZone=timeZone;
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929074533
GPR[SPVAP]-1659929074533
GPR[EPVAP]-1659929075238
GPR[EPVS]-1659929075238
========
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
mTimeZoneForced=mTimeZoneForced;
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929075240
GPR[SPVAP]-1659929075240
GPR[EPVAP]-1659929075941
GPR[EPVS]-1659929075941
========
mStyle=mMaxLengthEstimate;
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929075942
GPR[SPVAP]-1659929075942
GPR[EPVAP]-1659929076637
GPR[EPVS]-1659929076637
========
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
if(mColon){
mMaxLengthEstimate|=0x80000000;
}
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929076638
GPR[SPVAP]-1659929076638
GPR[EPVAP]-1659929077343
GPR[EPVS]-1659929077343
========
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
mStyle=mMaxLengthEstimate;
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929077345
GPR[SPVAP]-1659929077345
GPR[EPVAP]-1659929078041
GPR[EPVS]-1659929078041
========
Calendar.getInstance().add(dateStyle,timeStyle);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929078043
GPR[SPVAP]-1659929078043
GPR[EPVAP]-1659929079222
GPR[SPVATF]-1659929079222
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929080159
GPR[EPVS]-1659929080159
========
if(pattern==null){
value=timeZone.getDisplayName(mColon,timeStyle,locale);
cTimeZoneDisplayCache.put(key,value);
}
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929080162
GPR[SPVAP]-1659929080162
GPR[EPVAP]-1659929080864
GPR[EPVS]-1659929080864
========
modify(Calendar.getInstance(),dateStyle,true);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929080867
GPR[SPVAP]-1659929080867
GPR[EPVAP]-1659929081571
GPR[EPVS]-1659929081571
========
modify(Calendar.getInstance(),dateStyle,false);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929081573
GPR[SPVAP]-1659929081573
GPR[EPVAP]-1659929082268
GPR[EPVS]-1659929082268
GPR[ESUN]-1659929082269
GPR[SSUN]-1659929082269
org.apache.commons.lang.time.FastDateFormat,477
GPR[ESUN]-1659929082392
GPR[SSUN]-1659929082392
org.apache.commons.lang.time.FastDateFormat,478
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929082840
GPR[SPVAP]-1659929082840
GPR[EPVAP]-1659929085935
GPR[SPVATF]-1659929085935
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929086874
GPR[EPVS]-1659929086874
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929086875
GPR[SPVAP]-1659929086875
GPR[EPVAP]-1659929088059
GPR[SPVATF]-1659929088059
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929088998
GPR[EPVS]-1659929088998
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
mapNameToValue.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929089000
GPR[SPVAP]-1659929089000
GPR[EPVAP]-1659929089692
GPR[EPVS]-1659929089692
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(pattern,format);

========
MM Copying to MM
GPR[SPVS]-1659929089694
GPR[SPVAP]-1659929089694
GPR[EPVAP]-1659929090867
GPR[SPVATF]-1659929090867
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929091797
GPR[EPVS]-1659929091797
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(SHORT,format);

========
MM Copying to MM
GPR[SPVS]-1659929091798
GPR[SPVAP]-1659929091798
GPR[EPVAP]-1659929092491
GPR[EPVS]-1659929092491
========
new HashMap().put(MEDIUM,new Integer(DateFormat.MEDIUM));
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929092493
GPR[SPVAP]-1659929092493
GPR[EPVAP]-1659929093191
GPR[EPVS]-1659929093191
========
new HashMap().put(LONG,new Integer(DateFormat.LONG));
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929093193
GPR[SPVAP]-1659929093193
GPR[EPVAP]-1659929093895
GPR[EPVS]-1659929093895
========
new HashMap().put(FULL,new Integer(DateFormat.FULL));
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929093897
GPR[SPVAP]-1659929093897
GPR[EPVAP]-1659929094596
GPR[EPVS]-1659929094596
========
new HashMap().put(DEFAULT,new Integer(DateFormat.DEFAULT));
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929094598
GPR[SPVAP]-1659929094598
GPR[EPVAP]-1659929095303
GPR[EPVS]-1659929095303
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
subformats.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929095305
GPR[SPVAP]-1659929095305
GPR[EPVAP]-1659929096025
GPR[EPVS]-1659929096025
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(DEFAULT,format);

========
MM Copying to MM
GPR[SPVS]-1659929096026
GPR[SPVAP]-1659929096026
GPR[EPVAP]-1659929096721
GPR[EPVS]-1659929096721
========
cDateTimeInstanceCache.put(INTEGER,NumberFormat.getIntegerInstance(getLocale()));
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929096723
GPR[SPVAP]-1659929096723
GPR[EPVAP]-1659929097421
GPR[EPVS]-1659929097421
========
cDateTimeInstanceCache.put(CURRENCY,NumberFormat.getCurrencyInstance(getLocale()));
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929097423
GPR[SPVAP]-1659929097423
GPR[EPVAP]-1659929098120
GPR[EPVS]-1659929098120
========
cDateTimeInstanceCache.put(PERCENT,NumberFormat.getPercentInstance(getLocale()));
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929098121
GPR[SPVAP]-1659929098121
GPR[EPVAP]-1659929098817
GPR[EPVS]-1659929098817
========
cDateTimeInstanceCache=invert(cDateTimeInstanceCache);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929098819
GPR[SPVAP]-1659929098819
GPR[EPVAP]-1659929099508
GPR[EPVS]-1659929099508
========
cDateTimeInstanceCache.put(new Integer(mMaxLengthEstimate),pattern);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929099510
GPR[SPVAP]-1659929099510
GPR[EPVAP]-1659929100215
GPR[EPVS]-1659929100215
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
mapNameToValue.put(pattern,format);

========
MM Copying to MM
GPR[SPVS]-1659929100217
GPR[SPVAP]-1659929100217
GPR[EPVAP]-1659929100927
GPR[EPVS]-1659929100927
========
if(timeZone!=null){
key=new Pair(key,timeZone);
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929100929
GPR[SPVAP]-1659929100929
GPR[EPVAP]-1659929102108
GPR[SPVATF]-1659929102108
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929103046
GPR[EPVS]-1659929103046
========
if(locale!=null){
key=new Pair(key,locale);
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929103047
GPR[SPVAP]-1659929103047
GPR[EPVAP]-1659929104215
GPR[SPVATF]-1659929104215
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929105141
GPR[EPVS]-1659929105141
========
if(timeZone!=null){
key=new Pair(key,timeZone);
}
if(locale!=null){
key=new Pair(key,locale);
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929105143
GPR[SPVAP]-1659929105143
GPR[EPVAP]-1659929106315
GPR[SPVATF]-1659929106315
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929107263
GPR[EPVS]-1659929107263
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cTimeZoneDisplayCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929107265
GPR[SPVAP]-1659929107265
GPR[EPVAP]-1659929108419
GPR[SPVATF]-1659929108419
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929109369
GPR[EPVS]-1659929109369
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,pattern);

========
MM Copying to MM
GPR[SPVS]-1659929109370
GPR[SPVAP]-1659929109370
GPR[EPVAP]-1659929110553
GPR[SPVATF]-1659929110553
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929111510
GPR[EPVS]-1659929111510
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cTimeZoneDisplayCache.put(key,pattern);

========
MM Copying to MM
GPR[SPVS]-1659929111512
GPR[SPVAP]-1659929111512
GPR[EPVAP]-1659929112682
GPR[SPVATF]-1659929112682
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929113606
GPR[EPVS]-1659929113606
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
myMap.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929113608
GPR[SPVAP]-1659929113608
GPR[EPVAP]-1659929114318
GPR[EPVS]-1659929114319
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
map.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929114320
GPR[SPVAP]-1659929114320
GPR[EPVAP]-1659929115021
GPR[EPVS]-1659929115021
========
if(StringUtils.isEmpty(mStandard)||ArrayUtils.isEmpty(mValues)){
return 0;
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929115023
GPR[SPVAP]-1659929115023
GPR[EPVAP]-1659929115720
GPR[EPVS]-1659929115720
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
pattern=pattern;
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929115722
GPR[SPVAP]-1659929115722
GPR[EPVAP]-1659929116915
GPR[SPVATF]-1659929116915
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929117853
GPR[EPVS]-1659929117853
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
mTimeZoneForced=(timeZone!=null);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929117854
GPR[SPVAP]-1659929117854
GPR[EPVAP]-1659929118578
GPR[EPVS]-1659929118578
========
if(StringUtils.isEmpty(mStandard)||ArrayUtils.isEmpty(mValues)){
return str;
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929118580
GPR[SPVAP]-1659929118580
GPR[EPVAP]-1659929119273
GPR[EPVS]-1659929119273
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929119274
GPR[SPVAP]-1659929119274
GPR[EPVAP]-1659929119973
GPR[EPVS]-1659929119973
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929119974
GPR[SPVAP]-1659929119974
GPR[EPVAP]-1659929120685
GPR[EPVS]-1659929120685
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929120687
GPR[SPVAP]-1659929120687
GPR[EPVAP]-1659929121385
GPR[EPVS]-1659929121385
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
applyPatternPre(pattern);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929121387
GPR[SPVAP]-1659929121387
GPR[EPVAP]-1659929122095
GPR[EPVS]-1659929122095
========
super.applyPattern(pattern);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929122097
GPR[SPVAP]-1659929122097
GPR[EPVAP]-1659929122796
GPR[EPVS]-1659929122796
========
applyPatternPost(pattern);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929122798
GPR[SPVAP]-1659929122798
GPR[EPVAP]-1659929123492
GPR[EPVS]-1659929123492
========
Calendar.getInstance().add(mField,mMaxLengthEstimate);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929123494
GPR[SPVAP]-1659929123494
GPR[EPVAP]-1659929124198
GPR[EPVS]-1659929124198
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cLanguagesByCountry.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929124200
GPR[SPVAP]-1659929124200
GPR[EPVAP]-1659929124903
GPR[EPVS]-1659929124903
========
modify(Calendar.getInstance(),mMaxLengthEstimate,true);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929124905
GPR[SPVAP]-1659929124905
GPR[EPVAP]-1659929125652
GPR[EPVS]-1659929125652
========
modify(Calendar.getInstance(),mMaxLengthEstimate,false);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929125654
GPR[SPVAP]-1659929125654
GPR[EPVAP]-1659929126377
GPR[EPVS]-1659929126377
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
mTimeZone=timeZone;
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929126379
GPR[SPVAP]-1659929126379
GPR[EPVAP]-1659929127112
GPR[EPVS]-1659929127112
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
mLocaleForced=(locale!=null);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929127114
GPR[SPVAP]-1659929127114
GPR[EPVAP]-1659929127841
GPR[EPVS]-1659929127841
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cCountriesByLanguage.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929127842
GPR[SPVAP]-1659929127842
GPR[EPVAP]-1659929128538
GPR[EPVS]-1659929128538
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
keyedFormats.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929128541
GPR[SPVAP]-1659929128541
GPR[EPVAP]-1659929129250
GPR[EPVS]-1659929129250
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
map.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929129253
GPR[SPVAP]-1659929129253
GPR[EPVAP]-1659929129958
GPR[EPVS]-1659929129958
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
map.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929129960
GPR[SPVAP]-1659929129960
GPR[EPVAP]-1659929130668
GPR[EPVS]-1659929130668
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
map.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929130669
GPR[SPVAP]-1659929130669
GPR[EPVAP]-1659929131362
GPR[EPVS]-1659929131362
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
cDateTimeInstanceCache.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929131364
GPR[SPVAP]-1659929131364
GPR[EPVAP]-1659929132074
GPR[EPVS]-1659929132074
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929132076
GPR[SPVAP]-1659929132076
GPR[EPVAP]-1659929132778
GPR[EPVS]-1659929132778
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929132779
GPR[SPVAP]-1659929132779
GPR[EPVAP]-1659929133481
GPR[EPVS]-1659929133481
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
map.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929133483
GPR[SPVAP]-1659929133483
GPR[EPVAP]-1659929134184
GPR[EPVS]-1659929134184
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
map.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929134186
GPR[SPVAP]-1659929134186
GPR[EPVAP]-1659929134893
GPR[EPVS]-1659929134893
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
map.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929134895
GPR[SPVAP]-1659929134895
GPR[EPVAP]-1659929135594
GPR[EPVS]-1659929135594
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
cDateTimeInstanceCache.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929135596
GPR[SPVAP]-1659929135596
GPR[EPVAP]-1659929136296
GPR[EPVS]-1659929136296
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
map.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929136298
GPR[SPVAP]-1659929136298
GPR[EPVAP]-1659929137013
GPR[EPVS]-1659929137014
========
if(cDateTimeInstanceCache==null){
return null;
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929137015
GPR[SPVAP]-1659929137016
GPR[EPVAP]-1659929138182
GPR[SPVATF]-1659929138182
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929139120
GPR[EPVS]-1659929139120
========
if(cDateTimeInstanceCache.get(key)==null){
return null;
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929139121
GPR[SPVAP]-1659929139121
GPR[EPVAP]-1659929140272
GPR[SPVATF]-1659929140272
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929141219
GPR[EPVS]-1659929141219
========
if(cDateTimeInstanceCache==null){
return null;
}
if(cDateTimeInstanceCache.get(key)==null){
return null;
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929141221
GPR[SPVAP]-1659929141221
GPR[EPVAP]-1659929142388
GPR[SPVATF]-1659929142388
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929143293
GPR[EPVS]-1659929143293
GPR[ESUN]-1659929143293
GPR[SSUN]-1659929143293
org.apache.commons.lang.time.FastDateFormat,479
GPR[ESUN]-1659929143419
GPR[SSUN]-1659929143419
org.apache.commons.lang.time.FastDateFormat,483
Find no block!
GPR[SSUN]-1659929143473
org.apache.commons.lang.time.FastDateFormat,485
========
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
}

}
return df;

========
MM Copying to MM
GPR[SPVS]-1659929143960
GPR[SPVAP]-1659929143960
GPR[EPVAP]-1659929145161
GPR[EPVS]-1659929145161
========
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
}

}
return value;

========
MM Copying to MM
GPR[SPVS]-1659929145167
GPR[SPVAP]-1659929145167
GPR[EPVAP]-1659929145929
GPR[EPVS]-1659929145929
GPR[ESUN]-1659929145930
GPR[SSUN]-1659929145930
org.apache.commons.lang.time.FastDateFormat,672
========
if(tokenLen>=1){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}

========
MM Copying to MM
GPR[SPVS]-1659929146308
GPR[SPVAP]-1659929146308
GPR[EPVAP]-1659929149397
GPR[SPVATF]-1659929149397
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929150328
GPR[EPVS]-1659929150328
========
if(tokenLen>=0){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}

========
MM Copying to MM
GPR[SPVS]-1659929150330
GPR[SPVAP]-1659929150330
GPR[EPVAP]-1659929151486
GPR[SPVATF]-1659929151486
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929152423
GPR[EPVS]-1659929152423
========
i=indexRef[0];
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}

========
MM Copying to MM
GPR[SPVS]-1659929152424
GPR[SPVAP]-1659929152424
GPR[EPVAP]-1659929153594
GPR[SPVATF]-1659929153594
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929154522
GPR[EPVS]-1659929154522
========
i=indexRef[0];
if(tokenLen>=0){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}

========
MM Copying to MM
GPR[SPVS]-1659929154524
GPR[SPVAP]-1659929154524
GPR[EPVAP]-1659929155679
GPR[SPVATF]-1659929155679
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929156623
GPR[EPVS]-1659929156623
========
if(mStyle>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}

========
MM Copying to MM
GPR[SPVS]-1659929156625
GPR[SPVAP]-1659929156625
GPR[EPVAP]-1659929157323
GPR[EPVS]-1659929157323
GPR[ESUN]-1659929157323
GPR[SSUN]-1659929157323
org.apache.commons.lang.time.FastDateFormat,675
GPR[ESUN]-1659929157422
GPR[SSUN]-1659929157422
org.apache.commons.lang.time.FastDateFormat,677
========
case 'z' :
rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659929157807
GPR[SPVAP]-1659929157807
GPR[EPVAP]-1659929160981
GPR[SPVATF]-1659929160981
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929161922
GPR[EPVS]-1659929161922
========
case 'h' :

case 'z' :
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659929161923
GPR[SPVAP]-1659929161923
GPR[EPVAP]-1659929162629
GPR[EPVS]-1659929162629
========
case 'z' :
rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659929162631
GPR[SPVAP]-1659929162631
GPR[EPVAP]-1659929163829
GPR[SPVATF]-1659929163829
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929164764
GPR[EPVS]-1659929164764
========
case 'm' :

case 'z' :
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659929164766
GPR[SPVAP]-1659929164766
GPR[EPVAP]-1659929165481
GPR[EPVS]-1659929165481
========
case 'z' :
rule=selectNumberRule(Calendar.SECOND,tokenLen);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659929165483
GPR[SPVAP]-1659929165483
GPR[EPVAP]-1659929166647
GPR[SPVATF]-1659929166647
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929167582
GPR[EPVS]-1659929167582
========
case 'S' :

case 'z' :
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659929167583
GPR[SPVAP]-1659929167583
GPR[EPVAP]-1659929168284
GPR[EPVS]-1659929168284
========
case 'z' :
rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659929168285
GPR[SPVAP]-1659929168285
GPR[EPVAP]-1659929169451
GPR[SPVATF]-1659929169451
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929170409
GPR[EPVS]-1659929170409
========
case 'w' :

case 'z' :
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659929170411
GPR[SPVAP]-1659929170411
GPR[EPVAP]-1659929171107
GPR[EPVS]-1659929171107
========
case 'z' :
rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659929171109
GPR[SPVAP]-1659929171109
GPR[EPVAP]-1659929172281
GPR[SPVATF]-1659929172281
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929173212
GPR[EPVS]-1659929173212
========
case 'a' :

case 'z' :
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659929173213
GPR[SPVAP]-1659929173213
GPR[EPVAP]-1659929173940
GPR[EPVS]-1659929173940
========
case 'z' :
rule=selectNumberRule(Calendar.HOUR,tokenLen);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659929173942
GPR[SPVAP]-1659929173942
GPR[EPVAP]-1659929175090
GPR[SPVATF]-1659929175090
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929176042
GPR[EPVS]-1659929176042
========
case 'z' :

case 'z' :
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659929176044
GPR[SPVAP]-1659929176044
GPR[EPVAP]-1659929176745
GPR[EPVS]-1659929176745
========
case 'z' :
rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659929176747
GPR[SPVAP]-1659929176747
GPR[EPVAP]-1659929177923
GPR[SPVATF]-1659929177923
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929178847
GPR[EPVS]-1659929178847
========
case 'D' :

case 'z' :
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659929178849
GPR[SPVAP]-1659929178849
GPR[EPVAP]-1659929179559
GPR[EPVS]-1659929179559
========
case 'z' :
rule=new TextField(Calendar.ERA,ERAs);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659929179562
GPR[SPVAP]-1659929179562
GPR[EPVAP]-1659929180780
GPR[SPVATF]-1659929180780
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929181721
GPR[EPVS]-1659929181721
========
case 'y' :

case 'z' :
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659929181723
GPR[SPVAP]-1659929181723
GPR[EPVAP]-1659929182424
GPR[EPVS]-1659929182424
========
case 'z' :
rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


case 'Z' :


========
MM Copying to MM
GPR[SPVS]-1659929183027
GPR[SPVAP]-1659929183027
GPR[EPVAP]-1659929184204
GPR[SPVATF]-1659929184204
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929185133
GPR[EPVS]-1659929185133
========
case 'z' :
rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


case 'Z' :


========
MM Copying to MM
GPR[SPVS]-1659929185135
GPR[SPVAP]-1659929185135
GPR[EPVAP]-1659929186299
GPR[SPVATF]-1659929186299
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929187233
GPR[EPVS]-1659929187233
========
case 'z' :
rule=selectNumberRule(Calendar.SECOND,tokenLen);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


case 'Z' :


========
MM Copying to MM
GPR[SPVS]-1659929187234
GPR[SPVAP]-1659929187234
GPR[EPVAP]-1659929188417
GPR[SPVATF]-1659929188417
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929189335
GPR[EPVS]-1659929189335
========
case 'z' :
rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


case 'Z' :


========
MM Copying to MM
GPR[SPVS]-1659929189337
GPR[SPVAP]-1659929189337
GPR[EPVAP]-1659929190709
GPR[SPVATF]-1659929190709
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929191660
GPR[EPVS]-1659929191660
========
case 'z' :
rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


case 'Z' :


========
MM Copying to MM
GPR[SPVS]-1659929191662
GPR[SPVAP]-1659929191662
GPR[EPVAP]-1659929192826
GPR[SPVATF]-1659929192826
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929193762
GPR[EPVS]-1659929193762
========
case 'z' :
rule=selectNumberRule(Calendar.HOUR,tokenLen);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


case 'Z' :


========
MM Copying to MM
GPR[SPVS]-1659929193763
GPR[SPVAP]-1659929193764
GPR[EPVAP]-1659929194931
GPR[SPVATF]-1659929194931
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929195848
GPR[EPVS]-1659929195848
========
case 'z' :
rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


case 'Z' :


========
MM Copying to MM
GPR[SPVS]-1659929195850
GPR[SPVAP]-1659929195850
GPR[EPVAP]-1659929197031
GPR[SPVATF]-1659929197031
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929197949
GPR[EPVS]-1659929197949
========
case 'z' :
rule=new TextField(Calendar.ERA,ERAs);
if(tokenLen>=4){
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
}else {
rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
}
break;


case 'Z' :


========
MM Copying to MM
GPR[SPVS]-1659929197951
GPR[SPVAP]-1659929197951
GPR[EPVAP]-1659929199128
GPR[SPVATF]-1659929199128
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929200066
GPR[EPVS]-1659929200066
GPR[ESUN]-1659929200066
GPR[SSUN]-1659929200066
org.apache.commons.lang.time.FastDateFormat,1717
========
if(obj==this){
return true;
}

========
MM Copying to MM
GPR[SPVS]-1659929200482
GPR[SPVAP]-1659929200482
GPR[EPVAP]-1659929203580
GPR[SPVATF]-1659929203580
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929204500
GPR[EPVS]-1659929204500
========
if(obj==null){
return true;
}

========
MM Copying to MM
GPR[SPVS]-1659929204501
GPR[SPVAP]-1659929204501
GPR[EPVAP]-1659929205705
GPR[SPVATF]-1659929205705
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929206645
GPR[EPVS]-1659929206645
========
if(this==null){
return true;
}

========
MM Copying to MM
GPR[SPVS]-1659929206647
GPR[SPVAP]-1659929206647
GPR[EPVAP]-1659929207845
GPR[SPVATF]-1659929207845
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929208773
GPR[EPVS]-1659929208773
========
if(this==obj){
return false;
}

========
MM Copying to MM
GPR[SPVS]-1659929208776
GPR[SPVAP]-1659929208776
GPR[EPVAP]-1659929209962
GPR[SPVATF]-1659929209962
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929210893
GPR[EPVS]-1659929210893
========
if(this!=obj){
return true;
}

========
MM Copying to MM
GPR[SPVS]-1659929210898
GPR[SPVAP]-1659929210898
GPR[EPVAP]-1659929212075
GPR[SPVATF]-1659929212075
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929213006
GPR[EPVS]-1659929213006
========
if(obj!=null){
return true;
}

========
MM Copying to MM
GPR[SPVS]-1659929213007
GPR[SPVAP]-1659929213007
GPR[EPVAP]-1659929214178
GPR[SPVATF]-1659929214178
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929215112
GPR[EPVS]-1659929215112
========
if(this!=null){
return true;
}

========
MM Copying to MM
GPR[SPVS]-1659929215114
GPR[SPVAP]-1659929215114
GPR[EPVAP]-1659929216298
GPR[SPVATF]-1659929216298
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929217237
GPR[EPVS]-1659929217237
GPR[ESUN]-1659929217238
GPR[SSUN]-1659929217238
org.apache.commons.lang.time.FastDateFormat,1721
GPR[ESUN]-1659929217681
GPR[SSUN]-1659929217681
org.apache.commons.lang.time.FastDateFormat,1725
========
if(obj==this){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929218109
GPR[SPVAP]-1659929218109
GPR[EPVAP]-1659929221221
GPR[SPVATF]-1659929221221
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929222177
GPR[EPVS]-1659929222177
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
if(obj instanceof NumberRange==false){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929222179
GPR[SPVAP]-1659929222179
GPR[EPVAP]-1659929222880
GPR[EPVS]-1659929222880
========
if(this==obj){
return false;
}
if(!(obj instanceof Pair)){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929222882
GPR[SPVAP]-1659929222882
GPR[EPVAP]-1659929224060
GPR[SPVATF]-1659929224060
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929224988
GPR[EPVS]-1659929224988
========
if((mPattern==other.mPattern||mPattern.equals(other.mPattern))&&(mTimeZone==other.mTimeZone||mTimeZone.equals(other.mTimeZone))){
return true;
}
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929224990
GPR[SPVAP]-1659929224990
GPR[EPVAP]-1659929225691
GPR[EPVS]-1659929225691
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
if(obj instanceof CharSet==false){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929225693
GPR[SPVAP]-1659929225693
GPR[EPVAP]-1659929226408
GPR[EPVS]-1659929226408
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
Pair key=(Pair)obj;
return mObj1==mObj2||(value!=null&&value.equals(other));

========
MM Copying to MM
GPR[SPVS]-1659929226410
GPR[SPVAP]-1659929226410
GPR[EPVAP]-1659929227111
GPR[EPVS]-1659929227111
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
Pair key=(Pair)obj;
return mObj1==mObj2||(mObj1!=null&&mObj1.equals(mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929227113
GPR[SPVAP]-1659929227113
GPR[EPVAP]-1659929228315
GPR[SPVATF]-1659929228315
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929229241
GPR[EPVS]-1659929229241
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
Pair key=(Pair)obj;
return mObj1==mObj2&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929229243
GPR[SPVAP]-1659929229243
GPR[EPVAP]-1659929230420
GPR[SPVATF]-1659929230420
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929231353
GPR[EPVS]-1659929231353
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj1!=null&&value.equals(mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929231355
GPR[SPVAP]-1659929231355
GPR[EPVAP]-1659929232051
GPR[EPVS]-1659929232051
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
Pair key=(Pair)obj;
return this.mObj1==tok2.value;

========
MM Copying to MM
GPR[SPVS]-1659929232053
GPR[SPVAP]-1659929232053
GPR[EPVAP]-1659929232752
GPR[EPVS]-1659929232752
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
initialize();
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929232754
GPR[SPVAP]-1659929232754
GPR[EPVAP]-1659929233457
GPR[EPVS]-1659929233457
========
if(obj==null){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929233459
GPR[SPVAP]-1659929233459
GPR[EPVAP]-1659929234633
GPR[SPVATF]-1659929234634
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929235554
GPR[EPVS]-1659929235554
========
if(this==null){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929235556
GPR[SPVAP]-1659929235556
GPR[EPVAP]-1659929236718
GPR[SPVATF]-1659929236718
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929237645
GPR[EPVS]-1659929237645
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
Pair key=(Pair)obj;
return serialVersionUID==((MutableLong)mObj1).longValue();

========
MM Copying to MM
GPR[SPVS]-1659929237647
GPR[SPVAP]-1659929237647
GPR[EPVAP]-1659929238349
GPR[EPVS]-1659929238349
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
Pair key=(Pair)obj;
return mMaxLengthEstimate==((MutableInt)mObj1).intValue();

========
MM Copying to MM
GPR[SPVS]-1659929238352
GPR[SPVAP]-1659929238352
GPR[EPVAP]-1659929239048
GPR[EPVS]-1659929239048
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
Pair key=(Pair)obj;
return mColon==((MutableBoolean)mObj1).booleanValue();

========
MM Copying to MM
GPR[SPVS]-1659929239049
GPR[SPVAP]-1659929239049
GPR[EPVAP]-1659929239760
GPR[EPVS]-1659929239760
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
if(obj instanceof IntRange==false){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929239762
GPR[SPVAP]-1659929239762
GPR[EPVAP]-1659929240463
GPR[EPVS]-1659929240463
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
if(obj instanceof LongRange==false){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929240465
GPR[SPVAP]-1659929240465
GPR[EPVAP]-1659929241171
GPR[EPVS]-1659929241171
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
if(obj instanceof DoubleRange==false){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929241173
GPR[SPVAP]-1659929241173
GPR[EPVAP]-1659929241884
GPR[EPVS]-1659929241884
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
if(obj instanceof FloatRange==false){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929241886
GPR[SPVAP]-1659929241886
GPR[EPVAP]-1659929242591
GPR[EPVS]-1659929242591
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
if(obj instanceof CharRange==false){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929242593
GPR[SPVAP]-1659929242593
GPR[EPVAP]-1659929243309
GPR[EPVS]-1659929243309
========
if(this==obj){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
if(obj instanceof Fraction==false){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929243310
GPR[SPVAP]-1659929243310
GPR[EPVAP]-1659929244015
GPR[EPVS]-1659929244015
========
if(obj==this){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
if(obj instanceof NumberRange==false){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929244020
GPR[SPVAP]-1659929244020
GPR[EPVAP]-1659929244730
GPR[EPVS]-1659929244730
========
if(obj==this){
return true;
}
if(!(obj instanceof Pair)){
return false;
}
if(obj instanceof CharSet==false){
return false;
}
Pair key=(Pair)obj;
return (mObj1==null?key.mObj1==null:mObj1.equals(key.mObj1))&&(mObj2==null?key.mObj2==null:mObj2.equals(key.mObj2));

========
MM Copying to MM
GPR[SPVS]-1659929244732
GPR[SPVAP]-1659929244732
GPR[EPVAP]-1659929245431
GPR[EPVS]-1659929245431
GPR[ESUN]-1659929245432
GPR[SSUN]-1659929245432
org.apache.commons.lang.time.FastDateFormat,1727
GPR[ESUN]-1659929245536
GPR[SSUN]-1659929245536
org.apache.commons.lang.time.FastDateFormat,1538
Find no block!
GPR[SSUN]-1659929245595
org.apache.commons.lang.time.FastDateFormat,1539
========
mStyle=style;
mTimeZone=timeZone;
mTimeZoneForced=timeZoneForced;
mLocale=locale;

========
MM Copying to MM
GPR[SPVS]-1659929245987
GPR[SPVAP]-1659929245987
GPR[EPVAP]-1659929247196
GPR[EPVS]-1659929247196
========
mTimeZone=timeZone;
mTimeZoneForced=style;
mLocale=locale;

========
MM Copying to MM
GPR[SPVS]-1659929247198
GPR[SPVAP]-1659929247198
GPR[EPVAP]-1659929247966
GPR[EPVS]-1659929247966
========
mTimeZone=timeZone;
if(mColon){
style|=0x80000000;
}
mTimeZoneForced=timeZoneForced;
mLocale=locale;

========
MM Copying to MM
GPR[SPVS]-1659929247967
GPR[SPVAP]-1659929247967
GPR[EPVAP]-1659929248679
GPR[EPVS]-1659929248679
GPR[ESUN]-1659929248681
GPR[SSUN]-1659929248681
org.apache.commons.lang.time.FastDateFormat,1540
GPR[ESUN]-1659929248748
GPR[SSUN]-1659929248748
org.apache.commons.lang.time.FastDateFormat,1541
========
mTimeZone=timeZone;
mTimeZoneForced=timeZoneForced;
mLocale=locale;
mStyle=style;

========
MM Copying to MM
GPR[SPVS]-1659929249108
GPR[SPVAP]-1659929249108
GPR[EPVAP]-1659929250313
GPR[EPVS]-1659929250313
========
mTimeZoneForced=timeZoneForced;
mLocale=locale;
if(mColon){
style|=0x80000000;
}
mStyle=style;

========
MM Copying to MM
GPR[SPVS]-1659929250316
GPR[SPVAP]-1659929250316
GPR[EPVAP]-1659929251090
GPR[EPVS]-1659929251090
========
if(timeZone==null){
timeZone=TimeZone.getDefault();
}
mTimeZoneForced=timeZoneForced;
mLocale=locale;
mStyle=style;

========
MM Copying to MM
GPR[SPVS]-1659929251093
GPR[SPVAP]-1659929251093
GPR[EPVAP]-1659929253763
GPR[SPVATF]-1659929253763
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929254717
GPR[EPVS]-1659929254717
========
if(locale==null){
locale=Locale.getDefault();
}
mTimeZoneForced=timeZoneForced;
mLocale=locale;
mStyle=style;

========
MM Copying to MM
GPR[SPVS]-1659929254718
GPR[SPVAP]-1659929254718
GPR[EPVAP]-1659929255917
GPR[SPVATF]-1659929255917
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929256852
GPR[EPVS]-1659929256852
GPR[ESUN]-1659929256853
GPR[SSUN]-1659929256853
org.apache.commons.lang.time.FastDateFormat,1542
========
mTimeZone=timeZone;
mLocale=locale;
mStyle=style;
if(timeZoneForced){
mStandard=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}

========
MM Copying to MM
GPR[SPVS]-1659929257327
GPR[SPVAP]-1659929257327
GPR[EPVAP]-1659929258548
GPR[EPVS]-1659929258548
========
mTimeZoneForced=timeZoneForced;
mLocale=locale;
mStyle=style;
if(timeZoneForced){
mStandard=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}

========
MM Copying to MM
GPR[SPVS]-1659929258550
GPR[SPVAP]-1659929258550
GPR[EPVAP]-1659929259316
GPR[EPVS]-1659929259316
========
mLocale=locale;
mStyle=style;
mTimeZone=timeZone;
if(timeZoneForced){
mStandard=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}

========
MM Copying to MM
GPR[SPVS]-1659929259318
GPR[SPVAP]-1659929259318
GPR[EPVAP]-1659929260031
GPR[EPVS]-1659929260031
========
mLocale=locale;
super();
mStyle=style;
if(timeZoneForced){
mStandard=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}

========
MM Copying to MM
GPR[SPVS]-1659929260033
GPR[SPVAP]-1659929260033
GPR[EPVAP]-1659929260761
GPR[EPVS]-1659929260761
========
mLocale=locale;
if(mPattern==null){
throw new IllegalArgumentException("The pattern must not be null");
}
mStyle=style;
if(timeZoneForced){
mStandard=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}

========
MM Copying to MM
GPR[SPVS]-1659929260763
GPR[SPVAP]-1659929260763
GPR[EPVAP]-1659929261477
GPR[EPVS]-1659929261477
========
mLocale=locale;
mStandard=mPattern;
mStyle=style;
if(timeZoneForced){
mStandard=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}

========
MM Copying to MM
GPR[SPVS]-1659929261479
GPR[SPVAP]-1659929261479
GPR[EPVAP]-1659929262183
GPR[EPVS]-1659929262183
========
mLocale=locale;
mTimeZoneForced=(timeZone!=null);
mStyle=style;
if(timeZoneForced){
mStandard=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}

========
MM Copying to MM
GPR[SPVS]-1659929262185
GPR[SPVAP]-1659929262185
GPR[EPVAP]-1659929262918
GPR[EPVS]-1659929262918
========
mLocale=locale;
if(timeZone==null){
timeZone=TimeZone.getDefault();
}
mStyle=style;
if(timeZoneForced){
mStandard=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}

========
MM Copying to MM
GPR[SPVS]-1659929262921
GPR[SPVAP]-1659929262921
GPR[EPVAP]-1659929265568
GPR[SPVATF]-1659929265568
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929266496
GPR[EPVS]-1659929266496
========
mLocale=locale;
mTimeZone=timeZone;
mStyle=style;
if(timeZoneForced){
mStandard=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}

========
MM Copying to MM
GPR[SPVS]-1659929266498
GPR[SPVAP]-1659929266498
GPR[EPVAP]-1659929267203
GPR[EPVS]-1659929267203
========
if(locale==null){
locale=Locale.getDefault();
}
mLocale=locale;
mStyle=style;
if(timeZoneForced){
mStandard=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}

========
MM Copying to MM
GPR[SPVS]-1659929267204
GPR[SPVAP]-1659929267204
GPR[EPVAP]-1659929268383
GPR[SPVATF]-1659929268383
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929269317
GPR[EPVS]-1659929269317
========
if(locale==null){
locale=Locale.getDefault();
}
mLocale=locale;
if(timeZone==null){
timeZone=TimeZone.getDefault();
}
mStyle=style;
if(timeZoneForced){
mStandard=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}

========
MM Copying to MM
GPR[SPVS]-1659929269318
GPR[SPVAP]-1659929269318
GPR[EPVAP]-1659929270475
GPR[SPVATF]-1659929270475
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929271421
GPR[EPVS]-1659929271421
GPR[ESUN]-1659929271423
GPR[SSUN]-1659929271423
org.apache.commons.lang.time.FastDateFormat,1544
========
mTimeZone=timeZone;
if(timeZoneForced){
mStandard=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}

========
MM Copying to MM
GPR[SPVS]-1659929271851
GPR[SPVAP]-1659929271851
GPR[EPVAP]-1659929273051
GPR[EPVS]-1659929273051
========
mStyle=style;
if(timeZoneForced){
mStandard=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}

========
MM Copying to MM
GPR[SPVS]-1659929273053
GPR[SPVAP]-1659929273053
GPR[EPVAP]-1659929273829
GPR[EPVS]-1659929273829
========
mLocale=locale;
if(timeZoneForced){
mStandard=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}

========
MM Copying to MM
GPR[SPVS]-1659929273831
GPR[SPVAP]-1659929273831
GPR[EPVAP]-1659929274534
GPR[EPVS]-1659929274534
GPR[ESUN]-1659929274539
GPR[SSUN]-1659929274539
org.apache.commons.lang.time.FastDateFormat,1548
GPR[ESUN]-1659929274605
GPR[SSUN]-1659929274605
org.apache.commons.lang.time.FastDateFormat,1549
GPR[ESUN]-1659929274654
GPR[SSUN]-1659929274654
org.apache.commons.lang.time.FastDateFormat,1551
Find no block!
GPR[SSUN]-1659929274706
org.apache.commons.lang.time.FastDateFormat,1557
========
if(mTimeZoneForced){
return mDaylight.length();
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929275752
GPR[SPVAP]-1659929275752
GPR[EPVAP]-1659929278888
GPR[SPVATF]-1659929278888
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929279815
GPR[EPVS]-1659929279815
========
if(mStandard==null||str.length()==0){
return str;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929279818
GPR[SPVAP]-1659929279818
GPR[EPVAP]-1659929280517
GPR[EPVS]-1659929280517
========
if(mStandard==null||isEmpty(mPattern)||isEmpty(mDaylight)){
return null;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929280519
GPR[SPVAP]-1659929280519
GPR[EPVAP]-1659929281221
GPR[EPVS]-1659929281221
========
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(m==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929281223
GPR[SPVAP]-1659929281223
GPR[EPVAP]-1659929281928
GPR[EPVS]-1659929281928
========
if(mStandard==null||mDaylight==null){
throw new IllegalArgumentException("Strings must not be null");
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929281929
GPR[SPVAP]-1659929281929
GPR[EPVAP]-1659929283101
GPR[SPVATF]-1659929283101
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929284050
GPR[EPVS]-1659929284050
========
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle!=TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929284052
GPR[SPVAP]-1659929284052
GPR[EPVAP]-1659929285233
GPR[SPVATF]-1659929285233
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929286156
GPR[EPVS]-1659929286156
========
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle!=-1){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929286158
GPR[SPVAP]-1659929286158
GPR[EPVAP]-1659929287330
GPR[SPVATF]-1659929287330
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929288269
GPR[EPVS]-1659929288269
========
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==-1){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929288270
GPR[SPVAP]-1659929288270
GPR[EPVAP]-1659929289431
GPR[SPVATF]-1659929289431
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929290368
GPR[EPVS]-1659929290368
========
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(idx==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929290371
GPR[SPVAP]-1659929290371
GPR[EPVAP]-1659929291075
GPR[EPVS]-1659929291075
========
mMaxLengthEstimate=(increase<0?0:increase);
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929291077
GPR[SPVAP]-1659929291077
GPR[EPVAP]-1659929291776
GPR[EPVS]-1659929291776
========
mMaxLengthEstimate*=(mMaxLengthEstimate<0?16:(max>64?64:max));
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929291777
GPR[SPVAP]-1659929291777
GPR[EPVAP]-1659929292472
GPR[EPVS]-1659929292472
========
if(isEmpty(mStandard)){
return mStandard;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929292475
GPR[SPVAP]-1659929292475
GPR[EPVAP]-1659929293173
GPR[EPVS]-1659929293173
========
if(isEmpty(mStandard)){
return EMPTY;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929293174
GPR[SPVAP]-1659929293174
GPR[EPVAP]-1659929293880
GPR[EPVS]-1659929293880
========
if(mStandard==null){
return false;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929293882
GPR[SPVAP]-1659929293882
GPR[EPVAP]-1659929294571
GPR[EPVS]-1659929294571
========
if(mStandard.length()>mStyle){
return false;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929294572
GPR[SPVAP]-1659929294572
GPR[EPVAP]-1659929295274
GPR[EPVS]-1659929295274
========
if(mStandard==null){
return appendNull();
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929295276
GPR[SPVAP]-1659929295276
GPR[EPVAP]-1659929295972
GPR[EPVS]-1659929295972
========
if(mStandard==null){
return null;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929295974
GPR[SPVAP]-1659929295974
GPR[EPVAP]-1659929296683
GPR[EPVS]-1659929296683
========
if(mPattern==null){
overlay=EMPTY;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929296684
GPR[SPVAP]-1659929296684
GPR[EPVAP]-1659929297384
GPR[EPVS]-1659929297384
========
if(mMaxLengthEstimate>mStyle){
start=len;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929297385
GPR[SPVAP]-1659929297385
GPR[EPVAP]-1659929298075
GPR[EPVS]-1659929298075
========
if(mTimeZoneForced){
return mStandard.substring(0,mStyle+mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929298078
GPR[SPVAP]-1659929298078
GPR[EPVAP]-1659929298784
GPR[EPVS]-1659929298784
========
if(isEmpty(mStandard)){
padStr=" ";
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929298786
GPR[SPVAP]-1659929298786
GPR[EPVAP]-1659929299494
GPR[EPVS]-1659929299494
========
if(mMaxLengthEstimate-mStyle<=0){
return mStandard;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929299495
GPR[SPVAP]-1659929299495
GPR[EPVAP]-1659929300193
GPR[EPVS]-1659929300193
========
if(mTimeZoneForced){
return mDaylight.substring(mStyle+mStandard.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929300195
GPR[SPVAP]-1659929300195
GPR[EPVAP]-1659929300889
GPR[EPVS]-1659929300889
========
if(mPattern==null){
newLineStr=SystemUtils.LINE_SEPARATOR;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929300891
GPR[SPVAP]-1659929300891
GPR[EPVAP]-1659929301609
GPR[EPVS]-1659929301609
========
if(mTimeZoneForced){
return mStandard.substring(mStyle+mDaylight.length(),mMaxLengthEstimate);
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929301611
GPR[SPVAP]-1659929301611
GPR[EPVAP]-1659929302313
GPR[EPVS]-1659929302313
========
if(mMaxLengthEstimate<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929302315
GPR[SPVAP]-1659929302315
GPR[EPVAP]-1659929303011
GPR[EPVS]-1659929303011
========
if((mStyle+(mMaxLengthEstimate-3))<mStandard.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929303013
GPR[SPVAP]-1659929303013
GPR[EPVAP]-1659929303720
GPR[EPVS]-1659929303720
========
if((mPattern==null)||("".equals(separator))){
return split(mStandard,null,mMaxLengthEstimate);
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929303722
GPR[SPVAP]-1659929303723
GPR[EPVAP]-1659929304423
GPR[EPVS]-1659929304423
========
if(mMaxLengthEstimate==1||mStyle==0){
return mStandard;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929304426
GPR[SPVAP]-1659929304426
GPR[EPVAP]-1659929305135
GPR[EPVS]-1659929305135
========
if(mStyle==1&&mMaxLengthEstimate<=PAD_LIMIT){
return padding(repeat,mStandard.charAt(0));
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929305137
GPR[SPVAP]-1659929305137
GPR[EPVAP]-1659929305844
GPR[EPVS]-1659929305844
========
mMaxLengthEstimate=(startIndex<0?0:startIndex);
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929305846
GPR[SPVAP]-1659929305846
GPR[EPVAP]-1659929306537
GPR[EPVS]-1659929306537
========
if(mStandard.length()==1){
return indexOf(mStandard.charAt(0),mMaxLengthEstimate);
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929306538
GPR[SPVAP]-1659929306538
GPR[EPVAP]-1659929307243
GPR[EPVS]-1659929307243
========
if(mStandard.length()==0){
return mMaxLengthEstimate;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929307244
GPR[SPVAP]-1659929307244
GPR[EPVAP]-1659929307950
GPR[EPVS]-1659929307950
========
mStandard=str.toLowerCase();
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929307952
GPR[SPVAP]-1659929307952
GPR[EPVAP]-1659929308657
GPR[EPVS]-1659929308657
========
if(isEmpty(mPattern)){
return mPattern;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929308660
GPR[SPVAP]-1659929308660
GPR[EPVAP]-1659929309365
GPR[EPVS]-1659929309365
========
if(mStandard==null){
return EMPTY;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929309367
GPR[SPVAP]-1659929309367
GPR[EPVAP]-1659929310067
GPR[EPVS]-1659929310067
========
if(mTimeZoneForced){
return mStandard.substring(mMaxLengthEstimate);
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929310069
GPR[SPVAP]-1659929310069
GPR[EPVAP]-1659929310771
GPR[EPVS]-1659929310771
========
if(mStandard.charAt(mStandard.length()-1)==CharUtils.LF){
if(mStandard.charAt(mStandard.length()-1-1)==CharUtils.CR){
lastIdx--;
}
}else {
lastIdx++;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929310773
GPR[SPVAP]-1659929310773
GPR[EPVAP]-1659929311469
GPR[EPVS]-1659929311469
========
if(mStandard==null){
str=mStandard;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929311472
GPR[SPVAP]-1659929311472
GPR[EPVAP]-1659929312172
GPR[EPVS]-1659929312172
========
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(length==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929312176
GPR[SPVAP]-1659929312176
GPR[EPVAP]-1659929312876
GPR[EPVS]-1659929312876
========
if(mStandard==null){
return false;
}
if(mStandard.length()>mStyle){
return false;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929312879
GPR[SPVAP]-1659929312879
GPR[EPVAP]-1659929313581
GPR[EPVS]-1659929313581
========
if(mMaxLengthEstimate>mStyle||index<0){
throw new IndexOutOfBoundsException("Index: "+index);
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929313583
GPR[SPVAP]-1659929313583
GPR[EPVAP]-1659929314289
GPR[EPVS]-1659929314289
========
mTimeZone=mTimeZone;
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929314295
GPR[SPVAP]-1659929314295
GPR[EPVAP]-1659929314996
GPR[EPVS]-1659929314996
========
mStyle=mMaxLengthEstimate;
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929314998
GPR[SPVAP]-1659929314998
GPR[EPVAP]-1659929315701
GPR[EPVS]-1659929315701
========
mLocale=mLocale;
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929315703
GPR[SPVAP]-1659929315703
GPR[EPVAP]-1659929316402
GPR[EPVS]-1659929316402
========
super();
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929316404
GPR[SPVAP]-1659929316404
GPR[EPVAP]-1659929317104
GPR[EPVS]-1659929317104
========
validateIndex(mMaxLengthEstimate);
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929317108
GPR[SPVAP]-1659929317108
GPR[EPVAP]-1659929317808
GPR[EPVS]-1659929317808
========
if(mMaxLengthEstimate<0){
startIndex=0;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929317812
GPR[SPVAP]-1659929317812
GPR[EPVAP]-1659929318521
GPR[EPVS]-1659929318521
========
if(mMaxLengthEstimate>mMaxLengthEstimate){
int mMaxLengthEstimate=start;
start=end;
end=temp;
}
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(mStyle==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929318523
GPR[SPVAP]-1659929318523
GPR[EPVAP]-1659929319227
GPR[EPVS]-1659929319227
========
if(mTimeZoneForced){
return Math.max(mStandard.length(),mDaylight.length());
}else if(compare==TimeZone.SHORT){
return 4;
}else {
return 40;
}

========
MM Copying to MM
GPR[SPVS]-1659929319237
GPR[SPVAP]-1659929319237
GPR[EPVAP]-1659929319947
GPR[EPVS]-1659929319947
GPR[ESUN]-1659929319949
GPR[SSUN]-1659929319949
org.apache.commons.lang.time.FastDateFormat,1559
GPR[ESUN]-1659929320068
GPR[SSUN]-1659929320068
org.apache.commons.lang.time.FastDateFormat,1560
GPR[ESUN]-1659929320125
GPR[SSUN]-1659929320125
org.apache.commons.lang.time.FastDateFormat,772
========
default :

case 1 :
return new UnpaddedNumberField(field);


========
MM Copying to MM
GPR[SPVS]-1659929320470
GPR[SPVAP]-1659929320470
GPR[EPVAP]-1659929321677
GPR[EPVS]-1659929321677
========
default :

case 2 :
return new TwoDigitNumberField(field);


========
MM Copying to MM
GPR[SPVS]-1659929321965
GPR[SPVAP]-1659929321965
GPR[EPVAP]-1659929322719
GPR[EPVS]-1659929322719
GPR[ESUN]-1659929323014
GPR[SSUN]-1659929323014
org.apache.commons.lang.time.FastDateFormat,954
GPR[ESUN]-1659929323363
GPR[SSUN]-1659929323363
org.apache.commons.lang.time.FastDateFormat,1185
Find no block!
GPR[SSUN]-1659929323425
org.apache.commons.lang.time.FastDateFormat,1186
========
mValues=mValues;
mField=field;

========
MM Copying to MM
GPR[SPVS]-1659929323777
GPR[SPVAP]-1659929323777
GPR[EPVAP]-1659929324961
GPR[EPVS]-1659929324961
========
if(mMaxLengthEstimate<3){
throw new IllegalArgumentException();
}
mField=field;

========
MM Copying to MM
GPR[SPVS]-1659929324963
GPR[SPVAP]-1659929324963
GPR[EPVAP]-1659929325733
GPR[EPVS]-1659929325733
========
mSize=mMaxLengthEstimate;
mField=field;

========
MM Copying to MM
GPR[SPVS]-1659929325735
GPR[SPVAP]-1659929325735
GPR[EPVAP]-1659929326439
GPR[EPVS]-1659929326439
GPR[ESUN]-1659929326440
GPR[SSUN]-1659929326440
org.apache.commons.lang.time.FastDateFormat,1187
Find no block!
GPR[SSUN]-1659929326510
org.apache.commons.lang.time.FastDateFormat,1176
Find no block!
GPR[SSUN]-1659929326568
org.apache.commons.lang.time.FastDateFormat,1193
GPR[ESUN]-1659929326904
GPR[SSUN]-1659929326904
org.apache.commons.lang.time.FastDateFormat,1447
Find no block!
GPR[SSUN]-1659929326963
org.apache.commons.lang.time.FastDateFormat,1448
GPR[ESUN]-1659929327294
GPR[SSUN]-1659929327294
org.apache.commons.lang.time.FastDateFormat,1449
Find no block!
GPR[SSUN]-1659929327349
org.apache.commons.lang.time.FastDateFormat,1455
GPR[ESUN]-1659929327666
GPR[SSUN]-1659929327666
org.apache.commons.lang.time.FastDateFormat,249
========
return getDateInstance(style,null,null);

========
MM Copying to MM
GPR[SPVS]-1659929328000
GPR[SPVAP]-1659929328000
GPR[EPVAP]-1659929331084
GPR[SPVATF]-1659929331084
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929332013
GPR[EPVS]-1659929332013
========
return getDateInstance(style,mTimeZone,null);

========
MM Copying to MM
GPR[SPVS]-1659929332015
GPR[SPVAP]-1659929332015
GPR[EPVAP]-1659929332713
GPR[EPVS]-1659929332713
========
return getTimeInstance(style,null,locale);

========
MM Copying to MM
GPR[SPVS]-1659929332714
GPR[SPVAP]-1659929332714
GPR[EPVAP]-1659929333884
GPR[SPVATF]-1659929333884
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929334818
GPR[EPVS]-1659929334818
========
return getTimeInstance(style,null,null);

========
MM Copying to MM
GPR[SPVS]-1659929334820
GPR[SPVAP]-1659929334820
GPR[EPVAP]-1659929335975
GPR[SPVATF]-1659929335975
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929336909
GPR[EPVS]-1659929336909
========
return getInstance(mStandard,null,locale);

========
MM Copying to MM
GPR[SPVS]-1659929336911
GPR[SPVAP]-1659929336911
GPR[EPVAP]-1659929337611
GPR[EPVS]-1659929337611
========
return getTimeInstance(style,mTimeZone,null);

========
MM Copying to MM
GPR[SPVS]-1659929337612
GPR[SPVAP]-1659929337612
GPR[EPVAP]-1659929338310
GPR[EPVS]-1659929338310
========
return getDateTimeInstance(style,mStyle,null,locale);

========
MM Copying to MM
GPR[SPVS]-1659929338311
GPR[SPVAP]-1659929338311
GPR[EPVAP]-1659929339016
GPR[EPVS]-1659929339016
GPR[ESUN]-1659929339017
GPR[SSUN]-1659929339017
org.apache.commons.lang.time.FastDateFormat,280
========
if(locale!=null){
key=new Pair(key,locale);
}
Object key=new Integer(style);
if(timeZone!=null){
key=new Pair(key,timeZone);
}

========
MM Copying to MM
GPR[SPVS]-1659929339442
GPR[SPVAP]-1659929339442
GPR[EPVAP]-1659929340656
GPR[EPVS]-1659929340656
========
Object key=new Integer(style);
if(timeZone==null){
key=new Pair(key,timeZone);
}

========
MM Copying to MM
GPR[SPVS]-1659929340658
GPR[SPVAP]-1659929340658
GPR[EPVAP]-1659929343338
GPR[SPVATF]-1659929343338
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929344276
GPR[EPVS]-1659929344276
GPR[ESUN]-1659929344277
GPR[SSUN]-1659929344277
org.apache.commons.lang.time.FastDateFormat,281
GPR[ESUN]-1659929344396
GPR[SSUN]-1659929344396
org.apache.commons.lang.time.FastDateFormat,285
GPR[ESUN]-1659929344457
GPR[SSUN]-1659929344457
org.apache.commons.lang.time.FastDateFormat,286
GPR[ESUN]-1659929344517
GPR[SSUN]-1659929344517
org.apache.commons.lang.time.FastDateFormat,290
========
if(timeZone!=null){
key=new Pair(key,timeZone);
}
if(locale!=null){
key=new Pair(key,locale);
}
FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);

========
MM Copying to MM
GPR[SPVS]-1659929345011
GPR[SPVAP]-1659929345011
GPR[EPVAP]-1659929348091
GPR[SPVATF]-1659929348091
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929349052
GPR[EPVS]-1659929349052
========
if(locale==null){
key=new Pair(key,locale);
}
FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);

========
MM Copying to MM
GPR[SPVS]-1659929349055
GPR[SPVAP]-1659929349055
GPR[EPVAP]-1659929350220
GPR[SPVATF]-1659929350220
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929351174
GPR[EPVS]-1659929351174
========
if((Entry)cDateInstanceCache.get(getEnumClass())==null){
return null;
}
if(locale!=null){
key=new Pair(key,locale);
}
FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);

========
MM Copying to MM
GPR[SPVS]-1659929351176
GPR[SPVAP]-1659929351176
GPR[EPVAP]-1659929351873
GPR[EPVS]-1659929351873
========
if(locale!=null){
key=new Pair(key,locale);
}
initialize();
FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);

========
MM Copying to MM
GPR[SPVS]-1659929351875
GPR[SPVAP]-1659929351875
GPR[EPVAP]-1659929352576
GPR[EPVS]-1659929352576
========
if(locale!=null){
key=new Pair(key,locale);
}
if(this==mObj1){
return true;
}
FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);

========
MM Copying to MM
GPR[SPVS]-1659929352578
GPR[SPVAP]-1659929352578
GPR[EPVAP]-1659929353297
GPR[EPVS]-1659929353297
========
if(locale!=null){
key=new Pair(key,locale);
}
if(!(mObj1 instanceof Pair)){
return false;
}
FastDateFormat format=(FastDateFormat)cDateInstanceCache.get(key);

========
MM Copying to MM
GPR[SPVS]-1659929353299
GPR[SPVAP]-1659929353299
GPR[EPVAP]-1659929354003
GPR[EPVS]-1659929354003
GPR[ESUN]-1659929354004
GPR[SSUN]-1659929354004
org.apache.commons.lang.time.FastDateFormat,291
========
if(locale!=null){
key=new Pair(key,locale);
}
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929354522
GPR[SPVAP]-1659929354522
GPR[EPVAP]-1659929357564
GPR[SPVATF]-1659929357564
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929358489
GPR[EPVS]-1659929358489
========
Calendar.getInstance().add(style,mMaxLengthEstimate);
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929358493
GPR[SPVAP]-1659929358493
GPR[EPVAP]-1659929359192
GPR[EPVS]-1659929359192
========
applyPatternPre(mStandard);
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929359194
GPR[SPVAP]-1659929359194
GPR[EPVAP]-1659929359900
GPR[EPVS]-1659929359900
========
pattern=PARSER.stripFormats(mStandard);
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929359902
GPR[SPVAP]-1659929359902
GPR[EPVAP]-1659929360604
GPR[EPVS]-1659929360604
========
super.applyPattern(pattern);
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929360606
GPR[SPVAP]-1659929360606
GPR[EPVAP]-1659929361305
GPR[EPVS]-1659929361305
========
applyPatternPost(mStandard);
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929361307
GPR[SPVAP]-1659929361307
GPR[EPVAP]-1659929362006
GPR[EPVS]-1659929362006
========
modify(Calendar.getInstance(),style,true);
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929362008
GPR[SPVAP]-1659929362008
GPR[EPVAP]-1659929362715
GPR[EPVS]-1659929362715
========
modify(Calendar.getInstance(),style,false);
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date pattern for locale: " + locale);
}

}

========
MM Copying to MM
GPR[SPVS]-1659929362716
GPR[SPVAP]-1659929362716
GPR[EPVAP]-1659929363414
GPR[EPVS]-1659929363414
GPR[ESUN]-1659929363416
GPR[SSUN]-1659929363416
org.apache.commons.lang.time.FastDateFormat,292
GPR[ESUN]-1659929363535
GPR[SSUN]-1659929363535
org.apache.commons.lang.time.FastDateFormat,296
========
cDateInstanceCache.put(key,format);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929363932
GPR[SPVAP]-1659929363932
GPR[EPVAP]-1659929366997
GPR[SPVATF]-1659929366997
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929367925
GPR[EPVS]-1659929367925
========
cTimeInstanceCache.put(key,format);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929367926
GPR[SPVAP]-1659929367926
GPR[EPVAP]-1659929369109
GPR[SPVATF]-1659929369109
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929370056
GPR[EPVS]-1659929370056
========
cDateTimeInstanceCache.put(key,format);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929370058
GPR[SPVAP]-1659929370058
GPR[EPVAP]-1659929371248
GPR[SPVATF]-1659929371248
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929372177
GPR[EPVS]-1659929372177
========
Calendar.getInstance(timeZone).setTime(new Date(serialVersionUID));
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929372179
GPR[SPVAP]-1659929372179
GPR[EPVAP]-1659929373356
GPR[SPVATF]-1659929373356
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929374291
GPR[EPVS]-1659929374291
========
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
mTimeZone=timeZone;
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929374293
GPR[SPVAP]-1659929374293
GPR[EPVAP]-1659929374994
GPR[EPVS]-1659929374994
========
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
if(mColon){
style|=0x80000000;
}
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929374995
GPR[SPVAP]-1659929374995
GPR[EPVAP]-1659929375693
GPR[EPVS]-1659929375693
========
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
mStyle=style;
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929375695
GPR[SPVAP]-1659929375695
GPR[EPVAP]-1659929376411
GPR[EPVS]-1659929376411
========
if(timeZone!=null){
key=new Pair(key,timeZone);
}
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929376412
GPR[SPVAP]-1659929376413
GPR[EPVAP]-1659929377585
GPR[SPVATF]-1659929377585
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929378537
GPR[EPVS]-1659929378537
========
if(locale!=null){
key=new Pair(key,locale);
}
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929378538
GPR[SPVAP]-1659929378538
GPR[EPVAP]-1659929379699
GPR[SPVATF]-1659929379699
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 0
GPR[EPVATF]-1659929380623
GPR[SPVATR]-1659929380624
TESTING : lang_50
MM messageFailing tests: 0
GPR[EPVATR]-1659929390570
GPR[EPVS]-1659929390570
GPR[PF]-1659929390570
sourceFile  script/workingdir/SimFix/lang/lang_50_buggy/src/java/org/apache/commons/lang/time/FastDateFormat.java
location   script/workingdir/SimFix/lang/lang_50_buggy
MM Out patch at /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_452415_1_ts_1659929390570.diff
MM Command diff diff -w -b  --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java /tmp/tmpDirMM678358402676745013/FastDateFormat.java  /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/1_FastDateFormat.java  --unified=3  > /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_452415_1_ts_1659929390570.diff
MMOut command diff: []
========
if(timeZone!=null){
key=new Pair(key,timeZone);
}
if(locale!=null){
key=new Pair(key,locale);
}
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929390581
GPR[SPVAP]-1659929390581
GPR[EPVAP]-1659929391740
GPR[SPVATF]-1659929391740
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 0
GPR[EPVATF]-1659929392674
GPR[SPVATR]-1659929392675
TESTING : lang_50
MM messageFailing tests: 0
GPR[EPVATR]-1659929402696
GPR[EPVS]-1659929402696
GPR[PF]-1659929402696
sourceFile  script/workingdir/SimFix/lang/lang_50_buggy/src/java/org/apache/commons/lang/time/FastDateFormat.java
location   script/workingdir/SimFix/lang/lang_50_buggy
MM Out patch at /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_464539_2_ts_1659929402696.diff
MM Command diff diff -w -b  --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java /tmp/tmpDirMM3409487516830666839/FastDateFormat.java  /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/2_FastDateFormat.java  --unified=3  > /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_464539_2_ts_1659929402696.diff
MMOut command diff: []
========
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
if(StringUtils.isEmpty(mStandard)||ArrayUtils.isEmpty(mValues)){
return 0;
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929402705
GPR[SPVAP]-1659929402705
GPR[EPVAP]-1659929403413
GPR[EPVS]-1659929403413
========
mTimeZoneForced=(timeZone!=null);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929403415
GPR[SPVAP]-1659929403415
GPR[EPVAP]-1659929404110
GPR[EPVS]-1659929404111
========
if(timeZone==null){
timeZone=TimeZone.getDefault();
}
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929404112
GPR[SPVAP]-1659929404112
GPR[EPVAP]-1659929405322
GPR[SPVATF]-1659929405322
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929406254
GPR[EPVS]-1659929406254
========
mLocaleForced=(locale!=null);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929406256
GPR[SPVAP]-1659929406256
GPR[EPVAP]-1659929406961
GPR[EPVS]-1659929406961
========
if(locale==null){
locale=Locale.getDefault();
}
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929406963
GPR[SPVAP]-1659929406963
GPR[EPVAP]-1659929408133
GPR[SPVATF]-1659929408133
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929409075
GPR[EPVS]-1659929409075
========
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
if(StringUtils.isEmpty(mStandard)||ArrayUtils.isEmpty(mValues)){
return str;
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929409076
GPR[SPVAP]-1659929409076
GPR[EPVAP]-1659929409777
GPR[EPVS]-1659929409777
========
mStyle=style;
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929409779
GPR[SPVAP]-1659929409779
GPR[EPVAP]-1659929410475
GPR[EPVS]-1659929410475
========
if(mTimeZoneForced){
pattern=getTimeZoneDisplay(timeZone,false,style,locale);
mDaylight=getTimeZoneDisplay(timeZone,true,style,locale);
}else {
mStandard=null;
mDaylight=null;
}
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929410477
GPR[SPVAP]-1659929410477
GPR[EPVAP]-1659929411177
GPR[EPVS]-1659929411177
========
if(pattern==null){
value=timeZone.getDisplayName(mColon,style,locale);
cTimeZoneDisplayCache.put(key,value);
}
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929411179
GPR[SPVAP]-1659929411179
GPR[EPVAP]-1659929411876
GPR[EPVS]-1659929411877
========
Calendar.getInstance().add(style,mMaxLengthEstimate);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929411878
GPR[SPVAP]-1659929411878
GPR[EPVAP]-1659929412573
GPR[EPVS]-1659929412573
========
modify(Calendar.getInstance(),style,true);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929412574
GPR[SPVAP]-1659929412574
GPR[EPVAP]-1659929413288
GPR[EPVS]-1659929413288
========
modify(Calendar.getInstance(),style,false);
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);

========
MM Copying to MM
GPR[SPVS]-1659929413290
GPR[SPVAP]-1659929413290
GPR[EPVAP]-1659929413993
GPR[EPVS]-1659929413993
GPR[ESUN]-1659929413994
GPR[SSUN]-1659929413994
org.apache.commons.lang.time.FastDateFormat,297
GPR[ESUN]-1659929414117
GPR[SSUN]-1659929414117
org.apache.commons.lang.time.FastDateFormat,298
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929414533
GPR[SPVAP]-1659929414533
GPR[EPVAP]-1659929417620
GPR[SPVATF]-1659929417620
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 0
GPR[EPVATF]-1659929418553
GPR[SPVATR]-1659929418554
TESTING : lang_50
MM messageFailing tests: 0
GPR[EPVATR]-1659929428616
GPR[EPVS]-1659929428616
GPR[PF]-1659929428616
sourceFile  script/workingdir/SimFix/lang/lang_50_buggy/src/java/org/apache/commons/lang/time/FastDateFormat.java
location   script/workingdir/SimFix/lang/lang_50_buggy
MM Out patch at /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_490458_3_ts_1659929428616.diff
MM Command diff diff -w -b  --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java /tmp/tmpDirMM3762208625278990363/FastDateFormat.java  /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/3_FastDateFormat.java  --unified=3  > /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_490458_3_ts_1659929428616.diff
MMOut command diff: []
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateTimeInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929428624
GPR[SPVAP]-1659929428624
GPR[EPVAP]-1659929429792
GPR[SPVATF]-1659929429792
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 0
GPR[EPVATF]-1659929430738
GPR[SPVATR]-1659929430739
TESTING : lang_50
MM messageFailing tests: 0
GPR[EPVATR]-1659929440690
GPR[EPVS]-1659929440690
GPR[PF]-1659929440690
sourceFile  script/workingdir/SimFix/lang/lang_50_buggy/src/java/org/apache/commons/lang/time/FastDateFormat.java
location   script/workingdir/SimFix/lang/lang_50_buggy
MM Out patch at /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_502533_4_ts_1659929440690.diff
MM Command diff diff -w -b  --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java /tmp/tmpDirMM8661000061463803243/FastDateFormat.java  /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/4_FastDateFormat.java  --unified=3  > /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_502533_4_ts_1659929440690.diff
MMOut command diff: []
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
mapNameToValue.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929440700
GPR[SPVAP]-1659929440700
GPR[EPVAP]-1659929441395
GPR[EPVS]-1659929441395
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(pattern,format);

========
MM Copying to MM
GPR[SPVS]-1659929441397
GPR[SPVAP]-1659929441397
GPR[EPVAP]-1659929442553
GPR[SPVATF]-1659929442553
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 0
GPR[EPVATF]-1659929443473
GPR[SPVATR]-1659929443474
TESTING : lang_50
MM messageFailing tests: 0
GPR[EPVATR]-1659929453525
GPR[EPVS]-1659929453525
GPR[PF]-1659929453525
sourceFile  script/workingdir/SimFix/lang/lang_50_buggy/src/java/org/apache/commons/lang/time/FastDateFormat.java
location   script/workingdir/SimFix/lang/lang_50_buggy
MM Out patch at /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_515368_5_ts_1659929453525.diff
MM Command diff diff -w -b  --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java /tmp/tmpDirMM3066366818178703925/FastDateFormat.java  /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/5_FastDateFormat.java  --unified=3  > /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_515368_5_ts_1659929453525.diff
MMOut command diff: []
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(SHORT,format);

========
MM Copying to MM
GPR[SPVS]-1659929453536
GPR[SPVAP]-1659929453536
GPR[EPVAP]-1659929454231
GPR[EPVS]-1659929454231
========
new HashMap().put(MEDIUM,new Integer(DateFormat.MEDIUM));
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929454233
GPR[SPVAP]-1659929454233
GPR[EPVAP]-1659929454931
GPR[EPVS]-1659929454931
========
new HashMap().put(LONG,new Integer(DateFormat.LONG));
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929454932
GPR[SPVAP]-1659929454932
GPR[EPVAP]-1659929455647
GPR[EPVS]-1659929455647
========
new HashMap().put(FULL,new Integer(DateFormat.FULL));
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929455648
GPR[SPVAP]-1659929455648
GPR[EPVAP]-1659929456359
GPR[EPVS]-1659929456359
========
new HashMap().put(DEFAULT,new Integer(DateFormat.DEFAULT));
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929456361
GPR[SPVAP]-1659929456361
GPR[EPVAP]-1659929457063
GPR[EPVS]-1659929457063
========
if(timeZone!=null){
key=new Pair(key,timeZone);
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929457065
GPR[SPVAP]-1659929457065
GPR[EPVAP]-1659929458229
GPR[SPVATF]-1659929458229
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929459172
GPR[EPVS]-1659929459172
========
if(locale!=null){
key=new Pair(key,locale);
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929459174
GPR[SPVAP]-1659929459174
GPR[EPVAP]-1659929460366
GPR[SPVATF]-1659929460366
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 0
GPR[EPVATF]-1659929461294
GPR[SPVATR]-1659929461295
TESTING : lang_50
MM messageFailing tests: 0
GPR[EPVATR]-1659929471255
GPR[EPVS]-1659929471255
GPR[PF]-1659929471255
sourceFile  script/workingdir/SimFix/lang/lang_50_buggy/src/java/org/apache/commons/lang/time/FastDateFormat.java
location   script/workingdir/SimFix/lang/lang_50_buggy
MM Out patch at /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_533097_6_ts_1659929471255.diff
MM Command diff diff -w -b  --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java /tmp/tmpDirMM8174530252977900604/FastDateFormat.java  /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/6_FastDateFormat.java  --unified=3  > /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_533097_6_ts_1659929471255.diff
MMOut command diff: []
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
subformats.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929471265
GPR[SPVAP]-1659929471265
GPR[EPVAP]-1659929471971
GPR[EPVS]-1659929471971
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(DEFAULT,format);

========
MM Copying to MM
GPR[SPVS]-1659929471973
GPR[SPVAP]-1659929471973
GPR[EPVAP]-1659929472681
GPR[EPVS]-1659929472681
========
cDateTimeInstanceCache.put(INTEGER,NumberFormat.getIntegerInstance(getLocale()));
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929472682
GPR[SPVAP]-1659929472682
GPR[EPVAP]-1659929473385
GPR[EPVS]-1659929473385
========
cDateTimeInstanceCache.put(CURRENCY,NumberFormat.getCurrencyInstance(getLocale()));
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929473386
GPR[SPVAP]-1659929473386
GPR[EPVAP]-1659929474083
GPR[EPVS]-1659929474083
========
cDateTimeInstanceCache.put(PERCENT,NumberFormat.getPercentInstance(getLocale()));
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929474085
GPR[SPVAP]-1659929474085
GPR[EPVAP]-1659929474785
GPR[EPVS]-1659929474785
========
cDateTimeInstanceCache=invert(cDateTimeInstanceCache);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929474787
GPR[SPVAP]-1659929474787
GPR[EPVAP]-1659929475495
GPR[EPVS]-1659929475495
========
cDateInstanceCache.put(new Integer(mMaxLengthEstimate),pattern);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929475497
GPR[SPVAP]-1659929475497
GPR[EPVAP]-1659929476196
GPR[EPVS]-1659929476196
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
mapNameToValue.put(pattern,format);

========
MM Copying to MM
GPR[SPVS]-1659929476198
GPR[SPVAP]-1659929476198
GPR[EPVAP]-1659929476895
GPR[EPVS]-1659929476895
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(style,format);

========
MM Copying to MM
GPR[SPVS]-1659929476897
GPR[SPVAP]-1659929476897
GPR[EPVAP]-1659929477589
GPR[EPVS]-1659929477589
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,createSubformatInstance(style.intValue()));

========
MM Copying to MM
GPR[SPVS]-1659929477591
GPR[SPVAP]-1659929477591
GPR[EPVAP]-1659929478291
GPR[EPVS]-1659929478291
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(style,createSubformatInstance(style.intValue()));

========
MM Copying to MM
GPR[SPVS]-1659929478292
GPR[SPVAP]-1659929478292
GPR[EPVAP]-1659929478990
GPR[EPVS]-1659929478990
========
if(cDateInstanceCache.containsKey(style)){
cDateTimeInstanceCache.put(createSubformatInstance(style.intValue()),style);
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929478991
GPR[SPVAP]-1659929478991
GPR[EPVAP]-1659929479687
GPR[EPVS]-1659929479688
========
if(timeZone!=null){
key=new Pair(key,timeZone);
}
if(locale!=null){
key=new Pair(key,locale);
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929479689
GPR[SPVAP]-1659929479689
GPR[EPVAP]-1659929480861
GPR[SPVATF]-1659929480861
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 0
GPR[EPVATF]-1659929481777
GPR[SPVATR]-1659929481778
TESTING : lang_50
MM messageFailing tests: 0
GPR[EPVATR]-1659929491677
GPR[EPVS]-1659929491677
GPR[PF]-1659929491677
sourceFile  script/workingdir/SimFix/lang/lang_50_buggy/src/java/org/apache/commons/lang/time/FastDateFormat.java
location   script/workingdir/SimFix/lang/lang_50_buggy
MM Out patch at /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_553520_7_ts_1659929491677.diff
MM Command diff diff -w -b  --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java /tmp/tmpDirMM1616257822094155298/FastDateFormat.java  /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/7_FastDateFormat.java  --unified=3  > /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_553520_7_ts_1659929491677.diff
MMOut command diff: []
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cTimeZoneDisplayCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929491686
GPR[SPVAP]-1659929491686
GPR[EPVAP]-1659929492839
GPR[SPVATF]-1659929492839
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 0
GPR[EPVATF]-1659929493777
GPR[SPVATR]-1659929493778
TESTING : lang_50
MM messageFailing tests: 0
GPR[EPVATR]-1659929503784
GPR[EPVS]-1659929503784
GPR[PF]-1659929503784
sourceFile  script/workingdir/SimFix/lang/lang_50_buggy/src/java/org/apache/commons/lang/time/FastDateFormat.java
location   script/workingdir/SimFix/lang/lang_50_buggy
MM Out patch at /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_565627_8_ts_1659929503784.diff
MM Command diff diff -w -b  --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java --label=/src/java/org/apache/commons/lang/time/FastDateFormat.java /tmp/tmpDirMM4850883596908528178/FastDateFormat.java  /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/8_FastDateFormat.java  --unified=3  > /experiment_home///results/SimFix/Lang/50/seed_263/patch/lang/50/0/patch_565627_8_ts_1659929503784.diff
MMOut command diff: []
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,pattern);

========
MM Copying to MM
GPR[SPVS]-1659929503794
GPR[SPVAP]-1659929503794
GPR[EPVAP]-1659929504968
GPR[SPVATF]-1659929504968
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929505903
GPR[EPVS]-1659929505903
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
myMap.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929505905
GPR[SPVAP]-1659929505905
GPR[EPVAP]-1659929506615
GPR[EPVS]-1659929506615
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
map.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929506617
GPR[SPVAP]-1659929506617
GPR[EPVAP]-1659929507313
GPR[EPVS]-1659929507313
========
if(StringUtils.isEmpty(mStandard)||ArrayUtils.isEmpty(mValues)){
return 0;
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929507315
GPR[SPVAP]-1659929507315
GPR[EPVAP]-1659929508016
GPR[EPVS]-1659929508016
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
pattern=pattern;
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929508018
GPR[SPVAP]-1659929508018
GPR[EPVAP]-1659929509175
GPR[SPVATF]-1659929509175
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929510118
GPR[EPVS]-1659929510118
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
mTimeZoneForced=(timeZone!=null);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929510119
GPR[SPVAP]-1659929510119
GPR[EPVAP]-1659929510816
GPR[EPVS]-1659929510816
========
if(StringUtils.isEmpty(mStandard)||ArrayUtils.isEmpty(mValues)){
return str;
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929510817
GPR[SPVAP]-1659929510817
GPR[EPVAP]-1659929511516
GPR[EPVS]-1659929511516
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929511518
GPR[SPVAP]-1659929511518
GPR[EPVAP]-1659929512216
GPR[EPVS]-1659929512216
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929512218
GPR[SPVAP]-1659929512218
GPR[EPVAP]-1659929512921
GPR[EPVS]-1659929512921
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929512923
GPR[SPVAP]-1659929512923
GPR[EPVAP]-1659929513633
GPR[EPVS]-1659929513633
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
applyPatternPre(pattern);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929513635
GPR[SPVAP]-1659929513635
GPR[EPVAP]-1659929514329
GPR[EPVS]-1659929514329
========
super.applyPattern(pattern);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929514331
GPR[SPVAP]-1659929514331
GPR[EPVAP]-1659929515030
GPR[EPVS]-1659929515030
========
applyPatternPost(pattern);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929515031
GPR[SPVAP]-1659929515031
GPR[EPVAP]-1659929515731
GPR[EPVS]-1659929515731
========
Calendar.getInstance().add(mField,mMaxLengthEstimate);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929515733
GPR[SPVAP]-1659929515733
GPR[EPVAP]-1659929516436
GPR[EPVS]-1659929516436
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cLanguagesByCountry.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929516438
GPR[SPVAP]-1659929516438
GPR[EPVAP]-1659929517171
GPR[EPVS]-1659929517171
========
modify(Calendar.getInstance(),mMaxLengthEstimate,true);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929517173
GPR[SPVAP]-1659929517173
GPR[EPVAP]-1659929517876
GPR[EPVS]-1659929517876
========
modify(Calendar.getInstance(),mMaxLengthEstimate,false);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929517878
GPR[SPVAP]-1659929517878
GPR[EPVAP]-1659929518601
GPR[EPVS]-1659929518601
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
mTimeZone=timeZone;
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929518602
GPR[SPVAP]-1659929518602
GPR[EPVAP]-1659929519310
GPR[EPVS]-1659929519310
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
mLocaleForced=(locale!=null);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929519311
GPR[SPVAP]-1659929519311
GPR[EPVAP]-1659929520022
GPR[EPVS]-1659929520022
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cCountriesByLanguage.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929520024
GPR[SPVAP]-1659929520024
GPR[EPVAP]-1659929520720
GPR[EPVS]-1659929520720
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
keyedFormats.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929520722
GPR[SPVAP]-1659929520722
GPR[EPVAP]-1659929521441
GPR[EPVS]-1659929521441
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
map.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929521443
GPR[SPVAP]-1659929521443
GPR[EPVAP]-1659929522141
GPR[EPVS]-1659929522141
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
map.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929522143
GPR[SPVAP]-1659929522143
GPR[EPVAP]-1659929522843
GPR[EPVS]-1659929522843
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
map.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929522845
GPR[SPVAP]-1659929522845
GPR[EPVAP]-1659929523540
GPR[EPVS]-1659929523540
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
cDateInstanceCache.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929523541
GPR[SPVAP]-1659929523541
GPR[EPVAP]-1659929524249
GPR[EPVS]-1659929524249
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929524251
GPR[SPVAP]-1659929524251
GPR[EPVAP]-1659929524954
GPR[EPVS]-1659929524954
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929524956
GPR[SPVAP]-1659929524956
GPR[EPVAP]-1659929525652
GPR[EPVS]-1659929525652
========
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
map.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929525654
GPR[SPVAP]-1659929525654
GPR[EPVAP]-1659929526359
GPR[EPVS]-1659929526359
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
map.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929526361
GPR[SPVAP]-1659929526361
GPR[EPVAP]-1659929527059
GPR[EPVS]-1659929527059
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
map.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929527061
GPR[SPVAP]-1659929527061
GPR[EPVAP]-1659929527765
GPR[EPVS]-1659929527765
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
cDateInstanceCache.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929527767
GPR[SPVAP]-1659929527767
GPR[EPVAP]-1659929528481
GPR[EPVS]-1659929528481
========
entry.list.add(this);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
if(entry.map.containsKey(mStandard)){
throw new IllegalArgumentException("The Enum name must be unique, \'"+name);
}
map.put(mStandard,format);

========
MM Copying to MM
GPR[SPVS]-1659929528483
GPR[SPVAP]-1659929528483
GPR[EPVAP]-1659929529181
GPR[EPVS]-1659929529181
========
if(cDateInstanceCache==null){
return null;
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929529183
GPR[SPVAP]-1659929529183
GPR[EPVAP]-1659929530367
GPR[SPVATF]-1659929530367
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929531298
GPR[EPVS]-1659929531298
========
if(cDateInstanceCache.get(key)==null){
return null;
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929531299
GPR[SPVAP]-1659929531299
GPR[EPVAP]-1659929532480
GPR[SPVATF]-1659929532480
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929533412
GPR[EPVS]-1659929533412
========
if(cDateInstanceCache==null){
return null;
}
if(cDateInstanceCache.get(key)==null){
return null;
}
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);

========
MM Copying to MM
GPR[SPVS]-1659929533414
GPR[SPVAP]-1659929533414
GPR[EPVAP]-1659929534580
GPR[SPVATF]-1659929534580
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929535508
GPR[EPVS]-1659929535508
GPR[ESUN]-1659929535508
GPR[SSUN]-1659929535508
org.apache.commons.lang.time.FastDateFormat,299
GPR[ESUN]-1659929535633
GPR[SSUN]-1659929535633
org.apache.commons.lang.time.FastDateFormat,303
Find no block!
GPR[SSUN]-1659929535685
org.apache.commons.lang.time.FastDateFormat,305
========
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date pattern for locale: " + locale);
}

}
return df;

========
MM Copying to MM
GPR[SPVS]-1659929536146
GPR[SPVAP]-1659929536146
GPR[EPVAP]-1659929537349
GPR[EPVS]-1659929537349
========
if(format==null){
if(locale==null){
locale=Locale.getDefault();
}
try{
SimpleDateFormat formatter=(SimpleDateFormat)DateFormat.getDateInstance(style,locale);
String pattern=formatter.toPattern();
format=getInstance(pattern,timeZone,locale);
cDateInstanceCache.put(key,format);
}catch (ClassCastException ex) {
  throw new IllegalArgumentException("No date pattern for locale: " + locale);
}

}
return value;

========
MM Copying to MM
GPR[SPVS]-1659929537353
GPR[SPVAP]-1659929537353
GPR[EPVAP]-1659929538110
GPR[EPVS]-1659929538110
GPR[ESUN]-1659929538111
GPR[SSUN]-1659929538111
org.apache.commons.lang.time.FastDateFormat,633
========
case 'H' :

case 'h' :
rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
break;


========
MM Copying to MM
GPR[SPVS]-1659929538481
GPR[SPVAP]-1659929538481
GPR[EPVAP]-1659929539684
GPR[EPVS]-1659929539684
========
case 'K' :

case 'h' :
rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
break;


========
MM Copying to MM
GPR[SPVS]-1659929539686
GPR[SPVAP]-1659929539686
GPR[EPVAP]-1659929540448
GPR[EPVS]-1659929540448
========
case 's' :

case 'h' :
rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
break;


========
MM Copying to MM
GPR[SPVS]-1659929540450
GPR[SPVAP]-1659929540450
GPR[EPVAP]-1659929541143
GPR[EPVS]-1659929541143
========
case 'E' :

case 'h' :
rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
break;


========
MM Copying to MM
GPR[SPVS]-1659929541144
GPR[SPVAP]-1659929541145
GPR[EPVAP]-1659929541849
GPR[EPVS]-1659929541849
========
case 'F' :

case 'h' :
rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
break;


========
MM Copying to MM
GPR[SPVS]-1659929541851
GPR[SPVAP]-1659929541851
GPR[EPVAP]-1659929542556
GPR[EPVS]-1659929542556
========
case 'W' :

case 'h' :
rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
break;


========
MM Copying to MM
GPR[SPVS]-1659929542558
GPR[SPVAP]-1659929542558
GPR[EPVAP]-1659929543268
GPR[EPVS]-1659929543268
========
case 'y' :

case 'h' :
rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
break;


========
MM Copying to MM
GPR[SPVS]-1659929543270
GPR[SPVAP]-1659929543270
GPR[EPVAP]-1659929543973
GPR[EPVS]-1659929543973
GPR[ESUN]-1659929543973
GPR[SSUN]-1659929543973
org.apache.commons.lang.time.FastDateFormat,634
GPR[ESUN]-1659929544614
GPR[SSUN]-1659929544614
org.apache.commons.lang.time.FastDateFormat,663
========
case 'y' :

case 'a' :
rule=new TextField(Calendar.AM_PM,AmPmStrings);
break;


========
MM Copying to MM
GPR[SPVS]-1659929544961
GPR[SPVAP]-1659929544961
GPR[EPVAP]-1659929546161
GPR[EPVS]-1659929546161
========
case 'k' :

case 'a' :
rule=new TextField(Calendar.AM_PM,AmPmStrings);
break;


========
MM Copying to MM
GPR[SPVS]-1659929546163
GPR[SPVAP]-1659929546163
GPR[EPVAP]-1659929546924
GPR[EPVS]-1659929546924
========
case 'h' :

case 'a' :
rule=new TextField(Calendar.AM_PM,AmPmStrings);
break;


========
MM Copying to MM
GPR[SPVS]-1659929546925
GPR[SPVAP]-1659929546925
GPR[EPVAP]-1659929547622
GPR[EPVS]-1659929547622
========
case 'm' :

case 'a' :
rule=new TextField(Calendar.AM_PM,AmPmStrings);
break;


========
MM Copying to MM
GPR[SPVS]-1659929547624
GPR[SPVAP]-1659929547624
GPR[EPVAP]-1659929548325
GPR[EPVS]-1659929548325
========
case 'S' :

case 'a' :
rule=new TextField(Calendar.AM_PM,AmPmStrings);
break;


========
MM Copying to MM
GPR[SPVS]-1659929548327
GPR[SPVAP]-1659929548327
GPR[EPVAP]-1659929549031
GPR[EPVS]-1659929549032
========
case 'F' :

case 'a' :
rule=new TextField(Calendar.AM_PM,AmPmStrings);
break;


========
MM Copying to MM
GPR[SPVS]-1659929549033
GPR[SPVAP]-1659929549033
GPR[EPVAP]-1659929549739
GPR[EPVS]-1659929549739
========
case 'W' :

case 'a' :
rule=new TextField(Calendar.AM_PM,AmPmStrings);
break;


========
MM Copying to MM
GPR[SPVS]-1659929549740
GPR[SPVAP]-1659929549740
GPR[EPVAP]-1659929550454
GPR[EPVS]-1659929550455
========
case 'z' :

case 'a' :
rule=new TextField(Calendar.AM_PM,AmPmStrings);
break;


========
MM Copying to MM
GPR[SPVS]-1659929550456
GPR[SPVAP]-1659929550456
GPR[EPVAP]-1659929551156
GPR[EPVS]-1659929551156
GPR[ESUN]-1659929551156
GPR[SSUN]-1659929551156
org.apache.commons.lang.time.FastDateFormat,664
GPR[ESUN]-1659929551782
GPR[SSUN]-1659929551782
org.apache.commons.lang.time.FastDateFormat,648
========
case 'D' :

case 'E' :
rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
break;


========
MM Copying to MM
GPR[SPVS]-1659929552126
GPR[SPVAP]-1659929552126
GPR[EPVAP]-1659929553351
GPR[EPVS]-1659929553351
========
case 'h' :

case 'E' :
rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
break;


========
MM Copying to MM
GPR[SPVS]-1659929553353
GPR[SPVAP]-1659929553353
GPR[EPVAP]-1659929554104
GPR[EPVS]-1659929554104
========
case 'm' :

case 'E' :
rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
break;


========
MM Copying to MM
GPR[SPVS]-1659929554106
GPR[SPVAP]-1659929554106
GPR[EPVAP]-1659929554812
GPR[EPVS]-1659929554812
========
case 'S' :

case 'E' :
rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
break;


========
MM Copying to MM
GPR[SPVS]-1659929554814
GPR[SPVAP]-1659929554814
GPR[EPVAP]-1659929555537
GPR[EPVS]-1659929555537
========
case 'w' :

case 'E' :
rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
break;


========
MM Copying to MM
GPR[SPVS]-1659929555538
GPR[SPVAP]-1659929555538
GPR[EPVAP]-1659929556249
GPR[EPVS]-1659929556249
========
case 'a' :

case 'E' :
rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
break;


========
MM Copying to MM
GPR[SPVS]-1659929556250
GPR[SPVAP]-1659929556250
GPR[EPVAP]-1659929556956
GPR[EPVS]-1659929556956
========
case 'z' :

case 'E' :
rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
break;


========
MM Copying to MM
GPR[SPVS]-1659929556958
GPR[SPVAP]-1659929556958
GPR[EPVAP]-1659929557661
GPR[EPVS]-1659929557661
========
case 'y' :

case 'E' :
rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
break;


========
MM Copying to MM
GPR[SPVS]-1659929557663
GPR[SPVAP]-1659929557663
GPR[EPVAP]-1659929558351
GPR[EPVS]-1659929558351
GPR[ESUN]-1659929558351
GPR[SSUN]-1659929558351
org.apache.commons.lang.time.FastDateFormat,649
GPR[ESUN]-1659929558994
GPR[SSUN]-1659929558994
org.apache.commons.lang.time.FastDateFormat,690
========
if(sub.length()>mStandard.length()){
return false;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929559692
GPR[SPVAP]-1659929559692
GPR[EPVAP]-1659929560922
GPR[EPVS]-1659929560922
========
if(searchStr.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929563676
GPR[SPVAP]-1659929563676
GPR[EPVAP]-1659929564442
GPR[EPVS]-1659929564442
========
if(sub.length()==mMaxLengthEstimate){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929564444
GPR[SPVAP]-1659929564444
GPR[EPVAP]-1659929567035
GPR[SPVATF]-1659929567035
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929567968
GPR[EPVS]-1659929567968
========
if(prefix.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929567970
GPR[SPVAP]-1659929567970
GPR[EPVAP]-1659929568681
GPR[EPVS]-1659929568681
========
if(sub.length()!=1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929568683
GPR[SPVAP]-1659929568683
GPR[EPVAP]-1659929569877
GPR[SPVATF]-1659929569878
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929570809
GPR[EPVS]-1659929570809
========
if(tmp.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929570811
GPR[SPVAP]-1659929570811
GPR[EPVAP]-1659929571514
GPR[EPVS]-1659929571514
========
if(tmp.length()!=1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929571515
GPR[SPVAP]-1659929571515
GPR[EPVAP]-1659929572214
GPR[EPVS]-1659929572214
========
if(str2.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929572216
GPR[SPVAP]-1659929572216
GPR[EPVAP]-1659929572918
GPR[EPVS]-1659929572918
========
if(str.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929572920
GPR[SPVAP]-1659929572920
GPR[EPVAP]-1659929573615
GPR[EPVS]-1659929573615
========
if(sub.length()==tokenLen){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929573617
GPR[SPVAP]-1659929573617
GPR[EPVAP]-1659929574786
GPR[SPVATF]-1659929574786
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929575716
GPR[EPVS]-1659929575716
========
if(str.length()==tokenLen){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929575718
GPR[SPVAP]-1659929575718
GPR[EPVAP]-1659929576468
GPR[EPVS]-1659929576468
========
if(str.length()==mMaxLengthEstimate){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929576470
GPR[SPVAP]-1659929576470
GPR[EPVAP]-1659929577185
GPR[EPVS]-1659929577185
========
if(sub.charAt(i)==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929577187
GPR[SPVAP]-1659929577187
GPR[EPVAP]-1659929578363
GPR[SPVATF]-1659929578363
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929579293
GPR[EPVS]-1659929579293
========
if(str1.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929579294
GPR[SPVAP]-1659929579294
GPR[EPVAP]-1659929579997
GPR[EPVS]-1659929579997
========
if(sub.charAt(i)!=1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929579998
GPR[SPVAP]-1659929579998
GPR[EPVAP]-1659929581171
GPR[SPVATF]-1659929581171
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929582101
GPR[EPVS]-1659929582101
========
if(sub.length()==mStandard.lastIndexOf(sub)){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929582103
GPR[SPVAP]-1659929582103
GPR[EPVAP]-1659929582801
GPR[EPVS]-1659929582801
========
if(isEmpty(mStandard)){
return str;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929582802
GPR[SPVAP]-1659929582802
GPR[EPVAP]-1659929583502
GPR[EPVS]-1659929583502
========
if(isEmpty(sub)){
return EMPTY;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929583503
GPR[SPVAP]-1659929583503
GPR[EPVAP]-1659929584231
GPR[EPVS]-1659929584231
========
if(sub.length()==1){
break;
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929584233
GPR[SPVAP]-1659929584233
GPR[EPVAP]-1659929584931
GPR[EPVS]-1659929584931
========
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
break;
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929584933
GPR[SPVAP]-1659929584933
GPR[EPVAP]-1659929585637
GPR[EPVS]-1659929585637
========
if(duration.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929585638
GPR[SPVAP]-1659929585638
GPR[EPVAP]-1659929586343
GPR[EPVS]-1659929586343
========
if(separator.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929586345
GPR[SPVAP]-1659929586345
GPR[EPVAP]-1659929587042
GPR[EPVS]-1659929587042
========
if(languageCode.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929587044
GPR[SPVAP]-1659929587044
GPR[EPVAP]-1659929587745
GPR[EPVS]-1659929587745
========
if(chars.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929587746
GPR[SPVAP]-1659929587746
GPR[EPVAP]-1659929588494
GPR[EPVS]-1659929588494
========
if(sub.length()==length){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929588496
GPR[SPVAP]-1659929588496
GPR[EPVAP]-1659929589663
GPR[SPVATF]-1659929589663
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929590600
GPR[EPVS]-1659929590600
========
if(s.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929590602
GPR[SPVAP]-1659929590602
GPR[EPVAP]-1659929591303
GPR[EPVS]-1659929591303
========
if(str.length()!=1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929591305
GPR[SPVAP]-1659929591305
GPR[EPVAP]-1659929592009
GPR[EPVS]-1659929592009
========
if(searchChars.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929592012
GPR[SPVAP]-1659929592012
GPR[EPVAP]-1659929592716
GPR[EPVS]-1659929592716
========
if(stripChars.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929592717
GPR[SPVAP]-1659929592717
GPR[EPVAP]-1659929593416
GPR[EPVS]-1659929593416
========
if(sub.length()==1){
return indexOf(sub.charAt(0),mMaxLengthEstimate);
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929593418
GPR[SPVAP]-1659929593418
GPR[EPVAP]-1659929594122
GPR[EPVS]-1659929594122
========
sub=str.toLowerCase();
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929594125
GPR[SPVAP]-1659929594125
GPR[EPVAP]-1659929594827
GPR[EPVS]-1659929594827
========
if(className.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929594828
GPR[SPVAP]-1659929594828
GPR[EPVAP]-1659929595528
GPR[EPVS]-1659929595528
========
if(sub.charAt(sub.length()-1-1)==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929595529
GPR[SPVAP]-1659929595529
GPR[EPVAP]-1659929596718
GPR[SPVATF]-1659929596718
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929597650
GPR[EPVS]-1659929597650
========
if(sub.length()-1<=0){
return EMPTY;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929597652
GPR[SPVAP]-1659929597652
GPR[EPVAP]-1659929598351
GPR[EPVS]-1659929598351
========
if(countryCode.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929598353
GPR[SPVAP]-1659929598353
GPR[EPVAP]-1659929599054
GPR[EPVS]-1659929599055
========
if(val.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929599056
GPR[SPVAP]-1659929599056
GPR[EPVAP]-1659929599761
GPR[EPVS]-1659929599761
========
if(sub.startsWith("--")){
return null;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929599763
GPR[SPVAP]-1659929599763
GPR[EPVAP]-1659929600913
GPR[SPVATF]-1659929600913
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929601838
GPR[EPVS]-1659929601838
========
if(sub.startsWith("--")){
return null;
}
if(val.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929601840
GPR[SPVAP]-1659929601840
GPR[EPVAP]-1659929602540
GPR[EPVS]-1659929602540
========
if(sub.startsWith("--")){
return null;
}
if(str.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929602542
GPR[SPVAP]-1659929602542
GPR[EPVAP]-1659929603241
GPR[EPVS]-1659929603241
========
if(mMaxLengthEstimate-sub.length()<=0){
return sub;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929603243
GPR[SPVAP]-1659929603243
GPR[EPVAP]-1659929603938
GPR[EPVS]-1659929603938
========
if(mMaxLengthEstimate-sub.length()>PAD_LIMIT){
return rightPad(sub,mMaxLengthEstimate,String.valueOf(c));
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929603940
GPR[SPVAP]-1659929603940
GPR[EPVAP]-1659929604638
GPR[EPVS]-1659929604638
========
if(mMaxLengthEstimate-sub.length()>PAD_LIMIT){
return leftPad(sub,mMaxLengthEstimate,String.valueOf(c));
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929604639
GPR[SPVAP]-1659929604639
GPR[EPVAP]-1659929605341
GPR[EPVS]-1659929605341
========
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
append(sub);
rule=new StringLiteral(sub);
}

========
MM Copying to MM
GPR[SPVS]-1659929605343
GPR[SPVAP]-1659929605343
GPR[EPVAP]-1659929606036
GPR[EPVS]-1659929606036
GPR[ESUN]-1659929606040
GPR[SSUN]-1659929606040
org.apache.commons.lang.time.FastDateFormat,692
========
if(searchStr.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929607066
GPR[SPVAP]-1659929607066
GPR[EPVAP]-1659929608291
GPR[EPVS]-1659929608291
========
if(sub.length()==mMaxLengthEstimate){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929608293
GPR[SPVAP]-1659929608293
GPR[EPVAP]-1659929610941
GPR[SPVATF]-1659929610941
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929611876
GPR[EPVS]-1659929611876
========
if(prefix.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929611878
GPR[SPVAP]-1659929611878
GPR[EPVAP]-1659929612579
GPR[EPVS]-1659929612579
========
if(suffix.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929612581
GPR[SPVAP]-1659929612581
GPR[EPVAP]-1659929613276
GPR[EPVS]-1659929613276
========
if(str2.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929613278
GPR[SPVAP]-1659929613278
GPR[EPVAP]-1659929614001
GPR[EPVS]-1659929614001
========
if(sub.length()!=1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929614002
GPR[SPVAP]-1659929614002
GPR[EPVAP]-1659929615191
GPR[SPVATF]-1659929615191
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929616122
GPR[EPVS]-1659929616122
========
if(tmp.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929616124
GPR[SPVAP]-1659929616124
GPR[EPVAP]-1659929616820
GPR[EPVS]-1659929616820
========
if(tmp.length()!=1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929616822
GPR[SPVAP]-1659929616822
GPR[EPVAP]-1659929617521
GPR[EPVS]-1659929617521
========
if(str.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929617523
GPR[SPVAP]-1659929617523
GPR[EPVAP]-1659929618228
GPR[EPVS]-1659929618228
========
if(str.length()==mMaxLengthEstimate){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929618231
GPR[SPVAP]-1659929618231
GPR[EPVAP]-1659929618928
GPR[EPVS]-1659929618928
========
if(sub.length()==mStandard.lastIndexOf(sub)){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929618930
GPR[SPVAP]-1659929618930
GPR[EPVAP]-1659929619629
GPR[EPVS]-1659929619629
========
if(isEmpty(mStandard)){
return str;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929619631
GPR[SPVAP]-1659929619631
GPR[EPVAP]-1659929620333
GPR[EPVS]-1659929620333
========
if(isEmpty(sub)){
return EMPTY;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929620335
GPR[SPVAP]-1659929620335
GPR[EPVAP]-1659929621039
GPR[EPVS]-1659929621039
========
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
i=indexRef[0];
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929621042
GPR[SPVAP]-1659929621042
GPR[EPVAP]-1659929622206
GPR[SPVATF]-1659929622206
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929623132
GPR[EPVS]-1659929623132
========
if(sub.charAt(i)==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929623134
GPR[SPVAP]-1659929623134
GPR[EPVAP]-1659929624275
GPR[SPVATF]-1659929624275
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929625194
GPR[EPVS]-1659929625194
========
if(str1.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929625196
GPR[SPVAP]-1659929625196
GPR[EPVAP]-1659929625893
GPR[EPVS]-1659929625893
========
if(sub.charAt(i)!=1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929625895
GPR[SPVAP]-1659929625895
GPR[EPVAP]-1659929627052
GPR[SPVATF]-1659929627052
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929627981
GPR[EPVS]-1659929627981
========
if(mStandard==null){
replaceChars="";
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929627983
GPR[SPVAP]-1659929627983
GPR[EPVAP]-1659929628679
GPR[EPVS]-1659929628679
========
if(separator.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929628681
GPR[SPVAP]-1659929628681
GPR[EPVAP]-1659929629375
GPR[EPVS]-1659929629375
========
if(duration.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929629377
GPR[SPVAP]-1659929629377
GPR[EPVAP]-1659929630080
GPR[EPVS]-1659929630080
========
if(sub.length()==1){
break;
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929630082
GPR[SPVAP]-1659929630082
GPR[EPVAP]-1659929630783
GPR[EPVS]-1659929630783
========
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
break;
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929630784
GPR[SPVAP]-1659929630784
GPR[EPVAP]-1659929631486
GPR[EPVS]-1659929631486
========
if(chars.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929631488
GPR[SPVAP]-1659929631488
GPR[EPVAP]-1659929632195
GPR[EPVS]-1659929632195
========
if(languageCode.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929632197
GPR[SPVAP]-1659929632197
GPR[EPVAP]-1659929632892
GPR[EPVS]-1659929632892
========
if(sub.length()==length){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929632895
GPR[SPVAP]-1659929632895
GPR[EPVAP]-1659929634053
GPR[SPVATF]-1659929634053
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929634997
GPR[EPVS]-1659929634997
========
if(className.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929634999
GPR[SPVAP]-1659929634999
GPR[EPVAP]-1659929635700
GPR[EPVS]-1659929635700
========
if(sub.length()<2){
return EMPTY;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929635702
GPR[SPVAP]-1659929635702
GPR[EPVAP]-1659929636412
GPR[EPVS]-1659929636412
========
if(s.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929636413
GPR[SPVAP]-1659929636413
GPR[EPVAP]-1659929637119
GPR[EPVS]-1659929637119
========
if(str.length()!=1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929637121
GPR[SPVAP]-1659929637121
GPR[EPVAP]-1659929637816
GPR[EPVS]-1659929637816
========
if(searchChars.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929637818
GPR[SPVAP]-1659929637818
GPR[EPVAP]-1659929638515
GPR[EPVS]-1659929638516
========
if(val.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929638517
GPR[SPVAP]-1659929638517
GPR[EPVAP]-1659929639241
GPR[EPVS]-1659929639241
========
if(sub.length()==tokenLen){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929639243
GPR[SPVAP]-1659929639243
GPR[EPVAP]-1659929640454
GPR[SPVATF]-1659929640454
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929641381
GPR[EPVS]-1659929641381
========
sub=str.toLowerCase();
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929641382
GPR[SPVAP]-1659929641382
GPR[EPVAP]-1659929642080
GPR[EPVS]-1659929642080
========
if(str.length()==tokenLen){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929642082
GPR[SPVAP]-1659929642082
GPR[EPVAP]-1659929642780
GPR[EPVS]-1659929642780
========
mMaxLengthEstimate=(startIndex<0?0:startIndex);
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929642781
GPR[SPVAP]-1659929642781
GPR[EPVAP]-1659929643477
GPR[EPVS]-1659929643477
========
if(sub.length()==1){
return indexOf(sub.charAt(0),mMaxLengthEstimate);
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929643479
GPR[SPVAP]-1659929643479
GPR[EPVAP]-1659929644181
GPR[EPVS]-1659929644181
========
if(sub.length()==0){
return mMaxLengthEstimate;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929644183
GPR[SPVAP]-1659929644183
GPR[EPVAP]-1659929644924
GPR[EPVS]-1659929644924
========
if(stripChars.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929644926
GPR[SPVAP]-1659929644926
GPR[EPVAP]-1659929645624
GPR[EPVS]-1659929645624
========
if(mMaxLengthEstimate<=0){
return EMPTY;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929645626
GPR[SPVAP]-1659929645626
GPR[EPVAP]-1659929646328
GPR[EPVS]-1659929646328
========
if(mMaxLengthEstimate==1||sub.length()==0){
return sub;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929646330
GPR[SPVAP]-1659929646330
GPR[EPVAP]-1659929647034
GPR[EPVS]-1659929647034
========
if(sub.length()==1&&mMaxLengthEstimate<=PAD_LIMIT){
return padding(repeat,sub.charAt(0));
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929647036
GPR[SPVAP]-1659929647036
GPR[EPVAP]-1659929647728
GPR[EPVS]-1659929647728
========
if(countryCode.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929647730
GPR[SPVAP]-1659929647730
GPR[EPVAP]-1659929648440
GPR[EPVS]-1659929648440
========
if(sub.charAt(sub.length()-1-1)==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929648441
GPR[SPVAP]-1659929648441
GPR[EPVAP]-1659929649616
GPR[SPVATF]-1659929649616
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929650562
GPR[EPVS]-1659929650562
========
if(sub.length()-1<=0){
return EMPTY;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929650563
GPR[SPVAP]-1659929650563
GPR[EPVAP]-1659929651256
GPR[EPVS]-1659929651256
========
if(sub.startsWith("--")){
return null;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929651258
GPR[SPVAP]-1659929651258
GPR[EPVAP]-1659929652427
GPR[SPVATF]-1659929652427
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929653356
GPR[EPVS]-1659929653356
========
if(sub.startsWith("--")){
return null;
}
if(val.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929653357
GPR[SPVAP]-1659929653357
GPR[EPVAP]-1659929654057
GPR[EPVS]-1659929654057
========
if(sub.startsWith("--")){
return null;
}
if(str.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929654058
GPR[SPVAP]-1659929654058
GPR[EPVAP]-1659929654767
GPR[EPVS]-1659929654767
========
if(sub.length()!=2&&len!=5&&len<7){
throw new IllegalArgumentException("Invalid locale format: "+sub);
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929654768
GPR[SPVAP]-1659929654768
GPR[EPVAP]-1659929655473
GPR[EPVS]-1659929655473
========
if(mMaxLengthEstimate-sub.length()<=0){
return sub;
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929655474
GPR[SPVAP]-1659929655474
GPR[EPVAP]-1659929656180
GPR[EPVS]-1659929656180
========
if(mMaxLengthEstimate-sub.length()>PAD_LIMIT){
return rightPad(sub,mMaxLengthEstimate,String.valueOf(c));
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929656181
GPR[SPVAP]-1659929656181
GPR[EPVAP]-1659929656878
GPR[EPVS]-1659929656878
========
if(mMaxLengthEstimate-sub.length()>PAD_LIMIT){
return leftPad(sub,mMaxLengthEstimate,String.valueOf(c));
}
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929656879
GPR[SPVAP]-1659929656879
GPR[EPVAP]-1659929657577
GPR[EPVS]-1659929657577
========
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
append(sub);
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929657579
GPR[SPVAP]-1659929657579
GPR[EPVAP]-1659929658281
GPR[EPVS]-1659929658281
========
try{
StringWriter new StringWriter(sub.length())=new StringWriter(sub.length());
unescapeJava(writer,str);
return writer.toString();
}catch (IOException ioe) {
  ioe.printStackTrace();
  return null;
}

if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929658283
GPR[SPVAP]-1659929658283
GPR[EPVAP]-1659929658833
GPR[EPVS]-1659929658833
========
try{
StringWriter new StringWriter((int)(sub.length()*1.5))=new StringWriter((int)(sub.length()*1.5));
escapeHtml(writer,str);
return writer.toString();
}catch (IOException e) {
  e.printStackTrace();
  return null;
}

if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929658834
GPR[SPVAP]-1659929658834
GPR[EPVAP]-1659929659378
GPR[EPVS]-1659929659378
========
try{
StringWriter new StringWriter((int)(sub.length()*1.5))=new StringWriter((int)(sub.length()*1.5));
unescapeHtml(writer,str);
return writer.toString();
}catch (IOException e) {
  e.printStackTrace();
  return null;
}

if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929659380
GPR[SPVAP]-1659929659380
GPR[EPVAP]-1659929659938
GPR[EPVS]-1659929659938
========
try{
StringWriter new StringWriter(sub.length()*2)=new StringWriter(sub.length()*2);
escapeJavaStyleString(writer,str,mColon);
return writer.toString();
}catch (IOException ioe) {
  ioe.printStackTrace();
  return null;
}

if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929659940
GPR[SPVAP]-1659929659940
GPR[EPVAP]-1659929660497
GPR[EPVS]-1659929660497
========
if(sub.length()==1){
rule=new CharacterLiteral(sub.charAt(0));
}else {
rule=new StringLiteral(sub);
}
mMaxLengthEstimate*=(mMaxLengthEstimate<0?16:(max>64?64:max));
break;
default :


========
MM Copying to MM
GPR[SPVS]-1659929660499
GPR[SPVAP]-1659929660499
GPR[EPVAP]-1659929661195
GPR[EPVS]-1659929661195
GPR[ESUN]-1659929661200
GPR[SSUN]-1659929661200
org.apache.commons.lang.time.FastDateFormat,1112
Find no block!
GPR[SSUN]-1659929661312
org.apache.commons.lang.time.FastDateFormat,1113
========
this.value=value;
mValue=value;

========
MM Copying to MM
GPR[SPVS]-1659929661655
GPR[SPVAP]-1659929661655
GPR[EPVAP]-1659929662872
GPR[EPVS]-1659929662872
GPR[ESUN]-1659929662872
GPR[SSUN]-1659929662872
org.apache.commons.lang.time.FastDateFormat,1114
Find no block!
GPR[SSUN]-1659929662950
org.apache.commons.lang.time.FastDateFormat,1120
========
return mStandard.length();

========
MM Copying to MM
GPR[SPVS]-1659929663476
GPR[SPVAP]-1659929663476
GPR[EPVAP]-1659929664682
GPR[EPVS]-1659929664682
========
return str.length();

========
MM Copying to MM
GPR[SPVS]-1659929664684
GPR[SPVAP]-1659929664684
GPR[EPVAP]-1659929665447
GPR[EPVS]-1659929665447
========
return Math.max(mValue.length(),mDaylight.length());

========
MM Copying to MM
GPR[SPVS]-1659929665448
GPR[SPVAP]-1659929665448
GPR[EPVAP]-1659929666158
GPR[EPVS]-1659929666158
========
return mStandard.substring(str.length()-mMaxLengthEstimate);

========
MM Copying to MM
GPR[SPVS]-1659929666160
GPR[SPVAP]-1659929666160
GPR[EPVAP]-1659929666869
GPR[EPVS]-1659929666869
========
return mValue.substring(mMaxLengthEstimate);

========
MM Copying to MM
GPR[SPVS]-1659929666870
GPR[SPVAP]-1659929666870
GPR[EPVAP]-1659929667575
GPR[EPVS]-1659929667575
========
return s.length();

========
MM Copying to MM
GPR[SPVS]-1659929667576
GPR[SPVAP]-1659929667576
GPR[EPVAP]-1659929668285
GPR[EPVS]-1659929668285
========
return mStandard.substring(0,str.length()-mValue.length());

========
MM Copying to MM
GPR[SPVS]-1659929668286
GPR[SPVAP]-1659929668286
GPR[EPVAP]-1659929669001
GPR[EPVS]-1659929669001
========
return mValue.substring(mMaxLengthEstimate+mStandard.length());

========
MM Copying to MM
GPR[SPVS]-1659929669002
GPR[SPVAP]-1659929669002
GPR[EPVAP]-1659929669707
GPR[EPVS]-1659929669707
========
return mValue.substring(0,mMaxLengthEstimate);

========
MM Copying to MM
GPR[SPVS]-1659929669709
GPR[SPVAP]-1659929669709
GPR[EPVAP]-1659929670441
GPR[EPVS]-1659929670441
========
return mValue.regionMatches(mColon,mMaxLengthEstimate,mStandard,0,suffix.length());

========
MM Copying to MM
GPR[SPVS]-1659929670442
GPR[SPVAP]-1659929670442
GPR[EPVAP]-1659929671151
GPR[EPVS]-1659929671151
========
return mStandard.substring(mMaxLengthEstimate+mValue.length());

========
MM Copying to MM
GPR[SPVS]-1659929671152
GPR[SPVAP]-1659929671152
GPR[EPVAP]-1659929671892
GPR[EPVS]-1659929671892
========
return mValue.substring(0,mMaxLengthEstimate+mStandard.length());

========
MM Copying to MM
GPR[SPVS]-1659929671894
GPR[SPVAP]-1659929671894
GPR[EPVAP]-1659929672605
GPR[EPVS]-1659929672605
========
return mValue.substring(mMaxLengthEstimate+mStandard.length(),mMaxLengthEstimate);

========
MM Copying to MM
GPR[SPVS]-1659929672607
GPR[SPVAP]-1659929672607
GPR[EPVAP]-1659929673319
GPR[EPVS]-1659929673319
========
return mValue.substring(mStandard.length());

========
MM Copying to MM
GPR[SPVS]-1659929673321
GPR[SPVAP]-1659929673321
GPR[EPVAP]-1659929674055
GPR[EPVS]-1659929674055
========
return mValue.substring(mMaxLengthEstimate,pos+mMaxLengthEstimate);

========
MM Copying to MM
GPR[SPVS]-1659929674068
GPR[SPVAP]-1659929674068
GPR[EPVAP]-1659929674780
GPR[EPVS]-1659929674780
========
return JAVA_VERSION.substring(mMaxLengthEstimate);

========
MM Copying to MM
GPR[SPVS]-1659929674782
GPR[SPVAP]-1659929674782
GPR[EPVAP]-1659929675529
GPR[EPVS]-1659929675529
========
return JAVA_VERSION.length();

========
MM Copying to MM
GPR[SPVS]-1659929675531
GPR[SPVAP]-1659929675531
GPR[EPVAP]-1659929676244
GPR[EPVS]-1659929676244
========
return pattern.length();

========
MM Copying to MM
GPR[SPVS]-1659929676246
GPR[SPVAP]-1659929676246
GPR[EPVAP]-1659929676947
GPR[EPVS]-1659929676947
========
return new StringBuffer(mMaxLengthEstimate+mValue.length()-mMaxLengthEstimate+1).append(mStandard.substring(0,start)).append(overlay).append(text.substring(end)).toString();

========
MM Copying to MM
GPR[SPVS]-1659929676949
GPR[SPVAP]-1659929676949
GPR[EPVAP]-1659929677661
GPR[EPVS]-1659929677661
========
return new StringBuffer(mMaxLengthEstimate+mMaxLengthEstimate-mMaxLengthEstimate+mStandard.length()+1).append(mValue.substring(0,start)).append(overlay).append(str.substring(end)).toString();

========
MM Copying to MM
GPR[SPVS]-1659929677662
GPR[SPVAP]-1659929677662
GPR[EPVAP]-1659929678366
GPR[EPVS]-1659929678366
========
return mValue.substring(mMaxLengthEstimate,offset+mMaxLengthEstimate);

========
MM Copying to MM
GPR[SPVS]-1659929678368
GPR[SPVAP]-1659929678368
GPR[EPVAP]-1659929679072
GPR[EPVS]-1659929679072
========
return source.length();

========
MM Copying to MM
GPR[SPVS]-1659929679073
GPR[SPVAP]-1659929679073
GPR[EPVAP]-1659929679780
GPR[EPVS]-1659929679780
GPR[ESUN]-1659929679781
GPR[SSUN]-1659929679781
org.apache.commons.lang.time.FastDateFormat,1145
Find no block!
GPR[SSUN]-1659929679862
org.apache.commons.lang.time.FastDateFormat,1146
========
if(mMaxLengthEstimate<3){
throw new IllegalArgumentException();
}
mField=field;
mValues=values;

========
MM Copying to MM
GPR[SPVS]-1659929680199
GPR[SPVAP]-1659929680199
GPR[EPVAP]-1659929681402
GPR[EPVS]-1659929681402
========
mField=len;
mValues=values;

========
MM Copying to MM
GPR[SPVS]-1659929681403
GPR[SPVAP]-1659929681403
GPR[EPVAP]-1659929682169
GPR[EPVS]-1659929682169
GPR[ESUN]-1659929682169
GPR[SSUN]-1659929682169
org.apache.commons.lang.time.FastDateFormat,1147
GPR[ESUN]-1659929682238
GPR[SSUN]-1659929682238
org.apache.commons.lang.time.FastDateFormat,1148
Find no block!
GPR[SSUN]-1659929682293
org.apache.commons.lang.time.FastDateFormat,1154
========
if(max>len){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929682686
GPR[SPVAP]-1659929682686
GPR[EPVAP]-1659929685833
GPR[SPVATF]-1659929685833
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929686801
GPR[EPVS]-1659929686801
========
if(len>size){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929686803
GPR[SPVAP]-1659929686803
GPR[EPVAP]-1659929687519
GPR[EPVS]-1659929687519
========
if(len>pos){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929687520
GPR[SPVAP]-1659929687521
GPR[EPVAP]-1659929688218
GPR[EPVS]-1659929688218
========
if(len>length){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929688220
GPR[SPVAP]-1659929688220
GPR[EPVAP]-1659929688922
GPR[EPVS]-1659929688922
========
if(max+chars.length>len){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929688924
GPR[SPVAP]-1659929688924
GPR[EPVAP]-1659929689617
GPR[EPVS]-1659929689617
========
if(max+chars.length>max){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929689618
GPR[SPVAP]-1659929689618
GPR[EPVAP]-1659929690313
GPR[EPVS]-1659929690313
========
if(len>bufferEnd){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929690314
GPR[SPVAP]-1659929690314
GPR[EPVAP]-1659929691045
GPR[EPVS]-1659929691045
========
if(array[j]>max){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929691046
GPR[SPVAP]-1659929691046
GPR[EPVAP]-1659929691777
GPR[EPVS]-1659929691777
========
if(mStandard==null){
overlay=EMPTY;
}
if(len>max){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929691778
GPR[SPVAP]-1659929691778
GPR[EPVAP]-1659929692481
GPR[EPVS]-1659929692481
========
mMaxLengthEstimate=validateRange(max,endIndex);
if(len>max){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929692482
GPR[SPVAP]-1659929692482
GPR[EPVAP]-1659929693188
GPR[EPVS]-1659929693188
========
if(len>startIndex){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929693190
GPR[SPVAP]-1659929693190
GPR[EPVAP]-1659929693891
GPR[EPVS]-1659929693891
========
if(len>number1){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929693893
GPR[SPVAP]-1659929693893
GPR[EPVAP]-1659929694598
GPR[EPVS]-1659929694598
========
if(len>max){
this.min=mMaxLengthEstimate;
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929694600
GPR[SPVAP]-1659929694600
GPR[EPVAP]-1659929695317
GPR[EPVS]-1659929695317
========
if(len>max){
this.min=len;
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929695318
GPR[SPVAP]-1659929695318
GPR[EPVAP]-1659929696016
GPR[EPVS]-1659929696016
========
mMaxLengthEstimate=validateRange(mMaxLengthEstimate,endIndex);
if(len>max){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929696018
GPR[SPVAP]-1659929696018
GPR[EPVAP]-1659929696715
GPR[EPVS]-1659929696715
========
if(len instanceof IntRange==false){
return false;
}
if(len>max){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929696716
GPR[SPVAP]-1659929696716
GPR[EPVAP]-1659929697421
GPR[EPVS]-1659929697421
========
if(len>max){
ensureCapacity(length()+len);
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929697423
GPR[SPVAP]-1659929697423
GPR[EPVAP]-1659929698126
GPR[EPVS]-1659929698126
========
if(len>max){
System.arraycopy(str.buffer,0,buffer,length(),len);
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929698127
GPR[SPVAP]-1659929698127
GPR[EPVAP]-1659929698844
GPR[EPVS]-1659929698844
========
if(len>max){
ensureCapacity(length()+len);
System.arraycopy(str.buffer,0,buffer,length(),len);

max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929698846
GPR[SPVAP]-1659929698846
GPR[EPVAP]-1659929699563
GPR[EPVS]-1659929699563
========
deleteImpl(mMaxLengthEstimate,mMaxLengthEstimate,mMaxLengthEstimate-mMaxLengthEstimate);
if(len>max){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929699565
GPR[SPVAP]-1659929699565
GPR[EPVAP]-1659929700272
GPR[EPVS]-1659929700272
========
if(mStandard==null){
return null;
}
if(len>max){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929700273
GPR[SPVAP]-1659929700273
GPR[EPVAP]-1659929700993
GPR[EPVS]-1659929700993
========
if(mStandard==null){
return false;
}
if(len>max){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929700998
GPR[SPVAP]-1659929700998
GPR[EPVAP]-1659929701697
GPR[EPVS]-1659929701697
========
if(len>max){
ensureCapacity(max+len);
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929701699
GPR[SPVAP]-1659929701699
GPR[EPVAP]-1659929702397
GPR[EPVS]-1659929702397
========
if(len>sepLen){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929702399
GPR[SPVAP]-1659929702399
GPR[EPVAP]-1659929703099
GPR[EPVS]-1659929703099
========
if(len>off){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929703101
GPR[SPVAP]-1659929703101
GPR[EPVAP]-1659929703803
GPR[EPVS]-1659929703803
========
if(len>=max){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929703805
GPR[SPVAP]-1659929703805
GPR[EPVAP]-1659929704966
GPR[SPVATF]-1659929704966
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929705877
GPR[EPVS]-1659929705877
========
if(max+len>max){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929705879
GPR[SPVAP]-1659929705879
GPR[EPVAP]-1659929707031
GPR[SPVATF]-1659929707031
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929707954
GPR[EPVS]-1659929707954
========
if(max+len>=max){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929707956
GPR[SPVAP]-1659929707956
GPR[EPVAP]-1659929709138
GPR[SPVATF]-1659929709139
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929710065
GPR[EPVS]-1659929710065
========
if(max>mMaxLengthEstimate){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929710067
GPR[SPVAP]-1659929710067
GPR[EPVAP]-1659929710759
GPR[EPVS]-1659929710759
========
if(len>mMaxLengthEstimate){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929710761
GPR[SPVAP]-1659929710761
GPR[EPVAP]-1659929711455
GPR[EPVS]-1659929711455
========
if(len>end){
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929711457
GPR[SPVAP]-1659929711457
GPR[EPVAP]-1659929712153
GPR[EPVS]-1659929712153
========
if(len>max){
end=max;
max=len;
}

========
MM Copying to MM
GPR[SPVS]-1659929712154
GPR[SPVAP]-1659929712154
GPR[EPVAP]-1659929712849
GPR[EPVS]-1659929712849
========
if(mStandard.length()>mStandard.length()){
return false;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929713844
GPR[SPVAP]-1659929713844
GPR[EPVAP]-1659929714549
GPR[EPVS]-1659929714549
========
if(max<0){
start=0;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929714551
GPR[SPVAP]-1659929714551
GPR[EPVAP]-1659929715249
GPR[EPVS]-1659929715249
========
if(len==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929715251
GPR[SPVAP]-1659929715251
GPR[EPVAP]-1659929715951
GPR[EPVS]-1659929715951
========
if(len==0){
return true;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929715953
GPR[SPVAP]-1659929715953
GPR[EPVAP]-1659929716680
GPR[EPVS]-1659929716680
========
for(int i=mValues.length;--i>=0;){
char len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929716683
GPR[SPVAP]-1659929716683
GPR[EPVAP]-1659929717381
GPR[EPVS]-1659929717381
========
mMaxLengthEstimate=(increase<0?0:increase);
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929717383
GPR[SPVAP]-1659929717383
GPR[EPVAP]-1659929718092
GPR[EPVS]-1659929718092
========
if(max-len<=0){
return mStandard;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929718093
GPR[SPVAP]-1659929718093
GPR[EPVAP]-1659929718791
GPR[EPVS]-1659929718791
========
if(mStandard.equals(mStandard.substring(str.length()-mStandard.length()))){
return mStandard.substring(0,str.length()-sep.length());
}else {
return str;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929718793
GPR[SPVAP]-1659929718793
GPR[EPVAP]-1659929719541
GPR[EPVS]-1659929719541
========
for(int i=mValues.length;--i>=max;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929719543
GPR[SPVAP]-1659929719543
GPR[EPVAP]-1659929720707
GPR[SPVATF]-1659929720707
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929721634
GPR[EPVS]-1659929721634
========
for(int i=mValues.length;--i>=max;){
char len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929721636
GPR[SPVAP]-1659929721636
GPR[EPVAP]-1659929722327
GPR[EPVS]-1659929722327
========
if(max==1||len==0){
return mStandard;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929722329
GPR[SPVAP]-1659929722329
GPR[EPVAP]-1659929723028
GPR[EPVS]-1659929723028
========
if(len<2){
return EMPTY;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929723030
GPR[SPVAP]-1659929723030
GPR[EPVAP]-1659929723740
GPR[EPVS]-1659929723740
========
if(len!=2&&len!=5&&len<7){
throw new IllegalArgumentException("Invalid locale format: "+mStandard);
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929723742
GPR[SPVAP]-1659929723742
GPR[EPVAP]-1659929724451
GPR[EPVS]-1659929724451
========
if((mStandard==null)||("".equals(separator))){
return split(mStandard,null,max);
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929724453
GPR[SPVAP]-1659929724453
GPR[EPVAP]-1659929725164
GPR[EPVS]-1659929725164
========
if(isEmpty(mStandard)){
return EMPTY;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929725166
GPR[SPVAP]-1659929725166
GPR[EPVAP]-1659929725859
GPR[EPVS]-1659929725859
========
if(len==-1||pos==(mStandard.length()-mStandard.length())){
return EMPTY;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929725861
GPR[SPVAP]-1659929725861
GPR[EPVAP]-1659929726597
GPR[EPVS]-1659929726597
========
for(int i=mValues.length;--i>=0;){
int len=mStandard==null?null:mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929726599
GPR[SPVAP]-1659929726599
GPR[EPVAP]-1659929727295
GPR[EPVS]-1659929727295
========
for(int i=mValues.length;--i>=0;){
replaceImpl(mMaxLengthEstimate,index+mMaxLengthEstimate,searchLen,mStandard,max);
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929727296
GPR[SPVAP]-1659929727296
GPR[EPVAP]-1659929727995
GPR[EPVS]-1659929727995
========
if(isEmpty(mStandard)){
padStr=" ";
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929727997
GPR[SPVAP]-1659929727997
GPR[EPVAP]-1659929728700
GPR[EPVS]-1659929728700
========
for(int i=mValues.length;--i>=len;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929728701
GPR[SPVAP]-1659929728701
GPR[EPVAP]-1659929729395
GPR[EPVS]-1659929729395
========
if(max<1){
wrapLength=1;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929729397
GPR[SPVAP]-1659929729397
GPR[EPVAP]-1659929730093
GPR[EPVS]-1659929730093
========
for(int i=mValues.length;--i>=0;){
if(i==0){
parser=new SimpleDateFormat(mValues[0]);
}
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929730094
GPR[SPVAP]-1659929730094
GPR[EPVAP]-1659929730801
GPR[EPVS]-1659929730801
========
mStandard=str.toLowerCase();
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929730803
GPR[SPVAP]-1659929730803
GPR[EPVAP]-1659929731500
GPR[EPVS]-1659929731500
========
if(mStandard==null){
return ;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929731502
GPR[SPVAP]-1659929731502
GPR[EPVAP]-1659929732221
GPR[EPVS]-1659929732221
========
max=mStandard.length();
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929732223
GPR[SPVAP]-1659929732223
GPR[EPVAP]-1659929732917
GPR[EPVS]-1659929732917
========
if(len==CharUtils.LF){
if(mStandard.charAt(mStandard.length()-1-1)==CharUtils.CR){
lastIdx--;
}
}else {
lastIdx++;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929732920
GPR[SPVAP]-1659929732920
GPR[EPVAP]-1659929733635
GPR[EPVS]-1659929733635
========
for(int i=delimiters.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929733637
GPR[SPVAP]-1659929733637
GPR[EPVAP]-1659929734342
GPR[EPVS]-1659929734342
========
mStandard=strip(str,null);
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929734344
GPR[SPVAP]-1659929734344
GPR[EPVAP]-1659929735047
GPR[EPVS]-1659929735047
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>min){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929735049
GPR[SPVAP]-1659929735049
GPR[EPVAP]-1659929735757
GPR[EPVS]-1659929735757
========
checkTokenized();
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929735759
GPR[SPVAP]-1659929735759
GPR[EPVAP]-1659929736454
GPR[EPVS]-1659929736454
========
for(int i=tab.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929736456
GPR[SPVAP]-1659929736456
GPR[EPVAP]-1659929737149
GPR[EPVS]-1659929737149
========
for(int i=mValues.length;--i>0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929737150
GPR[SPVAP]-1659929737150
GPR[EPVAP]-1659929738323
GPR[SPVATF]-1659929738323
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929739247
GPR[EPVS]-1659929739247
========
for(int i=mValues.length;i-->=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929739249
GPR[SPVAP]-1659929739249
GPR[EPVAP]-1659929740409
GPR[SPVATF]-1659929740409
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929741346
GPR[EPVS]-1659929741346
========
for(int i=mValues.length;i-->0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929741347
GPR[SPVAP]-1659929741347
GPR[EPVAP]-1659929742513
GPR[SPVATF]-1659929742513
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929743441
GPR[EPVS]-1659929743441
========
if(len==1){
return indexOf(mStandard.charAt(0),mMaxLengthEstimate);
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929743443
GPR[SPVAP]-1659929743443
GPR[EPVAP]-1659929744152
GPR[EPVS]-1659929744152
========
for(int i=CAUSE_METHOD_NAMES.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929744154
GPR[SPVAP]-1659929744154
GPR[EPVAP]-1659929744844
GPR[EPVS]-1659929744844
========
for(int i=mValues.length;i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929744846
GPR[SPVAP]-1659929744846
GPR[EPVAP]-1659929746015
GPR[SPVATF]-1659929746015
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929746941
GPR[EPVS]-1659929746941
========
for(int i=mValues.length;--i>=0;){
roundUp=len>((max-mMaxLengthEstimate)/2);
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929746944
GPR[SPVAP]-1659929746944
GPR[EPVAP]-1659929747645
GPR[EPVS]-1659929747645
========
if(mStandard==null){
return EMPTY;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929747647
GPR[SPVAP]-1659929747647
GPR[EPVAP]-1659929748344
GPR[EPVS]-1659929748344
========
if(len==-1){
return EMPTY;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929748346
GPR[SPVAP]-1659929748346
GPR[EPVAP]-1659929749069
GPR[EPVS]-1659929749069
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>value){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929749071
GPR[SPVAP]-1659929749071
GPR[EPVAP]-1659929749776
GPR[EPVS]-1659929749776
========
mMaxLengthEstimate=validateRange(mMaxLengthEstimate,endIndex);
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929749779
GPR[SPVAP]-1659929749779
GPR[EPVAP]-1659929750519
GPR[EPVS]-1659929750519
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
break;
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929750522
GPR[SPVAP]-1659929750522
GPR[EPVAP]-1659929751226
GPR[EPVS]-1659929751226
========
for(int i=mValues.length;--i>=0;){
if(len==TRIGGER_END){
break;
}
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929751228
GPR[SPVAP]-1659929751228
GPR[EPVAP]-1659929751924
GPR[EPVS]-1659929751924
========
if(len<=0){
return mStandard;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929751926
GPR[SPVAP]-1659929751926
GPR[EPVAP]-1659929752630
GPR[EPVS]-1659929752630
========
for(int i=mValues.length;--i>=builder.comparison;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929752632
GPR[SPVAP]-1659929752632
GPR[EPVAP]-1659929753335
GPR[EPVS]-1659929753335
========
for(int i=mValues.length;--i>=mMaxLengthEstimate;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929753337
GPR[SPVAP]-1659929753337
GPR[EPVAP]-1659929754039
GPR[EPVS]-1659929754039
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>ret){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929754041
GPR[SPVAP]-1659929754041
GPR[EPVAP]-1659929754750
GPR[EPVS]-1659929754750
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(mValues[i]==null){
continue;
}
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929754752
GPR[SPVAP]-1659929754752
GPR[EPVAP]-1659929755919
GPR[SPVATF]-1659929755919
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929756865
GPR[EPVS]-1659929756865
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
tmp=mStandard.lastIndexOf(mValues[i]);
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929756867
GPR[SPVAP]-1659929756867
GPR[EPVAP]-1659929757587
GPR[EPVS]-1659929757587
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(mValues[i]==null){
continue;
}
tmp=mStandard.lastIndexOf(mValues[i]);

if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929757589
GPR[SPVAP]-1659929757589
GPR[EPVAP]-1659929758285
GPR[EPVS]-1659929758285
========
max=length;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929758286
GPR[SPVAP]-1659929758286
GPR[EPVAP]-1659929758992
GPR[EPVS]-1659929758992
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>i){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929758994
GPR[SPVAP]-1659929758994
GPR[EPVAP]-1659929760197
GPR[SPVATF]-1659929760197
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929761126
GPR[EPVS]-1659929761126
========
for(int i=mValues.length;--i>=0;){
ch=chrs[i];
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929761128
GPR[SPVAP]-1659929761128
GPR[EPVAP]-1659929761819
GPR[EPVS]-1659929761819
========
for(int i=mValues.length;--i>=0;){
lastChar=len;
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929761821
GPR[SPVAP]-1659929761821
GPR[EPVAP]-1659929762525
GPR[EPVS]-1659929762526
========
for(int i=mValues.length;--i>=0;){
ch=chrs[i];
lastChar=len;

int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929762527
GPR[SPVAP]-1659929762527
GPR[EPVAP]-1659929763224
GPR[EPVS]-1659929763224
========
for(int i=mValues.length;--i>=mMaxLengthEstimate;){
int len=mValues[i].length();
if(len>i){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929763226
GPR[SPVAP]-1659929763226
GPR[EPVAP]-1659929763929
GPR[EPVS]-1659929763929
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
tmp=mStandard.indexOf(mValues[i]);
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929763932
GPR[SPVAP]-1659929763932
GPR[EPVAP]-1659929764649
GPR[EPVS]-1659929764649
========
for(int i=mValues.length;--i>=0;){
if(len<max){
ret=len;
}
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929764650
GPR[SPVAP]-1659929764650
GPR[EPVAP]-1659929765355
GPR[EPVS]-1659929765355
========
for(int i=mValues.length;--i>=0;){
if(mValues[i]==null){
continue;
}
tmp=mStandard.indexOf(mValues[i]);
if(len<max){
ret=len;
}

int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929765357
GPR[SPVAP]-1659929765357
GPR[EPVAP]-1659929766069
GPR[EPVS]-1659929766069
========
for(int i=mValues.length;--i>=mMaxLengthEstimate;){
int len=mValues[i].length();
if(mValues[i]==null){
continue;
}
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929766071
GPR[SPVAP]-1659929766071
GPR[EPVAP]-1659929766794
GPR[EPVS]-1659929766794
========
max+=len;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929766810
GPR[SPVAP]-1659929766810
GPR[EPVAP]-1659929767553
GPR[EPVS]-1659929767553
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(mMaxLengthEstimate>len){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929767556
GPR[SPVAP]-1659929767556
GPR[EPVAP]-1659929768271
GPR[EPVS]-1659929768271
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(mMaxLengthEstimate>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929768272
GPR[SPVAP]-1659929768272
GPR[EPVAP]-1659929768968
GPR[EPVS]-1659929768968
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>withMax){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929768970
GPR[SPVAP]-1659929768970
GPR[EPVAP]-1659929769667
GPR[EPVS]-1659929769667
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>replaceCharsLength){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929769669
GPR[SPVAP]-1659929769669
GPR[EPVAP]-1659929770365
GPR[EPVS]-1659929770365
========
for(int i=mValues.length;--i>=0;){
inUnicode=false;
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929770368
GPR[SPVAP]-1659929770368
GPR[EPVAP]-1659929771073
GPR[EPVS]-1659929771073
========
for(int i=mValues.length;--i>=0;){
hadSlash=false;
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929771075
GPR[SPVAP]-1659929771075
GPR[EPVAP]-1659929771785
GPR[EPVS]-1659929771785
========
for(int i=mValues.length;--i>=0;){
inUnicode=false;
hadSlash=false;

int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929771787
GPR[SPVAP]-1659929771787
GPR[EPVAP]-1659929772488
GPR[EPVS]-1659929772488
========
if(len==-1){
return StringUtils.EMPTY;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929772490
GPR[SPVAP]-1659929772490
GPR[EPVAP]-1659929773194
GPR[EPVS]-1659929773194
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>field){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929773196
GPR[SPVAP]-1659929773196
GPR[EPVAP]-1659929773896
GPR[EPVS]-1659929773896
========
this.i=length;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929773898
GPR[SPVAP]-1659929773898
GPR[EPVAP]-1659929774597
GPR[EPVS]-1659929774597
========
this.max=mMaxLengthEstimate;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929774598
GPR[SPVAP]-1659929774598
GPR[EPVAP]-1659929775294
GPR[EPVS]-1659929775294
========
this.i=mMaxLengthEstimate;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929775296
GPR[SPVAP]-1659929775296
GPR[EPVAP]-1659929776000
GPR[EPVS]-1659929776000
========
this.max=length;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929776002
GPR[SPVAP]-1659929776002
GPR[EPVAP]-1659929776700
GPR[EPVS]-1659929776700
========
mMaxLengthEstimate--;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929776702
GPR[SPVAP]-1659929776702
GPR[EPVAP]-1659929777399
GPR[EPVS]-1659929777399
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
replaceImpl(mMaxLengthEstimate,i+len,removeLen,mStandard,mMaxLengthEstimate);
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929777401
GPR[SPVAP]-1659929777401
GPR[EPVAP]-1659929778100
GPR[EPVS]-1659929778100
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
if(mMaxLengthEstimate>0){
mMaxLengthEstimate--;
}
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929778101
GPR[SPVAP]-1659929778101
GPR[EPVAP]-1659929778829
GPR[EPVS]-1659929778829
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
replaceImpl(mMaxLengthEstimate,i+len,removeLen,mStandard,mMaxLengthEstimate);
if(mMaxLengthEstimate>0){
mMaxLengthEstimate--;
}

max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929778831
GPR[SPVAP]-1659929778831
GPR[EPVAP]-1659929779537
GPR[EPVS]-1659929779537
========
for(int i=mValues.length;len-1>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929779539
GPR[SPVAP]-1659929779539
GPR[EPVAP]-1659929780250
GPR[EPVS]-1659929780250
========
for(int i=mValues.length;--i>=0;){
ExceptionUtils.removeCommonFrames(new ArrayList(Arrays.asList(mValues)),new ArrayList(Arrays.asList(mValues)));
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929780251
GPR[SPVAP]-1659929780251
GPR[EPVAP]-1659929780957
GPR[EPVS]-1659929780957
========
for(int i=mValues.length;--i>=0;){
if(curr.length-new ArrayList(Arrays.asList(mValues)).size()>0){
new ArrayList(Arrays.asList(mValues)).add("\t... "+curr.length-new ArrayList(Arrays.asList(mValues)).size());
}
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929780959
GPR[SPVAP]-1659929780959
GPR[EPVAP]-1659929781663
GPR[EPVS]-1659929781663
========
for(int i=mValues.length;--i>=0;){
ExceptionUtils.removeCommonFrames(new ArrayList(Arrays.asList(mValues)),new ArrayList(Arrays.asList(mValues)));
if(curr.length-new ArrayList(Arrays.asList(mValues)).size()>0){
new ArrayList(Arrays.asList(mValues)).add("\t... "+curr.length-new ArrayList(Arrays.asList(mValues)).size());
}

int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929781664
GPR[SPVAP]-1659929781664
GPR[EPVAP]-1659929782374
GPR[EPVS]-1659929782374
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>count){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929782376
GPR[SPVAP]-1659929782376
GPR[EPVAP]-1659929783091
GPR[EPVS]-1659929783091
========
if(mObj1 instanceof IntRange==false){
return false;
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929783093
GPR[SPVAP]-1659929783093
GPR[EPVAP]-1659929783797
GPR[EPVS]-1659929783797
========
for(int i=mValues.length;--i>=0;){
c=mStandard.charAt(mMaxLengthEstimate);
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929783800
GPR[SPVAP]-1659929783800
GPR[EPVAP]-1659929784501
GPR[EPVS]-1659929784501
========
super();
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929784502
GPR[SPVAP]-1659929784502
GPR[EPVAP]-1659929785225
GPR[EPVS]-1659929785225
========
substitute(new StrBuilder().append(mObj1),0,buf.length());
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929785227
GPR[SPVAP]-1659929785227
GPR[EPVAP]-1659929785933
GPR[EPVS]-1659929785933
========
for(int i=mValues.length;--i>=0;){
if(!Character.isDigit(len)){
throw new IllegalArgumentException("Invalid format argument index at position "+max);
}
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929785934
GPR[SPVAP]-1659929785934
GPR[EPVAP]-1659929786636
GPR[EPVS]-1659929786636
========
len*=(max<0?16:(max>64?64:max));
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929786638
GPR[SPVAP]-1659929786638
GPR[EPVAP]-1659929787334
GPR[EPVS]-1659929787334
========
if(mStandard.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929787336
GPR[SPVAP]-1659929787336
GPR[EPVAP]-1659929788037
GPR[EPVS]-1659929788037
========
if(mStandard.startsWith("0x")||str.startsWith("-0x")){
return createInteger(str);
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929788039
GPR[SPVAP]-1659929788039
GPR[EPVAP]-1659929788741
GPR[EPVS]-1659929788741
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>hash){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929788743
GPR[SPVAP]-1659929788743
GPR[EPVAP]-1659929789444
GPR[EPVS]-1659929789444
========
for(int i=mValues.length;--i>=0;){
System.arraycopy(mValues,0,new String[Math.max(mMaxLengthEstimate,mMaxLengthEstimate+max)],0,mMaxLengthEstimate);
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929789447
GPR[SPVAP]-1659929789447
GPR[EPVAP]-1659929790156
GPR[EPVS]-1659929790156
========
for(int i=mValues.length;--i>=0;){
names=new String[Math.max(mMaxLengthEstimate,mMaxLengthEstimate+max)];
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929790157
GPR[SPVAP]-1659929790157
GPR[EPVAP]-1659929790858
GPR[EPVS]-1659929790858
========
for(int i=mValues.length;--i>=0;){
values=new int[Math.max(mMaxLengthEstimate,mMaxLengthEstimate+max)];
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929790860
GPR[SPVAP]-1659929790860
GPR[EPVAP]-1659929791557
GPR[EPVS]-1659929791557
========
for(int i=mValues.length;--i>=0;){
System.arraycopy(mValues,0,new String[Math.max(mMaxLengthEstimate,mMaxLengthEstimate+max)],0,mMaxLengthEstimate);
names=new String[Math.max(mMaxLengthEstimate,mMaxLengthEstimate+max)];
values=new int[Math.max(mMaxLengthEstimate,mMaxLengthEstimate+max)];

int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929791559
GPR[SPVAP]-1659929791559
GPR[EPVAP]-1659929792285
GPR[EPVS]-1659929792285
========
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(array[j]>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929792288
GPR[SPVAP]-1659929792288
GPR[EPVAP]-1659929792984
GPR[EPVS]-1659929792984
========
System.arraycopy(mObj1,0,mObj1,0,mMaxLengthEstimate);
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929792989
GPR[SPVAP]-1659929792989
GPR[EPVAP]-1659929793690
GPR[EPVS]-1659929793690
========
Array.set(mObj1,mMaxLengthEstimate,mObj1);
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929793691
GPR[SPVAP]-1659929793691
GPR[EPVAP]-1659929794393
GPR[EPVS]-1659929794393
========
System.arraycopy(mObj1,0,Array.newInstance(mObj1.getClass().getComponentType(),len-1),0,mMaxLengthEstimate);
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929794395
GPR[SPVAP]-1659929794395
GPR[EPVAP]-1659929795098
GPR[EPVS]-1659929795098
========
if(mMaxLengthEstimate<len-1){
System.arraycopy(mObj1,index+1,Array.newInstance(mObj1.getClass().getComponentType(),len-1),index,length-index);
}
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}

========
MM Copying to MM
GPR[SPVS]-1659929795100
GPR[SPVAP]-1659929795100
GPR[EPVAP]-1659929795812
GPR[EPVS]-1659929795812
========
if(mStandard.length()>mStandard.length()){
return false;
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929796900
GPR[SPVAP]-1659929796900
GPR[EPVAP]-1659929797595
GPR[EPVS]-1659929797595
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
break;
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929797597
GPR[SPVAP]-1659929797597
GPR[EPVAP]-1659929798317
GPR[EPVS]-1659929798317
========
int max=mMaxLengthEstimate;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929798318
GPR[SPVAP]-1659929798318
GPR[EPVAP]-1659929799033
GPR[EPVS]-1659929799033
========
int max=len;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929799034
GPR[SPVAP]-1659929799034
GPR[EPVAP]-1659929799753
GPR[EPVS]-1659929799753
========
if(max<=0){
return mStandard;
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929799754
GPR[SPVAP]-1659929799754
GPR[EPVAP]-1659929800488
GPR[EPVS]-1659929800488
========
if(mStandard.equals(mStandard.substring(str.length()-mStandard.length()))){
return mStandard.substring(0,str.length()-sep.length());
}else {
return str;
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929800490
GPR[SPVAP]-1659929800490
GPR[EPVAP]-1659929801189
GPR[EPVS]-1659929801189
========
int max=0;
for(int i=mValues.length;--i>=0;){
char len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929801191
GPR[SPVAP]-1659929801191
GPR[EPVAP]-1659929801893
GPR[EPVS]-1659929801893
========
if((mStandard==null)||("".equals(separator))){
return split(mStandard,null,max);
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929801895
GPR[SPVAP]-1659929801895
GPR[EPVAP]-1659929802588
GPR[EPVS]-1659929802588
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return EMPTY_STRING_ARRAY;

========
MM Copying to MM
GPR[SPVS]-1659929802590
GPR[SPVAP]-1659929802590
GPR[EPVAP]-1659929803289
GPR[EPVS]-1659929803289
========
if(isEmpty(mStandard)){
return EMPTY;
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929803292
GPR[SPVAP]-1659929803292
GPR[EPVAP]-1659929804010
GPR[EPVS]-1659929804010
========
if(len==-1||pos==(mStandard.length()-mStandard.length())){
return EMPTY;
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929804012
GPR[SPVAP]-1659929804012
GPR[EPVAP]-1659929804713
GPR[EPVS]-1659929804713
========
int max=mStandard==null?0:0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929804714
GPR[SPVAP]-1659929804714
GPR[EPVAP]-1659929805407
GPR[EPVS]-1659929805407
========
if(isEmpty(mStandard)){
padStr=" ";
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929805408
GPR[SPVAP]-1659929805408
GPR[EPVAP]-1659929806105
GPR[EPVS]-1659929806105
========
if(max<=0){
return mStandard;
}
int max=mMaxLengthEstimate;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929806106
GPR[SPVAP]-1659929806106
GPR[EPVAP]-1659929806804
GPR[EPVS]-1659929806804
========
if(max<=0){
return mStandard;
}
int max=len;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929806806
GPR[SPVAP]-1659929806806
GPR[EPVAP]-1659929807507
GPR[EPVS]-1659929807507
========
if(mStandard==null){
replaceChars="";
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929807509
GPR[SPVAP]-1659929807509
GPR[EPVAP]-1659929808219
GPR[EPVS]-1659929808219
========
if(len<2){
return EMPTY;
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929808221
GPR[SPVAP]-1659929808221
GPR[EPVAP]-1659929808925
GPR[EPVS]-1659929808925
========
int max=0;
for(int i=mValues.length;--i>=len;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929808926
GPR[SPVAP]-1659929808926
GPR[EPVAP]-1659929809629
GPR[EPVS]-1659929809629
========
if(max<1){
wrapLength=1;
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929809631
GPR[SPVAP]-1659929809631
GPR[EPVAP]-1659929810328
GPR[EPVS]-1659929810328
========
mStandard=str.toLowerCase();
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929810330
GPR[SPVAP]-1659929810330
GPR[EPVAP]-1659929811031
GPR[EPVS]-1659929811031
========
int max=0;
for(int i=mValues.length;--i>=0;){
if(i==0){
parser=new SimpleDateFormat(mValues[0]);
}
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929811033
GPR[SPVAP]-1659929811033
GPR[EPVAP]-1659929811721
GPR[EPVS]-1659929811721
========
if(len!=2&&len!=5&&len<7){
throw new IllegalArgumentException("Invalid locale format: "+mStandard);
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929811723
GPR[SPVAP]-1659929811723
GPR[EPVAP]-1659929812432
GPR[EPVS]-1659929812432
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return len;

========
MM Copying to MM
GPR[SPVS]-1659929812434
GPR[SPVAP]-1659929812434
GPR[EPVAP]-1659929813131
GPR[EPVS]-1659929813131
========
int max=(mObj1==null?getNullText():obj.toString()).length();
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929813133
GPR[SPVAP]-1659929813133
GPR[EPVAP]-1659929813841
GPR[EPVS]-1659929813841
========
len=validateRange(mMaxLengthEstimate,endIndex);
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929813843
GPR[SPVAP]-1659929813843
GPR[EPVAP]-1659929814543
GPR[EPVS]-1659929814543
========
replaceImpl(mMaxLengthEstimate,len,endIndex-startIndex,mStandard,(mStandard==null?0:replaceStr.length()));
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929814545
GPR[SPVAP]-1659929814545
GPR[EPVAP]-1659929815245
GPR[EPVS]-1659929815245
========
int max=0;
for(int i=mValues.length;--i>=0;){
altered=true;
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929815246
GPR[SPVAP]-1659929815246
GPR[EPVAP]-1659929815951
GPR[EPVS]-1659929815951
========
int max=0;
for(int i=mValues.length;--i>=0;){
pos+=len;
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929815952
GPR[SPVAP]-1659929815952
GPR[EPVAP]-1659929816663
GPR[EPVS]-1659929816663
========
int max=0;
for(int i=mValues.length;--i>=0;){
bufEnd+=len;
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929816665
GPR[SPVAP]-1659929816665
GPR[EPVAP]-1659929817381
GPR[EPVS]-1659929817381
========
int max=0;
for(int i=mValues.length;--i>=0;){
lengthChange+=len;
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929817382
GPR[SPVAP]-1659929817382
GPR[EPVAP]-1659929818108
GPR[EPVS]-1659929818108
========
int max=0;
for(int i=mValues.length;--i>=0;){
chars=buf.buffer;
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929818110
GPR[SPVAP]-1659929818110
GPR[EPVAP]-1659929818809
GPR[EPVS]-1659929818809
========
int max=0;
for(int i=mValues.length;--i>=0;){
altered=true;
pos+=len;
bufEnd+=len;
lengthChange+=len;
chars=buf.buffer;

int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929818810
GPR[SPVAP]-1659929818810
GPR[EPVAP]-1659929819521
GPR[EPVS]-1659929819521
========
int max=0;
max=(increase<0?0:increase);
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929819522
GPR[SPVAP]-1659929819522
GPR[EPVAP]-1659929820222
GPR[EPVS]-1659929820222
========
int max=0;
max*=(max<0?16:(max>64?64:max));
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929820223
GPR[SPVAP]-1659929820223
GPR[EPVAP]-1659929821412
GPR[SPVATF]-1659929821412
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929822334
GPR[EPVS]-1659929822334
========
int max=mMaxLengthEstimate;
max*=(max<0?16:(max>64?64:max));
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929822336
GPR[SPVAP]-1659929822336
GPR[EPVAP]-1659929823033
GPR[EPVS]-1659929823033
========
int max=0;
for(int i=mValues.length;--i>=mMaxLengthEstimate;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929823035
GPR[SPVAP]-1659929823035
GPR[EPVAP]-1659929823732
GPR[EPVS]-1659929823732
========
mStandard=strip(str,null);
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929823734
GPR[SPVAP]-1659929823734
GPR[EPVAP]-1659929824443
GPR[EPVS]-1659929824443
========
int max=0;
for(int i=mValues.length;--i>=0;){
roundUp=len>((max-mMaxLengthEstimate)/2);
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929824445
GPR[SPVAP]-1659929824445
GPR[EPVAP]-1659929825148
GPR[EPVS]-1659929825148
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return startIndex;

========
MM Copying to MM
GPR[SPVS]-1659929825151
GPR[SPVAP]-1659929825151
GPR[EPVAP]-1659929825857
GPR[EPVS]-1659929825857
========
int max=0;
max=(startIndex<0?0:startIndex);
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929825858
GPR[SPVAP]-1659929825858
GPR[EPVAP]-1659929826557
GPR[EPVS]-1659929826557
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
if(len==1){
return indexOf(mStandard.charAt(0),max);
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929826559
GPR[SPVAP]-1659929826559
GPR[EPVAP]-1659929827265
GPR[EPVS]-1659929827265
========
if(mMaxLengthEstimate<=0){
return EMPTY;
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929827267
GPR[SPVAP]-1659929827267
GPR[EPVAP]-1659929827973
GPR[EPVS]-1659929827973
========
if(mMaxLengthEstimate==1||len==0){
return mStandard;
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929827975
GPR[SPVAP]-1659929827975
GPR[EPVAP]-1659929828676
GPR[EPVS]-1659929828676
========
if(len==1&&mMaxLengthEstimate<=PAD_LIMIT){
return padding(repeat,mStandard.charAt(0));
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929828678
GPR[SPVAP]-1659929828678
GPR[EPVAP]-1659929829389
GPR[EPVS]-1659929829389
========
int max=0;
for(int i=delimiters.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929829391
GPR[SPVAP]-1659929829391
GPR[EPVAP]-1659929830093
GPR[EPVS]-1659929830093
========
int max=0;
for(int i=tab.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929830096
GPR[SPVAP]-1659929830096
GPR[EPVAP]-1659929830819
GPR[EPVS]-1659929830819
========
int max=0;
for(int i=mValues.length;--i>0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929830820
GPR[SPVAP]-1659929830820
GPR[EPVAP]-1659929831994
GPR[SPVATF]-1659929831994
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929832923
GPR[EPVS]-1659929832923
========
int max=0;
for(int i=mValues.length;i-->=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929832925
GPR[SPVAP]-1659929832925
GPR[EPVAP]-1659929834074
GPR[SPVATF]-1659929834074
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929834996
GPR[EPVS]-1659929834996
========
int max=0;
for(int i=mValues.length;i-->0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929834998
GPR[SPVAP]-1659929834998
GPR[EPVAP]-1659929836165
GPR[SPVATF]-1659929836165
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929837081
GPR[EPVS]-1659929837081
========
int max=max;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929837083
GPR[SPVAP]-1659929837083
GPR[EPVAP]-1659929837794
GPR[EPVS]-1659929837794
========
int max=0;
checkTokenized();
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929837796
GPR[SPVAP]-1659929837796
GPR[EPVAP]-1659929838527
GPR[EPVS]-1659929838527
========
if(len==CharUtils.LF){
if(mStandard.charAt(mStandard.length()-1-1)==CharUtils.CR){
lastIdx--;
}
}else {
lastIdx++;
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929838529
GPR[SPVAP]-1659929838529
GPR[EPVAP]-1659929839232
GPR[EPVS]-1659929839233
========
int max=0;
for(int i=CAUSE_METHOD_NAMES.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929839235
GPR[SPVAP]-1659929839235
GPR[EPVAP]-1659929839944
GPR[EPVS]-1659929839944
========
if(mStandard==null){
return EMPTY;
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929839946
GPR[SPVAP]-1659929839946
GPR[EPVAP]-1659929840647
GPR[EPVS]-1659929840647
========
if(len==-1){
return EMPTY;
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929840648
GPR[SPVAP]-1659929840648
GPR[EPVAP]-1659929841345
GPR[EPVS]-1659929841345
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return min;

========
MM Copying to MM
GPR[SPVS]-1659929841347
GPR[SPVAP]-1659929841347
GPR[EPVAP]-1659929842042
GPR[EPVS]-1659929842042
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
if(mObj1 instanceof IntRange==false){
return false;
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929842044
GPR[SPVAP]-1659929842044
GPR[EPVAP]-1659929842749
GPR[EPVS]-1659929842749
========
if(mStandard==null){
return ;
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929842751
GPR[SPVAP]-1659929842751
GPR[EPVAP]-1659929843452
GPR[EPVS]-1659929843452
========
int max=0;
super();
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929843455
GPR[SPVAP]-1659929843455
GPR[EPVAP]-1659929844151
GPR[EPVS]-1659929844151
========
if(len<=0){
return mStandard;
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929844153
GPR[SPVAP]-1659929844153
GPR[EPVAP]-1659929844853
GPR[EPVS]-1659929844853
========
if(len<=0){
return mStandard;
}
int max=mMaxLengthEstimate;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929844854
GPR[SPVAP]-1659929844854
GPR[EPVAP]-1659929845564
GPR[EPVS]-1659929845564
========
int max=0;
for(int i=mValues.length;--i>=0;){
if(len==TRIGGER_END){
break;
}
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929845567
GPR[SPVAP]-1659929845567
GPR[EPVAP]-1659929846276
GPR[EPVS]-1659929846276
========
int max=0;
for(int i=mValues.length;i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929846278
GPR[SPVAP]-1659929846278
GPR[EPVAP]-1659929847448
GPR[SPVATF]-1659929847448
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929848373
GPR[EPVS]-1659929848373
========
max=validateRange(mMaxLengthEstimate,endIndex);
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929848375
GPR[SPVAP]-1659929848375
GPR[EPVAP]-1659929849072
GPR[EPVS]-1659929849072
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return count;

========
MM Copying to MM
GPR[SPVS]-1659929849074
GPR[SPVAP]-1659929849074
GPR[EPVAP]-1659929849787
GPR[EPVS]-1659929849787
========
int max=0;
for(int i=mValues.length;--i>=builder.comparison;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929849790
GPR[SPVAP]-1659929849790
GPR[EPVAP]-1659929850502
GPR[EPVS]-1659929850502
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>ret){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929850511
GPR[SPVAP]-1659929850511
GPR[EPVAP]-1659929851215
GPR[EPVS]-1659929851215
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(mValues[i]==null){
continue;
}
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929851216
GPR[SPVAP]-1659929851216
GPR[EPVAP]-1659929852382
GPR[SPVATF]-1659929852382
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929853301
GPR[EPVS]-1659929853301
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
tmp=mStandard.lastIndexOf(mValues[i]);
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929853302
GPR[SPVAP]-1659929853302
GPR[EPVAP]-1659929853997
GPR[EPVS]-1659929853997
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(mValues[i]==null){
continue;
}
tmp=mStandard.lastIndexOf(mValues[i]);

if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929853999
GPR[SPVAP]-1659929853999
GPR[EPVAP]-1659929854701
GPR[EPVS]-1659929854701
========
int max=0;
for(int i=mValues.length;--i>=mMaxLengthEstimate;){
int len=mValues[i].length();
if(mValues[i]==null){
continue;
}
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929854702
GPR[SPVAP]-1659929854702
GPR[EPVAP]-1659929855403
GPR[EPVS]-1659929855403
========
int max=0;
validateIndex(mMaxLengthEstimate);
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929855405
GPR[SPVAP]-1659929855405
GPR[EPVAP]-1659929856117
GPR[EPVS]-1659929856117
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>i){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929856118
GPR[SPVAP]-1659929856118
GPR[EPVAP]-1659929857285
GPR[SPVATF]-1659929857285
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929858214
GPR[EPVS]-1659929858214
========
int max=0;
for(int i=mValues.length;--i>=0;){
ch=chrs[i];
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929858215
GPR[SPVAP]-1659929858215
GPR[EPVAP]-1659929858926
GPR[EPVS]-1659929858926
========
int max=0;
for(int i=mValues.length;--i>=0;){
lastChar=len;
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929858928
GPR[SPVAP]-1659929858928
GPR[EPVAP]-1659929859635
GPR[EPVS]-1659929859635
========
int max=0;
for(int i=mValues.length;--i>=0;){
ch=chrs[i];
lastChar=len;

int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929859637
GPR[SPVAP]-1659929859637
GPR[EPVAP]-1659929860333
GPR[EPVS]-1659929860333
========
int max=0;
for(int i=mValues.length;--i>=mMaxLengthEstimate;){
int len=mValues[i].length();
if(len>i){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929860334
GPR[SPVAP]-1659929860334
GPR[EPVAP]-1659929861035
GPR[EPVS]-1659929861035
========
max=validateRange(mMaxLengthEstimate,endIndex);
int max=max;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929861037
GPR[SPVAP]-1659929861037
GPR[EPVAP]-1659929861739
GPR[EPVS]-1659929861739
========
max=validateRange(mMaxLengthEstimate,endIndex);
int max=mMaxLengthEstimate;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929861740
GPR[SPVAP]-1659929861740
GPR[EPVAP]-1659929862447
GPR[EPVS]-1659929862447
========
i=length;
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929862448
GPR[SPVAP]-1659929862448
GPR[EPVAP]-1659929863146
GPR[EPVS]-1659929863146
========
int max=0;
for(int i=mValues.length;--i>=mMaxLengthEstimate;){
char len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929863148
GPR[SPVAP]-1659929863148
GPR[EPVAP]-1659929863855
GPR[EPVS]-1659929863855
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
tmp=mStandard.indexOf(mValues[i]);
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929863857
GPR[SPVAP]-1659929863857
GPR[EPVAP]-1659929864560
GPR[EPVS]-1659929864560
========
int max=0;
for(int i=mValues.length;--i>=0;){
if(len<max){
ret=len;
}
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929864561
GPR[SPVAP]-1659929864561
GPR[EPVAP]-1659929865267
GPR[EPVS]-1659929865267
========
int max=0;
for(int i=mValues.length;--i>=0;){
if(mValues[i]==null){
continue;
}
tmp=mStandard.indexOf(mValues[i]);
if(len<max){
ret=len;
}

int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929865269
GPR[SPVAP]-1659929865269
GPR[EPVAP]-1659929865965
GPR[EPVS]-1659929865965
========
int max=0;
for(int i=mValues.length;--i>=0;){
inUnicode=false;
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929865967
GPR[SPVAP]-1659929865967
GPR[EPVAP]-1659929866685
GPR[EPVS]-1659929866685
========
int max=0;
for(int i=mValues.length;--i>=0;){
hadSlash=false;
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929866687
GPR[SPVAP]-1659929866687
GPR[EPVAP]-1659929867385
GPR[EPVS]-1659929867385
========
int max=0;
for(int i=mValues.length;--i>=0;){
inUnicode=false;
hadSlash=false;

int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929867387
GPR[SPVAP]-1659929867387
GPR[EPVAP]-1659929868085
GPR[EPVS]-1659929868085
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return EMPTY;

========
MM Copying to MM
GPR[SPVS]-1659929868087
GPR[SPVAP]-1659929868087
GPR[EPVAP]-1659929868808
GPR[EPVS]-1659929868808
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>=max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929868810
GPR[SPVAP]-1659929868810
GPR[EPVAP]-1659929869989
GPR[SPVATF]-1659929869989
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929870920
GPR[EPVS]-1659929870920
========
int max=0;
for(int i=mValues.length;--i>=0;){
char len=mValues[i].length();
if(len>=max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929870922
GPR[SPVAP]-1659929870922
GPR[EPVAP]-1659929871616
GPR[EPVS]-1659929871616
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
if(mMaxLengthEstimate+len>size()){
len=this.size()-pos;
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929871618
GPR[SPVAP]-1659929871618
GPR[EPVAP]-1659929872329
GPR[EPVS]-1659929872329
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
mMaxLengthEstimate+=len;
return max;

========
MM Copying to MM
GPR[SPVS]-1659929872331
GPR[SPVAP]-1659929872331
GPR[EPVAP]-1659929873031
GPR[EPVS]-1659929873031
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>field){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929873033
GPR[SPVAP]-1659929873033
GPR[EPVAP]-1659929873751
GPR[EPVS]-1659929873751
========
mMaxLengthEstimate--;
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929873753
GPR[SPVAP]-1659929873753
GPR[EPVAP]-1659929874452
GPR[EPVS]-1659929874452
========
substitute(new StrBuilder().append(mObj1),0,buf.length());
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929874455
GPR[SPVAP]-1659929874455
GPR[EPVAP]-1659929875173
GPR[EPVS]-1659929875173
========
int max=0;
for(int i=mValues.length;len-1>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929875174
GPR[SPVAP]-1659929875174
GPR[EPVAP]-1659929875879
GPR[EPVS]-1659929875879
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
ExceptionUtils.removeCommonFrames(new ArrayList(Arrays.asList(mValues)),new ArrayList(Arrays.asList(mValues)));
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929875880
GPR[SPVAP]-1659929875880
GPR[EPVAP]-1659929876589
GPR[EPVS]-1659929876589
========
if(mStandard.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929876591
GPR[SPVAP]-1659929876591
GPR[EPVAP]-1659929877293
GPR[EPVS]-1659929877293
========
if(mStandard.startsWith("0x")||str.startsWith("-0x")){
return createInteger(str);
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929877294
GPR[SPVAP]-1659929877294
GPR[EPVAP]-1659929877996
GPR[EPVS]-1659929877996
========
int max=0;
for(int i=mValues.length;--i>=0;){
if(!Character.isDigit(len)){
throw new IllegalArgumentException("Invalid format argument index at position "+mMaxLengthEstimate);
}
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929877998
GPR[SPVAP]-1659929877998
GPR[EPVAP]-1659929878700
GPR[EPVS]-1659929878700
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>min){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929878702
GPR[SPVAP]-1659929878702
GPR[EPVAP]-1659929879405
GPR[EPVS]-1659929879405
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>hash){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929879408
GPR[SPVAP]-1659929879408
GPR[EPVAP]-1659929880117
GPR[EPVS]-1659929880117
========
int max=mMaxLengthEstimate;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>hash){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929880118
GPR[SPVAP]-1659929880118
GPR[EPVAP]-1659929880822
GPR[EPVS]-1659929880822
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return tokenPos;

========
MM Copying to MM
GPR[SPVS]-1659929880823
GPR[SPVAP]-1659929880823
GPR[EPVAP]-1659929881519
GPR[EPVS]-1659929881519
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return length;

========
MM Copying to MM
GPR[SPVS]-1659929881521
GPR[SPVAP]-1659929881521
GPR[EPVAP]-1659929882235
GPR[EPVS]-1659929882235
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
checkTokenized();
return max;

========
MM Copying to MM
GPR[SPVS]-1659929882236
GPR[SPVAP]-1659929882236
GPR[EPVAP]-1659929882940
GPR[EPVS]-1659929882940
========
int max=0;
for(int i=mValues.length;--i>=0;){
System.arraycopy(mValues,0,new String[Math.max(mMaxLengthEstimate,mMaxLengthEstimate+len)],0,mMaxLengthEstimate);
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929882943
GPR[SPVAP]-1659929882943
GPR[EPVAP]-1659929883655
GPR[EPVS]-1659929883655
========
int max=0;
for(int i=mValues.length;--i>=0;){
names=new String[Math.max(mMaxLengthEstimate,mMaxLengthEstimate+len)];
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929883657
GPR[SPVAP]-1659929883657
GPR[EPVAP]-1659929884362
GPR[EPVS]-1659929884362
========
int max=0;
for(int i=mValues.length;--i>=0;){
values=new int[Math.max(mMaxLengthEstimate,mMaxLengthEstimate+len)];
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929884364
GPR[SPVAP]-1659929884364
GPR[EPVAP]-1659929885097
GPR[EPVS]-1659929885097
========
int max=0;
for(int i=mValues.length;--i>=0;){
System.arraycopy(mValues,0,new String[Math.max(mMaxLengthEstimate,mMaxLengthEstimate+len)],0,mMaxLengthEstimate);
names=new String[Math.max(mMaxLengthEstimate,mMaxLengthEstimate+len)];
values=new int[Math.max(mMaxLengthEstimate,mMaxLengthEstimate+len)];

int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929885099
GPR[SPVAP]-1659929885099
GPR[EPVAP]-1659929885818
GPR[EPVS]-1659929885818
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
checkTokenized();
return length;

========
MM Copying to MM
GPR[SPVS]-1659929885820
GPR[SPVAP]-1659929885820
GPR[EPVAP]-1659929886519
GPR[EPVS]-1659929886519
========
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(array[j]>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929886522
GPR[SPVAP]-1659929886522
GPR[EPVAP]-1659929887224
GPR[EPVS]-1659929887224
========
System.arraycopy(mObj1,0,mObj1,0,mMaxLengthEstimate);
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929887227
GPR[SPVAP]-1659929887227
GPR[EPVAP]-1659929887941
GPR[EPVS]-1659929887941
========
Array.set(mObj1,mMaxLengthEstimate,mObj1);
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929887942
GPR[SPVAP]-1659929887942
GPR[EPVAP]-1659929888648
GPR[EPVS]-1659929888648
========
if(mMaxLengthEstimate<len){
System.arraycopy(mObj1,index,mObj1,index+1,length-index);
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929888649
GPR[SPVAP]-1659929888649
GPR[EPVAP]-1659929889353
GPR[EPVS]-1659929889353
========
System.arraycopy(mObj1,0,Array.newInstance(mObj1.getClass().getComponentType(),len-1),0,mMaxLengthEstimate);
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929889356
GPR[SPVAP]-1659929889356
GPR[EPVAP]-1659929890061
GPR[EPVS]-1659929890061
========
if(mMaxLengthEstimate<len-1){
System.arraycopy(mObj1,index+1,Array.newInstance(mObj1.getClass().getComponentType(),len-1),index,length-index);
}
int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929890062
GPR[SPVAP]-1659929890062
GPR[EPVAP]-1659929890777
GPR[EPVS]-1659929890777
========
mMaxLengthEstimate--;
int max=len;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929890779
GPR[SPVAP]-1659929890779
GPR[EPVAP]-1659929891519
GPR[EPVS]-1659929891519
========
try{
StringWriter new StringWriter(mStandard.length()*2)=new StringWriter(mStandard.length()*2);
escapeJavaStyleString(writer,str,mColon);
return writer.toString();
}catch (IOException ioe) {
  ioe.printStackTrace();
  return null;
}

int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929891522
GPR[SPVAP]-1659929891522
GPR[EPVAP]-1659929892085
GPR[EPVS]-1659929892085
========
try{
StringWriter new StringWriter(mStandard.length())=new StringWriter(mStandard.length());
unescapeJava(writer,str);
return writer.toString();
}catch (IOException ioe) {
  ioe.printStackTrace();
  return null;
}

int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929892087
GPR[SPVAP]-1659929892087
GPR[EPVAP]-1659929892643
GPR[EPVS]-1659929892643
========
try{
StringWriter new StringWriter((int)(mStandard.length()*1.5))=new StringWriter((int)(mStandard.length()*1.5));
escapeHtml(writer,str);
return writer.toString();
}catch (IOException e) {
  e.printStackTrace();
  return null;
}

int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929892645
GPR[SPVAP]-1659929892645
GPR[EPVAP]-1659929893206
GPR[EPVS]-1659929893206
========
try{
StringWriter new StringWriter((int)(mStandard.length()*1.5))=new StringWriter((int)(mStandard.length()*1.5));
unescapeHtml(writer,str);
return writer.toString();
}catch (IOException e) {
  e.printStackTrace();
  return null;
}

int max=0;
for(int i=mValues.length;--i>=0;){
int len=mValues[i].length();
if(len>max){
max=len;
}
}
return max;

========
MM Copying to MM
GPR[SPVS]-1659929893208
GPR[SPVAP]-1659929893208
GPR[EPVAP]-1659929893764
GPR[EPVS]-1659929893764
GPR[ESUN]-1659929893764
GPR[SSUN]-1659929893764
org.apache.commons.lang.time.FastDateFormat,1155
GPR[ESUN]-1659929893883
GPR[SSUN]-1659929893883
org.apache.commons.lang.time.FastDateFormat,1156
GPR[ESUN]-1659929893936
GPR[SSUN]-1659929893936
org.apache.commons.lang.time.FastDateFormat,1157
GPR[ESUN]-1659929893990
GPR[SSUN]-1659929893990
org.apache.commons.lang.time.FastDateFormat,1158
GPR[ESUN]-1659929894039
GPR[SSUN]-1659929894039
org.apache.commons.lang.time.FastDateFormat,1160
Find no block!
GPR[SSUN]-1659929894096
org.apache.commons.lang.time.FastDateFormat,1161
GPR[ESUN]-1659929894152
GPR[SSUN]-1659929894152
org.apache.commons.lang.time.FastDateFormat,630
========
case 'h' :

case 'd' :
rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
break;


========
MM Copying to MM
GPR[SPVS]-1659929894485
GPR[SPVAP]-1659929894485
GPR[EPVAP]-1659929895718
GPR[EPVS]-1659929895718
========
case 'd' :
rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
break;


========
MM Copying to MM
GPR[SPVS]-1659929895720
GPR[SPVAP]-1659929895720
GPR[EPVAP]-1659929898401
GPR[SPVATF]-1659929898401
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929899326
GPR[EPVS]-1659929899326
========
case 'm' :

case 'd' :
rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
break;


========
MM Copying to MM
GPR[SPVS]-1659929899327
GPR[SPVAP]-1659929899327
GPR[EPVAP]-1659929900032
GPR[EPVS]-1659929900032
========
case 'd' :
rule=selectNumberRule(Calendar.SECOND,tokenLen);
break;


========
MM Copying to MM
GPR[SPVS]-1659929900034
GPR[SPVAP]-1659929900034
GPR[EPVAP]-1659929901203
GPR[SPVATF]-1659929901203
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929902129
GPR[EPVS]-1659929902129
========
case 'S' :

case 'd' :
rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
break;


========
MM Copying to MM
GPR[SPVS]-1659929902130
GPR[SPVAP]-1659929902130
GPR[EPVAP]-1659929902827
GPR[EPVS]-1659929902827
========
case 'd' :
rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
break;


========
MM Copying to MM
GPR[SPVS]-1659929902829
GPR[SPVAP]-1659929902829
GPR[EPVAP]-1659929903994
GPR[SPVATF]-1659929903994
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929904926
GPR[EPVS]-1659929904926
========
case 'F' :

case 'd' :
rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
break;


========
MM Copying to MM
GPR[SPVS]-1659929904928
GPR[SPVAP]-1659929904928
GPR[EPVAP]-1659929905631
GPR[EPVS]-1659929905631
========
case 'd' :
rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
break;


========
MM Copying to MM
GPR[SPVS]-1659929905632
GPR[SPVAP]-1659929905632
GPR[EPVAP]-1659929906783
GPR[SPVATF]-1659929906783
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929907713
GPR[EPVS]-1659929907713
========
case 'W' :

case 'd' :
rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
break;


========
MM Copying to MM
GPR[SPVS]-1659929907715
GPR[SPVAP]-1659929907715
GPR[EPVAP]-1659929908441
GPR[EPVS]-1659929908441
========
case 'd' :
rule=selectNumberRule(Calendar.HOUR,tokenLen);
break;


========
MM Copying to MM
GPR[SPVS]-1659929908442
GPR[SPVAP]-1659929908442
GPR[EPVAP]-1659929909608
GPR[SPVATF]-1659929909608
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929910534
GPR[EPVS]-1659929910534
========
case 'z' :

case 'd' :
rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
break;


========
MM Copying to MM
GPR[SPVS]-1659929910536
GPR[SPVAP]-1659929910536
GPR[EPVAP]-1659929911240
GPR[EPVS]-1659929911240
========
case 'y' :

case 'd' :
rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
break;


========
MM Copying to MM
GPR[SPVS]-1659929911242
GPR[SPVAP]-1659929911242
GPR[EPVAP]-1659929911935
GPR[EPVS]-1659929911935
========
case 'k' :

case 'd' :
rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
break;


========
MM Copying to MM
GPR[SPVS]-1659929911936
GPR[SPVAP]-1659929911936
GPR[EPVAP]-1659929912637
GPR[EPVS]-1659929912637
GPR[ESUN]-1659929912637
GPR[SSUN]-1659929912637
org.apache.commons.lang.time.FastDateFormat,631
========
case 'd' :
rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
break;

case 'h' :


========
MM Copying to MM
GPR[SPVS]-1659929913328
GPR[SPVAP]-1659929913328
GPR[EPVAP]-1659929916416
GPR[SPVATF]-1659929916416
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929917344
GPR[EPVS]-1659929917344
========
case 'd' :
rule=selectNumberRule(Calendar.SECOND,tokenLen);
break;

case 'h' :


========
MM Copying to MM
GPR[SPVS]-1659929917346
GPR[SPVAP]-1659929917346
GPR[EPVAP]-1659929918498
GPR[SPVATF]-1659929918498
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929919433
GPR[EPVS]-1659929919433
========
case 'd' :
rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
break;

case 'h' :


========
MM Copying to MM
GPR[SPVS]-1659929919435
GPR[SPVAP]-1659929919435
GPR[EPVAP]-1659929920597
GPR[SPVATF]-1659929920597
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929921532
GPR[EPVS]-1659929921532
========
case 'd' :
rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
break;

case 'h' :


========
MM Copying to MM
GPR[SPVS]-1659929921534
GPR[SPVAP]-1659929921534
GPR[EPVAP]-1659929922724
GPR[SPVATF]-1659929922724
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929923649
GPR[EPVS]-1659929923649
========
case 'd' :
rule=selectNumberRule(Calendar.HOUR,tokenLen);
break;

case 'h' :


========
MM Copying to MM
GPR[SPVS]-1659929923651
GPR[SPVAP]-1659929923651
GPR[EPVAP]-1659929924821
GPR[SPVATF]-1659929924821
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929925786
GPR[EPVS]-1659929925786
GPR[ESUN]-1659929925786
GPR[SSUN]-1659929925786
org.apache.commons.lang.time.FastDateFormat,613
========
if(tokenLen>=1){
rule=selectNumberRule(Calendar.YEAR,tokenLen);
}else {
rule=TwoDigitYearField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659929926182
GPR[SPVAP]-1659929926182
GPR[EPVAP]-1659929929318
GPR[SPVATF]-1659929929318
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929930254
GPR[EPVS]-1659929930254
========
if(tokenLen>=4){
rule=selectNumberRule(Calendar.YEAR,tokenLen);
}else {
rule=TimeZoneNumberRule.INSTANCE_COLON;
}

========
MM Copying to MM
GPR[SPVS]-1659929930256
GPR[SPVAP]-1659929930256
GPR[EPVAP]-1659929931467
GPR[SPVATF]-1659929931467
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929932418
GPR[EPVS]-1659929932418
========
if(tokenLen>=1){
rule=selectNumberRule(Calendar.YEAR,tokenLen);
}else {
rule=TimeZoneNumberRule.INSTANCE_COLON;
}

========
MM Copying to MM
GPR[SPVS]-1659929932419
GPR[SPVAP]-1659929932419
GPR[EPVAP]-1659929933580
GPR[SPVATF]-1659929933580
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929934529
GPR[EPVS]-1659929934529
========
if(tokenLen>=0){
rule=selectNumberRule(Calendar.YEAR,tokenLen);
}else {
rule=TwoDigitYearField.INSTANCE;
}

========
MM Copying to MM
GPR[SPVS]-1659929934531
GPR[SPVAP]-1659929934531
GPR[EPVAP]-1659929935697
GPR[SPVATF]-1659929935697
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929936626
GPR[EPVS]-1659929936626
GPR[ESUN]-1659929936626
GPR[SSUN]-1659929936626
org.apache.commons.lang.time.FastDateFormat,776
GPR[ESUN]-1659929936765
GPR[SSUN]-1659929936765
org.apache.commons.lang.time.FastDateFormat,1272
Find no block!
GPR[SSUN]-1659929936812
org.apache.commons.lang.time.FastDateFormat,1273
========
if(size<0){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929937172
GPR[SPVAP]-1659929937172
GPR[EPVAP]-1659929940240
GPR[SPVATF]-1659929940240
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929941163
GPR[EPVS]-1659929941163
========
if(size<3){
if(size==0){
return this;
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929941164
GPR[SPVAP]-1659929941164
GPR[EPVAP]-1659929941864
GPR[EPVS]-1659929941864
========
if(size<3){
if(size==0){
return ArrayUtils.EMPTY_CHAR_ARRAY;
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929941866
GPR[SPVAP]-1659929941866
GPR[EPVAP]-1659929942567
GPR[EPVS]-1659929942567
========
if(len<3){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929942569
GPR[SPVAP]-1659929942569
GPR[EPVAP]-1659929943265
GPR[EPVS]-1659929943265
========
if(size<3){
if(mMaxLengthEstimate>size){
return false;
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929943266
GPR[SPVAP]-1659929943266
GPR[EPVAP]-1659929943974
GPR[EPVS]-1659929943974
========
if(startIndex<3){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929943975
GPR[SPVAP]-1659929943975
GPR[EPVAP]-1659929944669
GPR[EPVS]-1659929944669
========
if(size<3){
if(mMaxLengthEstimate>=size){
return -1;
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929944671
GPR[SPVAP]-1659929944671
GPR[EPVAP]-1659929945373
GPR[EPVS]-1659929945373
========
if(strLen<3){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929945375
GPR[SPVAP]-1659929945375
GPR[EPVAP]-1659929946069
GPR[EPVS]-1659929946069
========
if(size<3){
if(mMaxLengthEstimate>size){
return -1;
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929946070
GPR[SPVAP]-1659929946070
GPR[EPVAP]-1659929946768
GPR[EPVS]-1659929946768
========
if(size<other.size){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929946770
GPR[SPVAP]-1659929946770
GPR[EPVAP]-1659929947469
GPR[EPVS]-1659929947469
========
if(size<3){
if(this.size!=other.size){
return false;
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929947471
GPR[SPVAP]-1659929947471
GPR[EPVAP]-1659929948173
GPR[EPVS]-1659929948173
========
if(size<3){
if(mStandard==null||size<=0){
return str;
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929948174
GPR[SPVAP]-1659929948174
GPR[EPVAP]-1659929948872
GPR[EPVS]-1659929948872
========
if(length<3){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929948875
GPR[SPVAP]-1659929948875
GPR[EPVAP]-1659929949584
GPR[EPVS]-1659929949584
========
if(size<mMaxLengthEstimate){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929949587
GPR[SPVAP]-1659929949587
GPR[EPVAP]-1659929950285
GPR[EPVS]-1659929950285
========
if(size<3){
if(mMaxLengthEstimate<=0||mMaxLengthEstimate>=size){
return "";
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929950287
GPR[SPVAP]-1659929950287
GPR[EPVAP]-1659929950992
GPR[EPVS]-1659929950992
========
if(size<3){
if(mStandard==null||mMaxLengthEstimate>=size){
return -1;
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929950993
GPR[SPVAP]-1659929950993
GPR[EPVAP]-1659929951690
GPR[EPVS]-1659929951690
========
if(index<3){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929951691
GPR[SPVAP]-1659929951691
GPR[EPVAP]-1659929952392
GPR[EPVS]-1659929952392
========
if(size<3){
throw new StringIndexOutOfBoundsException(mMaxLengthEstimate);
}

========
MM Copying to MM
GPR[SPVS]-1659929952394
GPR[SPVAP]-1659929952394
GPR[EPVAP]-1659929953091
GPR[EPVS]-1659929953091
========
if(index<mMaxLengthEstimate){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929953092
GPR[SPVAP]-1659929953092
GPR[EPVAP]-1659929953788
GPR[EPVS]-1659929953788
========
if(index<3){
throw new StringIndexOutOfBoundsException(mMaxLengthEstimate);
}

========
MM Copying to MM
GPR[SPVS]-1659929953790
GPR[SPVAP]-1659929953790
GPR[EPVAP]-1659929954520
GPR[EPVS]-1659929954520
========
if(size<mMaxLengthEstimate){
throw new StringIndexOutOfBoundsException(mMaxLengthEstimate);
}

========
MM Copying to MM
GPR[SPVS]-1659929954521
GPR[SPVAP]-1659929954521
GPR[EPVAP]-1659929955221
GPR[EPVS]-1659929955221
========
if(index<mMaxLengthEstimate){
throw new StringIndexOutOfBoundsException(mMaxLengthEstimate);
}

========
MM Copying to MM
GPR[SPVS]-1659929955222
GPR[SPVAP]-1659929955222
GPR[EPVAP]-1659929955933
GPR[EPVS]-1659929955933
========
if(padLen<3){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929955935
GPR[SPVAP]-1659929955935
GPR[EPVAP]-1659929956636
GPR[EPVS]-1659929956636
========
if(size<PAD_LIMIT){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929956637
GPR[SPVAP]-1659929956637
GPR[EPVAP]-1659929957375
GPR[EPVS]-1659929957375
========
if(size<3){
if(mMaxLengthEstimate==1&&size<=PAD_LIMIT){
return rightPad(mStandard,size,mStandard.charAt(0));
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929957376
GPR[SPVAP]-1659929957376
GPR[EPVAP]-1659929958078
GPR[EPVS]-1659929958078
========
if(size<3){
if(mMaxLengthEstimate==1&&size<=PAD_LIMIT){
return leftPad(mStandard,size,mStandard.charAt(0));
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929958080
GPR[SPVAP]-1659929958080
GPR[EPVAP]-1659929958785
GPR[EPVS]-1659929958785
========
if(padLen<PAD_LIMIT){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929958786
GPR[SPVAP]-1659929958786
GPR[EPVAP]-1659929959485
GPR[EPVS]-1659929959485
========
if(size<3){
if(mMaxLengthEstimate==1){
return lastIndexOf(mStandard.charAt(0),mMaxLengthEstimate);
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929959487
GPR[SPVAP]-1659929959487
GPR[EPVAP]-1659929960192
GPR[EPVS]-1659929960192
========
if(size<3){
outer: for (int i=startIndex - strLen + 1; i >= 0; i--) {
  for (int j=0; j < strLen; j++) {
    if (str.charAt(j) != buffer[i + j]) {
      continue outer;
    }
  }
  return i;
}

throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929960194
GPR[SPVAP]-1659929960194
GPR[EPVAP]-1659929960898
GPR[EPVS]-1659929960898
========
if(strLen<mMaxLengthEstimate){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929960899
GPR[SPVAP]-1659929960899
GPR[EPVAP]-1659929961593
GPR[EPVS]-1659929961593
========
if(pads<3){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929961594
GPR[SPVAP]-1659929961594
GPR[EPVAP]-1659929962290
GPR[EPVS]-1659929962290
========
if(pads<PAD_LIMIT){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929962292
GPR[SPVAP]-1659929962292
GPR[EPVAP]-1659929963007
GPR[EPVS]-1659929963007
========
if(mMaxLengthEstimate<size){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929963009
GPR[SPVAP]-1659929963009
GPR[EPVAP]-1659929963712
GPR[EPVS]-1659929963712
========
if(mMaxLengthEstimate<3){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929963713
GPR[SPVAP]-1659929963713
GPR[EPVAP]-1659929964405
GPR[EPVS]-1659929964405
========
if(size<0){
if(size==0){
return this;
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929964407
GPR[SPVAP]-1659929964407
GPR[EPVAP]-1659929965103
GPR[EPVS]-1659929965103
========
if(len<3){
if(mMaxLengthEstimate>size){
return false;
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929965105
GPR[SPVAP]-1659929965105
GPR[EPVAP]-1659929965811
GPR[EPVS]-1659929965811
========
if(size<0){
if(mStandard==null||size<=0){
return str;
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929965812
GPR[SPVAP]-1659929965812
GPR[EPVAP]-1659929966534
GPR[EPVS]-1659929966534
========
if(size<other.size){
if(this.size!=other.size){
return false;
}
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929966535
GPR[SPVAP]-1659929966535
GPR[EPVAP]-1659929967231
GPR[EPVS]-1659929967231
========
if(trimmed<3){
throw new IllegalArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659929967233
GPR[SPVAP]-1659929967233
GPR[EPVAP]-1659929967937
GPR[EPVS]-1659929967937
GPR[ESUN]-1659929967938
GPR[SSUN]-1659929967938
org.apache.commons.lang.time.FastDateFormat,1277
========
if(size<other.size){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929968392
GPR[SPVAP]-1659929968392
GPR[EPVAP]-1659929969598
GPR[EPVS]-1659929969598
========
if(size<3){
if(this.size!=other.size){
return false;
}
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929969600
GPR[SPVAP]-1659929969600
GPR[EPVAP]-1659929970370
GPR[EPVS]-1659929970370
========
if(len<3){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929970372
GPR[SPVAP]-1659929970372
GPR[EPVAP]-1659929971067
GPR[EPVS]-1659929971067
========
if(size<3){
if(mMaxLengthEstimate>size){
return false;
}
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929971069
GPR[SPVAP]-1659929971069
GPR[EPVAP]-1659929971773
GPR[EPVS]-1659929971773
========
if(endIndex<3){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929971774
GPR[SPVAP]-1659929971774
GPR[EPVAP]-1659929972480
GPR[EPVS]-1659929972480
========
if(startIndex<3){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929972482
GPR[SPVAP]-1659929972482
GPR[EPVAP]-1659929973180
GPR[EPVS]-1659929973180
========
if(size<3){
if(mMaxLengthEstimate>=size){
return -1;
}
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929973182
GPR[SPVAP]-1659929973182
GPR[EPVAP]-1659929973890
GPR[EPVS]-1659929973890
========
if(strLen<3){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929973892
GPR[SPVAP]-1659929973892
GPR[EPVAP]-1659929974598
GPR[EPVS]-1659929974598
========
if(size<3){
if(mMaxLengthEstimate>size){
return -1;
}
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929974600
GPR[SPVAP]-1659929974600
GPR[EPVAP]-1659929975300
GPR[EPVS]-1659929975300
========
if(mMaxLengthEstimate<size){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929975301
GPR[SPVAP]-1659929975301
GPR[EPVAP]-1659929976008
GPR[EPVS]-1659929976008
========
if(mMaxLengthEstimate<3){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929976010
GPR[SPVAP]-1659929976010
GPR[EPVAP]-1659929976715
GPR[EPVS]-1659929976716
========
if(index<3){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929976717
GPR[SPVAP]-1659929976717
GPR[EPVAP]-1659929977415
GPR[EPVS]-1659929977415
========
if(size<mMaxLengthEstimate){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929977416
GPR[SPVAP]-1659929977416
GPR[EPVAP]-1659929978118
GPR[EPVS]-1659929978118
========
if(size<3){
throw new StringIndexOutOfBoundsException(mMaxLengthEstimate);
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929978119
GPR[SPVAP]-1659929978119
GPR[EPVAP]-1659929978827
GPR[EPVS]-1659929978827
========
if(index<mMaxLengthEstimate){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929978830
GPR[SPVAP]-1659929978830
GPR[EPVAP]-1659929979535
GPR[EPVS]-1659929979535
========
if(index<3){
throw new StringIndexOutOfBoundsException(mMaxLengthEstimate);
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929979536
GPR[SPVAP]-1659929979536
GPR[EPVAP]-1659929980244
GPR[EPVS]-1659929980244
========
if(size<mMaxLengthEstimate){
throw new StringIndexOutOfBoundsException(mMaxLengthEstimate);
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929980245
GPR[SPVAP]-1659929980245
GPR[EPVAP]-1659929981002
GPR[EPVS]-1659929981002
========
if(index<mMaxLengthEstimate){
throw new StringIndexOutOfBoundsException(mMaxLengthEstimate);
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929981004
GPR[SPVAP]-1659929981004
GPR[EPVAP]-1659929981704
GPR[EPVS]-1659929981704
========
if(size<0){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929981706
GPR[SPVAP]-1659929981706
GPR[EPVAP]-1659929984301
GPR[SPVATF]-1659929984301
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929985238
GPR[EPVS]-1659929985238
========
if(size<3){
if(mStandard==null||size<=0){
return str;
}
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929985239
GPR[SPVAP]-1659929985239
GPR[EPVAP]-1659929985939
GPR[EPVS]-1659929985939
========
if(length<3){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929985941
GPR[SPVAP]-1659929985941
GPR[EPVAP]-1659929986637
GPR[EPVS]-1659929986637
========
if(size<3){
if(mMaxLengthEstimate<=0||mMaxLengthEstimate>=size){
return "";
}
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929986639
GPR[SPVAP]-1659929986639
GPR[EPVAP]-1659929987333
GPR[EPVS]-1659929987333
========
if(size<3){
if(mStandard==null||mMaxLengthEstimate>=size){
return -1;
}
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929987335
GPR[SPVAP]-1659929987335
GPR[EPVAP]-1659929988029
GPR[EPVS]-1659929988029
========
if(size<3){
if(size==0){
return this;
}
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929988030
GPR[SPVAP]-1659929988030
GPR[EPVAP]-1659929988725
GPR[EPVS]-1659929988725
========
if(size<3){
if(size==0){
return ArrayUtils.EMPTY_CHAR_ARRAY;
}
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929988726
GPR[SPVAP]-1659929988726
GPR[EPVAP]-1659929989429
GPR[EPVS]-1659929989429
========
if(capacity<3){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929989430
GPR[SPVAP]-1659929989430
GPR[EPVAP]-1659929990124
GPR[EPVS]-1659929990124
========
if(strLen<0){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929990126
GPR[SPVAP]-1659929990126
GPR[EPVAP]-1659929990837
GPR[EPVS]-1659929990837
========
if(size<3){
if(mMaxLengthEstimate==1){
return lastIndexOf(mStandard.charAt(0),mMaxLengthEstimate);
}
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929990840
GPR[SPVAP]-1659929990840
GPR[EPVAP]-1659929991536
GPR[EPVS]-1659929991536
========
if(size<3){
outer: for (int i=startIndex - strLen + 1; i >= 0; i--) {
  for (int j=0; j < strLen; j++) {
    if (str.charAt(j) != buffer[i + j]) {
      continue outer;
    }
  }
  return i;
}

throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929991538
GPR[SPVAP]-1659929991538
GPR[EPVAP]-1659929992250
GPR[EPVS]-1659929992250
========
if(strLen<mMaxLengthEstimate){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929992251
GPR[SPVAP]-1659929992251
GPR[EPVAP]-1659929992949
GPR[EPVS]-1659929992949
========
if(length<0){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929992951
GPR[SPVAP]-1659929992951
GPR[EPVAP]-1659929993655
GPR[EPVS]-1659929993655
========
if(size<=3){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929993657
GPR[SPVAP]-1659929993657
GPR[EPVAP]-1659929994826
GPR[SPVATF]-1659929994826
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659929995754
GPR[EPVS]-1659929995754
========
if(size<=mMaxLengthEstimate){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929995755
GPR[SPVAP]-1659929995755
GPR[EPVAP]-1659929996457
GPR[EPVS]-1659929996457
========
if(len<3){
if(mMaxLengthEstimate>size){
return false;
}
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929996459
GPR[SPVAP]-1659929996459
GPR[EPVAP]-1659929997151
GPR[EPVS]-1659929997151
========
mMaxLengthEstimate=(startIndex>=size?size-1:startIndex);
if(size<3){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929997153
GPR[SPVAP]-1659929997153
GPR[EPVAP]-1659929997853
GPR[EPVS]-1659929997853
========
if(mMaxLengthEstimate<0){
return -1;
}
if(size<3){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929997854
GPR[SPVAP]-1659929997854
GPR[EPVAP]-1659929998557
GPR[EPVS]-1659929998557
========
if(field<3){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659929998558
GPR[SPVAP]-1659929998558
GPR[EPVAP]-1659929999739
GPR[SPVATF]-1659929999739
TESTING : org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM:   - org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659930000663
GPR[EPVS]-1659930000663
========
if(len<0){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659930000665
GPR[SPVAP]-1659930000665
GPR[EPVAP]-1659930001363
GPR[EPVS]-1659930001363
========
mMaxLengthEstimate=(startIndex<0?0:startIndex);
if(size<3){
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659930001365
GPR[SPVAP]-1659930001365
GPR[EPVAP]-1659930002089
GPR[EPVS]-1659930002089
========
if(size<0){
if(size==0){
return this;
}
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659930002091
GPR[SPVAP]-1659930002091
GPR[EPVAP]-1659930002804
GPR[EPVS]-1659930002804
========
if(size<3){
if(size==Calendar.MILLISECOND){
return ;
}
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659930002806
GPR[SPVAP]-1659930002806
GPR[EPVAP]-1659930003508
GPR[EPVS]-1659930003508
========
if(size<other.size){
if(this.size!=other.size){
return false;
}
throw new IllegalArgumentException();
}
mField=field;
mSize=size;

========
MM Copying to MM
GPR[SPVS]-1659930003510
GPR[SPVAP]-1659930003510
GPR[EPVAP]-1659930004212
GPR[EPVS]-1659930004212
GPR[ESUN]-1659930004212
GPR[SSUN]-1659930004212
org.apache.commons.lang.time.FastDateFormat,1278
GPR[ESUN]-1659930004321
GPR[SSUN]-1659930004321
org.apache.commons.lang.time.FastDateFormat,1279
Find no block!
GPR[SSUN]-1659930004375
org.apache.commons.lang.time.FastDateFormat,1285
GPR[ESUN]-1659930004425
GPR[SSUN]-1659930004425
org.apache.commons.lang.time.FastDateFormat,538
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f34421f5174, pid=426742, tid=139862762510080
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 5377 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007f34421f5174 [0x00007f34421f22a0+0x2ed4]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/lang/lang_50_buggy/hs_err_pid426742.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Lang/50 results at /experiment_home///results/SimFix/Lang/50/seed_263/
\n\nNode: host-59\n
\n\nDate: Sun 07 Aug 2022 08:40:04 PM PDT\n
Removing checked out dir script/workingdir/SimFix/lang/lang_50_buggy
GPR[SSLE]-1659930004797
GPR[ESLE]-1659930064801
