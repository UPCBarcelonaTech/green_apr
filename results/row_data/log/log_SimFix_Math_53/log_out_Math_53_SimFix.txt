Sleep 1m start
GPR[SSLI]-1661319005541
GPR[ESLI]-1661319065547
Running SimFix Math 53b
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
Timezone: America/Los_Angeles
Seed 283
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Killing all java process
Creating out dir /experiment_home///results/SimFix/Math/53/seed_283/
Project lc: math
New out script/workingdir/SimFix/math/math_53_buggy
The file script/workingdir/SimFix/math/math_53_buggy does not exist!
script/workingdir/SimFix/math/math_53_buggy
Current directory: script/workingdir/SimFix/math/math_53_buggy
classpath:  script/workingdir/SimFix/math/math_53_buggy/target/classes:script/workingdir/SimFix/math/math_53_buggy/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/SimFix/math/math_53_buggy/lib/junit-4.8.2.jar
Src java:  /src/main/java
Classes Java:  /target/classes
Src Test:  /src/test/java
Classes Test:  /target/test-classes
GPR[SSLB]-1661319081526
GPR[ESLB]-1661319141530
Calling SimFix: at script/workingdir/SimFix/math/math_53_buggy
build.xml
checkstyle.xml
d4j-info
defects4j.build.properties
doap_math.rdf
findbugs-exclude-filter.xml
license-header.txt
LICENSE.txt
math-pre-RC.sh
math-RC.sh
NOTICE.txt
pom.xml
PROPOSAL.html
RELEASE-NOTES.txt
siteMods
src
target
test-jar.xml
content current dir: build.xml checkstyle.xml d4j-info defects4j.build.properties doap_math.rdf findbugs-exclude-filter.xml license-header.txt LICENSE.txt math-pre-RC.sh math-RC.sh NOTICE.txt pom.xml PROPOSAL.html RELEASE-NOTES.txt siteMods src target test-jar.xml
Node: host-59
Date init: Tue 23 Aug 2022 10:32:23 PM PDT
OAR_JOB_ID: 3743711
script/workingdir/SimFix/
GPR[SSUP]-1661319143779
=================================================
Project : math_53	start : 22/08/23 22:32

Field type inconsistancy 'SUPER' with types : MathIllegalStateException and MathException
GPR[ESUP]-1661319146340
MM Purify? false
GPR[SFL]-1661319146804
GPR[EFL]-1661319146846
GPR[SFP]-1661319146846
TIMEOUT : 18000000
GPR[SSUN]-1661319146857
org.apache.commons.math.complex.Complex,152
========
MathUtils.checkNotNull(rhs);
return createComplex(real-rhs.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661319148565
GPR[SPVAP]-1661319148565
GPR[EPVAP]-1661319153920
GPR[SPVATF]-1661319153921
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319155798
GPR[EPVS]-1661319155798
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(real+rhs.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661319155800
GPR[SPVAP]-1661319155800
GPR[EPVAP]-1661319157809
GPR[SPVATF]-1661319157809
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 0
GPR[EPVATF]-1661319159657
GPR[SPVATR]-1661319159657
TESTING : math_53
MM messageFailing tests: 0
GPR[EPVATR]-1661319179789
GPR[EPVS]-1661319179789
GPR[PF]-1661319179789
sourceFile  script/workingdir/SimFix/math/math_53_buggy/src/main/java/org/apache/commons/math/complex/Complex.java
location   script/workingdir/SimFix/math/math_53_buggy
MM Out patch at /experiment_home///results/SimFix/Math/53/seed_283/patch/math/53/0/patch_32946_1_ts_1661319179789.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math/complex/Complex.java --label=/src/main/java/org/apache/commons/math/complex/Complex.java /tmp/tmpDirMM1724180814153166783/Complex.java  /experiment_home///results/SimFix/Math/53/seed_283/patch/math/53/0/1_Complex.java  --unified=3  > /experiment_home///results/SimFix/Math/53/seed_283/patch/math/53/0/patch_32946_1_ts_1661319179789.diff
MMOut command diff: []
========
MathUtils.checkNotNull(rhs);
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661319179801
GPR[SPVAP]-1661319179801
GPR[EPVAP]-1661319181773
GPR[SPVATF]-1661319181773
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 0
GPR[EPVATF]-1661319183671
GPR[SPVATR]-1661319183672
TESTING : math_53
MM message  - org.apache.commons.math.transform.FastSineTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastSineTransformerTest::testAdHocData
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::test2DData
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::testAdHocData
MM message  - org.apache.commons.math.transform.FastCosineTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastCosineTransformerTest::testAdHocData
MM message  - org.apache.commons.math.complex.ComplexTest::testAtan
MM message  - org.apache.commons.math.complex.ComplexTest::testAsin
MM message  - org.apache.commons.math.complex.ComplexTest::testAcos
MM message  - org.apache.commons.math.complex.ComplexTest::testAdd
MM message  - org.apache.commons.math.complex.ComplexTest::testAddInfinite
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testQuinticFunction
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testQuadraticFunction
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testLinearFunction
MM messageFailing tests: 15
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661319203774
GPR[EPVS]-1661319203774
========
MathUtils.checkNotNull(rhs);
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real+rhs.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661319203777
GPR[SPVAP]-1661319203777
GPR[EPVAP]-1661319205734
GPR[SPVATF]-1661319205734
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319207690
GPR[EPVS]-1661319207690
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661319207692
GPR[SPVAP]-1661319207692
GPR[EPVAP]-1661319209658
GPR[SPVATF]-1661319209658
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 0
GPR[EPVATF]-1661319211533
GPR[SPVATR]-1661319211534
TESTING : math_53
MM message  - org.apache.commons.math.transform.FastSineTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastSineTransformerTest::testAdHocData
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::test2DData
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::testAdHocData
MM message  - org.apache.commons.math.transform.FastCosineTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastCosineTransformerTest::testAdHocData
MM message  - org.apache.commons.math.complex.ComplexTest::testAtan
MM message  - org.apache.commons.math.complex.ComplexTest::testAsin
MM message  - org.apache.commons.math.complex.ComplexTest::testAcos
MM message  - org.apache.commons.math.complex.ComplexTest::testAdd
MM message  - org.apache.commons.math.complex.ComplexTest::testAddInfinite
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testQuinticFunction
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testQuadraticFunction
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testLinearFunction
MM messageFailing tests: 15
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661319231673
GPR[EPVS]-1661319231673
========
MathUtils.checkNotNull(rhs);
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661319231675
GPR[SPVAP]-1661319231675
GPR[EPVAP]-1661319233628
GPR[SPVATF]-1661319233628
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 0
GPR[EPVATF]-1661319235486
GPR[SPVATR]-1661319235486
TESTING : math_53
MM message  - org.apache.commons.math.transform.FastSineTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastSineTransformerTest::testAdHocData
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::test2DData
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::testAdHocData
MM message  - org.apache.commons.math.transform.FastCosineTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastCosineTransformerTest::testAdHocData
MM message  - org.apache.commons.math.complex.ComplexTest::testAsinInf
MM message  - org.apache.commons.math.complex.ComplexTest::testAtan
MM message  - org.apache.commons.math.complex.ComplexTest::testAsin
MM message  - org.apache.commons.math.complex.ComplexTest::testAcos
MM message  - org.apache.commons.math.complex.ComplexTest::testAdd
MM message  - org.apache.commons.math.complex.ComplexTest::testAddInfinite
MM message  - org.apache.commons.math.complex.ComplexTest::testAcosInf
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testQuinticFunction
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testQuadraticFunction
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testLinearFunction
MM messageFailing tests: 17
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661319255526
GPR[EPVS]-1661319255526
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real+rhs.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661319255528
GPR[SPVAP]-1661319255528
GPR[EPVAP]-1661319257473
GPR[SPVATF]-1661319257473
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 0
GPR[EPVATF]-1661319259353
GPR[SPVATR]-1661319259353
TESTING : math_53
MM message  - org.apache.commons.math.complex.ComplexTest::testAddInfinite
MM messageFailing tests: 1
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661319279927
GPR[EPVS]-1661319279927
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661319279929
GPR[SPVAP]-1661319279929
GPR[EPVAP]-1661319282403
GPR[SPVATF]-1661319282403
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 0
GPR[EPVATF]-1661319284839
GPR[SPVATR]-1661319284840
TESTING : math_53
MM message  - org.apache.commons.math.transform.FastSineTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastSineTransformerTest::testAdHocData
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::test2DData
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::testAdHocData
MM message  - org.apache.commons.math.transform.FastCosineTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastCosineTransformerTest::testAdHocData
MM message  - org.apache.commons.math.complex.ComplexTest::testAtan
MM message  - org.apache.commons.math.complex.ComplexTest::testAsin
MM message  - org.apache.commons.math.complex.ComplexTest::testAcos
MM message  - org.apache.commons.math.complex.ComplexTest::testAdd
MM message  - org.apache.commons.math.complex.ComplexTest::testAddInfinite
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testQuinticFunction
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testQuadraticFunction
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testLinearFunction
MM messageFailing tests: 15
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661319305081
GPR[EPVS]-1661319305081
========
MathUtils.checkNotNull(rhs);
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661319305083
GPR[SPVAP]-1661319305083
GPR[EPVAP]-1661319307030
GPR[SPVATF]-1661319307030
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319308917
GPR[EPVS]-1661319308917
========
MathUtils.checkNotNull(rhs);
if(isNaN){
return NaN;
}
return createComplex(real+rhs.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661319308919
GPR[SPVAP]-1661319308919
GPR[EPVAP]-1661319310872
GPR[SPVATF]-1661319310872
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319312740
GPR[EPVS]-1661319312740
========
MathUtils.checkNotNull(rhs);
if(isNaN){
return NaN;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661319312742
GPR[SPVAP]-1661319312742
GPR[EPVAP]-1661319314685
GPR[SPVATF]-1661319314685
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319316556
GPR[EPVS]-1661319316556
========
MathUtils.checkNotNull(rhs);
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661319316558
GPR[SPVAP]-1661319316558
GPR[EPVAP]-1661319318495
GPR[SPVATF]-1661319318495
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319320357
GPR[EPVS]-1661319320357
========
MathUtils.checkNotNull(rhs);
if(isNaN){
return NaN;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661319320359
GPR[SPVAP]-1661319320359
GPR[EPVAP]-1661319322320
GPR[SPVATF]-1661319322320
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319324205
GPR[EPVS]-1661319324205
========
MathUtils.checkNotNull(rhs);
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661319324207
GPR[SPVAP]-1661319324207
GPR[EPVAP]-1661319326152
GPR[SPVATF]-1661319326152
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319328048
GPR[EPVS]-1661319328048
========
MathUtils.checkNotNull(rhs);
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661319328050
GPR[SPVAP]-1661319328050
GPR[EPVAP]-1661319330046
GPR[SPVATF]-1661319330046
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319331965
GPR[EPVS]-1661319331965
========
MathUtils.checkNotNull(rhs);
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319331968
GPR[SPVAP]-1661319331968
GPR[EPVAP]-1661319333912
GPR[SPVATF]-1661319333912
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319335813
GPR[EPVS]-1661319335813
========
MathUtils.checkNotNull(rhs);
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319335815
GPR[SPVAP]-1661319335815
GPR[EPVAP]-1661319337758
GPR[SPVATF]-1661319337758
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319339645
GPR[EPVS]-1661319339645
========
MathUtils.checkNotNull(rhs);
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319339647
GPR[SPVAP]-1661319339647
GPR[EPVAP]-1661319341597
GPR[SPVATF]-1661319341597
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319343505
GPR[EPVS]-1661319343505
========
MathUtils.checkNotNull(rhs);
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319343507
GPR[SPVAP]-1661319343507
GPR[EPVAP]-1661319345485
GPR[SPVATF]-1661319345485
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319347407
GPR[EPVS]-1661319347407
========
MathUtils.checkNotNull(rhs);
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319347409
GPR[SPVAP]-1661319347409
GPR[EPVAP]-1661319349369
GPR[SPVATF]-1661319349369
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319351256
GPR[EPVS]-1661319351256
========
MathUtils.checkNotNull(rhs);
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319351258
GPR[SPVAP]-1661319351258
GPR[EPVAP]-1661319353251
GPR[SPVATF]-1661319353251
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319355114
GPR[EPVS]-1661319355114
========
MathUtils.checkNotNull(rhs);
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319355116
GPR[SPVAP]-1661319355116
GPR[EPVAP]-1661319357060
GPR[SPVATF]-1661319357060
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319358938
GPR[EPVS]-1661319358938
========
MathUtils.checkNotNull(rhs);
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319358940
GPR[SPVAP]-1661319358940
GPR[EPVAP]-1661319360888
GPR[SPVATF]-1661319360888
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319362785
GPR[EPVS]-1661319362785
========
MathUtils.checkNotNull(rhs);
return createComplex(imaginary*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319362787
GPR[SPVAP]-1661319362787
GPR[EPVAP]-1661319363832
GPR[EPVS]-1661319363832
========
MathUtils.checkNotNull(rhs);
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661319363834
GPR[SPVAP]-1661319363834
GPR[EPVAP]-1661319364887
GPR[EPVS]-1661319364887
========
MathUtils.checkNotNull(rhs);
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
return createComplex(real+rhs.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661319364888
GPR[SPVAP]-1661319364888
GPR[EPVAP]-1661319365946
GPR[EPVS]-1661319365946
========
MathUtils.checkNotNull(rhs);
return createComplex(FastMath.sin(2.0*real)/FastMath.cos(2.0*real)+MathUtils.cosh(2.0*imaginary),MathUtils.sinh(2.0*imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661319365948
GPR[SPVAP]-1661319365948
GPR[EPVAP]-1661319366991
GPR[EPVS]-1661319366991
========
MathUtils.checkNotNull(rhs);
return createComplex(MathUtils.sinh(2.0*real)/MathUtils.cosh(2.0*real)+FastMath.cos(2.0*imaginary),FastMath.sin(2.0*imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661319366993
GPR[SPVAP]-1661319366993
GPR[EPVAP]-1661319368049
GPR[EPVS]-1661319368049
========
if(source.cachedPivots!=null){
System.arraycopy(source.cachedPivots,0,dest.cachedPivots,0,source.cachedPivots.length);
}
MathUtils.checkNotNull(rhs);
return createComplex(real+rhs.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661319368051
GPR[SPVAP]-1661319368051
GPR[EPVAP]-1661319369093
GPR[EPVS]-1661319369093
========
dest.quantile=source.quantile;
MathUtils.checkNotNull(rhs);
return createComplex(real+rhs.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661319369094
GPR[SPVAP]-1661319369095
GPR[EPVAP]-1661319370153
GPR[EPVS]-1661319370153
========
if(coefficients.length==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
MathUtils.checkNotNull(rhs);
return createComplex(real+rhs.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661319370155
GPR[SPVAP]-1661319370155
GPR[EPVAP]-1661319371241
GPR[EPVS]-1661319371241
========
if(subMatrix.length==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
MathUtils.checkNotNull(rhs);
return createComplex(real+rhs.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661319371243
GPR[SPVAP]-1661319371243
GPR[EPVAP]-1661319372294
GPR[EPVS]-1661319372295
========
if(d.length==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
MathUtils.checkNotNull(rhs);
return createComplex(real+rhs.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661319372296
GPR[SPVAP]-1661319372296
GPR[EPVAP]-1661319373337
GPR[EPVS]-1661319373337
========
MathUtils.checkNotNull(rhs);
return this.log().multiply(rhs).exp();

========
MM Copying to MM
GPR[SPVS]-1661319373339
GPR[SPVAP]-1661319373339
GPR[EPVAP]-1661319375287
GPR[SPVATF]-1661319375287
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 0
GPR[EPVATF]-1661319377176
GPR[SPVATR]-1661319377177
TESTING : math_53
MM message  - org.apache.commons.math.transform.FastSineTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastSineTransformerTest::testAdHocData
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::test2DData
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::testAdHocData
MM message  - org.apache.commons.math.transform.FastCosineTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastCosineTransformerTest::testAdHocData
MM message  - org.apache.commons.math.complex.ComplexTest::testAtan
MM message  - org.apache.commons.math.complex.ComplexTest::testAsin
MM message  - org.apache.commons.math.complex.ComplexTest::testAcos
MM message  - org.apache.commons.math.complex.ComplexTest::testAdd
MM message  - org.apache.commons.math.complex.ComplexTest::testAddInfinite
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testQuinticFunction
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testQuadraticFunction
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testLinearFunction
MM messageFailing tests: 15
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661319397389
GPR[EPVS]-1661319397389
GPR[ESUN]-1661319397390
GPR[SSUN]-1661319397390
org.apache.commons.math.complex.Complex,153
GPR[ESUN]-1661319397851
GPR[SSUN]-1661319397851
org.apache.commons.math.complex.Complex,319
========
if(isNaN){
return 7;
}
return isNaN;

========
MM Copying to MM
GPR[SPVS]-1661319399320
GPR[SPVAP]-1661319399320
GPR[EPVAP]-1661319401444
GPR[EPVS]-1661319401444
========
return (real==rhs.real)&&(imaginary==rhs.imaginary);

========
MM Copying to MM
GPR[SPVS]-1661319401446
GPR[SPVAP]-1661319401446
GPR[EPVAP]-1661319403360
GPR[EPVS]-1661319403360
========
return real;

========
MM Copying to MM
GPR[SPVS]-1661319403361
GPR[SPVAP]-1661319403361
GPR[EPVAP]-1661319405197
GPR[EPVS]-1661319405197
========
return imaginary;

========
MM Copying to MM
GPR[SPVS]-1661319405199
GPR[SPVAP]-1661319405199
GPR[EPVAP]-1661319407119
GPR[EPVS]-1661319407119
GPR[ESUN]-1661319407120
GPR[SSUN]-1661319407120
org.apache.commons.math.util.MathUtils,2334
Find no block!
GPR[SSUN]-1661319407430
org.apache.commons.math.util.MathUtils,2331
========
if(o==null){
throw new NullArgumentException(LocalizedFormats.OBJECT_TRANSFORMATION);
}

========
MM Copying to MM
GPR[SPVS]-1661319408829
GPR[SPVAP]-1661319408829
GPR[EPVAP]-1661319414061
GPR[SPVATF]-1661319414061
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319415949
GPR[EPVS]-1661319415949
========
if(o==null){
if(o==null){
return false;
}
throw new NullArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1661319415952
GPR[SPVAP]-1661319415952
GPR[EPVAP]-1661319417077
GPR[EPVS]-1661319417077
========
if(o==null){
if(FastMath.abs(SAFE_MIN-SAFE_MIN)<=SAFE_MIN){
return o;
}
throw new NullArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1661319417080
GPR[SPVAP]-1661319417080
GPR[EPVAP]-1661319418179
GPR[EPVS]-1661319418179
GPR[ESUN]-1661319418180
GPR[SSUN]-1661319418180
org.apache.commons.math.util.MathUtils,85
Find no block!
GPR[SSUN]-1661319418582
org.apache.commons.math.complex.Complex,997
GPR[ESUN]-1661319419882
GPR[SSUN]-1661319419882
org.apache.commons.math.complex.Complex,308
========
return "("+real;

========
MM Copying to MM
GPR[SPVS]-1661319421315
GPR[SPVAP]-1661319421315
GPR[EPVAP]-1661319423509
GPR[EPVS]-1661319423509
========
return 37*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661319423511
GPR[SPVAP]-1661319423511
GPR[EPVAP]-1661319428713
GPR[SPVATF]-1661319428713
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319430591
GPR[EPVS]-1661319430591
========
if(isNaN){
return 7;
}
return real;

========
MM Copying to MM
GPR[SPVS]-1661319430593
GPR[SPVAP]-1661319430593
GPR[EPVAP]-1661319432573
GPR[SPVATF]-1661319432573
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319434438
GPR[EPVS]-1661319434438
========
if(isNaN){
return 7;
}
return 37*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661319434440
GPR[SPVAP]-1661319434440
GPR[EPVAP]-1661319436380
GPR[SPVATF]-1661319436380
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319438270
GPR[EPVS]-1661319438270
========
return FastMath.abs(real)*FastMath.sqrt(1+imaginary*q);

========
MM Copying to MM
GPR[SPVS]-1661319438272
GPR[SPVAP]-1661319438272
GPR[EPVAP]-1661319439335
GPR[EPVS]-1661319439335
========
return imaginary;

========
MM Copying to MM
GPR[SPVS]-1661319439336
GPR[SPVAP]-1661319439336
GPR[EPVAP]-1661319441297
GPR[SPVATF]-1661319441297
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 0
GPR[EPVATF]-1661319443160
GPR[SPVATR]-1661319443161
TESTING : math_53
MM message  - org.apache.commons.math.transform.FastSineTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastSineTransformerTest::testAdHocData
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastFourierTransformerTest::testAdHocData
MM message  - org.apache.commons.math.transform.FastCosineTransformerTest::testSinFunction
MM message  - org.apache.commons.math.transform.FastCosineTransformerTest::testAdHocData
MM message  - org.apache.commons.math.complex.FrenchComplexFormatTest::testSimpleWithDecimals
MM message  - org.apache.commons.math.complex.FrenchComplexFormatTest::testNegativeImaginary
MM message  - org.apache.commons.math.complex.FrenchComplexFormatTest::testNegativeReal
MM message  - org.apache.commons.math.complex.FrenchComplexFormatTest::testNegativeBoth
MM message  - org.apache.commons.math.complex.FrenchComplexFormatTest::testZeroReal
MM message  - org.apache.commons.math.complex.FrenchComplexFormatTest::testDefaultFormatComplex
MM message  - org.apache.commons.math.complex.FrenchComplexFormatTest::testSimpleWithDecimalsTrunc
MM message  - org.apache.commons.math.complex.FrenchComplexFormatTest::testFormatNumber
MM message  - org.apache.commons.math.complex.FrenchComplexFormatTest::testZeroImaginary
MM message  - org.apache.commons.math.complex.ComplexTest::testConstructor
MM message  - org.apache.commons.math.complex.ComplexTest::testNthRoot_normal_thirdRoot
MM message  - org.apache.commons.math.complex.ComplexTest::testSqrt1z
MM message  - org.apache.commons.math.complex.ComplexTest::testNegate
MM message  - org.apache.commons.math.complex.ComplexTest::testDivideInfinite
MM message  - org.apache.commons.math.complex.ComplexTest::testDivideReal
MM message  - org.apache.commons.math.complex.ComplexTest::testMultiply
MM message  - org.apache.commons.math.complex.ComplexTest::testDivide
MM message  - org.apache.commons.math.complex.ComplexTest::testNthRoot_cornercase_thirdRoot_realPartZero
MM message  - org.apache.commons.math.complex.ComplexTest::testGetArgumentNaN
MM message  - org.apache.commons.math.complex.ComplexTest::testGetArgumentInf
MM message  - org.apache.commons.math.complex.ComplexTest::testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty
MM message  - org.apache.commons.math.complex.ComplexTest::testNthRoot_normal_fourthRoot
MM message  - org.apache.commons.math.complex.ComplexTest::testConjugate
MM message  - org.apache.commons.math.complex.ComplexTest::testGetArgument
MM message  - org.apache.commons.math.complex.ComplexTest::testScalarMultiply
MM message  - org.apache.commons.math.complex.ComplexTest::testAtan
MM message  - org.apache.commons.math.complex.ComplexTest::testAsin
MM message  - org.apache.commons.math.complex.ComplexTest::testAcos
MM message  - org.apache.commons.math.complex.ComplexTest::testDivideNaNInf
MM message  - org.apache.commons.math.complex.ComplexTest::testAdd
MM message  - org.apache.commons.math.complex.ComplexTest::testAddInfinite
MM message  - org.apache.commons.math.complex.ComplexTest::testDivideImaginary
MM message  - org.apache.commons.math.complex.ComplexFormatTest::testSimpleWithDecimals
MM message  - org.apache.commons.math.complex.ComplexFormatTest::testNegativeImaginary
MM message  - org.apache.commons.math.complex.ComplexFormatTest::testNegativeReal
MM message  - org.apache.commons.math.complex.ComplexFormatTest::testNegativeBoth
MM message  - org.apache.commons.math.complex.ComplexFormatTest::testZeroReal
MM message  - org.apache.commons.math.complex.ComplexFormatTest::testDefaultFormatComplex
MM message  - org.apache.commons.math.complex.ComplexFormatTest::testSimpleWithDecimalsTrunc
MM message  - org.apache.commons.math.complex.ComplexFormatTest::testFormatNumber
MM message  - org.apache.commons.math.complex.ComplexFormatTest::testZeroImaginary
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testQuinticFunction
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testQuadraticFunction
MM message  - org.apache.commons.math.analysis.solvers.LaguerreSolverTest::testLinearFunction
MM messageFailing tests: 50
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661319463364
GPR[EPVS]-1661319463364
GPR[ESUN]-1661319463364
GPR[SSUN]-1661319463365
org.apache.commons.math.complex.Complex,299
========
return 37*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661319465278
GPR[SPVAP]-1661319465278
GPR[EPVAP]-1661319470666
GPR[SPVATF]-1661319470666
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319472574
GPR[EPVS]-1661319472574
========
if(isNaN){
return 7;
}
return imaginary;

========
MM Copying to MM
GPR[SPVS]-1661319472576
GPR[SPVAP]-1661319472576
GPR[EPVAP]-1661319474593
GPR[SPVATF]-1661319474593
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319476458
GPR[EPVS]-1661319476458
========
if(isNaN){
return 7;
}
return 37*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661319476460
GPR[SPVAP]-1661319476460
GPR[EPVAP]-1661319478426
GPR[SPVATF]-1661319478427
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319480335
GPR[EPVS]-1661319480335
========
return FastMath.abs(imaginary)*FastMath.sqrt(1+imaginary*q);

========
MM Copying to MM
GPR[SPVS]-1661319480337
GPR[SPVAP]-1661319480337
GPR[EPVAP]-1661319481402
GPR[EPVS]-1661319481402
========
return real;

========
MM Copying to MM
GPR[SPVS]-1661319481405
GPR[SPVAP]-1661319481405
GPR[EPVAP]-1661319483365
GPR[SPVATF]-1661319483365
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319485218
GPR[EPVS]-1661319485218
========
return "("+real;

========
MM Copying to MM
GPR[SPVS]-1661319485220
GPR[SPVAP]-1661319485220
GPR[EPVAP]-1661319486272
GPR[EPVS]-1661319486272
GPR[ESUN]-1661319486272
GPR[SSUN]-1661319486272
org.apache.commons.math.complex.Complex,90
========
super();
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isInfinite(real)||Double.isInfinite(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319487950
GPR[SPVAP]-1661319487950
GPR[EPVAP]-1661319493210
GPR[SPVATF]-1661319493210
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319495121
GPR[EPVS]-1661319495121
========
super();
this.real=p1;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319495123
GPR[SPVAP]-1661319495123
GPR[EPVAP]-1661319496187
GPR[EPVS]-1661319496187
========
super();
this.real=lastScaleFactor;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319496189
GPR[SPVAP]-1661319496189
GPR[EPVAP]-1661319497247
GPR[EPVS]-1661319497247
========
super();
this.real=b;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319497249
GPR[SPVAP]-1661319497249
GPR[EPVAP]-1661319498306
GPR[EPVS]-1661319498306
========
super();
this.real=scaleFactor;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319498308
GPR[SPVAP]-1661319498308
GPR[EPVAP]-1661319499355
GPR[EPVS]-1661319499355
========
super();
this.real=p0;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319499356
GPR[SPVAP]-1661319499356
GPR[EPVAP]-1661319500461
GPR[EPVS]-1661319500461
========
super();
this.real=a;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319500462
GPR[SPVAP]-1661319500462
GPR[EPVAP]-1661319501544
GPR[EPVS]-1661319501544
========
super();
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isInfinite(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319501546
GPR[SPVAP]-1661319501546
GPR[EPVAP]-1661319503552
GPR[SPVATF]-1661319503552
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319505426
GPR[EPVS]-1661319505426
========
super();
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isInfinite(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319505428
GPR[SPVAP]-1661319505428
GPR[EPVAP]-1661319507370
GPR[SPVATF]-1661319507371
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319509246
GPR[EPVS]-1661319509246
========
if(!isNaN){
break;
}
super();
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319509248
GPR[SPVAP]-1661319509248
GPR[EPVAP]-1661319510281
GPR[EPVS]-1661319510281
========
super();
this.real=real;
this.imaginary=d;
isNaN=Double.isNaN(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319510286
GPR[SPVAP]-1661319510286
GPR[EPVAP]-1661319511325
GPR[EPVS]-1661319511325
========
super();
this.real=r;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319511333
GPR[SPVAP]-1661319511333
GPR[EPVAP]-1661319512375
GPR[EPVS]-1661319512375
========
setSize(imaginary);
super();
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319512378
GPR[SPVAP]-1661319512378
GPR[EPVAP]-1661319513428
GPR[EPVS]-1661319513428
========
setBarycenter(Double.isInfinite(imaginary)?Vector1D.NaN:new Vector1D(real/size));
super();
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319513430
GPR[SPVAP]-1661319513430
GPR[EPVAP]-1661319514485
GPR[EPVS]-1661319514485
========
super();
this.real=scaled;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661319514487
GPR[SPVAP]-1661319514487
GPR[EPVAP]-1661319515586
GPR[EPVS]-1661319515586
GPR[ESUN]-1661319515587
GPR[SSUN]-1661319515587
org.apache.commons.math.complex.Complex,91
GPR[ESUN]-1661319516089
GPR[SSUN]-1661319516089
org.apache.commons.math.complex.Complex,92
GPR[ESUN]-1661319516346
GPR[SSUN]-1661319516346
org.apache.commons.math.complex.Complex,94
GPR[ESUN]-1661319516626
GPR[SSUN]-1661319516626
org.apache.commons.math.complex.Complex,95
GPR[ESUN]-1661319516875
GPR[SSUN]-1661319516875
org.apache.commons.math.complex.Complex,97
Find no block!
GPR[SSUN]-1661319517132
org.apache.commons.math.complex.Complex,52
Find no block!
GPR[SSUN]-1661319517393
org.apache.commons.math.complex.Complex,56
Find no block!
GPR[SSUN]-1661319517683
org.apache.commons.math.complex.Complex,60
Find no block!
GPR[SSUN]-1661319517926
org.apache.commons.math.complex.Complex,63
Find no block!
GPR[SSUN]-1661319518201
org.apache.commons.math.complex.Complex,66
Find no block!
GPR[SSUN]-1661319518472
org.apache.commons.math.complex.Complex,110
========
if(isNaN){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661319519880
GPR[SPVAP]-1661319519881
GPR[EPVAP]-1661319522029
GPR[EPVS]-1661319522029
GPR[ESUN]-1661319522034
GPR[SSUN]-1661319522034
org.apache.commons.math.complex.Complex,111
GPR[ESUN]-1661319522320
GPR[SSUN]-1661319522320
org.apache.commons.math.complex.Complex,114
========
if(isInfinite()){
return Double.NEGATIVE_INFINITY;
}

========
MM Copying to MM
GPR[SPVS]-1661319523706
GPR[SPVAP]-1661319523706
GPR[EPVAP]-1661319528896
GPR[SPVATF]-1661319528896
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319530772
GPR[EPVS]-1661319530777
GPR[ESUN]-1661319530777
GPR[SSUN]-1661319530777
org.apache.commons.math.complex.Complex,115
GPR[ESUN]-1661319531229
GPR[SSUN]-1661319531229
org.apache.commons.math.complex.Complex,118
========
if(real==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319532913
GPR[SPVAP]-1661319532913
GPR[EPVAP]-1661319538196
GPR[SPVATF]-1661319538196
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319540106
GPR[EPVS]-1661319540106
========
if(tolerance==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319540108
GPR[SPVAP]-1661319540108
GPR[EPVAP]-1661319541181
GPR[EPVS]-1661319541181
========
if(p==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319541183
GPR[SPVAP]-1661319541183
GPR[EPVAP]-1661319542233
GPR[EPVS]-1661319542233
========
if(m==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319542234
GPR[SPVAP]-1661319542234
GPR[EPVAP]-1661319543304
GPR[EPVS]-1661319543304
========
if(imaginary==0.0){
return FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319543307
GPR[SPVAP]-1661319543307
GPR[EPVAP]-1661319545295
GPR[SPVATF]-1661319545295
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319547214
GPR[EPVS]-1661319547214
========
if(delta==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319547225
GPR[SPVAP]-1661319547225
GPR[EPVAP]-1661319548282
GPR[EPVS]-1661319548282
========
if(imaginary==1.0E-12){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319548285
GPR[SPVAP]-1661319548285
GPR[EPVAP]-1661319550237
GPR[SPVATF]-1661319550237
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319552149
GPR[EPVS]-1661319552149
========
if(costRelativeTolerance==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319552151
GPR[SPVAP]-1661319552151
GPR[EPVAP]-1661319553210
GPR[EPVS]-1661319553210
========
if(preRed==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319553211
GPR[SPVAP]-1661319553211
GPR[EPVAP]-1661319554248
GPR[EPVS]-1661319554248
========
if(ratio==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319554250
GPR[SPVAP]-1661319554250
GPR[EPVAP]-1661319555305
GPR[EPVS]-1661319555305
========
if(imaginary==1.0E-5){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319555307
GPR[SPVAP]-1661319555307
GPR[EPVAP]-1661319557253
GPR[SPVATF]-1661319557253
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319559162
GPR[EPVS]-1661319559162
========
if(real==0.0&&imaginary==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319559164
GPR[SPVAP]-1661319559164
GPR[EPVAP]-1661319561161
GPR[SPVATF]-1661319561161
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319563052
GPR[EPVS]-1661319563052
========
if(real>=0.0){
return createComplex(FastMath.sqrt((FastMath.abs(real)+abs())/2.0),imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}
if(imaginary==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319563054
GPR[SPVAP]-1661319563054
GPR[EPVAP]-1661319564104
GPR[EPVS]-1661319564104
========
if(epsilon==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319564106
GPR[SPVAP]-1661319564106
GPR[EPVAP]-1661319565166
GPR[EPVS]-1661319565166
========
if(difference==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319565168
GPR[SPVAP]-1661319565168
GPR[EPVAP]-1661319566209
GPR[EPVS]-1661319566209
========
if(size==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319566210
GPR[SPVAP]-1661319566210
GPR[EPVAP]-1661319567265
GPR[EPVS]-1661319567265
========
if(tol==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319567267
GPR[SPVAP]-1661319567267
GPR[EPVAP]-1661319568289
GPR[EPVS]-1661319568289
========
if(sigma==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319568292
GPR[SPVAP]-1661319568292
GPR[EPVAP]-1661319569337
GPR[EPVS]-1661319569337
========
if(imaginary==Integer.MIN_VALUE){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319569340
GPR[SPVAP]-1661319569340
GPR[EPVAP]-1661319571293
GPR[SPVATF]-1661319571293
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319573200
GPR[EPVS]-1661319573200
========
if(imaginary==Long.MIN_VALUE){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319573202
GPR[SPVAP]-1661319573202
GPR[EPVAP]-1661319575153
GPR[SPVATF]-1661319575153
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319577023
GPR[EPVS]-1661319577023
========
if(serialVersionUID==0||serialVersionUID==0){
return 0;
}
if(imaginary==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319577025
GPR[SPVAP]-1661319577025
GPR[EPVAP]-1661319578971
GPR[SPVATF]-1661319578971
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319580838
GPR[EPVS]-1661319580838
========
if(serialVersionUID==0||serialVersionUID==0){
return 0;
}
if(imaginary==Long.MIN_VALUE){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319580839
GPR[SPVAP]-1661319580839
GPR[EPVAP]-1661319582771
GPR[SPVATF]-1661319582771
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319584666
GPR[EPVS]-1661319584666
========
if(imaginary==2.2204E-16){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319584667
GPR[SPVAP]-1661319584667
GPR[EPVAP]-1661319586625
GPR[SPVATF]-1661319586625
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319588470
GPR[EPVS]-1661319588470
========
if(delta==2.2204E-16){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319588471
GPR[SPVAP]-1661319588471
GPR[EPVAP]-1661319589515
GPR[EPVS]-1661319589515
========
if(imaginary!=0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319589517
GPR[SPVAP]-1661319589517
GPR[EPVAP]-1661319591463
GPR[SPVATF]-1661319591463
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319593366
GPR[EPVS]-1661319593366
========
if((imaginary-1)==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319593367
GPR[SPVAP]-1661319593367
GPR[EPVAP]-1661319595312
GPR[SPVATF]-1661319595312
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319597189
GPR[EPVS]-1661319597189
========
if(absAi==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319597191
GPR[SPVAP]-1661319597191
GPR[EPVAP]-1661319598242
GPR[EPVS]-1661319598242
========
if((imaginary-1)!=0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319598244
GPR[SPVAP]-1661319598244
GPR[EPVAP]-1661319600190
GPR[SPVATF]-1661319600190
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319602081
GPR[EPVS]-1661319602081
========
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(imaginary==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319602084
GPR[SPVAP]-1661319602084
GPR[EPVAP]-1661319603139
GPR[EPVS]-1661319603139
========
if(imaginary==AllowedSolutions.ANY_SIDE){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319603141
GPR[SPVAP]-1661319603141
GPR[EPVAP]-1661319604208
GPR[EPVS]-1661319604208
========
if(abs==0.0){
return FastMath.abs(real);
}

========
MM Copying to MM
GPR[SPVS]-1661319604210
GPR[SPVAP]-1661319604210
GPR[EPVAP]-1661319605259
GPR[EPVS]-1661319605259
========
if(imaginary==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319606684
GPR[SPVAP]-1661319606684
GPR[EPVAP]-1661319608627
GPR[SPVATF]-1661319608627
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319610514
GPR[EPVS]-1661319610514
========
if(tolerance==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319610516
GPR[SPVAP]-1661319610516
GPR[EPVAP]-1661319611575
GPR[EPVS]-1661319611575
========
if(p==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319611577
GPR[SPVAP]-1661319611577
GPR[EPVAP]-1661319612622
GPR[EPVS]-1661319612622
========
if(m==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319612624
GPR[SPVAP]-1661319612624
GPR[EPVAP]-1661319613672
GPR[EPVS]-1661319613672
========
if(real==0.0){
return FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319613674
GPR[SPVAP]-1661319613674
GPR[EPVAP]-1661319615623
GPR[SPVATF]-1661319615623
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319617486
GPR[EPVS]-1661319617486
========
if(delta==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319617488
GPR[SPVAP]-1661319617488
GPR[EPVAP]-1661319618546
GPR[EPVS]-1661319618546
========
if(real==1.0E-12){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319618548
GPR[SPVAP]-1661319618548
GPR[EPVAP]-1661319620494
GPR[SPVATF]-1661319620495
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319622354
GPR[EPVS]-1661319622354
========
if(costRelativeTolerance==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319622356
GPR[SPVAP]-1661319622356
GPR[EPVAP]-1661319623418
GPR[EPVS]-1661319623418
========
if(preRed==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319623419
GPR[SPVAP]-1661319623419
GPR[EPVAP]-1661319624457
GPR[EPVS]-1661319624457
========
if(ratio==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319624459
GPR[SPVAP]-1661319624459
GPR[EPVAP]-1661319625506
GPR[EPVS]-1661319625506
========
if(real==1.0E-5){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319625508
GPR[SPVAP]-1661319625508
GPR[EPVAP]-1661319627446
GPR[SPVATF]-1661319627446
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319629301
GPR[EPVS]-1661319629301
========
if(real==0.0&&imaginary==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319629303
GPR[SPVAP]-1661319629303
GPR[EPVAP]-1661319631245
GPR[SPVATF]-1661319631245
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319633158
GPR[EPVS]-1661319633158
========
if(real>=0.0){
return createComplex(FastMath.sqrt((FastMath.abs(real)+abs())/2.0),imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}
if(real==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319633159
GPR[SPVAP]-1661319633159
GPR[EPVAP]-1661319634259
GPR[EPVS]-1661319634260
========
if(epsilon==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319634262
GPR[SPVAP]-1661319634262
GPR[EPVAP]-1661319635316
GPR[EPVS]-1661319635316
========
if(difference==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319635318
GPR[SPVAP]-1661319635318
GPR[EPVAP]-1661319636367
GPR[EPVS]-1661319636367
========
if(size==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319636368
GPR[SPVAP]-1661319636368
GPR[EPVAP]-1661319637430
GPR[EPVS]-1661319637430
========
if(tol==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319637433
GPR[SPVAP]-1661319637433
GPR[EPVAP]-1661319638492
GPR[EPVS]-1661319638492
========
if(sigma==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319638495
GPR[SPVAP]-1661319638495
GPR[EPVAP]-1661319639549
GPR[EPVS]-1661319639549
========
if(real==Integer.MIN_VALUE){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319639552
GPR[SPVAP]-1661319639552
GPR[EPVAP]-1661319642434
GPR[SPVATF]-1661319642434
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319644326
GPR[EPVS]-1661319644326
========
if(real==Long.MIN_VALUE){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319644328
GPR[SPVAP]-1661319644328
GPR[EPVAP]-1661319646293
GPR[SPVATF]-1661319646293
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319648145
GPR[EPVS]-1661319648145
========
if(serialVersionUID==0||serialVersionUID==0){
return 0;
}
if(real==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319648147
GPR[SPVAP]-1661319648147
GPR[EPVAP]-1661319650107
GPR[SPVATF]-1661319650107
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319651970
GPR[EPVS]-1661319651970
========
if(serialVersionUID==0||serialVersionUID==0){
return 0;
}
if(real==Long.MIN_VALUE){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319651971
GPR[SPVAP]-1661319651971
GPR[EPVAP]-1661319653906
GPR[SPVATF]-1661319653906
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319655796
GPR[EPVS]-1661319655796
========
if(real==2.2204E-16){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319655798
GPR[SPVAP]-1661319655798
GPR[EPVAP]-1661319657717
GPR[SPVATF]-1661319657717
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319659581
GPR[EPVS]-1661319659581
========
if(delta==2.2204E-16){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319659582
GPR[SPVAP]-1661319659582
GPR[EPVAP]-1661319660662
GPR[EPVS]-1661319660662
========
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(real==0.0){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319660664
GPR[SPVAP]-1661319660664
GPR[EPVAP]-1661319661736
GPR[EPVS]-1661319661736
========
if(real==AllowedSolutions.ANY_SIDE){
return FastMath.abs(imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661319661737
GPR[SPVAP]-1661319661737
GPR[EPVAP]-1661319662808
GPR[EPVS]-1661319662808
========
if(FastMath.abs(real)<=FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319664766
GPR[SPVAP]-1661319664766
GPR[EPVAP]-1661319666697
GPR[SPVATF]-1661319666697
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319668570
GPR[EPVS]-1661319668570
========
if(FastMath.abs(imaginary)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319668572
GPR[SPVAP]-1661319668572
GPR[EPVAP]-1661319670515
GPR[SPVATF]-1661319670515
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319672385
GPR[EPVS]-1661319672385
========
if(FastMath.abs(computeObjectiveValue(real))<=q){
return real;
}
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319672387
GPR[SPVAP]-1661319672387
GPR[EPVAP]-1661319673421
GPR[EPVS]-1661319673421
========
if(FastMath.abs(imaginary)<=FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319673422
GPR[SPVAP]-1661319673422
GPR[EPVAP]-1661319675356
GPR[SPVATF]-1661319675357
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319677199
GPR[EPVS]-1661319677199
========
if(FastMath.abs(real)<FastMath.abs(real)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319677202
GPR[SPVAP]-1661319677202
GPR[EPVAP]-1661319679141
GPR[SPVATF]-1661319679141
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319681022
GPR[EPVS]-1661319681022
========
if(FastMath.abs(imaginary)<FastMath.abs(real)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319681023
GPR[SPVAP]-1661319681023
GPR[EPVAP]-1661319683009
GPR[SPVATF]-1661319683009
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319684878
GPR[EPVS]-1661319684878
========
if(FastMath.abs(imaginary-real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319684880
GPR[SPVAP]-1661319684880
GPR[EPVAP]-1661319686809
GPR[SPVATF]-1661319686809
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319688684
GPR[EPVS]-1661319688684
========
if(FastMath.abs(imaginary-real)<=FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319688686
GPR[SPVAP]-1661319688686
GPR[EPVAP]-1661319690627
GPR[SPVATF]-1661319690627
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319692510
GPR[EPVS]-1661319692510
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=b/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319692512
GPR[SPVAP]-1661319692512
GPR[EPVAP]-1661319693577
GPR[EPVS]-1661319693577
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
denominator=FastMath.abs(q+FastMath.sqrt(imaginary))>FastMath.abs(real)?q+FastMath.sqrt(imaginary):real;
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319693580
GPR[SPVAP]-1661319693580
GPR[EPVAP]-1661319694685
GPR[EPVS]-1661319694685
========
if(FastMath.abs(real)<FastMath.abs(computeObjectiveValue(real))){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319694687
GPR[SPVAP]-1661319694687
GPR[EPVAP]-1661319695752
GPR[EPVS]-1661319695752
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=c/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/c;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319695754
GPR[SPVAP]-1661319695754
GPR[EPVAP]-1661319696817
GPR[EPVS]-1661319696817
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/d;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=d/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319696819
GPR[SPVAP]-1661319696819
GPR[EPVAP]-1661319697891
GPR[EPVS]-1661319697891
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=c/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319697893
GPR[SPVAP]-1661319697893
GPR[EPVAP]-1661319698941
GPR[EPVS]-1661319698941
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/d;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319698942
GPR[SPVAP]-1661319698942
GPR[EPVAP]-1661319699981
GPR[EPVS]-1661319699981
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=d/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319699983
GPR[SPVAP]-1661319699983
GPR[EPVAP]-1661319701023
GPR[EPVS]-1661319701023
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/c;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319701024
GPR[SPVAP]-1661319701024
GPR[EPVAP]-1661319702077
GPR[EPVS]-1661319702077
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=rkk/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/rkk;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319702079
GPR[SPVAP]-1661319702079
GPR[EPVAP]-1661319703125
GPR[EPVS]-1661319703125
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=rkk/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319703126
GPR[SPVAP]-1661319703126
GPR[EPVAP]-1661319704172
GPR[EPVS]-1661319704172
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/rkk;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319704173
GPR[SPVAP]-1661319704173
GPR[EPVAP]-1661319705226
GPR[EPVS]-1661319705226
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
sin=1.0/FastMath.sqrt(1.0+real*cotan);
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319705228
GPR[SPVAP]-1661319705228
GPR[EPVAP]-1661319706317
GPR[EPVS]-1661319706317
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
cos=1.0/FastMath.sqrt(1.0+q*tan);
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319706319
GPR[SPVAP]-1661319706319
GPR[EPVAP]-1661319707385
GPR[EPVS]-1661319707385
========
if(FastMath.abs(imaginary-real)<FastMath.max(real*FastMath.abs(imaginary),real)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319707388
GPR[SPVAP]-1661319707388
GPR[EPVAP]-1661319709368
GPR[SPVATF]-1661319709368
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319711246
GPR[EPVS]-1661319711246
========
if(FastMath.abs(real)<FastMath.max(real*FastMath.abs(imaginary),real)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319711248
GPR[SPVAP]-1661319711248
GPR[EPVAP]-1661319713189
GPR[SPVATF]-1661319713190
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319715094
GPR[EPVS]-1661319715094
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=tMed/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319715096
GPR[SPVAP]-1661319715096
GPR[EPVAP]-1661319716161
GPR[EPVS]-1661319716161
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/tMin;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319716162
GPR[SPVAP]-1661319716162
GPR[EPVAP]-1661319717207
GPR[EPVS]-1661319717207
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319717210
GPR[SPVAP]-1661319717210
GPR[EPVAP]-1661319718260
GPR[EPVS]-1661319718260
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319718261
GPR[SPVAP]-1661319718261
GPR[EPVAP]-1661319720230
GPR[SPVATF]-1661319720230
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319722106
GPR[EPVS]-1661319722106
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319722107
GPR[SPVAP]-1661319722107
GPR[EPVAP]-1661319723157
GPR[EPVS]-1661319723157
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319723158
GPR[SPVAP]-1661319723158
GPR[EPVAP]-1661319725089
GPR[SPVATF]-1661319725089
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319727014
GPR[EPVS]-1661319727014
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319727024
GPR[SPVAP]-1661319727024
GPR[EPVAP]-1661319728077
GPR[EPVS]-1661319728077
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319728079
GPR[SPVAP]-1661319728079
GPR[EPVAP]-1661319730044
GPR[SPVATF]-1661319730044
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319731925
GPR[EPVS]-1661319731925
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319731928
GPR[SPVAP]-1661319731928
GPR[EPVAP]-1661319733875
GPR[SPVATF]-1661319733875
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319735779
GPR[EPVS]-1661319735779
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319735781
GPR[SPVAP]-1661319735781
GPR[EPVAP]-1661319737737
GPR[SPVATF]-1661319737737
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319739630
GPR[EPVS]-1661319739630
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319739632
GPR[SPVAP]-1661319739632
GPR[EPVAP]-1661319741595
GPR[SPVATF]-1661319741595
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319743486
GPR[EPVS]-1661319743486
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319743487
GPR[SPVAP]-1661319743487
GPR[EPVAP]-1661319745444
GPR[SPVATF]-1661319745444
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319747369
GPR[EPVS]-1661319747369
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319747371
GPR[SPVAP]-1661319747371
GPR[EPVAP]-1661319749368
GPR[SPVATF]-1661319749368
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319751242
GPR[EPVS]-1661319751242
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319751245
GPR[SPVAP]-1661319751245
GPR[EPVAP]-1661319752319
GPR[EPVS]-1661319752319
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319752321
GPR[SPVAP]-1661319752321
GPR[EPVAP]-1661319753381
GPR[EPVS]-1661319753381
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319753383
GPR[SPVAP]-1661319753383
GPR[EPVAP]-1661319754460
GPR[EPVS]-1661319754460
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319754462
GPR[SPVAP]-1661319754462
GPR[EPVAP]-1661319755520
GPR[EPVS]-1661319755521
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319755522
GPR[SPVAP]-1661319755522
GPR[EPVAP]-1661319756569
GPR[EPVS]-1661319756569
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319756570
GPR[SPVAP]-1661319756570
GPR[EPVAP]-1661319757624
GPR[EPVS]-1661319757624
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319757625
GPR[SPVAP]-1661319757625
GPR[EPVAP]-1661319758673
GPR[EPVS]-1661319758673
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319758675
GPR[SPVAP]-1661319758675
GPR[EPVAP]-1661319759737
GPR[EPVS]-1661319759737
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319759738
GPR[SPVAP]-1661319759738
GPR[EPVAP]-1661319760789
GPR[EPVS]-1661319760789
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319760790
GPR[SPVAP]-1661319760790
GPR[EPVAP]-1661319761843
GPR[EPVS]-1661319761843
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319761844
GPR[SPVAP]-1661319761844
GPR[EPVAP]-1661319762898
GPR[EPVS]-1661319762898
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319762900
GPR[SPVAP]-1661319762900
GPR[EPVAP]-1661319763953
GPR[EPVS]-1661319763953
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319763954
GPR[SPVAP]-1661319763954
GPR[EPVAP]-1661319765919
GPR[SPVATF]-1661319765919
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319767795
GPR[EPVS]-1661319767795
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319767797
GPR[SPVAP]-1661319767797
GPR[EPVAP]-1661319769784
GPR[SPVATF]-1661319769784
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319771670
GPR[EPVS]-1661319771670
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319771672
GPR[SPVAP]-1661319771672
GPR[EPVAP]-1661319773632
GPR[SPVATF]-1661319773632
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319775536
GPR[EPVS]-1661319775536
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319775538
GPR[SPVAP]-1661319775538
GPR[EPVAP]-1661319777483
GPR[SPVATF]-1661319777483
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319779390
GPR[EPVS]-1661319779390
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319779391
GPR[SPVAP]-1661319779391
GPR[EPVAP]-1661319781338
GPR[SPVATF]-1661319781338
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319783253
GPR[EPVS]-1661319783253
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319783254
GPR[SPVAP]-1661319783254
GPR[EPVAP]-1661319785233
GPR[SPVATF]-1661319785233
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319787094
GPR[EPVS]-1661319787094
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319787095
GPR[SPVAP]-1661319787095
GPR[EPVAP]-1661319789056
GPR[SPVATF]-1661319789056
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319790914
GPR[EPVS]-1661319790914
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319790916
GPR[SPVAP]-1661319790916
GPR[EPVAP]-1661319792865
GPR[SPVATF]-1661319792865
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319794743
GPR[EPVS]-1661319794743
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319794745
GPR[SPVAP]-1661319794745
GPR[EPVAP]-1661319796669
GPR[SPVATF]-1661319796669
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319798574
GPR[EPVS]-1661319798574
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319798576
GPR[SPVAP]-1661319798576
GPR[EPVAP]-1661319799628
GPR[EPVS]-1661319799628
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319799630
GPR[SPVAP]-1661319799630
GPR[EPVAP]-1661319800677
GPR[EPVS]-1661319800677
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319800679
GPR[SPVAP]-1661319800679
GPR[EPVAP]-1661319801736
GPR[EPVS]-1661319801736
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319801738
GPR[SPVAP]-1661319801738
GPR[EPVAP]-1661319802827
GPR[EPVS]-1661319802827
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319802828
GPR[SPVAP]-1661319802828
GPR[EPVAP]-1661319803896
GPR[EPVS]-1661319803896
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319803897
GPR[SPVAP]-1661319803897
GPR[EPVAP]-1661319804969
GPR[EPVS]-1661319804969
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319804971
GPR[SPVAP]-1661319804971
GPR[EPVAP]-1661319806053
GPR[EPVS]-1661319806053
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319806054
GPR[SPVAP]-1661319806054
GPR[EPVAP]-1661319807116
GPR[EPVS]-1661319807116
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319807117
GPR[SPVAP]-1661319807117
GPR[EPVAP]-1661319808181
GPR[EPVS]-1661319808181
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319808182
GPR[SPVAP]-1661319808182
GPR[EPVAP]-1661319809242
GPR[EPVS]-1661319809242
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319809243
GPR[SPVAP]-1661319809243
GPR[EPVAP]-1661319810353
GPR[EPVS]-1661319810353
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319810355
GPR[SPVAP]-1661319810355
GPR[EPVAP]-1661319811417
GPR[EPVS]-1661319811417
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319811418
GPR[SPVAP]-1661319811418
GPR[EPVAP]-1661319812461
GPR[EPVS]-1661319812461
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319812462
GPR[SPVAP]-1661319812462
GPR[EPVAP]-1661319813534
GPR[EPVS]-1661319813534
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319813535
GPR[SPVAP]-1661319813535
GPR[EPVAP]-1661319814600
GPR[EPVS]-1661319814600
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319814602
GPR[SPVAP]-1661319814602
GPR[EPVAP]-1661319815651
GPR[EPVS]-1661319815651
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319815653
GPR[SPVAP]-1661319815653
GPR[EPVAP]-1661319816713
GPR[EPVS]-1661319816713
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319816715
GPR[SPVAP]-1661319816715
GPR[EPVAP]-1661319817784
GPR[EPVS]-1661319817784
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319817785
GPR[SPVAP]-1661319817785
GPR[EPVAP]-1661319818853
GPR[EPVS]-1661319818853
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319818855
GPR[SPVAP]-1661319818855
GPR[EPVAP]-1661319819900
GPR[EPVS]-1661319819900
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319819902
GPR[SPVAP]-1661319819902
GPR[EPVAP]-1661319820965
GPR[EPVS]-1661319820965
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319820966
GPR[SPVAP]-1661319820966
GPR[EPVAP]-1661319822008
GPR[EPVS]-1661319822008
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319822009
GPR[SPVAP]-1661319822009
GPR[EPVAP]-1661319823057
GPR[EPVS]-1661319823057
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319823059
GPR[SPVAP]-1661319823059
GPR[EPVAP]-1661319824106
GPR[EPVS]-1661319824106
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319824107
GPR[SPVAP]-1661319824107
GPR[EPVAP]-1661319825149
GPR[EPVS]-1661319825149
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319825150
GPR[SPVAP]-1661319825150
GPR[EPVAP]-1661319826211
GPR[EPVS]-1661319826211
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319826213
GPR[SPVAP]-1661319826213
GPR[EPVAP]-1661319827272
GPR[EPVS]-1661319827272
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319827274
GPR[SPVAP]-1661319827274
GPR[EPVAP]-1661319828327
GPR[EPVS]-1661319828327
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319828329
GPR[SPVAP]-1661319828329
GPR[EPVAP]-1661319830280
GPR[SPVATF]-1661319830280
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319832171
GPR[EPVS]-1661319832171
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319832173
GPR[SPVAP]-1661319832173
GPR[EPVAP]-1661319834145
GPR[SPVATF]-1661319834145
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319836073
GPR[EPVS]-1661319836073
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319836074
GPR[SPVAP]-1661319836074
GPR[EPVAP]-1661319838028
GPR[SPVATF]-1661319838028
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319839911
GPR[EPVS]-1661319839911
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319839913
GPR[SPVAP]-1661319839913
GPR[EPVAP]-1661319841862
GPR[SPVATF]-1661319841862
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319843784
GPR[EPVS]-1661319843784
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319843786
GPR[SPVAP]-1661319843786
GPR[EPVAP]-1661319845741
GPR[SPVATF]-1661319845741
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319847637
GPR[EPVS]-1661319847637
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319847638
GPR[SPVAP]-1661319847638
GPR[EPVAP]-1661319849617
GPR[SPVATF]-1661319849617
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319851482
GPR[EPVS]-1661319851482
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319851485
GPR[SPVAP]-1661319851485
GPR[EPVAP]-1661319852536
GPR[EPVS]-1661319852536
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319852537
GPR[SPVAP]-1661319852537
GPR[EPVAP]-1661319853586
GPR[EPVS]-1661319853586
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319853587
GPR[SPVAP]-1661319853587
GPR[EPVAP]-1661319854641
GPR[EPVS]-1661319854641
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319854642
GPR[SPVAP]-1661319854642
GPR[EPVAP]-1661319855748
GPR[EPVS]-1661319855748
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319855749
GPR[SPVAP]-1661319855749
GPR[EPVAP]-1661319856817
GPR[EPVS]-1661319856817
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319856818
GPR[SPVAP]-1661319856818
GPR[EPVAP]-1661319857869
GPR[EPVS]-1661319857869
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319857870
GPR[SPVAP]-1661319857870
GPR[EPVAP]-1661319858944
GPR[EPVS]-1661319858944
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319858946
GPR[SPVAP]-1661319858946
GPR[EPVAP]-1661319860003
GPR[EPVS]-1661319860003
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319860005
GPR[SPVAP]-1661319860005
GPR[EPVAP]-1661319861080
GPR[EPVS]-1661319861080
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319861081
GPR[SPVAP]-1661319861081
GPR[EPVAP]-1661319862172
GPR[EPVS]-1661319862172
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319862174
GPR[SPVAP]-1661319862174
GPR[EPVAP]-1661319863222
GPR[EPVS]-1661319863222
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319863224
GPR[SPVAP]-1661319863224
GPR[EPVAP]-1661319864273
GPR[EPVS]-1661319864273
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319864274
GPR[SPVAP]-1661319864274
GPR[EPVAP]-1661319865350
GPR[EPVS]-1661319865350
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319865351
GPR[SPVAP]-1661319865351
GPR[EPVAP]-1661319866426
GPR[EPVS]-1661319866426
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319866427
GPR[SPVAP]-1661319866427
GPR[EPVAP]-1661319867476
GPR[EPVS]-1661319867476
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319867478
GPR[SPVAP]-1661319867478
GPR[EPVAP]-1661319868532
GPR[EPVS]-1661319868532
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(MIN_VALUE==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319868534
GPR[SPVAP]-1661319868534
GPR[EPVAP]-1661319869586
GPR[EPVS]-1661319869586
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319869588
GPR[SPVAP]-1661319869588
GPR[EPVAP]-1661319870639
GPR[EPVS]-1661319870639
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.sqrt(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319870640
GPR[SPVAP]-1661319870640
GPR[EPVAP]-1661319871707
GPR[EPVS]-1661319871707
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319871709
GPR[SPVAP]-1661319871709
GPR[EPVAP]-1661319872765
GPR[EPVS]-1661319872765
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}

========
MM Copying to MM
GPR[SPVS]-1661319872766
GPR[SPVAP]-1661319872766
GPR[EPVAP]-1661319873837
GPR[EPVS]-1661319873837
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319873839
GPR[SPVAP]-1661319873839
GPR[EPVAP]-1661319874909
GPR[EPVS]-1661319874909
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)+FastMath.abs(serialVersionUID);
}else {
if(MIN_VALUE==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319874910
GPR[SPVAP]-1661319874910
GPR[EPVAP]-1661319875981
GPR[EPVS]-1661319875981
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(serialVersionUID)*FastMath.abs(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319875984
GPR[SPVAP]-1661319875984
GPR[EPVAP]-1661319877960
GPR[SPVATF]-1661319877960
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319879877
GPR[EPVS]-1661319879877
========
if(FastMath.abs(real)<getMinStep()){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319879883
GPR[SPVAP]-1661319879883
GPR[EPVAP]-1661319880931
GPR[EPVS]-1661319880931
========
imaginary=FastMath.max(h,1.0E-12*FastMath.abs(real));
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319880933
GPR[SPVAP]-1661319880933
GPR[EPVAP]-1661319881989
GPR[EPVS]-1661319881989
========
if(FastMath.isNaN(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319881992
GPR[SPVAP]-1661319881992
GPR[EPVAP]-1661319883050
GPR[EPVS]-1661319883050
========
if(FastMath.sqrt(FastMath.abs(imaginary-q*meanX))<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319883052
GPR[SPVAP]-1661319883052
GPR[EPVAP]-1661319884123
GPR[EPVS]-1661319884123
========
if(FastMath.sqrt(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319884124
GPR[SPVAP]-1661319884124
GPR[EPVAP]-1661319886073
GPR[SPVATF]-1661319886073
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319887975
GPR[EPVS]-1661319887975
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(d==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319887978
GPR[SPVAP]-1661319887978
GPR[EPVAP]-1661319889048
GPR[EPVS]-1661319889048
========
if(FastMath.abs(real-imaginary)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319889052
GPR[SPVAP]-1661319889052
GPR[EPVAP]-1661319891014
GPR[SPVATF]-1661319891014
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319892929
GPR[EPVS]-1661319892929
========
if(FastMath.abs(real-imaginary)<=FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319892931
GPR[SPVAP]-1661319892931
GPR[EPVAP]-1661319894873
GPR[SPVATF]-1661319894873
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319896794
GPR[EPVS]-1661319896794
========
if(FastMath.abs(serialVersionUID-real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319896796
GPR[SPVAP]-1661319896796
GPR[EPVAP]-1661319898757
GPR[SPVATF]-1661319898757
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319900645
GPR[EPVS]-1661319900645
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=x/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319900647
GPR[SPVAP]-1661319900647
GPR[EPVAP]-1661319901701
GPR[EPVS]-1661319901701
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/mu;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319901702
GPR[SPVAP]-1661319901702
GPR[EPVAP]-1661319902761
GPR[EPVS]-1661319902761
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
ret=q*real;
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319902762
GPR[SPVAP]-1661319902762
GPR[EPVAP]-1661319903818
GPR[EPVS]-1661319903818
========
if(FastMath.abs(imaginary)<FastMath.ulp(1.0)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319903822
GPR[SPVAP]-1661319903822
GPR[EPVAP]-1661319905772
GPR[SPVATF]-1661319905772
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319907775
GPR[EPVS]-1661319907775
========
if(FastMath.abs(real)<FastMath.ulp(1.0)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319907777
GPR[SPVAP]-1661319907777
GPR[EPVAP]-1661319909873
GPR[SPVATF]-1661319909873
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319911819
GPR[EPVS]-1661319911819
========
if(FastMath.abs(real)<FastMath.ulp(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319911821
GPR[SPVAP]-1661319911821
GPR[EPVAP]-1661319913817
GPR[SPVATF]-1661319913817
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319915726
GPR[EPVS]-1661319915726
========
if(FastMath.abs(imaginary)<FastMath.ulp(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319915728
GPR[SPVAP]-1661319915728
GPR[EPVAP]-1661319917680
GPR[SPVATF]-1661319917680
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319919639
GPR[EPVS]-1661319919639
========
if(q<0){
xInt=SGN_MASK_FLOAT-xInt;
}
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319919641
GPR[SPVAP]-1661319919641
GPR[EPVAP]-1661319920697
GPR[EPVS]-1661319920697
========
if(q<0){
xInt=SGN_MASK-xInt;
}
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319920699
GPR[SPVAP]-1661319920699
GPR[EPVAP]-1661319921752
GPR[EPVS]-1661319921752
========
if(q==Long.MIN_VALUE){
throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,serialVersionUID,serialVersionUID);
}
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319921754
GPR[SPVAP]-1661319921754
GPR[EPVAP]-1661319922823
GPR[EPVS]-1661319922823
========
if(FastMath.abs(real)<FastMath.isNaN(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319922825
GPR[SPVAP]-1661319922825
GPR[EPVAP]-1661319923884
GPR[EPVS]-1661319923884
========
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319923885
GPR[SPVAP]-1661319923885
GPR[EPVAP]-1661319924965
GPR[EPVS]-1661319924965
========
if(FastMath.isInfinite(real)<FastMath.isInfinite(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319924967
GPR[SPVAP]-1661319924967
GPR[EPVAP]-1661319926037
GPR[EPVS]-1661319926037
========
if(FastMath.isInfinite(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319926039
GPR[SPVAP]-1661319926039
GPR[EPVAP]-1661319927092
GPR[EPVS]-1661319927092
========
if(FastMath.abs(real)<FastMath.isInfinite(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319927094
GPR[SPVAP]-1661319927094
GPR[EPVAP]-1661319928155
GPR[EPVS]-1661319928155
========
MathUtils.checkNotNull(INF);
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319928157
GPR[SPVAP]-1661319928157
GPR[EPVAP]-1661319930098
GPR[SPVATF]-1661319930098
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319931998
GPR[EPVS]-1661319931998
========
if(q||rhs.isNaN){
return NaN;
}
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319932000
GPR[SPVAP]-1661319932000
GPR[EPVAP]-1661319933051
GPR[EPVS]-1661319933051
========
real=0;
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319933054
GPR[SPVAP]-1661319933054
GPR[EPVAP]-1661319934117
GPR[EPVS]-1661319934117
========
real=FastMath.sqrt(cost);
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319934118
GPR[SPVAP]-1661319934118
GPR[EPVAP]-1661319935200
GPR[EPVS]-1661319935200
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
error=FastMath.sqrt(real/scale.length)*errfac[currentDegree-5];
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319935202
GPR[SPVAP]-1661319935202
GPR[EPVAP]-1661319936269
GPR[EPVS]-1661319936269
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
error=FastMath.sqrt(real/scale.length)*errfac[currentDegree-5];
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319936270
GPR[SPVAP]-1661319936270
GPR[EPVAP]-1661319937332
GPR[EPVS]-1661319937332
========
real=FastMath.sqrt(dxNorm);
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319937333
GPR[SPVAP]-1661319937333
GPR[EPVAP]-1661319938421
GPR[EPVS]-1661319938422
========
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=TWO_PI/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319938426
GPR[SPVAP]-1661319938426
GPR[EPVAP]-1661319939497
GPR[EPVS]-1661319939497
========
this.real=k;
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319939499
GPR[SPVAP]-1661319939499
GPR[EPVAP]-1661319940581
GPR[EPVS]-1661319940581
========
this.real=m;
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319940582
GPR[SPVAP]-1661319940582
GPR[EPVAP]-1661319941634
GPR[EPVS]-1661319941634
========
this.real=b;
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319941635
GPR[SPVAP]-1661319941635
GPR[EPVAP]-1661319942693
GPR[EPVS]-1661319942693
========
this.real=q;
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319942695
GPR[SPVAP]-1661319942695
GPR[EPVAP]-1661319943744
GPR[EPVS]-1661319943744
========
this.real=a;
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319943745
GPR[SPVAP]-1661319943745
GPR[EPVAP]-1661319944795
GPR[EPVS]-1661319944795
========
real=1/imaginary;
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319944796
GPR[SPVAP]-1661319944796
GPR[EPVAP]-1661319945852
GPR[EPVS]-1661319945852
========
if(imaginary<=0){
throw new NotStrictlyPositiveException(abs);
}
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319945856
GPR[SPVAP]-1661319945856
GPR[EPVAP]-1661319946915
GPR[EPVS]-1661319946915
========
real=imaginary;
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319946917
GPR[SPVAP]-1661319946917
GPR[EPVAP]-1661319947986
GPR[EPVS]-1661319947986
========
this.real=epsilon;
if(FastMath.abs(real)<FastMath.abs(imaginary)){
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);
}

========
MM Copying to MM
GPR[SPVS]-1661319947988
GPR[SPVAP]-1661319947988
GPR[EPVAP]-1661319949047
GPR[EPVS]-1661319949047
GPR[ESUN]-1661319949047
GPR[SSUN]-1661319949047
org.apache.commons.math.complex.Complex,119
GPR[ESUN]-1661319949509
GPR[SSUN]-1661319949509
org.apache.commons.math.complex.Complex,120
GPR[ESUN]-1661319949785
GPR[SSUN]-1661319949785
org.apache.commons.math.complex.Complex,122
========
if(delta==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319951864
GPR[SPVAP]-1661319951864
GPR[EPVAP]-1661319954039
GPR[EPVS]-1661319954039
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return q+real;

========
MM Copying to MM
GPR[SPVS]-1661319954041
GPR[SPVAP]-1661319954041
GPR[EPVAP]-1661319959197
GPR[SPVATF]-1661319959197
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319961091
GPR[EPVS]-1661319961091
========
if(p==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319961093
GPR[SPVAP]-1661319961093
GPR[EPVAP]-1661319962195
GPR[EPVS]-1661319962195
========
if(m==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319962196
GPR[SPVAP]-1661319962196
GPR[EPVAP]-1661319963259
GPR[EPVS]-1661319963259
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=b/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319963262
GPR[SPVAP]-1661319963262
GPR[EPVAP]-1661319964319
GPR[EPVS]-1661319964319
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=rkk/rkk;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319964320
GPR[SPVAP]-1661319964320
GPR[EPVAP]-1661319965394
GPR[EPVS]-1661319965394
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=rkk/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319965395
GPR[SPVAP]-1661319965395
GPR[EPVAP]-1661319966486
GPR[EPVS]-1661319966486
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/rkk;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319966487
GPR[SPVAP]-1661319966487
GPR[EPVAP]-1661319967552
GPR[EPVS]-1661319967552
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=relativeAccuracy/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319967553
GPR[SPVAP]-1661319967553
GPR[EPVAP]-1661319968630
GPR[EPVS]-1661319968630
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319968631
GPR[SPVAP]-1661319968631
GPR[EPVAP]-1661319970593
GPR[SPVATF]-1661319970593
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319972458
GPR[EPVS]-1661319972458
========
if(tolerance==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319972459
GPR[SPVAP]-1661319972459
GPR[EPVAP]-1661319973498
GPR[EPVS]-1661319973498
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=eps/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319973500
GPR[SPVAP]-1661319973500
GPR[EPVAP]-1661319974556
GPR[EPVS]-1661319974556
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/t;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319974558
GPR[SPVAP]-1661319974558
GPR[EPVAP]-1661319975613
GPR[EPVS]-1661319975613
========
if(imaginary==1.0E-12){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319975615
GPR[SPVAP]-1661319975615
GPR[EPVAP]-1661319977649
GPR[SPVATF]-1661319977649
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319979546
GPR[EPVS]-1661319979546
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=h/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319979548
GPR[SPVAP]-1661319979548
GPR[EPVAP]-1661319980603
GPR[EPVS]-1661319980603
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=errSum/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319980604
GPR[SPVAP]-1661319980604
GPR[EPVAP]-1661319981673
GPR[EPVS]-1661319981673
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/tol;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319981674
GPR[SPVAP]-1661319981674
GPR[EPVAP]-1661319982722
GPR[EPVS]-1661319982722
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=h/tol;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319982725
GPR[SPVAP]-1661319982725
GPR[EPVAP]-1661319983796
GPR[EPVS]-1661319983796
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=errSum/tol;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319983798
GPR[SPVAP]-1661319983798
GPR[EPVAP]-1661319984861
GPR[EPVS]-1661319984861
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=dt2/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319984863
GPR[SPVAP]-1661319984863
GPR[EPVAP]-1661319985920
GPR[EPVS]-1661319985920
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=dt3/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319985922
GPR[SPVAP]-1661319985922
GPR[EPVAP]-1661319986986
GPR[EPVS]-1661319986986
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=dt1/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319986987
GPR[SPVAP]-1661319986987
GPR[EPVAP]-1661319988046
GPR[EPVS]-1661319988046
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/d12;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319988048
GPR[SPVAP]-1661319988048
GPR[EPVAP]-1661319989116
GPR[EPVS]-1661319989116
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/d23;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319989118
GPR[SPVAP]-1661319989118
GPR[EPVAP]-1661319990165
GPR[EPVS]-1661319990165
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.abs(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319990167
GPR[SPVAP]-1661319990167
GPR[EPVAP]-1661319992159
GPR[SPVATF]-1661319992159
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319994046
GPR[EPVS]-1661319994046
========
if(imaginary==0.0){
return FastMath.abs(serialVersionUID);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319994049
GPR[SPVAP]-1661319994049
GPR[EPVAP]-1661319995993
GPR[SPVATF]-1661319995993
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661319997862
GPR[EPVS]-1661319997862
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=dt/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319997864
GPR[SPVAP]-1661319997864
GPR[EPVAP]-1661319998916
GPR[EPVS]-1661319998916
========
if(absX==0.0){
return FastMath.abs(real);
}
double q=real/absX;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319998918
GPR[SPVAP]-1661319998918
GPR[EPVAP]-1661319999983
GPR[EPVS]-1661319999983
========
if(absX==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661319999984
GPR[SPVAP]-1661319999984
GPR[EPVAP]-1661320001046
GPR[EPVS]-1661320001046
========
if(imaginary==1.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320001047
GPR[SPVAP]-1661320001047
GPR[EPVAP]-1661320003026
GPR[SPVATF]-1661320003026
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320004956
GPR[EPVS]-1661320004956
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/absX;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320004958
GPR[SPVAP]-1661320004958
GPR[EPVAP]-1661320006040
GPR[EPVS]-1661320006040
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return q*tmp;

========
MM Copying to MM
GPR[SPVS]-1661320006041
GPR[SPVAP]-1661320006041
GPR[EPVAP]-1661320007108
GPR[EPVS]-1661320007108
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=fX/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320007110
GPR[SPVAP]-1661320007110
GPR[EPVAP]-1661320008156
GPR[EPVS]-1661320008156
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=fVal/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320008157
GPR[SPVAP]-1661320008157
GPR[EPVAP]-1661320009240
GPR[EPVS]-1661320009240
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/relativeThreshold;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320009241
GPR[SPVAP]-1661320009241
GPR[EPVAP]-1661320010308
GPR[EPVS]-1661320010309
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/absoluteThreshold;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320010310
GPR[SPVAP]-1661320010310
GPR[EPVAP]-1661320011387
GPR[EPVS]-1661320011387
========
if(imaginary==0.0){
return FastMath.abs(real);
}
boolean q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320011388
GPR[SPVAP]-1661320011388
GPR[EPVAP]-1661320012443
GPR[EPVS]-1661320012443
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=scalAbsoluteTolerance/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320012445
GPR[SPVAP]-1661320012445
GPR[EPVAP]-1661320013501
GPR[EPVS]-1661320013501
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/scalRelativeTolerance;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320013503
GPR[SPVAP]-1661320013503
GPR[EPVAP]-1661320014560
GPR[EPVS]-1661320014560
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/yScale;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320014562
GPR[SPVAP]-1661320014562
GPR[EPVAP]-1661320015681
GPR[EPVS]-1661320015681
========
if(imaginary==1.0E-5){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320015683
GPR[SPVAP]-1661320015683
GPR[EPVAP]-1661320017658
GPR[SPVATF]-1661320017658
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320019594
GPR[EPVS]-1661320019594
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=tmp2/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320019595
GPR[SPVAP]-1661320019595
GPR[EPVAP]-1661320020646
GPR[EPVS]-1661320020646
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/tmp1;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320020647
GPR[SPVAP]-1661320020647
GPR[EPVAP]-1661320021702
GPR[EPVS]-1661320021702
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=x/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320021703
GPR[SPVAP]-1661320021704
GPR[EPVAP]-1661320022759
GPR[EPVS]-1661320022759
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/mean;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320022761
GPR[SPVAP]-1661320022761
GPR[EPVAP]-1661320023824
GPR[EPVS]-1661320023824
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return 0.5*(1+Erf.erf(real/(q*FastMath.sqrt(2))));

========
MM Copying to MM
GPR[SPVS]-1661320023826
GPR[SPVAP]-1661320023826
GPR[EPVAP]-1661320024916
GPR[EPVS]-1661320024916
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.erf(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320024917
GPR[SPVAP]-1661320024918
GPR[EPVAP]-1661320025972
GPR[EPVS]-1661320025972
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
if(FastMath.abs(real)>40*q){
return dev<0?0.0:1.0;
}
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320025974
GPR[SPVAP]-1661320025974
GPR[EPVAP]-1661320027041
GPR[EPVS]-1661320027041
========
if(costRelativeTolerance==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320027043
GPR[SPVAP]-1661320027043
GPR[EPVAP]-1661320028093
GPR[EPVS]-1661320028094
========
if(preRed==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320028095
GPR[SPVAP]-1661320028095
GPR[EPVAP]-1661320029153
GPR[EPVS]-1661320029153
========
if(ratio==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320029154
GPR[SPVAP]-1661320029154
GPR[EPVAP]-1661320030221
GPR[EPVS]-1661320030221
========
if(epsilon==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320030223
GPR[SPVAP]-1661320030223
GPR[EPVAP]-1661320031297
GPR[EPVS]-1661320031297
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return 37*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661320031299
GPR[SPVAP]-1661320031299
GPR[EPVAP]-1661320033244
GPR[SPVATF]-1661320033244
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320035162
GPR[EPVS]-1661320035162
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
if(isNaN){
return 7;
}
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320035163
GPR[SPVAP]-1661320035163
GPR[EPVAP]-1661320037129
GPR[SPVATF]-1661320037129
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320038994
GPR[EPVS]-1661320038994
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
if(isNaN){
return 7;
}
return 37*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661320038996
GPR[SPVAP]-1661320038996
GPR[EPVAP]-1661320040941
GPR[SPVATF]-1661320040941
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320042834
GPR[EPVS]-1661320042834
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=dx1/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320042836
GPR[SPVAP]-1661320042836
GPR[EPVAP]-1661320043891
GPR[EPVS]-1661320043891
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=dy2/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320043892
GPR[SPVAP]-1661320043892
GPR[EPVAP]-1661320044959
GPR[EPVS]-1661320044959
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/dx2;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320044960
GPR[SPVAP]-1661320044960
GPR[EPVAP]-1661320046006
GPR[EPVS]-1661320046006
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/dy1;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320046008
GPR[SPVAP]-1661320046008
GPR[EPVAP]-1661320047074
GPR[EPVS]-1661320047074
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.floor(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320047075
GPR[SPVAP]-1661320047075
GPR[EPVAP]-1661320049053
GPR[SPVATF]-1661320049053
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320050941
GPR[EPVS]-1661320050941
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/ak2;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320050943
GPR[SPVAP]-1661320050943
GPR[EPVAP]-1661320051985
GPR[EPVS]-1661320051985
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/akk;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320051987
GPR[SPVAP]-1661320051987
GPR[EPVAP]-1661320053083
GPR[EPVS]-1661320053083
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/alpha;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320053084
GPR[SPVAP]-1661320053084
GPR[EPVAP]-1661320054185
GPR[EPVS]-1661320054185
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/y1;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320054187
GPR[SPVAP]-1661320054187
GPR[EPVAP]-1661320055263
GPR[EPVS]-1661320055263
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/y2;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320055264
GPR[SPVAP]-1661320055264
GPR[EPVAP]-1661320056322
GPR[EPVS]-1661320056322
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/y3;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320056324
GPR[SPVAP]-1661320056324
GPR[EPVAP]-1661320057383
GPR[EPVS]-1661320057383
========
if(tol==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320057384
GPR[SPVAP]-1661320057384
GPR[EPVAP]-1661320058439
GPR[EPVS]-1661320058439
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=p2/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320058442
GPR[SPVAP]-1661320058442
GPR[EPVAP]-1661320059510
GPR[EPVS]-1661320059510
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/q2;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320059511
GPR[SPVAP]-1661320059511
GPR[EPVAP]-1661320060573
GPR[EPVS]-1661320060573
========
if(isNaN||Double.isNaN(q)){
return NaN;
}
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320060575
GPR[SPVAP]-1661320060575
GPR[EPVAP]-1661320061636
GPR[EPVS]-1661320061636
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=n1/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320061637
GPR[SPVAP]-1661320061637
GPR[EPVAP]-1661320062698
GPR[EPVS]-1661320062698
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=n2/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320062699
GPR[SPVAP]-1661320062699
GPR[EPVAP]-1661320063756
GPR[EPVS]-1661320063756
========
if(x==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320063758
GPR[SPVAP]-1661320063758
GPR[EPVAP]-1661320064802
GPR[EPVS]-1661320064802
========
if(threshold==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320064803
GPR[SPVAP]-1661320064803
GPR[EPVAP]-1661320065850
GPR[EPVS]-1661320065850
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=c1/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320065852
GPR[SPVAP]-1661320065852
GPR[EPVAP]-1661320066903
GPR[EPVS]-1661320066903
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.isNaN(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320066906
GPR[SPVAP]-1661320066906
GPR[EPVAP]-1661320067975
GPR[EPVS]-1661320067975
========
if(imaginary==0.0){
return FastMath.abs(real);
}
if(Double.doubleToLongBits(real)<0){
yInt=SGN_MASK-yInt;
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320067977
GPR[SPVAP]-1661320067977
GPR[EPVAP]-1661320069038
GPR[EPVS]-1661320069039
========
if(imaginary==0.0){
return FastMath.abs(real);
}
boolean q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.isNaN(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320069040
GPR[SPVAP]-1661320069040
GPR[EPVAP]-1661320070099
GPR[EPVS]-1661320070099
========
if(FastMath.abs(mulAndCheck(serialVersionUID/gcd(a,serialVersionUID),b))==Long.MIN_VALUE){
throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,serialVersionUID,serialVersionUID);
}
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320070101
GPR[SPVAP]-1661320070101
GPR[EPVAP]-1661320071160
GPR[EPVS]-1661320071160
========
if(imaginary==0.0){
return FastMath.abs(real);
}
if(isNaN){
return NaN;
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320071162
GPR[SPVAP]-1661320071162
GPR[EPVAP]-1661320072224
GPR[EPVS]-1661320072224
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=x/x;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320072227
GPR[SPVAP]-1661320072227
GPR[EPVAP]-1661320073279
GPR[EPVS]-1661320073279
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/x;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320073280
GPR[SPVAP]-1661320073280
GPR[EPVAP]-1661320074334
GPR[EPVS]-1661320074334
========
MathUtils.checkNotNull(INF);
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320074337
GPR[SPVAP]-1661320074337
GPR[EPVAP]-1661320076335
GPR[SPVATF]-1661320076335
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320078394
GPR[EPVS]-1661320078394
========
if(isNaN||rhs.isNaN){
return NaN;
}
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320078396
GPR[SPVAP]-1661320078396
GPR[EPVAP]-1661320079511
GPR[EPVS]-1661320079512
========
if(!isInfinite){
real=-h;
}
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320079514
GPR[SPVAP]-1661320079514
GPR[EPVAP]-1661320080572
GPR[EPVS]-1661320080572
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=n1/n1;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320080574
GPR[SPVAP]-1661320080574
GPR[EPVAP]-1661320081636
GPR[EPVS]-1661320081636
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=n2/n2;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320081637
GPR[SPVAP]-1661320081637
GPR[EPVAP]-1661320082686
GPR[EPVS]-1661320082686
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=v1/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320082688
GPR[SPVAP]-1661320082688
GPR[EPVAP]-1661320083753
GPR[EPVS]-1661320083753
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=v2/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320083755
GPR[SPVAP]-1661320083755
GPR[EPVAP]-1661320084816
GPR[EPVS]-1661320084816
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/n1;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320084817
GPR[SPVAP]-1661320084817
GPR[EPVAP]-1661320085862
GPR[EPVS]-1661320085862
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/n2;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320085863
GPR[SPVAP]-1661320085863
GPR[EPVAP]-1661320086911
GPR[EPVS]-1661320086911
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=t0/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320086913
GPR[SPVAP]-1661320086913
GPR[EPVAP]-1661320087973
GPR[EPVS]-1661320087973
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/epsilon;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320087974
GPR[SPVAP]-1661320087974
GPR[EPVAP]-1661320089043
GPR[EPVS]-1661320089043
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=c1X/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320089045
GPR[SPVAP]-1661320089045
GPR[EPVAP]-1661320090101
GPR[EPVS]-1661320090101
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=cos/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320090102
GPR[SPVAP]-1661320090102
GPR[EPVAP]-1661320091157
GPR[EPVS]-1661320091157
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=c1Y/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320091159
GPR[SPVAP]-1661320091159
GPR[EPVAP]-1661320092222
GPR[EPVS]-1661320092222
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=sin/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320092223
GPR[SPVAP]-1661320092223
GPR[EPVAP]-1661320093278
GPR[EPVS]-1661320093278
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/c11;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320093280
GPR[SPVAP]-1661320093280
GPR[EPVAP]-1661320094351
GPR[EPVS]-1661320094351
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/originOffset;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320094352
GPR[SPVAP]-1661320094352
GPR[EPVAP]-1661320095409
GPR[EPVS]-1661320095409
========
if(lmPar==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320095411
GPR[SPVAP]-1661320095411
GPR[EPVAP]-1661320096453
GPR[EPVS]-1661320096453
========
if(imaginary==0.0){
return FastMath.abs(real);
}
int q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320096454
GPR[SPVAP]-1661320096454
GPR[EPVAP]-1661320097534
GPR[EPVS]-1661320097535
========
if(imaginary==0.0){
return FastMath.abs(real);
}
checkVectorDimensions(v.length);
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320097537
GPR[SPVAP]-1661320097537
GPR[EPVAP]-1661320098576
GPR[EPVS]-1661320098576
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return 2*FastMath.asin(FastMath.sqrt(q*q1+imaginary*q2+real*q3));

========
MM Copying to MM
GPR[SPVS]-1661320098577
GPR[SPVAP]-1661320098577
GPR[EPVAP]-1661320099662
GPR[EPVS]-1661320099662
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.asin(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320099663
GPR[SPVAP]-1661320099663
GPR[EPVAP]-1661320101617
GPR[SPVATF]-1661320101617
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320103502
GPR[EPVS]-1661320103502
========
if(abs==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320103503
GPR[SPVAP]-1661320103503
GPR[EPVAP]-1661320104575
GPR[EPVS]-1661320104575
========
q=imaginary;
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320104576
GPR[SPVAP]-1661320104576
GPR[EPVAP]-1661320105631
GPR[EPVS]-1661320105631
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=lambda/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320105632
GPR[SPVAP]-1661320105632
GPR[EPVAP]-1661320106691
GPR[EPVS]-1661320106691
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/delta;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320106693
GPR[SPVAP]-1661320106693
GPR[EPVAP]-1661320107761
GPR[EPVS]-1661320107761
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=TWO_PI/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320107764
GPR[SPVAP]-1661320107764
GPR[EPVAP]-1661320108804
GPR[EPVS]-1661320108804
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=factor2/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320108806
GPR[SPVAP]-1661320108806
GPR[EPVAP]-1661320109860
GPR[EPVS]-1661320109860
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/mMinusX;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320109862
GPR[SPVAP]-1661320109862
GPR[EPVAP]-1661320110927
GPR[EPVS]-1661320110927
========
if(u==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320110928
GPR[SPVAP]-1661320110928
GPR[EPVAP]-1661320111992
GPR[EPVS]-1661320111993
========
if(a==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320111994
GPR[SPVAP]-1661320111994
GPR[EPVAP]-1661320113054
GPR[EPVS]-1661320113054
========
if(tol2==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320113056
GPR[SPVAP]-1661320113056
GPR[EPVAP]-1661320114120
GPR[EPVS]-1661320114120
========
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return (q*moment.m3)/((n0-1)*(n0-2));

========
MM Copying to MM
GPR[SPVS]-1661320114122
GPR[SPVAP]-1661320114122
GPR[EPVAP]-1661320115210
GPR[EPVS]-1661320115210
========
if(real<MIN_RELATIVE_TOLERANCE){
throw new NumberIsTooSmallException(rel,MIN_RELATIVE_TOLERANCE,true);
}
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320115211
GPR[SPVAP]-1661320115211
GPR[EPVAP]-1661320116281
GPR[EPVS]-1661320116281
========
q=real;
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320116282
GPR[SPVAP]-1661320116282
GPR[EPVAP]-1661320117325
GPR[EPVS]-1661320117325
========
real=imaginary;
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320117327
GPR[SPVAP]-1661320117327
GPR[EPVAP]-1661320118409
GPR[EPVS]-1661320118409
========
this.real=epsilon;
if(imaginary==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320118411
GPR[SPVAP]-1661320118411
GPR[EPVAP]-1661320119479
GPR[EPVS]-1661320119479
========
q=imaginary;
if(p==0.0){
return FastMath.abs(real);
}
double q=real/imaginary;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320119481
GPR[SPVAP]-1661320119481
GPR[EPVAP]-1661320120639
GPR[EPVS]-1661320120639
GPR[ESUN]-1661320120639
GPR[SSUN]-1661320120639
org.apache.commons.math.complex.Complex,123
GPR[ESUN]-1661320121092
GPR[SSUN]-1661320121092
org.apache.commons.math.complex.Complex,125
GPR[ESUN]-1661320121399
GPR[SSUN]-1661320121399
org.apache.commons.math.complex.Complex,126
GPR[ESUN]-1661320121668
GPR[SSUN]-1661320121668
org.apache.commons.math.complex.Complex,128
========
if(imaginary==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320123650
GPR[SPVAP]-1661320123650
GPR[EPVAP]-1661320128953
GPR[SPVATF]-1661320128953
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320130953
GPR[EPVS]-1661320130953
========
if(delta==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320130963
GPR[SPVAP]-1661320130963
GPR[EPVAP]-1661320132017
GPR[EPVS]-1661320132017
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return q+imaginary;

========
MM Copying to MM
GPR[SPVS]-1661320132018
GPR[SPVAP]-1661320132018
GPR[EPVAP]-1661320133968
GPR[SPVATF]-1661320133968
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320135856
GPR[EPVS]-1661320135856
========
if(p==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320135858
GPR[SPVAP]-1661320135858
GPR[EPVAP]-1661320136916
GPR[EPVS]-1661320136916
========
if(m==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320136917
GPR[SPVAP]-1661320136917
GPR[EPVAP]-1661320138014
GPR[EPVS]-1661320138014
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=b/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320138016
GPR[SPVAP]-1661320138016
GPR[EPVAP]-1661320139099
GPR[EPVS]-1661320139099
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=rkk/rkk;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320139101
GPR[SPVAP]-1661320139101
GPR[EPVAP]-1661320140151
GPR[EPVS]-1661320140151
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=rkk/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320140153
GPR[SPVAP]-1661320140153
GPR[EPVAP]-1661320141210
GPR[EPVS]-1661320141210
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/rkk;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320141212
GPR[SPVAP]-1661320141212
GPR[EPVAP]-1661320142281
GPR[EPVS]-1661320142281
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=relativeAccuracy/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320142283
GPR[SPVAP]-1661320142283
GPR[EPVAP]-1661320143335
GPR[EPVS]-1661320143335
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(imaginary)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320143337
GPR[SPVAP]-1661320143337
GPR[EPVAP]-1661320145336
GPR[SPVATF]-1661320145336
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320147231
GPR[EPVS]-1661320147231
========
if(tolerance==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320147232
GPR[SPVAP]-1661320147232
GPR[EPVAP]-1661320148283
GPR[EPVS]-1661320148283
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=eps/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320148285
GPR[SPVAP]-1661320148285
GPR[EPVAP]-1661320149363
GPR[EPVS]-1661320149363
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/t;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320149364
GPR[SPVAP]-1661320149364
GPR[EPVAP]-1661320150448
GPR[EPVS]-1661320150448
========
if(real==1.0E-12){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320150450
GPR[SPVAP]-1661320150450
GPR[EPVAP]-1661320152415
GPR[SPVATF]-1661320152415
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320154298
GPR[EPVS]-1661320154298
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=h/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320154300
GPR[SPVAP]-1661320154300
GPR[EPVAP]-1661320155345
GPR[EPVS]-1661320155345
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=errSum/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320155346
GPR[SPVAP]-1661320155346
GPR[EPVAP]-1661320156405
GPR[EPVS]-1661320156405
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/tol;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320156407
GPR[SPVAP]-1661320156407
GPR[EPVAP]-1661320157503
GPR[EPVS]-1661320157503
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=h/tol;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320157505
GPR[SPVAP]-1661320157505
GPR[EPVAP]-1661320158567
GPR[EPVS]-1661320158567
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=errSum/tol;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320158569
GPR[SPVAP]-1661320158569
GPR[EPVAP]-1661320159627
GPR[EPVS]-1661320159627
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=dt2/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320159629
GPR[SPVAP]-1661320159629
GPR[EPVAP]-1661320160670
GPR[EPVS]-1661320160670
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=dt3/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320160671
GPR[SPVAP]-1661320160671
GPR[EPVAP]-1661320161715
GPR[EPVS]-1661320161715
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=dt1/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320161717
GPR[SPVAP]-1661320161717
GPR[EPVAP]-1661320162780
GPR[EPVS]-1661320162780
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/d12;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320162781
GPR[SPVAP]-1661320162781
GPR[EPVAP]-1661320163841
GPR[EPVS]-1661320163841
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/d23;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320163842
GPR[SPVAP]-1661320163842
GPR[EPVAP]-1661320164893
GPR[EPVS]-1661320164893
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.abs(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320164895
GPR[SPVAP]-1661320164895
GPR[EPVAP]-1661320166900
GPR[SPVATF]-1661320166900
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320168806
GPR[EPVS]-1661320168806
========
if(real==0.0){
return FastMath.abs(serialVersionUID);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320168808
GPR[SPVAP]-1661320168808
GPR[EPVAP]-1661320170767
GPR[SPVATF]-1661320170767
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320172645
GPR[EPVS]-1661320172645
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=dt/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320172647
GPR[SPVAP]-1661320172647
GPR[EPVAP]-1661320173709
GPR[EPVS]-1661320173709
========
if(absX==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/absX;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320173710
GPR[SPVAP]-1661320173710
GPR[EPVAP]-1661320174770
GPR[EPVS]-1661320174770
========
if(absX==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320174771
GPR[SPVAP]-1661320174771
GPR[EPVAP]-1661320175843
GPR[EPVS]-1661320175844
========
if(real==1.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320175845
GPR[SPVAP]-1661320175845
GPR[EPVAP]-1661320177825
GPR[SPVATF]-1661320177825
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320179654
GPR[EPVS]-1661320179654
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/absX;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320179656
GPR[SPVAP]-1661320179656
GPR[EPVAP]-1661320180705
GPR[EPVS]-1661320180705
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return q*tmp;

========
MM Copying to MM
GPR[SPVS]-1661320180706
GPR[SPVAP]-1661320180706
GPR[EPVAP]-1661320181761
GPR[EPVS]-1661320181761
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=fX/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320181762
GPR[SPVAP]-1661320181762
GPR[EPVAP]-1661320182828
GPR[EPVS]-1661320182828
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=fVal/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320182829
GPR[SPVAP]-1661320182829
GPR[EPVAP]-1661320183889
GPR[EPVS]-1661320183889
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/relativeThreshold;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320183890
GPR[SPVAP]-1661320183890
GPR[EPVAP]-1661320184941
GPR[EPVS]-1661320184941
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/absoluteThreshold;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320184943
GPR[SPVAP]-1661320184943
GPR[EPVAP]-1661320186011
GPR[EPVS]-1661320186011
========
if(real==0.0){
return FastMath.abs(imaginary);
}
boolean q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320186012
GPR[SPVAP]-1661320186012
GPR[EPVAP]-1661320187107
GPR[EPVS]-1661320187107
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=scalAbsoluteTolerance/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320187109
GPR[SPVAP]-1661320187109
GPR[EPVAP]-1661320188161
GPR[EPVS]-1661320188161
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/scalRelativeTolerance;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320188162
GPR[SPVAP]-1661320188162
GPR[EPVAP]-1661320189212
GPR[EPVS]-1661320189212
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/yScale;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320189213
GPR[SPVAP]-1661320189213
GPR[EPVAP]-1661320190279
GPR[EPVS]-1661320190279
========
if(real==1.0E-5){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320190281
GPR[SPVAP]-1661320190281
GPR[EPVAP]-1661320192231
GPR[SPVATF]-1661320192231
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320195483
GPR[EPVS]-1661320195483
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=tmp2/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320195485
GPR[SPVAP]-1661320195485
GPR[EPVAP]-1661320196541
GPR[EPVS]-1661320196541
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/tmp1;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320196542
GPR[SPVAP]-1661320196542
GPR[EPVAP]-1661320197581
GPR[EPVS]-1661320197581
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=x/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320197583
GPR[SPVAP]-1661320197583
GPR[EPVAP]-1661320198647
GPR[EPVS]-1661320198647
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/mean;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320198648
GPR[SPVAP]-1661320198648
GPR[EPVAP]-1661320199695
GPR[EPVS]-1661320199695
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return 0.5*(1+Erf.erf(imaginary/(q*FastMath.sqrt(2))));

========
MM Copying to MM
GPR[SPVS]-1661320199697
GPR[SPVAP]-1661320199697
GPR[EPVAP]-1661320200769
GPR[EPVS]-1661320200769
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.erf(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320200770
GPR[SPVAP]-1661320200770
GPR[EPVAP]-1661320201825
GPR[EPVS]-1661320201825
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
if(FastMath.abs(imaginary)>40*q){
return dev<0?0.0:1.0;
}
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320201826
GPR[SPVAP]-1661320201826
GPR[EPVAP]-1661320202872
GPR[EPVS]-1661320202872
========
if(costRelativeTolerance==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320202874
GPR[SPVAP]-1661320202874
GPR[EPVAP]-1661320203917
GPR[EPVS]-1661320203917
========
if(preRed==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320203918
GPR[SPVAP]-1661320203918
GPR[EPVAP]-1661320204983
GPR[EPVS]-1661320204983
========
if(ratio==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320204984
GPR[SPVAP]-1661320204984
GPR[EPVAP]-1661320206046
GPR[EPVS]-1661320206046
========
if(epsilon==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320206048
GPR[SPVAP]-1661320206048
GPR[EPVAP]-1661320207099
GPR[EPVS]-1661320207099
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return 37*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661320207101
GPR[SPVAP]-1661320207101
GPR[EPVAP]-1661320209065
GPR[SPVATF]-1661320209065
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320210964
GPR[EPVS]-1661320210964
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
if(isNaN){
return 7;
}
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320210966
GPR[SPVAP]-1661320210966
GPR[EPVAP]-1661320212917
GPR[SPVATF]-1661320212917
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320214813
GPR[EPVS]-1661320214813
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
if(isNaN){
return 7;
}
return 37*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661320214814
GPR[SPVAP]-1661320214814
GPR[EPVAP]-1661320216763
GPR[SPVATF]-1661320216763
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320218638
GPR[EPVS]-1661320218638
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=dx1/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320218640
GPR[SPVAP]-1661320218640
GPR[EPVAP]-1661320219684
GPR[EPVS]-1661320219684
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=dy2/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320219685
GPR[SPVAP]-1661320219685
GPR[EPVAP]-1661320220720
GPR[EPVS]-1661320220720
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/dx2;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320220721
GPR[SPVAP]-1661320220722
GPR[EPVAP]-1661320221770
GPR[EPVS]-1661320221770
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/dy1;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320221772
GPR[SPVAP]-1661320221772
GPR[EPVAP]-1661320222832
GPR[EPVS]-1661320222832
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.floor(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320222833
GPR[SPVAP]-1661320222833
GPR[EPVAP]-1661320224802
GPR[SPVATF]-1661320224803
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320226746
GPR[EPVS]-1661320226746
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/ak2;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320226748
GPR[SPVAP]-1661320226748
GPR[EPVAP]-1661320227809
GPR[EPVS]-1661320227809
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/akk;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320227810
GPR[SPVAP]-1661320227810
GPR[EPVAP]-1661320228859
GPR[EPVS]-1661320228859
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/alpha;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320228860
GPR[SPVAP]-1661320228860
GPR[EPVAP]-1661320229949
GPR[EPVS]-1661320229949
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/y1;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320229951
GPR[SPVAP]-1661320229951
GPR[EPVAP]-1661320231033
GPR[EPVS]-1661320231033
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/y2;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320231034
GPR[SPVAP]-1661320231034
GPR[EPVAP]-1661320232117
GPR[EPVS]-1661320232117
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/y3;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320232119
GPR[SPVAP]-1661320232119
GPR[EPVAP]-1661320233175
GPR[EPVS]-1661320233175
========
if(tol==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320233176
GPR[SPVAP]-1661320233176
GPR[EPVAP]-1661320234247
GPR[EPVS]-1661320234247
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=p2/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320234250
GPR[SPVAP]-1661320234250
GPR[EPVAP]-1661320235304
GPR[EPVS]-1661320235304
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/q2;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320235306
GPR[SPVAP]-1661320235306
GPR[EPVAP]-1661320236357
GPR[EPVS]-1661320236357
========
if(isNaN||Double.isNaN(q)){
return NaN;
}
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320236358
GPR[SPVAP]-1661320236358
GPR[EPVAP]-1661320237420
GPR[EPVS]-1661320237421
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=n1/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320237422
GPR[SPVAP]-1661320237422
GPR[EPVAP]-1661320238465
GPR[EPVS]-1661320238465
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=n2/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320238467
GPR[SPVAP]-1661320238467
GPR[EPVAP]-1661320239519
GPR[EPVS]-1661320239519
========
if(x==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320239521
GPR[SPVAP]-1661320239521
GPR[EPVAP]-1661320240563
GPR[EPVS]-1661320240563
========
if(threshold==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320240565
GPR[SPVAP]-1661320240565
GPR[EPVAP]-1661320241624
GPR[EPVS]-1661320241624
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=c1/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320241626
GPR[SPVAP]-1661320241626
GPR[EPVAP]-1661320242693
GPR[EPVS]-1661320242693
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.isNaN(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320242695
GPR[SPVAP]-1661320242695
GPR[EPVAP]-1661320243740
GPR[EPVS]-1661320243740
========
if(real==0.0){
return FastMath.abs(imaginary);
}
if(Double.doubleToLongBits(imaginary)<0){
yInt=SGN_MASK-yInt;
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320243752
GPR[SPVAP]-1661320243752
GPR[EPVAP]-1661320244809
GPR[EPVS]-1661320244809
========
if(real==0.0){
return FastMath.abs(imaginary);
}
boolean q=imaginary/real;
return FastMath.abs(real)*FastMath.isNaN(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320244811
GPR[SPVAP]-1661320244811
GPR[EPVAP]-1661320245873
GPR[EPVS]-1661320245873
========
if(FastMath.abs(mulAndCheck(serialVersionUID/gcd(a,serialVersionUID),b))==Long.MIN_VALUE){
throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,serialVersionUID,serialVersionUID);
}
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320245875
GPR[SPVAP]-1661320245875
GPR[EPVAP]-1661320246967
GPR[EPVS]-1661320246967
========
if(real==0.0){
return FastMath.abs(imaginary);
}
if(isNaN){
return NaN;
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320246968
GPR[SPVAP]-1661320246968
GPR[EPVAP]-1661320248024
GPR[EPVS]-1661320248024
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=x/x;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320248027
GPR[SPVAP]-1661320248027
GPR[EPVAP]-1661320249084
GPR[EPVS]-1661320249084
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/x;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320249085
GPR[SPVAP]-1661320249085
GPR[EPVAP]-1661320250141
GPR[EPVS]-1661320250141
========
MathUtils.checkNotNull(INF);
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320250144
GPR[SPVAP]-1661320250144
GPR[EPVAP]-1661320252111
GPR[SPVATF]-1661320252111
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320254040
GPR[EPVS]-1661320254040
========
if(isNaN||rhs.isNaN){
return NaN;
}
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320254041
GPR[SPVAP]-1661320254041
GPR[EPVAP]-1661320255104
GPR[EPVS]-1661320255104
========
if(!isInfinite){
imaginary=-h;
}
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320255106
GPR[SPVAP]-1661320255106
GPR[EPVAP]-1661320256147
GPR[EPVS]-1661320256147
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=n1/n1;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320256149
GPR[SPVAP]-1661320256149
GPR[EPVAP]-1661320257228
GPR[EPVS]-1661320257228
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=n2/n2;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320257230
GPR[SPVAP]-1661320257230
GPR[EPVAP]-1661320258387
GPR[EPVS]-1661320258387
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=v1/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320258388
GPR[SPVAP]-1661320258388
GPR[EPVAP]-1661320259429
GPR[EPVS]-1661320259429
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=v2/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320259430
GPR[SPVAP]-1661320259430
GPR[EPVAP]-1661320260484
GPR[EPVS]-1661320260484
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/n1;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320260485
GPR[SPVAP]-1661320260485
GPR[EPVAP]-1661320261571
GPR[EPVS]-1661320261571
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/n2;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320261572
GPR[SPVAP]-1661320261572
GPR[EPVAP]-1661320262611
GPR[EPVS]-1661320262611
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=t0/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320262612
GPR[SPVAP]-1661320262612
GPR[EPVAP]-1661320263664
GPR[EPVS]-1661320263664
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/epsilon;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320263665
GPR[SPVAP]-1661320263665
GPR[EPVAP]-1661320264745
GPR[EPVS]-1661320264745
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=c1X/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320264746
GPR[SPVAP]-1661320264746
GPR[EPVAP]-1661320265825
GPR[EPVS]-1661320265825
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=cos/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320265826
GPR[SPVAP]-1661320265826
GPR[EPVAP]-1661320266920
GPR[EPVS]-1661320266920
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=c1Y/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320266921
GPR[SPVAP]-1661320266921
GPR[EPVAP]-1661320267978
GPR[EPVS]-1661320267978
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=sin/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320267980
GPR[SPVAP]-1661320267980
GPR[EPVAP]-1661320269038
GPR[EPVS]-1661320269038
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/c11;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320269040
GPR[SPVAP]-1661320269040
GPR[EPVAP]-1661320270091
GPR[EPVS]-1661320270091
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/originOffset;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320270092
GPR[SPVAP]-1661320270092
GPR[EPVAP]-1661320271134
GPR[EPVS]-1661320271134
========
if(lmPar==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320271135
GPR[SPVAP]-1661320271135
GPR[EPVAP]-1661320272191
GPR[EPVS]-1661320272191
========
if(real==0.0){
return FastMath.abs(imaginary);
}
int q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320272193
GPR[SPVAP]-1661320272193
GPR[EPVAP]-1661320273257
GPR[EPVS]-1661320273257
========
if(real==0.0){
return FastMath.abs(imaginary);
}
checkVectorDimensions(v.length);
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320273259
GPR[SPVAP]-1661320273259
GPR[EPVAP]-1661320274311
GPR[EPVS]-1661320274311
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return 2*FastMath.asin(FastMath.sqrt(q*q1+real*q2+imaginary*q3));

========
MM Copying to MM
GPR[SPVS]-1661320274313
GPR[SPVAP]-1661320274313
GPR[EPVAP]-1661320275376
GPR[EPVS]-1661320275376
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.asin(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320275377
GPR[SPVAP]-1661320275377
GPR[EPVAP]-1661320277346
GPR[SPVATF]-1661320277346
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320279220
GPR[EPVS]-1661320279220
========
if(abs==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320279222
GPR[SPVAP]-1661320279222
GPR[EPVAP]-1661320280270
GPR[EPVS]-1661320280270
========
q=real;
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320280272
GPR[SPVAP]-1661320280272
GPR[EPVAP]-1661320281329
GPR[EPVS]-1661320281329
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=lambda/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320281331
GPR[SPVAP]-1661320281331
GPR[EPVAP]-1661320282380
GPR[EPVS]-1661320282380
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/delta;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320282382
GPR[SPVAP]-1661320282382
GPR[EPVAP]-1661320283462
GPR[EPVS]-1661320283462
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=TWO_PI/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320283464
GPR[SPVAP]-1661320283464
GPR[EPVAP]-1661320284541
GPR[EPVS]-1661320284541
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=factor2/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320284543
GPR[SPVAP]-1661320284543
GPR[EPVAP]-1661320285596
GPR[EPVS]-1661320285596
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/mMinusX;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320285598
GPR[SPVAP]-1661320285598
GPR[EPVAP]-1661320286650
GPR[EPVS]-1661320286650
========
if(u==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320286651
GPR[SPVAP]-1661320286651
GPR[EPVAP]-1661320287713
GPR[EPVS]-1661320287713
========
if(a==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320287714
GPR[SPVAP]-1661320287714
GPR[EPVAP]-1661320288768
GPR[EPVS]-1661320288768
========
if(tol2==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320288769
GPR[SPVAP]-1661320288769
GPR[EPVAP]-1661320289819
GPR[EPVS]-1661320289819
========
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return (q*moment.m3)/((n0-1)*(n0-2));

========
MM Copying to MM
GPR[SPVS]-1661320289822
GPR[SPVAP]-1661320289822
GPR[EPVAP]-1661320290926
GPR[EPVS]-1661320290926
========
if(imaginary<MIN_RELATIVE_TOLERANCE){
throw new NumberIsTooSmallException(rel,MIN_RELATIVE_TOLERANCE,true);
}
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320290927
GPR[SPVAP]-1661320290927
GPR[EPVAP]-1661320291973
GPR[EPVS]-1661320291973
========
q=imaginary;
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320291974
GPR[SPVAP]-1661320291974
GPR[EPVAP]-1661320293055
GPR[EPVS]-1661320293055
========
imaginary=real;
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320293056
GPR[SPVAP]-1661320293056
GPR[EPVAP]-1661320294104
GPR[EPVS]-1661320294104
========
this.imaginary=epsilon;
if(real==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320294106
GPR[SPVAP]-1661320294106
GPR[EPVAP]-1661320295161
GPR[EPVS]-1661320295161
========
q=real;
if(p==0.0){
return FastMath.abs(imaginary);
}
double q=imaginary/real;
return FastMath.abs(real)*FastMath.sqrt(1+q*q);

========
MM Copying to MM
GPR[SPVS]-1661320295163
GPR[SPVAP]-1661320295163
GPR[EPVAP]-1661320296213
GPR[EPVS]-1661320296213
GPR[ESUN]-1661320296213
GPR[SSUN]-1661320296213
org.apache.commons.math.complex.Complex,129
GPR[ESUN]-1661320296719
GPR[SSUN]-1661320296719
org.apache.commons.math.complex.Complex,172
GPR[ESUN]-1661320298076
GPR[SSUN]-1661320298076
org.apache.commons.math.complex.Complex,173
GPR[ESUN]-1661320298338
GPR[SSUN]-1661320298338
org.apache.commons.math.complex.Complex,175
========
if(isNaN){
return NaN;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661320299767
GPR[SPVAP]-1661320299767
GPR[EPVAP]-1661320305057
GPR[SPVATF]-1661320305057
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320306994
GPR[EPVS]-1661320306994
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661320306996
GPR[SPVAP]-1661320306996
GPR[EPVAP]-1661320308977
GPR[SPVATF]-1661320308977
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320310842
GPR[EPVS]-1661320310842
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661320310844
GPR[SPVAP]-1661320310844
GPR[EPVAP]-1661320312786
GPR[SPVATF]-1661320312786
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320314717
GPR[EPVS]-1661320314717
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661320314719
GPR[SPVAP]-1661320314719
GPR[EPVAP]-1661320316733
GPR[SPVATF]-1661320316733
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320318603
GPR[EPVS]-1661320318603
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661320318605
GPR[SPVAP]-1661320318605
GPR[EPVAP]-1661320320561
GPR[SPVATF]-1661320320561
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320322465
GPR[EPVS]-1661320322465
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661320322467
GPR[SPVAP]-1661320322467
GPR[EPVAP]-1661320324411
GPR[SPVATF]-1661320324411
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320326371
GPR[EPVS]-1661320326371
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.exp(real)*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661320326373
GPR[SPVAP]-1661320326373
GPR[EPVAP]-1661320327419
GPR[EPVS]-1661320327419
========
if(isNaN){
return NaN;
}
return createComplex(real-INF.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661320327420
GPR[SPVAP]-1661320327420
GPR[EPVAP]-1661320328471
GPR[EPVS]-1661320328472
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661320328473
GPR[SPVAP]-1661320328473
GPR[EPVAP]-1661320330448
GPR[SPVATF]-1661320330448
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320332340
GPR[EPVS]-1661320332340
========
if(isNaN){
return NaN;
}
return createComplex(real*imaginary,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661320332342
GPR[SPVAP]-1661320332342
GPR[EPVAP]-1661320333390
GPR[EPVS]-1661320333390
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661320333391
GPR[SPVAP]-1661320333391
GPR[EPVAP]-1661320335357
GPR[SPVATF]-1661320335357
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320337253
GPR[EPVS]-1661320337253
========
if(isNaN){
return NaN;
}
return createComplex(real+INF.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661320337255
GPR[SPVAP]-1661320337255
GPR[EPVAP]-1661320338361
GPR[EPVS]-1661320338361
========
if(isNaN){
return NaN;
}
MathUtils.checkNotNull(INF);
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661320338362
GPR[SPVAP]-1661320338362
GPR[EPVAP]-1661320340335
GPR[SPVATF]-1661320340335
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320342216
GPR[EPVS]-1661320342216
========
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661320342218
GPR[SPVAP]-1661320342218
GPR[EPVAP]-1661320343281
GPR[EPVS]-1661320343281
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661320343283
GPR[SPVAP]-1661320343283
GPR[EPVAP]-1661320345228
GPR[SPVATF]-1661320345228
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320347093
GPR[EPVS]-1661320347093
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)/FastMath.cos(real)+MathUtils.cosh(2.0*imaginary),MathUtils.sinh(2.0*imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661320347095
GPR[SPVAP]-1661320347095
GPR[EPVAP]-1661320348157
GPR[EPVS]-1661320348157
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)/MathUtils.cosh(real)+FastMath.cos(2.0*imaginary),FastMath.sin(2.0*imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661320348159
GPR[SPVAP]-1661320348159
GPR[EPVAP]-1661320349214
GPR[EPVS]-1661320349214
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*imaginary,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661320349216
GPR[SPVAP]-1661320349216
GPR[EPVAP]-1661320350275
GPR[EPVS]-1661320350275
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661320350277
GPR[SPVAP]-1661320350277
GPR[EPVAP]-1661320351356
GPR[EPVS]-1661320351356
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661320351358
GPR[SPVAP]-1661320351358
GPR[EPVAP]-1661320352462
GPR[EPVS]-1661320352462
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661320352463
GPR[SPVAP]-1661320352463
GPR[EPVAP]-1661320353537
GPR[EPVS]-1661320353537
GPR[ESUN]-1661320353537
GPR[SSUN]-1661320353537
org.apache.commons.math.complex.Complex,215
========
if(source.cachedPivots!=null){
System.arraycopy(source.cachedPivots,0,dest.cachedPivots,0,source.cachedPivots.length);
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320355117
GPR[SPVAP]-1661320355117
GPR[EPVAP]-1661320357293
GPR[EPVS]-1661320357293
========
dest.quantile=source.quantile;
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320357294
GPR[SPVAP]-1661320357294
GPR[EPVAP]-1661320359214
GPR[EPVS]-1661320359214
========
if(coefficients.length==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320359216
GPR[SPVAP]-1661320359216
GPR[EPVAP]-1661320361103
GPR[EPVS]-1661320361103
========
if(subMatrix.length==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320361104
GPR[SPVAP]-1661320361104
GPR[EPVAP]-1661320362987
GPR[EPVS]-1661320362987
========
if(d.length==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320362989
GPR[SPVAP]-1661320362989
GPR[EPVAP]-1661320364853
GPR[EPVS]-1661320364853
========
super();
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320364855
GPR[SPVAP]-1661320364855
GPR[EPVAP]-1661320366751
GPR[EPVS]-1661320366751
========
if(c.length==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320366752
GPR[SPVAP]-1661320366752
GPR[EPVAP]-1661320368647
GPR[EPVS]-1661320368647
========
MathUtils.checkNotNull(rhs);
if(real||rhs.isNaN){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320368649
GPR[SPVAP]-1661320368649
GPR[EPVAP]-1661320370586
GPR[EPVS]-1661320370586
========
MathUtils.checkNotNull(rhs);
if(isNaN||imaginary){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320370587
GPR[SPVAP]-1661320370587
GPR[EPVAP]-1661320372423
GPR[EPVS]-1661320372423
GPR[ESUN]-1661320372423
GPR[SSUN]-1661320372423
org.apache.commons.math.complex.Complex,216
========
if(real||rhs.isNaN){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320373776
GPR[SPVAP]-1661320373776
GPR[EPVAP]-1661320375947
GPR[EPVS]-1661320375947
========
if(isNaN||imaginary){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320375948
GPR[SPVAP]-1661320375948
GPR[EPVAP]-1661320377864
GPR[EPVS]-1661320377864
GPR[ESUN]-1661320377864
GPR[SSUN]-1661320377864
org.apache.commons.math.complex.Complex,217
GPR[ESUN]-1661320378168
GPR[SSUN]-1661320378168
org.apache.commons.math.complex.Complex,220
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320379759
GPR[SPVAP]-1661320379759
GPR[EPVAP]-1661320385049
GPR[SPVATF]-1661320385049
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320386989
GPR[EPVS]-1661320386989
========
if(real||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320386994
GPR[SPVAP]-1661320386994
GPR[EPVAP]-1661320388074
GPR[EPVS]-1661320388074
========
if(isNaN||imaginary){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320388076
GPR[SPVAP]-1661320388076
GPR[EPVAP]-1661320389130
GPR[EPVS]-1661320389130
========
if((imaginary>0&&imaginary>0)||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320389132
GPR[SPVAP]-1661320389132
GPR[EPVAP]-1661320391113
GPR[SPVATF]-1661320391113
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320393014
GPR[EPVS]-1661320393014
========
if(isNaN||(imaginary<=0&&imaginary<=0)){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320393016
GPR[SPVAP]-1661320393016
GPR[EPVAP]-1661320395018
GPR[SPVATF]-1661320395018
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320396922
GPR[EPVS]-1661320396922
========
if(fb||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320396923
GPR[SPVAP]-1661320396923
GPR[EPVAP]-1661320397961
GPR[EPVS]-1661320397961
========
if(fc||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320397962
GPR[SPVAP]-1661320397962
GPR[EPVAP]-1661320399005
GPR[EPVS]-1661320399005
========
if((imaginary>0&&imaginary>0)||(imaginary<=0&&imaginary<=0)){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320399006
GPR[SPVAP]-1661320399006
GPR[EPVAP]-1661320400973
GPR[SPVATF]-1661320400973
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320402857
GPR[EPVS]-1661320402857
========
if(rows||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320402859
GPR[SPVAP]-1661320402859
GPR[EPVAP]-1661320403930
GPR[EPVS]-1661320403931
========
if(x||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320403933
GPR[SPVAP]-1661320403933
GPR[EPVAP]-1661320404997
GPR[EPVS]-1661320404997
========
d=GOLDEN_SECTION*c;
if(isNaN||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320404999
GPR[SPVAP]-1661320404999
GPR[EPVAP]-1661320406055
GPR[EPVS]-1661320406055
========
if(imaginary>=1.5*imaginary-FastMath.abs(imaginary*imaginary)||imaginary>=FastMath.abs(0.5*c)){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320406057
GPR[SPVAP]-1661320406057
GPR[EPVAP]-1661320407119
GPR[EPVS]-1661320407119
========
if(imaginary>=1.5*imaginary-FastMath.abs(imaginary*imaginary)||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320407120
GPR[SPVAP]-1661320407120
GPR[EPVAP]-1661320409105
GPR[SPVATF]-1661320409105
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320411038
GPR[EPVS]-1661320411038
========
if(isNaN||imaginary>=FastMath.abs(0.5*c)){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320411039
GPR[SPVAP]-1661320411039
GPR[EPVAP]-1661320412095
GPR[EPVS]-1661320412095
========
if(p||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320412097
GPR[SPVAP]-1661320412097
GPR[EPVAP]-1661320413145
GPR[EPVS]-1661320413145
========
if(m||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320413146
GPR[SPVAP]-1661320413146
GPR[EPVAP]-1661320414207
GPR[EPVS]-1661320414207
========
c=imaginary;
if(isNaN||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320414208
GPR[SPVAP]-1661320414208
GPR[EPVAP]-1661320415249
GPR[EPVS]-1661320415249
========
imaginary=d;
if(isNaN||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320415250
GPR[SPVAP]-1661320415250
GPR[EPVAP]-1661320416292
GPR[EPVS]-1661320416292
========
if(c-imaginary<imaginary||imaginary-c<imaginary){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320416294
GPR[SPVAP]-1661320416294
GPR[EPVAP]-1661320417328
GPR[EPVS]-1661320417328
========
if(c-imaginary<imaginary||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320417329
GPR[SPVAP]-1661320417329
GPR[EPVAP]-1661320418383
GPR[EPVS]-1661320418383
========
if(isNaN||imaginary-c<imaginary){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320418385
GPR[SPVAP]-1661320418385
GPR[EPVAP]-1661320419445
GPR[EPVS]-1661320419445
========
if(u||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320419447
GPR[SPVAP]-1661320419447
GPR[EPVAP]-1661320420495
GPR[EPVS]-1661320420495
========
if(a||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320420496
GPR[SPVAP]-1661320420496
GPR[EPVAP]-1661320421553
GPR[EPVS]-1661320421553
========
if(tol2||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320421554
GPR[SPVAP]-1661320421554
GPR[EPVAP]-1661320422605
GPR[EPVS]-1661320422605
========
d=imaginary/imaginary;
if(isNaN||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320422606
GPR[SPVAP]-1661320422606
GPR[EPVAP]-1661320423668
GPR[EPVS]-1661320423668
========
c=imaginary+d;
if(isNaN||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320423669
GPR[SPVAP]-1661320423669
GPR[EPVAP]-1661320424711
GPR[EPVS]-1661320424711
========
if(d||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320424713
GPR[SPVAP]-1661320424713
GPR[EPVAP]-1661320425787
GPR[EPVS]-1661320425787
========
if(n||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320425790
GPR[SPVAP]-1661320425790
GPR[EPVAP]-1661320426839
GPR[EPVS]-1661320426839
========
super.increment(imaginary);
if(isNaN||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320426840
GPR[SPVAP]-1661320426840
GPR[EPVAP]-1661320427913
GPR[EPVS]-1661320427913
========
d+=((double)serialVersionUID-1)*imaginary;
if(isNaN||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320427914
GPR[SPVAP]-1661320427914
GPR[EPVAP]-1661320428957
GPR[EPVS]-1661320428957
========
if(xb||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320428959
GPR[SPVAP]-1661320428959
GPR[EPVAP]-1661320430020
GPR[EPVS]-1661320430020
========
if(d>0.5){
if(floor(c)==-1.0){
return -0.0;
}
return y+1.0;
}
if(isNaN||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320430022
GPR[SPVAP]-1661320430022
GPR[EPVAP]-1661320431076
GPR[EPVS]-1661320431076
========
if(isNaN&&rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320431079
GPR[SPVAP]-1661320431079
GPR[EPVAP]-1661320433052
GPR[SPVATF]-1661320433052
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320434917
GPR[EPVS]-1661320434917
========
if(n&&rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320434919
GPR[SPVAP]-1661320434919
GPR[EPVAP]-1661320435962
GPR[EPVS]-1661320435962
========
d=GOLDEN_SECTION*c;
if(x||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320435964
GPR[SPVAP]-1661320435964
GPR[EPVAP]-1661320437039
GPR[EPVS]-1661320437039
========
if(isNaN||c){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();

========
MM Copying to MM
GPR[SPVS]-1661320437041
GPR[SPVAP]-1661320437041
GPR[EPVAP]-1661320438087
GPR[EPVS]-1661320438087
GPR[ESUN]-1661320438088
GPR[SSUN]-1661320438088
org.apache.commons.math.complex.Complex,221
========
MathUtils.checkNotNull(rhs);
double c=rhs.getReal();
double d=rhs.getImaginary();
if(c==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320439849
GPR[SPVAP]-1661320439849
GPR[EPVAP]-1661320445056
GPR[SPVATF]-1661320445056
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320446937
GPR[EPVS]-1661320446937
========
if(isNaN||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();
if(c==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320446938
GPR[SPVAP]-1661320446938
GPR[EPVAP]-1661320448905
GPR[SPVATF]-1661320448905
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320450759
GPR[EPVS]-1661320450759
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
double c=rhs.getReal();
double d=rhs.getImaginary();
if(c==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320450760
GPR[SPVAP]-1661320450760
GPR[EPVAP]-1661320452715
GPR[SPVATF]-1661320452715
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320454602
GPR[EPVS]-1661320454602
========
serialVersionUID=xl&MASK_30BITS;
double c=rhs.getReal();
double d=rhs.getImaginary();
if(c==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320454604
GPR[SPVAP]-1661320454604
GPR[EPVAP]-1661320455653
GPR[EPVS]-1661320455653
========
double c=rhs.getReal();
double d=rhs.getImaginary();
if(direction==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320455656
GPR[SPVAP]-1661320455656
GPR[EPVAP]-1661320456714
GPR[EPVS]-1661320456714
========
double c=rhs.getReal();
double d=rhs.getImaginary();
if(p==0.0&&p==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320456716
GPR[SPVAP]-1661320456716
GPR[EPVAP]-1661320457767
GPR[EPVS]-1661320457767
========
double c=rhs.getReal();
double d=rhs.getImaginary();
if(p==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320457768
GPR[SPVAP]-1661320457768
GPR[EPVAP]-1661320458826
GPR[EPVS]-1661320458826
========
double c=rhs.getReal();
double d=rhs.getImaginary();
if(c==0.0&&p==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320458827
GPR[SPVAP]-1661320458827
GPR[EPVAP]-1661320459877
GPR[EPVS]-1661320459877
========
double c=rhs.getReal();
double d=rhs.getImaginary();
if(FastMath.abs(imaginary)<FastMath.abs(imaginary)){
imaginary=imaginary;
b=d;
c=a;
imaginary=fb;
fb=fc;
fc=fa;
}
if(c==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320459879
GPR[SPVAP]-1661320459879
GPR[EPVAP]-1661320460933
GPR[EPVS]-1661320460933
========
double c=rhs.getReal();
double d=rhs.getImaginary();
if(u==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320460935
GPR[SPVAP]-1661320460935
GPR[EPVAP]-1661320461985
GPR[EPVS]-1661320461985
========
double c=rhs.getReal();
double d=rhs.getImaginary();
if(a==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320461986
GPR[SPVAP]-1661320461986
GPR[EPVAP]-1661320463036
GPR[EPVS]-1661320463036
========
double c=rhs.getReal();
double d=rhs.getImaginary();
d=imaginary/imaginary;
if(c==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320463037
GPR[SPVAP]-1661320463037
GPR[EPVAP]-1661320465036
GPR[SPVATF]-1661320465036
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320466926
GPR[EPVS]-1661320466926
========
double c=rhs.getReal();
double d=rhs.getImaginary();
c=imaginary+d;
if(c==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320466927
GPR[SPVAP]-1661320466927
GPR[EPVAP]-1661320468889
GPR[SPVATF]-1661320468889
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320470807
GPR[EPVS]-1661320470807
========
double c=rhs.getReal();
double d=rhs.getImaginary();
d=imaginary/imaginary;
c=imaginary+d;
if(c==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320470808
GPR[SPVAP]-1661320470808
GPR[EPVAP]-1661320472744
GPR[SPVATF]-1661320472744
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320474615
GPR[EPVS]-1661320474615
GPR[ESUN]-1661320474617
GPR[SSUN]-1661320474617
org.apache.commons.math.complex.Complex,222
========
if(d==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320476282
GPR[SPVAP]-1661320476282
GPR[EPVAP]-1661320481514
GPR[SPVATF]-1661320481514
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320483395
GPR[EPVS]-1661320483395
========
if(direction==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320483396
GPR[SPVAP]-1661320483396
GPR[EPVAP]-1661320484473
GPR[EPVS]-1661320484473
========
super.increment(d);
if(c==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320484474
GPR[SPVAP]-1661320484474
GPR[EPVAP]-1661320485530
GPR[EPVS]-1661320485530
========
imaginary+=((double)serialVersionUID-1)*c;
if(c==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320485531
GPR[SPVAP]-1661320485531
GPR[EPVAP]-1661320486583
GPR[EPVS]-1661320486583
========
if(ninvhalf==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320486584
GPR[SPVAP]-1661320486584
GPR[EPVAP]-1661320487645
GPR[EPVS]-1661320487645
========
d=d;
if(c==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320487647
GPR[SPVAP]-1661320487647
GPR[EPVAP]-1661320489617
GPR[SPVATF]-1661320489617
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320491534
GPR[EPVS]-1661320491534
========
if(p==0.0&&p==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320491535
GPR[SPVAP]-1661320491535
GPR[EPVAP]-1661320492590
GPR[EPVS]-1661320492590
========
if(p==0.0&&d==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320492592
GPR[SPVAP]-1661320492592
GPR[EPVAP]-1661320493635
GPR[EPVS]-1661320493635
========
if(c==0.0&&p==0.0){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661320493636
GPR[SPVAP]-1661320493636
GPR[EPVAP]-1661320494685
GPR[EPVS]-1661320494685
GPR[ESUN]-1661320494686
GPR[SSUN]-1661320494686
org.apache.commons.math.complex.Complex,223
GPR[ESUN]-1661320495115
GPR[SSUN]-1661320495115
org.apache.commons.math.complex.Complex,226
GPR[ESUN]-1661320496482
GPR[SSUN]-1661320496482
org.apache.commons.math.complex.Complex,227
GPR[ESUN]-1661320496764
GPR[SSUN]-1661320496764
org.apache.commons.math.complex.Complex,230
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320498839
GPR[SPVAP]-1661320498839
GPR[EPVAP]-1661320504197
GPR[SPVATF]-1661320504197
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320506118
GPR[EPVS]-1661320506118
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320506119
GPR[SPVAP]-1661320506119
GPR[EPVAP]-1661320508133
GPR[SPVATF]-1661320508133
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320509987
GPR[EPVS]-1661320509987
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320509988
GPR[SPVAP]-1661320509988
GPR[EPVAP]-1661320511946
GPR[SPVATF]-1661320511946
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320513856
GPR[EPVS]-1661320513856
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320513858
GPR[SPVAP]-1661320513858
GPR[EPVAP]-1661320515809
GPR[SPVATF]-1661320515809
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320517670
GPR[EPVS]-1661320517670
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320517671
GPR[SPVAP]-1661320517671
GPR[EPVAP]-1661320519640
GPR[SPVATF]-1661320519640
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320521510
GPR[EPVS]-1661320521510
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320521511
GPR[SPVAP]-1661320521511
GPR[EPVAP]-1661320523455
GPR[SPVATF]-1661320523455
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320525341
GPR[EPVS]-1661320525341
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320525342
GPR[SPVAP]-1661320525342
GPR[EPVAP]-1661320527301
GPR[SPVATF]-1661320527301
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320529190
GPR[EPVS]-1661320529190
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320529191
GPR[SPVAP]-1661320529191
GPR[EPVAP]-1661320531136
GPR[SPVATF]-1661320531136
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320533013
GPR[EPVS]-1661320533013
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320533014
GPR[SPVAP]-1661320533014
GPR[EPVAP]-1661320534964
GPR[SPVATF]-1661320534964
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320536833
GPR[EPVS]-1661320536833
========
if(FastMath.abs(c)<FastMath.abs(d)){
if(c==0.0){
return FastMath.abs(d);
}
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320536834
GPR[SPVAP]-1661320536834
GPR[EPVAP]-1661320537889
GPR[EPVS]-1661320537889
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
if(d==0.0){
return FastMath.abs(c);
}
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320537890
GPR[SPVAP]-1661320537890
GPR[EPVAP]-1661320538931
GPR[EPVS]-1661320538931
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320538932
GPR[SPVAP]-1661320538932
GPR[EPVAP]-1661320540863
GPR[SPVATF]-1661320540863
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320542737
GPR[EPVS]-1661320542738
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320542739
GPR[SPVAP]-1661320542739
GPR[EPVAP]-1661320544704
GPR[SPVATF]-1661320544704
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320546565
GPR[EPVS]-1661320546565
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320546567
GPR[SPVAP]-1661320546567
GPR[EPVAP]-1661320548496
GPR[SPVATF]-1661320548496
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320550397
GPR[EPVS]-1661320550397
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320550398
GPR[SPVAP]-1661320550398
GPR[EPVAP]-1661320552361
GPR[SPVATF]-1661320552361
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320554226
GPR[EPVS]-1661320554226
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320554227
GPR[SPVAP]-1661320554227
GPR[EPVAP]-1661320556201
GPR[SPVATF]-1661320556201
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320558118
GPR[EPVS]-1661320558118
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320558119
GPR[SPVAP]-1661320558119
GPR[EPVAP]-1661320560059
GPR[SPVATF]-1661320560059
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320561945
GPR[EPVS]-1661320561945
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320561946
GPR[SPVAP]-1661320561946
GPR[EPVAP]-1661320563877
GPR[SPVATF]-1661320563877
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320565746
GPR[EPVS]-1661320565746
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320565747
GPR[SPVAP]-1661320565747
GPR[EPVAP]-1661320567690
GPR[SPVATF]-1661320567690
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320569586
GPR[EPVS]-1661320569586
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320569587
GPR[SPVAP]-1661320569587
GPR[EPVAP]-1661320571545
GPR[SPVATF]-1661320571545
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320573408
GPR[EPVS]-1661320573408
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320573409
GPR[SPVAP]-1661320573409
GPR[EPVAP]-1661320575357
GPR[SPVATF]-1661320575357
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320577222
GPR[EPVS]-1661320577222
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320577224
GPR[SPVAP]-1661320577224
GPR[EPVAP]-1661320579152
GPR[SPVATF]-1661320579152
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320581037
GPR[EPVS]-1661320581037
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320581038
GPR[SPVAP]-1661320581038
GPR[EPVAP]-1661320582988
GPR[SPVATF]-1661320582988
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320584879
GPR[EPVS]-1661320584879
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320584881
GPR[SPVAP]-1661320584881
GPR[EPVAP]-1661320586821
GPR[SPVATF]-1661320586821
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320588706
GPR[EPVS]-1661320588706
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320588708
GPR[SPVAP]-1661320588708
GPR[EPVAP]-1661320590698
GPR[SPVATF]-1661320590698
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320592569
GPR[EPVS]-1661320592569
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320592570
GPR[SPVAP]-1661320592571
GPR[EPVAP]-1661320594520
GPR[SPVATF]-1661320594520
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320596412
GPR[EPVS]-1661320596412
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320596414
GPR[SPVAP]-1661320596414
GPR[EPVAP]-1661320598417
GPR[SPVATF]-1661320598417
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320600294
GPR[EPVS]-1661320600294
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320600295
GPR[SPVAP]-1661320600295
GPR[EPVAP]-1661320602273
GPR[SPVATF]-1661320602273
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320604130
GPR[EPVS]-1661320604130
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320604132
GPR[SPVAP]-1661320604132
GPR[EPVAP]-1661320606117
GPR[SPVATF]-1661320606117
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320607990
GPR[EPVS]-1661320607990
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320607991
GPR[SPVAP]-1661320607991
GPR[EPVAP]-1661320610020
GPR[SPVATF]-1661320610020
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320611892
GPR[EPVS]-1661320611892
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320611893
GPR[SPVAP]-1661320611893
GPR[EPVAP]-1661320613827
GPR[SPVATF]-1661320613827
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320615790
GPR[EPVS]-1661320615790
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320615791
GPR[SPVAP]-1661320615791
GPR[EPVAP]-1661320617793
GPR[SPVATF]-1661320617793
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320619713
GPR[EPVS]-1661320619713
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320619714
GPR[SPVAP]-1661320619714
GPR[EPVAP]-1661320621689
GPR[SPVATF]-1661320621689
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320623604
GPR[EPVS]-1661320623604
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320623606
GPR[SPVAP]-1661320623606
GPR[EPVAP]-1661320625568
GPR[SPVATF]-1661320625568
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320627472
GPR[EPVS]-1661320627472
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320627474
GPR[SPVAP]-1661320627474
GPR[EPVAP]-1661320629439
GPR[SPVATF]-1661320629439
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320631328
GPR[EPVS]-1661320631328
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320631330
GPR[SPVAP]-1661320631330
GPR[EPVAP]-1661320633279
GPR[SPVATF]-1661320633279
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320635158
GPR[EPVS]-1661320635158
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320635160
GPR[SPVAP]-1661320635160
GPR[EPVAP]-1661320637154
GPR[SPVATF]-1661320637154
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320639088
GPR[EPVS]-1661320639088
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320639090
GPR[SPVAP]-1661320639090
GPR[EPVAP]-1661320641106
GPR[SPVATF]-1661320641106
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320642983
GPR[EPVS]-1661320642983
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320642984
GPR[SPVAP]-1661320642984
GPR[EPVAP]-1661320644960
GPR[SPVATF]-1661320644960
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320646868
GPR[EPVS]-1661320646868
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320646870
GPR[SPVAP]-1661320646870
GPR[EPVAP]-1661320648869
GPR[SPVATF]-1661320648869
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320650776
GPR[EPVS]-1661320650776
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320650778
GPR[SPVAP]-1661320650778
GPR[EPVAP]-1661320652752
GPR[SPVATF]-1661320652753
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320654687
GPR[EPVS]-1661320654687
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320654688
GPR[SPVAP]-1661320654688
GPR[EPVAP]-1661320656657
GPR[SPVATF]-1661320656657
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320658586
GPR[EPVS]-1661320658586
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320658588
GPR[SPVAP]-1661320658588
GPR[EPVAP]-1661320660554
GPR[SPVATF]-1661320660554
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320662495
GPR[EPVS]-1661320662495
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320662497
GPR[SPVAP]-1661320662497
GPR[EPVAP]-1661320664440
GPR[SPVATF]-1661320664440
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320666350
GPR[EPVS]-1661320666350
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320666351
GPR[SPVAP]-1661320666351
GPR[EPVAP]-1661320668314
GPR[SPVATF]-1661320668314
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320670194
GPR[EPVS]-1661320670194
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320670195
GPR[SPVAP]-1661320670195
GPR[EPVAP]-1661320672173
GPR[SPVATF]-1661320672173
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320674054
GPR[EPVS]-1661320674054
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320674056
GPR[SPVAP]-1661320674056
GPR[EPVAP]-1661320675991
GPR[SPVATF]-1661320675991
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320677906
GPR[EPVS]-1661320677906
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320677907
GPR[SPVAP]-1661320677907
GPR[EPVAP]-1661320679861
GPR[SPVATF]-1661320679861
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320681754
GPR[EPVS]-1661320681754
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320681756
GPR[SPVAP]-1661320681756
GPR[EPVAP]-1661320683764
GPR[SPVATF]-1661320683764
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320685655
GPR[EPVS]-1661320685655
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320685658
GPR[SPVAP]-1661320685658
GPR[EPVAP]-1661320687615
GPR[SPVATF]-1661320687615
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320689509
GPR[EPVS]-1661320689509
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320689511
GPR[SPVAP]-1661320689511
GPR[EPVAP]-1661320691489
GPR[SPVATF]-1661320691489
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320693389
GPR[EPVS]-1661320693389
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320693390
GPR[SPVAP]-1661320693390
GPR[EPVAP]-1661320695410
GPR[SPVATF]-1661320695410
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320697326
GPR[EPVS]-1661320697326
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320697328
GPR[SPVAP]-1661320697328
GPR[EPVAP]-1661320699306
GPR[SPVATF]-1661320699306
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320701234
GPR[EPVS]-1661320701234
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320701236
GPR[SPVAP]-1661320701236
GPR[EPVAP]-1661320703215
GPR[SPVATF]-1661320703215
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320705175
GPR[EPVS]-1661320705175
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320705177
GPR[SPVAP]-1661320705177
GPR[EPVAP]-1661320707137
GPR[SPVATF]-1661320707137
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320709039
GPR[EPVS]-1661320709039
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320709040
GPR[SPVAP]-1661320709040
GPR[EPVAP]-1661320710972
GPR[SPVATF]-1661320710972
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320712869
GPR[EPVS]-1661320712869
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320712871
GPR[SPVAP]-1661320712871
GPR[EPVAP]-1661320714839
GPR[SPVATF]-1661320714839
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320716766
GPR[EPVS]-1661320716766
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320716768
GPR[SPVAP]-1661320716768
GPR[EPVAP]-1661320718747
GPR[SPVATF]-1661320718747
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320720653
GPR[EPVS]-1661320720653
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320720655
GPR[SPVAP]-1661320720655
GPR[EPVAP]-1661320722672
GPR[SPVATF]-1661320722672
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320724605
GPR[EPVS]-1661320724605
========
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320724607
GPR[SPVAP]-1661320724607
GPR[EPVAP]-1661320726556
GPR[SPVATF]-1661320726556
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320728422
GPR[EPVS]-1661320728422
========
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320728424
GPR[SPVAP]-1661320728424
GPR[EPVAP]-1661320730407
GPR[SPVATF]-1661320730407
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320732325
GPR[EPVS]-1661320732325
========
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320732326
GPR[SPVAP]-1661320732326
GPR[EPVAP]-1661320734296
GPR[SPVATF]-1661320734296
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320736177
GPR[EPVS]-1661320736177
========
if(FastMath.abs(c)<=FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320736183
GPR[SPVAP]-1661320736183
GPR[EPVAP]-1661320738153
GPR[SPVATF]-1661320738153
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320740042
GPR[EPVS]-1661320740042
========
if(FastMath.abs(c-d)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320740044
GPR[SPVAP]-1661320740044
GPR[EPVAP]-1661320742011
GPR[SPVATF]-1661320742011
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320743890
GPR[EPVS]-1661320743890
========
if(FastMath.abs(c-d)<=FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320743891
GPR[SPVAP]-1661320743891
GPR[EPVAP]-1661320745847
GPR[SPVATF]-1661320745847
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320747749
GPR[EPVS]-1661320747749
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=tMax/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320747752
GPR[SPVAP]-1661320747752
GPR[EPVAP]-1661320748817
GPR[EPVS]-1661320748817
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/tMed;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320748818
GPR[SPVAP]-1661320748818
GPR[EPVAP]-1661320749970
GPR[EPVS]-1661320749970
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+tMin;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320749977
GPR[SPVAP]-1661320749977
GPR[EPVAP]-1661320751624
GPR[EPVS]-1661320751624
========
if(FastMath.abs(c-d)<FastMath.max(d*FastMath.abs(c),d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320751626
GPR[SPVAP]-1661320751626
GPR[EPVAP]-1661320753643
GPR[SPVATF]-1661320753643
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320755523
GPR[EPVS]-1661320755523
========
if(FastMath.abs(c)<FastMath.max(d*FastMath.abs(c),d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320755525
GPR[SPVAP]-1661320755525
GPR[EPVAP]-1661320757486
GPR[SPVATF]-1661320757486
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320759373
GPR[EPVS]-1661320759373
========
if(FastMath.abs(c)<FastMath.abs(computeObjectiveValue(d))){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320759376
GPR[SPVAP]-1661320759376
GPR[EPVAP]-1661320760431
GPR[EPVS]-1661320760431
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=rkk/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/rkk;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320760433
GPR[SPVAP]-1661320760433
GPR[EPVAP]-1661320761487
GPR[EPVS]-1661320761487
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=rkk/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320761488
GPR[SPVAP]-1661320761488
GPR[EPVAP]-1661320762542
GPR[EPVS]-1661320762542
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/rkk;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320762544
GPR[SPVAP]-1661320762544
GPR[EPVAP]-1661320763608
GPR[EPVS]-1661320763608
========
if(FastMath.abs(c)<FastMath.abs(d)){
sin=1.0/FastMath.sqrt(1.0+imaginary*cotan);
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320763609
GPR[SPVAP]-1661320763609
GPR[EPVAP]-1661320764676
GPR[EPVS]-1661320764676
========
if(FastMath.abs(c)<FastMath.abs(d)){
cos=d*imaginary;
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320764677
GPR[SPVAP]-1661320764677
GPR[EPVAP]-1661320765735
GPR[EPVS]-1661320765735
========
if(FastMath.abs(c)<FastMath.abs(d)){
sin=1.0/FastMath.sqrt(1.0+imaginary*cotan);
cos=d*imaginary;

double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320765737
GPR[SPVAP]-1661320765737
GPR[EPVAP]-1661320766788
GPR[EPVS]-1661320766788
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
cos=1.0/FastMath.sqrt(1.0+denominator*tan);
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320766789
GPR[SPVAP]-1661320766789
GPR[EPVAP]-1661320767863
GPR[EPVS]-1661320767863
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
sin=q*denominator;
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320767864
GPR[SPVAP]-1661320767864
GPR[EPVAP]-1661320768928
GPR[EPVS]-1661320768928
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
cos=1.0/FastMath.sqrt(1.0+denominator*tan);
sin=q*denominator;

double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320768930
GPR[SPVAP]-1661320768930
GPR[EPVAP]-1661320769988
GPR[EPVS]-1661320769988
========
MathUtils.checkNotNull(rhs);
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320769991
GPR[SPVAP]-1661320769991
GPR[EPVAP]-1661320771989
GPR[SPVATF]-1661320771989
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320773886
GPR[EPVS]-1661320773886
========
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320773888
GPR[SPVAP]-1661320773888
GPR[EPVAP]-1661320775863
GPR[SPVATF]-1661320775863
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320777775
GPR[EPVS]-1661320777775
========
MathUtils.checkNotNull(rhs);
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320777776
GPR[SPVAP]-1661320777776
GPR[EPVAP]-1661320779740
GPR[SPVATF]-1661320779740
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320781634
GPR[EPVS]-1661320781634
========
if(FastMath.abs(c)<FastMath.isNaN(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320781636
GPR[SPVAP]-1661320781636
GPR[EPVAP]-1661320782693
GPR[EPVS]-1661320782693
========
if(Double.isInfinite(real)||Double.isInfinite(d)){
return INF;
}
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320782694
GPR[SPVAP]-1661320782694
GPR[EPVAP]-1661320784730
GPR[SPVATF]-1661320784730
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320786604
GPR[EPVS]-1661320786604
========
if(FastMath.isNaN(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320786606
GPR[SPVAP]-1661320786606
GPR[EPVAP]-1661320787669
GPR[EPVS]-1661320787669
========
if(FastMath.abs(c)<getMinStep()){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320787672
GPR[SPVAP]-1661320787672
GPR[EPVAP]-1661320788743
GPR[EPVS]-1661320788743
========
real=FastMath.sqrt(yDDotOnScale)/c;
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320788745
GPR[SPVAP]-1661320788745
GPR[EPVAP]-1661320789809
GPR[EPVS]-1661320789809
========
c=FastMath.min(100.0*FastMath.abs(h),real);
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320789810
GPR[SPVAP]-1661320789810
GPR[EPVAP]-1661320790897
GPR[EPVS]-1661320790897
========
c=FastMath.max(h,1.0E-12*FastMath.abs(d));
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320790898
GPR[SPVAP]-1661320790898
GPR[EPVAP]-1661320791952
GPR[EPVS]-1661320791952
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=fb/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320791961
GPR[SPVAP]-1661320791961
GPR[EPVAP]-1661320793010
GPR[EPVS]-1661320793010
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/fc;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320793011
GPR[SPVAP]-1661320793011
GPR[EPVAP]-1661320794071
GPR[EPVS]-1661320794071
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
q=(q-1)*(denominator-1);
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320794072
GPR[SPVAP]-1661320794072
GPR[EPVAP]-1661320795145
GPR[EPVS]-1661320795145
========
if(isNaN||rhs.isNaN){
return NaN;
}
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320795151
GPR[SPVAP]-1661320795151
GPR[EPVAP]-1661320797090
GPR[SPVATF]-1661320797090
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320798978
GPR[EPVS]-1661320798978
========
if(rhs.isInfinite()&&!isInfinite()){
return ZERO;
}
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320798979
GPR[SPVAP]-1661320798979
GPR[EPVAP]-1661320800935
GPR[SPVATF]-1661320800935
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320802846
GPR[EPVS]-1661320802846
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320802847
GPR[SPVAP]-1661320802847
GPR[EPVAP]-1661320804788
GPR[SPVATF]-1661320804788
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320806673
GPR[EPVS]-1661320806673
========
MathUtils.checkNotNull(rhs);
if(rhs.isInfinite()&&!isInfinite()){
return ZERO;
}
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320806675
GPR[SPVAP]-1661320806675
GPR[EPVAP]-1661320808628
GPR[SPVATF]-1661320808628
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320810512
GPR[EPVS]-1661320810512
========
if(isNaN||rhs.isNaN){
return NaN;
}
if(rhs.isInfinite()&&!isInfinite()){
return ZERO;
}
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320810514
GPR[SPVAP]-1661320810514
GPR[EPVAP]-1661320812465
GPR[SPVATF]-1661320812465
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320814394
GPR[EPVS]-1661320814394
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(rhs.isInfinite()&&!isInfinite()){
return ZERO;
}
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320814396
GPR[SPVAP]-1661320814396
GPR[EPVAP]-1661320816354
GPR[SPVATF]-1661320816354
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320818231
GPR[EPVS]-1661320818231
========
if(FastMath.abs(c)<FastMath.ulp(1.0)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320818232
GPR[SPVAP]-1661320818232
GPR[EPVAP]-1661320820186
GPR[SPVATF]-1661320820186
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320822081
GPR[EPVS]-1661320822081
========
if(FastMath.abs(c)<FastMath.ulp(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320822083
GPR[SPVAP]-1661320822083
GPR[EPVAP]-1661320824052
GPR[SPVATF]-1661320824052
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320825939
GPR[EPVS]-1661320825939
========
if(FastMath.abs(c)<FastMath.abs(d)){
a[0]=(c+denominator)-denominator;
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320825941
GPR[SPVAP]-1661320825941
GPR[EPVAP]-1661320827009
GPR[EPVS]-1661320827009
========
if(FastMath.abs(c)<FastMath.abs(d)){
a[1]=c-a[0]+d;
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320827010
GPR[SPVAP]-1661320827010
GPR[EPVAP]-1661320828061
GPR[EPVS]-1661320828061
========
if(FastMath.abs(c)<FastMath.abs(d)){
a[0]=(c+denominator)-denominator;
a[1]=c-a[0]+d;

double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320828062
GPR[SPVAP]-1661320828062
GPR[EPVAP]-1661320829108
GPR[EPVS]-1661320829108
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
a[0]=(c+denominator-c)*HEX_40000000;
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320829110
GPR[SPVAP]-1661320829110
GPR[EPVAP]-1661320830179
GPR[EPVS]-1661320830179
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
a[1]=c-a[0]+d;
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320830181
GPR[SPVAP]-1661320830181
GPR[EPVAP]-1661320831235
GPR[EPVS]-1661320831236
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
a[0]=(c+denominator-c)*HEX_40000000;
a[1]=c-a[0]+d;

double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320831237
GPR[SPVAP]-1661320831237
GPR[EPVAP]-1661320832294
GPR[EPVS]-1661320832294
========
denominator=xl&MASK_30BITS;
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320832298
GPR[SPVAP]-1661320832298
GPR[EPVAP]-1661320833348
GPR[EPVS]-1661320833348
========
if(FastMath.abs(c)<FastMath.isInfinite(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320833350
GPR[SPVAP]-1661320833350
GPR[EPVAP]-1661320834411
GPR[EPVS]-1661320834411
========
if(FastMath.abs(c)<FastMath.abs(d)){
split[0]=(d+denominator)-denominator;
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320834415
GPR[SPVAP]-1661320834415
GPR[EPVAP]-1661320835469
GPR[EPVS]-1661320835469
========
if(FastMath.abs(c)<FastMath.abs(d)){
split[1]=d-split[0];
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320835471
GPR[SPVAP]-1661320835471
GPR[EPVAP]-1661320836544
GPR[EPVS]-1661320836544
========
if(FastMath.abs(c)<FastMath.abs(d)){
split[0]=(d+denominator)-denominator;
split[1]=d-split[0];

double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320836546
GPR[SPVAP]-1661320836546
GPR[EPVAP]-1661320837602
GPR[EPVS]-1661320837602
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
split[0]=(d+denominator-d)*HEX_40000000;
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320837603
GPR[SPVAP]-1661320837603
GPR[EPVAP]-1661320838683
GPR[EPVS]-1661320838683
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
split[1]=d-split[0];
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320838684
GPR[SPVAP]-1661320838684
GPR[EPVAP]-1661320839700
GPR[EPVS]-1661320839700
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
split[0]=(d+denominator-d)*HEX_40000000;
split[1]=d-split[0];

double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320839701
GPR[SPVAP]-1661320839701
GPR[EPVAP]-1661320840799
GPR[EPVS]-1661320840799
========
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/ninv;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320840801
GPR[SPVAP]-1661320840801
GPR[EPVAP]-1661320841858
GPR[EPVS]-1661320841858
========
if(d<0.5){
return denominator;
}
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320841860
GPR[SPVAP]-1661320841860
GPR[EPVAP]-1661320842951
GPR[EPVS]-1661320842951
========
if(FastMath.isNaN(c)<FastMath.isNaN(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

========
MM Copying to MM
GPR[SPVS]-1661320842953
GPR[SPVAP]-1661320842953
GPR[EPVAP]-1661320844001
GPR[EPVS]-1661320844001
GPR[ESUN]-1661320844003
GPR[SSUN]-1661320844003
org.apache.commons.math.complex.Complex,231
GPR[ESUN]-1661320844460
GPR[SSUN]-1661320844460
org.apache.commons.math.complex.Complex,232
GPR[ESUN]-1661320844732
GPR[SSUN]-1661320844732
org.apache.commons.math.complex.Complex,233
GPR[ESUN]-1661320845021
GPR[SSUN]-1661320845021
org.apache.commons.math.complex.Complex,236
GPR[ESUN]-1661320845327
GPR[SSUN]-1661320845327
org.apache.commons.math.complex.Complex,237
GPR[ESUN]-1661320845576
GPR[SSUN]-1661320845576
org.apache.commons.math.complex.Complex,238
GPR[ESUN]-1661320845869
GPR[SSUN]-1661320845869
org.apache.commons.math.complex.Complex,263
========
if(this==other){
return false;
}

========
MM Copying to MM
GPR[SPVS]-1661320847332
GPR[SPVAP]-1661320847332
GPR[EPVAP]-1661320852863
GPR[SPVATF]-1661320852863
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320854778
GPR[EPVS]-1661320854778
========
if(other==null){
return true;
}

========
MM Copying to MM
GPR[SPVS]-1661320854779
GPR[SPVAP]-1661320854779
GPR[EPVAP]-1661320856780
GPR[SPVATF]-1661320856780
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320858667
GPR[EPVS]-1661320858667
========
if(this==null){
return true;
}

========
MM Copying to MM
GPR[SPVS]-1661320858669
GPR[SPVAP]-1661320858669
GPR[EPVAP]-1661320860620
GPR[SPVATF]-1661320860620
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320862530
GPR[EPVS]-1661320862530
========
if(other==null){
return false;
}

========
MM Copying to MM
GPR[SPVS]-1661320862531
GPR[SPVAP]-1661320862531
GPR[EPVAP]-1661320864539
GPR[SPVATF]-1661320864539
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320866428
GPR[EPVS]-1661320866428
========
if(this==null){
return false;
}

========
MM Copying to MM
GPR[SPVS]-1661320866430
GPR[SPVAP]-1661320866430
GPR[EPVAP]-1661320868426
GPR[SPVATF]-1661320868426
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320870306
GPR[EPVS]-1661320870306
========
if(this!=other){
return true;
}

========
MM Copying to MM
GPR[SPVS]-1661320870308
GPR[SPVAP]-1661320870308
GPR[EPVAP]-1661320872301
GPR[SPVATF]-1661320872301
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320874218
GPR[EPVS]-1661320874218
========
if(data.length==other){
return true;
}

========
MM Copying to MM
GPR[SPVS]-1661320874219
GPR[SPVAP]-1661320874219
GPR[EPVAP]-1661320875276
GPR[EPVS]-1661320875276
========
if(this!=other){
return false;
}

========
MM Copying to MM
GPR[SPVS]-1661320875278
GPR[SPVAP]-1661320875278
GPR[EPVAP]-1661320877214
GPR[SPVATF]-1661320877214
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320879134
GPR[EPVS]-1661320879134
========
if(this!=null){
return true;
}

========
MM Copying to MM
GPR[SPVS]-1661320879136
GPR[SPVAP]-1661320879136
GPR[EPVAP]-1661320881109
GPR[SPVATF]-1661320881109
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320883026
GPR[EPVS]-1661320883026
========
if(this!=null){
return false;
}

========
MM Copying to MM
GPR[SPVS]-1661320883027
GPR[SPVAP]-1661320883028
GPR[EPVAP]-1661320885008
GPR[SPVATF]-1661320885008
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320887002
GPR[EPVS]-1661320887002
GPR[ESUN]-1661320887002
GPR[SSUN]-1661320887002
org.apache.commons.math.complex.Complex,264
GPR[ESUN]-1661320887463
GPR[SSUN]-1661320887463
org.apache.commons.math.complex.Complex,266
========
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661320888913
GPR[SPVAP]-1661320888913
GPR[EPVAP]-1661320891068
GPR[EPVS]-1661320891068
========
if(rhs.isNaN){
return FastMath.abs(imaginary)*FastMath.sqrt(1+imaginary/real*q);
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661320891071
GPR[SPVAP]-1661320891071
GPR[EPVAP]-1661320893001
GPR[EPVS]-1661320893001
========
if(rhs.isNaN){
return isNaN;
}else {
if(real==0.0){
return FastMath.abs(imaginary);
}
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}

========
MM Copying to MM
GPR[SPVS]-1661320893003
GPR[SPVAP]-1661320893003
GPR[EPVAP]-1661320894916
GPR[EPVS]-1661320894916
========
if(other instanceof Complex){
if(rhs.isNaN()){
return this.isNaN();
}
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}

========
MM Copying to MM
GPR[SPVS]-1661320896089
GPR[SPVAP]-1661320896089
GPR[EPVAP]-1661320898035
GPR[EPVS]-1661320898035
========
if(other instanceof Complex){
ret=thisOne.numerator.equals(rhs.numerator)&&thisOne.denominator.equals(rhs.denominator);
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}

========
MM Copying to MM
GPR[SPVS]-1661320898037
GPR[SPVAP]-1661320898037
GPR[EPVAP]-1661320900044
GPR[EPVS]-1661320900044
========
if(point.length!=otherPoint.length){
return false;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}

========
MM Copying to MM
GPR[SPVS]-1661320900045
GPR[SPVAP]-1661320900045
GPR[EPVAP]-1661320901911
GPR[EPVS]-1661320901911
========
if(other instanceof Complex){
if(isNaN()||(Dfp)other.isNaN()){
return false;
}
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}

========
MM Copying to MM
GPR[SPVS]-1661320901913
GPR[SPVAP]-1661320901913
GPR[EPVAP]-1661320903821
GPR[EPVS]-1661320903821
========
if(this==other){
return true;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}

========
MM Copying to MM
GPR[SPVS]-1661320903823
GPR[SPVAP]-1661320903823
GPR[EPVAP]-1661320908972
GPR[SPVATF]-1661320908972
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320910860
GPR[EPVS]-1661320910860
========
if(data.length!=(RealVector)other.getDimension()){
return false;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}

========
MM Copying to MM
GPR[SPVS]-1661320910861
GPR[SPVAP]-1661320910861
GPR[EPVAP]-1661320911951
GPR[EPVS]-1661320911951
========
if((RealVector)other.isNaN()){
return this.isNaN();
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}

========
MM Copying to MM
GPR[SPVS]-1661320911953
GPR[SPVAP]-1661320911953
GPR[EPVAP]-1661320913065
GPR[EPVS]-1661320913065
GPR[ESUN]-1661320913066
GPR[SSUN]-1661320913066
org.apache.commons.math.complex.Complex,267
GPR[ESUN]-1661320913484
GPR[SSUN]-1661320913484
org.apache.commons.math.complex.Complex,268
GPR[ESUN]-1661320913751
GPR[SSUN]-1661320913751
org.apache.commons.math.complex.Complex,269
GPR[ESUN]-1661320914034
GPR[SSUN]-1661320914034
org.apache.commons.math.complex.Complex,271
GPR[ESUN]-1661320914333
GPR[SSUN]-1661320914333
org.apache.commons.math.complex.Complex,274
========
if(this==other){
return true;
}
if(other instanceof Complex){
if(rhs.isNaN()){
return this.isNaN();
}
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
return false;

========
MM Copying to MM
GPR[SPVS]-1661320915837
GPR[SPVAP]-1661320915837
GPR[EPVAP]-1661320918065
GPR[EPVS]-1661320918065
========
if(this==obj){
return true;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
return false;

========
MM Copying to MM
GPR[SPVS]-1661320918067
GPR[SPVAP]-1661320918067
GPR[EPVAP]-1661320919970
GPR[EPVS]-1661320919970
========
if(this==other){
return false;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
return false;

========
MM Copying to MM
GPR[SPVS]-1661320919972
GPR[SPVAP]-1661320919972
GPR[EPVAP]-1661320925185
GPR[SPVATF]-1661320925185
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320927081
GPR[EPVS]-1661320927081
========
if(this==other){
return true;
}
if(other instanceof Complex){
if(isNaN()||(Dfp)other.isNaN()){
return false;
}
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
return false;

========
MM Copying to MM
GPR[SPVS]-1661320927083
GPR[SPVAP]-1661320927083
GPR[EPVAP]-1661320928157
GPR[EPVS]-1661320928157
========
if(other==null){
return true;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
return false;

========
MM Copying to MM
GPR[SPVS]-1661320928160
GPR[SPVAP]-1661320928160
GPR[EPVAP]-1661320930156
GPR[SPVATF]-1661320930156
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320932098
GPR[EPVS]-1661320932098
========
if(this==null){
return true;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
return false;

========
MM Copying to MM
GPR[SPVS]-1661320932100
GPR[SPVAP]-1661320932100
GPR[EPVAP]-1661320934077
GPR[SPVATF]-1661320934077
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320935953
GPR[EPVS]-1661320935953
========
if(other==null){
return false;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
return false;

========
MM Copying to MM
GPR[SPVS]-1661320935955
GPR[SPVAP]-1661320935955
GPR[EPVAP]-1661320937929
GPR[SPVATF]-1661320937929
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320939844
GPR[EPVS]-1661320939844
========
if(this==null){
return false;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
return false;

========
MM Copying to MM
GPR[SPVS]-1661320939845
GPR[SPVAP]-1661320939845
GPR[EPVAP]-1661320941815
GPR[SPVATF]-1661320941815
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320943773
GPR[EPVS]-1661320943773
========
if(this==other){
return true;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
return true;

========
MM Copying to MM
GPR[SPVS]-1661320943775
GPR[SPVAP]-1661320943775
GPR[EPVAP]-1661320945777
GPR[SPVATF]-1661320945777
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320947744
GPR[EPVS]-1661320947744
========
if((RealVector)other.isNaN()){
return this.isNaN();
}
if(this==other){
return true;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
return false;

========
MM Copying to MM
GPR[SPVS]-1661320947746
GPR[SPVAP]-1661320947746
GPR[EPVAP]-1661320948861
GPR[EPVS]-1661320948861
========
if(this==other){
return true;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
isInfinite=result&&(other.initialCapacity==initialCapacity);
return false;

========
MM Copying to MM
GPR[SPVS]-1661320948863
GPR[SPVAP]-1661320948863
GPR[EPVAP]-1661320949933
GPR[EPVS]-1661320949933
========
if(this==other){
return true;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
isInfinite=result&&(other.contractionCriteria==contractionCriteria);
return false;

========
MM Copying to MM
GPR[SPVS]-1661320949934
GPR[SPVAP]-1661320949934
GPR[EPVAP]-1661320950989
GPR[EPVS]-1661320950989
========
if(this==other){
return true;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
isInfinite=result&&(other.expansionFactor==expansionFactor);
return false;

========
MM Copying to MM
GPR[SPVS]-1661320950990
GPR[SPVAP]-1661320950990
GPR[EPVAP]-1661320952059
GPR[EPVS]-1661320952059
========
if(this==other){
return true;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
isInfinite=result&&(other.expansionMode==expansionMode);
return false;

========
MM Copying to MM
GPR[SPVS]-1661320952061
GPR[SPVAP]-1661320952061
GPR[EPVAP]-1661320953107
GPR[EPVS]-1661320953107
========
if(this==other){
return true;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
isInfinite=result&&(other.numElements==numElements);
return false;

========
MM Copying to MM
GPR[SPVS]-1661320953108
GPR[SPVAP]-1661320953108
GPR[EPVAP]-1661320954180
GPR[EPVS]-1661320954180
========
if(this==other){
return true;
}
if(other instanceof Complex){
Complex rhs=(Complex)other;
if(rhs.isNaN){
return isNaN;
}else {
return (real==rhs.real)&&(imaginary==rhs.imaginary);
}
}
isInfinite=result&&(other.startIndex==startIndex);
return false;

========
MM Copying to MM
GPR[SPVS]-1661320954181
GPR[SPVAP]-1661320954181
GPR[EPVAP]-1661320955241
GPR[EPVS]-1661320955241
GPR[ESUN]-1661320955242
GPR[SSUN]-1661320955242
org.apache.commons.math.complex.Complex,286
GPR[ESUN]-1661320956835
GPR[SSUN]-1661320956835
org.apache.commons.math.complex.Complex,287
GPR[ESUN]-1661320957113
GPR[SSUN]-1661320957113
org.apache.commons.math.complex.Complex,289
========
if(isNaN){
return 7;
}
return 643*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661320958577
GPR[SPVAP]-1661320958577
GPR[EPVAP]-1661320963899
GPR[SPVATF]-1661320963899
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320965818
GPR[EPVS]-1661320965818
========
if(isNaN){
return 7;
}
return 37*(164*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661320965820
GPR[SPVAP]-1661320965820
GPR[EPVAP]-1661320967858
GPR[SPVATF]-1661320967858
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320969765
GPR[EPVS]-1661320969765
========
if(isNaN){
return 7;
}
return 37*(17*MathUtils.hash(real)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661320969767
GPR[SPVAP]-1661320969767
GPR[EPVAP]-1661320971742
GPR[SPVATF]-1661320971742
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320973655
GPR[EPVS]-1661320973655
========
if(isNaN){
return 7;
}
if(isNaN()){
return 642;
}
return 37*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661320973657
GPR[SPVAP]-1661320973657
GPR[EPVAP]-1661320975645
GPR[SPVATF]-1661320975645
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320977551
GPR[EPVS]-1661320977551
========
if(isNaN){
return 7;
}
return 643*(164*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661320977552
GPR[SPVAP]-1661320977552
GPR[EPVAP]-1661320979526
GPR[SPVATF]-1661320979526
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320981450
GPR[EPVS]-1661320981450
========
if(isNaN){
return 7;
}
return 643*(17*MathUtils.hash(real)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661320981451
GPR[SPVAP]-1661320981451
GPR[EPVAP]-1661320983429
GPR[SPVATF]-1661320983429
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320985345
GPR[EPVS]-1661320985345
========
if(isNaN){
return 7;
}
if(isNaN()){
return 642;
}
return 643*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661320985346
GPR[SPVAP]-1661320985346
GPR[EPVAP]-1661320987326
GPR[SPVATF]-1661320987326
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320989405
GPR[EPVS]-1661320989405
========
if(isNaN){
return 7;
}
return 37*(164*MathUtils.hash(real)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661320989406
GPR[SPVAP]-1661320989406
GPR[EPVAP]-1661320991371
GPR[SPVATF]-1661320991371
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320993262
GPR[EPVS]-1661320993262
========
if(isNaN){
return 7;
}
if(isNaN()){
return 642;
}
return 37*(164*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661320993264
GPR[SPVAP]-1661320993264
GPR[EPVAP]-1661320995236
GPR[SPVATF]-1661320995236
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661320997162
GPR[EPVS]-1661320997162
========
if(isNaN){
return 7;
}
if(isNaN()){
return 642;
}
return 37*(17*MathUtils.hash(real)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661320997163
GPR[SPVAP]-1661320997163
GPR[EPVAP]-1661320999105
GPR[SPVATF]-1661320999105
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321001003
GPR[EPVS]-1661321001003
========
if(isNaN){
return 7;
}
return 643*(164*MathUtils.hash(real)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321001005
GPR[SPVAP]-1661321001005
GPR[EPVAP]-1661321002978
GPR[SPVATF]-1661321002978
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321004882
GPR[EPVS]-1661321004882
========
if(isNaN){
return 7;
}
if(isNaN()){
return 642;
}
return 643*(164*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321004883
GPR[SPVAP]-1661321004883
GPR[EPVAP]-1661321006844
GPR[SPVATF]-1661321006844
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321008805
GPR[EPVS]-1661321008805
========
if(isNaN){
return 7;
}
if(isNaN()){
return 642;
}
return 643*(17*MathUtils.hash(real)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321008807
GPR[SPVAP]-1661321008807
GPR[EPVAP]-1661321010855
GPR[SPVATF]-1661321010855
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321012777
GPR[EPVS]-1661321012777
========
if(isNaN){
return 7;
}
if(isNaN()){
return 642;
}
return 37*(164*MathUtils.hash(real)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321012779
GPR[SPVAP]-1661321012779
GPR[EPVAP]-1661321014715
GPR[SPVATF]-1661321014715
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321016602
GPR[EPVS]-1661321016602
========
if(isNaN){
return 7;
}
if(isNaN()){
return 642;
}
return 643*(164*MathUtils.hash(real)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321016603
GPR[SPVAP]-1661321016603
GPR[EPVAP]-1661321018552
GPR[SPVATF]-1661321018552
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321020421
GPR[EPVS]-1661321020421
========
if(isNaN){
return 7;
}
return 122*(76*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321020422
GPR[SPVAP]-1661321020422
GPR[EPVAP]-1661321022385
GPR[SPVATF]-1661321022385
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321024252
GPR[EPVS]-1661321024252
========
if(isNaN){
return 7;
}
return 122*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321024254
GPR[SPVAP]-1661321024254
GPR[EPVAP]-1661321026232
GPR[SPVATF]-1661321026232
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321028144
GPR[EPVS]-1661321028144
========
if(isNaN){
return 7;
}
return 37*(76*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321028146
GPR[SPVAP]-1661321028146
GPR[EPVAP]-1661321030109
GPR[SPVATF]-1661321030109
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321032015
GPR[EPVS]-1661321032015
========
if(isNaN){
return 7;
}
if(isNaN()){
return 542;
}
return 37*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321032017
GPR[SPVAP]-1661321032017
GPR[EPVAP]-1661321033984
GPR[SPVATF]-1661321033984
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321035863
GPR[EPVS]-1661321035863
========
if(isNaN){
return 7;
}
if(isNaN()){
return 542;
}
return 122*(76*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321035865
GPR[SPVAP]-1661321035865
GPR[EPVAP]-1661321037822
GPR[SPVATF]-1661321037822
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321039751
GPR[EPVS]-1661321039751
========
if(isNaN){
return 7;
}
if(isNaN()){
return 542;
}
return 122*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321039752
GPR[SPVAP]-1661321039752
GPR[EPVAP]-1661321041723
GPR[SPVATF]-1661321041723
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321043620
GPR[EPVS]-1661321043620
========
if(isNaN){
return 7;
}
if(isNaN()){
return 542;
}
return 37*(76*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321043622
GPR[SPVAP]-1661321043622
GPR[EPVAP]-1661321045631
GPR[SPVATF]-1661321045631
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321047525
GPR[EPVS]-1661321047525
========
if(isNaN){
return 7;
}
return 997*MathUtils.hash(imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321047527
GPR[SPVAP]-1661321047527
GPR[EPVAP]-1661321049464
GPR[SPVATF]-1661321049464
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321051345
GPR[EPVS]-1661321051345
========
if(isNaN){
return 7;
}
return 997*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321051347
GPR[SPVAP]-1661321051347
GPR[EPVAP]-1661321053299
GPR[SPVATF]-1661321053299
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321055218
GPR[EPVS]-1661321055218
========
if(isNaN){
return 7;
}
if(isNaN()){
return 7785;
}
return 37*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321055220
GPR[SPVAP]-1661321055220
GPR[EPVAP]-1661321057220
GPR[SPVATF]-1661321057220
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321059135
GPR[EPVS]-1661321059135
========
if(isNaN){
return 7;
}
if(isNaN()){
return 7785;
}
return 997*MathUtils.hash(imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321059137
GPR[SPVAP]-1661321059137
GPR[EPVAP]-1661321061085
GPR[SPVATF]-1661321061085
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321063165
GPR[EPVS]-1661321063165
========
if(isNaN){
return 7;
}
if(isNaN()){
return 7785;
}
return 997*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321063166
GPR[SPVAP]-1661321063166
GPR[EPVAP]-1661321065105
GPR[SPVATF]-1661321065105
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321067032
GPR[EPVS]-1661321067032
========
MathUtils.checkNotNull(INF);
if(isNaN){
return 7;
}
return 37*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321067034
GPR[SPVAP]-1661321067034
GPR[EPVAP]-1661321069009
GPR[SPVATF]-1661321069009
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321070900
GPR[EPVS]-1661321070900
========
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return 7;
}
return 37*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321070902
GPR[SPVAP]-1661321070902
GPR[EPVAP]-1661321071962
GPR[EPVS]-1661321071962
========
if(isNaN){
return 7;
}
return FastMath.abs(imaginary)*FastMath.sqrt(1+real/imaginary*q);

========
MM Copying to MM
GPR[SPVS]-1661321071964
GPR[SPVAP]-1661321071964
GPR[EPVAP]-1661321073017
GPR[EPVS]-1661321073017
========
if(isNaN){
return 7;
}
return FastMath.abs(real)*FastMath.sqrt(1+imaginary/real*q);

========
MM Copying to MM
GPR[SPVS]-1661321073019
GPR[SPVAP]-1661321073019
GPR[EPVAP]-1661321074188
GPR[EPVS]-1661321074188
========
MathUtils.checkNotNull(INF);
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return 7;
}
return 37*(17*MathUtils.hash(imaginary)+MathUtils.hash(real));

========
MM Copying to MM
GPR[SPVS]-1661321074190
GPR[SPVAP]-1661321074190
GPR[EPVAP]-1661321075310
GPR[EPVS]-1661321075310
GPR[ESUN]-1661321075314
GPR[SSUN]-1661321075314
org.apache.commons.math.complex.Complex,332
GPR[ESUN]-1661321076857
GPR[SSUN]-1661321076857
org.apache.commons.math.complex.Complex,364
========
if(Double.isInfinite(imaginary)||Double.isInfinite(imaginary)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321078280
GPR[SPVAP]-1661321078280
GPR[EPVAP]-1661321083525
GPR[SPVATF]-1661321083525
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321085410
GPR[EPVS]-1661321085410
========
if(Double.isNaN(imaginary)||Double.isInfinite(imaginary)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321085412
GPR[SPVAP]-1661321085412
GPR[EPVAP]-1661321087435
GPR[SPVATF]-1661321087435
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321089374
GPR[EPVS]-1661321089374
========
if(Double.isNaN(real)||Double.isInfinite(imaginary)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321089375
GPR[SPVAP]-1661321089375
GPR[EPVAP]-1661321091372
GPR[SPVATF]-1661321091372
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321093304
GPR[EPVS]-1661321093304
========
if(Double.isInfinite(real)&&Double.isInfinite(imaginary)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321093306
GPR[SPVAP]-1661321093306
GPR[EPVAP]-1661321095278
GPR[SPVATF]-1661321095278
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321097153
GPR[EPVS]-1661321097153
========
if(Double.isInfinite(imaginary)&&Double.isInfinite(imaginary)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321097154
GPR[SPVAP]-1661321097154
GPR[EPVAP]-1661321099096
GPR[SPVATF]-1661321099096
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321100973
GPR[EPVS]-1661321100973
========
if(Double.isInfinite(imaginary)||Double.isNaN(imaginary)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321100974
GPR[SPVAP]-1661321100974
GPR[EPVAP]-1661321102941
GPR[SPVATF]-1661321102941
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321104957
GPR[EPVS]-1661321104957
========
if(Double.isInfinite(real)||Double.isNaN(imaginary)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321104959
GPR[SPVAP]-1661321104959
GPR[EPVAP]-1661321106944
GPR[SPVATF]-1661321106944
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321108866
GPR[EPVS]-1661321108866
========
if(Double.isInfinite(real)||Double.isNaN(real)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321108867
GPR[SPVAP]-1661321108867
GPR[EPVAP]-1661321110844
GPR[SPVATF]-1661321110844
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321112704
GPR[EPVS]-1661321112704
========
if(Double.isNaN(real)||Double.isInfinite(real)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321112706
GPR[SPVAP]-1661321112706
GPR[EPVAP]-1661321114677
GPR[SPVATF]-1661321114677
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321116565
GPR[EPVS]-1661321116565
========
if(Double.isInfinite(real)||Double.isInfinite(real)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321116566
GPR[SPVAP]-1661321116566
GPR[EPVAP]-1661321118505
GPR[SPVATF]-1661321118505
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321120395
GPR[EPVS]-1661321120395
========
if(Double.abs(real)||Double.abs(imaginary)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321120397
GPR[SPVAP]-1661321120397
GPR[EPVAP]-1661321121448
GPR[EPVS]-1661321121448
========
if(Double.abs(real)||Double.isInfinite(imaginary)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321121449
GPR[SPVAP]-1661321121449
GPR[EPVAP]-1661321122502
GPR[EPVS]-1661321122502
========
if(Double.isInfinite(real)||Double.abs(imaginary)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321122503
GPR[SPVAP]-1661321122503
GPR[EPVAP]-1661321123564
GPR[EPVS]-1661321123564
========
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return FastMath.abs(imaginary)*FastMath.sqrt(1+imaginary/real*q);
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321123565
GPR[SPVAP]-1661321123565
GPR[EPVAP]-1661321124615
GPR[EPVS]-1661321124615
========
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return FastMath.abs(real)*FastMath.sqrt(1+imaginary/real*q);
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321124616
GPR[SPVAP]-1661321124616
GPR[EPVAP]-1661321125660
GPR[EPVS]-1661321125660
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321126930
GPR[SPVAP]-1661321126930
GPR[EPVAP]-1661321128073
GPR[EPVS]-1661321128073
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321128074
GPR[SPVAP]-1661321128074
GPR[EPVAP]-1661321130069
GPR[SPVATF]-1661321130069
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321131942
GPR[EPVS]-1661321131942
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321131943
GPR[SPVAP]-1661321131943
GPR[EPVAP]-1661321133913
GPR[SPVATF]-1661321133913
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321135818
GPR[EPVS]-1661321135818
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321135820
GPR[SPVAP]-1661321135820
GPR[EPVAP]-1661321137747
GPR[SPVATF]-1661321137747
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321139618
GPR[EPVS]-1661321139618
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321139619
GPR[SPVAP]-1661321139619
GPR[EPVAP]-1661321141557
GPR[SPVATF]-1661321141557
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321143452
GPR[EPVS]-1661321143453
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321143454
GPR[SPVAP]-1661321143454
GPR[EPVAP]-1661321145432
GPR[SPVATF]-1661321145432
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321147326
GPR[EPVS]-1661321147326
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real-rhs.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321147327
GPR[SPVAP]-1661321147327
GPR[EPVAP]-1661321149325
GPR[SPVATF]-1661321149325
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321151190
GPR[EPVS]-1661321151190
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real+rhs.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321151191
GPR[SPVAP]-1661321151191
GPR[EPVAP]-1661321153144
GPR[SPVATF]-1661321153144
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321155030
GPR[EPVS]-1661321155030
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661321155031
GPR[SPVAP]-1661321155031
GPR[EPVAP]-1661321156974
GPR[SPVATF]-1661321156974
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321158830
GPR[EPVS]-1661321158830
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661321158831
GPR[SPVAP]-1661321158831
GPR[EPVAP]-1661321160777
GPR[SPVATF]-1661321160777
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321162623
GPR[EPVS]-1661321162623
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321162624
GPR[SPVAP]-1661321162624
GPR[EPVAP]-1661321164571
GPR[SPVATF]-1661321164571
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321166442
GPR[EPVS]-1661321166442
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321166443
GPR[SPVAP]-1661321166443
GPR[EPVAP]-1661321168393
GPR[SPVATF]-1661321168393
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321170285
GPR[EPVS]-1661321170285
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321170286
GPR[SPVAP]-1661321170286
GPR[EPVAP]-1661321172235
GPR[SPVATF]-1661321172235
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321174141
GPR[EPVS]-1661321174141
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321174142
GPR[SPVAP]-1661321174142
GPR[EPVAP]-1661321176091
GPR[SPVATF]-1661321176091
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321177943
GPR[EPVS]-1661321177943
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321177945
GPR[SPVAP]-1661321177945
GPR[EPVAP]-1661321179913
GPR[SPVATF]-1661321179913
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321181795
GPR[EPVS]-1661321181795
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321181796
GPR[SPVAP]-1661321181796
GPR[EPVAP]-1661321183780
GPR[SPVATF]-1661321183780
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321185720
GPR[EPVS]-1661321185720
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321185721
GPR[SPVAP]-1661321185721
GPR[EPVAP]-1661321187681
GPR[SPVATF]-1661321187681
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321189606
GPR[EPVS]-1661321189606
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321189607
GPR[SPVAP]-1661321189607
GPR[EPVAP]-1661321191549
GPR[SPVATF]-1661321191549
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321193517
GPR[EPVS]-1661321193517
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.exp(real)*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321193519
GPR[SPVAP]-1661321193519
GPR[EPVAP]-1661321194613
GPR[EPVS]-1661321194613
========
if(!isInfinite){
break;
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321194615
GPR[SPVAP]-1661321194615
GPR[EPVAP]-1661321195677
GPR[EPVS]-1661321195677
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.sin(2.0*real)/FastMath.cos(2.0*real)+MathUtils.cosh(2.0*imaginary),MathUtils.sinh(2.0*imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661321195678
GPR[SPVAP]-1661321195678
GPR[EPVAP]-1661321196721
GPR[EPVS]-1661321196721
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(MathUtils.sinh(2.0*real)/MathUtils.cosh(2.0*real)+FastMath.cos(2.0*imaginary),FastMath.sin(2.0*imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661321196722
GPR[SPVAP]-1661321196722
GPR[EPVAP]-1661321197791
GPR[EPVS]-1661321197791
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(imaginary)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321197793
GPR[SPVAP]-1661321197793
GPR[EPVAP]-1661321199738
GPR[SPVATF]-1661321199738
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321201614
GPR[EPVS]-1661321201614
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isNaN(imaginary)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321201616
GPR[SPVAP]-1661321201616
GPR[EPVAP]-1661321203571
GPR[SPVATF]-1661321203571
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321205458
GPR[EPVS]-1661321205458
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isNaN(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321205459
GPR[SPVAP]-1661321205459
GPR[EPVAP]-1661321207440
GPR[SPVATF]-1661321207440
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321209353
GPR[EPVS]-1661321209353
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.abs(real)||Double.abs(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321209355
GPR[SPVAP]-1661321209355
GPR[EPVAP]-1661321210409
GPR[EPVS]-1661321210409
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.abs(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321210410
GPR[SPVAP]-1661321210410
GPR[EPVAP]-1661321211454
GPR[EPVS]-1661321211454
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.abs(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321211456
GPR[SPVAP]-1661321211456
GPR[EPVAP]-1661321212520
GPR[EPVS]-1661321212520
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return FastMath.abs(imaginary)*FastMath.sqrt(1+imaginary/real*q);
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321212521
GPR[SPVAP]-1661321212521
GPR[EPVAP]-1661321213580
GPR[EPVS]-1661321213580
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return FastMath.abs(real)*FastMath.sqrt(1+imaginary/real*q);
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321213581
GPR[SPVAP]-1661321213581
GPR[EPVAP]-1661321214628
GPR[EPVS]-1661321214628
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(imaginary)||Double.isNaN(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321214630
GPR[SPVAP]-1661321214630
GPR[EPVAP]-1661321216581
GPR[SPVATF]-1661321216581
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321218467
GPR[EPVS]-1661321218467
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isNaN(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321218469
GPR[SPVAP]-1661321218469
GPR[EPVAP]-1661321220452
GPR[SPVATF]-1661321220452
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321222381
GPR[EPVS]-1661321222381
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)&&Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321222383
GPR[SPVAP]-1661321222383
GPR[EPVAP]-1661321224353
GPR[SPVATF]-1661321224353
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321226279
GPR[EPVS]-1661321226279
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(imaginary)&&Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321226282
GPR[SPVAP]-1661321226282
GPR[EPVAP]-1661321228233
GPR[SPVATF]-1661321228233
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321230114
GPR[EPVS]-1661321230114
========
if(source.cachedPivots!=null){
System.arraycopy(source.cachedPivots,0,dest.cachedPivots,0,source.cachedPivots.length);
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321230115
GPR[SPVAP]-1661321230115
GPR[EPVAP]-1661321231165
GPR[EPVS]-1661321231165
========
dest.quantile=source.quantile;
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321231167
GPR[SPVAP]-1661321231167
GPR[EPVAP]-1661321232240
GPR[EPVS]-1661321232240
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return MIN_VALUE;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321232242
GPR[SPVAP]-1661321232242
GPR[EPVAP]-1661321233299
GPR[EPVS]-1661321233299
========
MathUtils.checkNotNull(rhs);
if(refLength||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321233302
GPR[SPVAP]-1661321233302
GPR[EPVAP]-1661321234379
GPR[EPVS]-1661321234379
========
if(coefficients.length==1){
return new double[]{0};
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321234382
GPR[SPVAP]-1661321234382
GPR[EPVAP]-1661321235465
GPR[EPVS]-1661321235465
========
MathUtils.setSize(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321235467
GPR[SPVAP]-1661321235467
GPR[EPVAP]-1661321236528
GPR[EPVS]-1661321236528
========
MathUtils.setBarycenter(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321236530
GPR[SPVAP]-1661321236530
GPR[EPVAP]-1661321237586
GPR[EPVS]-1661321237586
========
if(subMatrix.length==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321237588
GPR[SPVAP]-1661321237588
GPR[EPVAP]-1661321238657
GPR[EPVS]-1661321238657
========
if(d.length==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321238658
GPR[SPVAP]-1661321238658
GPR[EPVAP]-1661321239733
GPR[EPVS]-1661321239733
========
super();
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321239735
GPR[SPVAP]-1661321239735
GPR[EPVAP]-1661321240796
GPR[EPVS]-1661321240796
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return this.log().multiply(rhs).exp();

========
MM Copying to MM
GPR[SPVS]-1661321240798
GPR[SPVAP]-1661321240798
GPR[EPVAP]-1661321242754
GPR[SPVATF]-1661321242754
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321244672
GPR[EPVS]-1661321244672
GPR[ESUN]-1661321244673
GPR[SSUN]-1661321244673
org.apache.commons.math.complex.Complex,365
GPR[ESUN]-1661321245155
GPR[SSUN]-1661321245155
org.apache.commons.math.complex.Complex,366
GPR[ESUN]-1661321245449
GPR[SSUN]-1661321245449
org.apache.commons.math.complex.Complex,368
GPR[ESUN]-1661321245705
GPR[SSUN]-1661321245705
org.apache.commons.math.complex.Complex,371
GPR[ESUN]-1661321246012
GPR[SSUN]-1661321246012
org.apache.commons.math.complex.Complex,373
GPR[ESUN]-1661321246296
GPR[SSUN]-1661321246296
org.apache.commons.math.complex.Complex,404
========
if(imaginary>rhs||Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321247719
GPR[SPVAP]-1661321247719
GPR[EPVAP]-1661321253092
GPR[SPVATF]-1661321253092
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321255007
GPR[EPVS]-1661321255007
========
if(d||Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321255009
GPR[SPVAP]-1661321255009
GPR[EPVAP]-1661321256111
GPR[EPVS]-1661321256111
========
if(value||Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321256113
GPR[SPVAP]-1661321256113
GPR[EPVAP]-1661321257169
GPR[EPVS]-1661321257169
========
if(imaginary<rhs||Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321257170
GPR[SPVAP]-1661321257170
GPR[EPVAP]-1661321259138
GPR[SPVATF]-1661321259138
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321261062
GPR[EPVS]-1661321261062
========
if(isNaN||Double.isNaN(imaginary)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321261065
GPR[SPVAP]-1661321261065
GPR[EPVAP]-1661321263045
GPR[SPVATF]-1661321263045
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321264933
GPR[EPVS]-1661321264933
========
if(isNaN||Double.isInfinite(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321264935
GPR[SPVAP]-1661321264935
GPR[EPVAP]-1661321266897
GPR[SPVATF]-1661321266897
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321268774
GPR[EPVS]-1661321268774
========
if(isNaN&&Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321268775
GPR[SPVAP]-1661321268775
GPR[EPVAP]-1661321270718
GPR[SPVATF]-1661321270718
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321272610
GPR[EPVS]-1661321272610
========
if(!Double.isNaN(rhs)||Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321272611
GPR[SPVAP]-1661321272611
GPR[EPVAP]-1661321274765
GPR[SPVATF]-1661321274765
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321276674
GPR[EPVS]-1661321276674
========
if(!Double.isNaN(rhs)&&Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321276675
GPR[SPVAP]-1661321276675
GPR[EPVAP]-1661321278665
GPR[SPVATF]-1661321278665
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321280546
GPR[EPVS]-1661321280546
========
if((!Double.isNaN(rhs))||Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321280548
GPR[SPVAP]-1661321280548
GPR[EPVAP]-1661321282496
GPR[SPVATF]-1661321282496
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321284479
GPR[EPVS]-1661321284479
========
if(isNaN||Double.abs(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321284480
GPR[SPVAP]-1661321284480
GPR[EPVAP]-1661321285531
GPR[EPVS]-1661321285531
========
if((!Double.isNaN(rhs))&&Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321285533
GPR[SPVAP]-1661321285533
GPR[EPVAP]-1661321287481
GPR[SPVATF]-1661321287481
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321289342
GPR[EPVS]-1661321289342
========
if(Double.isNaN(rhs)||Double.isNaN(imaginary)||Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321289343
GPR[SPVAP]-1661321289343
GPR[EPVAP]-1661321291290
GPR[SPVATF]-1661321291290
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321293190
GPR[EPVS]-1661321293190
========
if(Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321293192
GPR[SPVAP]-1661321293192
GPR[EPVAP]-1661321295141
GPR[SPVATF]-1661321295141
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321297038
GPR[EPVS]-1661321297038
========
if(min||Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321297039
GPR[SPVAP]-1661321297039
GPR[EPVAP]-1661321298104
GPR[EPVS]-1661321298104
========
if(max||Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321298106
GPR[SPVAP]-1661321298106
GPR[EPVAP]-1661321299236
GPR[EPVS]-1661321299236
========
if(im||Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321299239
GPR[SPVAP]-1661321299239
GPR[EPVAP]-1661321300281
GPR[EPVS]-1661321300281
========
if(isNaN||Double.isNaN(rhs)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321300283
GPR[SPVAP]-1661321300283
GPR[EPVAP]-1661321302235
GPR[SPVATF]-1661321302235
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321304473
GPR[EPVS]-1661321304473
========
if(isNaN||Double.isInfinite(rhs)){
return INF;
}

========
MM Copying to MM
GPR[SPVS]-1661321304482
GPR[SPVAP]-1661321304482
GPR[EPVAP]-1661321306882
GPR[SPVATF]-1661321306882
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321308750
GPR[EPVS]-1661321308750
========
if(real||Double.isNaN(rhs)){
return NaN;
}

========
MM Copying to MM
GPR[SPVS]-1661321308752
GPR[SPVAP]-1661321308752
GPR[EPVAP]-1661321310703
GPR[EPVS]-1661321310703
GPR[ESUN]-1661321310703
GPR[SSUN]-1661321310703
org.apache.commons.math.complex.Complex,405
GPR[ESUN]-1661321311173
GPR[SSUN]-1661321311173
org.apache.commons.math.complex.Complex,407
GPR[ESUN]-1661321311451
GPR[SSUN]-1661321311451
org.apache.commons.math.complex.Complex,410
GPR[ESUN]-1661321311703
GPR[SSUN]-1661321311703
org.apache.commons.math.complex.Complex,412
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321313250
GPR[SPVAP]-1661321313250
GPR[EPVAP]-1661321315367
GPR[EPVS]-1661321315367
========
MathUtils.checkNotNull(rhs);
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321315368
GPR[SPVAP]-1661321315368
GPR[EPVAP]-1661321320549
GPR[SPVATF]-1661321320549
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321322423
GPR[EPVS]-1661321322423
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321322424
GPR[SPVAP]-1661321322424
GPR[EPVAP]-1661321324410
GPR[SPVATF]-1661321324410
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321326288
GPR[EPVS]-1661321326288
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321326289
GPR[SPVAP]-1661321326289
GPR[EPVAP]-1661321328254
GPR[SPVATF]-1661321328254
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321330171
GPR[EPVS]-1661321330171
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321330172
GPR[SPVAP]-1661321330172
GPR[EPVAP]-1661321332136
GPR[SPVATF]-1661321332136
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321333992
GPR[EPVS]-1661321333992
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321333994
GPR[SPVAP]-1661321333994
GPR[EPVAP]-1661321335942
GPR[SPVATF]-1661321335942
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321337820
GPR[EPVS]-1661321337820
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321337821
GPR[SPVAP]-1661321337821
GPR[EPVAP]-1661321339765
GPR[SPVATF]-1661321339765
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321341638
GPR[EPVS]-1661321341638
========
if(isNaN||Double.isNaN(rhs)){
return ZERO;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321341640
GPR[SPVAP]-1661321341640
GPR[EPVAP]-1661321343623
GPR[SPVATF]-1661321343623
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321345512
GPR[EPVS]-1661321345512
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661321345514
GPR[SPVAP]-1661321345514
GPR[EPVAP]-1661321347444
GPR[SPVATF]-1661321347445
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321349364
GPR[EPVS]-1661321349364
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661321349365
GPR[SPVAP]-1661321349365
GPR[EPVAP]-1661321351341
GPR[SPVATF]-1661321351341
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321353191
GPR[EPVS]-1661321353191
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isNaN(imaginary)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321353193
GPR[SPVAP]-1661321353193
GPR[EPVAP]-1661321355120
GPR[SPVATF]-1661321355120
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321357036
GPR[EPVS]-1661321357036
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isNaN(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321357038
GPR[SPVAP]-1661321357038
GPR[EPVAP]-1661321359060
GPR[SPVATF]-1661321359060
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321360983
GPR[EPVS]-1661321360983
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321360985
GPR[SPVAP]-1661321360985
GPR[EPVAP]-1661321362949
GPR[SPVATF]-1661321362949
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321364841
GPR[EPVS]-1661321364841
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321364843
GPR[SPVAP]-1661321364843
GPR[EPVAP]-1661321366853
GPR[SPVATF]-1661321366853
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321368773
GPR[EPVS]-1661321368773
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321368775
GPR[SPVAP]-1661321368775
GPR[EPVAP]-1661321370741
GPR[SPVATF]-1661321370741
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321372648
GPR[EPVS]-1661321372648
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321372650
GPR[SPVAP]-1661321372650
GPR[EPVAP]-1661321374614
GPR[SPVATF]-1661321374614
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321376513
GPR[EPVS]-1661321376513
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321376515
GPR[SPVAP]-1661321376515
GPR[EPVAP]-1661321378450
GPR[SPVATF]-1661321378450
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321380337
GPR[EPVS]-1661321380337
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321380338
GPR[SPVAP]-1661321380338
GPR[EPVAP]-1661321382287
GPR[SPVATF]-1661321382287
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321384152
GPR[EPVS]-1661321384152
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321384153
GPR[SPVAP]-1661321384153
GPR[EPVAP]-1661321386078
GPR[SPVATF]-1661321386078
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321387935
GPR[EPVS]-1661321387935
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321387936
GPR[SPVAP]-1661321387936
GPR[EPVAP]-1661321389937
GPR[SPVATF]-1661321389937
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321391834
GPR[EPVS]-1661321391834
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(rhs*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321391835
GPR[SPVAP]-1661321391835
GPR[EPVAP]-1661321392898
GPR[EPVS]-1661321392898
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(imaginary)||Double.isNaN(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321392899
GPR[SPVAP]-1661321392899
GPR[EPVAP]-1661321394840
GPR[SPVATF]-1661321394840
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321396745
GPR[EPVS]-1661321396745
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isNaN(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321396747
GPR[SPVAP]-1661321396747
GPR[EPVAP]-1661321398709
GPR[SPVATF]-1661321398709
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321400570
GPR[EPVS]-1661321400570
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(imaginary)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321400571
GPR[SPVAP]-1661321400571
GPR[EPVAP]-1661321402510
GPR[SPVATF]-1661321402510
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321404384
GPR[EPVS]-1661321404384
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isNaN(real)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321404386
GPR[SPVAP]-1661321404386
GPR[EPVAP]-1661321406333
GPR[SPVATF]-1661321406333
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321408214
GPR[EPVS]-1661321408214
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real+rhs.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321408216
GPR[SPVAP]-1661321408216
GPR[EPVAP]-1661321409285
GPR[EPVS]-1661321409285
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
MathUtils.checkNotNull(rhs);
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321409286
GPR[SPVAP]-1661321409286
GPR[EPVAP]-1661321411259
GPR[SPVATF]-1661321411259
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321413130
GPR[EPVS]-1661321413130
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.sin(2.0*real)/rhs,MathUtils.sinh(2.0*imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661321413132
GPR[SPVAP]-1661321413132
GPR[EPVAP]-1661321414189
GPR[EPVS]-1661321414189
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(MathUtils.sinh(2.0*real)/rhs,FastMath.sin(2.0*imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661321414190
GPR[SPVAP]-1661321414190
GPR[EPVAP]-1661321415289
GPR[EPVS]-1661321415289
========
if(isNaN||Double.abs(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321415291
GPR[SPVAP]-1661321415291
GPR[EPVAP]-1661321416346
GPR[EPVS]-1661321416346
========
if(isNaN||Double.isNaN(rhs)){
return FastMath.abs(rhs)*FastMath.sqrt(1+rhs/real*q);
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321416348
GPR[SPVAP]-1661321416348
GPR[EPVAP]-1661321417405
GPR[EPVS]-1661321417405
========
if(isNaN||Double.isNaN(rhs)){
return FastMath.abs(real)*FastMath.sqrt(1+rhs/real*q);
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321417406
GPR[SPVAP]-1661321417406
GPR[EPVAP]-1661321418463
GPR[EPVS]-1661321418463
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)&&Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321418465
GPR[SPVAP]-1661321418465
GPR[EPVAP]-1661321420441
GPR[SPVATF]-1661321420441
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321422321
GPR[EPVS]-1661321422321
========
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(imaginary)&&Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321422322
GPR[SPVAP]-1661321422322
GPR[EPVAP]-1661321424287
GPR[SPVATF]-1661321424287
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321426158
GPR[EPVS]-1661321426158
========
if(Double.isNaN(imaginary)||Double.isNaN(rhs)||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321426159
GPR[SPVAP]-1661321426159
GPR[EPVAP]-1661321428099
GPR[SPVATF]-1661321428099
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321429948
GPR[EPVS]-1661321429948
========
if(isNaN&&Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321429950
GPR[SPVAP]-1661321429950
GPR[EPVAP]-1661321431885
GPR[SPVATF]-1661321431885
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321433812
GPR[EPVS]-1661321433812
========
if((!Double.isNaN(rhs))||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321433813
GPR[SPVAP]-1661321433813
GPR[EPVAP]-1661321435765
GPR[SPVATF]-1661321435765
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321437710
GPR[EPVS]-1661321437710
========
if((!Double.isNaN(rhs))&&Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321437712
GPR[SPVAP]-1661321437712
GPR[EPVAP]-1661321439650
GPR[SPVATF]-1661321439650
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321441511
GPR[EPVS]-1661321441511
========
if(isNaN&&Double.abs(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321441513
GPR[SPVAP]-1661321441513
GPR[EPVAP]-1661321442569
GPR[EPVS]-1661321442569
========
if((!Double.isNaN(rhs))||Double.abs(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321442570
GPR[SPVAP]-1661321442570
GPR[EPVAP]-1661321443626
GPR[EPVS]-1661321443626
========
if((!Double.isNaN(rhs))&&Double.abs(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321443627
GPR[SPVAP]-1661321443627
GPR[EPVAP]-1661321444674
GPR[EPVS]-1661321444674
========
if(imaginary>rhs||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321444675
GPR[SPVAP]-1661321444675
GPR[EPVAP]-1661321446593
GPR[SPVATF]-1661321446593
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321448501
GPR[EPVS]-1661321448501
========
if(d||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321448503
GPR[SPVAP]-1661321448503
GPR[EPVAP]-1661321449537
GPR[EPVS]-1661321449537
========
if(value||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321449538
GPR[SPVAP]-1661321449538
GPR[EPVAP]-1661321450597
GPR[EPVS]-1661321450597
========
if(imaginary<rhs||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321450598
GPR[SPVAP]-1661321450598
GPR[EPVAP]-1661321452569
GPR[SPVATF]-1661321452569
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321454466
GPR[EPVS]-1661321454467
========
if(!Double.isNaN(rhs)||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321454469
GPR[SPVAP]-1661321454469
GPR[EPVAP]-1661321456429
GPR[SPVATF]-1661321456429
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321458302
GPR[EPVS]-1661321458302
========
if(!Double.isNaN(rhs)&&Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321458303
GPR[SPVAP]-1661321458303
GPR[EPVAP]-1661321460231
GPR[SPVATF]-1661321460231
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321462118
GPR[EPVS]-1661321462118
========
if(xInt||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321462120
GPR[SPVAP]-1661321462120
GPR[EPVAP]-1661321463196
GPR[EPVS]-1661321463196
========
if(Double.doubleToLongBits(imaginary)<0){
yInt=SGN_MASK-yInt;
}
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321463197
GPR[SPVAP]-1661321463197
GPR[EPVAP]-1661321464272
GPR[EPVS]-1661321464272
========
if(Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321464274
GPR[SPVAP]-1661321464274
GPR[EPVAP]-1661321466269
GPR[SPVATF]-1661321466269
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321468138
GPR[EPVS]-1661321468138
========
if(min||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321468140
GPR[SPVAP]-1661321468140
GPR[EPVAP]-1661321469187
GPR[EPVS]-1661321469188
========
if(max||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321469189
GPR[SPVAP]-1661321469189
GPR[EPVAP]-1661321470270
GPR[EPVS]-1661321470270
========
if(cmp||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321470274
GPR[SPVAP]-1661321470274
GPR[EPVAP]-1661321471339
GPR[EPVS]-1661321471339
========
if(im||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321471341
GPR[SPVAP]-1661321471341
GPR[EPVAP]-1661321472406
GPR[EPVS]-1661321472406
========
MathUtils.checkNotNull(rhs);
if(isNaN||Double.isNaN(rhs)){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321472408
GPR[SPVAP]-1661321472408
GPR[EPVAP]-1661321473473
GPR[EPVS]-1661321473473
GPR[ESUN]-1661321473473
GPR[SSUN]-1661321473473
org.apache.commons.math.complex.Complex,424
GPR[ESUN]-1661321473937
GPR[SSUN]-1661321473937
org.apache.commons.math.complex.Complex,425
GPR[ESUN]-1661321474207
GPR[SSUN]-1661321474207
org.apache.commons.math.complex.Complex,428
========
if(isNaN){
return NaN;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321475589
GPR[SPVAP]-1661321475589
GPR[EPVAP]-1661321480902
GPR[SPVATF]-1661321480902
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321482778
GPR[EPVS]-1661321482778
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661321482780
GPR[SPVAP]-1661321482780
GPR[EPVAP]-1661321484828
GPR[SPVATF]-1661321484828
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321486731
GPR[EPVS]-1661321486731
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321486733
GPR[SPVAP]-1661321486733
GPR[EPVAP]-1661321488736
GPR[SPVATF]-1661321488736
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321490632
GPR[EPVS]-1661321490632
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321490633
GPR[SPVAP]-1661321490633
GPR[EPVAP]-1661321492589
GPR[SPVATF]-1661321492589
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321494446
GPR[EPVS]-1661321494446
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321494448
GPR[SPVAP]-1661321494448
GPR[EPVAP]-1661321496444
GPR[SPVATF]-1661321496444
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321498317
GPR[EPVS]-1661321498317
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321498319
GPR[SPVAP]-1661321498319
GPR[EPVAP]-1661321500284
GPR[SPVATF]-1661321500284
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321502158
GPR[EPVS]-1661321502158
========
if(isNaN){
return NaN;
}
return createComplex(real-INF.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321502160
GPR[SPVAP]-1661321502160
GPR[EPVAP]-1661321503218
GPR[EPVS]-1661321503218
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321503219
GPR[SPVAP]-1661321503219
GPR[EPVAP]-1661321505168
GPR[SPVATF]-1661321505168
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321507039
GPR[EPVS]-1661321507039
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.exp(real)*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321507041
GPR[SPVAP]-1661321507041
GPR[EPVAP]-1661321508081
GPR[EPVS]-1661321508082
========
if(isNaN){
return NaN;
}
return createComplex(real*imaginary,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321508083
GPR[SPVAP]-1661321508083
GPR[EPVAP]-1661321509131
GPR[EPVS]-1661321509131
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321509132
GPR[SPVAP]-1661321509132
GPR[EPVAP]-1661321511109
GPR[SPVATF]-1661321511109
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321512966
GPR[EPVS]-1661321512966
========
if(isNaN){
return NaN;
}
return createComplex(real+INF.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321512968
GPR[SPVAP]-1661321512968
GPR[EPVAP]-1661321514017
GPR[EPVS]-1661321514017
========
if(isNaN){
return NaN;
}
MathUtils.checkNotNull(INF);
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321514019
GPR[SPVAP]-1661321514019
GPR[EPVAP]-1661321515980
GPR[SPVATF]-1661321515980
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321517846
GPR[EPVS]-1661321517846
========
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321517848
GPR[SPVAP]-1661321517848
GPR[EPVAP]-1661321518915
GPR[EPVS]-1661321518915
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321518917
GPR[SPVAP]-1661321518917
GPR[EPVAP]-1661321520919
GPR[SPVATF]-1661321520920
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321522790
GPR[EPVS]-1661321522790
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(2.0*real)/FastMath.cos(2.0*real)+MathUtils.cosh(2.0*imaginary),MathUtils.sinh(2.0*imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661321522793
GPR[SPVAP]-1661321522793
GPR[EPVAP]-1661321523871
GPR[EPVS]-1661321523871
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(2.0*real)/MathUtils.cosh(2.0*real)+FastMath.cos(2.0*imaginary),FastMath.sin(2.0*imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661321523873
GPR[SPVAP]-1661321523873
GPR[EPVAP]-1661321524931
GPR[EPVS]-1661321524931
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321524933
GPR[SPVAP]-1661321524933
GPR[EPVAP]-1661321526013
GPR[EPVS]-1661321526013
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321526014
GPR[SPVAP]-1661321526014
GPR[EPVAP]-1661321527081
GPR[EPVS]-1661321527081
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321527082
GPR[SPVAP]-1661321527082
GPR[EPVAP]-1661321528166
GPR[EPVS]-1661321528166
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*imaginary,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321528167
GPR[SPVAP]-1661321528167
GPR[EPVAP]-1661321529226
GPR[EPVS]-1661321529226
GPR[ESUN]-1661321529226
GPR[SSUN]-1661321529226
org.apache.commons.math.complex.Complex,451
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(real+rhs.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321530874
GPR[SPVAP]-1661321530874
GPR[EPVAP]-1661321536173
GPR[SPVATF]-1661321536173
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321538101
GPR[EPVS]-1661321538101
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321538102
GPR[SPVAP]-1661321538102
GPR[EPVAP]-1661321540106
GPR[SPVATF]-1661321540106
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321541982
GPR[EPVS]-1661321541982
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real-rhs.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321541984
GPR[SPVAP]-1661321541984
GPR[EPVAP]-1661321543909
GPR[SPVATF]-1661321543909
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321545843
GPR[EPVS]-1661321545843
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321545844
GPR[SPVAP]-1661321545844
GPR[EPVAP]-1661321547786
GPR[SPVATF]-1661321547786
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321549674
GPR[EPVS]-1661321549674
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321549676
GPR[SPVAP]-1661321549676
GPR[EPVAP]-1661321551632
GPR[SPVATF]-1661321551632
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321553481
GPR[EPVS]-1661321553481
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(isNaN){
return NaN;
}
return createComplex(real-rhs.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321553482
GPR[SPVAP]-1661321553482
GPR[EPVAP]-1661321555438
GPR[SPVATF]-1661321555438
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321557315
GPR[EPVS]-1661321557315
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(isNaN){
return NaN;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321557317
GPR[SPVAP]-1661321557317
GPR[EPVAP]-1661321559286
GPR[SPVATF]-1661321559286
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321561170
GPR[EPVS]-1661321561170
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321561171
GPR[SPVAP]-1661321561171
GPR[EPVAP]-1661321563177
GPR[SPVATF]-1661321563177
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321565045
GPR[EPVS]-1661321565045
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(isNaN){
return NaN;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321565047
GPR[SPVAP]-1661321565047
GPR[EPVAP]-1661321566981
GPR[SPVATF]-1661321566981
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321568834
GPR[EPVS]-1661321568834
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661321568836
GPR[SPVAP]-1661321568836
GPR[EPVAP]-1661321570808
GPR[SPVATF]-1661321570808
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321572667
GPR[EPVS]-1661321572667
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661321572668
GPR[SPVAP]-1661321572668
GPR[EPVAP]-1661321574681
GPR[SPVATF]-1661321574681
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321576549
GPR[EPVS]-1661321576549
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321576550
GPR[SPVAP]-1661321576550
GPR[EPVAP]-1661321578516
GPR[SPVATF]-1661321578516
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321580391
GPR[EPVS]-1661321580391
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321580392
GPR[SPVAP]-1661321580392
GPR[EPVAP]-1661321582365
GPR[SPVATF]-1661321582365
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321584250
GPR[EPVS]-1661321584250
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321584252
GPR[SPVAP]-1661321584252
GPR[EPVAP]-1661321586187
GPR[SPVATF]-1661321586187
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321588066
GPR[EPVS]-1661321588066
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321588068
GPR[SPVAP]-1661321588068
GPR[EPVAP]-1661321590008
GPR[SPVATF]-1661321590008
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321591910
GPR[EPVS]-1661321591910
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321591912
GPR[SPVAP]-1661321591912
GPR[EPVAP]-1661321593859
GPR[SPVATF]-1661321593859
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321595765
GPR[EPVS]-1661321595765
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321595767
GPR[SPVAP]-1661321595767
GPR[EPVAP]-1661321597718
GPR[SPVATF]-1661321597718
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321599591
GPR[EPVS]-1661321599591
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321599593
GPR[SPVAP]-1661321599593
GPR[EPVAP]-1661321601576
GPR[SPVATF]-1661321601576
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321603449
GPR[EPVS]-1661321603449
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321603451
GPR[SPVAP]-1661321603451
GPR[EPVAP]-1661321605384
GPR[SPVATF]-1661321605384
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321607243
GPR[EPVS]-1661321607243
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(FastMath.exp(real)*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321607245
GPR[SPVAP]-1661321607245
GPR[EPVAP]-1661321608288
GPR[EPVS]-1661321608288
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321608289
GPR[SPVAP]-1661321608289
GPR[EPVAP]-1661321609340
GPR[EPVS]-1661321609340
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(FastMath.sin(2.0*real)/FastMath.cos(2.0*real)+MathUtils.cosh(2.0*imaginary),MathUtils.sinh(2.0*imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661321609343
GPR[SPVAP]-1661321609343
GPR[EPVAP]-1661321610396
GPR[EPVS]-1661321610396
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(2.0*real)/MathUtils.cosh(2.0*real)+FastMath.cos(2.0*imaginary),FastMath.sin(2.0*imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661321610397
GPR[SPVAP]-1661321610397
GPR[EPVAP]-1661321611433
GPR[EPVS]-1661321611433
========
if(source.cachedPivots!=null){
System.arraycopy(source.cachedPivots,0,dest.cachedPivots,0,source.cachedPivots.length);
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(real-rhs.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321611434
GPR[SPVAP]-1661321611434
GPR[EPVAP]-1661321612484
GPR[EPVS]-1661321612484
========
dest.quantile=source.quantile;
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(real-rhs.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321612485
GPR[SPVAP]-1661321612485
GPR[EPVAP]-1661321613535
GPR[EPVS]-1661321613535
========
if(coefficients.length==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(real-rhs.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321613537
GPR[SPVAP]-1661321613537
GPR[EPVAP]-1661321614594
GPR[EPVS]-1661321614594
========
if(subMatrix.length==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(real-rhs.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321614595
GPR[SPVAP]-1661321614595
GPR[EPVAP]-1661321615642
GPR[EPVS]-1661321615642
========
if(d.length==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(real-rhs.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321615643
GPR[SPVAP]-1661321615643
GPR[EPVAP]-1661321616697
GPR[EPVS]-1661321616697
========
super();
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(real-rhs.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321616699
GPR[SPVAP]-1661321616699
GPR[EPVAP]-1661321617758
GPR[EPVS]-1661321617758
========
if(c.length==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(real-rhs.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321617760
GPR[SPVAP]-1661321617760
GPR[EPVAP]-1661321618829
GPR[EPVS]-1661321618829
========
MathUtils.checkNotNull(rhs);
if(n||rhs.isNaN){
return NaN;
}
return createComplex(real-rhs.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321618830
GPR[SPVAP]-1661321618830
GPR[EPVAP]-1661321619874
GPR[EPVS]-1661321619874
========
if(coefficients.length==1){
return new double[]{0};
}
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return createComplex(real-rhs.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321619875
GPR[SPVAP]-1661321619875
GPR[EPVAP]-1661321620924
GPR[EPVS]-1661321620924
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321620925
GPR[SPVAP]-1661321620925
GPR[EPVAP]-1661321622921
GPR[SPVATF]-1661321622921
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321624793
GPR[EPVS]-1661321624793
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321624794
GPR[SPVAP]-1661321624794
GPR[EPVAP]-1661321626756
GPR[SPVATF]-1661321626756
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321628682
GPR[EPVS]-1661321628682
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321628683
GPR[SPVAP]-1661321628683
GPR[EPVAP]-1661321630667
GPR[SPVATF]-1661321630667
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321632587
GPR[EPVS]-1661321632587
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321632588
GPR[SPVAP]-1661321632588
GPR[EPVAP]-1661321634538
GPR[SPVATF]-1661321634538
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321636433
GPR[EPVS]-1661321636433
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
return this.log().multiply(rhs).exp();

========
MM Copying to MM
GPR[SPVS]-1661321636435
GPR[SPVAP]-1661321636435
GPR[EPVAP]-1661321638373
GPR[SPVATF]-1661321638373
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321640252
GPR[EPVS]-1661321640252
========
MathUtils.checkNotNull(rhs);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321640254
GPR[SPVAP]-1661321640254
GPR[EPVAP]-1661321641297
GPR[EPVS]-1661321641297
GPR[ESUN]-1661321641297
GPR[SSUN]-1661321641297
org.apache.commons.math.complex.Complex,452
GPR[ESUN]-1661321641735
GPR[SSUN]-1661321641735
org.apache.commons.math.complex.Complex,453
GPR[ESUN]-1661321642000
GPR[SSUN]-1661321642000
org.apache.commons.math.complex.Complex,456
GPR[ESUN]-1661321642261
GPR[SSUN]-1661321642261
org.apache.commons.math.complex.Complex,475
GPR[ESUN]-1661321642523
GPR[SSUN]-1661321642523
org.apache.commons.math.complex.Complex,476
GPR[ESUN]-1661321642793
GPR[SSUN]-1661321642793
org.apache.commons.math.complex.Complex,479
========
if(isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321644641
GPR[SPVAP]-1661321644641
GPR[EPVAP]-1661321649996
GPR[SPVATF]-1661321649996
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321651872
GPR[EPVS]-1661321651872
========
if(isNaN){
return NaN;
}
return this.add(Complex.I).divide(Complex.I.subtract(this)).log().multiply(Complex.I.divide(createComplex(2.0,0.0)));

========
MM Copying to MM
GPR[SPVS]-1661321651874
GPR[SPVAP]-1661321651874
GPR[EPVAP]-1661321653865
GPR[SPVATF]-1661321653865
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321655724
GPR[EPVS]-1661321655724
========
if(isNaN){
return NaN;
}
return this.log().multiply(INF).exp();

========
MM Copying to MM
GPR[SPVS]-1661321655726
GPR[SPVAP]-1661321655726
GPR[EPVAP]-1661321657677
GPR[SPVATF]-1661321657677
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321659621
GPR[EPVS]-1661321659621
========
if(isNaN){
return NaN;
}
MathUtils.checkNotNull(INF);
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321659623
GPR[SPVAP]-1661321659623
GPR[EPVAP]-1661321661645
GPR[SPVATF]-1661321661645
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321663537
GPR[EPVS]-1661321663537
========
if(isNaN){
return NaN;
}
MathUtils.checkNotNull(INF);
return this.log().multiply(INF).exp();

========
MM Copying to MM
GPR[SPVS]-1661321663538
GPR[SPVAP]-1661321663538
GPR[EPVAP]-1661321665521
GPR[SPVATF]-1661321665521
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321667401
GPR[EPVS]-1661321667401
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661321667403
GPR[SPVAP]-1661321667403
GPR[EPVAP]-1661321669341
GPR[SPVATF]-1661321669341
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321671218
GPR[EPVS]-1661321671218
========
G=INF.divide(INF);
if(isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321671220
GPR[SPVAP]-1661321671220
GPR[EPVAP]-1661321672281
GPR[EPVS]-1661321672281
========
G2=G.multiply(G);
if(isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321672282
GPR[SPVAP]-1661321672282
GPR[EPVAP]-1661321673369
GPR[EPVS]-1661321673369
========
H=G2.subtract(INF.divide(INF));
if(isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321673371
GPR[SPVAP]-1661321673371
GPR[EPVAP]-1661321674426
GPR[EPVS]-1661321674426
========
INF=N1.multiply((N.multiply(H)).subtract(G2));
if(isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321674427
GPR[SPVAP]-1661321674427
GPR[EPVAP]-1661321675469
GPR[EPVS]-1661321675469
========
new ArrayList<Integer>().add(0);
if(isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321675472
GPR[SPVAP]-1661321675472
GPR[EPVAP]-1661321677420
GPR[SPVATF]-1661321677420
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321679300
GPR[EPVS]-1661321679300
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321679302
GPR[SPVAP]-1661321679302
GPR[EPVAP]-1661321681244
GPR[SPVATF]-1661321681244
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321683184
GPR[EPVS]-1661321683184
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321683186
GPR[SPVAP]-1661321683186
GPR[EPVAP]-1661321685123
GPR[SPVATF]-1661321685123
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321687002
GPR[EPVS]-1661321687002
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321687004
GPR[SPVAP]-1661321687004
GPR[EPVAP]-1661321688939
GPR[SPVATF]-1661321688939
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321690802
GPR[EPVS]-1661321690802
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321690804
GPR[SPVAP]-1661321690804
GPR[EPVAP]-1661321692756
GPR[SPVATF]-1661321692756
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321694634
GPR[EPVS]-1661321694634
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.exp(real)*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321694637
GPR[SPVAP]-1661321694637
GPR[EPVAP]-1661321695699
GPR[EPVS]-1661321695699
GPR[ESUN]-1661321695700
GPR[SSUN]-1661321695700
org.apache.commons.math.complex.Complex,498
GPR[ESUN]-1661321696133
GPR[SSUN]-1661321696133
org.apache.commons.math.complex.Complex,499
GPR[ESUN]-1661321696421
GPR[SSUN]-1661321696421
org.apache.commons.math.complex.Complex,502
========
if(isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321698305
GPR[SPVAP]-1661321698305
GPR[EPVAP]-1661321703538
GPR[SPVATF]-1661321703538
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321705399
GPR[EPVS]-1661321705399
========
if(isNaN){
return NaN;
}
return this.add(Complex.I).divide(Complex.I.subtract(this)).log().multiply(Complex.I.divide(createComplex(2.0,0.0)));

========
MM Copying to MM
GPR[SPVS]-1661321705400
GPR[SPVAP]-1661321705400
GPR[EPVAP]-1661321707381
GPR[SPVATF]-1661321707381
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321709243
GPR[EPVS]-1661321709243
========
if(isNaN){
return NaN;
}
return this.log().multiply(INF).exp();

========
MM Copying to MM
GPR[SPVS]-1661321709245
GPR[SPVAP]-1661321709245
GPR[EPVAP]-1661321711169
GPR[SPVATF]-1661321711169
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321713084
GPR[EPVS]-1661321713084
========
if(isNaN){
return NaN;
}
MathUtils.checkNotNull(INF);
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321713086
GPR[SPVAP]-1661321713086
GPR[EPVAP]-1661321715039
GPR[SPVATF]-1661321715039
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321716909
GPR[EPVS]-1661321716909
========
if(isNaN){
return NaN;
}
MathUtils.checkNotNull(INF);
return this.log().multiply(INF).exp();

========
MM Copying to MM
GPR[SPVS]-1661321716910
GPR[SPVAP]-1661321716910
GPR[EPVAP]-1661321718843
GPR[SPVATF]-1661321718843
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321720738
GPR[EPVS]-1661321720738
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661321720740
GPR[SPVAP]-1661321720740
GPR[EPVAP]-1661321722699
GPR[SPVATF]-1661321722699
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321724590
GPR[EPVS]-1661321724590
========
G=INF.divide(INF);
if(isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321724592
GPR[SPVAP]-1661321724592
GPR[EPVAP]-1661321725657
GPR[EPVS]-1661321725657
========
G2=G.multiply(G);
if(isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321725659
GPR[SPVAP]-1661321725659
GPR[EPVAP]-1661321726793
GPR[EPVS]-1661321726793
========
H=G2.subtract(INF.divide(INF));
if(isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321726794
GPR[SPVAP]-1661321726794
GPR[EPVAP]-1661321727850
GPR[EPVS]-1661321727850
========
INF=N1.multiply((N.multiply(H)).subtract(G2));
if(isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321727852
GPR[SPVAP]-1661321727852
GPR[EPVAP]-1661321728892
GPR[EPVS]-1661321728892
========
new ArrayList<Integer>().add(0);
if(isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321728895
GPR[SPVAP]-1661321728895
GPR[EPVAP]-1661321730852
GPR[SPVATF]-1661321730852
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321732737
GPR[EPVS]-1661321732737
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321732739
GPR[SPVAP]-1661321732739
GPR[EPVAP]-1661321734685
GPR[SPVATF]-1661321734685
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321736539
GPR[EPVS]-1661321736539
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321736540
GPR[SPVAP]-1661321736540
GPR[EPVAP]-1661321738508
GPR[SPVATF]-1661321738508
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321740364
GPR[EPVS]-1661321740364
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321740366
GPR[SPVAP]-1661321740366
GPR[EPVAP]-1661321742305
GPR[SPVATF]-1661321742305
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321744191
GPR[EPVS]-1661321744191
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321744192
GPR[SPVAP]-1661321744192
GPR[EPVAP]-1661321746153
GPR[SPVATF]-1661321746153
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321748035
GPR[EPVS]-1661321748035
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.exp(real)*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321748037
GPR[SPVAP]-1661321748037
GPR[EPVAP]-1661321749097
GPR[EPVS]-1661321749097
GPR[ESUN]-1661321749098
GPR[SSUN]-1661321749098
org.apache.commons.math.complex.Complex,521
GPR[ESUN]-1661321749579
GPR[SSUN]-1661321749579
org.apache.commons.math.complex.Complex,522
GPR[ESUN]-1661321749843
GPR[SSUN]-1661321749843
org.apache.commons.math.complex.Complex,525
========
if(isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321751873
GPR[SPVAP]-1661321751873
GPR[EPVAP]-1661321757136
GPR[SPVATF]-1661321757136
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321759019
GPR[EPVS]-1661321759019
========
if(isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321759021
GPR[SPVAP]-1661321759021
GPR[EPVAP]-1661321761009
GPR[SPVATF]-1661321761009
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321762912
GPR[EPVS]-1661321762912
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661321762913
GPR[SPVAP]-1661321762913
GPR[EPVAP]-1661321764864
GPR[SPVATF]-1661321764865
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321766796
GPR[EPVS]-1661321766796
========
if(isNaN){
return NaN;
}
return this.log().multiply(INF).exp();

========
MM Copying to MM
GPR[SPVS]-1661321766798
GPR[SPVAP]-1661321766798
GPR[EPVAP]-1661321768745
GPR[SPVATF]-1661321768745
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321770639
GPR[EPVS]-1661321770639
========
if(isNaN){
return NaN;
}
MathUtils.checkNotNull(INF);
return this.add(Complex.I).divide(Complex.I.subtract(this)).log().multiply(Complex.I.divide(createComplex(2.0,0.0)));

========
MM Copying to MM
GPR[SPVS]-1661321770640
GPR[SPVAP]-1661321770640
GPR[EPVAP]-1661321772597
GPR[SPVATF]-1661321772597
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321774470
GPR[EPVS]-1661321774470
========
if(isNaN){
return NaN;
}
MathUtils.checkNotNull(INF);
return this.log().multiply(INF).exp();

========
MM Copying to MM
GPR[SPVS]-1661321774472
GPR[SPVAP]-1661321774472
GPR[EPVAP]-1661321776431
GPR[SPVATF]-1661321776431
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321778354
GPR[EPVS]-1661321778354
========
new ArrayList<Integer>().add(0);
if(isNaN){
return NaN;
}
return this.add(Complex.I).divide(Complex.I.subtract(this)).log().multiply(Complex.I.divide(createComplex(2.0,0.0)));

========
MM Copying to MM
GPR[SPVS]-1661321778356
GPR[SPVAP]-1661321778356
GPR[EPVAP]-1661321780327
GPR[SPVATF]-1661321780327
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321782240
GPR[EPVS]-1661321782240
========
if(isNaN){
return NaN;
}
return createComplex(real+INF.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321782242
GPR[SPVAP]-1661321782242
GPR[EPVAP]-1661321783297
GPR[EPVS]-1661321783297
GPR[ESUN]-1661321783298
GPR[SSUN]-1661321783298
org.apache.commons.math.complex.Complex,556
GPR[ESUN]-1661321783732
GPR[SSUN]-1661321783732
org.apache.commons.math.complex.Complex,557
GPR[ESUN]-1661321783996
GPR[SSUN]-1661321783996
org.apache.commons.math.complex.Complex,560
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(imaginary)*FastMath.cos(real),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321785468
GPR[SPVAP]-1661321785468
GPR[EPVAP]-1661321790741
GPR[SPVATF]-1661321790741
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321792626
GPR[EPVS]-1661321792626
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321792627
GPR[SPVAP]-1661321792627
GPR[EPVAP]-1661321794621
GPR[SPVATF]-1661321794621
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321796484
GPR[EPVS]-1661321796484
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(imaginary)*FastMath.cos(real),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321796485
GPR[SPVAP]-1661321796485
GPR[EPVAP]-1661321798417
GPR[SPVATF]-1661321798417
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321800316
GPR[EPVS]-1661321800316
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)/FastMath.cos(real)+MathUtils.cosh(imaginary),MathUtils.sinh(imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661321800318
GPR[SPVAP]-1661321800318
GPR[EPVAP]-1661321801371
GPR[EPVS]-1661321801371
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(imaginary)/MathUtils.cosh(imaginary)+FastMath.cos(real),FastMath.sin(real)/d);

========
MM Copying to MM
GPR[SPVS]-1661321801372
GPR[SPVAP]-1661321801372
GPR[EPVAP]-1661321802429
GPR[EPVS]-1661321802429
========
if(isNaN){
return NaN;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321802431
GPR[SPVAP]-1661321802431
GPR[EPVAP]-1661321804407
GPR[SPVATF]-1661321804407
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321806269
GPR[EPVS]-1661321806269
========
if(isNaN){
return NaN;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321806270
GPR[SPVAP]-1661321806271
GPR[EPVAP]-1661321808205
GPR[SPVATF]-1661321808205
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321810109
GPR[EPVS]-1661321810109
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.exp(imaginary)*FastMath.cos(real),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321810111
GPR[SPVAP]-1661321810111
GPR[EPVAP]-1661321811169
GPR[EPVS]-1661321811169
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661321811170
GPR[SPVAP]-1661321811170
GPR[EPVAP]-1661321813122
GPR[SPVATF]-1661321813122
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321815001
GPR[EPVS]-1661321815001
========
if(isNaN){
return NaN;
}
return createComplex(real-INF.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321815003
GPR[SPVAP]-1661321815003
GPR[EPVAP]-1661321816039
GPR[EPVS]-1661321816039
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321816040
GPR[SPVAP]-1661321816040
GPR[EPVAP]-1661321817987
GPR[SPVATF]-1661321817987
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321819850
GPR[EPVS]-1661321819850
========
if(isNaN){
return NaN;
}
return createComplex(real+INF.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321819851
GPR[SPVAP]-1661321819851
GPR[EPVAP]-1661321820915
GPR[EPVS]-1661321820915
========
if(isNaN){
return NaN;
}
MathUtils.checkNotNull(INF);
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321820916
GPR[SPVAP]-1661321820916
GPR[EPVAP]-1661321822900
GPR[SPVATF]-1661321822900
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321824838
GPR[EPVS]-1661321824838
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321824840
GPR[SPVAP]-1661321824840
GPR[EPVAP]-1661321826784
GPR[SPVATF]-1661321826784
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321828696
GPR[EPVS]-1661321828696
========
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321828698
GPR[SPVAP]-1661321828698
GPR[EPVAP]-1661321829768
GPR[EPVS]-1661321829768
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321829770
GPR[SPVAP]-1661321829770
GPR[EPVAP]-1661321831749
GPR[SPVATF]-1661321831749
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321833603
GPR[EPVS]-1661321833603
========
imaginary=FastMath.cos(real);
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321833605
GPR[SPVAP]-1661321833605
GPR[EPVAP]-1661321834656
GPR[EPVS]-1661321834656
========
if(isNaN){
return FastMath.abs(imaginary)*FastMath.sqrt(1+imaginary/real*q);
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321834658
GPR[SPVAP]-1661321834658
GPR[EPVAP]-1661321835762
GPR[EPVS]-1661321835762
========
if(isNaN){
return FastMath.abs(real)*FastMath.sqrt(1+imaginary/real*q);
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321835763
GPR[SPVAP]-1661321835763
GPR[EPVAP]-1661321836824
GPR[EPVS]-1661321836824
========
if(isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321836826
GPR[SPVAP]-1661321836826
GPR[EPVAP]-1661321838792
GPR[SPVATF]-1661321838792
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321840693
GPR[EPVS]-1661321840693
========
if(isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321840694
GPR[SPVAP]-1661321840694
GPR[EPVAP]-1661321842708
GPR[SPVATF]-1661321842708
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321844576
GPR[EPVS]-1661321844576
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321844578
GPR[SPVAP]-1661321844578
GPR[EPVAP]-1661321845661
GPR[EPVS]-1661321845661
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321845662
GPR[SPVAP]-1661321845662
GPR[EPVAP]-1661321846739
GPR[EPVS]-1661321846739
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321846740
GPR[SPVAP]-1661321846740
GPR[EPVAP]-1661321847812
GPR[EPVS]-1661321847812
========
imaginary=-cos;
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321847814
GPR[SPVAP]-1661321847814
GPR[EPVAP]-1661321848853
GPR[EPVS]-1661321848853
========
imaginary=-sin;
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321848855
GPR[SPVAP]-1661321848855
GPR[EPVAP]-1661321849908
GPR[EPVS]-1661321849908
========
imaginary=-originOffset;
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321849909
GPR[SPVAP]-1661321849909
GPR[EPVAP]-1661321850971
GPR[EPVS]-1661321850971
GPR[ESUN]-1661321850971
GPR[SSUN]-1661321850971
org.apache.commons.math.complex.Complex,590
GPR[ESUN]-1661321851438
GPR[SSUN]-1661321851438
org.apache.commons.math.complex.Complex,591
GPR[ESUN]-1661321851701
GPR[SSUN]-1661321851701
org.apache.commons.math.complex.Complex,594
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(imaginary)*MathUtils.cosh(real),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321853184
GPR[SPVAP]-1661321853184
GPR[EPVAP]-1661321858464
GPR[SPVATF]-1661321858464
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321860340
GPR[EPVS]-1661321860340
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321860341
GPR[SPVAP]-1661321860341
GPR[EPVAP]-1661321862317
GPR[SPVATF]-1661321862317
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321864221
GPR[EPVS]-1661321864221
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(imaginary)*MathUtils.cosh(real),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321864223
GPR[SPVAP]-1661321864223
GPR[EPVAP]-1661321867057
GPR[SPVATF]-1661321867057
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321868994
GPR[EPVS]-1661321868994
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(imaginary)/FastMath.cos(imaginary)+MathUtils.cosh(real),MathUtils.sinh(real)/d);

========
MM Copying to MM
GPR[SPVS]-1661321868995
GPR[SPVAP]-1661321868995
GPR[EPVAP]-1661321870049
GPR[EPVS]-1661321870049
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)/MathUtils.cosh(real)+FastMath.cos(imaginary),FastMath.sin(imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661321870051
GPR[SPVAP]-1661321870051
GPR[EPVAP]-1661321871114
GPR[EPVS]-1661321871114
========
if(isNaN){
return NaN;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321871115
GPR[SPVAP]-1661321871115
GPR[EPVAP]-1661321873065
GPR[SPVATF]-1661321873065
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321874934
GPR[EPVS]-1661321874935
========
if(isNaN){
return NaN;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321874936
GPR[SPVAP]-1661321874936
GPR[EPVAP]-1661321876917
GPR[SPVATF]-1661321876917
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321878798
GPR[EPVS]-1661321878798
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.exp(real)*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321878799
GPR[SPVAP]-1661321878799
GPR[EPVAP]-1661321879863
GPR[EPVS]-1661321879863
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661321879865
GPR[SPVAP]-1661321879865
GPR[EPVAP]-1661321881855
GPR[SPVATF]-1661321881855
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321883763
GPR[EPVS]-1661321883763
========
if(isNaN){
return NaN;
}
return createComplex(real-INF.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321883765
GPR[SPVAP]-1661321883765
GPR[EPVAP]-1661321884815
GPR[EPVS]-1661321884815
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321884817
GPR[SPVAP]-1661321884817
GPR[EPVAP]-1661321886817
GPR[SPVATF]-1661321886817
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321888709
GPR[EPVS]-1661321888709
========
if(isNaN){
return NaN;
}
return createComplex(real+INF.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321888711
GPR[SPVAP]-1661321888711
GPR[EPVAP]-1661321889752
GPR[EPVS]-1661321889752
========
if(isNaN){
return NaN;
}
MathUtils.checkNotNull(INF);
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321889754
GPR[SPVAP]-1661321889754
GPR[EPVAP]-1661321891687
GPR[SPVATF]-1661321891687
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321893614
GPR[EPVS]-1661321893614
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321893615
GPR[SPVAP]-1661321893615
GPR[EPVAP]-1661321895564
GPR[SPVATF]-1661321895564
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321897445
GPR[EPVS]-1661321897445
========
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321897447
GPR[SPVAP]-1661321897447
GPR[EPVAP]-1661321898506
GPR[EPVS]-1661321898506
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321898508
GPR[SPVAP]-1661321898508
GPR[EPVAP]-1661321900476
GPR[SPVATF]-1661321900476
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321902362
GPR[EPVS]-1661321902362
========
real=FastMath.cos(imaginary);
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321902363
GPR[SPVAP]-1661321902363
GPR[EPVAP]-1661321903424
GPR[EPVS]-1661321903424
========
if(isNaN){
return FastMath.abs(imaginary)*FastMath.sqrt(1+imaginary/real*q);
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321903426
GPR[SPVAP]-1661321903426
GPR[EPVAP]-1661321904469
GPR[EPVS]-1661321904469
========
if(isNaN){
return FastMath.abs(real)*FastMath.sqrt(1+imaginary/real*q);
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321904471
GPR[SPVAP]-1661321904471
GPR[EPVAP]-1661321905573
GPR[EPVS]-1661321905573
========
if(isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321905575
GPR[SPVAP]-1661321905575
GPR[EPVAP]-1661321907526
GPR[SPVATF]-1661321907526
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321909391
GPR[EPVS]-1661321909391
========
if(isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661321909393
GPR[SPVAP]-1661321909393
GPR[EPVAP]-1661321911367
GPR[SPVATF]-1661321911367
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321913221
GPR[EPVS]-1661321913221
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321913223
GPR[SPVAP]-1661321913223
GPR[EPVAP]-1661321914289
GPR[EPVS]-1661321914289
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321914290
GPR[SPVAP]-1661321914290
GPR[EPVAP]-1661321915343
GPR[EPVS]-1661321915343
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321915344
GPR[SPVAP]-1661321915344
GPR[EPVAP]-1661321916399
GPR[EPVS]-1661321916400
========
imaginary=-cos;
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321916402
GPR[SPVAP]-1661321916402
GPR[EPVAP]-1661321917454
GPR[EPVS]-1661321917454
========
imaginary=-sin;
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321917455
GPR[SPVAP]-1661321917455
GPR[EPVAP]-1661321918509
GPR[EPVS]-1661321918509
========
imaginary=-originOffset;
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321918510
GPR[SPVAP]-1661321918510
GPR[EPVAP]-1661321919565
GPR[EPVS]-1661321919565
GPR[ESUN]-1661321919565
GPR[SSUN]-1661321919565
org.apache.commons.math.complex.Complex,625
GPR[ESUN]-1661321920052
GPR[SSUN]-1661321920052
org.apache.commons.math.complex.Complex,626
GPR[ESUN]-1661321920339
GPR[SSUN]-1661321920339
org.apache.commons.math.complex.Complex,629
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321921931
GPR[SPVAP]-1661321921931
GPR[EPVAP]-1661321927180
GPR[SPVATF]-1661321927180
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321929058
GPR[EPVS]-1661321929058
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(FastMath.sin(imaginary)*MathUtils.cosh(real),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321929060
GPR[SPVAP]-1661321929060
GPR[EPVAP]-1661321931044
GPR[SPVATF]-1661321931044
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321932908
GPR[EPVS]-1661321932908
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321932910
GPR[SPVAP]-1661321932910
GPR[EPVAP]-1661321934851
GPR[SPVATF]-1661321934851
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321936746
GPR[EPVS]-1661321936746
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(FastMath.cos(imaginary)*MathUtils.cosh(real),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321936748
GPR[SPVAP]-1661321936748
GPR[EPVAP]-1661321938760
GPR[SPVATF]-1661321938760
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321940670
GPR[EPVS]-1661321940670
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321940672
GPR[SPVAP]-1661321940672
GPR[EPVAP]-1661321942608
GPR[SPVATF]-1661321942608
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321944476
GPR[EPVS]-1661321944476
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661321944478
GPR[SPVAP]-1661321944478
GPR[EPVAP]-1661321946412
GPR[SPVATF]-1661321946412
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321948281
GPR[EPVS]-1661321948281
========
if(isNaN){
return NaN;
}
double expReal=FastMath.cos(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321948283
GPR[SPVAP]-1661321948283
GPR[EPVAP]-1661321950243
GPR[SPVATF]-1661321950243
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321952122
GPR[EPVS]-1661321952122
========
if(isNaN){
return NaN;
}
double expReal=FastMath.cosh(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321952123
GPR[SPVAP]-1661321952123
GPR[EPVAP]-1661321954083
GPR[SPVATF]-1661321954083
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321955970
GPR[EPVS]-1661321955970
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(FastMath.sin(imaginary)/expReal,MathUtils.sinh(real)/d);

========
MM Copying to MM
GPR[SPVS]-1661321955971
GPR[SPVAP]-1661321955971
GPR[EPVAP]-1661321957025
GPR[EPVS]-1661321957025
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(MathUtils.sinh(real)/expReal,FastMath.sin(imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661321957027
GPR[SPVAP]-1661321957027
GPR[EPVAP]-1661321958068
GPR[EPVS]-1661321958068
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661321958070
GPR[SPVAP]-1661321958070
GPR[EPVAP]-1661321960017
GPR[SPVATF]-1661321960017
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321961906
GPR[EPVS]-1661321961906
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(real-INF.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321961908
GPR[SPVAP]-1661321961908
GPR[EPVAP]-1661321962981
GPR[EPVS]-1661321962981
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321962982
GPR[SPVAP]-1661321962982
GPR[EPVAP]-1661321964929
GPR[SPVATF]-1661321964929
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321966849
GPR[EPVS]-1661321966849
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(real*expReal,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661321966850
GPR[SPVAP]-1661321966850
GPR[EPVAP]-1661321967896
GPR[EPVS]-1661321967896
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321967897
GPR[SPVAP]-1661321967897
GPR[EPVAP]-1661321969877
GPR[SPVATF]-1661321969877
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321971753
GPR[EPVS]-1661321971753
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(real+INF.getReal(),expReal+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661321971755
GPR[SPVAP]-1661321971755
GPR[EPVAP]-1661321972795
GPR[EPVS]-1661321972795
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
MathUtils.checkNotNull(INF);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321972796
GPR[SPVAP]-1661321972796
GPR[EPVAP]-1661321974788
GPR[SPVATF]-1661321974788
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321976681
GPR[EPVS]-1661321976681
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661321976683
GPR[SPVAP]-1661321976683
GPR[EPVAP]-1661321977777
GPR[EPVS]-1661321977777
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321977778
GPR[SPVAP]-1661321977778
GPR[EPVAP]-1661321979725
GPR[SPVATF]-1661321979725
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321981633
GPR[EPVS]-1661321981633
========
if(isNaN){
return NaN;
}
double expReal=FastMath.sin(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321981635
GPR[SPVAP]-1661321981635
GPR[EPVAP]-1661321983567
GPR[SPVATF]-1661321983567
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321985454
GPR[EPVS]-1661321985454
========
real=FastMath.cos(imaginary);
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321985456
GPR[SPVAP]-1661321985456
GPR[EPVAP]-1661321986510
GPR[EPVS]-1661321986510
========
exp(real,0.0,new double[2]);
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321986513
GPR[SPVAP]-1661321986513
GPR[EPVAP]-1661321987565
GPR[EPVS]-1661321987565
========
if(isNaN){
return FastMath.abs(imaginary)*FastMath.sqrt(1+expReal*q);
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321987567
GPR[SPVAP]-1661321987567
GPR[EPVAP]-1661321988625
GPR[EPVS]-1661321988625
========
if(isNaN){
return FastMath.abs(real)*FastMath.sqrt(1+expReal*q);
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321988627
GPR[SPVAP]-1661321988627
GPR[EPVAP]-1661321989685
GPR[EPVS]-1661321989685
========
if(isNaN){
return NaN;
}
double expReal=FastMath.log(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321989688
GPR[SPVAP]-1661321989688
GPR[EPVAP]-1661321991645
GPR[SPVATF]-1661321991645
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321993543
GPR[EPVS]-1661321993543
========
if(isNaN){
return NaN;
}
boolean expReal=FastMath.exp(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321993545
GPR[SPVAP]-1661321993545
GPR[EPVAP]-1661321994595
GPR[EPVS]-1661321994595
========
if(isNaN){
return NaN;
}
boolean expReal=FastMath.sin(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661321994597
GPR[SPVAP]-1661321994597
GPR[EPVAP]-1661321995648
GPR[EPVS]-1661321995648
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return this.log().multiply(INF).exp();

========
MM Copying to MM
GPR[SPVS]-1661321995650
GPR[SPVAP]-1661321995650
GPR[EPVAP]-1661321997599
GPR[SPVATF]-1661321997599
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661321999558
GPR[EPVS]-1661321999558
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
MathUtils.checkNotNull(INF);
return this.log().multiply(INF).exp();

========
MM Copying to MM
GPR[SPVS]-1661321999559
GPR[SPVAP]-1661321999559
GPR[EPVAP]-1661322001521
GPR[SPVATF]-1661322001521
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322003441
GPR[EPVS]-1661322003441
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322003444
GPR[SPVAP]-1661322003444
GPR[EPVAP]-1661322004520
GPR[EPVS]-1661322004520
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322004521
GPR[SPVAP]-1661322004521
GPR[EPVAP]-1661322005577
GPR[EPVS]-1661322005577
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322005578
GPR[SPVAP]-1661322005578
GPR[EPVAP]-1661322006652
GPR[EPVS]-1661322006652
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*expReal,imaginary*rhs);

========
MM Copying to MM
GPR[SPVS]-1661322006654
GPR[SPVAP]-1661322006654
GPR[EPVAP]-1661322007696
GPR[EPVS]-1661322007697
========
if(isNaN){
return NaN;
}
double expReal=FastMath.sqrt(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322007700
GPR[SPVAP]-1661322007700
GPR[EPVAP]-1661322009664
GPR[SPVATF]-1661322009664
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322011565
GPR[EPVS]-1661322011565
========
System.arraycopy(xdfp.mant,0,mant,0,mant.length);
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322011567
GPR[SPVAP]-1661322011567
GPR[EPVAP]-1661322012623
GPR[EPVS]-1661322012623
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661322012625
GPR[SPVAP]-1661322012625
GPR[EPVAP]-1661322014558
GPR[SPVATF]-1661322014558
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322016435
GPR[EPVS]-1661322016435
========
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661322016437
GPR[SPVAP]-1661322016437
GPR[EPVAP]-1661322018428
GPR[SPVATF]-1661322018428
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322020284
GPR[EPVS]-1661322020284
========
imaginary=-cos;
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322020287
GPR[SPVAP]-1661322020287
GPR[EPVAP]-1661322021375
GPR[EPVS]-1661322021375
========
imaginary=-sin;
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322021376
GPR[SPVAP]-1661322021376
GPR[EPVAP]-1661322022451
GPR[EPVS]-1661322022451
========
imaginary=-originOffset;
if(isNaN){
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322022452
GPR[SPVAP]-1661322022452
GPR[EPVAP]-1661322023554
GPR[EPVS]-1661322023554
========
if(isNaN){
getField().setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322023556
GPR[SPVAP]-1661322023556
GPR[EPVAP]-1661322024609
GPR[EPVS]-1661322024609
========
if(isNaN){
getField().setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);
return NaN;
}
double expReal=FastMath.exp(real);
return createComplex(expReal*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322024611
GPR[SPVAP]-1661322024611
GPR[EPVAP]-1661322025675
GPR[EPVS]-1661322025675
GPR[ESUN]-1661322025676
GPR[SSUN]-1661322025676
org.apache.commons.math.complex.Complex,630
GPR[ESUN]-1661322026106
GPR[SSUN]-1661322026106
org.apache.commons.math.complex.Complex,663
GPR[ESUN]-1661322026384
GPR[SSUN]-1661322026384
org.apache.commons.math.complex.Complex,664
GPR[ESUN]-1661322026643
GPR[SSUN]-1661322026643
org.apache.commons.math.complex.Complex,667
========
if(isNaN){
return NaN;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661322028371
GPR[SPVAP]-1661322028371
GPR[EPVAP]-1661322033592
GPR[SPVATF]-1661322033592
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322035471
GPR[EPVS]-1661322035471
========
if(isNaN){
return NaN;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661322035472
GPR[SPVAP]-1661322035472
GPR[EPVAP]-1661322037447
GPR[SPVATF]-1661322037447
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322039338
GPR[EPVS]-1661322039338
========
if(isNaN){
return FastMath.abs(imaginary)*FastMath.sqrt(1+imaginary/real*q);
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661322039340
GPR[SPVAP]-1661322039340
GPR[EPVAP]-1661322040387
GPR[EPVS]-1661322040387
========
if(isNaN){
return FastMath.abs(real)*FastMath.sqrt(1+imaginary/real*q);
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661322040389
GPR[SPVAP]-1661322040389
GPR[EPVAP]-1661322041447
GPR[EPVS]-1661322041447
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322041448
GPR[SPVAP]-1661322041448
GPR[EPVAP]-1661322043422
GPR[SPVATF]-1661322043422
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322045324
GPR[EPVS]-1661322045324
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322045325
GPR[SPVAP]-1661322045325
GPR[EPVAP]-1661322047304
GPR[SPVATF]-1661322047304
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322049176
GPR[EPVS]-1661322049176
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322049177
GPR[SPVAP]-1661322049178
GPR[EPVAP]-1661322051152
GPR[SPVATF]-1661322051152
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322053025
GPR[EPVS]-1661322053025
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322053027
GPR[SPVAP]-1661322053027
GPR[EPVAP]-1661322055033
GPR[SPVATF]-1661322055033
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322056960
GPR[EPVS]-1661322056960
========
if(isNaN){
return NaN;
}
return createComplex(real-INF.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661322056963
GPR[SPVAP]-1661322056963
GPR[EPVAP]-1661322058002
GPR[EPVS]-1661322058002
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661322058003
GPR[SPVAP]-1661322058003
GPR[EPVAP]-1661322059936
GPR[SPVATF]-1661322059936
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322061804
GPR[EPVS]-1661322061804
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.exp(real)*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322061806
GPR[SPVAP]-1661322061806
GPR[EPVAP]-1661322062857
GPR[EPVS]-1661322062857
========
if(isNaN){
return NaN;
}
return createComplex(real+INF.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661322062858
GPR[SPVAP]-1661322062858
GPR[EPVAP]-1661322063903
GPR[EPVS]-1661322063903
========
if(isNaN){
return NaN;
}
MathUtils.checkNotNull(INF);
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661322063904
GPR[SPVAP]-1661322063904
GPR[EPVAP]-1661322065856
GPR[SPVATF]-1661322065856
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322067754
GPR[EPVS]-1661322067754
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661322067756
GPR[SPVAP]-1661322067756
GPR[EPVAP]-1661322069714
GPR[SPVATF]-1661322069714
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322071570
GPR[EPVS]-1661322071570
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)/FastMath.cos(real)+MathUtils.cosh(imaginary),MathUtils.sinh(imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661322071574
GPR[SPVAP]-1661322071574
GPR[EPVAP]-1661322072631
GPR[EPVS]-1661322072631
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)/MathUtils.cosh(real)+FastMath.cos(imaginary),FastMath.sin(imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661322072633
GPR[SPVAP]-1661322072633
GPR[EPVAP]-1661322073716
GPR[EPVS]-1661322073716
========
if(isNaN){
return NaN;
}
return this.add(Complex.I).divide(Complex.I.subtract(this)).log().multiply(Complex.I.divide(createComplex(2.0,0.0)));

========
MM Copying to MM
GPR[SPVS]-1661322073717
GPR[SPVAP]-1661322073717
GPR[EPVAP]-1661322075657
GPR[SPVATF]-1661322075657
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322077538
GPR[EPVS]-1661322077538
========
if(isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661322077541
GPR[SPVAP]-1661322077541
GPR[EPVAP]-1661322079487
GPR[SPVATF]-1661322079487
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322081415
GPR[EPVS]-1661322081415
========
if(isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661322081416
GPR[SPVAP]-1661322081416
GPR[EPVAP]-1661322083364
GPR[SPVATF]-1661322083364
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322085267
GPR[EPVS]-1661322085267
========
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322085268
GPR[SPVAP]-1661322085268
GPR[EPVAP]-1661322086329
GPR[EPVS]-1661322086329
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661322086330
GPR[SPVAP]-1661322086330
GPR[EPVAP]-1661322088277
GPR[SPVATF]-1661322088277
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322090132
GPR[EPVS]-1661322090132
========
if(isNaN){
return NaN;
}
return this.log().multiply(INF).exp();

========
MM Copying to MM
GPR[SPVS]-1661322090144
GPR[SPVAP]-1661322090144
GPR[EPVAP]-1661322092082
GPR[SPVATF]-1661322092082
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322093955
GPR[EPVS]-1661322093955
========
if(isNaN){
return NaN;
}
MathUtils.checkNotNull(INF);
return this.log().multiply(INF).exp();

========
MM Copying to MM
GPR[SPVS]-1661322093957
GPR[SPVAP]-1661322093957
GPR[EPVAP]-1661322095909
GPR[SPVATF]-1661322095909
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322097789
GPR[EPVS]-1661322097789
========
if(FastMath.abs(mulAndCheck(serialVersionUID/gcd(a,serialVersionUID),b))==Long.MIN_VALUE){
throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,serialVersionUID,serialVersionUID);
}
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661322097795
GPR[SPVAP]-1661322097795
GPR[EPVAP]-1661322098871
GPR[EPVS]-1661322098871
========
if(imaginary<=0){
throw new NotStrictlyPositiveException(abs);
}
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661322098876
GPR[SPVAP]-1661322098876
GPR[EPVAP]-1661322099929
GPR[EPVS]-1661322099929
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322099931
GPR[SPVAP]-1661322099931
GPR[EPVAP]-1661322101039
GPR[EPVS]-1661322101039
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322101040
GPR[SPVAP]-1661322101040
GPR[EPVAP]-1661322102096
GPR[EPVS]-1661322102096
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322102097
GPR[SPVAP]-1661322102097
GPR[EPVAP]-1661322103193
GPR[EPVS]-1661322103193
GPR[ESUN]-1661322103193
GPR[SSUN]-1661322103193
org.apache.commons.math.complex.Complex,690
========
MathUtils.checkNotNull(x);
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661322105121
GPR[SPVAP]-1661322105121
GPR[EPVAP]-1661322110387
GPR[SPVATF]-1661322110387
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322112245
GPR[EPVS]-1661322112245
========
MathUtils.checkNotNull(x);
if(isNaN){
return NaN;
}
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322112246
GPR[SPVAP]-1661322112246
GPR[EPVAP]-1661322114230
GPR[SPVATF]-1661322114230
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322116109
GPR[EPVS]-1661322116109
========
MathUtils.checkNotNull(x);
if(isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661322116110
GPR[SPVAP]-1661322116110
GPR[EPVAP]-1661322118101
GPR[SPVATF]-1661322118101
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322120016
GPR[EPVS]-1661322120016
========
MathUtils.checkNotNull(x);
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661322120017
GPR[SPVAP]-1661322120017
GPR[EPVAP]-1661322121982
GPR[SPVATF]-1661322121982
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322123882
GPR[EPVS]-1661322123882
========
MathUtils.checkNotNull(x);
if(isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661322123883
GPR[SPVAP]-1661322123883
GPR[EPVAP]-1661322125846
GPR[SPVATF]-1661322125846
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322127785
GPR[EPVS]-1661322127785
========
MathUtils.add(x);
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322127787
GPR[SPVAP]-1661322127787
GPR[EPVAP]-1661322128841
GPR[EPVS]-1661322128841
========
MathUtils.subtract(x);
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322128843
GPR[SPVAP]-1661322128843
GPR[EPVAP]-1661322129907
GPR[EPVS]-1661322129907
========
if(source.cachedPivots!=null){
System.arraycopy(source.cachedPivots,0,dest.cachedPivots,0,source.cachedPivots.length);
}
MathUtils.checkNotNull(x);
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322129909
GPR[SPVAP]-1661322129909
GPR[EPVAP]-1661322130965
GPR[EPVS]-1661322130965
========
dest.quantile=source.quantile;
MathUtils.checkNotNull(x);
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322130966
GPR[SPVAP]-1661322130966
GPR[EPVAP]-1661322132015
GPR[EPVS]-1661322132015
========
MathUtils.checkNotNull(x);
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661322132017
GPR[SPVAP]-1661322132017
GPR[EPVAP]-1661322134067
GPR[SPVATF]-1661322134067
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322135944
GPR[EPVS]-1661322135944
========
MathUtils.checkNotNull(x);
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661322135946
GPR[SPVAP]-1661322135946
GPR[EPVAP]-1661322137897
GPR[SPVATF]-1661322137897
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322139758
GPR[EPVS]-1661322139758
========
MathUtils.checkNotNull(x);
return createComplex(real+x.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661322139759
GPR[SPVAP]-1661322139759
GPR[EPVAP]-1661322140816
GPR[EPVS]-1661322140816
========
MathUtils.checkNotNull(x);
return this.add(Complex.I).divide(Complex.I.subtract(this)).log().multiply(Complex.I.divide(createComplex(2.0,0.0)));

========
MM Copying to MM
GPR[SPVS]-1661322140817
GPR[SPVAP]-1661322140817
GPR[EPVAP]-1661322142785
GPR[SPVATF]-1661322142785
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322144658
GPR[EPVS]-1661322144658
========
MathUtils.checkNotNull(x);
if(isNaN){
return NaN;
}
return this.add(Complex.I).divide(Complex.I.subtract(this)).log().multiply(Complex.I.divide(createComplex(2.0,0.0)));

========
MM Copying to MM
GPR[SPVS]-1661322144660
GPR[SPVAP]-1661322144660
GPR[EPVAP]-1661322146643
GPR[SPVATF]-1661322146643
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322148514
GPR[EPVS]-1661322148514
========
if(isNaN||rhs.isNaN){
return NaN;
}
MathUtils.checkNotNull(x);
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322148516
GPR[SPVAP]-1661322148516
GPR[EPVAP]-1661322149559
GPR[EPVS]-1661322149559
========
if(coefficients.length==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
MathUtils.checkNotNull(x);
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322149560
GPR[SPVAP]-1661322149560
GPR[EPVAP]-1661322150624
GPR[EPVS]-1661322150624
========
if(subMatrix.length==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
MathUtils.checkNotNull(x);
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322150625
GPR[SPVAP]-1661322150625
GPR[EPVAP]-1661322151692
GPR[EPVS]-1661322151692
========
if(d.length==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
MathUtils.checkNotNull(x);
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322151694
GPR[SPVAP]-1661322151694
GPR[EPVAP]-1661322152770
GPR[EPVS]-1661322152770
========
MathUtils.checkNotNull(x);
return createComplex(real-x.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661322152771
GPR[SPVAP]-1661322152771
GPR[EPVAP]-1661322153832
GPR[EPVS]-1661322153832
========
MathUtils.checkNotNull(x);
if(isNaN||rhs.isNaN){
return NaN;
}
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322153834
GPR[SPVAP]-1661322153834
GPR[EPVAP]-1661322154909
GPR[EPVS]-1661322154909
========
MathUtils.checkNotNull(x);
return createComplex(FastMath.exp(real)*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322154910
GPR[SPVAP]-1661322154910
GPR[EPVAP]-1661322155965
GPR[EPVS]-1661322155965
========
MathUtils.exp(x);
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322155967
GPR[SPVAP]-1661322155967
GPR[EPVAP]-1661322157023
GPR[EPVS]-1661322157023
========
BigInteger.valueOf(serialVersionUID).checkNotNull(x);
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322157025
GPR[SPVAP]-1661322157025
GPR[EPVAP]-1661322158109
GPR[EPVS]-1661322158109
========
MathUtils.multiply(x);
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322158111
GPR[SPVAP]-1661322158111
GPR[EPVAP]-1661322159173
GPR[EPVS]-1661322159173
========
MathUtils.checkNotNull(x);
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322159175
GPR[SPVAP]-1661322159175
GPR[EPVAP]-1661322160240
GPR[EPVS]-1661322160240
========
MathUtils.checkNotNull(x);
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322160242
GPR[SPVAP]-1661322160242
GPR[EPVAP]-1661322162188
GPR[SPVATF]-1661322162188
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322164085
GPR[EPVS]-1661322164085
========
MathUtils.checkNotNull(x);
if(isNaN||rhs.isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return this.log().multiply(x).exp();

========
MM Copying to MM
GPR[SPVS]-1661322164087
GPR[SPVAP]-1661322164087
GPR[EPVAP]-1661322165146
GPR[EPVS]-1661322165146
GPR[ESUN]-1661322165146
GPR[SSUN]-1661322165146
org.apache.commons.math.complex.Complex,691
GPR[ESUN]-1661322165641
GPR[SSUN]-1661322165641
org.apache.commons.math.complex.Complex,721
GPR[ESUN]-1661322165908
GPR[SSUN]-1661322165908
org.apache.commons.math.complex.Complex,722
GPR[ESUN]-1661322166186
GPR[SSUN]-1661322166186
org.apache.commons.math.complex.Complex,725
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(imaginary)*FastMath.cos(real),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322167698
GPR[SPVAP]-1661322167698
GPR[EPVAP]-1661322173007
GPR[SPVATF]-1661322173007
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322174954
GPR[EPVS]-1661322174954
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(imaginary)*FastMath.cos(real),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322174956
GPR[SPVAP]-1661322174956
GPR[EPVAP]-1661322176935
GPR[SPVATF]-1661322176935
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322178802
GPR[EPVS]-1661322178802
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(real)*MathUtils.cosh(imaginary),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322178804
GPR[SPVAP]-1661322178804
GPR[EPVAP]-1661322180743
GPR[SPVATF]-1661322180743
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322182631
GPR[EPVS]-1661322182631
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)/FastMath.cos(real)+MathUtils.cosh(imaginary),MathUtils.sinh(imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661322182632
GPR[SPVAP]-1661322182632
GPR[EPVAP]-1661322183678
GPR[EPVS]-1661322183678
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(imaginary)/MathUtils.cosh(imaginary)+FastMath.cos(real),FastMath.sin(real)/d);

========
MM Copying to MM
GPR[SPVS]-1661322183680
GPR[SPVAP]-1661322183680
GPR[EPVAP]-1661322184732
GPR[EPVS]-1661322184732
========
if(isNaN){
return NaN;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661322184733
GPR[SPVAP]-1661322184733
GPR[EPVAP]-1661322186698
GPR[SPVATF]-1661322186698
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322188558
GPR[EPVS]-1661322188558
========
if(isNaN){
return NaN;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661322188559
GPR[SPVAP]-1661322188559
GPR[EPVAP]-1661322190507
GPR[SPVATF]-1661322190507
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322192374
GPR[EPVS]-1661322192374
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.exp(imaginary)*FastMath.cos(real),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322192376
GPR[SPVAP]-1661322192376
GPR[EPVAP]-1661322193415
GPR[EPVS]-1661322193416
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661322193417
GPR[SPVAP]-1661322193417
GPR[EPVAP]-1661322195397
GPR[SPVATF]-1661322195397
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322197272
GPR[EPVS]-1661322197272
========
if(isNaN){
return NaN;
}
return createComplex(real-INF.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661322197274
GPR[SPVAP]-1661322197274
GPR[EPVAP]-1661322198325
GPR[EPVS]-1661322198325
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322198326
GPR[SPVAP]-1661322198326
GPR[EPVAP]-1661322200302
GPR[SPVATF]-1661322200302
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322202185
GPR[EPVS]-1661322202185
========
if(isNaN){
return NaN;
}
return createComplex(real+INF.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661322202187
GPR[SPVAP]-1661322202187
GPR[EPVAP]-1661322203250
GPR[EPVS]-1661322203250
========
if(isNaN){
return NaN;
}
MathUtils.checkNotNull(INF);
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322203252
GPR[SPVAP]-1661322203252
GPR[EPVAP]-1661322205239
GPR[SPVATF]-1661322205239
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322207143
GPR[EPVS]-1661322207143
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322207144
GPR[SPVAP]-1661322207144
GPR[EPVAP]-1661322209076
GPR[SPVATF]-1661322209076
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322210985
GPR[EPVS]-1661322210985
========
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322210987
GPR[SPVAP]-1661322210987
GPR[EPVAP]-1661322212049
GPR[EPVS]-1661322212049
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322212051
GPR[SPVAP]-1661322212051
GPR[EPVAP]-1661322214012
GPR[SPVATF]-1661322214012
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322215883
GPR[EPVS]-1661322215883
========
imaginary=FastMath.cos(real);
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322215885
GPR[SPVAP]-1661322215885
GPR[EPVAP]-1661322216929
GPR[EPVS]-1661322216929
========
if(isNaN){
return FastMath.abs(imaginary)*FastMath.sqrt(1+imaginary/real*q);
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322216930
GPR[SPVAP]-1661322216930
GPR[EPVAP]-1661322217990
GPR[EPVS]-1661322217990
========
if(isNaN){
return FastMath.abs(real)*FastMath.sqrt(1+imaginary/real*q);
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322217991
GPR[SPVAP]-1661322217991
GPR[EPVAP]-1661322219106
GPR[EPVS]-1661322219106
========
if(isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661322219108
GPR[SPVAP]-1661322219108
GPR[EPVAP]-1661322221056
GPR[SPVATF]-1661322221056
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322222953
GPR[EPVS]-1661322222953
========
if(isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661322222955
GPR[SPVAP]-1661322222955
GPR[EPVAP]-1661322224913
GPR[SPVATF]-1661322224913
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322226796
GPR[EPVS]-1661322226796
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322226798
GPR[SPVAP]-1661322226798
GPR[EPVAP]-1661322227865
GPR[EPVS]-1661322227865
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322227867
GPR[SPVAP]-1661322227867
GPR[EPVAP]-1661322228928
GPR[EPVS]-1661322228928
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322228929
GPR[SPVAP]-1661322228929
GPR[EPVAP]-1661322229989
GPR[EPVS]-1661322229989
========
imaginary=-cos;
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322229992
GPR[SPVAP]-1661322229992
GPR[EPVAP]-1661322231048
GPR[EPVS]-1661322231048
========
imaginary=-sin;
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322231050
GPR[SPVAP]-1661322231050
GPR[EPVAP]-1661322232101
GPR[EPVS]-1661322232101
========
imaginary=-originOffset;
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(real)*MathUtils.cosh(imaginary),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322232102
GPR[SPVAP]-1661322232102
GPR[EPVAP]-1661322233157
GPR[EPVS]-1661322233157
GPR[ESUN]-1661322233157
GPR[SSUN]-1661322233157
org.apache.commons.math.complex.Complex,755
GPR[ESUN]-1661322233630
GPR[SSUN]-1661322233630
org.apache.commons.math.complex.Complex,756
GPR[ESUN]-1661322233911
GPR[SSUN]-1661322233911
org.apache.commons.math.complex.Complex,759
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.cosh(real)*FastMath.cos(imaginary),MathUtils.sinh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322235399
GPR[SPVAP]-1661322235399
GPR[EPVAP]-1661322240678
GPR[SPVATF]-1661322240678
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322242582
GPR[EPVS]-1661322242582
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(imaginary)*MathUtils.cosh(real),FastMath.cos(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322242583
GPR[SPVAP]-1661322242583
GPR[EPVAP]-1661322244600
GPR[SPVATF]-1661322244600
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322246492
GPR[EPVS]-1661322246492
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.cos(imaginary)*MathUtils.cosh(real),-FastMath.sin(real)*MathUtils.sinh(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322246494
GPR[SPVAP]-1661322246494
GPR[EPVAP]-1661322248429
GPR[SPVATF]-1661322248429
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322250413
GPR[EPVS]-1661322250413
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.sin(imaginary)/FastMath.cos(imaginary)+MathUtils.cosh(real),MathUtils.sinh(real)/d);

========
MM Copying to MM
GPR[SPVS]-1661322250415
GPR[SPVAP]-1661322250415
GPR[EPVAP]-1661322251486
GPR[EPVS]-1661322251486
========
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)/MathUtils.cosh(real)+FastMath.cos(imaginary),FastMath.sin(imaginary)/d);

========
MM Copying to MM
GPR[SPVS]-1661322251488
GPR[SPVAP]-1661322251488
GPR[EPVAP]-1661322252552
GPR[EPVS]-1661322252552
========
if(isNaN){
return NaN;
}
return createComplex(real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661322252553
GPR[SPVAP]-1661322252553
GPR[EPVAP]-1661322254505
GPR[SPVATF]-1661322254505
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322256415
GPR[EPVS]-1661322256415
========
if(isNaN){
return NaN;
}
return createComplex(-real,-imaginary);

========
MM Copying to MM
GPR[SPVS]-1661322256417
GPR[SPVAP]-1661322256417
GPR[EPVAP]-1661322258371
GPR[SPVATF]-1661322258371
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322260281
GPR[EPVS]-1661322260281
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.exp(real)*FastMath.cos(imaginary),expReal*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322260283
GPR[SPVAP]-1661322260283
GPR[EPVAP]-1661322261317
GPR[EPVS]-1661322261317
========
if(isNaN){
return NaN;
}
return createComplex(FastMath.log(abs()),FastMath.atan2(imaginary,real));

========
MM Copying to MM
GPR[SPVS]-1661322261319
GPR[SPVAP]-1661322261319
GPR[EPVAP]-1661322263294
GPR[SPVATF]-1661322263294
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322265159
GPR[EPVS]-1661322265159
========
if(isNaN){
return NaN;
}
return createComplex(real-INF.getReal(),imaginary-rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661322265161
GPR[SPVAP]-1661322265161
GPR[EPVAP]-1661322266230
GPR[EPVS]-1661322266230
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322266231
GPR[SPVAP]-1661322266231
GPR[EPVAP]-1661322268205
GPR[SPVATF]-1661322268205
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322270077
GPR[EPVS]-1661322270077
========
if(isNaN){
return NaN;
}
return createComplex(real+INF.getReal(),imaginary+rhs.getImaginary());

========
MM Copying to MM
GPR[SPVS]-1661322270079
GPR[SPVAP]-1661322270079
GPR[EPVAP]-1661322271133
GPR[EPVS]-1661322271133
========
if(isNaN){
return NaN;
}
MathUtils.checkNotNull(INF);
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322271135
GPR[SPVAP]-1661322271135
GPR[EPVAP]-1661322273085
GPR[SPVATF]-1661322273085
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322274956
GPR[EPVS]-1661322274956
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322274959
GPR[SPVAP]-1661322274959
GPR[EPVAP]-1661322276917
GPR[SPVATF]-1661322276917
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322278796
GPR[EPVS]-1661322278796
========
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322278798
GPR[SPVAP]-1661322278798
GPR[EPVAP]-1661322279857
GPR[EPVS]-1661322279857
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322279859
GPR[SPVAP]-1661322279859
GPR[EPVAP]-1661322281805
GPR[SPVATF]-1661322281805
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322283673
GPR[EPVS]-1661322283673
========
real=FastMath.cos(imaginary);
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322283675
GPR[SPVAP]-1661322283675
GPR[EPVAP]-1661322284725
GPR[EPVS]-1661322284725
========
if(isNaN){
return FastMath.abs(imaginary)*FastMath.sqrt(1+imaginary/real*q);
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322284727
GPR[SPVAP]-1661322284727
GPR[EPVAP]-1661322285773
GPR[EPVS]-1661322285773
========
if(isNaN){
return FastMath.abs(real)*FastMath.sqrt(1+imaginary/real*q);
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322285774
GPR[SPVAP]-1661322285774
GPR[EPVAP]-1661322286841
GPR[EPVS]-1661322286841
========
if(isNaN){
return NaN;
}
return this.add(this.sqrt1z().multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661322286843
GPR[SPVAP]-1661322286843
GPR[EPVAP]-1661322288839
GPR[SPVATF]-1661322288839
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322290716
GPR[EPVS]-1661322290716
========
if(isNaN){
return NaN;
}
return sqrt1z().add(this.multiply(Complex.I)).log().multiply(Complex.I.negate());

========
MM Copying to MM
GPR[SPVS]-1661322290718
GPR[SPVAP]-1661322290718
GPR[EPVAP]-1661322292708
GPR[SPVATF]-1661322292708
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322294574
GPR[EPVS]-1661322294574
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322294576
GPR[SPVAP]-1661322294576
GPR[EPVAP]-1661322295640
GPR[EPVS]-1661322295640
========
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322295641
GPR[SPVAP]-1661322295641
GPR[EPVAP]-1661322296700
GPR[EPVS]-1661322296700
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
return createComplex(real*rhs.real-imaginary*rhs.imaginary,real*rhs.imaginary+imaginary*rhs.real);

========
MM Copying to MM
GPR[SPVS]-1661322296701
GPR[SPVAP]-1661322296701
GPR[EPVAP]-1661322297770
GPR[EPVS]-1661322297770
========
imaginary=-cos;
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322297772
GPR[SPVAP]-1661322297772
GPR[EPVAP]-1661322298822
GPR[EPVS]-1661322298822
========
imaginary=-sin;
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322298824
GPR[SPVAP]-1661322298824
GPR[EPVAP]-1661322299876
GPR[EPVS]-1661322299876
========
imaginary=-originOffset;
if(isNaN){
return NaN;
}
return createComplex(MathUtils.sinh(real)*FastMath.cos(imaginary),MathUtils.cosh(real)*FastMath.sin(imaginary));

========
MM Copying to MM
GPR[SPVS]-1661322299877
GPR[SPVAP]-1661322299877
GPR[EPVAP]-1661322300933
GPR[EPVS]-1661322300933
GPR[ESUN]-1661322300933
GPR[SSUN]-1661322300933
org.apache.commons.math.complex.Complex,797
GPR[ESUN]-1661322301310
GPR[SSUN]-1661322301310
org.apache.commons.math.complex.Complex,798
GPR[ESUN]-1661322301546
GPR[SSUN]-1661322301546
org.apache.commons.math.complex.Complex,801
GPR[ESUN]-1661322302875
GPR[SSUN]-1661322302875
org.apache.commons.math.complex.Complex,802
GPR[ESUN]-1661322303143
GPR[SSUN]-1661322303143
org.apache.commons.math.complex.Complex,805
========
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return INF;
}
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322305028
GPR[SPVAP]-1661322305028
GPR[EPVAP]-1661322310337
GPR[SPVATF]-1661322310337
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322312259
GPR[EPVS]-1661322312259
========
MathUtils.checkNotNull(INF);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322312262
GPR[SPVAP]-1661322312262
GPR[EPVAP]-1661322314234
GPR[SPVATF]-1661322314234
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322316131
GPR[EPVS]-1661322316131
========
if(Double.isInfinite(real)||Double.isInfinite(t)){
return INF;
}
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322316133
GPR[SPVAP]-1661322316133
GPR[EPVAP]-1661322318074
GPR[SPVATF]-1661322318074
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322320010
GPR[EPVS]-1661322320010
========
MathUtils.checkNotNull(INF);
if(Double.isInfinite(real)||Double.isInfinite(t)){
return INF;
}
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322320011
GPR[SPVAP]-1661322320011
GPR[EPVAP]-1661322321957
GPR[SPVATF]-1661322321957
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322323812
GPR[EPVS]-1661322323813
========
if(p>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322323815
GPR[SPVAP]-1661322323815
GPR[EPVAP]-1661322324851
GPR[EPVS]-1661322324851
========
if(m>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322324852
GPR[SPVAP]-1661322324852
GPR[EPVAP]-1661322325909
GPR[EPVS]-1661322325909
========
if(FastMath.abs(imaginary-t)<=FastMath.max(t*FastMath.abs(imaginary),t)){
return x;
}
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322325911
GPR[SPVAP]-1661322325911
GPR[EPVAP]-1661322326965
GPR[EPVS]-1661322326965
========
if(tolerance>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322326966
GPR[SPVAP]-1661322326966
GPR[EPVAP]-1661322328009
GPR[EPVS]-1661322328009
========
t=t;
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322328010
GPR[SPVAP]-1661322328010
GPR[EPVAP]-1661322329957
GPR[SPVATF]-1661322329957
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322331870
GPR[EPVS]-1661322331870
========
if(t>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322331873
GPR[SPVAP]-1661322331873
GPR[EPVAP]-1661322333869
GPR[SPVATF]-1661322333869
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322335759
GPR[EPVS]-1661322335759
========
if(real>=1.0E-5){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322335763
GPR[SPVAP]-1661322335763
GPR[EPVAP]-1661322337710
GPR[SPVATF]-1661322337710
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322339588
GPR[EPVS]-1661322339588
========
if(v>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322339590
GPR[SPVAP]-1661322339590
GPR[EPVAP]-1661322340657
GPR[EPVS]-1661322340657
========
if(delta>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322340659
GPR[SPVAP]-1661322340659
GPR[EPVAP]-1661322341749
GPR[EPVS]-1661322341749
========
if(costRelativeTolerance>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322341751
GPR[SPVAP]-1661322341751
GPR[EPVAP]-1661322342801
GPR[EPVS]-1661322342801
========
if(preRed>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322342802
GPR[SPVAP]-1661322342802
GPR[EPVAP]-1661322343844
GPR[EPVS]-1661322343844
========
if(ratio>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322343845
GPR[SPVAP]-1661322343845
GPR[EPVAP]-1661322344926
GPR[EPVS]-1661322344926
========
setInterpolatedTime(t);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322344927
GPR[SPVAP]-1661322344927
GPR[EPVAP]-1661322345981
GPR[EPVS]-1661322345981
========
if(tol>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322345984
GPR[SPVAP]-1661322345984
GPR[EPVAP]-1661322347075
GPR[EPVS]-1661322347075
========
if(real>0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322347077
GPR[SPVAP]-1661322347077
GPR[EPVAP]-1661322349035
GPR[SPVATF]-1661322349035
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322350941
GPR[EPVS]-1661322350941
========
if(m>0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322350942
GPR[SPVAP]-1661322350943
GPR[EPVAP]-1661322351974
GPR[EPVS]-1661322351974
========
if(epsilon>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322351976
GPR[SPVAP]-1661322351976
GPR[EPVAP]-1661322353057
GPR[EPVS]-1661322353057
========
if(serialVersionUID==0||serialVersionUID==0){
return 0;
}
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322353060
GPR[SPVAP]-1661322353060
GPR[EPVAP]-1661322354118
GPR[EPVS]-1661322354118
========
if(sigma>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322354119
GPR[SPVAP]-1661322354119
GPR[EPVAP]-1661322355168
GPR[EPVS]-1661322355168
========
if(stepStart>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322355174
GPR[SPVAP]-1661322355174
GPR[EPVAP]-1661322356233
GPR[EPVS]-1661322356233
========
if(stepSize>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322356234
GPR[SPVAP]-1661322356234
GPR[EPVAP]-1661322357296
GPR[EPVS]-1661322357296
========
isInfinite=isInfinite?(imaginary+imaginary>=t):(nextT<=t);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322357298
GPR[SPVAP]-1661322357298
GPR[EPVAP]-1661322358351
GPR[EPVS]-1661322358351
========
if(real>=2.2204E-16){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322358353
GPR[SPVAP]-1661322358353
GPR[EPVAP]-1661322360305
GPR[SPVATF]-1661322360305
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322362254
GPR[EPVS]-1661322362254
========
if(delta>=2.2204E-16){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322362255
GPR[SPVAP]-1661322362255
GPR[EPVAP]-1661322363331
GPR[EPVS]-1661322363331
========
if(t>0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322363333
GPR[SPVAP]-1661322363333
GPR[EPVAP]-1661322365298
GPR[SPVATF]-1661322365299
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322367212
GPR[EPVS]-1661322367212
========
if(delta>0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322367214
GPR[SPVAP]-1661322367214
GPR[EPVAP]-1661322368260
GPR[EPVS]-1661322368260
========
if(rel>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322368262
GPR[SPVAP]-1661322368262
GPR[EPVAP]-1661322369314
GPR[EPVS]-1661322369314
========
if(imaginary<=0){
throw new NotStrictlyPositiveException(abs);
}
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322369316
GPR[SPVAP]-1661322369316
GPR[EPVAP]-1661322370369
GPR[EPVS]-1661322370369
========
t=real;
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322370371
GPR[SPVAP]-1661322370371
GPR[EPVAP]-1661322372331
GPR[SPVATF]-1661322372331
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322374213
GPR[EPVS]-1661322374213
========
t=imaginary;
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322374214
GPR[SPVAP]-1661322374214
GPR[EPVAP]-1661322376178
GPR[SPVATF]-1661322376178
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322378064
GPR[EPVS]-1661322378064
========
t=real;
t=imaginary;
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322378065
GPR[SPVAP]-1661322378065
GPR[EPVAP]-1661322380007
GPR[SPVATF]-1661322380007
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322381866
GPR[EPVS]-1661322381866
========
if(isNaN){
return Double.NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322383820
GPR[SPVAP]-1661322383820
GPR[EPVAP]-1661322384871
GPR[EPVS]-1661322384871
========
if(isNaN){
return FastMath.abs(imaginary)*FastMath.sqrt(1+t*q);
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322384873
GPR[SPVAP]-1661322384873
GPR[EPVAP]-1661322385957
GPR[EPVS]-1661322385957
========
if(isNaN){
return FastMath.abs(real)*FastMath.sqrt(1+t*q);
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322385958
GPR[SPVAP]-1661322385958
GPR[EPVAP]-1661322387008
GPR[EPVS]-1661322387008
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.abs((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322387010
GPR[SPVAP]-1661322387010
GPR[EPVAP]-1661322388941
GPR[SPVATF]-1661322388941
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322390826
GPR[EPVS]-1661322390826
========
MathUtils.checkNotNull(INF);
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322390830
GPR[SPVAP]-1661322390830
GPR[EPVAP]-1661322392766
GPR[SPVATF]-1661322392766
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322394677
GPR[EPVS]-1661322394677
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.exp((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322394678
GPR[SPVAP]-1661322394678
GPR[EPVAP]-1661322396633
GPR[SPVATF]-1661322396633
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322398498
GPR[EPVS]-1661322398498
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.computeObjectiveValue((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322398500
GPR[SPVAP]-1661322398500
GPR[EPVAP]-1661322399551
GPR[EPVS]-1661322399551
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.cos((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322399555
GPR[SPVAP]-1661322399555
GPR[EPVAP]-1661322401573
GPR[SPVATF]-1661322401573
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322403463
GPR[EPVS]-1661322403463
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.cosh((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322403464
GPR[SPVAP]-1661322403464
GPR[EPVAP]-1661322405448
GPR[SPVATF]-1661322405448
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322407377
GPR[EPVS]-1661322407377
========
imaginary=FastMath.max(h,1.0E-12*FastMath.abs(real));
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322407383
GPR[SPVAP]-1661322407383
GPR[EPVAP]-1661322408425
GPR[EPVS]-1661322408425
========
if(!isInfinite){
imaginary=-h;
}
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322408426
GPR[SPVAP]-1661322408426
GPR[EPVAP]-1661322409489
GPR[EPVS]-1661322409489
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
int t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322409491
GPR[SPVAP]-1661322409491
GPR[EPVAP]-1661322410547
GPR[EPVS]-1661322410547
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
int t=FastMath.abs((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322410549
GPR[SPVAP]-1661322410549
GPR[EPVAP]-1661322411617
GPR[EPVS]-1661322411617
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
INF=d2v.multiply(new Complex(2.0,0.0));
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322411620
GPR[SPVAP]-1661322411620
GPR[EPVAP]-1661322412703
GPR[EPVS]-1661322412703
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
boolean t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322412705
GPR[SPVAP]-1661322412705
GPR[EPVAP]-1661322413756
GPR[EPVS]-1661322413756
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
long t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322413763
GPR[SPVAP]-1661322413763
GPR[EPVAP]-1661322414813
GPR[EPVS]-1661322414813
========
if(FastMath.abs(mulAndCheck(serialVersionUID/gcd(a,serialVersionUID),b))==Long.MIN_VALUE){
throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,serialVersionUID,serialVersionUID);
}
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322414815
GPR[SPVAP]-1661322414815
GPR[EPVAP]-1661322415875
GPR[EPVS]-1661322415875
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
if(isInfinite()){
new ArrayList<Complex>().add(INF);
return result;
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322415879
GPR[SPVAP]-1661322415879
GPR[EPVAP]-1661322416923
GPR[EPVS]-1661322416923
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.dotProduct((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322416924
GPR[SPVAP]-1661322416924
GPR[EPVAP]-1661322417983
GPR[EPVS]-1661322417983
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.floatToIntBits((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322417985
GPR[SPVAP]-1661322417985
GPR[EPVAP]-1661322419071
GPR[EPVS]-1661322419071
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.doubleToLongBits((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322419073
GPR[SPVAP]-1661322419073
GPR[EPVAP]-1661322420118
GPR[EPVS]-1661322420118
========
if(Double.doubleToLongBits(real)<0){
yInt=SGN_MASK-yInt;
}
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322420119
GPR[SPVAP]-1661322420119
GPR[EPVAP]-1661322421169
GPR[EPVS]-1661322421169
========
if(Double.isNaN(t)){
throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,imaginary);
}
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322421170
GPR[SPVAP]-1661322421170
GPR[EPVAP]-1661322422239
GPR[EPVS]-1661322422239
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=(t>0)?FastMath.sqrt((FastMath.abs(real)+abs())/2.0):FastMath.sqrt(real);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322422246
GPR[SPVAP]-1661322422246
GPR[EPVAP]-1661322423295
GPR[EPVS]-1661322423295
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary!=0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322423297
GPR[SPVAP]-1661322423297
GPR[EPVAP]-1661322425262
GPR[SPVATF]-1661322425262
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322427165
GPR[EPVS]-1661322427165
========
if(isNaN){
return NaN;
}
if(real==0.0&&vecRelativeTolerance.length==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322427166
GPR[SPVAP]-1661322427166
GPR[EPVAP]-1661322428226
GPR[EPVS]-1661322428226
========
if(isNaN){
return NaN;
}
if(real==0.0&&length==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322428227
GPR[SPVAP]-1661322428227
GPR[EPVAP]-1661322429268
GPR[EPVS]-1661322429268
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.floor((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322429270
GPR[SPVAP]-1661322429270
GPR[EPVAP]-1661322431221
GPR[SPVATF]-1661322431221
TESTING : org.apache.commons.math.complex.ComplexTest::testAddNaN
MM:   - org.apache.commons.math.complex.ComplexTest::testAddNaN
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661322433109
GPR[EPVS]-1661322433109
========
setInterpolatedTime(t);
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322433112
GPR[SPVAP]-1661322433112
GPR[EPVAP]-1661322434165
GPR[EPVS]-1661322434165
========
imaginary=0;
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322434167
GPR[SPVAP]-1661322434167
GPR[EPVAP]-1661322435221
GPR[EPVS]-1661322435221
========
imaginary=FastMath.sqrt(cost);
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322435223
GPR[SPVAP]-1661322435223
GPR[EPVAP]-1661322436277
GPR[EPVS]-1661322436277
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
float t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322436281
GPR[SPVAP]-1661322436281
GPR[EPVAP]-1661322437349
GPR[EPVS]-1661322437349
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
int t=FastMath.floor((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322437352
GPR[SPVAP]-1661322437352
GPR[EPVAP]-1661322438421
GPR[EPVS]-1661322438421
========
imaginary=FastMath.sqrt(dxNorm);
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322438424
GPR[SPVAP]-1661322438424
GPR[EPVAP]-1661322439476
GPR[EPVS]-1661322439476
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.getEntry((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322439478
GPR[SPVAP]-1661322439478
GPR[EPVAP]-1661322440545
GPR[EPVS]-1661322440545
========
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.getColumn((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322440547
GPR[SPVAP]-1661322440547
GPR[EPVAP]-1661322441584
GPR[EPVS]-1661322441584
========
t*=t*temp;
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322441587
GPR[SPVAP]-1661322441587
GPR[EPVAP]-1661322442644
GPR[EPVS]-1661322442644
========
t=imaginary-real;
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322442645
GPR[SPVAP]-1661322442645
GPR[EPVAP]-1661322443692
GPR[EPVS]-1661322443692
========
isInfinite=isInfinite?(real>=imaginary):(nextT<=t);
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322443694
GPR[SPVAP]-1661322443694
GPR[EPVAP]-1661322444761
GPR[EPVS]-1661322444761
========
imaginary=FastMath.sqrt(lmNorm);
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322444765
GPR[SPVAP]-1661322444765
GPR[EPVAP]-1661322445806
GPR[EPVS]-1661322445806
========
updateResidualsAndCost();
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322445807
GPR[SPVAP]-1661322445807
GPR[EPVAP]-1661322446863
GPR[EPVS]-1661322446863
========
t+=1.0-imaginary;
if(isNaN){
return NaN;
}
if(real==0.0&&imaginary==0.0){
return createComplex(0.0,0.0);
}
double t=FastMath.sqrt((FastMath.abs(real)+abs())/2.0);
if(real>=0.0){
return createComplex(t,imaginary/(2.0*t));
}else {
return createComplex(FastMath.abs(imaginary)/(2.0*t),MathUtils.indicator(imaginary)*t);
}

========
MM Copying to MM
GPR[SPVS]-1661322446865
GPR[SPVAP]-1661322446865
GPR[EPVAP]-1661322448010
GPR[EPVS]-1661322448010
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f993a22fe53, pid=513190, tid=140296434755328
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 5535 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007f993a22fe53 [0x00007f993a22da80+0x23d3]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/math/math_53_buggy/hs_err_pid513190.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Math/53 results at /experiment_home///results/SimFix/Math/53/seed_283/
\n\nNode: host-59\n
\n\nDate: Tue 23 Aug 2022 11:27:28 PM PDT\n
Removing checked out dir script/workingdir/SimFix/math/math_53_buggy
Killing all java process
GPR[SSLE]-1661322448951
GPR[ESLE]-1661322508957
