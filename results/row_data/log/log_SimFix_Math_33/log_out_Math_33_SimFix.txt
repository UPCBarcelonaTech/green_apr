Sleep 1m start
GPR[SSLI]-1659844441019
GPR[ESLI]-1659844501023
Running SimFix Math 33b
Timezone: America/Los_Angeles
Seed 260
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Math/33/seed_260/
Project lc: math
New out script/workingdir/SimFix/math/math_33_buggy
The file script/workingdir/SimFix/math/math_33_buggy does not exist!
script/workingdir/SimFix/math/math_33_buggy
Current directory: script/workingdir/SimFix/math/math_33_buggy
classpath:  script/workingdir/SimFix/math/math_33_buggy/target/classes:script/workingdir/SimFix/math/math_33_buggy/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/SimFix/math/math_33_buggy/lib/junit-4.8.2.jar
Src java:  /src/main/java
Classes Java:  /target/classes
Src Test:  /src/test/java
Classes Test:  /target/test-classes
GPR[SSLB]-1659844518768
GPR[ESLB]-1659844578773
Calling SimFix: at script/workingdir/SimFix/math/math_33_buggy
build.xml
checkstyle.xml
d4j-info
defects4j.build.properties
doap_math.rdf
findbugs-exclude-filter.xml
license-header.txt
LICENSE.txt
math-pre-RC.sh
math-RC.sh
NOTICE.txt
pom.xml
PROPOSAL.html
RELEASE-NOTES.txt
siteMods
src
target
test-jar.xml
content current dir: build.xml checkstyle.xml d4j-info defects4j.build.properties doap_math.rdf findbugs-exclude-filter.xml license-header.txt LICENSE.txt math-pre-RC.sh math-RC.sh NOTICE.txt pom.xml PROPOSAL.html RELEASE-NOTES.txt siteMods src target test-jar.xml
Node: host-63
Date init: Sat 06 Aug 2022 08:56:23 PM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659844584064
=================================================
Project : math_33	start : 22/08/06 20:56

Field type inconsistancy 'start' with types : Vector2D and Vector3D
Field type inconsistancy 'end' with types : Vector2D and Vector3D
Variable type inconsistancy of 'start' in method 'getSegments' with types : Vector2D and Vector3D
Variable type inconsistancy of 'end' in method 'getSegments' with types : Vector2D and Vector3D
GPR[ESUP]-1659844586781
MM Purify? false
GPR[SFL]-1659844587319
GPR[EFL]-1659844587364
GPR[SFP]-1659844587364
TIMEOUT : 18000000
GPR[SSUN]-1659844587378
org.apache.commons.math3.optimization.linear.Relationship,59
GPR[ESUN]-1659844591626
GPR[SSUN]-1659844591626
org.apache.commons.math3.optimization.linear.SimplexTableau,406
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
if(i<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844596012
GPR[SPVAP]-1659844596012
GPR[EPVAP]-1659844601813
GPR[SPVATF]-1659844601813
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844603758
GPR[EPVS]-1659844603758
========
if(colIndex<numSlackVariables){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844603760
GPR[SPVAP]-1659844603760
GPR[EPVAP]-1659844605767
GPR[SPVATF]-1659844605767
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844607687
GPR[EPVS]-1659844607687
========
if(i<numSlackVariables){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844607689
GPR[SPVAP]-1659844607689
GPR[EPVAP]-1659844609725
GPR[SPVATF]-1659844609725
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844611719
GPR[EPVS]-1659844611719
========
if(t<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844611723
GPR[SPVAP]-1659844611723
GPR[EPVAP]-1659844612803
GPR[EPVS]-1659844612803
========
if(c<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844612805
GPR[SPVAP]-1659844612805
GPR[EPVAP]-1659844613885
GPR[EPVS]-1659844613885
========
if(sig<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844613888
GPR[SPVAP]-1659844613888
GPR[EPVAP]-1659844614968
GPR[EPVS]-1659844614968
========
if(colIndex<0){
sp=i;
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844614969
GPR[SPVAP]-1659844614969
GPR[EPVAP]-1659844616042
GPR[EPVS]-1659844616042
========
if(sig<0){
sp=i;
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844616044
GPR[SPVAP]-1659844616044
GPR[EPVAP]-1659844617145
GPR[EPVS]-1659844617145
========
if(comp<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844617148
GPR[SPVAP]-1659844617148
GPR[EPVAP]-1659844618226
GPR[EPVS]-1659844618226
========
if(colIndex<0){
coefficients[i]=numSlackVariables;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844618228
GPR[SPVAP]-1659844618228
GPR[EPVAP]-1659844620206
GPR[SPVATF]-1659844620206
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844622146
GPR[EPVS]-1659844622146
========
if(colIndex<0){
aextradigit=0;
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844622148
GPR[SPVAP]-1659844622148
GPR[EPVAP]-1659844623232
GPR[EPVS]-1659844623232
========
if(colIndex<0){
bextradigit=0;
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844623234
GPR[SPVAP]-1659844623234
GPR[EPVAP]-1659844624320
GPR[EPVS]-1659844624321
========
if(colIndex<0){
aextradigit=0;
bextradigit=0;

coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844624322
GPR[SPVAP]-1659844624322
GPR[EPVAP]-1659844625409
GPR[EPVS]-1659844625409
========
if(i<0){
coefficients[i]=numSlackVariables;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844625410
GPR[SPVAP]-1659844625410
GPR[EPVAP]-1659844627394
GPR[SPVATF]-1659844627394
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844629314
GPR[EPVS]-1659844629314
========
if(colIndex<0){
e[m]=0.0;
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844629316
GPR[SPVAP]-1659844629316
GPR[EPVAP]-1659844630393
GPR[EPVS]-1659844630393
========
if(n<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844630395
GPR[SPVAP]-1659844630395
GPR[EPVAP]-1659844631468
GPR[EPVS]-1659844631468
========
MathUtils.checkNotNull(coefficients);
if(colIndex<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844631470
GPR[SPVAP]-1659844631470
GPR[EPVAP]-1659844632541
GPR[EPVS]-1659844632541
========
if(mu<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844632543
GPR[SPVAP]-1659844632543
GPR[EPVAP]-1659844633621
GPR[EPVS]-1659844633622
========
if(j<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844633623
GPR[SPVAP]-1659844633623
GPR[EPVAP]-1659844634693
GPR[EPVS]-1659844634693
========
if(colIndex<0||colIndex>=size[i]){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844634695
GPR[SPVAP]-1659844634695
GPR[EPVAP]-1659844635755
GPR[EPVS]-1659844635755
========
if(index<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844635757
GPR[SPVAP]-1659844635757
GPR[EPVAP]-1659844636817
GPR[EPVS]-1659844636817
========
setSeed(19650218);
if(colIndex<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844636819
GPR[SPVAP]-1659844636819
GPR[EPVAP]-1659844637881
GPR[EPVS]-1659844637882
========
if(tempb<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844637884
GPR[SPVAP]-1659844637884
GPR[EPVAP]-1659844638954
GPR[EPVS]-1659844638954
========
if(colIndex<0){
++numSlackVariables;
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844638955
GPR[SPVAP]-1659844638955
GPR[EPVAP]-1659844640066
GPR[EPVS]-1659844640066
========
if(colIndex<0){
state=100;
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844640067
GPR[SPVAP]-1659844640067
GPR[EPVAP]-1659844641171
GPR[EPVS]-1659844641171
========
if(colIndex<0){
++numSlackVariables;
state=100;

coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844641173
GPR[SPVAP]-1659844641173
GPR[EPVAP]-1659844642255
GPR[EPVS]-1659844642255
========
if(checkFeasableCount<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844642257
GPR[SPVAP]-1659844642257
GPR[EPVAP]-1659844643367
GPR[EPVS]-1659844643367
========
if(bytesOut<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844643373
GPR[SPVAP]-1659844643373
GPR[EPVAP]-1659844644439
GPR[EPVS]-1659844644439
========
if(length<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844644441
GPR[SPVAP]-1659844644441
GPR[EPVAP]-1659844645507
GPR[EPVS]-1659844645507
========
numSlackVariables=numSlackVariables;
if(colIndex<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844645509
GPR[SPVAP]-1659844645509
GPR[EPVAP]-1659844646593
GPR[EPVS]-1659844646593
========
i=numSlackVariables;
if(colIndex<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844646594
GPR[SPVAP]-1659844646594
GPR[EPVAP]-1659844648599
GPR[SPVATF]-1659844648599
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844650505
GPR[EPVS]-1659844650505
========
i=numSlackVariables;
if(colIndex<numSlackVariables){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844650507
GPR[SPVAP]-1659844650507
GPR[EPVAP]-1659844652476
GPR[SPVATF]-1659844652477
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844654387
GPR[EPVS]-1659844654387
========
if(end<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844654391
GPR[SPVAP]-1659844654391
GPR[EPVAP]-1659844657027
GPR[EPVS]-1659844657028
========
if(cmp<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844657039
GPR[SPVAP]-1659844657039
GPR[EPVAP]-1659844658241
GPR[EPVS]-1659844658241
========
if(numSlackVariables<numSlackVariables){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844658244
GPR[SPVAP]-1659844658244
GPR[EPVAP]-1659844660203
GPR[SPVATF]-1659844660203
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844662133
GPR[EPVS]-1659844662133
========
if(numSlackVariables<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844662135
GPR[SPVAP]-1659844662135
GPR[EPVAP]-1659844664093
GPR[SPVATF]-1659844664093
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844666043
GPR[EPVS]-1659844666043
========
if(nearest<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844666045
GPR[SPVAP]-1659844666045
GPR[EPVAP]-1659844667125
GPR[EPVS]-1659844667126
========
if(k<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844667129
GPR[SPVAP]-1659844667129
GPR[EPVAP]-1659844668220
GPR[EPVS]-1659844668220
========
if(e<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844668221
GPR[SPVAP]-1659844668221
GPR[EPVAP]-1659844669300
GPR[EPVS]-1659844669300
========
if(startIndex<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844669302
GPR[SPVAP]-1659844669302
GPR[EPVAP]-1659844670396
GPR[EPVS]-1659844670396
========
if(nextRight<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844670399
GPR[SPVAP]-1659844670399
GPR[EPVAP]-1659844671476
GPR[EPVS]-1659844671476
========
if(cutoff<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844671478
GPR[SPVAP]-1659844671478
GPR[EPVAP]-1659844672547
GPR[EPVS]-1659844672547
========
coefficients[i]=work[i];
if(colIndex<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844672549
GPR[SPVAP]-1659844672549
GPR[EPVAP]-1659844673638
GPR[EPVS]-1659844673638
========
coefficients[i]=epsilon;
if(colIndex<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844673639
GPR[SPVAP]-1659844673639
GPR[EPVAP]-1659844675640
GPR[SPVATF]-1659844675640
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844677530
GPR[EPVS]-1659844677530
========
coefficients[i]=epsilon;
if(i<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844677532
GPR[SPVAP]-1659844677532
GPR[EPVAP]-1659844679497
GPR[SPVATF]-1659844679497
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844681431
GPR[EPVS]-1659844681431
========
coefficients[i]=epsilon;
if(end<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844681432
GPR[SPVAP]-1659844681432
GPR[EPVAP]-1659844682491
GPR[EPVS]-1659844682491
========
if(next<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844682493
GPR[SPVAP]-1659844682493
GPR[EPVAP]-1659844683593
GPR[EPVS]-1659844683593
========
if(glagValue<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844683606
GPR[SPVAP]-1659844683606
GPR[EPVAP]-1659844684675
GPR[EPVS]-1659844684675
========
if(++numSlackVariables<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844684678
GPR[SPVAP]-1659844684678
GPR[EPVAP]-1659844685761
GPR[EPVS]-1659844685761
========
if(count<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844685763
GPR[SPVAP]-1659844685763
GPR[EPVAP]-1659844686852
GPR[EPVS]-1659844686852
========
if(tmp2<0){
coefficients[i]=0;
continue;
}

========
MM Copying to MM
GPR[SPVS]-1659844686854
GPR[SPVAP]-1659844686854
GPR[EPVAP]-1659844687928
GPR[EPVS]-1659844687929
GPR[ESUN]-1659844687931
GPR[SSUN]-1659844687931
org.apache.commons.math3.optimization.linear.SimplexTableau,407
GPR[ESUN]-1659844688454
GPR[SSUN]-1659844688454
org.apache.commons.math3.optimization.linear.SimplexTableau,261
GPR[ESUN]-1659844690013
GPR[SSUN]-1659844690013
org.apache.commons.math3.optimization.linear.SimplexTableau,339
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
if(Precision.compareTo(entry,0.0,maxUlps)>0){
minRatioPositions.add(i);
}

========
MM Copying to MM
GPR[SPVS]-1659844694014
GPR[SPVAP]-1659844694014
GPR[EPVAP]-1659844696862
GPR[EPVS]-1659844696862
========
if(Precision.compareTo(entry,0.0,epsilon)>0){
columnsToDrop.add(i);
}

========
MM Copying to MM
GPR[SPVS]-1659844696864
GPR[SPVAP]-1659844696864
GPR[EPVAP]-1659844701605
GPR[SPVATF]-1659844701605
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 0
GPR[EPVATF]-1659844703555
GPR[SPVATR]-1659844703555
TESTING : math_33
MM messageFailing tests: 0
GPR[EPVATR]-1659844738630
GPR[EPVS]-1659844738630
GPR[PF]-1659844738630
sourceFile  script/workingdir/SimFix/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
location   script/workingdir/SimFix/math/math_33_buggy
MM Out patch at /experiment_home///results/SimFix/Math/33/seed_260/patch/math/33/0/patch_151270_1_ts_1659844738630.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java --label=/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java /tmp/tmpDirMM3000801508162155645/SimplexTableau.java  /experiment_home///results/SimFix/Math/33/seed_260/patch/math/33/0/1_SimplexTableau.java  --unified=3  > /experiment_home///results/SimFix/Math/33/seed_260/patch/math/33/0/patch_151270_1_ts_1659844738630.diff
MMOut command diff: []
========
if(NEGATIVE_VAR_COLUMN_LABEL.substring(numSlackVariables,maxUlps).compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}

========
MM Copying to MM
GPR[SPVS]-1659844738648
GPR[SPVAP]-1659844738648
GPR[EPVAP]-1659844739745
GPR[EPVS]-1659844739745
========
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.valueOf(i);
}

========
MM Copying to MM
GPR[SPVS]-1659844739746
GPR[SPVAP]-1659844739746
GPR[EPVAP]-1659844740822
GPR[EPVS]-1659844740822
========
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.sqrt(i);
}

========
MM Copying to MM
GPR[SPVS]-1659844740827
GPR[SPVAP]-1659844740827
GPR[EPVAP]-1659844741900
GPR[EPVS]-1659844741900
========
if(Precision.compareTo(entry,0.0,maxUlps)>0){
continue;
columnsToDrop.add(i);
}

========
MM Copying to MM
GPR[SPVS]-1659844741901
GPR[SPVAP]-1659844741901
GPR[EPVAP]-1659844742989
GPR[EPVS]-1659844742989
========
if(Precision.compareTo(entry,0.0,maxUlps)>numSlackVariables){
columnsToDrop.add(i);
}

========
MM Copying to MM
GPR[SPVS]-1659844742992
GPR[SPVAP]-1659844742992
GPR[EPVAP]-1659844745025
GPR[SPVATF]-1659844745025
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 0
GPR[EPVATF]-1659844746946
GPR[SPVATR]-1659844746946
TESTING : math_33
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testDropPhase1Objective
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath293
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath286
MM messageFailing tests: 3
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659844781355
GPR[EPVS]-1659844781355
========
if(FastMath.abs(tableau.getEntry(i,i+1)-tableau.getEntry(i+1,i))>0){
columnsToDrop.add(i);
}

========
MM Copying to MM
GPR[SPVS]-1659844781370
GPR[SPVAP]-1659844781370
GPR[EPVAP]-1659844782488
GPR[EPVS]-1659844782488
========
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.setIndex(i);
}

========
MM Copying to MM
GPR[SPVS]-1659844782499
GPR[SPVAP]-1659844782499
GPR[EPVAP]-1659844783583
GPR[EPVS]-1659844783583
========
if(Precision.compareTo(entry,0.0,maxUlps)>0){
return false;
columnsToDrop.add(i);
}

========
MM Copying to MM
GPR[SPVS]-1659844783584
GPR[SPVAP]-1659844783584
GPR[EPVAP]-1659844784659
GPR[EPVS]-1659844784659
GPR[ESUN]-1659844784667
GPR[SSUN]-1659844784667
org.apache.commons.math3.optimization.linear.Relationship,57
Find no block!
GPR[SSUN]-1659844785136
org.apache.commons.math3.optimization.linear.Relationship,57
Find no block!
GPR[SSUN]-1659844785395
org.apache.commons.math3.optimization.linear.SimplexTableau,226
========
if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844787485
GPR[SPVAP]-1659844787485
GPR[EPVAP]-1659844793252
GPR[SPVATF]-1659844793252
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844795181
GPR[EPVS]-1659844795181
========
if(constraint.getRelationship()==constraint){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844795182
GPR[SPVAP]-1659844795182
GPR[EPVAP]-1659844796265
GPR[EPVS]-1659844796266
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844796267
GPR[SPVAP]-1659844796267
GPR[EPVAP]-1659844798262
GPR[SPVATF]-1659844798262
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844802161
GPR[EPVS]-1659844802161
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844802163
GPR[SPVAP]-1659844802163
GPR[EPVAP]-1659844804131
GPR[SPVATF]-1659844804131
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844806076
GPR[EPVS]-1659844806076
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844806078
GPR[SPVAP]-1659844806078
GPR[EPVAP]-1659844808049
GPR[SPVATF]-1659844808049
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844809970
GPR[EPVS]-1659844809970
========
if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844809979
GPR[SPVAP]-1659844809979
GPR[EPVAP]-1659844811966
GPR[SPVATF]-1659844811966
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844813907
GPR[EPVS]-1659844813907
========
if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844813908
GPR[SPVAP]-1659844813908
GPR[EPVAP]-1659844815942
GPR[SPVATF]-1659844815942
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844817894
GPR[EPVS]-1659844817894
========
if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844817895
GPR[SPVAP]-1659844817895
GPR[EPVAP]-1659844819889
GPR[SPVATF]-1659844819889
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844821812
GPR[EPVS]-1659844821812
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844821814
GPR[SPVAP]-1659844821814
GPR[EPVAP]-1659844823771
GPR[SPVATF]-1659844823771
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844825681
GPR[EPVS]-1659844825681
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844825683
GPR[SPVAP]-1659844825683
GPR[EPVAP]-1659844827648
GPR[SPVATF]-1659844827648
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844829577
GPR[EPVS]-1659844829577
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844829579
GPR[SPVAP]-1659844829579
GPR[EPVAP]-1659844831543
GPR[SPVATF]-1659844831543
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844833466
GPR[EPVS]-1659844833466
========
if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844833468
GPR[SPVAP]-1659844833468
GPR[EPVAP]-1659844835446
GPR[SPVATF]-1659844835446
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844837387
GPR[EPVS]-1659844837387
========
if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844837389
GPR[SPVAP]-1659844837389
GPR[EPVAP]-1659844839402
GPR[SPVATF]-1659844839402
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844841363
GPR[EPVS]-1659844841363
========
if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844841364
GPR[SPVAP]-1659844841364
GPR[EPVAP]-1659844843362
GPR[SPVATF]-1659844843362
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844845274
GPR[EPVS]-1659844845274
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844845277
GPR[SPVAP]-1659844845277
GPR[EPVAP]-1659844847241
GPR[SPVATF]-1659844847241
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844849154
GPR[EPVS]-1659844849154
========
if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844849156
GPR[SPVAP]-1659844849156
GPR[EPVAP]-1659844851108
GPR[SPVATF]-1659844851108
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844853022
GPR[EPVS]-1659844853022
========
if(constraint.getRelationship()==ZERO){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844853024
GPR[SPVAP]-1659844853024
GPR[EPVAP]-1659844854089
GPR[EPVS]-1659844854089
========
if(constraint.getRelationship()!=Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844854092
GPR[SPVAP]-1659844854092
GPR[EPVAP]-1659844856060
GPR[SPVATF]-1659844856060
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844857961
GPR[EPVS]-1659844857961
========
if(constraint.getRelationship()!=ZERO){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844857962
GPR[SPVAP]-1659844857962
GPR[EPVAP]-1659844859028
GPR[EPVS]-1659844859028
========
if(constraint.getRelationship()==ONE){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844859031
GPR[SPVAP]-1659844859031
GPR[EPVAP]-1659844860116
GPR[EPVS]-1659844860116
========
matrix.setEntry(row,numSlackVariables,epsilon);
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844860120
GPR[SPVAP]-1659844860120
GPR[EPVAP]-1659844862129
GPR[SPVATF]-1659844862129
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844864022
GPR[EPVS]-1659844864022
========
matrix.setEntry(row,numSlackVariables,epsilon);
if(constraint.getRelationship()==ZERO){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844864024
GPR[SPVAP]-1659844864024
GPR[EPVAP]-1659844865149
GPR[EPVS]-1659844865149
========
if(getEntry(row,numSlackVariables)==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844865151
GPR[SPVAP]-1659844865151
GPR[EPVAP]-1659844866224
GPR[EPVS]-1659844866224
GPR[ESUN]-1659844866226
GPR[SSUN]-1659844866226
org.apache.commons.math3.optimization.PointValuePair,67
========
 final double[] p=getKey();
return v==null?null:v.clone();

========
MM Copying to MM
GPR[SPVS]-1659844868002
GPR[SPVAP]-1659844868002
GPR[EPVAP]-1659844870641
GPR[EPVS]-1659844870641
========
 final double[] p=getKey();
return p==null?null:v.clone();

========
MM Copying to MM
GPR[SPVS]-1659844870642
GPR[SPVAP]-1659844870642
GPR[EPVAP]-1659844873976
GPR[EPVS]-1659844873976
========
 final double[] p=getKey();
return v==null?null:p.clone();

========
MM Copying to MM
GPR[SPVS]-1659844873977
GPR[SPVAP]-1659844873977
GPR[EPVAP]-1659844875653
GPR[EPVS]-1659844875653
GPR[ESUN]-1659844875654
GPR[SSUN]-1659844875654
org.apache.commons.math3.optimization.PointValuePair,68
GPR[ESUN]-1659844876060
GPR[SSUN]-1659844876060
org.apache.commons.math3.util.Pair,63
GPR[ESUN]-1659844877586
GPR[SSUN]-1659844877586
org.apache.commons.math3.optimization.linear.SimplexTableau,162
GPR[ESUN]-1659844879341
GPR[SSUN]-1659844879341
org.apache.commons.math3.optimization.linear.SimplexTableau,199
GPR[ESUN]-1659844881275
GPR[SSUN]-1659844881275
org.apache.commons.math3.optimization.linear.SimplexTableau,215
GPR[ESUN]-1659844883360
GPR[SSUN]-1659844883360
org.apache.commons.math3.optimization.linear.SimplexTableau,298
========
double sum=0;
if(!restrictToNonNegative)sum=-f;
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}
return sum;

========
MM Copying to MM
GPR[SPVS]-1659844885082
GPR[SPVAP]-1659844885082
GPR[EPVAP]-1659844887789
GPR[EPVS]-1659844887789
========
double sum=0;
for(double coefficient : coefficients.toArray()){
largest=FastMath.abs(sum);
sum-=coefficient;
}
return sum;

========
MM Copying to MM
GPR[SPVS]-1659844887790
GPR[SPVAP]-1659844887790
GPR[EPVAP]-1659844889325
GPR[EPVS]-1659844889325
========
if(Double.isNaN(epsilon)){
throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
}
double sum=0;
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}
return sum;

========
MM Copying to MM
GPR[SPVS]-1659844889327
GPR[SPVAP]-1659844889327
GPR[EPVAP]-1659844890852
GPR[EPVS]-1659844890852
========
if(numSlackVariables<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,k);
}
double sum=0;
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}
return sum;

========
MM Copying to MM
GPR[SPVS]-1659844890854
GPR[SPVAP]-1659844890854
GPR[EPVAP]-1659844892401
GPR[EPVS]-1659844892401
========
double sum=0;
for(double coefficient : coefficients.toArray()){
x+=coefficient;
sum-=coefficient;
}
return sum;

========
MM Copying to MM
GPR[SPVS]-1659844892408
GPR[SPVAP]-1659844892408
GPR[EPVAP]-1659844894006
GPR[EPVS]-1659844894006
========
double sum=0;
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}
sum=0.5*(s+sum*coefficient);
return sum;

========
MM Copying to MM
GPR[SPVS]-1659844894007
GPR[SPVAP]-1659844894007
GPR[EPVAP]-1659844895633
GPR[EPVS]-1659844895633
========
int sum=0;
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}
return sum;

========
MM Copying to MM
GPR[SPVS]-1659844895634
GPR[SPVAP]-1659844895634
GPR[EPVAP]-1659844900457
GPR[SPVATF]-1659844900457
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844902389
GPR[EPVS]-1659844902389
========
double sum=0;
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}
return epsilon*sum;

========
MM Copying to MM
GPR[SPVS]-1659844902391
GPR[SPVAP]-1659844902391
GPR[EPVAP]-1659844903458
GPR[EPVS]-1659844903458
========
double sum=0;
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}
return halfStep;

========
MM Copying to MM
GPR[SPVS]-1659844903459
GPR[SPVAP]-1659844903459
GPR[EPVAP]-1659844904517
GPR[EPVS]-1659844904517
========
if(!isNonSingular()){
throw new SingularMatrixException();
}
double sum=0;
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}
return sum;

========
MM Copying to MM
GPR[SPVS]-1659844904519
GPR[SPVAP]-1659844904519
GPR[EPVAP]-1659844905585
GPR[EPVS]-1659844905585
========
double sum=numSlackVariables;
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}
return sum;

========
MM Copying to MM
GPR[SPVS]-1659844905587
GPR[SPVAP]-1659844905587
GPR[EPVAP]-1659844906656
GPR[EPVS]-1659844906656
GPR[ESUN]-1659844906657
GPR[SSUN]-1659844906657
org.apache.commons.math3.optimization.linear.SimplexTableau,299
========
for(double coefficient : coefficients.toArray()){
sum-=f;
}

========
MM Copying to MM
GPR[SPVS]-1659844908421
GPR[SPVAP]-1659844908421
GPR[EPVAP]-1659844911199
GPR[EPVS]-1659844911200
========
for(double coefficient : coefficients.toArray()){
state=720;
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844911201
GPR[SPVAP]-1659844911201
GPR[EPVAP]-1659844912765
GPR[EPVS]-1659844912765
========
for(double coefficient : coefficients.toArray()){
break;
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844912766
GPR[SPVAP]-1659844912766
GPR[EPVAP]-1659844914309
GPR[EPVS]-1659844914309
========
for(double coefficient : coefficients.toArray()){
state=720;
break;

sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844914311
GPR[SPVAP]-1659844914311
GPR[EPVAP]-1659844915864
GPR[EPVS]-1659844915864
========
if(!restrictToNonNegative)f=-f;
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844915865
GPR[SPVAP]-1659844915865
GPR[EPVAP]-1659844917399
GPR[EPVS]-1659844917400
========
for(double coefficient : coefficients.toArray()){
largest=FastMath.abs(sum);
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844917402
GPR[SPVAP]-1659844917402
GPR[EPVAP]-1659844918920
GPR[EPVS]-1659844918921
========
for(double coefficient : coefficients.toArray()){
sum-=a;
}

========
MM Copying to MM
GPR[SPVS]-1659844918922
GPR[SPVAP]-1659844918922
GPR[EPVAP]-1659844920447
GPR[EPVS]-1659844920447
========
for(double coefficient : coefficients.toArray()){
distsq=sum;
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844920449
GPR[SPVAP]-1659844920449
GPR[EPVAP]-1659844922036
GPR[EPVS]-1659844922036
========
for(double coefficient : coefficients.toArray()){
x+=coefficient;
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844922037
GPR[SPVAP]-1659844922037
GPR[EPVAP]-1659844923560
GPR[EPVS]-1659844923560
========
for(double coefficient : coefficients.toArray()){
sum-=value;
}

========
MM Copying to MM
GPR[SPVS]-1659844923561
GPR[SPVAP]-1659844923561
GPR[EPVAP]-1659844925101
GPR[EPVS]-1659844925101
========
sum+=epsilon*d1;
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844925104
GPR[SPVAP]-1659844925104
GPR[EPVAP]-1659844926623
GPR[EPVS]-1659844926623
========
for(double coefficient : coefficients.toArray()){
sum-=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659844926625
GPR[SPVAP]-1659844926625
GPR[EPVAP]-1659844931309
GPR[SPVATF]-1659844931309
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844933241
GPR[EPVS]-1659844933241
========
for(double coefficient : coefficients.toArray()){
sum-=delta;
}

========
MM Copying to MM
GPR[SPVS]-1659844933243
GPR[SPVAP]-1659844933243
GPR[EPVAP]-1659844934313
GPR[EPVS]-1659844934313
========
for(double coefficient : coefficients.toArray()){
sum-=d1;
}

========
MM Copying to MM
GPR[SPVS]-1659844934315
GPR[SPVAP]-1659844934315
GPR[EPVAP]-1659844935389
GPR[EPVS]-1659844935389
========
checkVectorDimensions(vData.length);
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844935391
GPR[SPVAP]-1659844935391
GPR[EPVAP]-1659844936485
GPR[EPVS]-1659844936486
========
for(double coefficient : coefficients.toArray()){
k+=numSlackVariables;
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844936488
GPR[SPVAP]-1659844936488
GPR[EPVAP]-1659844937571
GPR[EPVS]-1659844937572
========
for(double coefficient : coefficients.toArray()){
++numSlackVariables;
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844937573
GPR[SPVAP]-1659844937573
GPR[EPVAP]-1659844938642
GPR[EPVS]-1659844938642
========
this.coefficients=new ArrayRealVector(new double[lhsCoefficients.length],false);
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844938643
GPR[SPVAP]-1659844938643
GPR[EPVAP]-1659844939721
GPR[EPVS]-1659844939721
========
this.sum=epsilon-epsilon;
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844939722
GPR[SPVAP]-1659844939722
GPR[EPVAP]-1659844940791
GPR[EPVS]-1659844940791
========
for(double coefficient : coefficients.toArray()){
sum-=dp;
}

========
MM Copying to MM
GPR[SPVS]-1659844940793
GPR[SPVAP]-1659844940793
GPR[EPVAP]-1659844941859
GPR[EPVS]-1659844941859
========
for(double coefficient : coefficients.toArray()){
n+=numSlackVariables;
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844941861
GPR[SPVAP]-1659844941861
GPR[EPVAP]-1659844942964
GPR[EPVS]-1659844942964
========
++numSlackVariables;
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844942966
GPR[SPVAP]-1659844942966
GPR[EPVAP]-1659844944036
GPR[EPVS]-1659844944036
========
sum+=sum*sum;
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844944038
GPR[SPVAP]-1659844944038
GPR[EPVAP]-1659844947663
GPR[SPVATF]-1659844947663
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844949573
GPR[EPVS]-1659844949573
========
for(double coefficient : coefficients.toArray()){
sum-=x;
}

========
MM Copying to MM
GPR[SPVS]-1659844949575
GPR[SPVAP]-1659844949575
GPR[EPVAP]-1659844950642
GPR[EPVS]-1659844950642
========
sum=sum+LANCZOS[0];
for(double coefficient : coefficients.toArray()){
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844950643
GPR[SPVAP]-1659844950643
GPR[EPVAP]-1659844951714
GPR[EPVS]-1659844951714
========
for(double coefficient : coefficients.toArray()){
sum-=an;
}

========
MM Copying to MM
GPR[SPVS]-1659844951716
GPR[SPVAP]-1659844951716
GPR[EPVAP]-1659844952795
GPR[EPVS]-1659844952795
========
for(double coefficient : coefficients.toArray()){
n=epsilon+1.0;
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844952796
GPR[SPVAP]-1659844952796
GPR[EPVAP]-1659844953929
GPR[EPVS]-1659844953929
========
for(double coefficient : coefficients.toArray()){
l+=4;
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844953931
GPR[SPVAP]-1659844953931
GPR[EPVAP]-1659844955004
GPR[EPVS]-1659844955004
========
for(double coefficient : coefficients.toArray()){
l+=4;
n+=numSlackVariables;

sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844955005
GPR[SPVAP]-1659844955005
GPR[EPVAP]-1659844956109
GPR[EPVS]-1659844956109
========
for(double coefficient : coefficients.toArray()){
p+=4;
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844956111
GPR[SPVAP]-1659844956111
GPR[EPVAP]-1659844957172
GPR[EPVS]-1659844957172
========
for(double coefficient : coefficients.toArray()){
k+=numSlackVariables;
p+=4;

sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844957174
GPR[SPVAP]-1659844957174
GPR[EPVAP]-1659844958251
GPR[EPVS]-1659844958251
========
for(double coefficient : coefficients.toArray()){
k+=4;
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844958254
GPR[SPVAP]-1659844958254
GPR[EPVAP]-1659844959346
GPR[EPVS]-1659844959347
========
for(double coefficient : coefficients.toArray()){
q+=4;
sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844959348
GPR[SPVAP]-1659844959348
GPR[EPVAP]-1659844960437
GPR[EPVS]-1659844960437
========
for(double coefficient : coefficients.toArray()){
k+=4;
q+=4;

sum-=coefficient;
}

========
MM Copying to MM
GPR[SPVS]-1659844960439
GPR[SPVAP]-1659844960439
GPR[EPVAP]-1659844961509
GPR[EPVS]-1659844961509
GPR[ESUN]-1659844961509
GPR[SSUN]-1659844961509
org.apache.commons.math3.optimization.linear.SimplexTableau,300
GPR[ESUN]-1659844962052
GPR[SSUN]-1659844962052
org.apache.commons.math3.optimization.linear.SimplexTableau,302
GPR[ESUN]-1659844962329
GPR[SSUN]-1659844962329
org.apache.commons.math3.optimization.linear.SimplexTableau,347
========
if(getBasicRow(col)!=null){
columnsToDrop.add(col);
}

========
MM Copying to MM
GPR[SPVS]-1659844964169
GPR[SPVAP]-1659844964169
GPR[EPVAP]-1659844969824
GPR[SPVATF]-1659844969825
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844971770
GPR[EPVS]-1659844971770
========
if(getEntry(numSlackVariables,col)==null){
columnsToDrop.add(col);
}

========
MM Copying to MM
GPR[SPVS]-1659844971771
GPR[SPVAP]-1659844971771
GPR[EPVAP]-1659844972866
GPR[EPVS]-1659844972866
========
if(getBasicRow(col)==col){
columnsToDrop.add(col);
}

========
MM Copying to MM
GPR[SPVS]-1659844972868
GPR[SPVAP]-1659844972868
GPR[EPVAP]-1659844974892
GPR[SPVATF]-1659844974892
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844976806
GPR[EPVS]-1659844976806
========
if(getBasicRow(col)!=col){
columnsToDrop.add(col);
}

========
MM Copying to MM
GPR[SPVS]-1659844976808
GPR[SPVAP]-1659844976808
GPR[EPVAP]-1659844978817
GPR[SPVATF]-1659844978817
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844980726
GPR[EPVS]-1659844980726
GPR[ESUN]-1659844980727
GPR[SSUN]-1659844980727
org.apache.commons.math3.optimization.linear.SimplexSolver,181
Find no block!
GPR[SSUN]-1659844981200
org.apache.commons.math3.optimization.linear.SimplexTableau,224
========
if(constraint.getRelationship()==constraint){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844983448
GPR[SPVAP]-1659844983448
GPR[EPVAP]-1659844986228
GPR[EPVS]-1659844986228
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844986229
GPR[SPVAP]-1659844986229
GPR[EPVAP]-1659844990885
GPR[SPVATF]-1659844990885
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844992853
GPR[EPVS]-1659844992853
========
if(constraint.getRelationship()==Relationship.LEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844992855
GPR[SPVAP]-1659844992855
GPR[EPVAP]-1659844994860
GPR[SPVATF]-1659844994860
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844996806
GPR[EPVS]-1659844996806
========
if(constraint.getRelationship()==Relationship.LEQ){
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659844996807
GPR[SPVAP]-1659844996808
GPR[EPVAP]-1659844998820
GPR[SPVATF]-1659844998820
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845000719
GPR[EPVS]-1659845000719
========
if(constraint.getRelationship()==Relationship.LEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845000721
GPR[SPVAP]-1659845000721
GPR[EPVAP]-1659845002736
GPR[SPVATF]-1659845002736
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845004658
GPR[EPVS]-1659845004658
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845004661
GPR[SPVAP]-1659845004661
GPR[EPVAP]-1659845006647
GPR[SPVATF]-1659845006647
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845008574
GPR[EPVS]-1659845008574
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845008576
GPR[SPVAP]-1659845008576
GPR[EPVAP]-1659845010565
GPR[SPVATF]-1659845010565
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845012550
GPR[EPVS]-1659845012550
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845012552
GPR[SPVAP]-1659845012552
GPR[EPVAP]-1659845014551
GPR[SPVATF]-1659845014551
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845016474
GPR[EPVS]-1659845016474
========
if(constraint.getRelationship()==Relationship.LEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845016475
GPR[SPVAP]-1659845016475
GPR[EPVAP]-1659845019964
GPR[SPVATF]-1659845019964
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845021879
GPR[EPVS]-1659845021879
========
if(constraint.getRelationship()==Relationship.LEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845021881
GPR[SPVAP]-1659845021881
GPR[EPVAP]-1659845023847
GPR[SPVATF]-1659845023847
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845025731
GPR[EPVS]-1659845025731
========
if(constraint.getRelationship()==Relationship.LEQ){
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845025733
GPR[SPVAP]-1659845025733
GPR[EPVAP]-1659845027717
GPR[SPVATF]-1659845027717
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 0
GPR[EPVATF]-1659845029638
GPR[SPVATR]-1659845029639
TESTING : math_33
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testDropPhase1Objective
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testSerial
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testTableauWithNoArtificialVars
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testInitialization
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testSolutionWithNegativeDecisionVariable
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMinimization
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testModelWithNoArtificialVars
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath288
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testSimplexSolver
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testSingleVariableAndConstraint
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testEpsilon
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testRestrictVariablesToNonNegative
MM messageFailing tests: 12
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659845063838
GPR[EPVS]-1659845063838
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845063843
GPR[SPVAP]-1659845063843
GPR[EPVAP]-1659845065837
GPR[SPVATF]-1659845065837
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845067778
GPR[EPVS]-1659845067778
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845067779
GPR[SPVAP]-1659845067779
GPR[EPVAP]-1659845069753
GPR[SPVATF]-1659845069753
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845071670
GPR[EPVS]-1659845071670
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845071672
GPR[SPVAP]-1659845071672
GPR[EPVAP]-1659845073633
GPR[SPVATF]-1659845073633
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 0
GPR[EPVATF]-1659845075521
GPR[SPVATR]-1659845075522
TESTING : math_33
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testDropPhase1Objective
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testTableauWithNoArtificialVars
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testInitialization
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath434PivotRowSelection
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testDegeneracy
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath434PivotRowSelection2
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath293
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath288
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath272
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testRestrictVariablesToNonNegative
MM messageFailing tests: 10
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659845110714
GPR[EPVS]-1659845110714
========
if(constraint.getRelationship()==Relationship.LEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845110715
GPR[SPVAP]-1659845110715
GPR[EPVAP]-1659845112663
GPR[SPVATF]-1659845112663
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 0
GPR[EPVATF]-1659845114564
GPR[SPVATR]-1659845114565
TESTING : math_33
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testDropPhase1Objective
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testSerial
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testTableauWithNoArtificialVars
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testInitialization
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath434NegativeVariable
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testSolutionWithNegativeDecisionVariable
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMinimization
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testModelWithNoArtificialVars
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath288
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath290GEQ
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testSimplexSolver
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testSingleVariableAndConstraint
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testEpsilon
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testRestrictVariablesToNonNegative
MM messageFailing tests: 14
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659845149491
GPR[EPVS]-1659845149491
========
if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
matrix.setEntry(row,getArtificialVariableOffset()+slackVar++,1);
matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));

matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845149492
GPR[SPVAP]-1659845149492
GPR[EPVAP]-1659845151443
GPR[SPVATF]-1659845151443
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845153358
GPR[EPVS]-1659845153358
========
if(constraint.getRelationship()!=Relationship.LEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845153363
GPR[SPVAP]-1659845153363
GPR[EPVAP]-1659845155321
GPR[SPVATF]-1659845155321
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845157231
GPR[EPVS]-1659845157231
========
if(constraint.getRelationship()==getColumnDimension()){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845157233
GPR[SPVAP]-1659845157233
GPR[EPVAP]-1659845158310
GPR[EPVS]-1659845158310
========
checkRowIndex(row);
if(constraint.getRelationship()==Relationship.LEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845158312
GPR[SPVAP]-1659845158312
GPR[EPVAP]-1659845159393
GPR[EPVS]-1659845159393
========
MatrixUtils.checkRowIndex(this,row);
if(constraint.getRelationship()==Relationship.LEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845159394
GPR[SPVAP]-1659845159394
GPR[EPVAP]-1659845160462
GPR[EPVS]-1659845160462
========
if(constraint.getRelationship()!=getColumnDimension()){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845160464
GPR[SPVAP]-1659845160464
GPR[EPVAP]-1659845161537
GPR[EPVS]-1659845161537
========
if(constraint.getRelationship()==row){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845161539
GPR[SPVAP]-1659845161539
GPR[EPVAP]-1659845164196
GPR[EPVS]-1659845164197
========
if(constraint.getRelationship()==ZERO){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
}else if(constraint.getRelationship()==Relationship.GEQ){
matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
}

========
MM Copying to MM
GPR[SPVS]-1659845164207
GPR[SPVAP]-1659845164207
GPR[EPVAP]-1659845165566
GPR[EPVS]-1659845165566
GPR[ESUN]-1659845165567
GPR[SSUN]-1659845165567
org.apache.commons.math3.optimization.linear.SimplexTableau,332
========
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
if(getNumObjectiveFunctions()==1){
return ;
}
columnsToDrop.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845167537
GPR[SPVAP]-1659845167537
GPR[EPVAP]-1659845173320
GPR[SPVATF]-1659845173320
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845175302
GPR[EPVS]-1659845175302
========
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
minRatioPositions.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845175305
GPR[SPVAP]-1659845175305
GPR[EPVAP]-1659845176378
GPR[EPVS]-1659845176378
========
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
tiesTrace.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845176379
GPR[SPVAP]-1659845176379
GPR[EPVAP]-1659845177438
GPR[EPVS]-1659845177438
========
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.setIndex(0);

========
MM Copying to MM
GPR[SPVS]-1659845177440
GPR[SPVAP]-1659845177440
GPR[EPVAP]-1659845178529
GPR[EPVS]-1659845178530
========
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
if(epsilon>1.0E-10){
return null;
}
columnsToDrop.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845178531
GPR[SPVAP]-1659845178531
GPR[EPVAP]-1659845179607
GPR[EPVS]-1659845179607
========
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
jacobianProviders.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845179609
GPR[SPVAP]-1659845179609
GPR[EPVAP]-1659845180665
GPR[EPVS]-1659845180665
========
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
epsilon+=1.0-epsilon;
columnsToDrop.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845180667
GPR[SPVAP]-1659845180667
GPR[EPVAP]-1659845181748
GPR[EPVS]-1659845181748
========
tableau=sqrt(tableau);
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845181750
GPR[SPVAP]-1659845181750
GPR[EPVAP]-1659845182837
GPR[EPVS]-1659845182837
========
if(numSlackVariables>1&&numSlackVariables>diagonalOnly){
diagonalOnly=0;
B=eye(numSlackVariables,dimension);
BD=diag(tableau);
C=diag(tableau);
}
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845182839
GPR[SPVAP]-1659845182839
GPR[EPVAP]-1659845183913
GPR[EPVS]-1659845183913
========
numSlackVariables=numSlackVariables++;
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845183915
GPR[SPVAP]-1659845183915
GPR[EPVAP]-1659845184982
GPR[EPVS]-1659845184982
========
epsilon=tableau.getFrobeniusNorm();
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845184984
GPR[SPVAP]-1659845184984
GPR[EPVAP]-1659845186049
GPR[EPVS]-1659845186049
========
tableau=pc.scalarMultiply(1.0-epsilon);
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845186051
GPR[SPVAP]-1659845186051
GPR[EPVAP]-1659845187118
GPR[EPVS]-1659845187118
========
if(epsilon/Math.sqrt(1.0-Math.pow(1.0-epsilon,2.0*numSlackVariables))<1.4+2.0/(numSlackVariables+1.0)){
tableau=pc.add(tableau.subtract(tableau).scalarMultiply(Math.sqrt(epsilon*(2.0-cc))/epsilon));
}
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845187119
GPR[SPVAP]-1659845187119
GPR[EPVAP]-1659845188191
GPR[EPVS]-1659845188192
========
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
mapper.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845188193
GPR[SPVAP]-1659845188193
GPR[EPVAP]-1659845189269
GPR[EPVS]-1659845189269
========
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.checkRowIndex(0);

========
MM Copying to MM
GPR[SPVS]-1659845189272
GPR[SPVAP]-1659845189272
GPR[EPVAP]-1659845190343
GPR[EPVS]-1659845190343
========
checkColumnIndex(numSlackVariables);
if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845190345
GPR[SPVAP]-1659845190345
GPR[EPVAP]-1659845191421
GPR[EPVS]-1659845191421
========
default :

if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845191424
GPR[SPVAP]-1659845191424
GPR[EPVAP]-1659845192366
GPR[EPVS]-1659845192366
========
case MINUS :

if(getNumObjectiveFunctions()==1){
return ;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);

========
MM Copying to MM
GPR[SPVS]-1659845192368
GPR[SPVAP]-1659845192368
GPR[EPVAP]-1659845193322
GPR[EPVS]-1659845193322
GPR[ESUN]-1659845193323
GPR[SSUN]-1659845193323
org.apache.commons.math3.optimization.linear.SimplexTableau,333
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,epsilon)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845198617
GPR[SPVAP]-1659845198617
GPR[EPVAP]-1659845204438
GPR[SPVATF]-1659845204438
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 0
GPR[EPVATF]-1659845206387
GPR[SPVATR]-1659845206388
TESTING : math_33
MM messageFailing tests: 0
GPR[EPVATR]-1659845243642
GPR[EPVS]-1659845243642
GPR[PF]-1659845243642
sourceFile  script/workingdir/SimFix/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
location   script/workingdir/SimFix/math/math_33_buggy
MM Out patch at /experiment_home///results/SimFix/Math/33/seed_260/patch/math/33/0/patch_656280_2_ts_1659845243642.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java --label=/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java /tmp/tmpDirMM3866190749902845723/SimplexTableau.java  /experiment_home///results/SimFix/Math/33/seed_260/patch/math/33/0/2_SimplexTableau.java  --unified=3  > /experiment_home///results/SimFix/Math/33/seed_260/patch/math/33/0/patch_656280_2_ts_1659845243642.diff
MMOut command diff: []
========
columnLabels.add("Z");
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845243652
GPR[SPVAP]-1659845243652
GPR[EPVAP]-1659845245696
GPR[SPVATF]-1659845245696
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845247657
GPR[EPVS]-1659845247657
========
for(int i=getNumObjectiveFunctions();i<tableau.getHeight();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845247658
GPR[SPVAP]-1659845247658
GPR[EPVAP]-1659845248743
GPR[EPVS]-1659845248743
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final int entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845248744
GPR[SPVAP]-1659845248744
GPR[EPVAP]-1659845249828
GPR[EPVS]-1659845249828
========
for(int i=getNumObjectiveFunctions();i<=getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845249831
GPR[SPVAP]-1659845249831
GPR[EPVAP]-1659845251802
GPR[SPVATF]-1659845251802
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845253718
GPR[EPVS]-1659845253718
========
for(int i=getNumObjectiveFunctions();i<getNumArtificialVariables();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845253721
GPR[SPVAP]-1659845253721
GPR[EPVAP]-1659845255726
GPR[SPVATF]-1659845255726
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 0
GPR[EPVATF]-1659845257652
GPR[SPVATR]-1659845257653
TESTING : math_33
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testDropPhase1Objective
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath293
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath286
MM messageFailing tests: 3
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659845293485
GPR[EPVS]-1659845293485
========
epsilon=epsilon*d1+epsilon*epsilon;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845293489
GPR[SPVAP]-1659845293489
GPR[EPVAP]-1659845294588
GPR[EPVS]-1659845294589
========
for(int i=getNumObjectiveFunctions();i<tableau.getNumArtificialVariables();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845294591
GPR[SPVAP]-1659845294591
GPR[EPVAP]-1659845295665
GPR[EPVS]-1659845295665
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.max(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845295667
GPR[SPVAP]-1659845295667
GPR[EPVAP]-1659845296717
GPR[EPVS]-1659845296717
========
for(int i=getNumObjectiveFunctions();i<getHeight();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845296719
GPR[SPVAP]-1659845296719
GPR[EPVAP]-1659845298674
GPR[SPVATF]-1659845298674
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845300587
GPR[EPVS]-1659845300587
========
epsilon=epsilon-epsilon*d1;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845300590
GPR[SPVAP]-1659845300590
GPR[EPVAP]-1659845301681
GPR[EPVS]-1659845301681
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=rm.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845301683
GPR[SPVAP]-1659845301683
GPR[EPVAP]-1659845302744
GPR[EPVS]-1659845302744
========
setSeed(19650218);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845302747
GPR[SPVAP]-1659845302747
GPR[EPVAP]-1659845303835
GPR[EPVS]-1659845303835
========
for(int i=getNumObjectiveFunctions();i<getLength();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845303837
GPR[SPVAP]-1659845303837
GPR[EPVAP]-1659845304925
GPR[EPVS]-1659845304925
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=matrix.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845304927
GPR[SPVAP]-1659845304927
GPR[EPVAP]-1659845306003
GPR[EPVS]-1659845306003
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i+1);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845306004
GPR[SPVAP]-1659845306004
GPR[EPVAP]-1659845310047
GPR[SPVATF]-1659845310047
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845312030
GPR[EPVS]-1659845312030
========
this.entry=0;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845312033
GPR[SPVAP]-1659845312033
GPR[EPVAP]-1659845313113
GPR[EPVS]-1659845313113
========
for(int i=getNumObjectiveFunctions();i<getRepresentation().size();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845313115
GPR[SPVAP]-1659845313115
GPR[EPVAP]-1659845314184
GPR[EPVS]-1659845314184
========
if((numSlackVariables+i)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845314188
GPR[SPVAP]-1659845314188
GPR[EPVAP]-1659845315258
GPR[EPVS]-1659845315258
========
entry=i;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845315260
GPR[SPVAP]-1659845315260
GPR[EPVAP]-1659845316326
GPR[EPVS]-1659845316326
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.abs(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845316330
GPR[SPVAP]-1659845316330
GPR[EPVAP]-1659845317403
GPR[EPVS]-1659845317403
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=correlationMatrix.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845317406
GPR[SPVAP]-1659845317406
GPR[EPVAP]-1659845318474
GPR[EPVS]-1659845318474
========
if(epsilon==0.0){
entry+=numSlackVariables-numSlackVariables;
continue;
}
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845318476
GPR[SPVAP]-1659845318476
GPR[EPVAP]-1659845319555
GPR[EPVS]-1659845319555
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
if(NEGATIVE_VAR_COLUMN_LABEL.length()==1){
hex="0"+NEGATIVE_VAR_COLUMN_LABEL;
}
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845319557
GPR[SPVAP]-1659845319557
GPR[EPVAP]-1659845320618
GPR[EPVS]-1659845320619
========
numSlackVariables++;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845320621
GPR[SPVAP]-1659845320621
GPR[EPVAP]-1659845321678
GPR[EPVS]-1659845321678
========
entry=numSlackVariables;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845321679
GPR[SPVAP]-1659845321679
GPR[EPVAP]-1659845322756
GPR[EPVS]-1659845322757
========
i=numSlackVariables;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845322758
GPR[SPVAP]-1659845322758
GPR[EPVAP]-1659845323820
GPR[EPVS]-1659845323820
========
epsilon+=u-1;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845323821
GPR[SPVAP]-1659845323821
GPR[EPVAP]-1659845324886
GPR[EPVS]-1659845324886
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>maxUlps){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845324888
GPR[SPVAP]-1659845324888
GPR[EPVAP]-1659845326841
GPR[SPVATF]-1659845326841
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 0
GPR[EPVATF]-1659845328732
GPR[SPVATR]-1659845328733
TESTING : math_33
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testDropPhase1Objective
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath293
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath286
MM messageFailing tests: 3
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659845363706
GPR[EPVS]-1659845363706
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
res[index]=(double)i/numSlackVariables;
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845363708
GPR[SPVAP]-1659845363708
GPR[EPVAP]-1659845364809
GPR[EPVS]-1659845364809
========
for(int i=getNumObjectiveFunctions();i<NEGATIVE_VAR_COLUMN_LABEL.length();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845364812
GPR[SPVAP]-1659845364812
GPR[EPVAP]-1659845366781
GPR[SPVATF]-1659845366781
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 0
GPR[EPVATF]-1659845368669
GPR[SPVATR]-1659845368670
TESTING : math_33
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testDropPhase1Objective
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath293
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath286
MM messageFailing tests: 3
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659845404870
GPR[EPVS]-1659845404870
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
if(xvalI.length!=maxUlps){
throw new DimensionMismatchException(xvalI.length,maxUlps);
}
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845404874
GPR[SPVAP]-1659845404874
GPR[EPVAP]-1659845405949
GPR[EPVS]-1659845405949
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.sqrt(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845405952
GPR[SPVAP]-1659845405952
GPR[EPVAP]-1659845407022
GPR[EPVS]-1659845407022
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
continue;
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845407024
GPR[SPVAP]-1659845407024
GPR[EPVAP]-1659845408100
GPR[EPVS]-1659845408100
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
se[i]=Double.NaN;
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845408102
GPR[SPVAP]-1659845408102
GPR[EPVAP]-1659845409172
GPR[EPVS]-1659845409172
========
entry-=((numSlackVariables*100)-numSlackVariables)%rsize;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845409176
GPR[SPVAP]-1659845409176
GPR[EPVAP]-1659845410240
GPR[EPVS]-1659845410240
========
numSlackVariables+=((numSlackVariables*100)-numSlackVariables)%rsize;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845410242
GPR[SPVAP]-1659845410242
GPR[EPVAP]-1659845411341
GPR[EPVS]-1659845411341
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
if(FastMath.abs(epsilon-entry)>FastMath.max(FastMath.abs(epsilon),FastMath.abs(entry))*getRelativeThreshold()&&FastMath.abs(epsilon-entry)>getAbsoluteThreshold()){
return false;
}
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845411344
GPR[SPVAP]-1659845411344
GPR[EPVAP]-1659845412418
GPR[EPVS]-1659845412418
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>numSlackVariables){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845412420
GPR[SPVAP]-1659845412420
GPR[EPVAP]-1659845414371
GPR[SPVATF]-1659845414371
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 0
GPR[EPVATF]-1659845416261
GPR[SPVATR]-1659845416261
TESTING : math_33
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testDropPhase1Objective
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath293
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath286
MM messageFailing tests: 3
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659845451109
GPR[EPVS]-1659845451109
========
++maxUlps;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845451111
GPR[SPVAP]-1659845451111
GPR[EPVAP]-1659845453868
GPR[EPVS]-1659845453869
========
for(int i=getNumObjectiveFunctions();i<tableau.getColumnDimension();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845453883
GPR[SPVAP]-1659845453883
GPR[EPVAP]-1659845455926
GPR[SPVATF]-1659845455926
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845457838
GPR[EPVS]-1659845457838
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=m.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845457839
GPR[SPVAP]-1659845457839
GPR[EPVAP]-1659845458909
GPR[EPVS]-1659845458909
========
for(int i=getNumObjectiveFunctions();i<tableau.getColumnDimension();i++){
 final double entry=m.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845458912
GPR[SPVAP]-1659845458912
GPR[EPVAP]-1659845459979
GPR[EPVS]-1659845459980
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=(i==0)?null:tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845459983
GPR[SPVAP]-1659845459983
GPR[EPVAP]-1659845462001
GPR[SPVATF]-1659845462001
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845463897
GPR[EPVS]-1659845463897
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845463899
GPR[SPVAP]-1659845463899
GPR[EPVAP]-1659845464981
GPR[EPVS]-1659845464981
========
if(i<0){
i=-i-2;
}
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845464983
GPR[SPVAP]-1659845464983
GPR[EPVAP]-1659845466061
GPR[EPVS]-1659845466061
========
if(i>=polynomials.length){
i--;
}
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845466063
GPR[SPVAP]-1659845466063
GPR[EPVAP]-1659845467161
GPR[EPVS]-1659845467161
========
if(dx.mant[mant.length-1]==0){
break;
}
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845467163
GPR[SPVAP]-1659845467163
GPR[EPVAP]-1659845468235
GPR[EPVS]-1659845468236
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
c[i]=y[i];
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845468238
GPR[SPVAP]-1659845468238
GPR[EPVAP]-1659845469316
GPR[EPVS]-1659845469316
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
d[i]=y[i];
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845469318
GPR[SPVAP]-1659845469318
GPR[EPVAP]-1659845470405
GPR[EPVS]-1659845470405
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
c[i]=y[i];
d[i]=y[i];

 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845470407
GPR[SPVAP]-1659845470407
GPR[EPVAP]-1659845471489
GPR[EPVS]-1659845471489
========
entry+=1.0-epsilon;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845471492
GPR[SPVAP]-1659845471492
GPR[EPVAP]-1659845472567
GPR[EPVS]-1659845472568
========
tableau=diagC.scalarMultiply(entry).add(square(tableau).scalarMultiply(epsilon)).add((times(diagC,square(tableau).multiply(tableau))).scalarMultiply(epsilon));
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845472569
GPR[SPVAP]-1659845472569
GPR[EPVAP]-1659845473672
GPR[EPVS]-1659845473672
========
tableau=sqrt(tableau);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845473674
GPR[SPVAP]-1659845473674
GPR[EPVAP]-1659845474735
GPR[EPVS]-1659845474735
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
fX2=epsilon;
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845474738
GPR[SPVAP]-1659845474738
GPR[EPVAP]-1659845475826
GPR[EPVS]-1659845475826
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
x=result[0];
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845475828
GPR[SPVAP]-1659845475828
GPR[EPVAP]-1659845476893
GPR[EPVS]-1659845476893
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
fX2=epsilon;
x=result[0];

 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845476895
GPR[SPVAP]-1659845476895
GPR[EPVAP]-1659845477960
GPR[EPVS]-1659845477960
========
numSlackVariables=i++;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845477962
GPR[SPVAP]-1659845477962
GPR[EPVAP]-1659845479074
GPR[EPVS]-1659845479074
========
inc.exp=this.exp-mant.length+1;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845479078
GPR[SPVAP]-1659845479078
GPR[EPVAP]-1659845480158
GPR[EPVS]-1659845480158
========
inc.sign=this.sign;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845480160
GPR[SPVAP]-1659845480160
GPR[EPVAP]-1659845481252
GPR[EPVS]-1659845481252
========
tableau=times(arzneg,repmat(i,maxUlps,1));
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845481254
GPR[SPVAP]-1659845481254
GPR[EPVAP]-1659845482326
GPR[EPVS]-1659845482326
========
entry=Math.max(biglsq,epsilon*(epsilon*d5));
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845482328
GPR[SPVAP]-1659845482328
GPR[EPVAP]-1659845483393
GPR[EPVS]-1659845483393
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
after[i]+=previous[i]+scaled[i];
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845483398
GPR[SPVAP]-1659845483398
GPR[EPVAP]-1659845484501
GPR[EPVS]-1659845484501
========
epsilon=epsilon*entry;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845484503
GPR[SPVAP]-1659845484503
GPR[EPVAP]-1659845485587
GPR[EPVS]-1659845485587
========
checkRowIndex(numSlackVariables);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845485590
GPR[SPVAP]-1659845485590
GPR[EPVAP]-1659845486681
GPR[EPVS]-1659845486681
========
checkColumnIndex(i);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845486684
GPR[SPVAP]-1659845486684
GPR[EPVAP]-1659845487763
GPR[EPVS]-1659845487763
========
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
firstIndex=last.mapper.getFirstIndex()+last.mapper.getDimension();
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845487764
GPR[SPVAP]-1659845487764
GPR[EPVAP]-1659845488870
GPR[EPVS]-1659845488870
========
if(numSlackVariables<0){
yInt=SGN_MASK_FLOAT-yInt;
}
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845488873
GPR[SPVAP]-1659845488873
GPR[EPVAP]-1659845489985
GPR[EPVS]-1659845489985
========
if(Double.doubleToLongBits(epsilon)<0){
yInt=SGN_MASK-yInt;
}
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845489988
GPR[SPVAP]-1659845489988
GPR[EPVAP]-1659845491095
GPR[EPVS]-1659845491095
========
solvePhase1(tableau);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845491098
GPR[SPVAP]-1659845491098
GPR[EPVAP]-1659845492185
GPR[EPVS]-1659845492185
========
tableau.dropPhase1Objective();
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845492187
GPR[SPVAP]-1659845492187
GPR[EPVAP]-1659845493261
GPR[EPVS]-1659845493261
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getNumSlackVariables();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845498182
GPR[SPVAP]-1659845498182
GPR[EPVAP]-1659845500144
GPR[SPVATF]-1659845500144
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845502046
GPR[EPVS]-1659845502046
========
columnLabels.add("RHS");
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845502048
GPR[SPVAP]-1659845502048
GPR[EPVAP]-1659845503996
GPR[SPVATF]-1659845503996
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845505921
GPR[EPVS]-1659845505921
========
columnLabels.add("RHS");
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getNumSlackVariables();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845505923
GPR[SPVAP]-1659845505923
GPR[EPVAP]-1659845507904
GPR[SPVATF]-1659845507904
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845509803
GPR[EPVS]-1659845509803
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
minRatioPositions.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845509804
GPR[SPVAP]-1659845509804
GPR[EPVAP]-1659845510889
GPR[EPVS]-1659845510889
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,epsilon)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845510892
GPR[SPVAP]-1659845510892
GPR[EPVAP]-1659845512849
GPR[SPVATF]-1659845512849
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 0
GPR[EPVATF]-1659845514737
GPR[SPVATR]-1659845514738
TESTING : math_33
MM messageFailing tests: 0
GPR[EPVATR]-1659845550942
GPR[EPVS]-1659845550942
GPR[PF]-1659845550942
sourceFile  script/workingdir/SimFix/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
location   script/workingdir/SimFix/math/math_33_buggy
MM Out patch at /experiment_home///results/SimFix/Math/33/seed_260/patch/math/33/0/patch_963579_3_ts_1659845550942.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java --label=/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java /tmp/tmpDirMM1230954420959926335/SimplexTableau.java  /experiment_home///results/SimFix/Math/33/seed_260/patch/math/33/0/3_SimplexTableau.java  --unified=3  > /experiment_home///results/SimFix/Math/33/seed_260/patch/math/33/0/patch_963579_3_ts_1659845550942.diff
MMOut command diff: []
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<=getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845550952
GPR[SPVAP]-1659845550952
GPR[EPVAP]-1659845552900
GPR[SPVATF]-1659845552901
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845554804
GPR[EPVS]-1659845554804
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
tiesTrace.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845554808
GPR[SPVAP]-1659845554808
GPR[EPVAP]-1659845555873
GPR[EPVS]-1659845555873
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<tableau.getNumArtificialVariables();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845555876
GPR[SPVAP]-1659845555876
GPR[EPVAP]-1659845556946
GPR[EPVS]-1659845556946
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.max(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845556948
GPR[SPVAP]-1659845556948
GPR[EPVAP]-1659845558008
GPR[EPVS]-1659845558008
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
epsilon=epsilon*d1+epsilon*epsilon;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845558010
GPR[SPVAP]-1659845558010
GPR[EPVAP]-1659845559069
GPR[EPVS]-1659845559069
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getHeight();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845559071
GPR[SPVAP]-1659845559071
GPR[EPVAP]-1659845561022
GPR[SPVATF]-1659845561022
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845562940
GPR[EPVS]-1659845562940
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
new ArrayList<FieldMatrix<T>>(binaryRepresentation.length).add(0,this.copy());
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845562942
GPR[SPVAP]-1659845562942
GPR[EPVAP]-1659845564019
GPR[EPVS]-1659845564019
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.sqrt(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845564023
GPR[SPVAP]-1659845564023
GPR[EPVAP]-1659845565112
GPR[EPVS]-1659845565112
========
epsilon=epsilon-epsilon*d1;
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845565115
GPR[SPVAP]-1659845565115
GPR[EPVAP]-1659845566192
GPR[EPVS]-1659845566192
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.append(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845566195
GPR[SPVAP]-1659845566195
GPR[EPVAP]-1659845567259
GPR[EPVS]-1659845567259
========
this.entry=0;
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845567262
GPR[SPVAP]-1659845567262
GPR[EPVAP]-1659845568334
GPR[EPVS]-1659845568334
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.setIndex(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845568338
GPR[SPVAP]-1659845568338
GPR[EPVAP]-1659845569425
GPR[EPVS]-1659845569425
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getLength();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845569427
GPR[SPVAP]-1659845569427
GPR[EPVAP]-1659845570508
GPR[EPVS]-1659845570508
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=matrix.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845570510
GPR[SPVAP]-1659845570510
GPR[EPVAP]-1659845571581
GPR[EPVS]-1659845571581
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i+1);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845571582
GPR[SPVAP]-1659845571582
GPR[EPVAP]-1659845573565
GPR[SPVATF]-1659845573565
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845575473
GPR[EPVS]-1659845575473
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getRepresentation().size();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845575475
GPR[SPVAP]-1659845575475
GPR[EPVAP]-1659845576543
GPR[EPVS]-1659845576543
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
jacobianProviders.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845576547
GPR[SPVAP]-1659845576547
GPR[EPVAP]-1659845577609
GPR[EPVS]-1659845577609
========
if((numSlackVariables+i)>internalArray.length){
expandTo(startIndex+i);
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845577611
GPR[SPVAP]-1659845577611
GPR[EPVAP]-1659845578697
GPR[EPVS]-1659845578697
========
entry=i;
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845578698
GPR[SPVAP]-1659845578698
GPR[EPVAP]-1659845579774
GPR[EPVS]-1659845579774
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.round(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845579777
GPR[SPVAP]-1659845579777
GPR[EPVAP]-1659845580849
GPR[EPVS]-1659845580849
========
default :

List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845580851
GPR[SPVAP]-1659845580851
GPR[EPVAP]-1659845581808
GPR[EPVS]-1659845581808
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.abs(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845581809
GPR[SPVAP]-1659845581809
GPR[EPVAP]-1659845582896
GPR[EPVS]-1659845582896
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
entry+=1.0-epsilon;
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845582901
GPR[SPVAP]-1659845582901
GPR[EPVAP]-1659845583984
GPR[EPVS]-1659845583984
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
tableau=sqrt(tableau);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845583985
GPR[SPVAP]-1659845583985
GPR[EPVAP]-1659845585064
GPR[EPVS]-1659845585064
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=correlationMatrix.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845585067
GPR[SPVAP]-1659845585067
GPR[EPVAP]-1659845586137
GPR[EPVS]-1659845586137
========
if(dx.mant[mant.length-1]==0){
break;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845586139
GPR[SPVAP]-1659845586139
GPR[EPVAP]-1659845587207
GPR[EPVS]-1659845587207
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<constraints.size();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845587209
GPR[SPVAP]-1659845587209
GPR[EPVAP]-1659845589183
GPR[SPVATF]-1659845589183
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845591102
GPR[EPVS]-1659845591102
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.charAt(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845591104
GPR[SPVAP]-1659845591104
GPR[EPVAP]-1659845592173
GPR[EPVS]-1659845592173
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>maxUlps){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845592174
GPR[SPVAP]-1659845592174
GPR[EPVAP]-1659845594132
GPR[SPVATF]-1659845594132
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 0
GPR[EPVATF]-1659845596064
GPR[SPVATR]-1659845596064
TESTING : math_33
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testDropPhase1Objective
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath293
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath286
MM messageFailing tests: 3
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659845632309
GPR[EPVS]-1659845632309
========
entry=numSlackVariables;
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845632313
GPR[SPVAP]-1659845632313
GPR[EPVAP]-1659845633412
GPR[EPVS]-1659845633412
========
numSlackVariables=numSlackVariables;
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845633414
GPR[SPVAP]-1659845633414
GPR[EPVAP]-1659845634477
GPR[EPVS]-1659845634477
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
if(FastMath.abs(epsilon-entry)>FastMath.max(FastMath.abs(epsilon),FastMath.abs(entry))*getRelativeThreshold()&&FastMath.abs(epsilon-entry)>getAbsoluteThreshold()){
return false;
}
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845634481
GPR[SPVAP]-1659845634481
GPR[EPVAP]-1659845635566
GPR[EPVS]-1659845635566
========
epsilon+=u-1;
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845635568
GPR[SPVAP]-1659845635568
GPR[EPVAP]-1659845636638
GPR[EPVS]-1659845636638
========
if(epsilon<=EXPONENTIAL_SA_QI[0]){
return epsilon*(epsilon+u);
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845636640
GPR[SPVAP]-1659845636640
GPR[EPVAP]-1659845637725
GPR[EPVS]-1659845637725
========
if(epsilon==0.0){
entry+=numSlackVariables-numSlackVariables;
continue;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845637727
GPR[SPVAP]-1659845637727
GPR[EPVAP]-1659845638803
GPR[EPVS]-1659845638803
========
new Array2DRowRealMatrix(entry,maxUlps).setEntry(i,zIndex,restrictToNonNegative?1:-1);
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845638805
GPR[SPVAP]-1659845638805
GPR[EPVAP]-1659845639876
GPR[EPVS]-1659845639876
========
copyArray(restrictToNonNegative?f.getCoefficients().mapMultiply(-1):f.getCoefficients().toArray(),new Array2DRowRealMatrix(entry,maxUlps).getDataRef()[i]);
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845639878
GPR[SPVAP]-1659845639878
GPR[EPVAP]-1659845640941
GPR[EPVS]-1659845640941
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>numSlackVariables){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845640944
GPR[SPVAP]-1659845640944
GPR[EPVAP]-1659845642897
GPR[SPVATF]-1659845642897
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 0
GPR[EPVATF]-1659845644790
GPR[SPVATR]-1659845644790
TESTING : math_33
MM message  - org.apache.commons.math3.optimization.linear.SimplexTableauTest::testDropPhase1Objective
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath293
MM message  - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath286
MM messageFailing tests: 3
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659845680293
GPR[EPVS]-1659845680293
========
++maxUlps;
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845680294
GPR[SPVAP]-1659845680294
GPR[EPVAP]-1659845681367
GPR[EPVS]-1659845681367
========
numSlackVariables=i++;
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845681372
GPR[SPVAP]-1659845681372
GPR[EPVAP]-1659845682465
GPR[EPVS]-1659845682465
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
numSlackVariables++;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845682468
GPR[SPVAP]-1659845682468
GPR[EPVAP]-1659845683579
GPR[EPVS]-1659845683579
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.writeInt(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845683580
GPR[SPVAP]-1659845683580
GPR[EPVAP]-1659845684661
GPR[EPVS]-1659845684661
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
mapper.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845684664
GPR[SPVAP]-1659845684664
GPR[EPVAP]-1659845685735
GPR[EPVS]-1659845685735
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.checkRowIndex(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845685737
GPR[SPVAP]-1659845685737
GPR[EPVAP]-1659845686816
GPR[EPVS]-1659845686816
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
checkColumnIndex(i);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845686817
GPR[SPVAP]-1659845686817
GPR[EPVAP]-1659845687883
GPR[EPVS]-1659845687883
========
if(i<0){
i=-i-2;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845687885
GPR[SPVAP]-1659845687885
GPR[EPVAP]-1659845688975
GPR[EPVS]-1659845688975
========
if(i>=polynomials.length){
i--;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845688976
GPR[SPVAP]-1659845688976
GPR[EPVAP]-1659845690057
GPR[EPVS]-1659845690057
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845690059
GPR[SPVAP]-1659845690059
GPR[EPVAP]-1659845691128
GPR[EPVS]-1659845691128
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<tableau.getColumnDimension();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845691129
GPR[SPVAP]-1659845691129
GPR[EPVAP]-1659845693085
GPR[SPVATF]-1659845693085
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845695002
GPR[EPVS]-1659845695002
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=m.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845695003
GPR[SPVAP]-1659845695003
GPR[EPVAP]-1659845696080
GPR[EPVS]-1659845696080
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<tableau.getColumnDimension();i++){
 final double entry=m.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845696081
GPR[SPVAP]-1659845696081
GPR[EPVAP]-1659845697161
GPR[EPVS]-1659845697161
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.value(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845697163
GPR[SPVAP]-1659845697163
GPR[EPVAP]-1659845698241
GPR[EPVS]-1659845698241
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
maxUlps<=i-numSlackVariables?columnsToDrop.add(0):null;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845698242
GPR[SPVAP]-1659845698242
GPR[EPVAP]-1659845699193
GPR[EPVS]-1659845699193
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.valueOf(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845699195
GPR[SPVAP]-1659845699195
GPR[EPVAP]-1659845700305
GPR[EPVS]-1659845700305
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
c[i]=y[i];
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845700307
GPR[SPVAP]-1659845700307
GPR[EPVAP]-1659845701379
GPR[EPVS]-1659845701379
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
d[i]=y[i];
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845701381
GPR[SPVAP]-1659845701381
GPR[EPVAP]-1659845702464
GPR[EPVS]-1659845702464
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
c[i]=y[i];
d[i]=y[i];

 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845702465
GPR[SPVAP]-1659845702465
GPR[EPVAP]-1659845703544
GPR[EPVS]-1659845703544
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
fX2=epsilon;
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845703546
GPR[SPVAP]-1659845703546
GPR[EPVAP]-1659845704635
GPR[EPVS]-1659845704635
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
x=result[0];
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845704636
GPR[SPVAP]-1659845704636
GPR[EPVAP]-1659845705707
GPR[EPVS]-1659845705707
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
fX2=epsilon;
x=result[0];

 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845705708
GPR[SPVAP]-1659845705708
GPR[EPVAP]-1659845706777
GPR[EPVS]-1659845706777
========
numSlackVariables-=i;
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845706778
GPR[SPVAP]-1659845706779
GPR[EPVAP]-1659845707851
GPR[EPVS]-1659845707851
========
entry+=i;
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845707853
GPR[SPVAP]-1659845707853
GPR[EPVAP]-1659845708919
GPR[EPVS]-1659845708919
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
if(!restrictToNonNegative)f=-f;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845708921
GPR[SPVAP]-1659845708921
GPR[EPVAP]-1659845709977
GPR[EPVS]-1659845709977
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.mulAndCheck(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845709979
GPR[SPVAP]-1659845709979
GPR[EPVAP]-1659845711068
GPR[EPVS]-1659845711068
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final int entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845711069
GPR[SPVAP]-1659845711069
GPR[EPVAP]-1659845712128
GPR[EPVS]-1659845712128
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
entry=divide(tableau,tableau);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845712132
GPR[SPVAP]-1659845712132
GPR[EPVAP]-1659845713213
GPR[EPVS]-1659845713213
========
i=times(arzneg,repmat(tableau,maxUlps,1));
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845713214
GPR[SPVAP]-1659845713214
GPR[EPVAP]-1659845714281
GPR[EPVS]-1659845714281
========
epsilon=epsilon*epsilon;
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845714283
GPR[SPVAP]-1659845714283
GPR[EPVAP]-1659845715354
GPR[EPVS]-1659845715354
========
if(numSlackVariables<0){
yInt=SGN_MASK_FLOAT-yInt;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845715359
GPR[SPVAP]-1659845715359
GPR[EPVAP]-1659845716433
GPR[EPVS]-1659845716433
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.isInfinite(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845716435
GPR[SPVAP]-1659845716435
GPR[EPVAP]-1659845717513
GPR[EPVS]-1659845717513
========
if(Double.doubleToLongBits(epsilon)<0){
yInt=SGN_MASK-yInt;
}
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845717515
GPR[SPVAP]-1659845717515
GPR[EPVAP]-1659845718593
GPR[EPVS]-1659845718593
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
solvePhase1(tableau);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845718594
GPR[SPVAP]-1659845718594
GPR[EPVAP]-1659845719657
GPR[EPVS]-1659845719657
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
tableau.dropPhase1Objective();
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845719659
GPR[SPVAP]-1659845719659
GPR[EPVAP]-1659845720735
GPR[EPVS]-1659845720735
========
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.setErrorIndex(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845720736
GPR[SPVAP]-1659845720736
GPR[EPVAP]-1659845721799
GPR[EPVS]-1659845721799
========
case MINUS :

List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845721803
GPR[SPVAP]-1659845721803
GPR[EPVAP]-1659845722765
GPR[EPVS]-1659845722765
GPR[ESUN]-1659845722766
GPR[SSUN]-1659845722766
org.apache.commons.math3.optimization.linear.SimplexTableau,336
GPR[ESUN]-1659845723290
GPR[SSUN]-1659845723290
org.apache.commons.math3.optimization.linear.SimplexTableau,337
GPR[ESUN]-1659845723578
GPR[SSUN]-1659845723578
org.apache.commons.math3.optimization.linear.SimplexTableau,338
GPR[ESUN]-1659845723873
GPR[SSUN]-1659845723873
org.apache.commons.math3.optimization.linear.SimplexTableau,344
========
columnLabels.add("Z");
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845728124
GPR[SPVAP]-1659845728124
GPR[EPVAP]-1659845733852
GPR[SPVATF]-1659845733852
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845735790
GPR[EPVS]-1659845735790
========
for(int i=0;i<tableau.getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845735791
GPR[SPVAP]-1659845735791
GPR[EPVAP]-1659845736872
GPR[EPVS]-1659845736872
========
for(int i=0;i<getHeight();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845736874
GPR[SPVAP]-1659845736874
GPR[EPVAP]-1659845738871
GPR[SPVATF]-1659845738871
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845740797
GPR[EPVS]-1659845740797
========
setSeed(19650218);
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845740798
GPR[SPVAP]-1659845740798
GPR[EPVAP]-1659845741895
GPR[EPVS]-1659845741895
========
for(int i=0;i<getLength();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845741898
GPR[SPVAP]-1659845741898
GPR[EPVAP]-1659845744948
GPR[EPVS]-1659845744948
========
for(int i=0;i<getRepresentation().size();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845744950
GPR[SPVAP]-1659845744950
GPR[EPVAP]-1659845746027
GPR[EPVS]-1659845746027
========
for(int i=0;j<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845746029
GPR[SPVAP]-1659845746029
GPR[EPVAP]-1659845747131
GPR[EPVS]-1659845747131
========
if((i+i)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845747132
GPR[SPVAP]-1659845747132
GPR[EPVAP]-1659845748213
GPR[EPVS]-1659845748213
========
col=i;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845748215
GPR[SPVAP]-1659845748215
GPR[EPVAP]-1659845749295
GPR[EPVS]-1659845749295
========
if(FastMath.abs(col)>epsilon){
largest=FastMath.abs(sum);
maxUlps=numSlackVariables;
}
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845749297
GPR[SPVAP]-1659845749297
GPR[EPVAP]-1659845750364
GPR[EPVS]-1659845750364
========
for(int i=numSlackVariables;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845750366
GPR[SPVAP]-1659845750366
GPR[EPVAP]-1659845752354
GPR[SPVATF]-1659845752354
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845754270
GPR[EPVS]-1659845754270
========
epsilon+=u-1;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845754273
GPR[SPVAP]-1659845754273
GPR[EPVAP]-1659845755365
GPR[EPVS]-1659845755365
========
i++;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845755366
GPR[SPVAP]-1659845755366
GPR[EPVAP]-1659845756479
GPR[EPVS]-1659845756479
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=length+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845756480
GPR[SPVAP]-1659845756480
GPR[EPVAP]-1659845757564
GPR[EPVS]-1659845757564
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==-1){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845757565
GPR[SPVAP]-1659845757565
GPR[EPVAP]-1659845759511
GPR[SPVATF]-1659845759511
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845761446
GPR[EPVS]-1659845761446
========
for(int i=0;i<getNumArtificialVariables();i++){
res[index]=(double)i/numSlackVariables;
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845761448
GPR[SPVAP]-1659845761448
GPR[EPVAP]-1659845762567
GPR[EPVS]-1659845762567
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)!=null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845762569
GPR[SPVAP]-1659845762569
GPR[EPVAP]-1659845764567
GPR[SPVATF]-1659845764567
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845766491
GPR[EPVS]-1659845766491
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getEntry(numSlackVariables,col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845766492
GPR[SPVAP]-1659845766492
GPR[EPVAP]-1659845767566
GPR[EPVS]-1659845767566
========
for(int i=0;i<tableau.getHeight();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845767567
GPR[SPVAP]-1659845767567
GPR[EPVAP]-1659845768632
GPR[EPVS]-1659845768632
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==numSlackVariables){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845768633
GPR[SPVAP]-1659845768633
GPR[EPVAP]-1659845770571
GPR[SPVATF]-1659845770571
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845772473
GPR[EPVS]-1659845772473
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)!=numSlackVariables){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845772474
GPR[SPVAP]-1659845772474
GPR[EPVAP]-1659845774425
GPR[SPVATF]-1659845774425
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845776389
GPR[EPVS]-1659845776389
========
for(int i=0;i<NEGATIVE_VAR_COLUMN_LABEL.length();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845776391
GPR[SPVAP]-1659845776391
GPR[EPVAP]-1659845778362
GPR[SPVATF]-1659845778362
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845780254
GPR[EPVS]-1659845780254
========
numSlackVariables-=i;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845780256
GPR[SPVAP]-1659845780256
GPR[EPVAP]-1659845781348
GPR[EPVS]-1659845781348
========
for(int i=restrictToNonNegative?0:1;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845781350
GPR[SPVAP]-1659845781350
GPR[EPVAP]-1659845783319
GPR[SPVATF]-1659845783319
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845785260
GPR[EPVS]-1659845785260
========
for(int i=restrictToNonNegative?0:1;j<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845785261
GPR[SPVAP]-1659845785261
GPR[EPVAP]-1659845786351
GPR[EPVS]-1659845786351
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.sqrt(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845786355
GPR[SPVAP]-1659845786355
GPR[EPVAP]-1659845787449
GPR[EPVS]-1659845787449
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
continue;
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845787450
GPR[SPVAP]-1659845787450
GPR[EPVAP]-1659845788552
GPR[EPVS]-1659845788552
========
for(int i=0;i<getNumArtificialVariables();i++){
se[i]=Double.NaN;
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845788553
GPR[SPVAP]-1659845788553
GPR[EPVAP]-1659845789620
GPR[EPVS]-1659845789620
========
for(int i=0;i<=getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845789621
GPR[SPVAP]-1659845789621
GPR[EPVAP]-1659845791592
GPR[SPVATF]-1659845791592
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845793526
GPR[EPVS]-1659845793526
========
for(int i=0;i<getNumArtificialVariables();i++){
double col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845793527
GPR[SPVAP]-1659845793527
GPR[EPVAP]-1659845794603
GPR[EPVS]-1659845794603
========
for(int i=0;i<getNumArtificialVariables();i++){
if(i==numSlackVariables){
temp*=HALF;
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845794604
GPR[SPVAP]-1659845794604
GPR[EPVAP]-1659845795677
GPR[EPVS]-1659845795677
========
for(int i=0;i<getNumArtificialVariables();i++){
numSlackVariables++;
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845795678
GPR[SPVAP]-1659845795678
GPR[EPVAP]-1659845796756
GPR[EPVS]-1659845796757
========
for(int i=0;i<getNumArtificialVariables();i++){
if(i==numSlackVariables){
temp*=HALF;
}
numSlackVariables++;

int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845796758
GPR[SPVAP]-1659845796758
GPR[EPVAP]-1659845797829
GPR[EPVS]-1659845797829
========
++i;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845797831
GPR[SPVAP]-1659845797831
GPR[EPVAP]-1659845798910
GPR[EPVS]-1659845798910
========
if(dx.mant[mant.length-1]==0){
break;
}
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845798912
GPR[SPVAP]-1659845798912
GPR[EPVAP]-1659845799989
GPR[EPVS]-1659845799989
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==col){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845799992
GPR[SPVAP]-1659845799992
GPR[EPVAP]-1659845801929
GPR[SPVATF]-1659845801929
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845803835
GPR[EPVS]-1659845803835
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)!=col){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845803836
GPR[SPVAP]-1659845803836
GPR[EPVAP]-1659845805770
GPR[SPVATF]-1659845805770
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845807647
GPR[EPVS]-1659845807647
========
for(int i=0;i<getNumArtificialVariables();i++){
if(FastMath.abs(tableau.getEntry(i,i))<Precision.SAFE_MIN){
throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845807649
GPR[SPVAP]-1659845807649
GPR[EPVAP]-1659845808738
GPR[EPVS]-1659845808738
========
for(int i=numSlackVariables;i<getNumArtificialVariables();i++){
double col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845808739
GPR[SPVAP]-1659845808739
GPR[EPVAP]-1659845809808
GPR[EPVS]-1659845809808
========
epsilon+=1.0-epsilon;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845809811
GPR[SPVAP]-1659845809811
GPR[EPVAP]-1659845810881
GPR[EPVS]-1659845810881
========
tableau=diagC.scalarMultiply(restrictToNonNegative?0:epsilon*epsilon).add(square(tableau).scalarMultiply(epsilon)).add((times(diagC,square(tableau).multiply(tableau))).scalarMultiply(epsilon));
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845810883
GPR[SPVAP]-1659845810883
GPR[EPVAP]-1659845811973
GPR[EPVS]-1659845811973
========
tableau=sqrt(tableau);
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845811974
GPR[SPVAP]-1659845811974
GPR[EPVAP]-1659845813047
GPR[EPVS]-1659845813047
========
for(int i=0;i<getNumArtificialVariables();i++){
xAug[i][0]=1.0;
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845813048
GPR[SPVAP]-1659845813048
GPR[EPVAP]-1659845814133
GPR[EPVS]-1659845814133
========
for(int i=0;i<getNumArtificialVariables();i++){
if(FastMath.abs(tableau.getEntry(i,i))<Precision.SAFE_MIN){
throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
}
double col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845814135
GPR[SPVAP]-1659845814135
GPR[EPVAP]-1659845815213
GPR[EPVS]-1659845815213
========
numSlackVariables++;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845815215
GPR[SPVAP]-1659845815215
GPR[EPVAP]-1659845816284
GPR[EPVS]-1659845816284
========
numSlackVariables=i++;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845816285
GPR[SPVAP]-1659845816285
GPR[EPVAP]-1659845817524
GPR[EPVS]-1659845817524
========
for(int i=0;i<getNumArtificialVariables();i++){
if(epsilon>=1){
robustnessWeights[i]=0;
}else {
 final double 1-epsilon*arg=1-epsilon*arg;
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845817535
GPR[SPVAP]-1659845817535
GPR[EPVAP]-1659845819542
GPR[EPVS]-1659845819542
========
inc.exp=this.exp-mant.length+1;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845819544
GPR[SPVAP]-1659845819544
GPR[EPVAP]-1659845820620
GPR[EPVS]-1659845820620
========
inc.sign=this.sign;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845820621
GPR[SPVAP]-1659845820621
GPR[EPVAP]-1659845821693
GPR[EPVS]-1659845821693
========
if(i<0){
i=-i-2;
}
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845821695
GPR[SPVAP]-1659845821695
GPR[EPVAP]-1659845822793
GPR[EPVS]-1659845822793
========
if(i>=polynomials.length){
i--;
}
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845822794
GPR[SPVAP]-1659845822794
GPR[EPVAP]-1659845823875
GPR[EPVS]-1659845823875
========
for(int i=0;idxStep<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845823878
GPR[SPVAP]-1659845823878
GPR[EPVAP]-1659845824945
GPR[EPVS]-1659845824945
========
for(int i=0;row<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845824946
GPR[SPVAP]-1659845824946
GPR[EPVAP]-1659845826023
GPR[EPVS]-1659845826023
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=d+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845826025
GPR[SPVAP]-1659845826025
GPR[EPVAP]-1659845827136
GPR[EPVS]-1659845827136
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=scalAbsoluteTolerance+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845827137
GPR[SPVAP]-1659845827138
GPR[EPVAP]-1659845828223
GPR[EPVS]-1659845828223
========
epsilon=epsilon-epsilon*d1;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845828225
GPR[SPVAP]-1659845828225
GPR[EPVAP]-1659845829313
GPR[EPVS]-1659845829313
========
for(int i=0;i<getNumArtificialVariables();i++){
double col=scalAbsoluteTolerance+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845829315
GPR[SPVAP]-1659845829315
GPR[EPVAP]-1659845830385
GPR[EPVS]-1659845830385
========
for(int i=0;k<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845830387
GPR[SPVAP]-1659845830387
GPR[EPVAP]-1659845831468
GPR[EPVS]-1659845831468
========
checkRowIndex(numSlackVariables);
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845831471
GPR[SPVAP]-1659845831471
GPR[EPVAP]-1659845832594
GPR[EPVS]-1659845832594
========
checkColumnIndex(numSlackVariables);
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845832595
GPR[SPVAP]-1659845832595
GPR[EPVAP]-1659845833691
GPR[EPVS]-1659845833691
========
epsilon=epsilon*epsilon;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845833693
GPR[SPVAP]-1659845833694
GPR[EPVAP]-1659845834757
GPR[EPVS]-1659845834757
========
for(int i=0;_xi<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845834761
GPR[SPVAP]-1659845834761
GPR[EPVAP]-1659845835829
GPR[EPVS]-1659845835829
GPR[ESUN]-1659845835830
GPR[SSUN]-1659845835830
org.apache.commons.math3.optimization.linear.SimplexTableau,345
GPR[ESUN]-1659845836356
GPR[SSUN]-1659845836356
org.apache.commons.math3.optimization.linear.SimplexTableau,346
GPR[ESUN]-1659845836665
GPR[SSUN]-1659845836665
org.apache.commons.math3.optimization.linear.SimplexTableau,351
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
if(!columnsToDrop.isInfinite(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}

========
MM Copying to MM
GPR[SPVS]-1659845842504
GPR[SPVAP]-1659845842504
GPR[EPVAP]-1659845845272
GPR[EPVS]-1659845845272
========
if(!columnsToDrop.isNaN(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}

========
MM Copying to MM
GPR[SPVS]-1659845845278
GPR[SPVAP]-1659845845278
GPR[EPVAP]-1659845846848
GPR[EPVS]-1659845846848
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int j=numSlackVariables;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845852451
GPR[SPVAP]-1659845852451
GPR[EPVAP]-1659845857162
GPR[SPVATF]-1659845857162
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845859079
GPR[EPVS]-1659845859079
========
epsilon=epsilon-epsilon*d1;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845859083
GPR[SPVAP]-1659845859083
GPR[EPVAP]-1659845860171
GPR[EPVS]-1659845860171
========
setSeed(19650218);
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845860173
GPR[SPVAP]-1659845860173
GPR[EPVAP]-1659845861279
GPR[EPVS]-1659845861279
========
i++;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845861281
GPR[SPVAP]-1659845861281
GPR[EPVAP]-1659845863283
GPR[SPVATF]-1659845863283
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845865186
GPR[EPVS]-1659845865186
========
col++;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845865187
GPR[SPVAP]-1659845865187
GPR[EPVAP]-1659845867131
GPR[SPVATF]-1659845867131
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845869034
GPR[EPVS]-1659845869034
========
i++;
col++;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845869035
GPR[SPVAP]-1659845869035
GPR[EPVAP]-1659845871013
GPR[SPVATF]-1659845871013
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845872918
GPR[EPVS]-1659845872918
========
for(int j=restrictToNonNegative?0:1;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845872920
GPR[SPVAP]-1659845872920
GPR[EPVAP]-1659845874894
GPR[SPVATF]-1659845874894
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845876834
GPR[EPVS]-1659845876834
========
epsilon-=epsilon*d1;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845876836
GPR[SPVAP]-1659845876836
GPR[EPVAP]-1659845877920
GPR[EPVS]-1659845877920
========
for(int j=0;j<getArtificialVariableOffset();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845877922
GPR[SPVAP]-1659845877922
GPR[EPVAP]-1659845879903
GPR[SPVATF]-1659845879903
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845881796
GPR[EPVS]-1659845881796
========
for(int j=0;j<tableau.getColumnDimension();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845881801
GPR[SPVAP]-1659845881801
GPR[EPVAP]-1659845883781
GPR[SPVATF]-1659845883781
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845885719
GPR[EPVS]-1659845885719
========
j=probe(i,j);
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845885723
GPR[SPVAP]-1659845885723
GPR[EPVAP]-1659845886808
GPR[EPVS]-1659845886808
========
numSlackVariables=j&numSlackVariables;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845886809
GPR[SPVAP]-1659845886809
GPR[EPVAP]-1659845887901
GPR[EPVS]-1659845887901
========
epsilon=Math.max(biglsq,epsilon*(epsilon*d5));
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845887903
GPR[SPVAP]-1659845887903
GPR[EPVAP]-1659845888973
GPR[EPVS]-1659845888973
========
tableau.divideRow(i,epsilon);
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845888976
GPR[SPVAP]-1659845888976
GPR[EPVAP]-1659845891598
GPR[EPVS]-1659845891598
========
for(int j=0;j<=getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845891601
GPR[SPVAP]-1659845891601
GPR[EPVAP]-1659845893566
GPR[SPVATF]-1659845893566
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845895465
GPR[EPVS]-1659845895465
========
for(int j=0;j<getLength();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845895467
GPR[SPVAP]-1659845895467
GPR[EPVAP]-1659845896578
GPR[EPVS]-1659845896578
========
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.isInfinite(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845896579
GPR[SPVAP]-1659845896579
GPR[EPVAP]-1659845897680
GPR[EPVS]-1659845897680
========
if(FastMath.abs(epsilon)>epsilon){
largest=FastMath.abs(sum);
maxUlps=numSlackVariables;
}
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845897682
GPR[SPVAP]-1659845897682
GPR[EPVAP]-1659845898793
GPR[EPVS]-1659845898793
========
if((numSlackVariables+i)>internalArray.length){
expandTo(startIndex+i);
}
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845898796
GPR[SPVAP]-1659845898796
GPR[EPVAP]-1659845899887
GPR[EPVS]-1659845899888
========
numSlackVariables=i;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845899889
GPR[SPVAP]-1659845899889
GPR[EPVAP]-1659845900970
GPR[EPVS]-1659845900970
========
if(j>=polynomials.length){
i--;
}
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845900971
GPR[SPVAP]-1659845900971
GPR[EPVAP]-1659845902042
GPR[EPVS]-1659845902042
========
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.isNaN(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845902044
GPR[SPVAP]-1659845902044
GPR[EPVAP]-1659845903109
GPR[EPVS]-1659845903109
========
for(int j=0;j<getWidth();j++){
se[i]=Double.NaN;
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845903111
GPR[SPVAP]-1659845903111
GPR[EPVAP]-1659845904191
GPR[EPVS]-1659845904191
========
for(int j=numSlackVariables;j<getWidth();j++){
if(!columnsToDrop.isNaN(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845904195
GPR[SPVAP]-1659845904195
GPR[EPVAP]-1659845905261
GPR[EPVS]-1659845905261
========
numSlackVariables=numSlackVariables;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845905263
GPR[SPVAP]-1659845905263
GPR[EPVAP]-1659845906343
GPR[EPVS]-1659845906343
========
i-=((numSlackVariables*100)-numSlackVariables)%rsize;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845906345
GPR[SPVAP]-1659845906345
GPR[EPVAP]-1659845907419
GPR[EPVS]-1659845907419
========
numSlackVariables+=((numSlackVariables*100)-numSlackVariables)%rsize;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845907420
GPR[SPVAP]-1659845907420
GPR[EPVAP]-1659845908491
GPR[EPVS]-1659845908491
========
epsilon=epsilon*epsilon;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845908493
GPR[SPVAP]-1659845908493
GPR[EPVAP]-1659845909565
GPR[EPVS]-1659845909565
========
for(int j=0;j<NEGATIVE_VAR_COLUMN_LABEL.length();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845909568
GPR[SPVAP]-1659845909568
GPR[EPVAP]-1659845911553
GPR[SPVATF]-1659845911553
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845913483
GPR[EPVS]-1659845913483
========
matrix[2][numSlackVariables]=epsilon;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845913484
GPR[SPVAP]-1659845913484
GPR[EPVAP]-1659845915469
GPR[SPVATF]-1659845915469
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845917393
GPR[EPVS]-1659845917393
========
matrix[3][numSlackVariables]=epsilon;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845917394
GPR[SPVAP]-1659845917394
GPR[EPVAP]-1659845919374
GPR[SPVATF]-1659845919374
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845921270
GPR[EPVS]-1659845921270
========
matrix[2][numSlackVariables]=epsilon;
matrix[3][numSlackVariables]=epsilon;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845921271
GPR[SPVAP]-1659845921271
GPR[EPVAP]-1659845923278
GPR[SPVATF]-1659845923278
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845925185
GPR[EPVS]-1659845925185
========
for(int j=0;j<getRepresentation().size();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845925189
GPR[SPVAP]-1659845925189
GPR[EPVAP]-1659845926272
GPR[EPVS]-1659845926272
========
copyArray(constraints.get(i).getCoefficients().toArray(),matrix.getDataRef()[j]);
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845926274
GPR[SPVAP]-1659845926274
GPR[EPVAP]-1659845927374
GPR[EPVS]-1659845927374
========
j=probe(i,j);
numSlackVariables=j&numSlackVariables;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

========
MM Copying to MM
GPR[SPVS]-1659845927382
GPR[SPVAP]-1659845927382
GPR[EPVAP]-1659845928448
GPR[EPVS]-1659845928448
========
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<=getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845934352
GPR[SPVAP]-1659845934352
GPR[EPVAP]-1659845936317
GPR[SPVATF]-1659845936317
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845938233
GPR[EPVS]-1659845938233
========
for(int i=1;i<=getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845938236
GPR[SPVAP]-1659845938236
GPR[EPVAP]-1659845940248
GPR[SPVATF]-1659845940248
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845942158
GPR[EPVS]-1659845942158
========
for(int i=numSlackVariables;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845942162
GPR[SPVAP]-1659845942162
GPR[EPVAP]-1659845944118
GPR[SPVATF]-1659845944118
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845946049
GPR[EPVS]-1659845946049
========
epsilon=epsilon*d1+epsilon*epsilon;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845946052
GPR[SPVAP]-1659845946052
GPR[EPVAP]-1659845947128
GPR[EPVS]-1659845947128
========
setSeed(19650218);
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845947130
GPR[SPVAP]-1659845947130
GPR[EPVAP]-1659845948217
GPR[EPVS]-1659845948217
========
epsilon=epsilon-epsilon*d1;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845948219
GPR[SPVAP]-1659845948219
GPR[EPVAP]-1659845949330
GPR[EPVS]-1659845949330
========
for(int i=1;i<tableau.getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845949331
GPR[SPVAP]-1659845949331
GPR[EPVAP]-1659845950409
GPR[EPVS]-1659845950409
========
for(int i=restrictToNonNegative?1:1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845950411
GPR[SPVAP]-1659845950411
GPR[EPVAP]-1659845952380
GPR[SPVATF]-1659845952380
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845954306
GPR[EPVS]-1659845954306
========
i++;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845954308
GPR[SPVAP]-1659845954308
GPR[EPVAP]-1659845955377
GPR[EPVS]-1659845955377
========
numSlackVariables++;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845955379
GPR[SPVAP]-1659845955379
GPR[EPVAP]-1659845956474
GPR[EPVS]-1659845956474
========
if(numSlackVariables>=seed.length){
j=0;
}
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845956476
GPR[SPVAP]-1659845956476
GPR[EPVAP]-1659845957555
GPR[EPVS]-1659845957555
========
for(int i=1;i<getHeight();i++){
if(numSlackVariables>=Wmax){
++numSlackVariables;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845957557
GPR[SPVAP]-1659845957557
GPR[EPVAP]-1659845958633
GPR[EPVS]-1659845958633
========
for(int i=1;i<getHeight();i++){
itest=0;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845958635
GPR[SPVAP]-1659845958635
GPR[EPVAP]-1659845959717
GPR[EPVS]-1659845959717
========
++i;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845959718
GPR[SPVAP]-1659845959718
GPR[EPVAP]-1659845960801
GPR[EPVS]-1659845960801
========
for(int i=1;i<getHeight();i++){
if(getBasicRow(j)!=null&&getBasicRow(j)==0){
coefficients[i]=0;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845960803
GPR[SPVAP]-1659845960803
GPR[EPVAP]-1659845963346
GPR[EPVS]-1659845963346
========
for(int i=1;i<getHeight();i++){
if(true){
throw new MathIllegalArgumentException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX,i,j);
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845963360
GPR[SPVAP]-1659845963360
GPR[EPVAP]-1659845964584
GPR[EPVS]-1659845964584
========
for(int i=1;i<tableau.getNumArtificialVariables();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845964586
GPR[SPVAP]-1659845964586
GPR[EPVAP]-1659845965666
GPR[EPVS]-1659845965666
========
for(int i=1;i<getHeight();i++){
double col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845965667
GPR[SPVAP]-1659845965667
GPR[EPVAP]-1659845966739
GPR[EPVS]-1659845966739
========
epsilon-=i*d1;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845966740
GPR[SPVAP]-1659845966740
GPR[EPVAP]-1659845967825
GPR[EPVS]-1659845967825
========
if(epsilon<=ZERO){
col=190;
break;
}
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845967826
GPR[SPVAP]-1659845967826
GPR[EPVAP]-1659845968894
GPR[EPVS]-1659845968894
========
for(int i=1;i<getHeight();i++){
ipt=col;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845968895
GPR[SPVAP]-1659845968895
GPR[EPVAP]-1659845970017
GPR[EPVS]-1659845970018
========
for(int i=numSlackVariables;i<getHeight();i++){
int col=0;
for(int j=numSlackVariables;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845970020
GPR[SPVAP]-1659845970020
GPR[EPVAP]-1659845971995
GPR[SPVATF]-1659845971995
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845973921
GPR[EPVS]-1659845973921
========
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=numSlackVariables;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845973922
GPR[SPVAP]-1659845973922
GPR[EPVAP]-1659845975893
GPR[SPVATF]-1659845975893
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845977778
GPR[EPVS]-1659845977778
========
for(int i=1;i<getHeight();i++){
if(Double.isInfinite(epsilon)||Double.isNaN(epsilon)){
throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,numSlackVariables,i);
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845977779
GPR[SPVAP]-1659845977779
GPR[EPVAP]-1659845978852
GPR[EPVS]-1659845978852
========
for(int i=numSlackVariables;i<getHeight();i++){
double col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845978853
GPR[SPVAP]-1659845978853
GPR[EPVAP]-1659845979916
GPR[EPVS]-1659845979916
========
for(int i=1;i<getHeight();i++){
double col=0;
for(int j=numSlackVariables;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845979917
GPR[SPVAP]-1659845979917
GPR[EPVAP]-1659845980986
GPR[EPVS]-1659845980986
========
for(int i=numSlackVariables;i<getHeight();i++){
double col=0;
for(int j=numSlackVariables;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845980987
GPR[SPVAP]-1659845980987
GPR[EPVAP]-1659845982105
GPR[EPVS]-1659845982105
========
for(int i=1;i<getHeight();i++){
_i=newIndices[i];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845982107
GPR[SPVAP]-1659845982107
GPR[EPVAP]-1659845983170
GPR[EPVS]-1659845983170
========
for(int i=1;i<getHeight();i++){
curr=observations[j];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845983171
GPR[SPVAP]-1659845983171
GPR[EPVAP]-1659845984230
GPR[EPVS]-1659845984230
========
for(int i=1;i<getHeight();i++){
currentRow[j]=epsilon+(epsilon-previousRow[j-1])/(1L<<(2*i))-1;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845984232
GPR[SPVAP]-1659845984232
GPR[EPVAP]-1659845985293
GPR[EPVS]-1659845985293
========
if(numSlackVariables>=getMinimalIterationCount()){
 final double FastMath.abs(epsilon-epsilon)=FastMath.abs(epsilon-epsilon);
 final double getRelativeAccuracy()*(FastMath.abs(epsilon)+FastMath.abs(epsilon))=getRelativeAccuracy()*(FastMath.abs(olds)+FastMath.abs(s));
if((delta<=rLimit)||(delta<=getAbsoluteAccuracy())){
return s;
}
}
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845985295
GPR[SPVAP]-1659845985295
GPR[EPVAP]-1659845986242
GPR[EPVS]-1659845986242
========
for(int i=1;i<=getHeight();i++){
double col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845986243
GPR[SPVAP]-1659845986243
GPR[EPVAP]-1659845987331
GPR[EPVS]-1659845987331
========
for(int i=1;i<getHeight();i++){
newVertices[i]=new Vector2D[loop.length];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845987333
GPR[SPVAP]-1659845987333
GPR[EPVAP]-1659845988438
GPR[EPVS]-1659845988438
========
if((i+numSlackVariables)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845988442
GPR[SPVAP]-1659845988442
GPR[EPVAP]-1659845989516
GPR[EPVS]-1659845989516
========
col=numSlackVariables;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845989517
GPR[SPVAP]-1659845989517
GPR[EPVAP]-1659845990595
GPR[EPVS]-1659845990595
========
for(int i=1;i<getHeight();i++){
if(x[i]>1.0){
return false;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845990598
GPR[SPVAP]-1659845990598
GPR[EPVAP]-1659845991662
GPR[EPVS]-1659845991662
========
for(int i=1;i<getHeight();i++){
bytes[bytesOut++]=(byte)j;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845991664
GPR[SPVAP]-1659845991664
GPR[EPVAP]-1659845992742
GPR[EPVS]-1659845992742
========
for(int i=1;i<getHeight();i++){
if(col==bytes.length){
return ;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845992743
GPR[SPVAP]-1659845992743
GPR[EPVAP]-1659845993844
GPR[EPVS]-1659845993844
========
for(int i=1;i<getHeight();i++){
bytes[bytesOut++]=(byte)j;
if(col==bytes.length){
return ;
}

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845993846
GPR[SPVAP]-1659845993846
GPR[EPVAP]-1659845994933
GPR[EPVS]-1659845994933
========
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=i-1;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845994934
GPR[SPVAP]-1659845994934
GPR[EPVAP]-1659845996897
GPR[SPVATF]-1659845996897
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845998860
GPR[EPVS]-1659845998860
========
epsilon+=u-1;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845998863
GPR[SPVAP]-1659845998863
GPR[EPVAP]-1659845999967
GPR[EPVS]-1659845999967
========
for(int i=1;i<getHeight();i++){
vector[i]++;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659845999970
GPR[SPVAP]-1659845999970
GPR[EPVAP]-1659846001045
GPR[EPVS]-1659846001045
========
for(int i=1;i<getHeight();i++){
res[index]=(double)i/numSlackVariables;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846001047
GPR[SPVAP]-1659846001047
GPR[EPVAP]-1659846002115
GPR[EPVS]-1659846002115
========
for(int i=1;i<getHeight();i++){
c=polynomials[j][i]+epsilon*1.0/(i-3);
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846002117
GPR[SPVAP]-1659846002117
GPR[EPVAP]-1659846003214
GPR[EPVS]-1659846003215
========
for(int i=1;i<getHeight();i++){
int col=numSlackVariables;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846003216
GPR[SPVAP]-1659846003216
GPR[EPVAP]-1659846005215
GPR[SPVATF]-1659846005215
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846007191
GPR[EPVS]-1659846007191
========
for(int i=1;i<getHeight();i++){
j+=numSlackVariables;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846007192
GPR[SPVAP]-1659846007192
GPR[EPVAP]-1659846008295
GPR[EPVS]-1659846008295
========
numSlackVariables=numSlackVariables;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846008297
GPR[SPVAP]-1659846008297
GPR[EPVAP]-1659846009394
GPR[EPVS]-1659846009394
========
for(int i=1;i<getHeight();i++){
if(i==0){
result.mant[0]=col+numSlackVariables;
aextradigit=0;
bextradigit=0;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846009396
GPR[SPVAP]-1659846009396
GPR[EPVAP]-1659846010503
GPR[EPVS]-1659846010503
========
for(int i=1;i<getHeight();i++){
if(i>=numSlackVariables-1){
break;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846010505
GPR[SPVAP]-1659846010505
GPR[EPVAP]-1659846012539
GPR[SPVATF]-1659846012539
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846014422
GPR[EPVS]-1659846014422
========
for(int i=1;i<getHeight();i++){
e[j]=A[k][j];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846014424
GPR[SPVAP]-1659846014424
GPR[EPVAP]-1659846015505
GPR[EPVS]-1659846015505
========
for(int i=1;i<getHeight();i++){
if(divisor.mant[i]<remainder[i]){
break;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846015507
GPR[SPVAP]-1659846015507
GPR[EPVAP]-1659846016563
GPR[EPVS]-1659846016563
========
for(int i=1;i<getHeight();i++){
se[i]=Double.NaN;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846018985
GPR[SPVAP]-1659846018985
GPR[EPVAP]-1659846020063
GPR[EPVS]-1659846020063
========
for(int i=1;i<getHeight();i++){
if(i>0&&variablesToInclude[i]==variablesToInclude[i-1]){
variablesToInclude[i]=-1;
++numSlackVariables;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846020065
GPR[SPVAP]-1659846020065
GPR[EPVAP]-1659846021136
GPR[EPVS]-1659846021136
========
for(int i=1;i<getHeight();i++){
addData(matrix[i][0],data[i][1]);
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846021137
GPR[SPVAP]-1659846021137
GPR[EPVAP]-1659846022206
GPR[EPVS]-1659846022206
========
for(int i=1;i<getHeight();i++){
if(xvalI.length!=i){
throw new DimensionMismatchException(xvalI.length,i);
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846022207
GPR[SPVAP]-1659846022207
GPR[EPVAP]-1659846023298
GPR[EPVS]-1659846023298
========
for(int i=1;i<getHeight();i++){
polynomials[j+4][i]=16*(yMidDots[j][i]+0.5*j*polynomials[j+2][i]-2*0.5*j*polynomials[j][i]);
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846023300
GPR[SPVAP]-1659846023300
GPR[EPVAP]-1659846024381
GPR[EPVS]-1659846024381
========
for(int i=1;i<getHeight();i++){
if(i<numSlackVariables){
work[j]=0;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846024382
GPR[SPVAP]-1659846024382
GPR[EPVAP]-1659846025452
GPR[EPVS]-1659846025452
========
for(int i=1;i<getHeight();i++){
if(NEGATIVE_VAR_COLUMN_LABEL.charAt(j)>='0'&&NEGATIVE_VAR_COLUMN_LABEL.charAt(j)<='9'){
sciexp=i*10+NEGATIVE_VAR_COLUMN_LABEL.charAt(j)-'0';
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846025453
GPR[SPVAP]-1659846025453
GPR[EPVAP]-1659846026527
GPR[EPVS]-1659846026527
========
for(int i=1;i<getHeight();i++){
if(a.mant[i]<b.mant[i]){
return -a.sign;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846026529
GPR[SPVAP]-1659846026529
GPR[EPVAP]-1659846027664
GPR[EPVS]-1659846027664
========
for(int i=1;i<getHeight();i++){
outBlock[outIndex++]=block[i*jWidth+jColumn];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846027666
GPR[SPVAP]-1659846027666
GPR[EPVAP]-1659846028742
GPR[EPVS]-1659846028742
========
for(int i=1;i<getHeight();i++){
block[i*jWidth+jColumn]=mBlock[mIndex++];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846028744
GPR[SPVAP]-1659846028744
GPR[EPVAP]-1659846029827
GPR[EPVS]-1659846029827
========
for(int i=1;i<getHeight();i++){
buf[i]=NEGATIVE_VAR_COLUMN_LABEL.charAt(i);
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846029829
GPR[SPVAP]-1659846029829
GPR[EPVAP]-1659846030898
GPR[EPVS]-1659846030898
========
checkDimension(j,matrix);
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846030899
GPR[SPVAP]-1659846030899
GPR[EPVAP]-1659846031961
GPR[EPVS]-1659846031961
========
checkDimension(j,matrix[0]);
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846031962
GPR[SPVAP]-1659846031962
GPR[EPVAP]-1659846033105
GPR[EPVS]-1659846033105
========
for(int i=1;i<getHeight();i++){
j=probe(i,j);
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846033107
GPR[SPVAP]-1659846033107
GPR[EPVAP]-1659846035248
GPR[EPVS]-1659846035248
========
for(int i=1;i<getHeight();i++){
index=j&numSlackVariables;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846035254
GPR[SPVAP]-1659846035254
GPR[EPVAP]-1659846036534
GPR[EPVS]-1659846036534
========
for(int i=1;i<getHeight();i++){
j=probe(i,j);
index=j&numSlackVariables;

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846036535
GPR[SPVAP]-1659846036535
GPR[EPVAP]-1659846037617
GPR[EPVS]-1659846037617
========
for(int i=1;i<getHeight();i++){
sum=luRow[col];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846037618
GPR[SPVAP]-1659846037618
GPR[EPVAP]-1659846038691
GPR[EPVS]-1659846038691
========
for(int i=1;i<getHeight();i++){
luRow[col]=matrix[j][numSlackVariables];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846038693
GPR[SPVAP]-1659846038693
GPR[EPVAP]-1659846039785
GPR[EPVS]-1659846039785
========
for(int i=1;i<getHeight();i++){
if(FastMath.abs(matrix[j][numSlackVariables])>epsilon){
largest=FastMath.abs(matrix[j][numSlackVariables]);
max=j;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846039787
GPR[SPVAP]-1659846039787
GPR[EPVAP]-1659846040871
GPR[EPVS]-1659846040871
========
for(int i=1;i<getHeight();i++){
luRow[col]=matrix[j][numSlackVariables];
if(FastMath.abs(matrix[j][numSlackVariables])>epsilon){
largest=FastMath.abs(matrix[j][numSlackVariables]);
max=j;
}

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846040872
GPR[SPVAP]-1659846040872
GPR[EPVAP]-1659846041953
GPR[EPVS]-1659846041953
========
for(int i=1;i<getHeight();i++){
xAug[i][0]=1.0;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846041955
GPR[SPVAP]-1659846041955
GPR[EPVAP]-1659846043027
GPR[EPVS]-1659846043027
========
for(int i=1;i<getHeight();i++){
count+=uniCounterOffset[i]*c[i];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846043029
GPR[SPVAP]-1659846043029
GPR[EPVAP]-1659846044124
GPR[EPVS]-1659846044124
========
for(int i=1;i<getHeight();i++){
list[target]=list[i];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846044125
GPR[SPVAP]-1659846044125
GPR[EPVAP]-1659846045265
GPR[EPVS]-1659846045265
========
for(int i=1;i<getHeight();i++){
list[i]=col;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846045266
GPR[SPVAP]-1659846045266
GPR[EPVAP]-1659846046364
GPR[EPVS]-1659846046364
========
for(int i=1;i<getHeight();i++){
list[target]=list[i];
list[i]=col;

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846046365
GPR[SPVAP]-1659846046365
GPR[EPVAP]-1659846047429
GPR[EPVS]-1659846047429
========
for(int i=1;i<getHeight();i++){
int col=0;
den=j+2;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846047431
GPR[SPVAP]-1659846047431
GPR[EPVAP]-1659846048501
GPR[EPVS]-1659846048502
========
for(int i=1;i<getHeight();i++){
if(!col&&weights[i]>0.0){
containsPositiveWeight=true;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846048503
GPR[SPVAP]-1659846048503
GPR[EPVAP]-1659846049568
GPR[EPVS]-1659846049568
========
epsilon=Math.max(biglsq,epsilon*(i*d5));
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846049569
GPR[SPVAP]-1659846049569
GPR[EPVAP]-1659846050656
GPR[EPVS]-1659846050656
========
epsilon=epsilon*i;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846050658
GPR[SPVAP]-1659846050658
GPR[EPVAP]-1659846051734
GPR[EPVS]-1659846051734
========
epsilon=epsilon;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846051735
GPR[SPVAP]-1659846051735
GPR[EPVAP]-1659846052800
GPR[EPVS]-1659846052800
========
for(int i=1;i<getHeight();i++){
int col=(i<mant.length)?0:0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846052801
GPR[SPVAP]-1659846052801
GPR[EPVAP]-1659846053870
GPR[EPVS]-1659846053870
========
for(int i=1;i<getHeight();i++){
rh=(j*numSlackVariables)+numSlackVariables/RADIX;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846053872
GPR[SPVAP]-1659846053872
GPR[EPVAP]-1659846054962
GPR[EPVS]-1659846054962
========
for(int i=1;i<getHeight();i++){
remainder[i]=(j*numSlackVariables)+numSlackVariables-numSlackVariables*RADIX;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846054963
GPR[SPVAP]-1659846054963
GPR[EPVAP]-1659846056070
GPR[EPVS]-1659846056070
========
for(int i=1;i<getHeight();i++){
rh=(j*numSlackVariables)+numSlackVariables/RADIX;
remainder[i]=(j*numSlackVariables)+numSlackVariables-numSlackVariables*RADIX;

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846056071
GPR[SPVAP]-1659846056071
GPR[EPVAP]-1659846057145
GPR[EPVS]-1659846057145
========
for(int i=1;i<getHeight();i++){
out[ranks[i].getPosition()]=col;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846057146
GPR[SPVAP]-1659846057146
GPR[EPVAP]-1659846058210
GPR[EPVS]-1659846058210
========
if(i<0){
i=-i-2;
}
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846058211
GPR[SPVAP]-1659846058211
GPR[EPVAP]-1659846059293
GPR[EPVS]-1659846059293
========
if(i>=polynomials.length){
i--;
}
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846059294
GPR[SPVAP]-1659846059294
GPR[EPVAP]-1659846060373
GPR[EPVS]-1659846060373
========
for(int i=1;i<getHeight();i++){
if(i>=numSlackVariables){
break;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846060375
GPR[SPVAP]-1659846060375
GPR[EPVAP]-1659846062372
GPR[SPVATF]-1659846062372
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846064298
GPR[EPVS]-1659846064298
========
copyArray(constraints.get(numSlackVariables).getCoefficients().toArray(),matrix.getDataRef()[j]);
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846064299
GPR[SPVAP]-1659846064299
GPR[EPVAP]-1659846065373
GPR[EPVS]-1659846065373
========
matrix.setEntry(j,numSlackVariables-1,constraints.get(numSlackVariables).getValue());
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846065375
GPR[SPVAP]-1659846065375
GPR[EPVAP]-1659846066433
GPR[EPVS]-1659846066433
========
j-=i;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846066434
GPR[SPVAP]-1659846066434
GPR[EPVAP]-1659846067504
GPR[EPVS]-1659846067504
========
col+=i;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846067506
GPR[SPVAP]-1659846067506
GPR[EPVAP]-1659846068601
GPR[EPVS]-1659846068601
========
for(int i=1;i<getHeight();i++){
c[i]=y[i];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846068603
GPR[SPVAP]-1659846068603
GPR[EPVAP]-1659846069681
GPR[EPVS]-1659846069681
========
for(int i=1;i<getHeight();i++){
d[i]=y[i];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846069682
GPR[SPVAP]-1659846069682
GPR[EPVAP]-1659846070752
GPR[EPVS]-1659846070752
========
for(int i=1;i<getHeight();i++){
c[i]=y[i];
d[i]=y[i];

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846070753
GPR[SPVAP]-1659846070753
GPR[EPVAP]-1659846071819
GPR[EPVS]-1659846071819
========
for(int i=1;i<getHeight();i++){
ta[i][i]=main[i];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846071821
GPR[SPVAP]-1659846071821
GPR[EPVAP]-1659846072922
GPR[EPVS]-1659846072922
========
for(int i=1;i<getHeight();i++){
if(i<main.length-1){
ta[i][i+1]=secondary[i];
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846072923
GPR[SPVAP]-1659846072923
GPR[EPVAP]-1659846074005
GPR[EPVS]-1659846074005
========
for(int i=1;i<getHeight();i++){
ta[i][i]=main[i];
if(i<main.length-1){
ta[i][i+1]=secondary[i];
}

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846074006
GPR[SPVAP]-1659846074006
GPR[EPVAP]-1659846075084
GPR[EPVS]-1659846075084
========
for(int i=1;i<getHeight();i++){
ba[i][i]=main[i];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846075087
GPR[SPVAP]-1659846075087
GPR[EPVAP]-1659846076155
GPR[EPVS]-1659846076155
========
for(int i=1;i<getHeight();i++){
if(buf[i]=='.'){
sig+=(400-col)%4;
leading=false;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846076157
GPR[SPVAP]-1659846076157
GPR[EPVAP]-1659846077231
GPR[EPVS]-1659846077231
========
for(int i=1;i<getHeight();i++){
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
col++;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846077232
GPR[SPVAP]-1659846077232
GPR[EPVAP]-1659846078310
GPR[EPVS]-1659846078310
========
for(int i=1;i<getHeight();i++){
buf[i]=NEGATIVE_VAR_COLUMN_LABEL.charAt(i);
if(buf[i]=='.'){
sig+=(400-col)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
col++;
}

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846078311
GPR[SPVAP]-1659846078311
GPR[EPVAP]-1659846079383
GPR[EPVS]-1659846079383
========
for(int i=1;i<getHeight();i++){
if(col==(numSlackVariables/2)*4){
sp=i;
break;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846079385
GPR[SPVAP]-1659846079385
GPR[EPVAP]-1659846080468
GPR[EPVS]-1659846080468
========
for(int i=1;i<getHeight();i++){
buf[i]=NEGATIVE_VAR_COLUMN_LABEL.charAt(i);
if(buf[i]=='.'){
sig+=(400-col)%4;
leading=false;
}
if(col==(numSlackVariables/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
col++;
}

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846080470
GPR[SPVAP]-1659846080470
GPR[EPVAP]-1659846081553
GPR[EPVS]-1659846081553
========
for(int i=1;i<getHeight();i++){
buf[i]=NEGATIVE_VAR_COLUMN_LABEL.charAt(i);
if(buf[i]=='.'){
sig+=(400-col)%4;
leading=false;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846081555
GPR[SPVAP]-1659846081555
GPR[EPVAP]-1659846082651
GPR[EPVS]-1659846082651
========
for(int i=1;i<getHeight();i++){
buf[i]=NEGATIVE_VAR_COLUMN_LABEL.charAt(i);
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
col++;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846082652
GPR[SPVAP]-1659846082652
GPR[EPVAP]-1659846083728
GPR[EPVS]-1659846083728
========
for(int i=1;i<getHeight();i++){
if(buf[i]=='.'){
sig+=(400-col)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
col++;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846083729
GPR[SPVAP]-1659846083729
GPR[EPVAP]-1659846084799
GPR[EPVS]-1659846084799
========
for(int i=1;i<getHeight();i++){
buf[i]=NEGATIVE_VAR_COLUMN_LABEL.charAt(i);
if(buf[i]=='.'){
sig+=(400-col)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
col++;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846084800
GPR[SPVAP]-1659846084800
GPR[EPVAP]-1659846085880
GPR[EPVS]-1659846085880
========
for(int i=1;i<getHeight();i++){
int col=0;
fX2=epsilon;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846085883
GPR[SPVAP]-1659846085883
GPR[EPVAP]-1659846086948
GPR[EPVS]-1659846086948
========
for(int i=1;i<getHeight();i++){
int col=0;
x=result[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846086949
GPR[SPVAP]-1659846086949
GPR[EPVAP]-1659846088025
GPR[EPVS]-1659846088025
========
for(int i=1;i<getHeight();i++){
int col=0;
fX2=epsilon;
x=result[0];

for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846088026
GPR[SPVAP]-1659846088026
GPR[EPVAP]-1659846089084
GPR[EPVS]-1659846089084
========
for(int i=1;i<getHeight();i++){
int col=0;
xk=x[k];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846089086
GPR[SPVAP]-1659846089086
GPR[EPVAP]-1659846090154
GPR[EPVS]-1659846090154
========
for(int i=1;i<getHeight();i++){
++numSlackVariables;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846090155
GPR[SPVAP]-1659846090155
GPR[EPVAP]-1659846091243
GPR[EPVS]-1659846091243
========
for(int i=1;i<getHeight();i++){
xk=x[k];
++numSlackVariables;

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846091244
GPR[SPVAP]-1659846091244
GPR[EPVAP]-1659846092354
GPR[EPVS]-1659846092354
========
for(int i=1;i<getHeight();i++){
buffer[p++]=(char)((mant[i]/1000)+'0');
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846092356
GPR[SPVAP]-1659846092356
GPR[EPVAP]-1659846093432
GPR[EPVS]-1659846093432
========
for(int i=1;i<getHeight();i++){
buffer[p++]=(char)(((mant[i]/100)%10)+'0');
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846093433
GPR[SPVAP]-1659846093433
GPR[EPVAP]-1659846094511
GPR[EPVS]-1659846094511
========
for(int i=1;i<getHeight();i++){
buffer[p++]=(char)(((mant[i]/10)%10)+'0');
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846094513
GPR[SPVAP]-1659846094513
GPR[EPVAP]-1659846095589
GPR[EPVS]-1659846095589
========
for(int i=1;i<getHeight();i++){
buffer[p++]=(char)(((mant[i])%10)+'0');
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846095591
GPR[SPVAP]-1659846095591
GPR[EPVAP]-1659846096657
GPR[EPVS]-1659846096657
========
for(int i=1;i<getHeight();i++){
buffer[p++]=(char)((mant[i]/1000)+'0');
buffer[p++]=(char)(((mant[i]/100)%10)+'0');
buffer[p++]=(char)(((mant[i]/10)%10)+'0');
buffer[p++]=(char)(((mant[i])%10)+'0');

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846096659
GPR[SPVAP]-1659846096659
GPR[EPVAP]-1659846097761
GPR[EPVS]-1659846097761
========
for(int i=1;i<getHeight();i++){
int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846097763
GPR[SPVAP]-1659846097763
GPR[EPVAP]-1659846098835
GPR[EPVS]-1659846098835
========
for(int i=1;i<getHeight();i++){
int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846098836
GPR[SPVAP]-1659846098836
GPR[EPVAP]-1659846099935
GPR[EPVS]-1659846099935
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846099936
GPR[SPVAP]-1659846099936
GPR[EPVAP]-1659846101004
GPR[EPVS]-1659846101004
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846101005
GPR[SPVAP]-1659846101005
GPR[EPVAP]-1659846102101
GPR[EPVS]-1659846102101
========
for(int i=1;i<getHeight();i++){
ys[1]=as[1];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846102102
GPR[SPVAP]-1659846102102
GPR[EPVAP]-1659846103165
GPR[EPVS]-1659846103165
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846103167
GPR[SPVAP]-1659846103167
GPR[EPVAP]-1659846104245
GPR[EPVS]-1659846104245
========
for(int i=1;i<getHeight();i++){
int col=0;
ys[0]=as[0];
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846104246
GPR[SPVAP]-1659846104246
GPR[EPVAP]-1659846105325
GPR[EPVS]-1659846105325
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846105326
GPR[SPVAP]-1659846105326
GPR[EPVAP]-1659846106396
GPR[EPVS]-1659846106396
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846106397
GPR[SPVAP]-1659846106397
GPR[EPVAP]-1659846107469
GPR[EPVS]-1659846107469
========
for(int i=1;i<getHeight();i++){
ys[1]=as[1];
int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846107471
GPR[SPVAP]-1659846107471
GPR[EPVAP]-1659846110133
GPR[EPVS]-1659846110133
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846110144
GPR[SPVAP]-1659846110144
GPR[EPVAP]-1659846111244
GPR[EPVS]-1659846111244
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846111245
GPR[SPVAP]-1659846111245
GPR[EPVAP]-1659846112337
GPR[EPVS]-1659846112337
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846112338
GPR[SPVAP]-1659846112338
GPR[EPVAP]-1659846113437
GPR[EPVS]-1659846113437
========
for(int i=1;i<getHeight();i++){
ys[1]=as[1];
int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846113439
GPR[SPVAP]-1659846113439
GPR[EPVAP]-1659846114510
GPR[EPVS]-1659846114510
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846114511
GPR[SPVAP]-1659846114511
GPR[EPVAP]-1659846115595
GPR[EPVS]-1659846115595
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846115596
GPR[SPVAP]-1659846115596
GPR[EPVAP]-1659846116663
GPR[EPVS]-1659846116663
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[1]=as[1];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846116664
GPR[SPVAP]-1659846116664
GPR[EPVAP]-1659846117769
GPR[EPVS]-1659846117769
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846117771
GPR[SPVAP]-1659846117771
GPR[EPVAP]-1659846118846
GPR[EPVS]-1659846118846
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[1]=as[1];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846118848
GPR[SPVAP]-1659846118848
GPR[EPVAP]-1659846119950
GPR[EPVS]-1659846119950
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846119951
GPR[SPVAP]-1659846119951
GPR[EPVAP]-1659846121060
GPR[EPVS]-1659846121060
========
for(int i=1;i<getHeight();i++){
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846121061
GPR[SPVAP]-1659846121061
GPR[EPVAP]-1659846122153
GPR[EPVS]-1659846122153
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
int col=0;
ys[0]=as[0];
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846122154
GPR[SPVAP]-1659846122154
GPR[EPVAP]-1659846123245
GPR[EPVS]-1659846123245
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
int col=0;
ys[0]=as[0];
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846123246
GPR[SPVAP]-1659846123246
GPR[EPVAP]-1659846124312
GPR[EPVS]-1659846124312
========
for(int i=1;i<getHeight();i++){
ys[1]=as[1];
int col=0;
ys[0]=as[0];
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846124313
GPR[SPVAP]-1659846124313
GPR[EPVAP]-1659846125382
GPR[EPVS]-1659846125382
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[0]=as[0];
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846125383
GPR[SPVAP]-1659846125383
GPR[EPVAP]-1659846126469
GPR[EPVS]-1659846126469
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846126470
GPR[SPVAP]-1659846126470
GPR[EPVAP]-1659846127544
GPR[EPVS]-1659846127544
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[1]=as[1];
int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846127545
GPR[SPVAP]-1659846127545
GPR[EPVAP]-1659846128635
GPR[EPVS]-1659846128635
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846128636
GPR[SPVAP]-1659846128636
GPR[EPVAP]-1659846129741
GPR[EPVS]-1659846129741
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[1]=as[1];
int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846129743
GPR[SPVAP]-1659846129743
GPR[EPVAP]-1659846130812
GPR[EPVS]-1659846130812
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846130814
GPR[SPVAP]-1659846130814
GPR[EPVAP]-1659846131889
GPR[EPVS]-1659846131889
========
for(int i=1;i<getHeight();i++){
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846131890
GPR[SPVAP]-1659846131890
GPR[EPVAP]-1659846132963
GPR[EPVS]-1659846132963
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846132964
GPR[SPVAP]-1659846132964
GPR[EPVAP]-1659846134038
GPR[EPVS]-1659846134038
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[1]=as[1];
int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846134039
GPR[SPVAP]-1659846134039
GPR[EPVAP]-1659846135109
GPR[EPVS]-1659846135109
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846135110
GPR[SPVAP]-1659846135110
GPR[EPVAP]-1659846136177
GPR[EPVS]-1659846136177
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[1]=as[1];
int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846136178
GPR[SPVAP]-1659846136178
GPR[EPVAP]-1659846137255
GPR[EPVS]-1659846137255
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846137256
GPR[SPVAP]-1659846137256
GPR[EPVAP]-1659846138321
GPR[EPVS]-1659846138321
========
for(int i=1;i<getHeight();i++){
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846138322
GPR[SPVAP]-1659846138322
GPR[EPVAP]-1659846139395
GPR[EPVS]-1659846139395
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846139396
GPR[SPVAP]-1659846139396
GPR[EPVAP]-1659846140482
GPR[EPVS]-1659846140482
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846140483
GPR[SPVAP]-1659846140483
GPR[EPVAP]-1659846141594
GPR[EPVS]-1659846141594
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846141595
GPR[SPVAP]-1659846141595
GPR[EPVAP]-1659846142669
GPR[EPVS]-1659846142670
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846142671
GPR[SPVAP]-1659846142671
GPR[EPVAP]-1659846143749
GPR[EPVS]-1659846143749
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
int col=0;
ys[0]=as[0];
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846143751
GPR[SPVAP]-1659846143751
GPR[EPVAP]-1659846144835
GPR[EPVS]-1659846144835
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[1]=as[1];
int col=0;
ys[0]=as[0];
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846144836
GPR[SPVAP]-1659846144836
GPR[EPVAP]-1659846145950
GPR[EPVS]-1659846145950
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[0]=as[0];
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846145952
GPR[SPVAP]-1659846145952
GPR[EPVAP]-1659846147024
GPR[EPVS]-1659846147024
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[1]=as[1];
int col=0;
ys[0]=as[0];
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846147025
GPR[SPVAP]-1659846147025
GPR[EPVAP]-1659846148107
GPR[EPVS]-1659846148107
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[0]=as[0];
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846148108
GPR[SPVAP]-1659846148108
GPR[EPVAP]-1659846149183
GPR[EPVS]-1659846149183
========
for(int i=1;i<getHeight();i++){
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[0]=as[0];
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846149184
GPR[SPVAP]-1659846149184
GPR[EPVAP]-1659846150259
GPR[EPVS]-1659846150259
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];
int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846150260
GPR[SPVAP]-1659846150260
GPR[EPVAP]-1659846151349
GPR[EPVS]-1659846151349
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846151350
GPR[SPVAP]-1659846151350
GPR[EPVAP]-1659846152437
GPR[EPVS]-1659846152437
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846152438
GPR[SPVAP]-1659846152438
GPR[EPVAP]-1659846153517
GPR[EPVS]-1659846153517
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[0]=as[0];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846153519
GPR[SPVAP]-1659846153519
GPR[EPVAP]-1659846154600
GPR[EPVS]-1659846154601
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];
int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846154601
GPR[SPVAP]-1659846154601
GPR[EPVAP]-1659846155682
GPR[EPVS]-1659846155682
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846155683
GPR[SPVAP]-1659846155683
GPR[EPVAP]-1659846156777
GPR[EPVS]-1659846156777
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846156778
GPR[SPVAP]-1659846156778
GPR[EPVAP]-1659846157869
GPR[EPVS]-1659846157869
========
for(int i=1;i<getHeight();i++){
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
ys[1]=as[1];
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846157870
GPR[SPVAP]-1659846157870
GPR[EPVAP]-1659846158965
GPR[EPVS]-1659846158965
========
for(int i=1;i<getHeight();i++){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
ys[0]=as[0];
ys[1]=as[1];

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846158966
GPR[SPVAP]-1659846158966
GPR[EPVAP]-1659846160046
GPR[EPVS]-1659846160046
========
tableau=times(arzneg,repmat(j,numSlackVariables,1));
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846160047
GPR[SPVAP]-1659846160047
GPR[EPVAP]-1659846161109
GPR[EPVS]-1659846161109
========
for(int i=1;i<getHeight();i++){
long col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846161111
GPR[SPVAP]-1659846161111
GPR[EPVAP]-1659846162214
GPR[EPVS]-1659846162214
========
for(int i=1;i<getHeight();i++){
mt[i]=(int)((serialVersionUID^((serialVersionUID^(l1>>30))*1566083941l))-i&0xffffffffL);
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846162215
GPR[SPVAP]-1659846162215
GPR[EPVAP]-1659846163288
GPR[EPVS]-1659846163288
========
for(int i=1;i<getHeight();i++){
i++;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846163289
GPR[SPVAP]-1659846163289
GPR[EPVAP]-1659846165290
GPR[SPVATF]-1659846165290
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846167206
GPR[EPVS]-1659846167206
========
for(int i=1;i<getHeight();i++){
mt[i]=(int)((serialVersionUID^((serialVersionUID^(l1>>30))*1566083941l))-i&0xffffffffL);
i++;

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846167207
GPR[SPVAP]-1659846167207
GPR[EPVAP]-1659846168291
GPR[EPVS]-1659846168291
========
for(int i=1;i<getHeight();i++){
after[i]+=previous[i]+scaled[i];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846168293
GPR[SPVAP]-1659846168293
GPR[EPVAP]-1659846169401
GPR[EPVS]-1659846169401
========
epsilon=epsilon*epsilon;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846169403
GPR[SPVAP]-1659846169403
GPR[EPVAP]-1659846170461
GPR[EPVS]-1659846170461
========
for(int i=1;i<getHeight();i++){
ltI[i]=FastMath.sqrt(matrix[i][i]);
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846170464
GPR[SPVAP]-1659846170464
GPR[EPVAP]-1659846171548
GPR[EPVS]-1659846171548
========
j++;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846171550
GPR[SPVAP]-1659846171550
GPR[EPVAP]-1659846172622
GPR[EPVS]-1659846172622
========
for(int i=1;i<getHeight();i++){
pos+=numSlackVariables-i;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846172624
GPR[SPVAP]-1659846172624
GPR[EPVAP]-1659846173719
GPR[EPVS]-1659846173719
========
for(int i=1;i<getHeight();i++){
++numSlackVariables;
++numSlackVariables;

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846173721
GPR[SPVAP]-1659846173721
GPR[EPVAP]-1659846174815
GPR[EPVS]-1659846174815
========
for(int i=numSlackVariables;i<getHeight();i++){
++numSlackVariables;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846174817
GPR[SPVAP]-1659846174817
GPR[EPVAP]-1659846175889
GPR[EPVS]-1659846175889
========
for(int i=1;i<getHeight();i++){
int col=0;
lastScaleFactor=epsilon;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846175892
GPR[SPVAP]-1659846175892
GPR[EPVAP]-1659846176961
GPR[EPVS]-1659846176961
========
for(int i=1;i<getHeight();i++){
int col=0;
scaleFactor*=epsilon;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846176962
GPR[SPVAP]-1659846176962
GPR[EPVAP]-1659846178045
GPR[EPVS]-1659846178045
========
for(int i=1;i<getHeight();i++){
if(!col){
break;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846178046
GPR[SPVAP]-1659846178046
GPR[EPVAP]-1659846179123
GPR[EPVS]-1659846179123
========
for(int i=1;i<getHeight();i++){
lastScaleFactor=epsilon;
scaleFactor*=epsilon;
if(!col){
break;
}

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846179124
GPR[SPVAP]-1659846179124
GPR[EPVAP]-1659846180221
GPR[EPVS]-1659846180221
========
for(int i=1;i<getHeight();i++){
int col=0;
pos1=numSlackVariables;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846180232
GPR[SPVAP]-1659846180232
GPR[EPVAP]-1659846182889
GPR[EPVS]-1659846182889
========
for(int i=1;i<getHeight();i++){
int col=0;
pos2=numSlackVariables;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846182891
GPR[SPVAP]-1659846182891
GPR[EPVAP]-1659846183975
GPR[EPVS]-1659846183975
========
for(int i=1;i<getHeight();i++){
int col=0;
total=0.0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846183976
GPR[SPVAP]-1659846183976
GPR[EPVAP]-1659846185051
GPR[EPVS]-1659846185051
========
for(int i=1;i<getHeight();i++){
rinv[pos]=epsilon-r[pos1];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846185053
GPR[SPVAP]-1659846185053
GPR[EPVAP]-1659846186117
GPR[EPVS]-1659846186117
========
for(int i=1;i<getHeight();i++){
--numSlackVariables;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846186118
GPR[SPVAP]-1659846186118
GPR[EPVAP]-1659846187182
GPR[EPVS]-1659846187182
========
for(int i=1;i<getHeight();i++){
pos1=numSlackVariables;
pos2=numSlackVariables;
total=0.0;
rinv[pos]=epsilon-r[pos1];
--numSlackVariables;

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846187183
GPR[SPVAP]-1659846187183
GPR[EPVAP]-1659846188261
GPR[EPVS]-1659846188261
========
for(int i=1;i<getHeight();i++){
pos=numSlackVariables+col-1-numSlackVariables;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846188263
GPR[SPVAP]-1659846188263
GPR[EPVAP]-1659846189365
GPR[EPVS]-1659846189365
========
for(int i=1;i<getHeight();i++){
sumxx=d[col];
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846189366
GPR[SPVAP]-1659846189366
GPR[EPVAP]-1659846190433
GPR[EPVS]-1659846190433
========
for(int i=1;i<getHeight();i++){
if(epsilon>0.0){
rms[col+rms_off]=1.0/Math.sqrt(epsilon);
}else {
rms[col+rms_off]=0.0;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846190435
GPR[SPVAP]-1659846190435
GPR[EPVAP]-1659846191541
GPR[EPVS]-1659846191541
========
for(int i=1;i<getHeight();i++){
pos=numSlackVariables+col-1-numSlackVariables;
sumxx=d[col];
if(epsilon>0.0){
rms[col+rms_off]=1.0/Math.sqrt(epsilon);
}else {
rms[col+rms_off]=0.0;
}

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846191542
GPR[SPVAP]-1659846191542
GPR[EPVAP]-1659846192616
GPR[EPVS]-1659846192616
========
for(int i=1;i<getHeight();i++){
_i=newIndices[i];
int col=0;
for(int j=0;j<=getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846192619
GPR[SPVAP]-1659846192619
GPR[EPVAP]-1659846193683
GPR[EPVS]-1659846193683
========
for(int i=1;i<getHeight();i++){
j=probe(i,j);
index=j&numSlackVariables;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846193685
GPR[SPVAP]-1659846193685
GPR[EPVAP]-1659846194764
GPR[EPVS]-1659846194764
========
for(int i=1;i<getHeight();i++){
j=probe(i,j);
j=probe(i,j);
index=j&numSlackVariables;

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846194766
GPR[SPVAP]-1659846194766
GPR[EPVAP]-1659846195864
GPR[EPVS]-1659846195864
========
for(int i=1;i<getHeight();i++){
index=j&numSlackVariables;
j=probe(i,j);
index=j&numSlackVariables;

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846195865
GPR[SPVAP]-1659846195865
GPR[EPVAP]-1659846196937
GPR[EPVS]-1659846196937
========
for(int i=1;i<getHeight();i++){
j=probe(i,j);
index=j&numSlackVariables;
j=probe(i,j);
index=j&numSlackVariables;

int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846196938
GPR[SPVAP]-1659846196938
GPR[EPVAP]-1659846198014
GPR[EPVS]-1659846198014
========
for(int i=0;i<getArtificialVariableOffset();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846204618
GPR[SPVAP]-1659846204618
GPR[EPVAP]-1659846206596
GPR[SPVATF]-1659846206596
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846208492
GPR[EPVS]-1659846208492
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getNumArtificialVariables();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846208493
GPR[SPVAP]-1659846208493
GPR[EPVAP]-1659846210503
GPR[SPVATF]-1659846210503
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846212418
GPR[EPVS]-1659846212418
========
for(int i=0;i<getArtificialVariableOffset();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getNumArtificialVariables();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846212419
GPR[SPVAP]-1659846212419
GPR[EPVAP]-1659846214399
GPR[SPVATF]-1659846214399
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846216296
GPR[EPVS]-1659846216296
========
for(int i=0;i<getNumArtificialVariables();i++){
double col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846216297
GPR[SPVAP]-1659846216297
GPR[EPVAP]-1659846217369
GPR[EPVS]-1659846217369
========
for(int i=0;i<=getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846217371
GPR[SPVAP]-1659846217371
GPR[EPVAP]-1659846219346
GPR[SPVATF]-1659846219346
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846221261
GPR[EPVS]-1659846221261
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getOriginalNumDecisionVariables();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846221264
GPR[SPVAP]-1659846221264
GPR[EPVAP]-1659846223217
GPR[SPVATF]-1659846223217
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846225102
GPR[EPVS]-1659846225102
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
columnLabels.add("Z");
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846225103
GPR[SPVAP]-1659846225103
GPR[EPVAP]-1659846227081
GPR[SPVATF]-1659846227081
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846229010
GPR[EPVS]-1659846229010
========
if(!restrictToNonNegative){
columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);
}
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846229011
GPR[SPVAP]-1659846229011
GPR[EPVAP]-1659846230985
GPR[SPVATF]-1659846230985
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846232890
GPR[EPVS]-1659846232890
========
columnLabels.add("RHS");
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846232892
GPR[SPVAP]-1659846232892
GPR[EPVAP]-1659846234840
GPR[SPVATF]-1659846234840
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846236742
GPR[EPVS]-1659846236742
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
columnLabels.add("Z");
for(int i=1;i<getOriginalNumDecisionVariables();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846236743
GPR[SPVAP]-1659846236743
GPR[EPVAP]-1659846238741
GPR[SPVATF]-1659846238741
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846240671
GPR[EPVS]-1659846240671
========
if(!restrictToNonNegative){
columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);
}
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getOriginalNumDecisionVariables();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846240672
GPR[SPVAP]-1659846240672
GPR[EPVAP]-1659846242679
GPR[SPVATF]-1659846242679
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846244628
GPR[EPVS]-1659846244628
========
columnLabels.add("RHS");
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getOriginalNumDecisionVariables();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846244629
GPR[SPVAP]-1659846244629
GPR[EPVAP]-1659846246636
GPR[SPVATF]-1659846246636
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846248561
GPR[EPVS]-1659846248561
========
if(!restrictToNonNegative){
columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);
}
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
columnLabels.add("Z");
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846248563
GPR[SPVAP]-1659846248563
GPR[EPVAP]-1659846250555
GPR[SPVATF]-1659846250555
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846252472
GPR[EPVS]-1659846252472
========
columnLabels.add("RHS");
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
columnLabels.add("Z");
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846252474
GPR[SPVAP]-1659846252474
GPR[EPVAP]-1659846256027
GPR[SPVATF]-1659846256027
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846257958
GPR[EPVS]-1659846257958
========
if(!restrictToNonNegative){
columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);
}
columnLabels.add("RHS");
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846257959
GPR[SPVAP]-1659846257959
GPR[EPVAP]-1659846259902
GPR[SPVATF]-1659846259902
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846261821
GPR[EPVS]-1659846261821
========
if(!restrictToNonNegative){
columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);
}
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
columnLabels.add("Z");
for(int i=1;i<getOriginalNumDecisionVariables();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846261822
GPR[SPVAP]-1659846261822
GPR[EPVAP]-1659846263805
GPR[SPVATF]-1659846263805
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846265739
GPR[EPVS]-1659846265739
========
columnLabels.add("RHS");
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
columnLabels.add("Z");
for(int i=1;i<getOriginalNumDecisionVariables();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846265740
GPR[SPVAP]-1659846265740
GPR[EPVAP]-1659846267720
GPR[SPVATF]-1659846267720
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846269628
GPR[EPVS]-1659846269628
========
if(!restrictToNonNegative){
columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);
}
columnLabels.add("RHS");
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getOriginalNumDecisionVariables();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846269630
GPR[SPVAP]-1659846269630
GPR[EPVAP]-1659846271565
GPR[SPVATF]-1659846271565
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846273506
GPR[EPVS]-1659846273506
========
if(!restrictToNonNegative){
columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);
}
columnLabels.add("RHS");
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
columnLabels.add("Z");
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846273507
GPR[SPVAP]-1659846273507
GPR[EPVAP]-1659846275475
GPR[SPVATF]-1659846275475
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846277390
GPR[EPVS]-1659846277390
========
if(!restrictToNonNegative){
columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);
}
columnLabels.add("RHS");
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
columnLabels.add("Z");
for(int i=1;i<getOriginalNumDecisionVariables();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846277391
GPR[SPVAP]-1659846277391
GPR[EPVAP]-1659846279347
GPR[SPVATF]-1659846279347
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846281278
GPR[EPVS]-1659846281278
========
for(int i=0;i<tableau.getHeight();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846281281
GPR[SPVAP]-1659846281281
GPR[EPVAP]-1659846282349
GPR[EPVS]-1659846282349
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
minRatioPositions.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846282351
GPR[SPVAP]-1659846282351
GPR[EPVAP]-1659846283421
GPR[EPVS]-1659846283421
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(i);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846283422
GPR[SPVAP]-1659846283422
GPR[EPVAP]-1659846285461
GPR[SPVATF]-1659846285461
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846287386
GPR[EPVS]-1659846287386
========
epsilon=epsilon*d1+epsilon*d2;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846287390
GPR[SPVAP]-1659846287390
GPR[EPVAP]-1659846288487
GPR[EPVS]-1659846288487
========
epsilon=epsilon-epsilon*d1;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846288488
GPR[SPVAP]-1659846288488
GPR[EPVAP]-1659846289560
GPR[EPVS]-1659846289560
========
for(int i=0;i<getHeight();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846289562
GPR[SPVAP]-1659846289562
GPR[EPVAP]-1659846291543
GPR[SPVATF]-1659846291543
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846293453
GPR[EPVS]-1659846293453
========
for(int i=numSlackVariables;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846293455
GPR[SPVAP]-1659846293455
GPR[EPVAP]-1659846295439
GPR[SPVATF]-1659846295439
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846297334
GPR[EPVS]-1659846297334
========
for(int i=0;i<tableau.getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846297336
GPR[SPVAP]-1659846297336
GPR[EPVAP]-1659846298418
GPR[EPVS]-1659846298418
========
for(int i=0;i<getNumArtificialVariables();i++){
if(getBasicRow(col)!=null&&getBasicRow(col)==0){
coefficients[i]=0;
}else if(new HashSet<Integer>().contains(getBasicRow(col))){
coefficients[i]=0-(restrictToNonNegative?0:j>0?getBasicRow(negativeVarColumn):null==null?0:getEntry(negativeVarBasicRow,getRhsOffset()));
}else {
new HashSet<Integer>().add(getBasicRow(col));
coefficients[i]=(getBasicRow(col)==null?0:getEntry(getBasicRow(col),getRhsOffset()))-(restrictToNonNegative?0:j>0?getBasicRow(negativeVarColumn):null==null?0:getEntry(negativeVarBasicRow,getRhsOffset()));
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846298421
GPR[SPVAP]-1659846298421
GPR[EPVAP]-1659846299492
GPR[EPVS]-1659846299492
========
epsilon=ZERO;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846299494
GPR[SPVAP]-1659846299494
GPR[EPVAP]-1659846300582
GPR[EPVS]-1659846300582
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<=getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846300583
GPR[SPVAP]-1659846300583
GPR[EPVAP]-1659846302538
GPR[SPVATF]-1659846302538
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846304442
GPR[EPVS]-1659846304442
========
for(int i=restrictToNonNegative?0:1;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846304443
GPR[SPVAP]-1659846304443
GPR[EPVAP]-1659846306441
GPR[SPVATF]-1659846306441
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846308363
GPR[EPVS]-1659846308363
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<tableau.getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846308365
GPR[SPVAP]-1659846308365
GPR[EPVAP]-1659846309453
GPR[EPVS]-1659846309453
========
incrementIterationsCounter();
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846309455
GPR[SPVAP]-1659846309455
GPR[EPVAP]-1659846310536
GPR[EPVS]-1659846310536
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
tableau.divideRow(j,tableau.getEntry(j,getPivotColumn(tableau)));
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846310538
GPR[SPVAP]-1659846310538
GPR[EPVAP]-1659846311598
GPR[EPVS]-1659846311598
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)!=null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846311600
GPR[SPVAP]-1659846311600
GPR[EPVAP]-1659846313586
GPR[SPVATF]-1659846313586
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846315517
GPR[EPVS]-1659846315517
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getEntry(col,j)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846315518
GPR[SPVAP]-1659846315518
GPR[EPVAP]-1659846316593
GPR[EPVS]-1659846316593
========
epsilon=Math.max(biglsq,Math.max(ONE,epsilon/epsilon*d3)*(epsilon*d4));
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846316597
GPR[SPVAP]-1659846316597
GPR[EPVAP]-1659846317704
GPR[EPVS]-1659846317704
========
getTree(true).visit(new SegmentsBuilder());
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846317705
GPR[SPVAP]-1659846317705
GPR[EPVAP]-1659846318774
GPR[EPVS]-1659846318774
========
numSlackVariables=i;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846318777
GPR[SPVAP]-1659846318777
GPR[EPVAP]-1659846319835
GPR[EPVS]-1659846319835
========
default :

for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846319838
GPR[SPVAP]-1659846319838
GPR[EPVAP]-1659846320793
GPR[EPVS]-1659846320793
========
System.arraycopy(new IntDoublePair[ranks.length],0,new IntDoublePair[j],0,j);
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846320796
GPR[SPVAP]-1659846320797
GPR[EPVAP]-1659846321907
GPR[EPVS]-1659846321907
========
for(int i=0;i<getNumArtificialVariables();i++){
currentRow[j]=epsilon+(epsilon-previousRow[j-1])/(1L<<(2*i))-1;
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846321908
GPR[SPVAP]-1659846321908
GPR[EPVAP]-1659846322986
GPR[EPVS]-1659846322986
========
epsilon=epsilon;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846322987
GPR[SPVAP]-1659846322987
GPR[EPVAP]-1659846324069
GPR[EPVS]-1659846324069
========
for(int i=0;i<=getNumArtificialVariables();i++){
double col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846324071
GPR[SPVAP]-1659846324071
GPR[EPVAP]-1659846325392
GPR[EPVS]-1659846325392
========
new boolean[col][j]=true;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846325403
GPR[SPVAP]-1659846325403
GPR[EPVAP]-1659846327461
GPR[EPVS]-1659846327461
========
case DECREASING :

for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846327466
GPR[SPVAP]-1659846327466
GPR[EPVAP]-1659846328426
GPR[EPVS]-1659846328426
========
for(int i=0;i<getNumArtificialVariables();i++){
long col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846328428
GPR[SPVAP]-1659846328428
GPR[EPVAP]-1659846329525
GPR[EPVS]-1659846329525
========
for(int i=0;i<getNumArtificialVariables();i++){
mt[i]=(int)(serialVersionUID&0xffffffffl);
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846329526
GPR[SPVAP]-1659846329526
GPR[EPVAP]-1659846330591
GPR[EPVS]-1659846330591
========
for(int i=0;i<getNumArtificialVariables();i++){
i++;
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846330592
GPR[SPVAP]-1659846330592
GPR[EPVAP]-1659846332549
GPR[SPVATF]-1659846332549
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846334430
GPR[EPVS]-1659846334430
========
for(int i=0;i<getNumArtificialVariables();i++){
numSlackVariables++;
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846334432
GPR[SPVAP]-1659846334432
GPR[EPVAP]-1659846335518
GPR[EPVS]-1659846335518
========
for(int i=0;i<getNumArtificialVariables();i++){
if(i>=N){
mt[0]=mt[N-1];
i=1;
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846335519
GPR[SPVAP]-1659846335519
GPR[EPVAP]-1659846336596
GPR[EPVS]-1659846336596
========
for(int i=0;i<getNumArtificialVariables();i++){
if(numSlackVariables>=seed.length){
j=0;
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846336597
GPR[SPVAP]-1659846336597
GPR[EPVAP]-1659846337665
GPR[EPVS]-1659846337665
========
for(int i=0;i<getNumArtificialVariables();i++){
mt[i]=(int)(serialVersionUID&0xffffffffl);
i++;
numSlackVariables++;
if(i>=N){
mt[0]=mt[N-1];
i=1;
}
if(numSlackVariables>=seed.length){
j=0;
}

int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846337667
GPR[SPVAP]-1659846337667
GPR[EPVAP]-1659846338761
GPR[EPVS]-1659846338761
========
checkDimension(j,matrix);
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846338763
GPR[SPVAP]-1659846338763
GPR[EPVAP]-1659846339849
GPR[EPVS]-1659846339849
========
checkDimension(j,matrix[0]);
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846339851
GPR[SPVAP]-1659846339851
GPR[EPVAP]-1659846340934
GPR[EPVS]-1659846340934
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
new ArrayList<FieldMatrix<T>>(binaryRepresentation.length).add(0,this.copy());
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846340939
GPR[SPVAP]-1659846340939
GPR[EPVAP]-1659846342013
GPR[EPVS]-1659846342013
========
for(int i=0;i<getNumArtificialVariables();i++){
outBlock[outIndex++]=block[i*jWidth+jColumn];
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846342014
GPR[SPVAP]-1659846342014
GPR[EPVAP]-1659846343101
GPR[EPVS]-1659846343101
========
for(int i=0;i<getNumArtificialVariables();i++){
block[i*jWidth+jColumn]=mBlock[mIndex++];
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846343103
GPR[SPVAP]-1659846343103
GPR[EPVAP]-1659846344198
GPR[EPVS]-1659846344198
========
for(int i=0;i<getNumArtificialVariables();i++){
polynomials[j+4][i]=16*(yMidDots[j][i]+0.5*i*polynomials[j+2][i]-2*0.5*i*polynomials[j][i]);
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846344201
GPR[SPVAP]-1659846344201
GPR[EPVAP]-1659846345284
GPR[EPVS]-1659846345284
========
for(int i=0;i<getNumArtificialVariables();i++){
if(epsilon>=1){
robustnessWeights[i]=0;
}else {
 final double 1-epsilon*arg=1-epsilon*arg;
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846345286
GPR[SPVAP]-1659846345286
GPR[EPVAP]-1659846346241
GPR[EPVS]-1659846346241
========
if(i>=polynomials.length){
i--;
}
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846346244
GPR[SPVAP]-1659846346244
GPR[EPVAP]-1659846347317
GPR[EPVS]-1659846347317
========
for(int i=0;i<getNumArtificialVariables();i++){
buf[i]=NEGATIVE_VAR_COLUMN_LABEL.charAt(i);
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846347320
GPR[SPVAP]-1659846347320
GPR[EPVAP]-1659846348384
GPR[EPVS]-1659846348384
========
for(int i=0;i<getNumArtificialVariables();i++){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846348385
GPR[SPVAP]-1659846348385
GPR[EPVAP]-1659846349466
GPR[EPVS]-1659846349466
========
for(int i=0;i<getNumArtificialVariables();i++){
if(buf[i]=='.'){
sig+=(400-j)%4;
leading=false;
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846349467
GPR[SPVAP]-1659846349467
GPR[EPVAP]-1659846350536
GPR[EPVS]-1659846350536
========
for(int i=0;i<getNumArtificialVariables();i++){
buf[i]=NEGATIVE_VAR_COLUMN_LABEL.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-j)%4;
leading=false;
}

int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846350537
GPR[SPVAP]-1659846350537
GPR[EPVAP]-1659846351621
GPR[EPVS]-1659846351621
========
for(int i=0;i<getNumArtificialVariables();i++){
if(j==(numSlackVariables/2)*4){
sp=i;
break;
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846351624
GPR[SPVAP]-1659846351624
GPR[EPVAP]-1659846352712
GPR[EPVS]-1659846352712
========
for(int i=0;i<getNumArtificialVariables();i++){
buf[i]=NEGATIVE_VAR_COLUMN_LABEL.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-j)%4;
leading=false;
}
if(j==(numSlackVariables/2)*4){
sp=i;
break;
}

int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846352714
GPR[SPVAP]-1659846352714
GPR[EPVAP]-1659846353799
GPR[EPVS]-1659846353799
========
for(int i=0;i<getNumArtificialVariables();i++){
buf[i]=NEGATIVE_VAR_COLUMN_LABEL.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846353800
GPR[SPVAP]-1659846353800
GPR[EPVAP]-1659846354873
GPR[EPVS]-1659846354873
========
for(int i=0;i<getNumArtificialVariables();i++){
buf[i]=NEGATIVE_VAR_COLUMN_LABEL.charAt(i);
if(buf[i]=='.'){
sig+=(400-j)%4;
leading=false;
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846354874
GPR[SPVAP]-1659846354874
GPR[EPVAP]-1659846355961
GPR[EPVS]-1659846355961
========
for(int i=0;i<getNumArtificialVariables();i++){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-j)%4;
leading=false;
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846355962
GPR[SPVAP]-1659846355962
GPR[EPVAP]-1659846357045
GPR[EPVS]-1659846357045
========
for(int i=0;i<getNumArtificialVariables();i++){
buf[i]=NEGATIVE_VAR_COLUMN_LABEL.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-j)%4;
leading=false;
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846357046
GPR[SPVAP]-1659846357046
GPR[EPVAP]-1659846358141
GPR[EPVS]-1659846358141
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=numSlackVariables;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846358143
GPR[SPVAP]-1659846358143
GPR[EPVAP]-1659846360125
GPR[SPVATF]-1659846360125
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846362041
GPR[EPVS]-1659846362041
========
epsilon=epsilon*epsilon;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846362042
GPR[SPVAP]-1659846362042
GPR[EPVAP]-1659846363106
GPR[EPVS]-1659846363106
========
numSlackVariables=numSlackVariables-(numSlackVariables-numSlackVariables)/numSlackVariables*numSlackVariables-n;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846363107
GPR[SPVAP]-1659846363107
GPR[EPVAP]-1659846364175
GPR[EPVS]-1659846364175
========
i=numSlackVariables+(numSlackVariables-numSlackVariables)/numSlackVariables;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846364176
GPR[SPVAP]-1659846364176
GPR[EPVAP]-1659846365232
GPR[EPVS]-1659846365232
========
col=numSlackVariables;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846365234
GPR[SPVAP]-1659846365234
GPR[EPVAP]-1659846366323
GPR[EPVS]-1659846366323
========
j=numSlackVariables-1+numSlackVariables;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846366324
GPR[SPVAP]-1659846366324
GPR[EPVAP]-1659846367399
GPR[EPVS]-1659846367399
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
col-=i;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846367400
GPR[SPVAP]-1659846367400
GPR[EPVAP]-1659846368480
GPR[EPVS]-1659846368480
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
numSlackVariables+=i;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846368481
GPR[SPVAP]-1659846368481
GPR[EPVAP]-1659846369552
GPR[EPVS]-1659846369552
========
for(int i=0;i<getNumArtificialVariables();i++){
mt[i]=(int)((serialVersionUID^((serialVersionUID^(l1>>30))*1566083941l))-i&0xffffffffL);
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846369555
GPR[SPVAP]-1659846369555
GPR[EPVAP]-1659846370646
GPR[EPVS]-1659846370647
========
for(int i=0;i<getNumArtificialVariables();i++){
mt[i]=(int)((serialVersionUID^((serialVersionUID^(l1>>30))*1566083941l))-i&0xffffffffL);
i++;
if(i>=N){
mt[0]=mt[N-1];
i=1;
}

int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846370648
GPR[SPVAP]-1659846370648
GPR[EPVAP]-1659846371729
GPR[EPVS]-1659846371729
========
for(int i=0;i<getNumArtificialVariables();i++){
i++;
long col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846371731
GPR[SPVAP]-1659846371731
GPR[EPVAP]-1659846372811
GPR[EPVS]-1659846372811
========
for(int i=0;i<getNumArtificialVariables();i++){
if(i>=N){
mt[0]=mt[N-1];
i=1;
}
long col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846372812
GPR[SPVAP]-1659846372812
GPR[EPVAP]-1659846373904
GPR[EPVS]-1659846373904
========
for(int i=0;i<getNumArtificialVariables();i++){
i++;
if(i>=N){
mt[0]=mt[N-1];
i=1;
}
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846373905
GPR[SPVAP]-1659846373905
GPR[EPVAP]-1659846374972
GPR[EPVS]-1659846374972
========
for(int i=0;i<getNumArtificialVariables();i++){
i++;
if(i>=N){
mt[0]=mt[N-1];
i=1;
}
long col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846374973
GPR[SPVAP]-1659846374973
GPR[EPVAP]-1659846376052
GPR[EPVS]-1659846376052
========
for(int i=0;i<getNumArtificialVariables();i++){
after[i]+=previous[i]+scaled[i];
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846376053
GPR[SPVAP]-1659846376053
GPR[EPVAP]-1659846377141
GPR[EPVS]-1659846377141
========
epsilon=FastMath.hypot(f,epsilon);
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846377143
GPR[SPVAP]-1659846377143
GPR[EPVAP]-1659846378214
GPR[EPVS]-1659846378214
========
epsilon=f/epsilon;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846378216
GPR[SPVAP]-1659846378216
GPR[EPVAP]-1659846379301
GPR[EPVS]-1659846379301
========
epsilon=epsilon/epsilon;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846379302
GPR[SPVAP]-1659846379302
GPR[EPVAP]-1659846380407
GPR[EPVS]-1659846380407
========
epsilon+=epsilon*epsilon;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846380411
GPR[SPVAP]-1659846380411
GPR[EPVAP]-1659846381481
GPR[EPVS]-1659846381481
========
epsilon+=1.0-epsilon;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846381485
GPR[SPVAP]-1659846381485
GPR[EPVAP]-1659846382550
GPR[EPVS]-1659846382550
========
tableau=diagC.scalarMultiply(restrictToNonNegative?0:epsilon*epsilon).add(square(tableau).scalarMultiply(epsilon)).add((times(diagC,square(tableau).multiply(tableau))).scalarMultiply(epsilon));
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846382552
GPR[SPVAP]-1659846382552
GPR[EPVAP]-1659846383636
GPR[EPVS]-1659846383636
========
tableau=sqrt(tableau);
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846383638
GPR[SPVAP]-1659846383638
GPR[EPVAP]-1659846384703
GPR[EPVS]-1659846384703
========
matrix[1][numSlackVariables]=epsilon;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846384706
GPR[SPVAP]-1659846384706
GPR[EPVAP]-1659846385784
GPR[EPVS]-1659846385784
========
matrix[2][numSlackVariables]=epsilon-epsilon;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846385785
GPR[SPVAP]-1659846385785
GPR[EPVAP]-1659846386853
GPR[EPVS]-1659846386853
========
matrix[3][numSlackVariables]=epsilon-epsilon;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846386854
GPR[SPVAP]-1659846386854
GPR[EPVAP]-1659846387924
GPR[EPVS]-1659846387924
========
numSlackVariables=j++;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846387927
GPR[SPVAP]-1659846387927
GPR[EPVAP]-1659846389009
GPR[EPVS]-1659846389009
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
epsilon=epsilon*epsilon;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846389011
GPR[SPVAP]-1659846389011
GPR[EPVAP]-1659846390079
GPR[EPVS]-1659846390079
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
epsilon=epsilon*epsilon-epsilon;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846390080
GPR[SPVAP]-1659846390080
GPR[EPVAP]-1659846391157
GPR[EPVS]-1659846391157
========
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
numSlackVariables++;
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846391161
GPR[SPVAP]-1659846391161
GPR[EPVAP]-1659846392249
GPR[EPVS]-1659846392249
========
checkRowIndex(numSlackVariables);
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846392250
GPR[SPVAP]-1659846392250
GPR[EPVAP]-1659846393317
GPR[EPVS]-1659846393317
========
checkColumnIndex(j);
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659846393319
GPR[SPVAP]-1659846393319
GPR[EPVAP]-1659846394389
GPR[EPVS]-1659846394389
GPR[ESUN]-1659846394394
GPR[SSUN]-1659846394394
org.apache.commons.math3.optimization.linear.SimplexTableau,352
GPR[ESUN]-1659846394935
GPR[SSUN]-1659846394935
org.apache.commons.math3.optimization.linear.SimplexTableau,353
GPR[ESUN]-1659846395222
GPR[SSUN]-1659846395222
org.apache.commons.math3.optimization.linear.SimplexTableau,354
GPR[ESUN]-1659846395521
GPR[SSUN]-1659846395521
org.apache.commons.math3.optimization.linear.SimplexTableau,355
GPR[ESUN]-1659846395830
GPR[SSUN]-1659846395830
org.apache.commons.math3.optimization.linear.SimplexTableau,356
GPR[ESUN]-1659846396130
GPR[SSUN]-1659846396130
org.apache.commons.math3.optimization.linear.SimplexTableau,361
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846400210
GPR[SPVAP]-1659846400210
GPR[EPVAP]-1659846407067
GPR[SPVATF]-1659846407067
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846409027
GPR[EPVS]-1659846409027
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.add((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846409029
GPR[SPVAP]-1659846409029
GPR[EPVAP]-1659846410113
GPR[EPVS]-1659846410113
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.add((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846410114
GPR[SPVAP]-1659846410114
GPR[EPVAP]-1659846411205
GPR[EPVS]-1659846411205
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
subVector[d]=i;
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846411206
GPR[SPVAP]-1659846411206
GPR[EPVAP]-1659846412285
GPR[EPVS]-1659846412285
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.append((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846412287
GPR[SPVAP]-1659846412287
GPR[EPVAP]-1659846413392
GPR[EPVS]-1659846413392
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(numSlackVariables==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846413394
GPR[SPVAP]-1659846413394
GPR[EPVAP]-1659846414461
GPR[EPVS]-1659846414461
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
res[index]=(double)i/numSlackVariables;
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846414462
GPR[SPVAP]-1659846414462
GPR[EPVAP]-1659846415574
GPR[EPVS]-1659846415574
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(numSlackVariables==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
res[index]=(double)i/numSlackVariables;

columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846415575
GPR[SPVAP]-1659846415575
GPR[EPVAP]-1659846416657
GPR[EPVS]-1659846416657
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.get((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846416658
GPR[SPVAP]-1659846416658
GPR[EPVAP]-1659846418631
GPR[SPVATF]-1659846418631
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846420533
GPR[EPVS]-1659846420533
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.get((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846420534
GPR[SPVAP]-1659846420534
GPR[EPVAP]-1659846422507
GPR[SPVATF]-1659846422507
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846424425
GPR[EPVS]-1659846424425
========
for(int i=columnsToDrop.size()-1;j>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846424427
GPR[SPVAP]-1659846424427
GPR[EPVAP]-1659846425495
GPR[EPVS]-1659846425495
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.log((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846425497
GPR[SPVAP]-1659846425497
GPR[EPVAP]-1659846426582
GPR[EPVS]-1659846426582
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.log((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846426583
GPR[SPVAP]-1659846426583
GPR[EPVAP]-1659846427682
GPR[EPVS]-1659846427682
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
return ;
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846427683
GPR[SPVAP]-1659846427683
GPR[EPVAP]-1659846428773
GPR[EPVS]-1659846428773
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.checkFinite((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846428774
GPR[SPVAP]-1659846428774
GPR[EPVAP]-1659846429832
GPR[EPVS]-1659846429832
========
for(int i=columnsToDrop.size()-1;j>=numSlackVariables;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846429834
GPR[SPVAP]-1659846429834
GPR[EPVAP]-1659846430899
GPR[EPVS]-1659846430899
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.writeDouble((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846430901
GPR[SPVAP]-1659846430901
GPR[EPVAP]-1659846431996
GPR[EPVS]-1659846431996
========
this.vmove(i,numSlackVariables);
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846431998
GPR[SPVAP]-1659846431998
GPR[EPVAP]-1659846433080
GPR[EPVS]-1659846433080
========
++numSlackVariables;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846433081
GPR[SPVAP]-1659846433081
GPR[EPVAP]-1659846434155
GPR[EPVS]-1659846434155
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.writeDouble((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846434157
GPR[SPVAP]-1659846434157
GPR[EPVAP]-1659846435232
GPR[EPVS]-1659846435232
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
sampleStats.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846435234
GPR[SPVAP]-1659846435234
GPR[EPVAP]-1659846436312
GPR[EPVS]-1659846436312
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.addValue((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846436313
GPR[SPVAP]-1659846436313
GPR[EPVAP]-1659846437381
GPR[EPVS]-1659846437381
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.getEntry((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846437383
GPR[SPVAP]-1659846437383
GPR[EPVAP]-1659846438487
GPR[EPVS]-1659846438487
========
for(int i=columnsToDrop.size()-1;j>=0;i--){
columnLabels.writeDouble((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846438488
GPR[SPVAP]-1659846438488
GPR[EPVAP]-1659846439566
GPR[EPVS]-1659846439566
========
for(int i=columnsToDrop.size()-1;j>=numSlackVariables;i--){
columnLabels.writeDouble((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846439567
GPR[SPVAP]-1659846439567
GPR[EPVAP]-1659846440648
GPR[EPVS]-1659846440649
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.increment((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846440650
GPR[SPVAP]-1659846440650
GPR[EPVAP]-1659846441724
GPR[EPVS]-1659846441724
========
f=FastMath.round(epsilon);
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846441726
GPR[SPVAP]-1659846441726
GPR[EPVAP]-1659846442809
GPR[EPVS]-1659846442809
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.getEntry((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846442811
GPR[SPVAP]-1659846442811
GPR[EPVAP]-1659846443879
GPR[EPVS]-1659846443879
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables*numSlackVariables/2;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846443882
GPR[SPVAP]-1659846443882
GPR[EPVAP]-1659846445882
GPR[SPVATF]-1659846445882
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846447844
GPR[EPVS]-1659846447844
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.sqrt((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846447845
GPR[SPVAP]-1659846447845
GPR[EPVAP]-1659846448940
GPR[EPVS]-1659846448940
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.copyOf((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846448942
GPR[SPVAP]-1659846448942
GPR[EPVAP]-1659846450017
GPR[EPVS]-1659846450017
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.abs((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846450019
GPR[SPVAP]-1659846450019
GPR[EPVAP]-1659846451091
GPR[EPVS]-1659846451091
========
for(int i=columnsToDrop.size()-1;i>=maxUlps;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846451094
GPR[SPVAP]-1659846451094
GPR[EPVAP]-1659846453084
GPR[SPVATF]-1659846453084
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846454991
GPR[EPVS]-1659846454991
========
if((numSlackVariables+i)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846454992
GPR[SPVAP]-1659846454992
GPR[EPVAP]-1659846456094
GPR[EPVS]-1659846456094
========
numSlackVariables=i;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846456095
GPR[SPVAP]-1659846456095
GPR[EPVAP]-1659846457172
GPR[EPVS]-1659846457172
========
for(int i=columnsToDrop.size()-1;i>0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846457174
GPR[SPVAP]-1659846457174
GPR[EPVAP]-1659846459137
GPR[SPVATF]-1659846459137
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846461025
GPR[EPVS]-1659846461025
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.abs((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846461027
GPR[SPVAP]-1659846461027
GPR[EPVAP]-1659846462114
GPR[EPVS]-1659846462114
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
outline[i]=new Vector2D[i];
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846462115
GPR[SPVAP]-1659846462115
GPR[EPVAP]-1659846463193
GPR[EPVS]-1659846463193
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.sqrt((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846463196
GPR[SPVAP]-1659846463196
GPR[EPVAP]-1659846464312
GPR[EPVS]-1659846464312
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.value((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846464313
GPR[SPVAP]-1659846464313
GPR[EPVAP]-1659846465384
GPR[EPVS]-1659846465384
========
numSlackVariables=numSlackVariables;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846465386
GPR[SPVAP]-1659846465386
GPR[EPVAP]-1659846466492
GPR[EPVS]-1659846466492
========
i=numSlackVariables;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846466493
GPR[SPVAP]-1659846466493
GPR[EPVAP]-1659846467574
GPR[EPVS]-1659846467574
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.subtract((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846467575
GPR[SPVAP]-1659846467575
GPR[EPVAP]-1659846468650
GPR[EPVS]-1659846468650
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.multiply((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846468651
GPR[SPVAP]-1659846468651
GPR[EPVAP]-1659846469712
GPR[EPVS]-1659846469712
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.divide((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846469713
GPR[SPVAP]-1659846469713
GPR[EPVAP]-1659846470791
GPR[EPVS]-1659846470791
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.value((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846470793
GPR[SPVAP]-1659846470793
GPR[EPVAP]-1659846471856
GPR[EPVS]-1659846471856
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
mapper.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846471858
GPR[SPVAP]-1659846471858
GPR[EPVAP]-1659846474331
GPR[EPVS]-1659846474331
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
components=new ArrayList<ExpandableStatefulODE.SecondaryComponent>();
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846474332
GPR[SPVAP]-1659846474332
GPR[EPVAP]-1659846475401
GPR[EPVS]-1659846475401
========
for(int i=columnsToDrop.size()-1;k>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846475403
GPR[SPVAP]-1659846475403
GPR[EPVAP]-1659846476485
GPR[EPVS]-1659846476485
========
for(int i=columnsToDrop.size()-1;length>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846476488
GPR[SPVAP]-1659846476488
GPR[EPVAP]-1659846477571
GPR[EPVS]-1659846477571
========
i++;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846477574
GPR[SPVAP]-1659846477574
GPR[EPVAP]-1659846478637
GPR[EPVS]-1659846478637
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
i+=numSlackVariables;
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846478638
GPR[SPVAP]-1659846478638
GPR[EPVAP]-1659846480632
GPR[SPVATF]-1659846480632
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846482534
GPR[EPVS]-1659846482534
========
checkDimension(numSlackVariables,matrix[0]);
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846482536
GPR[SPVAP]-1659846482536
GPR[EPVAP]-1659846483608
GPR[EPVS]-1659846483608
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
j+=numSlackVariables;
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846483609
GPR[SPVAP]-1659846483609
GPR[EPVAP]-1659846484679
GPR[EPVS]-1659846484679
========
for(int i=columnsToDrop.size()-1;i>=result.exp;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846484681
GPR[SPVAP]-1659846484681
GPR[EPVAP]-1659846485774
GPR[EPVS]-1659846485774
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
out[ranks[i].getPosition()]=numSlackVariables;
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846485776
GPR[SPVAP]-1659846485776
GPR[EPVAP]-1659846486884
GPR[EPVS]-1659846486884
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.unboundedToBounded((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846486886
GPR[SPVAP]-1659846486886
GPR[EPVAP]-1659846487956
GPR[EPVS]-1659846487956
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.boundedToUnbounded((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846487957
GPR[SPVAP]-1659846487957
GPR[EPVAP]-1659846489018
GPR[EPVS]-1659846489018
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(NEGATIVE_VAR_COLUMN_LABEL.length()==1){
hex="0"+NEGATIVE_VAR_COLUMN_LABEL;
}
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846489019
GPR[SPVAP]-1659846489019
GPR[EPVAP]-1659846490092
GPR[EPVS]-1659846490092
========
for(int i=columnsToDrop.size()-1;i>=rounded.exp;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846490094
GPR[SPVAP]-1659846490094
GPR[EPVAP]-1659846491189
GPR[EPVS]-1659846491189
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.subtract((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846491190
GPR[SPVAP]-1659846491190
GPR[EPVAP]-1659846492269
GPR[EPVS]-1659846492270
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
polynomials[i]=new double[numSlackVariables];
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846492272
GPR[SPVAP]-1659846492272
GPR[EPVAP]-1659846493359
GPR[EPVS]-1659846493359
========
for(int i=columnsToDrop.size()-1;i>=rawData.length;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846493362
GPR[SPVAP]-1659846493362
GPR[EPVAP]-1659846494433
GPR[EPVS]-1659846494433
========
numSlackVariables-=i;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846494434
GPR[SPVAP]-1659846494434
GPR[EPVAP]-1659846495505
GPR[EPVS]-1659846495505
========
for(int i=columnsToDrop.size()-1;k>=numSlackVariables;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846495508
GPR[SPVAP]-1659846495508
GPR[EPVAP]-1659846496591
GPR[EPVS]-1659846496591
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.charAt((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846496592
GPR[SPVAP]-1659846496592
GPR[EPVAP]-1659846497661
GPR[EPVS]-1659846497661
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(NEGATIVE_VAR_COLUMN_LABEL.charAt(i)=='-'){
negative=true;
continue;
}
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846497662
GPR[SPVAP]-1659846497662
GPR[EPVAP]-1659846498740
GPR[EPVS]-1659846498740
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
bp[i][k]=0;
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846498742
GPR[SPVAP]-1659846498742
GPR[EPVAP]-1659846499819
GPR[EPVS]-1659846499819
========
epsilon=epsilon*epsilon;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846499822
GPR[SPVAP]-1659846499822
GPR[EPVAP]-1659846500933
GPR[EPVS]-1659846500933
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846500935
GPR[SPVAP]-1659846500935
GPR[EPVAP]-1659846502030
GPR[EPVS]-1659846502030
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
lsb=FastMath.min(i,exponent(serialVersionUID)+computeLSB(mantissa(serialVersionUID)));
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846502033
GPR[SPVAP]-1659846502033
GPR[EPVAP]-1659846503124
GPR[EPVS]-1659846503124
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
iubd=i+1;
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846503126
GPR[SPVAP]-1659846503127
GPR[EPVAP]-1659846504201
GPR[EPVS]-1659846504201
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(matrix[i]==null){
throw new NullArgumentException();
}
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846504203
GPR[SPVAP]-1659846504203
GPR[EPVAP]-1659846505270
GPR[EPVS]-1659846505270
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(xvalI.length!=i){
throw new DimensionMismatchException(xvalI.length,i);
}
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846505271
GPR[SPVAP]-1659846505271
GPR[EPVAP]-1659846506344
GPR[EPVS]-1659846506344
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(matrix[i]==null){
throw new NullArgumentException();
}
if(xvalI.length!=i){
throw new DimensionMismatchException(xvalI.length,i);
}

columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846506345
GPR[SPVAP]-1659846506345
GPR[EPVAP]-1659846507423
GPR[EPVS]-1659846507423
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
se[i]=Double.NaN;
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846507425
GPR[SPVAP]-1659846507425
GPR[EPVAP]-1659846508524
GPR[EPVS]-1659846508524
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
iubd=-i-1;
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846508525
GPR[SPVAP]-1659846508525
GPR[EPVAP]-1659846509608
GPR[EPVS]-1659846509608
========
if(i<0){
i=-i-2;
}
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846509610
GPR[SPVAP]-1659846509610
GPR[EPVAP]-1659846510681
GPR[EPVS]-1659846510681
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
t=new AdamsNordsieckTransformer(i);
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846510682
GPR[SPVAP]-1659846510682
GPR[EPVAP]-1659846511794
GPR[EPVS]-1659846511794
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
current=loop[i];
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846511797
GPR[SPVAP]-1659846511797
GPR[EPVAP]-1659846512861
GPR[EPVS]-1659846512861
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
tableau.setEntry(i,i,1.0);
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846512863
GPR[SPVAP]-1659846512863
GPR[EPVAP]-1659846514840
GPR[SPVATF]-1659846514840
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846516788
GPR[EPVS]-1659846516788
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
tableau.setEntry(i,i,1.0);
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846516790
GPR[SPVAP]-1659846516790
GPR[EPVAP]-1659846518777
GPR[SPVATF]-1659846518777
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846520673
GPR[EPVS]-1659846520673
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
boundDifference[i]=upperBound[i]-lowerBound[i];
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846520675
GPR[SPVAP]-1659846520675
GPR[EPVAP]-1659846521739
GPR[EPVS]-1659846521739
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='0'&&buf[i]<='9'&&i<numSlackVariables){
buf[i]='0';
}
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846521741
GPR[SPVAP]-1659846521741
GPR[EPVAP]-1659846522805
GPR[EPVS]-1659846522805
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(i>=numSlackVariables){
break;
}
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846522807
GPR[SPVAP]-1659846522807
GPR[EPVAP]-1659846524765
GPR[SPVATF]-1659846524765
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846526672
GPR[EPVS]-1659846526672
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
tableau.setColumn(numSlackVariables,randn(numSlackVariables));
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846526673
GPR[SPVAP]-1659846526673
GPR[EPVAP]-1659846527756
GPR[EPVS]-1659846527756
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(i>=numSlackVariables){
break;
}
tableau.setColumn(numSlackVariables,randn(numSlackVariables));

columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846527757
GPR[SPVAP]-1659846527757
GPR[EPVAP]-1659846528834
GPR[EPVS]-1659846528834
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
if(i>=numSlackVariables){
break;
}
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846528836
GPR[SPVAP]-1659846528836
GPR[EPVAP]-1659846530809
GPR[SPVATF]-1659846530809
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846532718
GPR[EPVS]-1659846532718
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(i>=numSlackVariables){
break;
}
columnLabels.add((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846532719
GPR[SPVAP]-1659846532719
GPR[EPVAP]-1659846533804
GPR[EPVS]-1659846533804
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
if(i>=numSlackVariables){
break;
}
columnLabels.add((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846533805
GPR[SPVAP]-1659846533805
GPR[EPVAP]-1659846534889
GPR[EPVS]-1659846534889
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
y[index]=yval[i];
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846534893
GPR[SPVAP]-1659846534893
GPR[EPVAP]-1659846535983
GPR[EPVS]-1659846535983
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
xAug[i][0]=1.0;
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846535985
GPR[SPVAP]-1659846535985
GPR[EPVAP]-1659846537085
GPR[EPVS]-1659846537085
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(FastMath.abs(tableau.getEntry(i,i))<Precision.SAFE_MIN){
throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
}
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846537087
GPR[SPVAP]-1659846537087
GPR[EPVAP]-1659846538160
GPR[EPVS]-1659846538160
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
minRatio=tableau.getEntry(i,tableau.getWidth()-1)/tableau.getEntry(i,numSlackVariables);
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846538162
GPR[SPVAP]-1659846538162
GPR[EPVAP]-1659846539226
GPR[EPVS]-1659846539226
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
minRatioPositions=new ArrayList<Integer>();
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846539227
GPR[SPVAP]-1659846539227
GPR[EPVAP]-1659846540365
GPR[EPVS]-1659846540365
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
minRatio=tableau.getEntry(i,tableau.getWidth()-1)/tableau.getEntry(i,numSlackVariables);
minRatioPositions=new ArrayList<Integer>();

columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846540367
GPR[SPVAP]-1659846540367
GPR[EPVAP]-1659846541442
GPR[EPVS]-1659846541442
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
cost+=residualsWeights[i]*epsilon;
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846541443
GPR[SPVAP]-1659846541443
GPR[EPVAP]-1659846542524
GPR[EPVS]-1659846542524
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
if(FastMath.abs(tableau.getEntry(i,i))<Precision.SAFE_MIN){
throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
}
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846542526
GPR[SPVAP]-1659846542526
GPR[EPVAP]-1659846543616
GPR[EPVS]-1659846543616
========
for(int i=columnsToDrop.size()-1;i>=Math.max(numSlackVariables,numSlackVariables);i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846543618
GPR[SPVAP]-1659846543618
GPR[EPVAP]-1659846547247
GPR[SPVATF]-1659846547247
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846549145
GPR[EPVS]-1659846549145
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.get(findBin(epsilon)).addValue(epsilon);
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846549147
GPR[SPVAP]-1659846549147
GPR[EPVAP]-1659846550221
GPR[EPVS]-1659846550221
========
epsilon=epsilon;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846550226
GPR[SPVAP]-1659846550226
GPR[EPVAP]-1659846551308
GPR[EPVS]-1659846551308
========
for(int i=columnsToDrop.size()-1;idxStep>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846551310
GPR[SPVAP]-1659846551310
GPR[EPVAP]-1659846552380
GPR[EPVS]-1659846552380
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.increment((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846552382
GPR[SPVAP]-1659846552382
GPR[EPVAP]-1659846553447
GPR[EPVS]-1659846553447
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
y[i]=yval[index];
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846553452
GPR[SPVAP]-1659846553452
GPR[EPVAP]-1659846554528
GPR[EPVS]-1659846554528
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
y[i]=yval[index];
y[index]=yval[i];

columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846554529
GPR[SPVAP]-1659846554529
GPR[EPVAP]-1659846555627
GPR[EPVS]-1659846555627
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
y[index]=yval[i];
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846555628
GPR[SPVAP]-1659846555628
GPR[EPVAP]-1659846556700
GPR[EPVS]-1659846556700
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(point[j]<lower[j]){
overshoot=scale[j]*(lower[j]-point[j]);
}else if(point[j]>upper[j]){
overshoot=scale[j]*(point[j]-upper[j]);
}else {
overshoot=0;
}
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846556701
GPR[SPVAP]-1659846556701
GPR[EPVAP]-1659846557781
GPR[EPVS]-1659846557781
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(ltI[i]<=epsilon){
throw new NonPositiveDefiniteMatrixException(matrix[i][i],i,epsilon);
}
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846557783
GPR[SPVAP]-1659846557783
GPR[EPVAP]-1659846558864
GPR[EPVS]-1659846558864
========
for(int i=columnsToDrop.size()-1;r>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846558868
GPR[SPVAP]-1659846558868
GPR[EPVAP]-1659846559964
GPR[EPVS]-1659846559964
========
if(d.length<i+numSlackVariables){
throw new NumberIsTooLargeException(pos+size,d.length,true);
}
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846559965
GPR[SPVAP]-1659846559965
GPR[EPVAP]-1659846561129
GPR[EPVS]-1659846561129
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='0'&&buf[i]<='9'&&i<numSlackVariables){
buf[i]='0';
}
columnLabels.charAt((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846561132
GPR[SPVAP]-1659846561132
GPR[EPVAP]-1659846562229
GPR[EPVS]-1659846562229
========
for(int i=columnsToDrop.size()-1;r>=numSlackVariables;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}

========
MM Copying to MM
GPR[SPVS]-1659846562231
GPR[SPVAP]-1659846562231
GPR[EPVAP]-1659846563306
GPR[EPVS]-1659846563306
GPR[ESUN]-1659846563307
GPR[SSUN]-1659846563307
org.apache.commons.math3.optimization.linear.SimplexTableau,362
GPR[ESUN]-1659846563827
GPR[SSUN]-1659846563827
org.apache.commons.math3.optimization.linear.SimplexTableau,365
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846568077
GPR[SPVAP]-1659846568077
GPR[EPVAP]-1659846573846
GPR[SPVATF]-1659846573846
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846575799
GPR[EPVS]-1659846575799
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.add((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846575800
GPR[SPVAP]-1659846575800
GPR[EPVAP]-1659846576890
GPR[EPVS]-1659846576890
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.add((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846576891
GPR[SPVAP]-1659846576891
GPR[EPVAP]-1659846577979
GPR[EPVS]-1659846577979
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.append((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846577981
GPR[SPVAP]-1659846577981
GPR[EPVAP]-1659846579065
GPR[EPVS]-1659846579065
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
subVector[d]=i;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846579072
GPR[SPVAP]-1659846579072
GPR[EPVAP]-1659846580141
GPR[EPVS]-1659846580141
========
for(int i=columnsToDrop.size()-1;i>=numArtificialVariables;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846580143
GPR[SPVAP]-1659846580143
GPR[EPVAP]-1659846582134
GPR[SPVATF]-1659846582134
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846584049
GPR[EPVS]-1659846584049
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.get((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846584050
GPR[SPVAP]-1659846584050
GPR[EPVAP]-1659846586022
GPR[SPVATF]-1659846586022
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846587977
GPR[EPVS]-1659846587977
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.get((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846587979
GPR[SPVAP]-1659846587979
GPR[EPVAP]-1659846589961
GPR[SPVATF]-1659846589961
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846591865
GPR[EPVS]-1659846591865
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(numSlackVariables==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846591867
GPR[SPVAP]-1659846591867
GPR[EPVAP]-1659846592956
GPR[EPVS]-1659846592956
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
res[index]=(double)i/numSlackVariables;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846592958
GPR[SPVAP]-1659846592958
GPR[EPVAP]-1659846594029
GPR[EPVS]-1659846594029
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(numSlackVariables==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
res[index]=(double)i/numSlackVariables;

columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846594030
GPR[SPVAP]-1659846594030
GPR[EPVAP]-1659846595142
GPR[EPVS]-1659846595142
========
setSeed(19650218);
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846595144
GPR[SPVAP]-1659846595144
GPR[EPVAP]-1659846596233
GPR[EPVS]-1659846596233
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.log((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846596235
GPR[SPVAP]-1659846596235
GPR[EPVAP]-1659846597304
GPR[EPVS]-1659846597305
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.log((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846597306
GPR[SPVAP]-1659846597306
GPR[EPVAP]-1659846598421
GPR[EPVS]-1659846598421
========
columnLabels.add("RHS");
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846598423
GPR[SPVAP]-1659846598423
GPR[EPVAP]-1659846600366
GPR[SPVATF]-1659846600366
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846602294
GPR[EPVS]-1659846602294
========
columnLabels.add("RHS");
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.add((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846602295
GPR[SPVAP]-1659846602295
GPR[EPVAP]-1659846603391
GPR[EPVS]-1659846603391
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.writeDouble((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846603393
GPR[SPVAP]-1659846603393
GPR[EPVAP]-1659846604467
GPR[EPVS]-1659846604467
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.checkFinite((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846604468
GPR[SPVAP]-1659846604468
GPR[EPVAP]-1659846605546
GPR[EPVS]-1659846605546
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.getEntry((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846605547
GPR[SPVAP]-1659846605547
GPR[EPVAP]-1659846606605
GPR[EPVS]-1659846606605
========
copyArray(constraints.get(i).getCoefficients().toArray(),matrix.getDataRef()[numArtificialVariables]);
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846606608
GPR[SPVAP]-1659846606608
GPR[EPVAP]-1659846607673
GPR[EPVS]-1659846607673
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.writeDouble((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846607675
GPR[SPVAP]-1659846607675
GPR[EPVAP]-1659846608776
GPR[EPVS]-1659846608776
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
sampleStats.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846608778
GPR[SPVAP]-1659846608778
GPR[EPVAP]-1659846609861
GPR[EPVS]-1659846609861
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.addValue((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846609862
GPR[SPVAP]-1659846609862
GPR[EPVAP]-1659846610925
GPR[EPVS]-1659846610925
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.getEntry((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846610927
GPR[SPVAP]-1659846610927
GPR[EPVAP]-1659846612011
GPR[EPVS]-1659846612011
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
mapper.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846612014
GPR[SPVAP]-1659846612014
GPR[EPVAP]-1659846613094
GPR[EPVS]-1659846613094
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
components=new ArrayList<ExpandableStatefulODE.SecondaryComponent>();
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846613095
GPR[SPVAP]-1659846613095
GPR[EPVAP]-1659846614200
GPR[EPVS]-1659846614200
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.sqrt((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846614202
GPR[SPVAP]-1659846614202
GPR[EPVAP]-1659846615301
GPR[EPVS]-1659846615301
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.increment((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846615303
GPR[SPVAP]-1659846615303
GPR[EPVAP]-1659846616413
GPR[EPVS]-1659846616413
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.copyOf((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846616423
GPR[SPVAP]-1659846616423
GPR[EPVAP]-1659846618943
GPR[EPVS]-1659846618943
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.abs((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846618944
GPR[SPVAP]-1659846618944
GPR[EPVAP]-1659846620036
GPR[EPVS]-1659846620036
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
outline[i]=new Vector2D[i];
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846620038
GPR[SPVAP]-1659846620038
GPR[EPVAP]-1659846621113
GPR[EPVS]-1659846621113
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.setIndex((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846621114
GPR[SPVAP]-1659846621114
GPR[EPVAP]-1659846622189
GPR[EPVS]-1659846622189
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
return null;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846622190
GPR[SPVAP]-1659846622191
GPR[EPVAP]-1659846623281
GPR[EPVS]-1659846623281
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
if((numSlackVariables+i)>internalArray.length){
expandTo(startIndex+i);
}
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846623283
GPR[SPVAP]-1659846623283
GPR[EPVAP]-1659846624380
GPR[EPVS]-1659846624380
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.abs((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846624382
GPR[SPVAP]-1659846624382
GPR[EPVAP]-1659846625469
GPR[EPVS]-1659846625469
========
for(int i=columnsToDrop.size()-1;i>0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846625471
GPR[SPVAP]-1659846625471
GPR[EPVAP]-1659846627473
GPR[SPVATF]-1659846627474
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846629442
GPR[EPVS]-1659846629442
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
return ;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846629444
GPR[SPVAP]-1659846629444
GPR[EPVAP]-1659846630521
GPR[EPVS]-1659846630521
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.value((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846630523
GPR[SPVAP]-1659846630523
GPR[EPVAP]-1659846631589
GPR[EPVS]-1659846631589
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
out[ranks[i].getPosition()]=numArtificialVariables;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846631592
GPR[SPVAP]-1659846631592
GPR[EPVAP]-1659846632700
GPR[EPVS]-1659846632700
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.subtract((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846632703
GPR[SPVAP]-1659846632703
GPR[EPVAP]-1659846633769
GPR[EPVS]-1659846633769
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.multiply((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846633771
GPR[SPVAP]-1659846633771
GPR[EPVAP]-1659846634846
GPR[EPVS]-1659846634846
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.divide((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846634848
GPR[SPVAP]-1659846634848
GPR[EPVAP]-1659846635924
GPR[EPVS]-1659846635924
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.sqrt((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846635926
GPR[SPVAP]-1659846635926
GPR[EPVAP]-1659846636965
GPR[EPVS]-1659846636965
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.value((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846636967
GPR[SPVAP]-1659846636967
GPR[EPVAP]-1659846638033
GPR[EPVS]-1659846638033
========
for(int i=columnsToDrop.size()-1;i>=maxUlps;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846638034
GPR[SPVAP]-1659846638034
GPR[EPVAP]-1659846640002
GPR[SPVATF]-1659846640002
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846641914
GPR[EPVS]-1659846641914
========
numSlackVariables++;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846641916
GPR[SPVAP]-1659846641916
GPR[EPVAP]-1659846643029
GPR[EPVS]-1659846643030
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=numSlackVariables;

========
MM Copying to MM
GPR[SPVS]-1659846643032
GPR[SPVAP]-1659846643032
GPR[EPVAP]-1659846644978
GPR[SPVATF]-1659846644978
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846646886
GPR[EPVS]-1659846646886
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
j+=numSlackVariables;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846646888
GPR[SPVAP]-1659846646888
GPR[EPVAP]-1659846647985
GPR[EPVS]-1659846647985
========
for(int i=columnsToDrop.size()-1;i>=result.exp;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846647987
GPR[SPVAP]-1659846647987
GPR[EPVAP]-1659846649053
GPR[EPVS]-1659846649053
========
epsilon+=u-1;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846649055
GPR[SPVAP]-1659846649055
GPR[EPVAP]-1659846650133
GPR[EPVS]-1659846650133
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(NEGATIVE_VAR_COLUMN_LABEL.length()==1){
hex="0"+NEGATIVE_VAR_COLUMN_LABEL;
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846650137
GPR[SPVAP]-1659846650137
GPR[EPVAP]-1659846651223
GPR[EPVS]-1659846651223
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.subtract((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846651226
GPR[SPVAP]-1659846651226
GPR[EPVAP]-1659846652289
GPR[EPVS]-1659846652289
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.unboundedToBounded((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846652290
GPR[SPVAP]-1659846652290
GPR[EPVAP]-1659846653393
GPR[EPVS]-1659846653393
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.boundedToUnbounded((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846653394
GPR[SPVAP]-1659846653394
GPR[EPVAP]-1659846654516
GPR[EPVS]-1659846654516
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
polynomials[i]=new double[numSlackVariables];
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846654518
GPR[SPVAP]-1659846654518
GPR[EPVAP]-1659846655613
GPR[EPVS]-1659846655613
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.setInterpolatedTime((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846655616
GPR[SPVAP]-1659846655616
GPR[EPVAP]-1659846656689
GPR[EPVS]-1659846656689
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
index=numSlackVariables;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846656691
GPR[SPVAP]-1659846656691
GPR[EPVAP]-1659846657768
GPR[EPVS]-1659846657768
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
index=numSlackVariables;
return ;

columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846657769
GPR[SPVAP]-1659846657769
GPR[EPVAP]-1659846658850
GPR[EPVS]-1659846658850
========
epsilon=epsilon*epsilon;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846658852
GPR[SPVAP]-1659846658852
GPR[EPVAP]-1659846659923
GPR[EPVS]-1659846659923
========
for(int i=columnsToDrop.size()-1;i>=rounded.exp;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846659924
GPR[SPVAP]-1659846659924
GPR[EPVAP]-1659846661053
GPR[EPVS]-1659846661053
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
bp[i][k]=0;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846661056
GPR[SPVAP]-1659846661056
GPR[EPVAP]-1659846662130
GPR[EPVS]-1659846662130
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.charAt((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846662131
GPR[SPVAP]-1659846662131
GPR[EPVAP]-1659846663199
GPR[EPVS]-1659846663199
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(NEGATIVE_VAR_COLUMN_LABEL.charAt(i)=='-'){
negative=true;
continue;
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846663200
GPR[SPVAP]-1659846663200
GPR[EPVAP]-1659846664275
GPR[EPVS]-1659846664275
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846664279
GPR[SPVAP]-1659846664279
GPR[EPVAP]-1659846665354
GPR[EPVS]-1659846665354
========
for(int i=columnsToDrop.size()-1;i>=rawData.length;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846665356
GPR[SPVAP]-1659846665356
GPR[EPVAP]-1659846666446
GPR[EPVS]-1659846666446
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
iubd=numSlackVariables+1;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846666451
GPR[SPVAP]-1659846666451
GPR[EPVAP]-1659846667527
GPR[EPVS]-1659846667527
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
i+=numSlackVariables;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846667528
GPR[SPVAP]-1659846667528
GPR[EPVAP]-1659846669547
GPR[SPVATF]-1659846669547
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846671456
GPR[EPVS]-1659846671456
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
se[i]=Double.NaN;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846671458
GPR[SPVAP]-1659846671458
GPR[EPVAP]-1659846672534
GPR[EPVS]-1659846672534
========
for(int i=columnsToDrop.size()-1;i>=main.length;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846672535
GPR[SPVAP]-1659846672535
GPR[EPVAP]-1659846673624
GPR[EPVS]-1659846673624
========
findEigenVectors(matrix);
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846673626
GPR[SPVAP]-1659846673626
GPR[EPVAP]-1659846674714
GPR[EPVS]-1659846674714
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
numSlackVariables-=i;
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846674715
GPR[SPVAP]-1659846674715
GPR[EPVAP]-1659846675786
GPR[EPVS]-1659846675786
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
iubd=-numSlackVariables-1;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846675789
GPR[SPVAP]-1659846675789
GPR[EPVAP]-1659846676859
GPR[EPVS]-1659846676859
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(matrix[numSlackVariables]==null){
throw new NullArgumentException();
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846676862
GPR[SPVAP]-1659846676862
GPR[EPVAP]-1659846677925
GPR[EPVS]-1659846677925
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(xvalI.length!=i){
throw new DimensionMismatchException(xvalI.length,i);
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846677927
GPR[SPVAP]-1659846677927
GPR[EPVAP]-1659846679019
GPR[EPVS]-1659846679019
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(matrix[numSlackVariables]==null){
throw new NullArgumentException();
}
if(xvalI.length!=i){
throw new DimensionMismatchException(xvalI.length,i);
}

columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846679020
GPR[SPVAP]-1659846679020
GPR[EPVAP]-1659846680101
GPR[EPVS]-1659846680101
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
t=new AdamsNordsieckTransformer(i);
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846680103
GPR[SPVAP]-1659846680103
GPR[EPVAP]-1659846681201
GPR[EPVS]-1659846681201
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
lsb=FastMath.min(i,exponent(serialVersionUID)+computeLSB(mantissa(serialVersionUID)));
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846681203
GPR[SPVAP]-1659846681203
GPR[EPVAP]-1659846682281
GPR[EPVS]-1659846682281
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
current=loop[i];
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846682286
GPR[SPVAP]-1659846682286
GPR[EPVAP]-1659846683360
GPR[EPVS]-1659846683360
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(i>=numSlackVariables){
break;
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846683362
GPR[SPVAP]-1659846683362
GPR[EPVAP]-1659846685381
GPR[SPVATF]-1659846685381
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846687291
GPR[EPVS]-1659846687291
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
if(i>=numSlackVariables){
break;
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846687292
GPR[SPVAP]-1659846687292
GPR[EPVAP]-1659846689284
GPR[SPVATF]-1659846689284
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846693256
GPR[EPVS]-1659846693256
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(i>=numSlackVariables){
break;
}
columnLabels.add((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846693258
GPR[SPVAP]-1659846693258
GPR[EPVAP]-1659846694365
GPR[EPVS]-1659846694365
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
if(i>=numSlackVariables){
break;
}
columnLabels.add((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846694366
GPR[SPVAP]-1659846694366
GPR[EPVAP]-1659846695480
GPR[EPVS]-1659846695480
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='0'&&buf[i]<='9'&&i<numSlackVariables){
buf[i]='0';
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846695482
GPR[SPVAP]-1659846695482
GPR[EPVAP]-1659846696557
GPR[EPVS]-1659846696557
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
boundDifference[i]=upperBound[i]-lowerBound[i];
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846696559
GPR[SPVAP]-1659846696559
GPR[EPVAP]-1659846697635
GPR[EPVS]-1659846697635
========
if(d.length<numSlackVariables+numSlackVariables){
throw new NumberIsTooLargeException(pos+size,d.length,true);
}
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846697637
GPR[SPVAP]-1659846697637
GPR[EPVAP]-1659846698753
GPR[EPVS]-1659846698753
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
tableau.setEntry(numSlackVariables,i,1.0);
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846698755
GPR[SPVAP]-1659846698755
GPR[EPVAP]-1659846700718
GPR[SPVATF]-1659846700718
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846702623
GPR[EPVS]-1659846702623
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
tableau.setEntry(numSlackVariables,i,1.0);
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846702624
GPR[SPVAP]-1659846702624
GPR[EPVAP]-1659846704608
GPR[SPVATF]-1659846704608
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846706510
GPR[EPVS]-1659846706510
========
if(numSlackVariables<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,k);
}
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846706513
GPR[SPVAP]-1659846706513
GPR[EPVAP]-1659846707589
GPR[EPVS]-1659846707589
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
y[index]=yval[i];
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846707591
GPR[SPVAP]-1659846707591
GPR[EPVAP]-1659846708680
GPR[EPVS]-1659846708680
========
checkRowIndex(numSlackVariables);
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846708681
GPR[SPVAP]-1659846708681
GPR[EPVAP]-1659846709744
GPR[EPVS]-1659846709744
========
checkColumnIndex(numSlackVariables);
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846709745
GPR[SPVAP]-1659846709745
GPR[EPVAP]-1659846710864
GPR[EPVS]-1659846710864
========
checkRowIndex(numSlackVariables);
checkColumnIndex(numSlackVariables);
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846710866
GPR[SPVAP]-1659846710866
GPR[EPVAP]-1659846711950
GPR[EPVS]-1659846711950
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
xAug[i][0]=1.0;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846711953
GPR[SPVAP]-1659846711953
GPR[EPVAP]-1659846713019
GPR[EPVS]-1659846713019
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.get(findBin(epsilon)).addValue(epsilon);
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846713021
GPR[SPVAP]-1659846713021
GPR[EPVAP]-1659846714100
GPR[EPVS]-1659846714100
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
epsilon=epsilon*d1+epsilon*d2;
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846714102
GPR[SPVAP]-1659846714102
GPR[EPVAP]-1659846715205
GPR[EPVS]-1659846715205
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
cost+=residualsWeights[i]*epsilon;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846715210
GPR[SPVAP]-1659846715210
GPR[EPVAP]-1659846716327
GPR[EPVS]-1659846716327
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(FastMath.abs(tableau.getEntry(numSlackVariables-1,i))<Precision.SAFE_MIN){
throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846716329
GPR[SPVAP]-1659846716329
GPR[EPVAP]-1659846717409
GPR[EPVS]-1659846717409
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(FastMath.abs(tableau.getEntry(numSlackVariables,i))<Precision.SAFE_MIN){
throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846717412
GPR[SPVAP]-1659846717412
GPR[EPVAP]-1659846718488
GPR[EPVS]-1659846718488
========
for(int i=columnsToDrop.size()-1;i>=Math.max(numSlackVariables,numSlackVariables);i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846718490
GPR[SPVAP]-1659846718490
GPR[EPVAP]-1659846720469
GPR[SPVATF]-1659846720469
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846722393
GPR[EPVS]-1659846722393
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
array[j++]=null;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846722396
GPR[SPVAP]-1659846722396
GPR[EPVAP]-1659846723472
GPR[EPVS]-1659846723472
========
epsilon=epsilon;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846723474
GPR[SPVAP]-1659846723474
GPR[EPVAP]-1659846724546
GPR[EPVS]-1659846724546
========
epsilon=epsilon-epsilon*d1;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846724549
GPR[SPVAP]-1659846724549
GPR[EPVAP]-1659846725613
GPR[EPVS]-1659846725613
========
if(i<0){
i=-i-2;
}
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846725615
GPR[SPVAP]-1659846725615
GPR[EPVAP]-1659846726674
GPR[EPVS]-1659846726674
========
if(i>=polynomials.length){
i--;
}
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846726675
GPR[SPVAP]-1659846726675
GPR[EPVAP]-1659846727744
GPR[EPVS]-1659846727744
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
iMin=numSlackVariables;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846727750
GPR[SPVAP]-1659846727750
GPR[EPVAP]-1659846728835
GPR[EPVS]-1659846728835
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
return ;
columnLabels.setInterpolatedTime((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846728836
GPR[SPVAP]-1659846728836
GPR[EPVAP]-1659846729918
GPR[EPVS]-1659846729918
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846729920
GPR[SPVAP]-1659846729920
GPR[EPVAP]-1659846731010
GPR[EPVS]-1659846731010
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]=='.'){
sig+=(400-i)%4;
leading=false;
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846731011
GPR[SPVAP]-1659846731011
GPR[EPVAP]-1659846732076
GPR[EPVS]-1659846732076
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
i++;
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846732077
GPR[SPVAP]-1659846732077
GPR[EPVAP]-1659846733169
GPR[EPVS]-1659846733169
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-i)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
i++;
}

columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846733171
GPR[SPVAP]-1659846733171
GPR[EPVAP]-1659846734247
GPR[EPVS]-1659846734247
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(i==(numSlackVariables/2)*4){
sp=numSlackVariables;
break;
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846734249
GPR[SPVAP]-1659846734249
GPR[EPVAP]-1659846735325
GPR[EPVS]-1659846735325
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-i)%4;
leading=false;
}
if(i==(numSlackVariables/2)*4){
sp=numSlackVariables;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
i++;
}

columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846735327
GPR[SPVAP]-1659846735327
GPR[EPVAP]-1659846736396
GPR[EPVS]-1659846736396
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
columnLabels.charAt((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846736397
GPR[SPVAP]-1659846736397
GPR[EPVAP]-1659846737476
GPR[EPVS]-1659846737476
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]=='.'){
sig+=(400-i)%4;
leading=false;
}
columnLabels.charAt((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846737478
GPR[SPVAP]-1659846737478
GPR[EPVAP]-1659846738549
GPR[EPVS]-1659846738549
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
i++;
}
columnLabels.charAt((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846738551
GPR[SPVAP]-1659846738551
GPR[EPVAP]-1659846739635
GPR[EPVS]-1659846739635
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-i)%4;
leading=false;
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846739636
GPR[SPVAP]-1659846739637
GPR[EPVAP]-1659846740703
GPR[EPVS]-1659846740703
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
i++;
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846740705
GPR[SPVAP]-1659846740705
GPR[EPVAP]-1659846741785
GPR[EPVS]-1659846741785
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]=='.'){
sig+=(400-i)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
i++;
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846741786
GPR[SPVAP]-1659846741786
GPR[EPVAP]-1659846742875
GPR[EPVS]-1659846742875
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-i)%4;
leading=false;
}
columnLabels.charAt((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846742877
GPR[SPVAP]-1659846742877
GPR[EPVAP]-1659846743945
GPR[EPVS]-1659846743945
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
i++;
}
columnLabels.charAt((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846743946
GPR[SPVAP]-1659846743946
GPR[EPVAP]-1659846745033
GPR[EPVS]-1659846745033
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]=='.'){
sig+=(400-i)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
i++;
}
columnLabels.charAt((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846745034
GPR[SPVAP]-1659846745034
GPR[EPVAP]-1659846746117
GPR[EPVS]-1659846746117
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-i)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
i++;
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846746119
GPR[SPVAP]-1659846746119
GPR[EPVAP]-1659846747221
GPR[EPVS]-1659846747221
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-i)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'&&!restrictToNonNegative){
i++;
}
columnLabels.charAt((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846747222
GPR[SPVAP]-1659846747222
GPR[EPVAP]-1659846748300
GPR[EPVS]-1659846748300
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
columnLabels.increment((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846748302
GPR[SPVAP]-1659846748302
GPR[EPVAP]-1659846749369
GPR[EPVS]-1659846749369
========
if(restrictToNonNegative^model.forward){
throw new MathIllegalArgumentException(LocalizedFormats.PROPAGATION_DIRECTION_MISMATCH);
}
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846749371
GPR[SPVAP]-1659846749371
GPR[EPVAP]-1659846750447
GPR[EPVS]-1659846750447
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numDecisionVariables=f.getCoefficients().getDimension()+(restrictToNonNegative?0:1);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846750452
GPR[SPVAP]-1659846750452
GPR[EPVAP]-1659846751523
GPR[EPVS]-1659846751523
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numSlackVariables=getConstraintTypeCounts(Relationship.LEQ)+getConstraintTypeCounts(Relationship.GEQ);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846751524
GPR[SPVAP]-1659846751524
GPR[EPVAP]-1659846752590
GPR[EPVS]-1659846752590
========
initializeColumnLabels();
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846752592
GPR[SPVAP]-1659846752592
GPR[EPVAP]-1659846754592
GPR[SPVATF]-1659846754592
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846756502
GPR[EPVS]-1659846756502
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
y[i]=yval[index];
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846756504
GPR[SPVAP]-1659846756504
GPR[EPVAP]-1659846757581
GPR[EPVS]-1659846757581
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
y[i]=yval[index];
y[index]=yval[i];

columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846757582
GPR[SPVAP]-1659846757582
GPR[EPVAP]-1659846758681
GPR[EPVS]-1659846758681
========
for(int i=columnsToDrop.size()-1;i>=numSlackVariables;i--){
y[index]=yval[i];
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846758682
GPR[SPVAP]-1659846758682
GPR[EPVAP]-1659846759752
GPR[EPVS]-1659846759752
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(ltI[i]<=epsilon){
throw new NonPositiveDefiniteMatrixException(matrix[i][i],i,epsilon);
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846759755
GPR[SPVAP]-1659846759755
GPR[EPVAP]-1659846760849
GPR[EPVS]-1659846760849
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.isInfinite((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846760851
GPR[SPVAP]-1659846760851
GPR[EPVAP]-1659846761932
GPR[EPVS]-1659846761932
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
lastScaleFactor=epsilon;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846761933
GPR[SPVAP]-1659846761933
GPR[EPVAP]-1659846763039
GPR[EPVS]-1659846763039
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
scaleFactor*=epsilon;
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846763049
GPR[SPVAP]-1659846763049
GPR[EPVAP]-1659846765566
GPR[EPVS]-1659846765566
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(!restrictToNonNegative){
break;
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846765567
GPR[SPVAP]-1659846765567
GPR[EPVAP]-1659846767534
GPR[SPVATF]-1659846767534
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846769465
GPR[EPVS]-1659846769465
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
lastScaleFactor=epsilon;
scaleFactor*=epsilon;
if(!restrictToNonNegative){
break;
}

columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846769466
GPR[SPVAP]-1659846769466
GPR[EPVAP]-1659846770533
GPR[EPVS]-1659846770533
========
for(int i=columnsToDrop.size()-1;i>=maxUlps;i--){
if(!restrictToNonNegative){
break;
}
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846770534
GPR[SPVAP]-1659846770534
GPR[EPVAP]-1659846772494
GPR[SPVATF]-1659846772494
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846774389
GPR[EPVS]-1659846774389
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
if(d.length<i+numSlackVariables){
throw new NumberIsTooLargeException(pos+size,d.length,true);
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846774394
GPR[SPVAP]-1659846774394
GPR[EPVAP]-1659846775486
GPR[EPVS]-1659846775486
========
if(d.length<i+numSlackVariables){
throw new NumberIsTooLargeException(pos+size,d.length,true);
}
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846775487
GPR[SPVAP]-1659846775487
GPR[EPVAP]-1659846776565
GPR[EPVS]-1659846776565
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
i=size.length;
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846776568
GPR[SPVAP]-1659846776568
GPR[EPVAP]-1659846777632
GPR[EPVS]-1659846777632
========
numSlackVariables=i-1;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846777634
GPR[SPVAP]-1659846777634
GPR[EPVAP]-1659846778709
GPR[EPVS]-1659846778709
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=source.size;

========
MM Copying to MM
GPR[SPVS]-1659846778711
GPR[SPVAP]-1659846778711
GPR[EPVAP]-1659846779788
GPR[EPVS]-1659846779788
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
System.arraycopy(source.states,0,states,0,numSlackVariables);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846779789
GPR[SPVAP]-1659846779789
GPR[EPVAP]-1659846780862
GPR[EPVS]-1659846780862
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
epsilon=source.missingEntries;
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846780863
GPR[SPVAP]-1659846780863
GPR[EPVAP]-1659846781922
GPR[EPVS]-1659846781922
========
numSlackVariables=source.mask;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846781923
GPR[SPVAP]-1659846781923
GPR[EPVAP]-1659846782994
GPR[EPVS]-1659846782994
========
numSlackVariables=source.count;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846782995
GPR[SPVAP]-1659846782995
GPR[EPVAP]-1659846784066
GPR[EPVS]-1659846784066
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
System.arraycopy(source.states,0,states,0,numSlackVariables);
this.numArtificialVariables=source.size;

========
MM Copying to MM
GPR[SPVS]-1659846784067
GPR[SPVAP]-1659846784067
GPR[EPVAP]-1659846785150
GPR[EPVS]-1659846785150
========
numSlackVariables=source.mask;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=source.size;

========
MM Copying to MM
GPR[SPVS]-1659846785151
GPR[SPVAP]-1659846785151
GPR[EPVAP]-1659846786229
GPR[EPVS]-1659846786229
========
numSlackVariables=source.count;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=source.size;

========
MM Copying to MM
GPR[SPVS]-1659846786230
GPR[SPVAP]-1659846786230
GPR[EPVAP]-1659846787302
GPR[EPVS]-1659846787302
========
numSlackVariables=source.mask;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
System.arraycopy(source.states,0,states,0,numSlackVariables);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846787303
GPR[SPVAP]-1659846787303
GPR[EPVAP]-1659846788377
GPR[EPVS]-1659846788377
========
numSlackVariables=source.count;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
System.arraycopy(source.states,0,states,0,numSlackVariables);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846788378
GPR[SPVAP]-1659846788378
GPR[EPVAP]-1659846789472
GPR[EPVS]-1659846789472
========
numSlackVariables=source.mask;
numSlackVariables=source.count;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846789473
GPR[SPVAP]-1659846789473
GPR[EPVAP]-1659846790544
GPR[EPVS]-1659846790544
========
numSlackVariables=source.mask;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
System.arraycopy(source.states,0,states,0,numSlackVariables);
this.numArtificialVariables=source.size;

========
MM Copying to MM
GPR[SPVS]-1659846790545
GPR[SPVAP]-1659846790545
GPR[EPVAP]-1659846791611
GPR[EPVS]-1659846791611
========
numSlackVariables=source.count;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
System.arraycopy(source.states,0,states,0,numSlackVariables);
this.numArtificialVariables=source.size;

========
MM Copying to MM
GPR[SPVS]-1659846791612
GPR[SPVAP]-1659846791612
GPR[EPVAP]-1659846792709
GPR[EPVS]-1659846792709
========
numSlackVariables=source.mask;
numSlackVariables=source.count;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=source.size;

========
MM Copying to MM
GPR[SPVS]-1659846792710
GPR[SPVAP]-1659846792710
GPR[EPVAP]-1659846793798
GPR[EPVS]-1659846793798
========
numSlackVariables=source.mask;
numSlackVariables=source.count;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
System.arraycopy(source.states,0,states,0,numSlackVariables);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846793799
GPR[SPVAP]-1659846793799
GPR[EPVAP]-1659846794909
GPR[EPVS]-1659846794909
========
numSlackVariables=source.mask;
numSlackVariables=source.count;
for(int i=columnsToDrop.size()-1;i>=0;i--){
columnLabels.remove((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
System.arraycopy(source.states,0,states,0,numSlackVariables);
this.numArtificialVariables=source.size;

========
MM Copying to MM
GPR[SPVS]-1659846794910
GPR[SPVAP]-1659846794910
GPR[EPVAP]-1659846795969
GPR[EPVS]-1659846795969
========
for(int i=columnsToDrop.size()-1;i>=0;i--){
if(buf[i]>='0'&&buf[i]<='9'&&i<numSlackVariables){
buf[i]='0';
}
columnLabels.charAt((int)columnsToDrop.get(i));
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

========
MM Copying to MM
GPR[SPVS]-1659846795971
GPR[SPVAP]-1659846795971
GPR[EPVAP]-1659846797033
GPR[EPVS]-1659846797033
GPR[ESUN]-1659846797036
GPR[SSUN]-1659846797036
org.apache.commons.math3.optimization.linear.SimplexTableau,366
GPR[ESUN]-1659846797609
GPR[SSUN]-1659846797609
org.apache.commons.math3.optimization.linear.SimplexTableau,367
Find no block!
GPR[SSUN]-1659846797899
org.apache.commons.math3.util.MathUtils,257
UNKNOWN ASTNode type : catch (NumberFormatException e) {
  throw new MathIllegalArgumentException(LocalizedFormats.CANNOT_TRANSFORM_TO_DOUBLE,o.toString());
}

========
if(o==null){
throw new NullArgumentException(LocalizedFormats.OBJECT_TRANSFORMATION);
}

========
MM Copying to MM
GPR[SPVS]-1659846799397
GPR[SPVAP]-1659846799397
GPR[EPVAP]-1659846805107
GPR[SPVATF]-1659846805107
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846807025
GPR[EPVS]-1659846807025
========
if(o==null){
if(o==null){
return false;
}
throw new NullArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659846807026
GPR[SPVAP]-1659846807026
GPR[EPVAP]-1659846808105
GPR[EPVS]-1659846808105
========
if(o==null){
if(FastMath.abs(TWO_PI-TWO_PI)<=TWO_PI){
return o;
}
throw new NullArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659846808106
GPR[SPVAP]-1659846808106
GPR[EPVAP]-1659846809136
GPR[EPVS]-1659846809136
GPR[ESUN]-1659846809137
GPR[SSUN]-1659846809137
org.apache.commons.math3.util.MathUtils,260
Find no block!
GPR[SSUN]-1659846809640
org.apache.commons.math3.linear.Array2DRowRealMatrix,74
Find no block!
GPR[SSUN]-1659846809934
org.apache.commons.math3.linear.Array2DRowRealMatrix,75
GPR[ESUN]-1659846811547
GPR[SSUN]-1659846811547
org.apache.commons.math3.linear.Array2DRowRealMatrix,76
Find no block!
GPR[SSUN]-1659846811913
org.apache.commons.math3.linear.Array2DRowRealMatrix,262
========
if(row>0){
throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,row,0,getRowDimension()-1);
}

========
MM Copying to MM
GPR[SPVS]-1659846813675
GPR[SPVAP]-1659846813675
GPR[EPVAP]-1659846816212
GPR[EPVS]-1659846816212
========
if(value>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}

========
MM Copying to MM
GPR[SPVS]-1659846816214
GPR[SPVAP]-1659846816214
GPR[EPVAP]-1659846818083
GPR[EPVS]-1659846818083
========
checkRowIndex(row);
if(row>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}

========
MM Copying to MM
GPR[SPVS]-1659846818085
GPR[SPVAP]-1659846818085
GPR[EPVAP]-1659846820017
GPR[EPVS]-1659846820017
========
MatrixUtils.checkRowIndex(this,row);
if(row>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}

========
MM Copying to MM
GPR[SPVS]-1659846820018
GPR[SPVAP]-1659846820018
GPR[EPVAP]-1659846825392
GPR[SPVATF]-1659846825392
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846827305
GPR[EPVS]-1659846827305
========
if(length>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}

========
MM Copying to MM
GPR[SPVS]-1659846827306
GPR[SPVAP]-1659846827306
GPR[EPVAP]-1659846828365
GPR[EPVS]-1659846828365
========
if(row>getColumnDimension()){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}

========
MM Copying to MM
GPR[SPVS]-1659846828366
GPR[SPVAP]-1659846828366
GPR[EPVAP]-1659846830345
GPR[SPVATF]-1659846830345
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846832252
GPR[EPVS]-1659846832252
========
if(row>0){
throw new MatrixDimensionMismatchException(1,array.length,1,getColumnDimension());
}

========
MM Copying to MM
GPR[SPVS]-1659846832254
GPR[SPVAP]-1659846832254
GPR[EPVAP]-1659846833309
GPR[EPVS]-1659846833309
========
checkRowIndex(row);
if(row>getColumnDimension()){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}

========
MM Copying to MM
GPR[SPVS]-1659846833310
GPR[SPVAP]-1659846833310
GPR[EPVAP]-1659846834398
GPR[EPVS]-1659846834398
========
if(length>getColumnDimension()){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}

========
MM Copying to MM
GPR[SPVS]-1659846834399
GPR[SPVAP]-1659846834399
GPR[EPVAP]-1659846836893
GPR[EPVS]-1659846836893
========
if(length>0){
throw new MatrixDimensionMismatchException(1,array.length,1,getColumnDimension());
}

========
MM Copying to MM
GPR[SPVS]-1659846836901
GPR[SPVAP]-1659846836901
GPR[EPVAP]-1659846838216
GPR[EPVS]-1659846838216
========
MatrixUtils.checkRowIndex(this,row);
if(length>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}

========
MM Copying to MM
GPR[SPVS]-1659846838218
GPR[SPVAP]-1659846838218
GPR[EPVAP]-1659846839273
GPR[EPVS]-1659846839273
========
if(row>getColumnDimension()){
throw new MatrixDimensionMismatchException(1,array.length,1,getColumnDimension());
}

========
MM Copying to MM
GPR[SPVS]-1659846839274
GPR[SPVAP]-1659846839274
GPR[EPVAP]-1659846840327
GPR[EPVS]-1659846840327
========
MatrixUtils.checkRowIndex(this,row);
if(row>getColumnDimension()){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}

========
MM Copying to MM
GPR[SPVS]-1659846840328
GPR[SPVAP]-1659846840328
GPR[EPVAP]-1659846842326
GPR[SPVATF]-1659846842326
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846844282
GPR[EPVS]-1659846844282
========
MatrixUtils.checkRowIndex(this,row);
if(row>0){
throw new MatrixDimensionMismatchException(1,array.length,1,getColumnDimension());
}

========
MM Copying to MM
GPR[SPVS]-1659846844284
GPR[SPVAP]-1659846844284
GPR[EPVAP]-1659846845337
GPR[EPVS]-1659846845337
========
if(length>getColumnDimension()){
throw new MatrixDimensionMismatchException(1,array.length,1,getColumnDimension());
}

========
MM Copying to MM
GPR[SPVS]-1659846845337
GPR[SPVAP]-1659846845337
GPR[EPVAP]-1659846846422
GPR[EPVS]-1659846846422
========
MatrixUtils.checkRowIndex(this,row);
if(length>getColumnDimension()){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}

========
MM Copying to MM
GPR[SPVS]-1659846846423
GPR[SPVAP]-1659846846423
GPR[EPVAP]-1659846847502
GPR[EPVS]-1659846847502
========
MatrixUtils.checkRowIndex(this,row);
if(length>0){
throw new MatrixDimensionMismatchException(1,array.length,1,getColumnDimension());
}

========
MM Copying to MM
GPR[SPVS]-1659846847503
GPR[SPVAP]-1659846847503
GPR[EPVAP]-1659846848588
GPR[EPVS]-1659846848588
========
MatrixUtils.checkRowIndex(this,row);
if(row>getColumnDimension()){
throw new MatrixDimensionMismatchException(1,array.length,1,getColumnDimension());
}

========
MM Copying to MM
GPR[SPVS]-1659846848589
GPR[SPVAP]-1659846848589
GPR[EPVAP]-1659846849677
GPR[EPVS]-1659846849677
========
MatrixUtils.checkRowIndex(this,row);
if(length>getColumnDimension()){
throw new MatrixDimensionMismatchException(1,array.length,1,getColumnDimension());
}

========
MM Copying to MM
GPR[SPVS]-1659846849678
GPR[SPVAP]-1659846849678
GPR[EPVAP]-1659846850737
GPR[EPVS]-1659846850737
========
if(row>column){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}

========
MM Copying to MM
GPR[SPVS]-1659846850739
GPR[SPVAP]-1659846850739
GPR[EPVAP]-1659846852674
GPR[SPVATF]-1659846852674
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846854629
GPR[EPVS]-1659846854629
========
checkColumnIndex(column);
if(row>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}

========
MM Copying to MM
GPR[SPVS]-1659846854631
GPR[SPVAP]-1659846854631
GPR[EPVAP]-1659846855686
GPR[EPVS]-1659846855686
========
if(row>0){
throw new DimensionMismatchException(row,subRow.length);
}

========
MM Copying to MM
GPR[SPVS]-1659846855687
GPR[SPVAP]-1659846855687
GPR[EPVAP]-1659846856757
GPR[EPVS]-1659846856757
========
if(length>0){
throw new DimensionMismatchException(row,subRow.length);
}

========
MM Copying to MM
GPR[SPVS]-1659846856759
GPR[SPVAP]-1659846856759
GPR[EPVAP]-1659846857833
GPR[EPVS]-1659846857833
========
MatrixUtils.checkColumnIndex(this,column);
if(row>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}

========
MM Copying to MM
GPR[SPVS]-1659846857834
GPR[SPVAP]-1659846857834
GPR[EPVAP]-1659846859796
GPR[SPVATF]-1659846859796
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846861713
GPR[EPVS]-1659846861713
========
MatrixUtils.checkRowIndex(this,row);
MatrixUtils.checkColumnIndex(this,column);
if(row>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}

========
MM Copying to MM
GPR[SPVS]-1659846861714
GPR[SPVAP]-1659846861714
GPR[EPVAP]-1659846863693
GPR[SPVATF]-1659846863693
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846865614
GPR[EPVS]-1659846865614
========
if(column>0){
throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,column,0,getColumnDimension()-1);
}

========
MM Copying to MM
GPR[SPVS]-1659846866892
GPR[SPVAP]-1659846866892
GPR[EPVAP]-1659846867960
GPR[EPVS]-1659846867960
========
if(row>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846867961
GPR[SPVAP]-1659846867961
GPR[EPVAP]-1659846869913
GPR[SPVATF]-1659846869913
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846871865
GPR[EPVS]-1659846871865
========
if(value>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846871866
GPR[SPVAP]-1659846871866
GPR[EPVAP]-1659846872904
GPR[EPVS]-1659846872904
========
checkColumnIndex(column);
if(column>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846872905
GPR[SPVAP]-1659846872905
GPR[EPVAP]-1659846873965
GPR[EPVS]-1659846873965
========
MatrixUtils.checkColumnIndex(this,column);
if(column>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846873966
GPR[SPVAP]-1659846873966
GPR[EPVAP]-1659846875922
GPR[SPVATF]-1659846875922
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846877830
GPR[EPVS]-1659846877830
========
if(nRows>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846877832
GPR[SPVAP]-1659846877832
GPR[EPVAP]-1659846878893
GPR[EPVS]-1659846878893
========
MatrixUtils.checkColumnIndex(this,column);
if(nRows>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846878895
GPR[SPVAP]-1659846878895
GPR[EPVAP]-1659846879943
GPR[EPVS]-1659846879943
========
if(length>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846879944
GPR[SPVAP]-1659846879944
GPR[EPVAP]-1659846880994
GPR[EPVS]-1659846880994
========
if(column>getRowDimension()){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846880995
GPR[SPVAP]-1659846880995
GPR[EPVAP]-1659846882950
GPR[SPVATF]-1659846882950
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846884869
GPR[EPVS]-1659846884869
========
if(column>0){
throw new MatrixDimensionMismatchException(array.length,1,getRowDimension(),1);
}

========
MM Copying to MM
GPR[SPVS]-1659846884870
GPR[SPVAP]-1659846884870
GPR[EPVAP]-1659846885948
GPR[EPVS]-1659846885948
========
checkColumnIndex(column);
if(column>getRowDimension()){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846885949
GPR[SPVAP]-1659846885949
GPR[EPVAP]-1659846887025
GPR[EPVS]-1659846887025
========
if(length>getRowDimension()){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846887027
GPR[SPVAP]-1659846887027
GPR[EPVAP]-1659846888095
GPR[EPVS]-1659846888095
========
if(length>0){
throw new MatrixDimensionMismatchException(array.length,1,getRowDimension(),1);
}

========
MM Copying to MM
GPR[SPVS]-1659846888096
GPR[SPVAP]-1659846888096
GPR[EPVAP]-1659846889148
GPR[EPVS]-1659846889148
========
MatrixUtils.checkColumnIndex(this,column);
if(length>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846889150
GPR[SPVAP]-1659846889150
GPR[EPVAP]-1659846890197
GPR[EPVS]-1659846890197
========
if(column>getRowDimension()){
throw new MatrixDimensionMismatchException(array.length,1,getRowDimension(),1);
}

========
MM Copying to MM
GPR[SPVS]-1659846890199
GPR[SPVAP]-1659846890199
GPR[EPVAP]-1659846891258
GPR[EPVS]-1659846891258
========
MatrixUtils.checkColumnIndex(this,column);
if(column>getRowDimension()){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846891259
GPR[SPVAP]-1659846891259
GPR[EPVAP]-1659846893233
GPR[SPVATF]-1659846893233
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846895135
GPR[EPVS]-1659846895135
========
MatrixUtils.checkColumnIndex(this,column);
if(column>0){
throw new MatrixDimensionMismatchException(array.length,1,getRowDimension(),1);
}

========
MM Copying to MM
GPR[SPVS]-1659846895136
GPR[SPVAP]-1659846895136
GPR[EPVAP]-1659846896201
GPR[EPVS]-1659846896201
========
if(length>getRowDimension()){
throw new MatrixDimensionMismatchException(array.length,1,getRowDimension(),1);
}

========
MM Copying to MM
GPR[SPVS]-1659846896202
GPR[SPVAP]-1659846896202
GPR[EPVAP]-1659846897265
GPR[EPVS]-1659846897265
========
MatrixUtils.checkColumnIndex(this,column);
if(length>getRowDimension()){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846897266
GPR[SPVAP]-1659846897266
GPR[EPVAP]-1659846898317
GPR[EPVS]-1659846898317
========
MatrixUtils.checkColumnIndex(this,column);
if(length>0){
throw new MatrixDimensionMismatchException(array.length,1,getRowDimension(),1);
}

========
MM Copying to MM
GPR[SPVS]-1659846898318
GPR[SPVAP]-1659846898318
GPR[EPVAP]-1659846899417
GPR[EPVS]-1659846899417
========
MatrixUtils.checkColumnIndex(this,column);
if(column>getRowDimension()){
throw new MatrixDimensionMismatchException(array.length,1,getRowDimension(),1);
}

========
MM Copying to MM
GPR[SPVS]-1659846899418
GPR[SPVAP]-1659846899418
GPR[EPVAP]-1659846900499
GPR[EPVS]-1659846900499
========
MatrixUtils.checkColumnIndex(this,column);
if(length>getRowDimension()){
throw new MatrixDimensionMismatchException(array.length,1,getRowDimension(),1);
}

========
MM Copying to MM
GPR[SPVS]-1659846900500
GPR[SPVAP]-1659846900500
GPR[EPVAP]-1659846901573
GPR[EPVS]-1659846901573
========
if(nRows==column){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}

========
MM Copying to MM
GPR[SPVS]-1659846902847
GPR[SPVAP]-1659846902847
GPR[EPVAP]-1659846904803
GPR[SPVATF]-1659846904803
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846906718
GPR[EPVS]-1659846906718
========
if(nRows==0){
throw new MathIllegalArgumentException(LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS,nRows,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846906719
GPR[SPVAP]-1659846906719
GPR[EPVAP]-1659846907927
GPR[EPVS]-1659846907927
========
if(nRows!=0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}

========
MM Copying to MM
GPR[SPVS]-1659846907937
GPR[SPVAP]-1659846907937
GPR[EPVAP]-1659846911172
GPR[SPVATF]-1659846911172
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846913069
GPR[EPVS]-1659846913069
========
if(array.length!=nRows){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}

========
MM Copying to MM
GPR[SPVS]-1659846913070
GPR[SPVAP]-1659846913070
GPR[EPVAP]-1659846914130
GPR[EPVS]-1659846914130
========
if(array.length==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}

========
MM Copying to MM
GPR[SPVS]-1659846914131
GPR[SPVAP]-1659846914131
GPR[EPVAP]-1659846915196
GPR[EPVS]-1659846915196
========
if(nRows==0){
throw new MatrixDimensionMismatchException(array.length,1,nRows,1);
}

========
MM Copying to MM
GPR[SPVS]-1659846915197
GPR[SPVAP]-1659846915197
GPR[EPVAP]-1659846916261
GPR[EPVS]-1659846916261
========
if(nRows==0){
throw new NullArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659846916262
GPR[SPVAP]-1659846916262
GPR[EPVAP]-1659846918207
GPR[SPVATF]-1659846918207
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846920122
GPR[EPVS]-1659846920122
========
if(nRows==column){
throw new MathIllegalArgumentException(LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS,nRows,column);
}

========
MM Copying to MM
GPR[SPVS]-1659846920123
GPR[SPVAP]-1659846920123
GPR[EPVAP]-1659846921200
GPR[EPVS]-1659846921200
========
if(array.length!=0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}

========
MM Copying to MM
GPR[SPVS]-1659846921202
GPR[SPVAP]-1659846921202
GPR[EPVAP]-1659846922276
GPR[EPVS]-1659846922276
========
if(nRows!=0){
throw new MatrixDimensionMismatchException(array.length,1,nRows,1);
}

========
MM Copying to MM
GPR[SPVS]-1659846922277
GPR[SPVAP]-1659846922277
GPR[EPVAP]-1659846923322
GPR[EPVS]-1659846923322
========
if(array.length!=nRows){
throw new MatrixDimensionMismatchException(array.length,1,nRows,1);
}

========
MM Copying to MM
GPR[SPVS]-1659846923323
GPR[SPVAP]-1659846923323
GPR[EPVAP]-1659846924381
GPR[EPVS]-1659846924381
========
if(array.length==0){
throw new MatrixDimensionMismatchException(array.length,1,nRows,1);
}

========
MM Copying to MM
GPR[SPVS]-1659846924382
GPR[SPVAP]-1659846924382
GPR[EPVAP]-1659846925445
GPR[EPVS]-1659846925445
========
if(array.length!=0){
throw new MatrixDimensionMismatchException(array.length,1,nRows,1);
}

========
MM Copying to MM
GPR[SPVS]-1659846925446
GPR[SPVAP]-1659846925446
GPR[EPVAP]-1659846926505
GPR[EPVS]-1659846926505
========
if(nCols==0){
throw new MathIllegalArgumentException(LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS,column,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846927803
GPR[SPVAP]-1659846927803
GPR[EPVAP]-1659846928859
GPR[EPVS]-1659846928859
========
if(nCols!=0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}

========
MM Copying to MM
GPR[SPVS]-1659846928860
GPR[SPVAP]-1659846928860
GPR[EPVAP]-1659846930833
GPR[SPVATF]-1659846930834
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846932765
GPR[EPVS]-1659846932765
========
if(nCols==column){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}

========
MM Copying to MM
GPR[SPVS]-1659846932766
GPR[SPVAP]-1659846932766
GPR[EPVAP]-1659846934727
GPR[SPVATF]-1659846934727
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846936638
GPR[EPVS]-1659846936638
========
if(array.length!=nCols){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}

========
MM Copying to MM
GPR[SPVS]-1659846936639
GPR[SPVAP]-1659846936639
GPR[EPVAP]-1659846937692
GPR[EPVS]-1659846937692
========
if(array.length==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}

========
MM Copying to MM
GPR[SPVS]-1659846937694
GPR[SPVAP]-1659846937694
GPR[EPVAP]-1659846938756
GPR[EPVS]-1659846938756
========
if(nCols==0){
throw new MatrixDimensionMismatchException(1,array.length,1,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846938757
GPR[SPVAP]-1659846938757
GPR[EPVAP]-1659846939809
GPR[EPVS]-1659846939809
========
if(nCols==0){
throw new NullArgumentException();
}

========
MM Copying to MM
GPR[SPVS]-1659846939810
GPR[SPVAP]-1659846939810
GPR[EPVAP]-1659846941775
GPR[SPVATF]-1659846941775
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846943742
GPR[EPVS]-1659846943742
========
if(array.length!=0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}

========
MM Copying to MM
GPR[SPVS]-1659846943744
GPR[SPVAP]-1659846943744
GPR[EPVAP]-1659846944797
GPR[EPVS]-1659846944797
========
if(nCols!=0){
throw new MatrixDimensionMismatchException(1,array.length,1,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846944798
GPR[SPVAP]-1659846944798
GPR[EPVAP]-1659846945851
GPR[EPVS]-1659846945851
========
if(array.length!=nCols){
throw new MatrixDimensionMismatchException(1,array.length,1,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846945852
GPR[SPVAP]-1659846945852
GPR[EPVAP]-1659846946909
GPR[EPVS]-1659846946909
========
if(array.length==0){
throw new MatrixDimensionMismatchException(1,array.length,1,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846946910
GPR[SPVAP]-1659846946910
GPR[EPVAP]-1659846947957
GPR[EPVS]-1659846947957
========
if(array.length!=0){
throw new MatrixDimensionMismatchException(1,array.length,1,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846947959
GPR[SPVAP]-1659846947959
GPR[EPVAP]-1659846949042
GPR[EPVS]-1659846949042
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (OutOfRangeException e) {
  fwhmApprox=points[points.length - 1].getX() - points[0].getX();
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,subMatrix[i].length);
}

========
MM Copying to MM
GPR[SPVS]-1659846953062
GPR[SPVAP]-1659846953062
GPR[EPVAP]-1659846955002
GPR[SPVATF]-1659846955002
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846956922
GPR[EPVS]-1659846956922
========
if(v.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846956924
GPR[SPVAP]-1659846956924
GPR[EPVAP]-1659846957983
GPR[EPVS]-1659846957984
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(v.length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846957984
GPR[SPVAP]-1659846957984
GPR[EPVAP]-1659846959044
GPR[EPVS]-1659846959044
========
if(refI.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846959045
GPR[SPVAP]-1659846959045
GPR[EPVAP]-1659846960096
GPR[EPVS]-1659846960096
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(refI.length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846960097
GPR[SPVAP]-1659846960097
GPR[EPVAP]-1659846961147
GPR[EPVS]-1659846961147
========
if(y.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846961152
GPR[SPVAP]-1659846961152
GPR[EPVAP]-1659846962261
GPR[EPVS]-1659846962261
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(y.length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846962262
GPR[SPVAP]-1659846962262
GPR[EPVAP]-1659846963325
GPR[EPVS]-1659846963325
========
if(x.length!=y.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846963327
GPR[SPVAP]-1659846963327
GPR[EPVAP]-1659846964384
GPR[EPVS]-1659846964384
========
if(x.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846964385
GPR[SPVAP]-1659846964385
GPR[EPVAP]-1659846965453
GPR[EPVS]-1659846965453
========
if(subMatrix[i].length!=y.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846965454
GPR[SPVAP]-1659846965454
GPR[EPVAP]-1659846966517
GPR[EPVS]-1659846966517
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(x.length,y.length);
}

========
MM Copying to MM
GPR[SPVS]-1659846966519
GPR[SPVAP]-1659846966519
GPR[EPVAP]-1659846967586
GPR[EPVS]-1659846967586
========
if(y.length!=x.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846967587
GPR[SPVAP]-1659846967587
GPR[EPVAP]-1659846968649
GPR[EPVS]-1659846968649
========
if(subMatrix[i].length!=x.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846968650
GPR[SPVAP]-1659846968650
GPR[EPVAP]-1659846969710
GPR[EPVS]-1659846969710
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(y.length,x.length);
}

========
MM Copying to MM
GPR[SPVS]-1659846969711
GPR[SPVAP]-1659846969711
GPR[EPVAP]-1659846970777
GPR[EPVS]-1659846970777
========
if(xval.length!=fval.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846970779
GPR[SPVAP]-1659846970779
GPR[EPVAP]-1659846971836
GPR[EPVS]-1659846971836
========
if(xval.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846971837
GPR[SPVAP]-1659846971837
GPR[EPVAP]-1659846972959
GPR[EPVS]-1659846972959
========
if(subMatrix[i].length!=fval.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846972960
GPR[SPVAP]-1659846972960
GPR[EPVAP]-1659846974019
GPR[EPVS]-1659846974019
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(xval.length,fval.length);
}

========
MM Copying to MM
GPR[SPVS]-1659846974020
GPR[SPVAP]-1659846974020
GPR[EPVAP]-1659846975105
GPR[EPVS]-1659846975105
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846975107
GPR[SPVAP]-1659846975107
GPR[EPVAP]-1659846976173
GPR[EPVS]-1659846976173
========
if(subMatrix[i].length!=yval.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846976174
GPR[SPVAP]-1659846976174
GPR[EPVAP]-1659846977248
GPR[EPVS]-1659846977248
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(xval.length,yval.length);
}

========
MM Copying to MM
GPR[SPVS]-1659846977249
GPR[SPVAP]-1659846977249
GPR[EPVAP]-1659846978328
GPR[EPVS]-1659846978329
========
if(dataR.length!=dataI.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846978329
GPR[SPVAP]-1659846978330
GPR[EPVAP]-1659846979402
GPR[EPVS]-1659846979402
========
if(dataR.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846979404
GPR[SPVAP]-1659846979404
GPR[EPVAP]-1659846980452
GPR[EPVS]-1659846980452
========
if(subMatrix[i].length!=dataI.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846980453
GPR[SPVAP]-1659846980453
GPR[EPVAP]-1659846981512
GPR[EPVS]-1659846981512
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(dataI.length,dataR.length);
}

========
MM Copying to MM
GPR[SPVS]-1659846981513
GPR[SPVAP]-1659846981513
GPR[EPVAP]-1659846984340
GPR[EPVS]-1659846984340
========
if(vector.length!=dimensionSize.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846984342
GPR[SPVAP]-1659846984342
GPR[EPVAP]-1659846985409
GPR[EPVS]-1659846985409
========
if(vector.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846985410
GPR[SPVAP]-1659846985410
GPR[EPVAP]-1659846986467
GPR[EPVS]-1659846986467
========
if(subMatrix[i].length!=dimensionSize.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846986468
GPR[SPVAP]-1659846986468
GPR[EPVAP]-1659846987523
GPR[EPVS]-1659846987523
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(vector.length,dimensionSize.length);
}

========
MM Copying to MM
GPR[SPVS]-1659846987525
GPR[SPVAP]-1659846987525
GPR[EPVAP]-1659846988575
GPR[EPVS]-1659846988575
========
if(x.length!=y.length){
throw new DimensionMismatchException(y.length,x.length);
}

========
MM Copying to MM
GPR[SPVS]-1659846988576
GPR[SPVAP]-1659846988576
GPR[EPVAP]-1659846989646
GPR[EPVS]-1659846989646
========
if(x.length!=nCols){
throw new DimensionMismatchException(y.length,x.length);
}

========
MM Copying to MM
GPR[SPVS]-1659846989647
GPR[SPVAP]-1659846989647
GPR[EPVAP]-1659846990727
GPR[EPVS]-1659846990727
========
if(subMatrix[i].length!=y.length){
throw new DimensionMismatchException(y.length,x.length);
}

========
MM Copying to MM
GPR[SPVS]-1659846990728
GPR[SPVAP]-1659846990728
GPR[EPVAP]-1659846991777
GPR[EPVS]-1659846991777
========
if(x.length!=covariance.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846991778
GPR[SPVAP]-1659846991778
GPR[EPVAP]-1659846992838
GPR[EPVS]-1659846992838
========
if(subMatrix[i].length!=covariance.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846992839
GPR[SPVAP]-1659846992839
GPR[EPVAP]-1659846993893
GPR[EPVS]-1659846993893
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(x.length,covariance.length);
}

========
MM Copying to MM
GPR[SPVS]-1659846993894
GPR[SPVAP]-1659846993894
GPR[EPVAP]-1659846994961
GPR[EPVS]-1659846994961
========
if(v.length!=sums.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846994962
GPR[SPVAP]-1659846994962
GPR[EPVAP]-1659846996021
GPR[EPVS]-1659846996021
========
if(subMatrix[i].length!=sums.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846996022
GPR[SPVAP]-1659846996022
GPR[EPVAP]-1659846997077
GPR[EPVS]-1659846997077
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(v.length,sums.length);
}

========
MM Copying to MM
GPR[SPVS]-1659846997078
GPR[SPVAP]-1659846997078
GPR[EPVAP]-1659846998146
GPR[EPVS]-1659846998146
========
if(v.length!=means.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846998147
GPR[SPVAP]-1659846998147
GPR[EPVAP]-1659846999214
GPR[EPVS]-1659846999214
========
if(subMatrix[i].length!=means.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659846999215
GPR[SPVAP]-1659846999215
GPR[EPVAP]-1659847000270
GPR[EPVS]-1659847000270
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(v.length,means.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847000271
GPR[SPVAP]-1659847000271
GPR[EPVAP]-1659847001334
GPR[EPVS]-1659847001335
========
if(expected.length!=observed.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847001336
GPR[SPVAP]-1659847001336
GPR[EPVAP]-1659847002407
GPR[EPVS]-1659847002407
========
if(expected.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847002408
GPR[SPVAP]-1659847002408
GPR[EPVAP]-1659847003502
GPR[EPVS]-1659847003502
========
if(subMatrix[i].length!=observed.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847003504
GPR[SPVAP]-1659847003504
GPR[EPVAP]-1659847004568
GPR[EPVS]-1659847004568
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(expected.length,observed.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847004570
GPR[SPVAP]-1659847004570
GPR[EPVAP]-1659847005642
GPR[EPVS]-1659847005642
========
if(observed1.length!=observed2.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847005643
GPR[SPVAP]-1659847005643
GPR[EPVAP]-1659847006699
GPR[EPVS]-1659847006699
========
if(observed1.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847006700
GPR[SPVAP]-1659847006700
GPR[EPVAP]-1659847007768
GPR[EPVS]-1659847007768
========
if(subMatrix[i].length!=observed2.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847007769
GPR[SPVAP]-1659847007769
GPR[EPVAP]-1659847008825
GPR[EPVS]-1659847008825
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(observed1.length,observed2.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847008826
GPR[SPVAP]-1659847008826
GPR[EPVAP]-1659847009869
GPR[EPVS]-1659847009869
========
if(points.length!=simplex.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847009870
GPR[SPVAP]-1659847009870
GPR[EPVAP]-1659847010923
GPR[EPVS]-1659847010923
========
if(points.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847010924
GPR[SPVAP]-1659847010924
GPR[EPVAP]-1659847011980
GPR[EPVS]-1659847011980
========
if(subMatrix[i].length!=simplex.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847011980
GPR[SPVAP]-1659847011980
GPR[EPVAP]-1659847013035
GPR[EPVS]-1659847013035
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(points.length,simplex.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847013036
GPR[SPVAP]-1659847013036
GPR[EPVAP]-1659847014112
GPR[EPVS]-1659847014112
========
if(t.length!=w.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847014114
GPR[SPVAP]-1659847014114
GPR[EPVAP]-1659847015173
GPR[EPVS]-1659847015173
========
if(t.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847015174
GPR[SPVAP]-1659847015174
GPR[EPVAP]-1659847016229
GPR[EPVS]-1659847016229
========
if(subMatrix[i].length!=w.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847016230
GPR[SPVAP]-1659847016230
GPR[EPVAP]-1659847017287
GPR[EPVS]-1659847017287
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(t.length,w.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847017288
GPR[SPVAP]-1659847017288
GPR[EPVAP]-1659847018357
GPR[EPVS]-1659847018357
========
if(lower.length!=upper.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847018359
GPR[SPVAP]-1659847018359
GPR[EPVAP]-1659847019419
GPR[EPVS]-1659847019419
========
if(lower.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847019420
GPR[SPVAP]-1659847019420
GPR[EPVAP]-1659847020514
GPR[EPVS]-1659847020514
========
if(subMatrix[i].length!=upper.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847020515
GPR[SPVAP]-1659847020515
GPR[EPVAP]-1659847021574
GPR[EPVS]-1659847021574
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(lower.length,upper.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847021576
GPR[SPVAP]-1659847021576
GPR[EPVAP]-1659847022632
GPR[EPVS]-1659847022632
========
if(inputSigma.length!=init.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847022634
GPR[SPVAP]-1659847022634
GPR[EPVAP]-1659847023721
GPR[EPVS]-1659847023721
========
if(inputSigma.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847023722
GPR[SPVAP]-1659847023722
GPR[EPVAP]-1659847024790
GPR[EPVS]-1659847024790
========
if(subMatrix[i].length!=init.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847024791
GPR[SPVAP]-1659847024791
GPR[EPVAP]-1659847025849
GPR[EPVS]-1659847025849
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(inputSigma.length,init.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847025851
GPR[SPVAP]-1659847025851
GPR[EPVAP]-1659847026919
GPR[EPVS]-1659847026919
========
if(lower.length!=scale.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847026920
GPR[SPVAP]-1659847026920
GPR[EPVAP]-1659847027988
GPR[EPVS]-1659847027988
========
if(subMatrix[i].length!=scale.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847027989
GPR[SPVAP]-1659847027989
GPR[EPVAP]-1659847029053
GPR[EPVS]-1659847029053
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(lower.length,scale.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847029054
GPR[SPVAP]-1659847029054
GPR[EPVAP]-1659847030125
GPR[EPVS]-1659847030125
========
if(observations.length!=weights.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847030126
GPR[SPVAP]-1659847030126
GPR[EPVAP]-1659847031186
GPR[EPVS]-1659847031186
========
if(observations.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847031187
GPR[SPVAP]-1659847031187
GPR[EPVAP]-1659847032255
GPR[EPVS]-1659847032255
========
if(subMatrix[i].length!=weights.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847032256
GPR[SPVAP]-1659847032256
GPR[EPVAP]-1659847033336
GPR[EPVS]-1659847033336
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(observations.length,weights.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847033337
GPR[SPVAP]-1659847033337
GPR[EPVAP]-1659847034407
GPR[EPVS]-1659847034407
========
if(residuals.length!=observations.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847034409
GPR[SPVAP]-1659847034409
GPR[EPVAP]-1659847035469
GPR[EPVS]-1659847035469
========
if(residuals.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847035470
GPR[SPVAP]-1659847035470
GPR[EPVAP]-1659847036552
GPR[EPVS]-1659847036552
========
if(subMatrix[i].length!=observations.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847036553
GPR[SPVAP]-1659847036553
GPR[EPVAP]-1659847037629
GPR[EPVS]-1659847037629
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(residuals.length,observations.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847037630
GPR[SPVAP]-1659847037630
GPR[EPVAP]-1659847038692
GPR[EPVS]-1659847038692
========
if(secondaryState.length!=localArray.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847038694
GPR[SPVAP]-1659847038694
GPR[EPVAP]-1659847039771
GPR[EPVS]-1659847039771
========
if(secondaryState.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847039773
GPR[SPVAP]-1659847039773
GPR[EPVAP]-1659847040836
GPR[EPVS]-1659847040836
========
if(subMatrix[i].length!=localArray.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847040837
GPR[SPVAP]-1659847040838
GPR[EPVAP]-1659847041915
GPR[EPVS]-1659847041915
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(secondaryState.length,localArray.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847041916
GPR[SPVAP]-1659847041916
GPR[EPVAP]-1659847042981
GPR[EPVS]-1659847042981
========
if(mean.length!=standardDeviation.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847042982
GPR[SPVAP]-1659847042982
GPR[EPVAP]-1659847044041
GPR[EPVS]-1659847044041
========
if(mean.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847044042
GPR[SPVAP]-1659847044042
GPR[EPVAP]-1659847045123
GPR[EPVS]-1659847045123
========
if(subMatrix[i].length!=standardDeviation.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847045124
GPR[SPVAP]-1659847045124
GPR[EPVAP]-1659847046188
GPR[EPVS]-1659847046188
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(mean.length,standardDeviation.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847046190
GPR[SPVAP]-1659847046190
GPR[EPVAP]-1659847047257
GPR[EPVS]-1659847047257
========
if(nCols!=f.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847047258
GPR[SPVAP]-1659847047258
GPR[EPVAP]-1659847048323
GPR[EPVS]-1659847048323
========
if(subMatrix[i].length!=f.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847048324
GPR[SPVAP]-1659847048324
GPR[EPVAP]-1659847049397
GPR[EPVS]-1659847049397
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,f.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847049398
GPR[SPVAP]-1659847049398
GPR[EPVAP]-1659847050466
GPR[EPVS]-1659847050466
========
if(nCols!=dFdX.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847050467
GPR[SPVAP]-1659847050467
GPR[EPVAP]-1659847051579
GPR[EPVS]-1659847051579
========
if(subMatrix[i].length!=dFdX.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847051580
GPR[SPVAP]-1659847051580
GPR[EPVAP]-1659847052645
GPR[EPVS]-1659847052645
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,dFdX.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847052646
GPR[SPVAP]-1659847052646
GPR[EPVAP]-1659847053697
GPR[EPVS]-1659847053697
========
if(nCols!=dFdY.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847053699
GPR[SPVAP]-1659847053699
GPR[EPVAP]-1659847056273
GPR[EPVS]-1659847056273
========
if(subMatrix[i].length!=dFdY.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847056283
GPR[SPVAP]-1659847056283
GPR[EPVAP]-1659847057497
GPR[EPVS]-1659847057497
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,dFdY.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847057498
GPR[SPVAP]-1659847057498
GPR[EPVAP]-1659847058583
GPR[EPVS]-1659847058583
========
if(nCols!=dFdZ.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847058584
GPR[SPVAP]-1659847058584
GPR[EPVAP]-1659847059649
GPR[EPVS]-1659847059649
========
if(subMatrix[i].length!=dFdZ.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847059650
GPR[SPVAP]-1659847059650
GPR[EPVAP]-1659847060704
GPR[EPVS]-1659847060704
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,dFdZ.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847060705
GPR[SPVAP]-1659847060705
GPR[EPVAP]-1659847061753
GPR[EPVS]-1659847061753
========
if(nCols!=d2FdXdY.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847061754
GPR[SPVAP]-1659847061754
GPR[EPVAP]-1659847062824
GPR[EPVS]-1659847062824
========
if(subMatrix[i].length!=d2FdXdY.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847062825
GPR[SPVAP]-1659847062825
GPR[EPVAP]-1659847063889
GPR[EPVS]-1659847063889
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,d2FdXdY.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847063891
GPR[SPVAP]-1659847063891
GPR[EPVAP]-1659847064958
GPR[EPVS]-1659847064958
========
if(nCols!=d2FdXdZ.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847064959
GPR[SPVAP]-1659847064959
GPR[EPVAP]-1659847066020
GPR[EPVS]-1659847066020
========
if(subMatrix[i].length!=d2FdXdZ.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847066022
GPR[SPVAP]-1659847066022
GPR[EPVAP]-1659847067088
GPR[EPVS]-1659847067088
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,d2FdXdZ.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847067089
GPR[SPVAP]-1659847067089
GPR[EPVAP]-1659847068145
GPR[EPVS]-1659847068145
========
if(nCols!=d2FdYdZ.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847068147
GPR[SPVAP]-1659847068147
GPR[EPVAP]-1659847069213
GPR[EPVS]-1659847069213
========
if(subMatrix[i].length!=d2FdYdZ.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847069214
GPR[SPVAP]-1659847069214
GPR[EPVAP]-1659847070277
GPR[EPVS]-1659847070277
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,d2FdYdZ.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847070278
GPR[SPVAP]-1659847070278
GPR[EPVAP]-1659847071350
GPR[EPVS]-1659847071350
========
if(nCols!=d3FdXdYdZ.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847071351
GPR[SPVAP]-1659847071351
GPR[EPVAP]-1659847072432
GPR[EPVS]-1659847072432
========
if(subMatrix[i].length!=d3FdXdYdZ.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847072433
GPR[SPVAP]-1659847072433
GPR[EPVAP]-1659847073485
GPR[EPVS]-1659847073485
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,d3FdXdYdZ.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847073486
GPR[SPVAP]-1659847073486
GPR[EPVAP]-1659847074543
GPR[EPVS]-1659847074543
========
if(c.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847074544
GPR[SPVAP]-1659847074544
GPR[EPVAP]-1659847075605
GPR[EPVS]-1659847075605
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(c.length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847075606
GPR[SPVAP]-1659847075606
GPR[EPVAP]-1659847076664
GPR[EPVS]-1659847076664
========
if(subMatrix[i].length!=sample2.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847076666
GPR[SPVAP]-1659847076666
GPR[EPVAP]-1659847077723
GPR[EPVS]-1659847077723
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,sample2.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847077724
GPR[SPVAP]-1659847077724
GPR[EPVAP]-1659847078805
GPR[EPVS]-1659847078805
========
if(nCols!=startPoint.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847078806
GPR[SPVAP]-1659847078806
GPR[EPVAP]-1659847079869
GPR[EPVS]-1659847079869
========
if(subMatrix[i].length!=startPoint.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847079870
GPR[SPVAP]-1659847079870
GPR[EPVAP]-1659847080937
GPR[EPVS]-1659847080937
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,startPoint.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847080938
GPR[SPVAP]-1659847080938
GPR[EPVAP]-1659847082005
GPR[EPVS]-1659847082005
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(lower.length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847082007
GPR[SPVAP]-1659847082007
GPR[EPVAP]-1659847083067
GPR[EPVS]-1659847083067
========
if(upper.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847083068
GPR[SPVAP]-1659847083069
GPR[EPVAP]-1659847084123
GPR[EPVS]-1659847084123
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(upper.length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847084124
GPR[SPVAP]-1659847084124
GPR[EPVAP]-1659847085173
GPR[EPVS]-1659847085173
========
if(weightedResidualJacobian.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847085174
GPR[SPVAP]-1659847085174
GPR[EPVAP]-1659847086226
GPR[EPVS]-1659847086226
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(weightedResidualJacobian.length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847086227
GPR[SPVAP]-1659847086227
GPR[EPVAP]-1659847087316
GPR[EPVS]-1659847087316
========
if(objective.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847087317
GPR[SPVAP]-1659847087317
GPR[EPVAP]-1659847088368
GPR[EPVS]-1659847088368
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(objective.length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847088369
GPR[SPVAP]-1659847088369
GPR[EPVAP]-1659847089423
GPR[EPVS]-1659847089423
========
if(equationData.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847089424
GPR[SPVAP]-1659847089424
GPR[EPVAP]-1659847090485
GPR[EPVS]-1659847090485
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(equationData.length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847090486
GPR[SPVAP]-1659847090486
GPR[EPVAP]-1659847091558
GPR[EPVS]-1659847091558
========
if(v.length!=nCols){
throw new DimensionMismatchException(v.length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847091559
GPR[SPVAP]-1659847091559
GPR[EPVAP]-1659847092620
GPR[EPVS]-1659847092620
========
if(subRow.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847092621
GPR[SPVAP]-1659847092621
GPR[EPVAP]-1659847093670
GPR[EPVS]-1659847093670
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,subRow.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847093671
GPR[SPVAP]-1659847093671
GPR[EPVAP]-1659847094746
GPR[EPVS]-1659847094746
========
if(data.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847094747
GPR[SPVAP]-1659847094747
GPR[EPVAP]-1659847096738
GPR[SPVATF]-1659847096738
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847098655
GPR[EPVS]-1659847098655
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(data.length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847098656
GPR[SPVAP]-1659847098656
GPR[EPVAP]-1659847100605
GPR[SPVATF]-1659847100605
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847102510
GPR[EPVS]-1659847102510
========
if(data.length!=nCols){
throw new DimensionMismatchException(data.length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847102511
GPR[SPVAP]-1659847102511
GPR[EPVAP]-1659847104458
GPR[SPVATF]-1659847104458
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847106386
GPR[EPVS]-1659847106386
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(mean.length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847106387
GPR[SPVAP]-1659847106388
GPR[EPVAP]-1659847107441
GPR[EPVS]-1659847107441
========
if(subMatrix[i].length!=polynomials.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847107443
GPR[SPVAP]-1659847107443
GPR[EPVAP]-1659847108503
GPR[EPVS]-1659847108503
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(polynomials.length,knots.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847108504
GPR[SPVAP]-1659847108504
GPR[EPVAP]-1659847109557
GPR[EPVS]-1659847109557
========
if(a.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847109558
GPR[SPVAP]-1659847109558
GPR[EPVAP]-1659847110621
GPR[EPVS]-1659847110621
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(LocalizedFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1,a.length,c.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847110622
GPR[SPVAP]-1659847110623
GPR[EPVAP]-1659847111691
GPR[EPVS]-1659847111691
========
if(param.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847111692
GPR[SPVAP]-1659847111692
GPR[EPVAP]-1659847112757
GPR[EPVS]-1659847112757
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(param.length,3);
}

========
MM Copying to MM
GPR[SPVS]-1659847112758
GPR[SPVAP]-1659847112758
GPR[EPVAP]-1659847113815
GPR[EPVS]-1659847113815
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(param.length,2);
}

========
MM Copying to MM
GPR[SPVS]-1659847113817
GPR[SPVAP]-1659847113817
GPR[EPVAP]-1659847114873
GPR[EPVS]-1659847114873
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(param.length,6);
}

========
MM Copying to MM
GPR[SPVS]-1659847114874
GPR[SPVAP]-1659847114874
GPR[EPVAP]-1659847115928
GPR[EPVS]-1659847115928
========
if(dataRI.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847115929
GPR[SPVAP]-1659847115929
GPR[EPVAP]-1659847116985
GPR[EPVS]-1659847116985
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(dataRI.length,2);
}

========
MM Copying to MM
GPR[SPVS]-1659847116986
GPR[SPVAP]-1659847116986
GPR[EPVAP]-1659847118048
GPR[EPVS]-1659847118048
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(0,dimensionSize.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847118049
GPR[SPVAP]-1659847118049
GPR[EPVAP]-1659847119084
GPR[EPVS]-1659847119084
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(expected.length,2);
}

========
MM Copying to MM
GPR[SPVS]-1659847119086
GPR[SPVAP]-1659847119086
GPR[EPVAP]-1659847120141
GPR[EPVS]-1659847120141
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(observed1.length,2);
}

========
MM Copying to MM
GPR[SPVS]-1659847120142
GPR[SPVAP]-1659847120142
GPR[EPVAP]-1659847121225
GPR[EPVS]-1659847121225
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(in.length,2);
}

========
MM Copying to MM
GPR[SPVS]-1659847121227
GPR[SPVAP]-1659847121227
GPR[EPVAP]-1659847122280
GPR[EPVS]-1659847122280
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(v.length,2);
}

========
MM Copying to MM
GPR[SPVS]-1659847122282
GPR[SPVAP]-1659847122282
GPR[EPVAP]-1659847123347
GPR[EPVS]-1659847123347
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(v.length,3);
}

========
MM Copying to MM
GPR[SPVS]-1659847123348
GPR[SPVAP]-1659847123348
GPR[EPVAP]-1659847124400
GPR[EPVS]-1659847124400
========
if(primaryState.length!=this.nCols.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847124401
GPR[SPVAP]-1659847124401
GPR[EPVAP]-1659847125462
GPR[EPVS]-1659847125462
========
if(primaryState.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847125463
GPR[SPVAP]-1659847125463
GPR[EPVAP]-1659847126569
GPR[EPVS]-1659847126569
========
if(subMatrix[i].length!=this.nCols.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847126578
GPR[SPVAP]-1659847126578
GPR[EPVAP]-1659847129209
GPR[EPVS]-1659847129209
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(primaryState.length,this.nCols.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847129210
GPR[SPVAP]-1659847129210
GPR[EPVAP]-1659847130269
GPR[EPVS]-1659847130269
========
if(nCols!=b.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847130270
GPR[SPVAP]-1659847130270
GPR[EPVAP]-1659847131325
GPR[EPVS]-1659847131325
========
if(subMatrix[i].length!=b.length){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847131326
GPR[SPVAP]-1659847131326
GPR[EPVAP]-1659847132395
GPR[EPVS]-1659847132395
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,b.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847132396
GPR[SPVAP]-1659847132396
GPR[EPVAP]-1659847133449
GPR[EPVS]-1659847133449
========
if(subMatrix[i].length!=sample2.length){
throw new DimensionMismatchException(nCols,sample2.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847133451
GPR[SPVAP]-1659847133451
GPR[EPVAP]-1659847134506
GPR[EPVS]-1659847134507
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,vecAbsoluteTolerance.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847134508
GPR[SPVAP]-1659847134508
GPR[EPVAP]-1659847135562
GPR[EPVS]-1659847135562
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,vecRelativeTolerance.length);
}

========
MM Copying to MM
GPR[SPVS]-1659847135563
GPR[SPVAP]-1659847135563
GPR[EPVAP]-1659847136666
GPR[EPVS]-1659847136666
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,array.length,2);
}

========
MM Copying to MM
GPR[SPVS]-1659847136667
GPR[SPVAP]-1659847136667
GPR[EPVAP]-1659847137712
GPR[EPVS]-1659847137712
========
if(column!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847137713
GPR[SPVAP]-1659847137713
GPR[EPVAP]-1659847139656
GPR[SPVATF]-1659847139656
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847141564
GPR[EPVS]-1659847141564
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,column);
}

========
MM Copying to MM
GPR[SPVS]-1659847141565
GPR[SPVAP]-1659847141565
GPR[EPVAP]-1659847143504
GPR[SPVATF]-1659847143504
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847145426
GPR[EPVS]-1659847145426
========
if(column!=nCols){
throw new DimensionMismatchException(nCols,column);
}

========
MM Copying to MM
GPR[SPVS]-1659847145427
GPR[SPVAP]-1659847145427
GPR[EPVAP]-1659847147378
GPR[SPVATF]-1659847147378
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847149291
GPR[EPVS]-1659847149291
========
if(data.length!=nCols*(column+1)){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847149293
GPR[SPVAP]-1659847149293
GPR[EPVAP]-1659847151241
GPR[SPVATF]-1659847151241
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847153167
GPR[EPVS]-1659847153167
========
if(subMatrix[i].length!=nCols*(column+1)){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847153168
GPR[SPVAP]-1659847153168
GPR[EPVAP]-1659847155117
GPR[SPVATF]-1659847155117
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847157060
GPR[EPVS]-1659847157060
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(data.length,nCols*(column+1));
}

========
MM Copying to MM
GPR[SPVS]-1659847157061
GPR[SPVAP]-1659847157061
GPR[EPVAP]-1659847159028
GPR[SPVATF]-1659847159028
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847160928
GPR[EPVS]-1659847160928
========
if(data.length!=nCols*(column+1)){
throw new DimensionMismatchException(data.length,nCols*(column+1));
}

========
MM Copying to MM
GPR[SPVS]-1659847160930
GPR[SPVAP]-1659847160930
GPR[EPVAP]-1659847162884
GPR[SPVATF]-1659847162884
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847164775
GPR[EPVS]-1659847164775
========
if(data.length!=nCols){
throw new DimensionMismatchException(data.length,nCols*(column+1));
}

========
MM Copying to MM
GPR[SPVS]-1659847164776
GPR[SPVAP]-1659847164776
GPR[EPVAP]-1659847166757
GPR[SPVATF]-1659847166757
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847168678
GPR[EPVS]-1659847168678
========
if(subMatrix[i].length!=nCols*(column+1)){
throw new DimensionMismatchException(data.length,nCols*(column+1));
}

========
MM Copying to MM
GPR[SPVS]-1659847168679
GPR[SPVAP]-1659847168679
GPR[EPVAP]-1659847170607
GPR[SPVATF]-1659847170607
TESTING : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM:   - org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847172564
GPR[EPVS]-1659847172564
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(i[0].length,2);
}

========
MM Copying to MM
GPR[SPVS]-1659847172565
GPR[SPVAP]-1659847172565
GPR[EPVAP]-1659847173612
GPR[EPVS]-1659847173612
========
if(y0.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847173613
GPR[SPVAP]-1659847173613
GPR[EPVAP]-1659847174681
GPR[EPVS]-1659847174681
========
if(completeState.length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847174682
GPR[SPVAP]-1659847174682
GPR[EPVAP]-1659847175731
GPR[EPVS]-1659847175731
========
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(completeState.length,getTotalDimension());
}

========
MM Copying to MM
GPR[SPVS]-1659847175732
GPR[SPVAP]-1659847175732
GPR[EPVAP]-1659847176817
GPR[EPVS]-1659847176817
========
if(subMatrix[i].length!=column*blockWidth(nCols)){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

========
MM Copying to MM
GPR[SPVS]-1659847176818
GPR[SPVAP]-1659847176818
GPR[EPVAP]-1659847177883
GPR[EPVS]-1659847177883
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fb10621b1f8, pid=939120, tid=140398647637760
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 5726 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007fb10621b1f8 [0x00007fb106218880+0x2978]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/math/math_33_buggy/hs_err_pid939120.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Math/33 results at /experiment_home///results/SimFix/Math/33/seed_260/
\n\nNode: host-63\n
\n\nDate: Sat 06 Aug 2022 09:39:37 PM PDT\n
Removing checked out dir script/workingdir/SimFix/math/math_33_buggy
GPR[SSLE]-1659847177916
GPR[ESLE]-1659847237920
