Sleep 1m start
GPR[SSLI]-1661304042598
GPR[ESLI]-1661304102602
Running SimFix Lang 43b
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
Timezone: America/Los_Angeles
Seed 284
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Killing all java process
Creating out dir /experiment_home///results/SimFix/Lang/43/seed_284/
Project lc: lang
New out script/workingdir/SimFix/lang/lang_43_buggy
The file script/workingdir/SimFix/lang/lang_43_buggy does not exist!
script/workingdir/SimFix/lang/lang_43_buggy
Current directory: script/workingdir/SimFix/lang/lang_43_buggy
classpath:  script/workingdir/SimFix/lang/lang_43_buggy/target/classes:script/workingdir/SimFix/lang/lang_43_buggy/target/tests:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:/experiment_home/defects4j/framework/projects/Lang/lib/cglib.jar:/experiment_home/defects4j/framework/projects/Lang/lib/asm.jar:/experiment_home/defects4j/framework/projects/Lang/lib/easymock.jar:/experiment_home/defects4j/framework/projects/Lang/lib/commons-io.jar
Src java:  /src/java
Classes Java:  /target/classes
Src Test:  /src/test
Classes Test:  /target/tests
GPR[SSLB]-1661304113997
GPR[ESLB]-1661304174001
Calling SimFix: at script/workingdir/SimFix/lang/lang_43_buggy
build.xml
checkstyle.xml
d4j-info
default.properties
defects4j.build.properties
doap_lang.rdf
LICENSE.txt
NOTICE.txt
pom.xml
PROPOSAL.html
RELEASE-NOTES.txt
src
target
xdocs
content current dir: build.xml checkstyle.xml d4j-info default.properties defects4j.build.properties doap_lang.rdf LICENSE.txt NOTICE.txt pom.xml PROPOSAL.html RELEASE-NOTES.txt src target xdocs
Node: host-57
Date init: Tue 23 Aug 2022 06:22:56 PM PDT
OAR_JOB_ID: 3743711
script/workingdir/SimFix/
GPR[SSUP]-1661304176104
=================================================
Project : lang_43	start : 22/08/23 18:22

GPR[ESUP]-1661304177386
GPR[SFL]-1661304177531
GPR[EFL]-1661304177574
GPR[SFP]-1661304177574
TIMEOUT : 18000000
GPR[SSUN]-1661304177585
org.apache.commons.lang.text.ExtendedMessageFormat,158
========
case START_FE :

case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;


========
GPR[SPVS]-1661304178138
GPR[SPVAP]-1661304178138
GPR[EPVAP]-1661304179372
GPR[EPVS]-1661304179372
========
case QUOTE :
getQuotedString(pattern,pos,false);
appendQuotedString(pattern,pos,stripCustom,true);
break;



========
GPR[SPVS]-1661304179375
GPR[SPVAP]-1661304179375
GPR[EPVAP]-1661304182199
GPR[SPVATF]-1661304182199
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304183129
GPR[EPVS]-1661304183129
========
default :

case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;


========
GPR[SPVS]-1661304183133
GPR[SPVAP]-1661304183133
GPR[EPVAP]-1661304183794
GPR[EPVS]-1661304183794
GPR[ESUN]-1661304183796
GPR[SSUN]-1661304183796
org.apache.commons.lang.text.ExtendedMessageFormat,159
========
case QUOTE :
getQuotedString(pattern,pos,false);
appendQuotedString(pattern,pos,stripCustom,true);
break;


case START_FE :


========
GPR[SPVS]-1661304184586
GPR[SPVAP]-1661304184586
GPR[EPVAP]-1661304187825
GPR[SPVATF]-1661304187825
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304188760
GPR[EPVS]-1661304188760
GPR[ESUN]-1661304188762
GPR[SSUN]-1661304188763
org.apache.commons.lang.text.ExtendedMessageFormat,419
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(c,start,pos.getIndex()-lastHold);
}

========
GPR[SPVS]-1661304189669
GPR[SPVAP]-1661304189669
GPR[EPVAP]-1661304190867
GPR[EPVS]-1661304190867
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
next(pos);
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304190868
GPR[SPVAP]-1661304190869
GPR[EPVAP]-1661304193723
GPR[SPVATF]-1661304193723
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304194649
GPR[SPVATR]-1661304194649
TESTING : lang_43
GPR[EPVATR]-1661304205234
GPR[EPVS]-1661304205234
GPR[PF]-1661304205234
sourceFile  script/workingdir/SimFix/lang/lang_43_buggy/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java
location   script/workingdir/SimFix/lang/lang_43_buggy
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(i&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304205247
GPR[SPVAP]-1661304205247
GPR[EPVAP]-1661304205912
GPR[EPVS]-1661304205913
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
appendTo.append(DUMMY_PATTERN);
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304205914
GPR[SPVAP]-1661304205914
GPR[EPVAP]-1661304207071
GPR[SPVATF]-1661304207071
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304287130
GPR[EPVS]-1661304287130
========
appendTo.append(DUMMY_PATTERN);
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304287133
GPR[SPVAP]-1661304287133
GPR[EPVAP]-1661304288297
GPR[SPVATF]-1661304288297
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304362289
GPR[EPVS]-1661304362289
========
appendTo.append(DUMMY_PATTERN);
int start=pos.getIndex();
char[] c=pattern.toCharArray();
appendTo.append(DUMMY_PATTERN);
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304362292
GPR[SPVAP]-1661304362292
GPR[EPVAP]-1661304363439
GPR[SPVATF]-1661304363439
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304471130
GPR[EPVS]-1661304471130
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&DUMMY_PATTERN!=null){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304471133
GPR[SPVAP]-1661304471133
GPR[EPVAP]-1661304472261
GPR[SPVATF]-1661304472261
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304512656
GPR[EPVS]-1661304512656
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(useFieldNames&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304512657
GPR[SPVAP]-1661304512657
GPR[EPVAP]-1661304513328
GPR[EPVS]-1661304513328
========
char start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304513330
GPR[SPVAP]-1661304513330
GPR[EPVAP]-1661304513989
GPR[EPVS]-1661304513989
========
appendTo.append(QUOTE);
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304513990
GPR[SPVAP]-1661304513990
GPR[EPVAP]-1661304515082
GPR[SPVATF]-1661304515082
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304554666
GPR[EPVS]-1661304554666
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(start&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304554669
GPR[SPVAP]-1661304554669
GPR[EPVAP]-1661304555351
GPR[EPVS]-1661304555351
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(depth&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304555353
GPR[SPVAP]-1661304555353
GPR[EPVAP]-1661304556019
GPR[EPVS]-1661304556019
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(index&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304556021
GPR[SPVAP]-1661304556021
GPR[EPVAP]-1661304556685
GPR[EPVS]-1661304556685
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
appendTo.append(DUMMY_PATTERN);
if(i&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304556688
GPR[SPVAP]-1661304556688
GPR[EPVAP]-1661304557348
GPR[EPVS]-1661304557348
========
int start=pos.getIndex();
char[] c=replaceChars.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304557350
GPR[SPVAP]-1661304557350
GPR[EPVAP]-1661304558012
GPR[EPVS]-1661304558012
========
if(StringUtils.isEmpty(DUMMY_PATTERN)){
return str;
}
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304558014
GPR[SPVAP]-1661304558014
GPR[EPVAP]-1661304558688
GPR[EPVS]-1661304558689
========
if(pattern.length()==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304558690
GPR[SPVAP]-1661304558690
GPR[EPVAP]-1661304559353
GPR[EPVS]-1661304559353
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==END_FE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304559357
GPR[SPVAP]-1661304559357
GPR[EPVAP]-1661304561245
GPR[SPVATF]-1661304561245
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304562301
GPR[EPVS]-1661304562301
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(QUOTE!=START_FMT&&QUOTE!=END_FE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304562302
GPR[SPVAP]-1661304562302
GPR[EPVAP]-1661304563409
GPR[SPVATF]-1661304563409
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304603925
GPR[EPVS]-1661304603925
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]!=QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304603927
GPR[SPVAP]-1661304603927
GPR[EPVAP]-1661304605017
GPR[SPVATF]-1661304605017
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304605952
GPR[EPVS]-1661304605952
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(QUOTE!=START_FMT&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304605954
GPR[SPVAP]-1661304605954
GPR[EPVAP]-1661304607049
GPR[SPVATF]-1661304607049
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304647894
GPR[EPVS]-1661304647894
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&QUOTE!=END_FE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304647896
GPR[SPVAP]-1661304647896
GPR[EPVAP]-1661304649025
GPR[SPVATF]-1661304649025
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304689337
GPR[EPVS]-1661304689337
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]!=END_FE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304689339
GPR[SPVAP]-1661304689339
GPR[EPVAP]-1661304690449
GPR[SPVATF]-1661304690449
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304731333
GPR[EPVS]-1661304731333
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(QUOTE!=START_FMT&&c[start]==END_FE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304731335
GPR[SPVAP]-1661304731335
GPR[EPVAP]-1661304732465
GPR[SPVATF]-1661304732465
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304733402
GPR[EPVS]-1661304733402
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(QUOTE!=START_FMT&&c[start]!=QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304733404
GPR[SPVAP]-1661304733404
GPR[EPVAP]-1661304734484
GPR[SPVATF]-1661304734484
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304735420
GPR[EPVS]-1661304735420
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(QUOTE!=START_FMT&&c[start]!=END_FE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304735422
GPR[SPVAP]-1661304735422
GPR[EPVAP]-1661304736525
GPR[SPVATF]-1661304736525
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304777386
GPR[EPVS]-1661304777386
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&QUOTE!='\''){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304777390
GPR[SPVAP]-1661304777390
GPR[EPVAP]-1661304778505
GPR[SPVATF]-1661304778505
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304779434
GPR[EPVS]-1661304779434
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(inLiteral&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304779435
GPR[SPVAP]-1661304779435
GPR[EPVAP]-1661304780098
GPR[EPVS]-1661304780098
========
int start=pos.getIndex();
char[] c=str.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304780100
GPR[SPVAP]-1661304780100
GPR[EPVAP]-1661304780768
GPR[EPVS]-1661304780768
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(loopIndex&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304780769
GPR[SPVAP]-1661304780769
GPR[EPVAP]-1661304781450
GPR[EPVS]-1661304781450
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if((QUOTE==QUOTE)&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304781453
GPR[SPVAP]-1661304781453
GPR[EPVAP]-1661304782671
GPR[SPVATF]-1661304782671
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304823459
GPR[EPVS]-1661304823459
========
if(StringUtils.isEmpty(pattern)){
return false;
}
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304823461
GPR[SPVAP]-1661304823461
GPR[EPVAP]-1661304824141
GPR[EPVS]-1661304824141
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(DUMMY_PATTERN!=null&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304824143
GPR[SPVAP]-1661304824143
GPR[EPVAP]-1661304825264
GPR[SPVATF]-1661304825264
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304866168
GPR[EPVS]-1661304866168
========
int start=escapingOn?pos.getIndex():Integer.toString(start);
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304866171
GPR[SPVAP]-1661304866171
GPR[EPVAP]-1661304866832
GPR[EPVS]-1661304866832
========
pos.setIndex(0);
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304866834
GPR[SPVAP]-1661304866834
GPR[EPVAP]-1661304867934
GPR[SPVATF]-1661304867934
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304899117
GPR[EPVS]-1661304899117
========
pos.setIndex(0);
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(i&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304899120
GPR[SPVAP]-1661304899120
GPR[EPVAP]-1661304899799
GPR[EPVS]-1661304899799
========
case START_FE :

int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304899801
GPR[SPVAP]-1661304899801
GPR[EPVAP]-1661304900344
GPR[EPVS]-1661304900344
========
if(isEmpty(DUMMY_PATTERN)||str.indexOf(QUOTE)==-1){
return str;
}
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304900347
GPR[SPVAP]-1661304900347
GPR[EPVAP]-1661304901028
GPR[EPVS]-1661304901028
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(isEquals&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304901029
GPR[SPVAP]-1661304901029
GPR[EPVAP]-1661304901700
GPR[EPVS]-1661304901700
========
if(start>pattern.length()){
return EMPTY;
}
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304901702
GPR[SPVAP]-1661304901702
GPR[EPVAP]-1661304902364
GPR[EPVS]-1661304902364
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if((QUOTE==START_FMT||c==END_FE)&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304902367
GPR[SPVAP]-1661304902367
GPR[EPVAP]-1661304903031
GPR[EPVS]-1661304903031
========
escapingOn=!Character.isDigit(QUOTE);
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304903032
GPR[SPVAP]-1661304903032
GPR[EPVAP]-1661304904147
GPR[SPVATF]-1661304904148
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304949385
GPR[EPVS]-1661304949385
========
escapingOn=!Character.isDigit(QUOTE);
appendTo.append(QUOTE);
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304949386
GPR[SPVAP]-1661304949386
GPR[EPVAP]-1661304950499
GPR[SPVATF]-1661304950499
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661304990037
GPR[EPVS]-1661304990037
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(match&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304990039
GPR[SPVAP]-1661304990039
GPR[EPVAP]-1661304990706
GPR[EPVS]-1661304990706
========
if(pattern.indexOf(DUMMY_PATTERN,start)<0){
break;
}
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304990708
GPR[SPVAP]-1661304990708
GPR[EPVAP]-1661304991376
GPR[EPVS]-1661304991376
========
int start=pos.getIndex();
char[] c=searchString.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304991378
GPR[SPVAP]-1661304991378
GPR[EPVAP]-1661304992061
GPR[EPVS]-1661304992061
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(isEmpty(DUMMY_PATTERN)||isEmpty(pattern)){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304992063
GPR[SPVAP]-1661304992063
GPR[EPVAP]-1661304992727
GPR[EPVS]-1661304992727
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(isEmpty(DUMMY_PATTERN)||isEmpty(pattern)&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304992729
GPR[SPVAP]-1661304992729
GPR[EPVAP]-1661304993395
GPR[EPVS]-1661304993395
========
int start=pos.getIndex();
if(DUMMY_PATTERN.indexOf(pattern,start)==-1){
return DUMMY_PATTERN;
}
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304993396
GPR[SPVAP]-1661304993396
GPR[EPVAP]-1661304994053
GPR[EPVS]-1661304994053
========
if(DUMMY_PATTERN==null||DUMMY_PATTERN==null||DUMMY_PATTERN==null){
return null;
}
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661304994057
GPR[SPVAP]-1661304994057
GPR[EPVAP]-1661304995159
GPR[SPVATF]-1661304995159
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305036002
GPR[EPVS]-1661305036002
========
if(DUMMY_PATTERN==null||DUMMY_PATTERN==null||DUMMY_PATTERN==null){
return null;
}
int start=pos.getIndex();
char[] c=str.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305036003
GPR[SPVAP]-1661305036003
GPR[EPVAP]-1661305036668
GPR[EPVS]-1661305036668
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(len&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305036670
GPR[SPVAP]-1661305036670
GPR[EPVAP]-1661305037326
GPR[EPVS]-1661305037326
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if((start==0)&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305037329
GPR[SPVAP]-1661305037329
GPR[EPVAP]-1661305038451
GPR[SPVATF]-1661305038451
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305039394
GPR[EPVS]-1661305039394
========
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(sz&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305039395
GPR[SPVAP]-1661305039395
GPR[EPVAP]-1661305040059
GPR[EPVS]-1661305040059
========
start--;
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305040060
GPR[SPVAP]-1661305040060
GPR[EPVAP]-1661305040728
GPR[EPVS]-1661305040728
========
appendTo.append(DUMMY_PATTERN);
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(i&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305040730
GPR[SPVAP]-1661305040730
GPR[EPVAP]-1661305041402
GPR[EPVS]-1661305041402
========
appendTo.append(DUMMY_PATTERN);
int start=pos.getIndex();
char[] c=pattern.toCharArray();
appendTo.append(DUMMY_PATTERN);
if(i&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305041403
GPR[SPVAP]-1661305041403
GPR[EPVAP]-1661305042063
GPR[EPVS]-1661305042063
========
start--;
int start=pos.getIndex();
char[] c=pattern.toCharArray();
if(sz&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305042071
GPR[SPVAP]-1661305042071
GPR[EPVAP]-1661305042741
GPR[EPVS]-1661305042741
GPR[ESUN]-1661305042742
GPR[SSUN]-1661305042742
org.apache.commons.lang.text.ExtendedMessageFormat,420
GPR[ESUN]-1661305042857
GPR[SSUN]-1661305042857
org.apache.commons.lang.text.ExtendedMessageFormat,421
========
if(escapingOn&&DUMMY_PATTERN!=null){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305043512
GPR[SPVAP]-1661305043512
GPR[EPVAP]-1661305046718
GPR[SPVATF]-1661305046718
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305086968
GPR[EPVS]-1661305086968
========
if(useFieldNames&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305086970
GPR[SPVAP]-1661305086970
GPR[EPVAP]-1661305087655
GPR[EPVS]-1661305087655
========
if(escapingOn&&QUOTE!='\''){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305087658
GPR[SPVAP]-1661305087658
GPR[EPVAP]-1661305088772
GPR[SPVATF]-1661305088772
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305089716
GPR[EPVS]-1661305089716
========
if(inLiteral&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305089717
GPR[SPVAP]-1661305089717
GPR[EPVAP]-1661305090376
GPR[EPVS]-1661305090376
========
if(i&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305090378
GPR[SPVAP]-1661305090378
GPR[EPVAP]-1661305091040
GPR[EPVS]-1661305091040
========
if(index&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305091041
GPR[SPVAP]-1661305091041
GPR[EPVAP]-1661305091715
GPR[EPVS]-1661305091715
========
if(loopIndex&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305091717
GPR[SPVAP]-1661305091717
GPR[EPVAP]-1661305092382
GPR[EPVS]-1661305092382
========
if(DUMMY_PATTERN!=null&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305092383
GPR[SPVAP]-1661305092383
GPR[EPVAP]-1661305093491
GPR[SPVATF]-1661305093491
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305134278
GPR[EPVS]-1661305134279
========
if(!escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305134280
GPR[SPVAP]-1661305134280
GPR[EPVAP]-1661305135402
GPR[SPVATF]-1661305135402
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305136340
GPR[EPVS]-1661305136340
========
if(escapingOn&&c[start]==c){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305136341
GPR[SPVAP]-1661305136341
GPR[EPVAP]-1661305137008
GPR[EPVS]-1661305137008
========
if((QUOTE==QUOTE)&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305137010
GPR[SPVAP]-1661305137010
GPR[EPVAP]-1661305138115
GPR[SPVATF]-1661305138115
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305179043
GPR[EPVS]-1661305179043
========
appendTo.append(QUOTE);
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305179045
GPR[SPVAP]-1661305179045
GPR[EPVAP]-1661305180249
GPR[SPVATF]-1661305180249
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305223105
GPR[EPVS]-1661305223105
========
QUOTE=QUOTE;
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305223106
GPR[SPVAP]-1661305223106
GPR[EPVAP]-1661305223770
GPR[EPVS]-1661305223770
========
appendTo.append(QUOTE);
if((QUOTE==QUOTE)&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305223771
GPR[SPVAP]-1661305223771
GPR[EPVAP]-1661305224893
GPR[SPVATF]-1661305224893
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305267345
GPR[EPVS]-1661305267345
========
if(start+1<start&&pattern.charAt(start+1)=='\''){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305267347
GPR[SPVAP]-1661305267347
GPR[EPVAP]-1661305268466
GPR[SPVATF]-1661305268466
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305269401
GPR[EPVS]-1661305269401
========
if(start+1<start&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305269402
GPR[SPVAP]-1661305269402
GPR[EPVAP]-1661305270490
GPR[SPVATF]-1661305270490
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305271424
GPR[EPVS]-1661305271424
========
if(escapingOn&&pattern.charAt(start+1)=='\''){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305271425
GPR[SPVAP]-1661305271425
GPR[EPVAP]-1661305272526
GPR[SPVATF]-1661305272526
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305318707
GPR[EPVS]-1661305318707
========
if(length&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305318709
GPR[SPVAP]-1661305318709
GPR[EPVAP]-1661305319375
GPR[EPVS]-1661305319375
========
if(i&&pattern.charAt(start+1)=='\''){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305319377
GPR[SPVAP]-1661305319377
GPR[EPVAP]-1661305320040
GPR[EPVS]-1661305320040
========
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(c,start,pos.getIndex()-lastHold);
}

========
GPR[SPVS]-1661305320041
GPR[SPVAP]-1661305320041
GPR[EPVAP]-1661305320705
GPR[EPVS]-1661305320705
========
if(escapingOn&&c[start]==QUOTE){
next(pos);
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305320706
GPR[SPVAP]-1661305320706
GPR[EPVAP]-1661305321800
GPR[SPVATF]-1661305321800
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305322721
GPR[SPVATR]-1661305322722
TESTING : lang_43
GPR[EPVATR]-1661305333031
GPR[EPVS]-1661305333031
GPR[PF]-1661305333031
sourceFile  script/workingdir/SimFix/lang/lang_43_buggy/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java
location   script/workingdir/SimFix/lang/lang_43_buggy
========
default :

if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305333040
GPR[SPVAP]-1661305333040
GPR[EPVAP]-1661305333594
GPR[EPVS]-1661305333594
========
if(isEquals&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305333595
GPR[SPVAP]-1661305333595
GPR[EPVAP]-1661305334261
GPR[EPVS]-1661305334261
========
if(upper&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305334262
GPR[SPVAP]-1661305334262
GPR[EPVAP]-1661305334919
GPR[EPVS]-1661305334919
========
if((c==START_FMT||c==END_FE)&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305334922
GPR[SPVAP]-1661305334922
GPR[EPVAP]-1661305335585
GPR[EPVS]-1661305335585
========
escapingOn=!Character.isDigit(c);
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305335587
GPR[SPVAP]-1661305335587
GPR[EPVAP]-1661305336255
GPR[EPVS]-1661305336255
========
appendTo.append(c);
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305336257
GPR[SPVAP]-1661305336257
GPR[EPVAP]-1661305337372
GPR[SPVATF]-1661305337372
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305343064
GPR[EPVS]-1661305343064
========
if(start&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305343066
GPR[SPVAP]-1661305343066
GPR[EPVAP]-1661305343732
GPR[EPVS]-1661305343732
========
if(type&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305343733
GPR[SPVAP]-1661305343733
GPR[EPVAP]-1661305344410
GPR[EPVS]-1661305344410
========
if(textIndex&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305344412
GPR[SPVAP]-1661305344412
GPR[EPVAP]-1661305345080
GPR[EPVS]-1661305345080
========
if(start==0||getDelimiterMatcher().isMatch(c,start,start,start)>0&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305345082
GPR[SPVAP]-1661305345082
GPR[EPVAP]-1661305345755
GPR[EPVS]-1661305345755
========
if(removeLen&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305345757
GPR[SPVAP]-1661305345757
GPR[EPVAP]-1661305346425
GPR[EPVS]-1661305346425
========
if(match&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305346426
GPR[SPVAP]-1661305346426
GPR[EPVAP]-1661305347102
GPR[EPVS]-1661305347102
========
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||replacementList[i]==null){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305347104
GPR[SPVAP]-1661305347104
GPR[EPVAP]-1661305347769
GPR[EPVS]-1661305347769
========
if(escapingOn&&c[start]==null){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305347771
GPR[SPVAP]-1661305347771
GPR[EPVAP]-1661305348443
GPR[EPVS]-1661305348443
========
deleteImpl(start,start,start-start);
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305348445
GPR[SPVAP]-1661305348445
GPR[EPVAP]-1661305349113
GPR[EPVS]-1661305349113
========
if(DUMMY_PATTERN==null||DUMMY_PATTERN==null||DUMMY_PATTERN==null){
return null;
}
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305349114
GPR[SPVAP]-1661305349114
GPR[EPVAP]-1661305350215
GPR[SPVATF]-1661305350215
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305391271
GPR[EPVS]-1661305391271
========
if(DUMMY_PATTERN==null||DUMMY_PATTERN==null||DUMMY_PATTERN==null){
return null;
}
if(start&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305391273
GPR[SPVAP]-1661305391273
GPR[EPVAP]-1661305391960
GPR[EPVS]-1661305391960
========
if(sz&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305391962
GPR[SPVAP]-1661305391962
GPR[EPVAP]-1661305392630
GPR[EPVS]-1661305392631
========
if((start==0)&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305392632
GPR[SPVAP]-1661305392632
GPR[EPVAP]-1661305393732
GPR[SPVATF]-1661305393732
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305394677
GPR[EPVS]-1661305394677
========
start=++start;
if(escapingOn&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305394679
GPR[SPVAP]-1661305394679
GPR[EPVAP]-1661305395769
GPR[SPVATF]-1661305395769
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305437541
GPR[EPVS]-1661305437541
========
start=++start;
if(match&&c[start]==QUOTE){
return appendTo==null?null:appendTo.append(QUOTE);
}

========
GPR[SPVS]-1661305437543
GPR[SPVAP]-1661305437543
GPR[EPVAP]-1661305438209
GPR[EPVS]-1661305438209
GPR[ESUN]-1661305438213
GPR[SSUN]-1661305438213
org.apache.commons.lang.text.ExtendedMessageFormat,422
GPR[ESUN]-1661305438340
GPR[SSUN]-1661305438340
org.apache.commons.lang.text.ExtendedMessageFormat,112
GPR[ESUN]-1661305438696
GPR[SSUN]-1661305438696
org.apache.commons.lang.text.ExtendedMessageFormat,148
========
if(registry!=null){
super.applyPattern(pattern);
toPattern=super.toPattern();
return ;
}
ArrayList foundFormats=new ArrayList();
ArrayList foundDescriptions=new ArrayList();

========
GPR[SPVS]-1661305439064
GPR[SPVAP]-1661305439064
GPR[EPVAP]-1661305442264
GPR[SPVATF]-1661305442264
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305443203
GPR[EPVS]-1661305443203
========
if(registry==null){
if((FormatFactory)registry.get(DUMMY_PATTERN)!=null){
return (FormatFactory)registry.get(DUMMY_PATTERN).getFormat(DUMMY_PATTERN,toPattern,getLocale());
}
super.applyPattern(pattern);
toPattern=super.toPattern();
return ;
}
ArrayList foundFormats=new ArrayList();
ArrayList foundDescriptions=new ArrayList();

========
GPR[SPVS]-1661305443205
GPR[SPVAP]-1661305443205
GPR[EPVAP]-1661305443867
GPR[EPVS]-1661305443867
GPR[ESUN]-1661305443868
GPR[SSUN]-1661305443868
org.apache.commons.lang.text.ExtendedMessageFormat,149
GPR[ESUN]-1661305444293
GPR[SSUN]-1661305444293
org.apache.commons.lang.text.ExtendedMessageFormat,150
GPR[ESUN]-1661305444694
GPR[SSUN]-1661305444694
org.apache.commons.lang.text.ExtendedMessageFormat,152
========
seekNonWs(pattern,pos);
StringBuffer stripCustom=new StringBuffer(pattern.length());
ParsePosition pos=new ParsePosition(0);
char[] c=pattern.toCharArray();

========
GPR[SPVS]-1661305445082
GPR[SPVAP]-1661305445082
GPR[EPVAP]-1661305446283
GPR[EPVS]-1661305446283
========
StringBuffer stripCustom=new StringBuffer(pattern.length());
ParsePosition pos=new ParsePosition(0);
char[] c=str.toCharArray();

========
GPR[SPVS]-1661305446285
GPR[SPVAP]-1661305446285
GPR[EPVAP]-1661305447073
GPR[EPVS]-1661305447073
========
stripCustom.append(START_FE).append(readArgumentIndex(pattern,next(pos)));
StringBuffer stripCustom=new StringBuffer(pattern.length());
ParsePosition pos=new ParsePosition(0);
char[] c=pattern.toCharArray();

========
GPR[SPVS]-1661305447075
GPR[SPVAP]-1661305447075
GPR[EPVAP]-1661305447886
GPR[EPVS]-1661305447886
========
StringBuffer stripCustom=new StringBuffer(pattern.length());
ParsePosition pos=new ParsePosition(0);
char[] c=padStr.toCharArray();

========
GPR[SPVS]-1661305447888
GPR[SPVAP]-1661305447888
GPR[EPVAP]-1661305448688
GPR[EPVS]-1661305448688
========
StringBuffer stripCustom=new StringBuffer(pattern.length());
ParsePosition pos=new ParsePosition(0);
char[] c=format.toCharArray();

========
GPR[SPVS]-1661305448689
GPR[SPVAP]-1661305448689
GPR[EPVAP]-1661305449484
GPR[EPVS]-1661305449484
========
StringBuffer stripCustom=new StringBuffer(pattern.length());
ParsePosition pos=new ParsePosition(0);
if(StringUtils.isEmpty(pattern)){
return false;
}
char[] c=pattern.toCharArray();

========
GPR[SPVS]-1661305449486
GPR[SPVAP]-1661305449486
GPR[EPVAP]-1661305450299
GPR[EPVS]-1661305450299
========
if(Character.isWhitespace(pattern.charAt(pos.getIndex()))){
seekNonWs(pattern,pos);
c=pattern.charAt(pos.getIndex());
if(c!=START_FMT&&c!=END_FE){
c=true;
continue;
}
}
StringBuffer stripCustom=new StringBuffer(pattern.length());
ParsePosition pos=new ParsePosition(0);
char[] c=pattern.toCharArray();

========
GPR[SPVS]-1661305450300
GPR[SPVAP]-1661305450300
GPR[EPVAP]-1661305451112
GPR[EPVS]-1661305451112
========
StringBuffer stripCustom=new StringBuffer(pattern.length());
ParsePosition pos=new ParsePosition(0);
if(isEmpty(pattern)||str.indexOf(QUOTE)==-1){
return str;
}
char[] c=pattern.toCharArray();

========
GPR[SPVS]-1661305451114
GPR[SPVAP]-1661305451114
GPR[EPVAP]-1661305451912
GPR[EPVS]-1661305451912
========
StringBuffer stripCustom=new StringBuffer(pattern.length());
ParsePosition pos=new ParsePosition(0);
pos.setIndex(0);
char[] c=pattern.toCharArray();

========
GPR[SPVS]-1661305451914
GPR[SPVAP]-1661305451914
GPR[EPVAP]-1661305454683
GPR[SPVATF]-1661305454683
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305495549
GPR[EPVS]-1661305495549
========
StringBuffer stripCustom=new StringBuffer(pattern.length());
ParsePosition pos=new ParsePosition(0);
if(StringUtils.isEmpty(pattern)){
return false;
}
char[] c=str.toCharArray();

========
GPR[SPVS]-1661305495552
GPR[SPVAP]-1661305495552
GPR[EPVAP]-1661305496239
GPR[EPVS]-1661305496239
GPR[ESUN]-1661305496239
GPR[SSUN]-1661305496239
org.apache.commons.lang.text.ExtendedMessageFormat,153
========
ParsePosition pos=new ParsePosition(0);
char[] c=pattern.toCharArray();
if(!containsElements(foundFormats)){
return pattern;
}
int fmtCount=0;

========
GPR[SPVS]-1661305496695
GPR[SPVAP]-1661305496695
GPR[EPVAP]-1661305497891
GPR[EPVS]-1661305497891
========
ParsePosition pos=new ParsePosition(0);
char[] c=str.toCharArray();
int fmtCount=0;

========
GPR[SPVS]-1661305497893
GPR[SPVAP]-1661305497893
GPR[EPVAP]-1661305498691
GPR[EPVS]-1661305498691
========
ParsePosition pos=new ParsePosition(0);
char[] c=padStr.toCharArray();
int fmtCount=0;

========
GPR[SPVS]-1661305498693
GPR[SPVAP]-1661305498693
GPR[EPVAP]-1661305499495
GPR[EPVS]-1661305499495
========
ParsePosition pos=new ParsePosition(0);
char[] c=format.toCharArray();
int fmtCount=0;

========
GPR[SPVS]-1661305499497
GPR[SPVAP]-1661305499497
GPR[EPVAP]-1661305500295
GPR[EPVS]-1661305500295
========
ParsePosition pos=new ParsePosition(0);
if(StringUtils.isEmpty(pattern)){
return false;
}
char[] c=pattern.toCharArray();
int fmtCount=0;

========
GPR[SPVS]-1661305500296
GPR[SPVAP]-1661305500296
GPR[EPVAP]-1661305501098
GPR[EPVS]-1661305501098
========
seekNonWs(pattern,pos);
ParsePosition pos=new ParsePosition(0);
char[] c=pattern.toCharArray();
int fmtCount=0;

========
GPR[SPVS]-1661305501099
GPR[SPVAP]-1661305501099
GPR[EPVAP]-1661305501917
GPR[EPVS]-1661305501917
========
ParsePosition pos=new ParsePosition(0);
if(isEmpty(DUMMY_PATTERN)||str.indexOf(QUOTE)==-1){
return str;
}
char[] c=pattern.toCharArray();
int fmtCount=0;

========
GPR[SPVS]-1661305501919
GPR[SPVAP]-1661305501919
GPR[EPVAP]-1661305502721
GPR[EPVS]-1661305502721
========
ParsePosition pos=new ParsePosition(0);
char[] c=pattern.toCharArray();
seekNonWs(pattern,pos);
int fmtCount=0;

========
GPR[SPVS]-1661305502722
GPR[SPVAP]-1661305502722
GPR[EPVAP]-1661305505547
GPR[SPVATF]-1661305505547
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305546411
GPR[EPVS]-1661305546411
========
if(Character.isWhitespace(c)){
seekNonWs(pattern,pos);
c=pattern.charAt(pos.getIndex());
if(c!=START_FMT&&c!=END_FE){
fmtCount=true;
continue;
}
}
ParsePosition pos=new ParsePosition(0);
char[] c=pattern.toCharArray();
int fmtCount=0;

========
GPR[SPVS]-1661305546413
GPR[SPVAP]-1661305546413
GPR[EPVAP]-1661305547083
GPR[EPVS]-1661305547083
========
ParsePosition pos=new ParsePosition(0);
pos.setIndex(0);
char[] c=pattern.toCharArray();
int fmtCount=0;

========
GPR[SPVS]-1661305547085
GPR[SPVAP]-1661305547085
GPR[EPVAP]-1661305548209
GPR[SPVATF]-1661305548209
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305589218
GPR[EPVS]-1661305589218
========
ParsePosition pos=new ParsePosition(0);
char[] c=pattern.toCharArray();
int fmtCount=pos;

========
GPR[SPVS]-1661305589220
GPR[SPVAP]-1661305589220
GPR[EPVAP]-1661305589887
GPR[EPVS]-1661305589888
========
ParsePosition pos=new ParsePosition(0);
if(StringUtils.isEmpty(pattern)){
return false;
}
char[] c=str.toCharArray();
int fmtCount=0;

========
GPR[SPVS]-1661305589889
GPR[SPVAP]-1661305589889
GPR[EPVAP]-1661305590548
GPR[EPVS]-1661305590549
GPR[ESUN]-1661305590549
GPR[SSUN]-1661305590549
org.apache.commons.lang.text.ExtendedMessageFormat,154
GPR[ESUN]-1661305590668
GPR[SSUN]-1661305590668
org.apache.commons.lang.text.ExtendedMessageFormat,155
========
if(format!=null){
stripCustom.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661305591253
GPR[SPVAP]-1661305591253
GPR[EPVAP]-1661305594436
GPR[SPVATF]-1661305594436
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305635083
GPR[EPVS]-1661305635083
========
if(format==QUOTE){
stripCustom.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661305635085
GPR[SPVAP]-1661305635085
GPR[EPVAP]-1661305635755
GPR[EPVS]-1661305635755
========
if(format==null){
stripCustom.append(QUOTE);
stripCustom.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661305635756
GPR[SPVAP]-1661305635756
GPR[EPVAP]-1661305636858
GPR[SPVATF]-1661305636858
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305677702
GPR[EPVS]-1661305677702
========
if(format!=null){
stripCustom.append(QUOTE);
stripCustom.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661305677703
GPR[SPVAP]-1661305677703
GPR[EPVAP]-1661305678831
GPR[SPVATF]-1661305678831
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305719672
GPR[EPVS]-1661305719672
========
if(format==null){
stripCustom.append(START_FMT).append(DUMMY_PATTERN);
}

========
GPR[SPVS]-1661305719674
GPR[SPVAP]-1661305719674
GPR[EPVAP]-1661305720799
GPR[SPVATF]-1661305720799
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305761882
GPR[EPVS]-1661305761882
========
if(format==null){
stripCustom.append(formatDescription);
stripCustom.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661305761883
GPR[SPVAP]-1661305761883
GPR[EPVAP]-1661305763006
GPR[SPVATF]-1661305763006
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305803759
GPR[EPVS]-1661305803759
========
if(format==null){
stripCustom.append(formatDescription);
stripCustom.append(START_FMT).append(DUMMY_PATTERN);
}

========
GPR[SPVS]-1661305803761
GPR[SPVAP]-1661305803761
GPR[EPVAP]-1661305804869
GPR[SPVATF]-1661305804869
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305845957
GPR[EPVS]-1661305845957
========
if(format==null){
stripCustom.append(START_FMT).append(QUOTE);
}

========
GPR[SPVS]-1661305845959
GPR[SPVAP]-1661305845959
GPR[EPVAP]-1661305847080
GPR[SPVATF]-1661305847080
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305887935
GPR[EPVS]-1661305887935
========
if(format==null){
continue;
stripCustom.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661305887937
GPR[SPVAP]-1661305887937
GPR[EPVAP]-1661305888608
GPR[EPVS]-1661305888608
========
stripCustom.append(QUOTE);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661305888610
GPR[SPVAP]-1661305888610
GPR[EPVAP]-1661305889735
GPR[SPVATF]-1661305889735
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305930681
GPR[EPVS]-1661305930681
========
QUOTE=QUOTE;
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661305930682
GPR[SPVAP]-1661305930682
GPR[EPVAP]-1661305931346
GPR[EPVS]-1661305931346
========
if(format==null){
fmtCount++;
stripCustom.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661305931348
GPR[SPVAP]-1661305931348
GPR[EPVAP]-1661305932460
GPR[SPVATF]-1661305932460
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661305973241
GPR[EPVS]-1661305973241
========
if(format==false){
stripCustom.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661305973242
GPR[SPVAP]-1661305973242
GPR[EPVAP]-1661305973916
GPR[EPVS]-1661305973916
========
if(format==null){
appendTo.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661305973918
GPR[SPVAP]-1661305973918
GPR[EPVAP]-1661305974587
GPR[EPVS]-1661305974587
========
if(format==null){
pos.setIndex(fmtCount+ESCAPED_QUOTE.length());
stripCustom.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661305974589
GPR[SPVAP]-1661305974589
GPR[EPVAP]-1661305975701
GPR[SPVATF]-1661305975701
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306016497
GPR[EPVS]-1661306016497
========
if(format==null){
lastHold=pos.getIndex();
stripCustom.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661306016499
GPR[SPVAP]-1661306016499
GPR[EPVAP]-1661306017181
GPR[EPVS]-1661306017181
========
if(format==null){
pos.setIndex(fmtCount+ESCAPED_QUOTE.length());
lastHold=pos.getIndex();
continue;

stripCustom.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661306017182
GPR[SPVAP]-1661306017183
GPR[EPVAP]-1661306017847
GPR[EPVS]-1661306017847
========
if(format==null){
pos.setIndex(fmtCount+ESCAPED_QUOTE.length());
stripCustom.append(START_FMT).append(QUOTE);
}

========
GPR[SPVS]-1661306017848
GPR[SPVAP]-1661306017848
GPR[EPVAP]-1661306018963
GPR[SPVATF]-1661306018963
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306059793
GPR[EPVS]-1661306059793
========
if(format==null){
continue;
stripCustom.append(START_FMT).append(QUOTE);
}

========
GPR[SPVS]-1661306059794
GPR[SPVAP]-1661306059794
GPR[EPVAP]-1661306060451
GPR[EPVS]-1661306060451
========
if(format==null){
pos.setIndex(fmtCount+ESCAPED_QUOTE.length());
continue;
stripCustom.append(START_FMT).append(formatDescription);
}

========
GPR[SPVS]-1661306060453
GPR[SPVAP]-1661306060453
GPR[EPVAP]-1661306061123
GPR[EPVS]-1661306061123
========
if(format==null){
pos.setIndex(fmtCount+ESCAPED_QUOTE.length());
continue;
stripCustom.append(START_FMT).append(QUOTE);
}

========
GPR[SPVS]-1661306061124
GPR[SPVAP]-1661306061124
GPR[EPVAP]-1661306061770
GPR[EPVS]-1661306061770
========
if(c[pos.getIndex()]==c){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}

========
GPR[SPVS]-1661306062414
GPR[SPVAP]-1661306062414
GPR[EPVAP]-1661306063076
GPR[EPVS]-1661306063076
========
if(format==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}

========
GPR[SPVS]-1661306063077
GPR[SPVAP]-1661306063077
GPR[EPVAP]-1661306063737
GPR[EPVS]-1661306063737
========
if(c[pos.getIndex()]==null){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}

========
GPR[SPVS]-1661306063739
GPR[SPVAP]-1661306063739
GPR[EPVAP]-1661306064409
GPR[EPVS]-1661306064409
========
if(stripCustom==null){
buffer=new StringBuffer();
}
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}

========
GPR[SPVS]-1661306064411
GPR[SPVAP]-1661306064411
GPR[EPVAP]-1661306065080
GPR[EPVS]-1661306065080
========
new StrBuilder(256).append("Infinite loop in property interpolation of ");
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}

========
GPR[SPVS]-1661306065082
GPR[SPVAP]-1661306065082
GPR[EPVAP]-1661306066215
GPR[SPVATF]-1661306066215
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306110284
GPR[EPVS]-1661306110284
========
new StrBuilder(256).append(": ");
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}

========
GPR[SPVS]-1661306110285
GPR[SPVAP]-1661306110285
GPR[EPVAP]-1661306111398
GPR[SPVATF]-1661306111398
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306155722
GPR[EPVS]-1661306155722
========
new StrBuilder(256).append("Infinite loop in property interpolation of ");
new StrBuilder(256).append(": ");
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}

========
GPR[SPVS]-1661306155724
GPR[SPVAP]-1661306155724
GPR[EPVAP]-1661306156826
GPR[SPVATF]-1661306156826
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306201093
GPR[EPVS]-1661306201093
========
if(c[pos.getIndex()]==END_FE){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}

========
GPR[SPVS]-1661306201095
GPR[SPVAP]-1661306201095
GPR[EPVAP]-1661306202217
GPR[SPVATF]-1661306202217
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306243236
GPR[EPVS]-1661306243236
========
if(c[pos.getIndex()]!=START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}

========
GPR[SPVS]-1661306243238
GPR[SPVAP]-1661306243238
GPR[EPVAP]-1661306244344
GPR[SPVATF]-1661306244344
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306285367
GPR[EPVS]-1661306285367
========
if(c[pos.getIndex()]!=END_FE){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}

========
GPR[SPVS]-1661306285368
GPR[SPVAP]-1661306285368
GPR[EPVAP]-1661306286485
GPR[SPVATF]-1661306286485
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306327441
GPR[EPVS]-1661306327441
========
if(c[pos.getIndex()]==QUOTE){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}

========
GPR[SPVS]-1661306327443
GPR[SPVAP]-1661306327443
GPR[EPVAP]-1661306328559
GPR[SPVATF]-1661306328559
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306369325
GPR[EPVS]-1661306369325
========
stripCustom.append(c);
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}

========
GPR[SPVS]-1661306369328
GPR[SPVAP]-1661306369328
GPR[EPVAP]-1661306370447
GPR[SPVATF]-1661306370447
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306411473
GPR[EPVS]-1661306411473
========
substitute(new StrBuilder(stripCustom.length()).append(source),0,buf.length());
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}

========
GPR[SPVS]-1661306411475
GPR[SPVAP]-1661306411475
GPR[EPVAP]-1661306412147
GPR[EPVS]-1661306412147
========
if(c[pos.getIndex()]!=QUOTE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

========
GPR[SPVS]-1661306412522
GPR[SPVAP]-1661306412522
GPR[EPVAP]-1661306413620
GPR[SPVATF]-1661306413620
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306454490
GPR[EPVS]-1661306454490
========
if(c[pos.getIndex()]!=END_FE){
if(start&&c[pos.getIndex()]==QUOTE){
return stripCustom==null?null:appendTo.append(QUOTE);
}
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

========
GPR[SPVS]-1661306454492
GPR[SPVAP]-1661306454492
GPR[EPVAP]-1661306455168
GPR[EPVS]-1661306455168
========
if(c[pos.getIndex()]!=c){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

========
GPR[SPVS]-1661306455169
GPR[SPVAP]-1661306455169
GPR[EPVAP]-1661306455833
GPR[EPVS]-1661306455833
========
if(c[pos.getIndex()]!=START_FMT){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

========
GPR[SPVS]-1661306455835
GPR[SPVAP]-1661306455835
GPR[EPVAP]-1661306456960
GPR[SPVATF]-1661306456960
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306497861
GPR[EPVS]-1661306497861
========
if(c[pos.getIndex()]==END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

========
GPR[SPVS]-1661306497863
GPR[SPVAP]-1661306497863
GPR[EPVAP]-1661306498983
GPR[SPVATF]-1661306498983
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306539725
GPR[EPVS]-1661306539725
========
if(c[pos.getIndex()]==START_FMT){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

========
GPR[SPVS]-1661306539726
GPR[SPVAP]-1661306539726
GPR[EPVAP]-1661306540835
GPR[SPVATF]-1661306540835
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306581633
GPR[EPVS]-1661306581633
========
pos.setIndex(0);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

========
GPR[SPVS]-1661306581635
GPR[SPVAP]-1661306581635
GPR[EPVAP]-1661306582735
GPR[SPVATF]-1661306582735
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306623637
GPR[EPVS]-1661306623637
========
if(c[pos.getIndex()]!=null){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

========
GPR[SPVS]-1661306623638
GPR[SPVAP]-1661306623638
GPR[EPVAP]-1661306624303
GPR[EPVS]-1661306624303
========
if(buffer[i]!=QUOTE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

========
GPR[SPVS]-1661306624305
GPR[SPVAP]-1661306624305
GPR[EPVAP]-1661306624971
GPR[EPVS]-1661306624971
========
if(c[fmtCount]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

========
GPR[SPVS]-1661306624972
GPR[SPVAP]-1661306624972
GPR[EPVAP]-1661306626088
GPR[SPVATF]-1661306626088
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306666935
GPR[EPVS]-1661306666935
========
if(c[pos.getIndex()]!=ch){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

========
GPR[SPVS]-1661306666937
GPR[SPVAP]-1661306666937
GPR[EPVAP]-1661306667619
GPR[EPVS]-1661306667619
========
deleteImpl(fmtCount,fmtCount,fmtCount-fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

========
GPR[SPVS]-1661306667620
GPR[SPVAP]-1661306667620
GPR[EPVAP]-1661306668277
GPR[EPVS]-1661306668277
========
if(c[fmtCount]!=QUOTE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

========
GPR[SPVS]-1661306668279
GPR[SPVAP]-1661306668279
GPR[EPVAP]-1661306669395
GPR[SPVATF]-1661306669395
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306710319
GPR[EPVS]-1661306710319
========
default :

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306710876
GPR[SPVAP]-1661306710876
GPR[EPVAP]-1661306711538
GPR[EPVS]-1661306711538
========
seekNonWs(pattern,pos);
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306711540
GPR[SPVAP]-1661306711540
GPR[EPVAP]-1661306712213
GPR[EPVS]-1661306712213
========
if(false){
throw new IllegalArgumentException("Invalid format argument index at position "+start);
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306712215
GPR[SPVAP]-1661306712215
GPR[EPVAP]-1661306712880
GPR[EPVS]-1661306712880
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).setIndex(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.setIndex(foundFormats.size()==fmtCount);
Validate.setIndex(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306712883
GPR[SPVAP]-1661306712883
GPR[EPVAP]-1661306713564
GPR[EPVS]-1661306713564
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.setIndex(foundFormats.size()==fmtCount);
Validate.setIndex(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306713566
GPR[SPVAP]-1661306713566
GPR[EPVAP]-1661306714233
GPR[EPVS]-1661306714233
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).setIndex(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306714234
GPR[SPVAP]-1661306714234
GPR[EPVAP]-1661306714904
GPR[EPVS]-1661306714904
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.setIndex(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306714905
GPR[SPVAP]-1661306714905
GPR[EPVAP]-1661306715568
GPR[EPVS]-1661306715568
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.setIndex(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306715569
GPR[SPVAP]-1661306715569
GPR[EPVAP]-1661306716234
GPR[EPVS]-1661306716234
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).setIndex(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.setIndex(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306716236
GPR[SPVAP]-1661306716236
GPR[EPVAP]-1661306716898
GPR[EPVS]-1661306716898
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).setIndex(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.setIndex(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306716900
GPR[SPVAP]-1661306716900
GPR[EPVAP]-1661306717564
GPR[EPVS]-1661306717565
========
if(formatDescription==null){
format=index;
format.init();
registry.put(format,format);
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306717900
GPR[SPVAP]-1661306717900
GPR[EPVAP]-1661306718580
GPR[EPVS]-1661306718580
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
char start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306718582
GPR[SPVAP]-1661306718582
GPR[EPVAP]-1661306719246
GPR[EPVS]-1661306719246
========
pos.setErrorIndex(0);
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306719250
GPR[SPVAP]-1661306719250
GPR[EPVAP]-1661306719919
GPR[EPVS]-1661306719919
========
if(fmtCount<0||index>=start){
throw new IndexOutOfBoundsException("Index: "+index);
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306719979
GPR[SPVAP]-1661306719979
GPR[EPVAP]-1661306720644
GPR[EPVS]-1661306720644
========
if(isEmpty(DUMMY_PATTERN)||isEmpty(pattern)||fmtCount==0){
return text;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306720646
GPR[SPVAP]-1661306720646
GPR[EPVAP]-1661306721325
GPR[EPVS]-1661306721325
========
if(format==-1){
return DUMMY_PATTERN;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306721326
GPR[SPVAP]-1661306721326
GPR[EPVAP]-1661306721996
GPR[EPVS]-1661306721996
========
stripCustom.append(DUMMY_PATTERN.substring(index));
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306721997
GPR[SPVAP]-1661306721997
GPR[EPVAP]-1661306722703
GPR[EPVS]-1661306722704
========
if(DUMMY_PATTERN==null){
str=DUMMY_PATTERN;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306722705
GPR[SPVAP]-1661306722705
GPR[EPVAP]-1661306723357
GPR[EPVS]-1661306723357
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306723365
GPR[SPVAP]-1661306723365
GPR[EPVAP]-1661306724040
GPR[EPVS]-1661306724040
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306724042
GPR[SPVAP]-1661306724042
GPR[EPVAP]-1661306724704
GPR[EPVS]-1661306724704
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306724705
GPR[SPVAP]-1661306724705
GPR[EPVAP]-1661306725370
GPR[EPVS]-1661306725370
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306725372
GPR[SPVAP]-1661306725372
GPR[EPVAP]-1661306726039
GPR[EPVS]-1661306726039
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306726040
GPR[SPVAP]-1661306726040
GPR[EPVAP]-1661306726723
GPR[EPVS]-1661306726723
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306726731
GPR[SPVAP]-1661306726731
GPR[EPVAP]-1661306727396
GPR[EPVS]-1661306727396
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306727398
GPR[SPVAP]-1661306727398
GPR[EPVAP]-1661306728072
GPR[EPVS]-1661306728072
========
if(DUMMY_PATTERN==null){
return null;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306728264
GPR[SPVAP]-1661306728264
GPR[EPVAP]-1661306728943
GPR[EPVS]-1661306728943
========
if(DUMMY_PATTERN.length()==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306728944
GPR[SPVAP]-1661306728944
GPR[EPVAP]-1661306729611
GPR[EPVS]-1661306729611
========
ensureCapacity(fmtCount+1);
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306729613
GPR[SPVAP]-1661306729613
GPR[EPVAP]-1661306730292
GPR[EPVS]-1661306730292
========
fmtCount++;
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306730293
GPR[SPVAP]-1661306730293
GPR[EPVAP]-1661306730943
GPR[EPVS]-1661306730943
========
if(fmtCount>start||index<0){
throw new IndexOutOfBoundsException("Index: "+index);
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306730945
GPR[SPVAP]-1661306730945
GPR[EPVAP]-1661306731612
GPR[EPVS]-1661306731612
========
if(formatDescription==null){
overlay=EMPTY;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306731614
GPR[SPVAP]-1661306731614
GPR[EPVAP]-1661306732280
GPR[EPVS]-1661306732280
========
if(start<0){
start=0;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306732282
GPR[SPVAP]-1661306732282
GPR[EPVAP]-1661306732946
GPR[EPVS]-1661306732946
========
if(start>fmtCount){
start=len;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306732948
GPR[SPVAP]-1661306732948
GPR[EPVAP]-1661306733614
GPR[EPVS]-1661306733614
========
if(start==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306733616
GPR[SPVAP]-1661306733616
GPR[EPVAP]-1661306734291
GPR[EPVS]-1661306734291
========
if(fmtCount<0||index>=start){
throw new StringIndexOutOfBoundsException(index);
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306734293
GPR[SPVAP]-1661306734293
GPR[EPVAP]-1661306734954
GPR[EPVS]-1661306734954
========
if(start<0){
return null;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306734956
GPR[SPVAP]-1661306734956
GPR[EPVAP]-1661306735619
GPR[EPVS]-1661306735619
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306735645
GPR[SPVAP]-1661306735645
GPR[EPVAP]-1661306736317
GPR[EPVS]-1661306736317
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306736319
GPR[SPVAP]-1661306736319
GPR[EPVAP]-1661306736977
GPR[EPVS]-1661306736977
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306736978
GPR[SPVAP]-1661306736978
GPR[EPVAP]-1661306737667
GPR[EPVS]-1661306737667
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306737668
GPR[SPVAP]-1661306737668
GPR[EPVAP]-1661306738373
GPR[EPVS]-1661306738373
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306738374
GPR[SPVAP]-1661306738374
GPR[EPVAP]-1661306739039
GPR[EPVS]-1661306739039
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306739040
GPR[SPVAP]-1661306739040
GPR[EPVAP]-1661306739706
GPR[EPVS]-1661306739706
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306739707
GPR[SPVAP]-1661306739707
GPR[EPVAP]-1661306740364
GPR[EPVS]-1661306740364
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306740439
GPR[SPVAP]-1661306740439
GPR[EPVAP]-1661306741104
GPR[EPVS]-1661306741104
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306741105
GPR[SPVAP]-1661306741105
GPR[EPVAP]-1661306741774
GPR[EPVS]-1661306741774
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306741775
GPR[SPVAP]-1661306741775
GPR[EPVAP]-1661306742439
GPR[EPVS]-1661306742439
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306742443
GPR[SPVAP]-1661306742443
GPR[EPVAP]-1661306743100
GPR[EPVS]-1661306743100
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306743104
GPR[SPVAP]-1661306743104
GPR[EPVAP]-1661306743767
GPR[EPVS]-1661306743767
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306743774
GPR[SPVAP]-1661306743774
GPR[EPVAP]-1661306744449
GPR[EPVS]-1661306744449
========
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306744452
GPR[SPVAP]-1661306744452
GPR[EPVAP]-1661306745132
GPR[EPVS]-1661306745132
========
index=Math.min(increase,DUMMY_PATTERN.length()/5);
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306746145
GPR[SPVAP]-1661306746145
GPR[EPVAP]-1661306746803
GPR[EPVS]-1661306746803
========
if(index==INDEX_NOT_FOUND){
return clone(c);
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306746805
GPR[SPVAP]-1661306746805
GPR[EPVAP]-1661306747475
GPR[EPVS]-1661306747475
========
if(DUMMY_PATTERN==null){
return null;
}
if(formatDescription==null){
overlay=EMPTY;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306747478
GPR[SPVAP]-1661306747478
GPR[EPVAP]-1661306748137
GPR[EPVS]-1661306748137
========
if(DUMMY_PATTERN==null){
return null;
}
if(start<0){
start=0;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306748138
GPR[SPVAP]-1661306748138
GPR[EPVAP]-1661306748828
GPR[EPVS]-1661306748828
========
if(DUMMY_PATTERN==null){
return null;
}
if(start>fmtCount){
start=len;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306748829
GPR[SPVAP]-1661306748829
GPR[EPVAP]-1661306749496
GPR[EPVS]-1661306749496
========
if(formatDescription==null){
overlay=EMPTY;
}
if(start<0){
start=0;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306749497
GPR[SPVAP]-1661306749497
GPR[EPVAP]-1661306750160
GPR[EPVS]-1661306750160
========
if(formatDescription==null){
overlay=EMPTY;
}
if(start>fmtCount){
start=len;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306750161
GPR[SPVAP]-1661306750161
GPR[EPVAP]-1661306750829
GPR[EPVS]-1661306750829
========
if(start<0){
start=0;
}
if(start>fmtCount){
start=len;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306750830
GPR[SPVAP]-1661306750830
GPR[EPVAP]-1661306751507
GPR[EPVS]-1661306751507
========
if(DUMMY_PATTERN==null){
return null;
}
if(formatDescription==null){
overlay=EMPTY;
}
if(start<0){
start=0;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306751509
GPR[SPVAP]-1661306751509
GPR[EPVAP]-1661306752171
GPR[EPVS]-1661306752171
========
if(DUMMY_PATTERN==null){
return null;
}
if(formatDescription==null){
overlay=EMPTY;
}
if(start>fmtCount){
start=len;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306752172
GPR[SPVAP]-1661306752172
GPR[EPVAP]-1661306752838
GPR[EPVS]-1661306752838
========
if(DUMMY_PATTERN==null){
return null;
}
if(start<0){
start=0;
}
if(start>fmtCount){
start=len;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306752839
GPR[SPVAP]-1661306752839
GPR[EPVAP]-1661306753506
GPR[EPVS]-1661306753506
========
if(formatDescription==null){
overlay=EMPTY;
}
if(start<0){
start=0;
}
if(start>fmtCount){
start=len;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306753507
GPR[SPVAP]-1661306753507
GPR[EPVAP]-1661306754169
GPR[EPVS]-1661306754169
========
if(DUMMY_PATTERN==null){
return null;
}
if(formatDescription==null){
overlay=EMPTY;
}
if(start<0){
start=0;
}
if(start>fmtCount){
start=len;
}
case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}


========
GPR[SPVS]-1661306754170
GPR[SPVAP]-1661306754170
GPR[EPVAP]-1661306754832
GPR[EPVS]-1661306754832
========
default :
sb.append(c[pos.getIndex()]);
next(pos);


========
GPR[SPVS]-1661306755147
GPR[SPVAP]-1661306755147
GPR[EPVAP]-1661306755798
GPR[EPVS]-1661306755799
========
default :
stripCustom.setIndex(c[pos.getIndex()]);
next(pos);


========
GPR[SPVS]-1661306755800
GPR[SPVAP]-1661306755800
GPR[EPVAP]-1661306756461
GPR[EPVS]-1661306756461
========
case START_FE :

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);


========
GPR[SPVS]-1661306756462
GPR[SPVAP]-1661306756462
GPR[EPVAP]-1661306757120
GPR[EPVS]-1661306757120
========
default :
fmtCount++;
stripCustom.append(c[pos.getIndex()]);
next(pos);



========
GPR[SPVS]-1661306757121
GPR[SPVAP]-1661306757121
GPR[EPVAP]-1661306758234
GPR[SPVATF]-1661306758234
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306799240
GPR[EPVS]-1661306799240
========
default :
seekNonWs(pattern,pos);
stripCustom.append(c[pos.getIndex()]);
next(pos);



========
GPR[SPVS]-1661306799241
GPR[SPVAP]-1661306799241
GPR[EPVAP]-1661306800360
GPR[SPVATF]-1661306800360
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306841319
GPR[EPVS]-1661306841319
========
default :
fmtCount++;
seekNonWs(pattern,pos);

stripCustom.append(c[pos.getIndex()]);
next(pos);



========
GPR[SPVS]-1661306841321
GPR[SPVAP]-1661306841321
GPR[EPVAP]-1661306842435
GPR[SPVATF]-1661306842435
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306883552
GPR[EPVS]-1661306883552
========
pos.setErrorIndex(0);
default :
stripCustom.append(c[pos.getIndex()]);
next(pos);


========
GPR[SPVS]-1661306883553
GPR[SPVAP]-1661306883553
GPR[EPVAP]-1661306884665
GPR[SPVATF]-1661306884665
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661306925735
GPR[EPVS]-1661306925735
========
pos.setErrorIndex(0);
default :
stripCustom.setIndex(c[pos.getIndex()]);
next(pos);


========
GPR[SPVS]-1661306925737
GPR[SPVAP]-1661306925737
GPR[EPVAP]-1661306926404
GPR[EPVS]-1661306926404
========
default :
appendTo.append(c[pos.getIndex()]);
next(pos);


========
GPR[SPVS]-1661306926406
GPR[SPVAP]-1661306926406
GPR[EPVAP]-1661306927075
GPR[EPVS]-1661306927075
========
seekNonWs(pattern,pos);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306928231
GPR[SPVAP]-1661306928231
GPR[EPVAP]-1661306928772
GPR[EPVS]-1661306928772
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
appendTo.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
appendTo.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306928775
GPR[SPVAP]-1661306928775
GPR[EPVAP]-1661306929326
GPR[EPVS]-1661306929326
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
appendTo.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306929327
GPR[SPVAP]-1661306929327
GPR[EPVAP]-1661306929875
GPR[EPVS]-1661306929875
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
appendTo.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306929876
GPR[SPVAP]-1661306929876
GPR[EPVAP]-1661306930419
GPR[EPVS]-1661306930419
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(QUOTE);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306930420
GPR[SPVAP]-1661306930420
GPR[EPVAP]-1661306930964
GPR[EPVS]-1661306930964
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
stripCustom.append(c,index,pos.getIndex()-lastHold).isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306930965
GPR[SPVAP]-1661306930965
GPR[EPVAP]-1661306931510
GPR[EPVS]-1661306931510
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
stripCustom.append(c,fmtCount,pos.getIndex()-index).isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306931512
GPR[SPVAP]-1661306931512
GPR[EPVAP]-1661306932053
GPR[EPVS]-1661306932053
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
stripCustom.append(c,fmtCount,pos.getIndex()-fmtCount).isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306932054
GPR[SPVAP]-1661306932054
GPR[EPVAP]-1661306932600
GPR[EPVS]-1661306932600
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
stripCustom.append(c,fmtCount,pos.getIndex()-fmtCount).isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306932601
GPR[SPVAP]-1661306932601
GPR[EPVAP]-1661306933142
GPR[EPVS]-1661306933142
========
while(pos.getIndex()<pattern.length()){
pos.setIndex(format+ESCAPED_QUOTE.length());
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306933144
GPR[SPVAP]-1661306933144
GPR[EPVAP]-1661306933696
GPR[EPVS]-1661306933696
========
while(pos.getIndex()<pattern.length()){
lastHold=pos.getIndex();
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306933697
GPR[SPVAP]-1661306933697
GPR[EPVAP]-1661306934242
GPR[EPVS]-1661306934242
========
while(pos.getIndex()<pattern.length()){
continue;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306934243
GPR[SPVAP]-1661306934243
GPR[EPVAP]-1661306934784
GPR[EPVS]-1661306934784
========
while(pos.getIndex()<pattern.length()){
pos.setIndex(format+ESCAPED_QUOTE.length());
lastHold=pos.getIndex();
continue;

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306934785
GPR[SPVAP]-1661306934785
GPR[EPVAP]-1661306935328
GPR[EPVS]-1661306935328
========
while(pos.getIndex()<pattern.length()){
error=true;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306935330
GPR[SPVAP]-1661306935330
GPR[EPVAP]-1661306935876
GPR[EPVS]-1661306935876
========
if(false){
throw new IllegalArgumentException("Invalid format argument index at position "+start);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306935878
GPR[SPVAP]-1661306935878
GPR[EPVAP]-1661306936422
GPR[EPVS]-1661306936422
========
if(DUMMY_PATTERN.length()>DUMMY_PATTERN.length()){
return false;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306936424
GPR[SPVAP]-1661306936424
GPR[EPVAP]-1661306936976
GPR[EPVS]-1661306936976
========
if(DUMMY_PATTERN.equals(index)){
return DUMMY_PATTERN.substring(0,str.length()-sep.length());
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306936978
GPR[SPVAP]-1661306936978
GPR[EPVAP]-1661306937520
GPR[EPVS]-1661306937520
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FMT).append(START_FMT);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306937527
GPR[SPVAP]-1661306937527
GPR[EPVAP]-1661306938071
GPR[EPVS]-1661306938071
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
sb.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
sb.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306938073
GPR[SPVAP]-1661306938073
GPR[EPVAP]-1661306938613
GPR[EPVS]-1661306938613
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(START_FMT);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306938614
GPR[SPVAP]-1661306938614
GPR[EPVAP]-1661306939168
GPR[EPVS]-1661306939168
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
sb.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306939170
GPR[SPVAP]-1661306939170
GPR[EPVAP]-1661306939721
GPR[EPVS]-1661306939721
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
sb.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306939722
GPR[SPVAP]-1661306939722
GPR[EPVAP]-1661306940266
GPR[EPVS]-1661306940266
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FMT).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306940268
GPR[SPVAP]-1661306940268
GPR[EPVAP]-1661306940812
GPR[EPVS]-1661306940812
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
stripCustom.append(START_FMT).isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306940813
GPR[SPVAP]-1661306940813
GPR[EPVAP]-1661306941367
GPR[EPVS]-1661306941367
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
stripCustom.append(START_FMT).isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306941369
GPR[SPVAP]-1661306941369
GPR[EPVAP]-1661306941922
GPR[EPVS]-1661306941922
========
format=Math.min(increase,DUMMY_PATTERN.length()/5);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306941928
GPR[SPVAP]-1661306941928
GPR[EPVAP]-1661306942499
GPR[EPVS]-1661306942499
========
if(isEmpty(formatDescription)){
return EMPTY;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306942500
GPR[SPVAP]-1661306942500
GPR[EPVAP]-1661306943052
GPR[EPVS]-1661306943052
========
if(start==-1||pos==(DUMMY_PATTERN.length()-formatDescription.length())){
return EMPTY;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306943053
GPR[SPVAP]-1661306943053
GPR[EPVAP]-1661306943604
GPR[EPVS]-1661306943604
========
if(fmtCount>0){
int start=length();
ensureCapacity(len+strLen);
DUMMY_PATTERN.getChars(0,strLen,c,len);
index+=strLen;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306943607
GPR[SPVAP]-1661306943607
GPR[EPVAP]-1661306944166
GPR[EPVS]-1661306944166
========
if(fmtCount>0){
int start=length();
ensureCapacity(len+strLen);
System.arraycopy(str.buffer,0,buffer,len,strLen);
index+=strLen;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306944167
GPR[SPVAP]-1661306944167
GPR[EPVAP]-1661306944713
GPR[EPVS]-1661306944714
========
while(pos.getIndex()<pattern.length()){
allStringsNull=false;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306944715
GPR[SPVAP]-1661306944715
GPR[EPVAP]-1661306945272
GPR[EPVS]-1661306945272
========
if(DUMMY_PATTERN.length()==0){
return DUMMY_PATTERN.length();
}else if(m==0){
return n;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306945274
GPR[SPVAP]-1661306945274
GPR[EPVAP]-1661306945831
GPR[EPVS]-1661306945831
========
if(DUMMY_PATTERN.length()>DUMMY_PATTERN.length()){
String DUMMY_PATTERN=DUMMY_PATTERN;
s=DUMMY_PATTERN;
t=tmp;
n=m;
m=t.length();
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306945832
GPR[SPVAP]-1661306945832
GPR[EPVAP]-1661306946388
GPR[EPVS]-1661306946388
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).get(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.get(foundFormats.size()==fmtCount);
Validate.get(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.get(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306946540
GPR[SPVAP]-1661306946540
GPR[EPVAP]-1661306947084
GPR[EPVS]-1661306947084
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.get(foundFormats.size()==fmtCount);
Validate.get(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.get(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306947087
GPR[SPVAP]-1661306947087
GPR[EPVAP]-1661306947632
GPR[EPVS]-1661306947632
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.get(foundFormats.size()==fmtCount);
Validate.get(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.get(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306947633
GPR[SPVAP]-1661306947633
GPR[EPVAP]-1661306948184
GPR[EPVS]-1661306948184
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.get(foundFormats.size()==fmtCount);
Validate.get(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.get(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306948185
GPR[SPVAP]-1661306948185
GPR[EPVAP]-1661306948735
GPR[EPVS]-1661306948735
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.get(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.get(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306948737
GPR[SPVAP]-1661306948737
GPR[EPVAP]-1661306949279
GPR[EPVS]-1661306949279
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).get(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306949280
GPR[SPVAP]-1661306949280
GPR[EPVAP]-1661306949820
GPR[EPVS]-1661306949820
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306949821
GPR[SPVAP]-1661306949821
GPR[EPVAP]-1661306950368
GPR[EPVS]-1661306950368
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306950369
GPR[SPVAP]-1661306950369
GPR[EPVAP]-1661306950913
GPR[EPVS]-1661306950913
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.get(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306950914
GPR[SPVAP]-1661306950914
GPR[EPVAP]-1661306951459
GPR[EPVS]-1661306951459
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.get(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306951460
GPR[SPVAP]-1661306951460
GPR[EPVAP]-1661306952000
GPR[EPVS]-1661306952000
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.get(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306952002
GPR[SPVAP]-1661306952002
GPR[EPVAP]-1661306952546
GPR[EPVS]-1661306952546
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306954736
GPR[SPVAP]-1661306954736
GPR[EPVAP]-1661306955297
GPR[EPVS]-1661306955297
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.get(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306955299
GPR[SPVAP]-1661306955299
GPR[EPVAP]-1661306955840
GPR[EPVS]-1661306955840
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.get(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306955842
GPR[SPVAP]-1661306955842
GPR[EPVAP]-1661306956389
GPR[EPVS]-1661306956389
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.get(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306956390
GPR[SPVAP]-1661306956390
GPR[EPVAP]-1661306956932
GPR[EPVS]-1661306956932
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).get(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306956933
GPR[SPVAP]-1661306956933
GPR[EPVAP]-1661306957477
GPR[EPVS]-1661306957478
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.get(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306957493
GPR[SPVAP]-1661306957493
GPR[EPVAP]-1661306958045
GPR[EPVS]-1661306958045
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.get(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306958047
GPR[SPVAP]-1661306958047
GPR[EPVAP]-1661306958623
GPR[EPVS]-1661306958623
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.get(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306958624
GPR[SPVAP]-1661306958624
GPR[EPVAP]-1661306959176
GPR[EPVS]-1661306959176
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).get(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306959178
GPR[SPVAP]-1661306959178
GPR[EPVAP]-1661306959724
GPR[EPVS]-1661306959724
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.get(foundFormats.size()==fmtCount);
Validate.get(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306959836
GPR[SPVAP]-1661306959836
GPR[EPVAP]-1661306960375
GPR[EPVS]-1661306960375
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.get(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.get(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306960376
GPR[SPVAP]-1661306960376
GPR[EPVAP]-1661306960928
GPR[EPVS]-1661306960929
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).get(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.get(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306960930
GPR[SPVAP]-1661306960930
GPR[EPVAP]-1661306961479
GPR[EPVS]-1661306961479
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.get(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.get(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306961499
GPR[SPVAP]-1661306961499
GPR[EPVAP]-1661306962037
GPR[EPVS]-1661306962037
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).get(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.get(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306962038
GPR[SPVAP]-1661306962038
GPR[EPVAP]-1661306962581
GPR[EPVS]-1661306962581
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).get(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.get(format);
foundDescriptions.get(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.get(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306962617
GPR[SPVAP]-1661306962617
GPR[EPVAP]-1661306963161
GPR[EPVS]-1661306963161
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).setLength(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.setLength(foundFormats.size()==fmtCount);
Validate.setLength(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.setLength(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306974816
GPR[SPVAP]-1661306974816
GPR[EPVAP]-1661306975360
GPR[EPVS]-1661306975360
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.setLength(foundFormats.size()==fmtCount);
Validate.setLength(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.setLength(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306975362
GPR[SPVAP]-1661306975362
GPR[EPVAP]-1661306975930
GPR[EPVS]-1661306975930
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.setLength(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.setLength(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306975931
GPR[SPVAP]-1661306975931
GPR[EPVAP]-1661306976475
GPR[EPVS]-1661306976475
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).setLength(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306976476
GPR[SPVAP]-1661306976476
GPR[EPVAP]-1661306977023
GPR[EPVS]-1661306977023
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.setLength(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306977024
GPR[SPVAP]-1661306977024
GPR[EPVAP]-1661306977563
GPR[EPVS]-1661306977563
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.setLength(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306977564
GPR[SPVAP]-1661306977564
GPR[EPVAP]-1661306978108
GPR[EPVS]-1661306978108
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
buffer.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306978110
GPR[SPVAP]-1661306978110
GPR[EPVAP]-1661306978648
GPR[EPVS]-1661306978648
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.setLength(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306978650
GPR[SPVAP]-1661306978650
GPR[EPVAP]-1661306979194
GPR[EPVS]-1661306979194
========
while(pos.getIndex()<pattern.length()){
match=false;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306979196
GPR[SPVAP]-1661306979196
GPR[EPVAP]-1661306979753
GPR[EPVS]-1661306979753
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.setLength(foundFormats.size()==fmtCount);
Validate.setLength(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306979760
GPR[SPVAP]-1661306979760
GPR[EPVAP]-1661306980304
GPR[EPVS]-1661306980304
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.setLength(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.setLength(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306980305
GPR[SPVAP]-1661306980305
GPR[EPVAP]-1661306980853
GPR[EPVS]-1661306980853
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).setLength(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.setLength(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306980854
GPR[SPVAP]-1661306980854
GPR[EPVAP]-1661306981400
GPR[EPVS]-1661306981400
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).setLength(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.setLength(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306981401
GPR[SPVAP]-1661306981401
GPR[EPVAP]-1661306981964
GPR[EPVS]-1661306981964
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).setLength(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.setLength(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306981966
GPR[SPVAP]-1661306981966
GPR[EPVAP]-1661306982507
GPR[EPVS]-1661306982507
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).setLength(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.setLength(foundFormats.size()==fmtCount);
Validate.setLength(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306982520
GPR[SPVAP]-1661306982520
GPR[EPVAP]-1661306983070
GPR[EPVS]-1661306983070
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).setLength(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.setLength(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.setLength(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306983072
GPR[SPVAP]-1661306983072
GPR[EPVAP]-1661306983616
GPR[EPVS]-1661306983616
========
if(start==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306983817
GPR[SPVAP]-1661306983817
GPR[EPVAP]-1661306984356
GPR[EPVS]-1661306984356
========
if(new ArrayList().isEmpty()){
return null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306984358
GPR[SPVAP]-1661306984358
GPR[EPVAP]-1661306984908
GPR[EPVS]-1661306984908
========
if(c!=null&&delimiters.length==0){
return "";
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306984910
GPR[SPVAP]-1661306984910
GPR[EPVAP]-1661306985478
GPR[EPVS]-1661306985478
========
if(StringUtils.containsAny(formatDescription,CSV_SEARCH_CHARS)){
pattern=StringUtils.replace(quoteless,CSV_QUOTE_STR+CSV_QUOTE_STR,CSV_QUOTE_STR);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306985480
GPR[SPVAP]-1661306985480
GPR[EPVAP]-1661306986023
GPR[EPVS]-1661306986023
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pattern==null?null:pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306986025
GPR[SPVAP]-1661306986025
GPR[EPVAP]-1661306986577
GPR[EPVS]-1661306986577
========
while(pos.getIndex()<pattern.length()){
replaceImpl(fmtCount,index+start,searchLen,pattern,index);
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306986578
GPR[SPVAP]-1661306986578
GPR[EPVAP]-1661306987124
GPR[EPVS]-1661306987124
========
if(DUMMY_PATTERN==null){
while((fmtCount!=start)&&Character.isWhitespace(DUMMY_PATTERN.charAt(start))){
start++;
}
}else if(stripChars.length()==0){
return str;
}else {
while((start!=strLen)&&(stripChars.indexOf(str.charAt(start))!=-1)){
start++;
}
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306987125
GPR[SPVAP]-1661306987125
GPR[EPVAP]-1661306987668
GPR[EPVS]-1661306987668
========
c[fmtCount]=QUOTE;
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306987670
GPR[SPVAP]-1661306987670
GPR[EPVAP]-1661306988215
GPR[EPVS]-1661306988215
========
while(pos.getIndex()<pattern.length()){
buffer=new char[length()];
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306988217
GPR[SPVAP]-1661306988217
GPR[EPVAP]-1661306988769
GPR[EPVS]-1661306988769
========
System.arraycopy(c,0,c,0,start);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306988771
GPR[SPVAP]-1661306988771
GPR[EPVAP]-1661306989312
GPR[EPVS]-1661306989312
========
if(formatDescription==null){
separator=EMPTY;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306989314
GPR[SPVAP]-1661306989314
GPR[EPVAP]-1661306989876
GPR[EPVS]-1661306989876
========
if(start<=0){
return EMPTY;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306989877
GPR[SPVAP]-1661306989877
GPR[EPVAP]-1661306990428
GPR[EPVS]-1661306990428
========
if(DUMMY_PATTERN.length()==1){
char DUMMY_PATTERN.charAt(0)=str.charAt(0);
if(ch==CharUtils.CR||ch==CharUtils.LF){
return EMPTY;
}
return str;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306990430
GPR[SPVAP]-1661306990430
GPR[EPVAP]-1661306990989
GPR[EPVS]-1661306990989
========
if(start==CharUtils.LF){
if(DUMMY_PATTERN.charAt(index-1)==CharUtils.CR){
lastIdx--;
}
}else if(last!=CharUtils.CR){
lastIdx++;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306990990
GPR[SPVAP]-1661306990990
GPR[EPVAP]-1661306991539
GPR[EPVS]-1661306991539
========
if(DUMMY_PATTERN==null){
replaceChars=EMPTY;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306991541
GPR[SPVAP]-1661306991541
GPR[EPVAP]-1661306992083
GPR[EPVS]-1661306992083
========
if(false){
return stripCustom.toString();
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306992085
GPR[SPVAP]-1661306992085
GPR[EPVAP]-1661306992629
GPR[EPVS]-1661306992629
========
while(pos.getIndex()<pattern.length()){
ensureCapacity(start+fmtCount);
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306992631
GPR[SPVAP]-1661306992631
GPR[EPVAP]-1661306993177
GPR[EPVS]-1661306993177
========
while(pos.getIndex()<pattern.length()){
System.arraycopy(c,0,c,start,fmtCount);
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306993179
GPR[SPVAP]-1661306993179
GPR[EPVAP]-1661306993728
GPR[EPVS]-1661306993728
========
while(pos.getIndex()<pattern.length()){
size+=fmtCount;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306993729
GPR[SPVAP]-1661306993729
GPR[EPVAP]-1661306994276
GPR[EPVS]-1661306994276
========
while(pos.getIndex()<pattern.length()){
ensureCapacity(start+fmtCount);
System.arraycopy(c,0,c,start,fmtCount);
size+=fmtCount;

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306994277
GPR[SPVAP]-1661306994277
GPR[EPVAP]-1661306994826
GPR[EPVS]-1661306994826
========
while(pos.getIndex()<pattern.length()){
System.arraycopy(c,index,c,start,fmtCount);
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306994827
GPR[SPVAP]-1661306994827
GPR[EPVAP]-1661306995379
GPR[EPVS]-1661306995379
========
while(pos.getIndex()<pattern.length()){
ensureCapacity(start+fmtCount);
System.arraycopy(c,index,c,start,fmtCount);
size+=fmtCount;

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306995380
GPR[SPVAP]-1661306995380
GPR[EPVAP]-1661306995929
GPR[EPVS]-1661306995929
========
while(pos.getIndex()<pattern.length()){
ensureCapacity(start+fmtCount);
size+=fmtCount;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306995930
GPR[SPVAP]-1661306995930
GPR[EPVAP]-1661306996481
GPR[EPVS]-1661306996481
========
while(pos.getIndex()<pattern.length()){
ensureCapacity(start+fmtCount);
size+=fmtCount;

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306996483
GPR[SPVAP]-1661306996483
GPR[EPVAP]-1661306997029
GPR[EPVS]-1661306997029
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).substring(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.substring(foundFormats.size()==fmtCount);
Validate.substring(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.substring(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306997050
GPR[SPVAP]-1661306997051
GPR[EPVAP]-1661306997598
GPR[EPVS]-1661306997598
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.substring(foundFormats.size()==fmtCount);
Validate.substring(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.substring(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306997600
GPR[SPVAP]-1661306997600
GPR[EPVAP]-1661306998145
GPR[EPVS]-1661306998145
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.substring(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.substring(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306998146
GPR[SPVAP]-1661306998146
GPR[EPVAP]-1661306998702
GPR[EPVS]-1661306998702
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).substring(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306998703
GPR[SPVAP]-1661306998703
GPR[EPVAP]-1661306999252
GPR[EPVS]-1661306999252
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.substring(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306999253
GPR[SPVAP]-1661306999253
GPR[EPVAP]-1661306999796
GPR[EPVS]-1661306999796
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.substring(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661306999797
GPR[SPVAP]-1661306999797
GPR[EPVAP]-1661307000352
GPR[EPVS]-1661307000352
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.substring(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307000354
GPR[SPVAP]-1661307000354
GPR[EPVAP]-1661307000903
GPR[EPVS]-1661307000903
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.substring(foundFormats.size()==fmtCount);
Validate.substring(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307000957
GPR[SPVAP]-1661307000957
GPR[EPVAP]-1661307001496
GPR[EPVS]-1661307001496
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.substring(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.substring(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307001497
GPR[SPVAP]-1661307001497
GPR[EPVAP]-1661307002044
GPR[EPVS]-1661307002044
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).substring(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.substring(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307002045
GPR[SPVAP]-1661307002045
GPR[EPVAP]-1661307002594
GPR[EPVS]-1661307002594
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).substring(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.substring(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307002598
GPR[SPVAP]-1661307002598
GPR[EPVAP]-1661307003146
GPR[EPVS]-1661307003146
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).substring(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.substring(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307003150
GPR[SPVAP]-1661307003150
GPR[EPVAP]-1661307003702
GPR[EPVS]-1661307003702
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).substring(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.substring(foundFormats.size()==fmtCount);
Validate.substring(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307003710
GPR[SPVAP]-1661307003710
GPR[EPVAP]-1661307004262
GPR[EPVS]-1661307004262
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).substring(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.substring(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.substring(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307004266
GPR[SPVAP]-1661307004266
GPR[EPVAP]-1661307004810
GPR[EPVS]-1661307004810
========
if(fmtCount<=0){
return EMPTY;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307006081
GPR[SPVAP]-1661307006081
GPR[EPVAP]-1661307006627
GPR[EPVS]-1661307006627
========
if(fmtCount==1||start==0){
return DUMMY_PATTERN;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307006628
GPR[SPVAP]-1661307006628
GPR[EPVAP]-1661307007169
GPR[EPVS]-1661307007169
========
if(start==1&&fmtCount<=PAD_LIMIT){
return padding(repeat,DUMMY_PATTERN.charAt(0));
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307007170
GPR[SPVAP]-1661307007170
GPR[EPVAP]-1661307007717
GPR[EPVS]-1661307007717
========
swtich (start){
case 1 :
char DUMMY_PATTERN.charAt(0)=DUMMY_PATTERN.charAt(0);
char[] new char[index]=new char[index];
for(int fmtCount=fmtCount-1;i>=0;i--){
output1[i]=ch;
}
return new String(output1);

case 2 :
char DUMMY_PATTERN.charAt(0)=str.charAt(0);
char DUMMY_PATTERN.charAt(1)=str.charAt(1);
char[] c=new char[outputLength];
for(int i=repeat*2-2;i>=0;i--,i--){
output2[i]=ch0;
output2[i+1]=ch1;
}
return new String(output2);

default :
StringBuffer stripCustom=new StringBuffer(outputLength);
for(int i=0;i<repeat;i++){
buf.append(str);
}
return buf.toString();

}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307007718
GPR[SPVAP]-1661307007718
GPR[EPVAP]-1661307008262
GPR[EPVS]-1661307008262
========
if(DUMMY_PATTERN.length()==0){
return true;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307008263
GPR[SPVAP]-1661307008263
GPR[EPVAP]-1661307008809
GPR[EPVS]-1661307008809
========
if(DUMMY_PATTERN.length()>fmtCount){
return false;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307008810
GPR[SPVAP]-1661307008810
GPR[EPVAP]-1661307009362
GPR[EPVS]-1661307009362
========
if(format==-1){
return DUMMY_PATTERN;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307009364
GPR[SPVAP]-1661307009364
GPR[EPVAP]-1661307009909
GPR[EPVS]-1661307009909
========
stripCustom.append(DUMMY_PATTERN.substring(index));
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307009910
GPR[SPVAP]-1661307009910
GPR[EPVAP]-1661307010452
GPR[EPVS]-1661307010452
========
if(format<=0){
return DUMMY_PATTERN;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307010453
GPR[SPVAP]-1661307010453
GPR[EPVAP]-1661307011004
GPR[EPVS]-1661307011004
========
DUMMY_PATTERN=leftPad(str,start+format/2,index);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307011005
GPR[SPVAP]-1661307011005
GPR[EPVAP]-1661307011548
GPR[EPVS]-1661307011548
========
DUMMY_PATTERN=rightPad(str,fmtCount,index);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307011549
GPR[SPVAP]-1661307011549
GPR[EPVAP]-1661307012096
GPR[EPVS]-1661307012096
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).write(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.write(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307012099
GPR[SPVAP]-1661307012099
GPR[EPVAP]-1661307012640
GPR[EPVS]-1661307012640
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).write(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307012642
GPR[SPVAP]-1661307012642
GPR[EPVAP]-1661307013192
GPR[EPVS]-1661307013192
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.write(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307013193
GPR[SPVAP]-1661307013193
GPR[EPVAP]-1661307013743
GPR[EPVS]-1661307013743
========
if(isEmpty(DUMMY_PATTERN)){
padStr=" ";
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307013747
GPR[SPVAP]-1661307013747
GPR[EPVAP]-1661307014292
GPR[EPVS]-1661307014292
========
while(pos.getIndex()<pattern.length()){
digits=Integer.toString(fmtCount).length();
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307014293
GPR[SPVAP]-1661307014293
GPR[EPVAP]-1661307014843
GPR[EPVS]-1661307014843
========
DUMMY_PATTERN=str.toLowerCase();
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307014845
GPR[SPVAP]-1661307014845
GPR[EPVAP]-1661307015396
GPR[EPVS]-1661307015396
========
while(pos.getIndex()<pattern.length()){
altered=true;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307015397
GPR[SPVAP]-1661307015397
GPR[EPVAP]-1661307015946
GPR[EPVS]-1661307015946
========
while(pos.getIndex()<pattern.length()){
pos+=fmtCount;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307015947
GPR[SPVAP]-1661307015947
GPR[EPVAP]-1661307016492
GPR[EPVS]-1661307016492
========
while(pos.getIndex()<pattern.length()){
bufEnd+=fmtCount;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307016493
GPR[SPVAP]-1661307016493
GPR[EPVAP]-1661307017035
GPR[EPVS]-1661307017035
========
while(pos.getIndex()<pattern.length()){
lengthChange+=fmtCount;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307017036
GPR[SPVAP]-1661307017036
GPR[EPVAP]-1661307017581
GPR[EPVS]-1661307017581
========
while(pos.getIndex()<pattern.length()){
chars=buf.buffer;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307017582
GPR[SPVAP]-1661307017582
GPR[EPVAP]-1661307018136
GPR[EPVS]-1661307018136
========
while(pos.getIndex()<pattern.length()){
altered=true;
pos+=fmtCount;
bufEnd+=fmtCount;
lengthChange+=fmtCount;
chars=buf.buffer;

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307018138
GPR[SPVAP]-1661307018138
GPR[EPVAP]-1661307018676
GPR[EPVS]-1661307018676
========
if(start==0){
return true;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307018678
GPR[SPVAP]-1661307018678
GPR[EPVAP]-1661307019220
GPR[EPVS]-1661307019220
========
if(start>fmtCount){
return false;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307019222
GPR[SPVAP]-1661307019222
GPR[EPVAP]-1661307019772
GPR[EPVS]-1661307019772
========
if(DUMMY_PATTERN==null){
return EMPTY;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307019774
GPR[SPVAP]-1661307019774
GPR[EPVAP]-1661307020324
GPR[EPVS]-1661307020324
========
if(start==-1){
return EMPTY;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307020325
GPR[SPVAP]-1661307020325
GPR[EPVAP]-1661307020869
GPR[EPVS]-1661307020869
========
if(isEmpty(formatDescription)){
padStr=" ";
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307020871
GPR[SPVAP]-1661307020871
GPR[EPVAP]-1661307021418
GPR[EPVS]-1661307021418
========
DUMMY_PATTERN=leftPad(str,start+format/2,formatDescription);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307021419
GPR[SPVAP]-1661307021419
GPR[EPVAP]-1661307021972
GPR[EPVS]-1661307021972
========
DUMMY_PATTERN=rightPad(str,fmtCount,formatDescription);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307021973
GPR[SPVAP]-1661307021973
GPR[EPVAP]-1661307022522
GPR[EPVS]-1661307022522
========
if(start==CharUtils.LF){
if(DUMMY_PATTERN.charAt(index-1)==CharUtils.CR){
lastIdx--;
}
}else {
lastIdx++;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307022523
GPR[SPVAP]-1661307022523
GPR[EPVAP]-1661307023068
GPR[EPVS]-1661307023068
========
if(start<=0){
return DUMMY_PATTERN;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307023070
GPR[SPVAP]-1661307023070
GPR[EPVAP]-1661307023617
GPR[EPVS]-1661307023617
========
if(start>PAD_LIMIT){
return rightPad(DUMMY_PATTERN,index,String.valueOf(QUOTE));
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307023619
GPR[SPVAP]-1661307023619
GPR[EPVAP]-1661307024160
GPR[EPVS]-1661307024160
========
if(start<=0){
return pattern;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307024162
GPR[SPVAP]-1661307024162
GPR[EPVAP]-1661307024708
GPR[EPVS]-1661307024708
========
if(start>PAD_LIMIT){
return leftPad(pattern,index,String.valueOf(QUOTE));
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307024709
GPR[SPVAP]-1661307024709
GPR[EPVAP]-1661307025252
GPR[EPVS]-1661307025252
========
if(index==start){
return DUMMY_PATTERN;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307025254
GPR[SPVAP]-1661307025254
GPR[EPVAP]-1661307025804
GPR[EPVS]-1661307025804
========
index=(startIndex<0?0:startIndex);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307025807
GPR[SPVAP]-1661307025807
GPR[EPVAP]-1661307026349
GPR[EPVS]-1661307026349
========
if(DUMMY_PATTERN.length()==1){
return indexOf(DUMMY_PATTERN.charAt(0),index);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307026350
GPR[SPVAP]-1661307026350
GPR[EPVAP]-1661307026893
GPR[EPVS]-1661307026893
========
if(DUMMY_PATTERN.length()==0){
return index;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307026894
GPR[SPVAP]-1661307026894
GPR[EPVAP]-1661307027440
GPR[EPVS]-1661307027440
========
if(DUMMY_PATTERN.length()>fmtCount){
return -1;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307027441
GPR[SPVAP]-1661307027441
GPR[EPVAP]-1661307027986
GPR[EPVS]-1661307027986
========
outer: for (int i=startIndex; i < len; i++) {
  for (int j=0; j < strLen; j++) {
    if (str.charAt(j) != thisBuf[i + j]) {
      continue outer;
    }
  }
  return i;
}

while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307027987
GPR[SPVAP]-1661307027987
GPR[EPVAP]-1661307028533
GPR[EPVS]-1661307028533
========
if(DUMMY_PATTERN.length()==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307028534
GPR[SPVAP]-1661307028534
GPR[EPVAP]-1661307029072
GPR[EPVS]-1661307029072
========
start=(startIndex>=fmtCount?size-1:startIndex);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307029074
GPR[SPVAP]-1661307029074
GPR[EPVAP]-1661307029614
GPR[EPVS]-1661307029614
========
if(DUMMY_PATTERN.length()>0&&strLen<=fmtCount){
if(strLen==1){
return lastIndexOf(DUMMY_PATTERN.charAt(0),start);
}
outer: for (int i=startIndex - strLen + 1; i >= 0; i--) {
  for (int j=0; j < strLen; j++) {
    if (str.charAt(j) != buffer[i + j]) {
      continue outer;
    }
  }
  return i;
}

}else if(strLen==0){
return startIndex;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307029615
GPR[SPVAP]-1661307029615
GPR[EPVAP]-1661307030156
GPR[EPVS]-1661307030156
========
while(pos.getIndex()<pattern.length()){
stripCustom.setLength(0);
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307030158
GPR[SPVAP]-1661307030158
GPR[EPVAP]-1661307030704
GPR[EPVS]-1661307030704
========
while(pos.getIndex()<pattern.length()){
inUnicode=false;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307030705
GPR[SPVAP]-1661307030705
GPR[EPVAP]-1661307031249
GPR[EPVS]-1661307031249
========
while(pos.getIndex()<pattern.length()){
hadSlash=false;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307031250
GPR[SPVAP]-1661307031250
GPR[EPVAP]-1661307031802
GPR[EPVS]-1661307031802
========
while(pos.getIndex()<pattern.length()){
stripCustom.setLength(0);
inUnicode=false;
hadSlash=false;

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307031804
GPR[SPVAP]-1661307031804
GPR[EPVAP]-1661307032350
GPR[EPVS]-1661307032350
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307032353
GPR[SPVAP]-1661307032353
GPR[EPVAP]-1661307032904
GPR[EPVS]-1661307032904
========
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307032905
GPR[SPVAP]-1661307032905
GPR[EPVAP]-1661307033448
GPR[EPVS]-1661307033448
========
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307033449
GPR[SPVAP]-1661307033449
GPR[EPVAP]-1661307033993
GPR[EPVS]-1661307033993
========
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307033995
GPR[SPVAP]-1661307033995
GPR[EPVAP]-1661307034540
GPR[EPVS]-1661307034540
========
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307034541
GPR[SPVAP]-1661307034541
GPR[EPVAP]-1661307035092
GPR[EPVS]-1661307035092
========
if(formatDescription==null){
overlay=EMPTY;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307035094
GPR[SPVAP]-1661307035094
GPR[EPVAP]-1661307035637
GPR[EPVS]-1661307035637
========
if(start<0){
start=0;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307035639
GPR[SPVAP]-1661307035639
GPR[EPVAP]-1661307036187
GPR[EPVS]-1661307036187
========
if(start>fmtCount){
start=len;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307036188
GPR[SPVAP]-1661307036188
GPR[EPVAP]-1661307036734
GPR[EPVS]-1661307036734
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307036780
GPR[SPVAP]-1661307036780
GPR[EPVAP]-1661307037325
GPR[EPVS]-1661307037325
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307037327
GPR[SPVAP]-1661307037327
GPR[EPVAP]-1661307037876
GPR[EPVS]-1661307037876
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307037877
GPR[SPVAP]-1661307037877
GPR[EPVAP]-1661307038426
GPR[EPVS]-1661307038426
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307038427
GPR[SPVAP]-1661307038427
GPR[EPVAP]-1661307038973
GPR[EPVS]-1661307038973
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307038975
GPR[SPVAP]-1661307038975
GPR[EPVAP]-1661307039519
GPR[EPVS]-1661307039519
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307039521
GPR[SPVAP]-1661307039521
GPR[EPVAP]-1661307040063
GPR[EPVS]-1661307040063
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307040065
GPR[SPVAP]-1661307040065
GPR[EPVAP]-1661307040621
GPR[EPVS]-1661307040621
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
result.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307040622
GPR[SPVAP]-1661307040622
GPR[EPVAP]-1661307041166
GPR[EPVS]-1661307041166
========
while(pos.getIndex()<pattern.length()){
stripCustom.append(StringUtils.defaultString(pattern));
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307041167
GPR[SPVAP]-1661307041167
GPR[EPVAP]-1661307041716
GPR[EPVS]-1661307041716
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307041842
GPR[SPVAP]-1661307041842
GPR[EPVAP]-1661307042384
GPR[EPVS]-1661307042384
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307042386
GPR[SPVAP]-1661307042386
GPR[EPVAP]-1661307042936
GPR[EPVS]-1661307042936
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307042937
GPR[SPVAP]-1661307042937
GPR[EPVAP]-1661307043480
GPR[EPVS]-1661307043480
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307043487
GPR[SPVAP]-1661307043487
GPR[EPVAP]-1661307044031
GPR[EPVS]-1661307044031
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307044039
GPR[SPVAP]-1661307044039
GPR[EPVAP]-1661307044588
GPR[EPVS]-1661307044588
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307044590
GPR[SPVAP]-1661307044590
GPR[EPVAP]-1661307045136
GPR[EPVS]-1661307045136
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307045143
GPR[SPVAP]-1661307045143
GPR[EPVAP]-1661307045693
GPR[EPVS]-1661307045693
========
formatDescription=strip(str,null);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307049004
GPR[SPVAP]-1661307049004
GPR[EPVAP]-1661307049554
GPR[EPVS]-1661307049554
========
if(DUMMY_PATTERN==null){
return false;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307049557
GPR[SPVAP]-1661307049557
GPR[EPVAP]-1661307050104
GPR[EPVS]-1661307050104
========
swtich (DUMMY_PATTERN.length()){
case 2 :
{
char start=str.charAt(0);
char DUMMY_PATTERN.charAt(1)=str.charAt(1);
return (ch0=='o'||ch0=='O')&&(ch1=='n'||ch1=='N');
}

case 3 :
{
char format=str.charAt(0);
if(ch=='y'){
return (str.charAt(1)=='e'||str.charAt(1)=='E')&&(str.charAt(2)=='s'||str.charAt(2)=='S');
}
if(ch=='Y'){
return (str.charAt(1)=='E'||str.charAt(1)=='e')&&(str.charAt(2)=='S'||str.charAt(2)=='s');
}
return false;
}

case 4 :
{
char ch=str.charAt(0);
if(ch=='t'){
return (str.charAt(1)=='r'||str.charAt(1)=='R')&&(str.charAt(2)=='u'||str.charAt(2)=='U');
}
if(ch=='T'){
return (str.charAt(1)=='R'||str.charAt(1)=='r')&&(str.charAt(2)=='U'||str.charAt(2)=='u');
}
}

}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307050105
GPR[SPVAP]-1661307050105
GPR[EPVAP]-1661307050658
GPR[EPVS]-1661307050658
========
while(pos.getIndex()<pattern.length()){
format=index;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307050660
GPR[SPVAP]-1661307050660
GPR[EPVAP]-1661307051208
GPR[EPVS]-1661307051208
========
while(pos.getIndex()<pattern.length()){
registry.put(formatDescription,format);
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307051209
GPR[SPVAP]-1661307051209
GPR[EPVAP]-1661307051755
GPR[EPVS]-1661307051755
========
while(pos.getIndex()<pattern.length()){
format=index;
registry.put(formatDescription,format);

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307051757
GPR[SPVAP]-1661307051757
GPR[EPVAP]-1661307052307
GPR[EPVS]-1661307052307
========
if(fmtCount<2){
return EMPTY;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307052308
GPR[SPVAP]-1661307052308
GPR[EPVAP]-1661307052848
GPR[EPVS]-1661307052848
========
if(start==CharUtils.LF){
if(DUMMY_PATTERN.substring(0,index).charAt(index-1)==CharUtils.CR){
return ret.substring(0,lastIdx-1);
}
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307052849
GPR[SPVAP]-1661307052849
GPR[EPVAP]-1661307053398
GPR[EPVS]-1661307053398
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
char start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307053400
GPR[SPVAP]-1661307053400
GPR[EPVAP]-1661307053943
GPR[EPVS]-1661307053943
========
while(pos.getIndex()<pattern.length()){
if(start==index){
stripCustom.append(index);
fmtCount++;
}else {
break;
}
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307053945
GPR[SPVAP]-1661307053945
GPR[EPVAP]-1661307054490
GPR[EPVS]-1661307054490
========
while(pos.getIndex()<pattern.length()){
stripCustom.append(index);
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307054492
GPR[SPVAP]-1661307054492
GPR[EPVAP]-1661307055042
GPR[EPVS]-1661307055043
========
while(pos.getIndex()<pattern.length()){
continue;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).write(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307055076
GPR[SPVAP]-1661307055076
GPR[EPVAP]-1661307055629
GPR[EPVS]-1661307055629
========
while(pos.getIndex()<pattern.length()){
continue;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.write(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307055630
GPR[SPVAP]-1661307055630
GPR[EPVAP]-1661307056188
GPR[EPVS]-1661307056188
========
while(pos.getIndex()<pattern.length()){
continue;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).write(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.write(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307056191
GPR[SPVAP]-1661307056191
GPR[EPVAP]-1661307056732
GPR[EPVS]-1661307056732
========
super();
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307056765
GPR[SPVAP]-1661307056765
GPR[EPVAP]-1661307057311
GPR[EPVS]-1661307057311
========
toPattern=pattern;
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307057312
GPR[SPVAP]-1661307057312
GPR[EPVAP]-1661307057854
GPR[EPVS]-1661307057854
========
if(formatDescription==null){
newLineStr=SystemUtils.LINE_SEPARATOR;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307057855
GPR[SPVAP]-1661307057856
GPR[EPVAP]-1661307058406
GPR[EPVS]-1661307058406
========
if(fmtCount<1){
wrapLength=1;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307058407
GPR[SPVAP]-1661307058407
GPR[EPVAP]-1661307058949
GPR[EPVS]-1661307058949
========
while(pos.getIndex()<pattern.length()){
if(start==0||getDelimiterMatcher().isMatch(c,fmtCount,start,fmtCount)>0||getQuoteMatcher().isMatch(c,fmtCount,start,fmtCount)>0){
break;
}
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307058951
GPR[SPVAP]-1661307058951
GPR[EPVAP]-1661307059508
GPR[EPVS]-1661307059508
========
while(pos.getIndex()<pattern.length()){
start+=start;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307059510
GPR[SPVAP]-1661307059510
GPR[EPVAP]-1661307060062
GPR[EPVS]-1661307060062
========
while(pos.getIndex()<pattern.length()){
if(start==0||getDelimiterMatcher().isMatch(c,fmtCount,start,fmtCount)>0||getQuoteMatcher().isMatch(c,fmtCount,start,fmtCount)>0){
break;
}
start+=start;

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307060063
GPR[SPVAP]-1661307060063
GPR[EPVAP]-1661307060612
GPR[EPVS]-1661307060612
========
while(pos.getIndex()<pattern.length()){
index=indexOf(formatDescription,index);
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307060614
GPR[SPVAP]-1661307060614
GPR[EPVAP]-1661307061159
GPR[EPVS]-1661307061159
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).nextInt(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.nextInt(foundFormats.size()==fmtCount);
Validate.nextInt(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.nextInt(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307061394
GPR[SPVAP]-1661307061394
GPR[EPVAP]-1661307061944
GPR[EPVS]-1661307061944
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.nextInt(foundFormats.size()==fmtCount);
Validate.nextInt(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.nextInt(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307061946
GPR[SPVAP]-1661307061946
GPR[EPVAP]-1661307062493
GPR[EPVS]-1661307062493
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.nextInt(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.nextInt(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307062495
GPR[SPVAP]-1661307062495
GPR[EPVAP]-1661307063045
GPR[EPVS]-1661307063045
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).nextInt(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307063046
GPR[SPVAP]-1661307063046
GPR[EPVAP]-1661307063585
GPR[EPVS]-1661307063585
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.nextInt(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307063586
GPR[SPVAP]-1661307063586
GPR[EPVAP]-1661307064133
GPR[EPVS]-1661307064133
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.nextInt(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307064134
GPR[SPVAP]-1661307064134
GPR[EPVAP]-1661307064684
GPR[EPVS]-1661307064684
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.nextInt(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307064685
GPR[SPVAP]-1661307064685
GPR[EPVAP]-1661307065230
GPR[EPVS]-1661307065230
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.nextInt(foundFormats.size()==fmtCount);
Validate.nextInt(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307080128
GPR[SPVAP]-1661307080128
GPR[EPVAP]-1661307080676
GPR[EPVS]-1661307080676
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.nextInt(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.nextInt(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307080677
GPR[SPVAP]-1661307080677
GPR[EPVAP]-1661307081224
GPR[EPVS]-1661307081224
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).nextInt(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.nextInt(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307081226
GPR[SPVAP]-1661307081226
GPR[EPVAP]-1661307081772
GPR[EPVS]-1661307081772
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).nextInt(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.nextInt(foundFormats.size()==fmtCount);
Validate.nextInt(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661307084255
GPR[SPVAP]-1661307084255
GPR[EPVAP]-1661307084796
GPR[EPVS]-1661307084796
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309719468
GPR[SPVAP]-1661309719468
GPR[EPVAP]-1661309720036
GPR[EPVS]-1661309720036
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309720038
GPR[SPVAP]-1661309720038
GPR[EPVAP]-1661309720587
GPR[EPVS]-1661309720587
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309720588
GPR[SPVAP]-1661309720588
GPR[EPVAP]-1661309721130
GPR[EPVS]-1661309721130
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309721132
GPR[SPVAP]-1661309721132
GPR[EPVAP]-1661309721676
GPR[EPVS]-1661309721676
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309721677
GPR[SPVAP]-1661309721677
GPR[EPVAP]-1661309722224
GPR[EPVS]-1661309722224
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309722225
GPR[SPVAP]-1661309722225
GPR[EPVAP]-1661309722779
GPR[EPVS]-1661309722779
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309722781
GPR[SPVAP]-1661309722781
GPR[EPVAP]-1661309723328
GPR[EPVS]-1661309723328
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309723404
GPR[SPVAP]-1661309723404
GPR[EPVAP]-1661309723948
GPR[EPVS]-1661309723948
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309723950
GPR[SPVAP]-1661309723950
GPR[EPVAP]-1661309724494
GPR[EPVS]-1661309724494
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309724495
GPR[SPVAP]-1661309724495
GPR[EPVAP]-1661309725040
GPR[EPVS]-1661309725040
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309725042
GPR[SPVAP]-1661309725042
GPR[EPVAP]-1661309725586
GPR[EPVS]-1661309725586
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309725587
GPR[SPVAP]-1661309725587
GPR[EPVAP]-1661309726137
GPR[EPVS]-1661309726137
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309726151
GPR[SPVAP]-1661309726151
GPR[EPVAP]-1661309726696
GPR[EPVS]-1661309726696
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309726699
GPR[SPVAP]-1661309726699
GPR[EPVAP]-1661309727247
GPR[EPVS]-1661309727247
========
if(fmtCount>start||index<0){
throw new IndexOutOfBoundsException("Index: "+index);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309727467
GPR[SPVAP]-1661309727467
GPR[EPVAP]-1661309728017
GPR[EPVS]-1661309728017
========
while(pos.getIndex()<pattern.length()){
return pos+fmtCount;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309728019
GPR[SPVAP]-1661309728019
GPR[EPVAP]-1661309728561
GPR[EPVS]-1661309728561
========
while(pos.getIndex()<pattern.length()){
quoting=true;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309728562
GPR[SPVAP]-1661309728562
GPR[EPVAP]-1661309729113
GPR[EPVS]-1661309729113
========
while(pos.getIndex()<pattern.length()){
pos+=start;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309729114
GPR[SPVAP]-1661309729114
GPR[EPVAP]-1661309729653
GPR[EPVS]-1661309729653
========
while(pos.getIndex()<pattern.length()){
pos+=index;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309729654
GPR[SPVAP]-1661309729654
GPR[EPVAP]-1661309730199
GPR[EPVS]-1661309730199
========
while(pos.getIndex()<pattern.length()){
priorVariables=new ArrayList();
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309730202
GPR[SPVAP]-1661309730202
GPR[EPVAP]-1661309730754
GPR[EPVS]-1661309730754
========
while(pos.getIndex()<pattern.length()){
milliseconds+=1000;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309730766
GPR[SPVAP]-1661309730766
GPR[EPVAP]-1661309731312
GPR[EPVS]-1661309731312
========
while(pos.getIndex()<pattern.length()){
new StringBuffer().append(DUMMY_PATTERN.substring(1));
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309731313
GPR[SPVAP]-1661309731313
GPR[EPVAP]-1661309731865
GPR[EPVS]-1661309731865
========
while(pos.getIndex()<pattern.length()){
milliseconds+=1000;
new StringBuffer().append(DUMMY_PATTERN.substring(1));

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309731866
GPR[SPVAP]-1661309731866
GPR[EPVAP]-1661309732412
GPR[EPVS]-1661309732412
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
buffer.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309732426
GPR[SPVAP]-1661309732426
GPR[EPVAP]-1661309732979
GPR[EPVS]-1661309732979
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
buffer.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309732981
GPR[SPVAP]-1661309732981
GPR[EPVAP]-1661309733530
GPR[EPVS]-1661309733530
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
buffer.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309733532
GPR[SPVAP]-1661309733532
GPR[EPVAP]-1661309734082
GPR[EPVS]-1661309734082
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
buffer.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309734084
GPR[SPVAP]-1661309734084
GPR[EPVAP]-1661309734634
GPR[EPVS]-1661309734634
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
buffer.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309734645
GPR[SPVAP]-1661309734645
GPR[EPVAP]-1661309735197
GPR[EPVS]-1661309735197
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309735199
GPR[SPVAP]-1661309735199
GPR[EPVAP]-1661309735743
GPR[EPVS]-1661309735743
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
buffer.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309735745
GPR[SPVAP]-1661309735745
GPR[EPVAP]-1661309736296
GPR[EPVS]-1661309736296
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
buffer.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309736298
GPR[SPVAP]-1661309736298
GPR[EPVAP]-1661309736843
GPR[EPVS]-1661309736843
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
buffer.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309736856
GPR[SPVAP]-1661309736856
GPR[EPVAP]-1661309737402
GPR[EPVS]-1661309737402
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.append(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
buffer.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309737405
GPR[SPVAP]-1661309737405
GPR[EPVAP]-1661309737954
GPR[EPVS]-1661309737954
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.append(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.append(foundFormats.size()==fmtCount);
Validate.append(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
buffer.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309737990
GPR[SPVAP]-1661309737990
GPR[EPVAP]-1661309738536
GPR[EPVS]-1661309738536
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309738935
GPR[SPVAP]-1661309738935
GPR[EPVAP]-1661309739483
GPR[EPVS]-1661309739483
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(index);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309739888
GPR[SPVAP]-1661309739888
GPR[EPVAP]-1661309740440
GPR[EPVS]-1661309740440
========
if(fmtCount>0){
int start=length();
ensureCapacity(len+strLen);
stripCustom.getChars(0,strLen,c,len);
index+=strLen;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309740443
GPR[SPVAP]-1661309740443
GPR[EPVAP]-1661309740988
GPR[EPVS]-1661309740988
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(DUMMY_PATTERN);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309740990
GPR[SPVAP]-1661309740990
GPR[EPVAP]-1661309741534
GPR[EPVS]-1661309741534
========
stripCustom.append(DUMMY_PATTERN);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309741535
GPR[SPVAP]-1661309741535
GPR[EPVAP]-1661309742081
GPR[EPVS]-1661309742081
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
list.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309742089
GPR[SPVAP]-1661309742089
GPR[EPVAP]-1661309742637
GPR[EPVS]-1661309742637
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309742638
GPR[SPVAP]-1661309742638
GPR[EPVAP]-1661309743185
GPR[EPVS]-1661309743185
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
list.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309743187
GPR[SPVAP]-1661309743187
GPR[EPVAP]-1661309743733
GPR[EPVS]-1661309743733
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
list.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309743747
GPR[SPVAP]-1661309743748
GPR[EPVAP]-1661309744293
GPR[EPVS]-1661309744293
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309744294
GPR[SPVAP]-1661309744294
GPR[EPVAP]-1661309744841
GPR[EPVS]-1661309744841
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
list.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309744844
GPR[SPVAP]-1661309744844
GPR[EPVAP]-1661309745400
GPR[EPVS]-1661309745400
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309745401
GPR[SPVAP]-1661309745401
GPR[EPVAP]-1661309745952
GPR[EPVS]-1661309745952
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
list.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309745955
GPR[SPVAP]-1661309745955
GPR[EPVAP]-1661309746505
GPR[EPVS]-1661309746505
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309746506
GPR[SPVAP]-1661309746506
GPR[EPVAP]-1661309747060
GPR[EPVS]-1661309747060
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
list.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309747062
GPR[SPVAP]-1661309747062
GPR[EPVAP]-1661309747605
GPR[EPVS]-1661309747605
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309747607
GPR[SPVAP]-1661309747607
GPR[EPVAP]-1661309748148
GPR[EPVS]-1661309748148
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
list.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309748162
GPR[SPVAP]-1661309748162
GPR[EPVAP]-1661309748704
GPR[EPVS]-1661309748704
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309748705
GPR[SPVAP]-1661309748705
GPR[EPVAP]-1661309749252
GPR[EPVS]-1661309749252
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
list.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309749255
GPR[SPVAP]-1661309749255
GPR[EPVAP]-1661309749800
GPR[EPVS]-1661309749800
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309749801
GPR[SPVAP]-1661309749801
GPR[EPVAP]-1661309750348
GPR[EPVS]-1661309750348
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
list.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309750351
GPR[SPVAP]-1661309750351
GPR[EPVAP]-1661309750894
GPR[EPVS]-1661309750894
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309750895
GPR[SPVAP]-1661309750895
GPR[EPVAP]-1661309751439
GPR[EPVS]-1661309751439
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
list.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309751446
GPR[SPVAP]-1661309751446
GPR[EPVAP]-1661309751996
GPR[EPVS]-1661309751996
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
list.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309752003
GPR[SPVAP]-1661309752003
GPR[EPVAP]-1661309752552
GPR[EPVS]-1661309752552
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309752553
GPR[SPVAP]-1661309752553
GPR[EPVAP]-1661309753103
GPR[EPVS]-1661309753103
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
list.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309753105
GPR[SPVAP]-1661309753105
GPR[EPVAP]-1661309753652
GPR[EPVS]-1661309753652
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309753653
GPR[SPVAP]-1661309753653
GPR[EPVAP]-1661309754197
GPR[EPVS]-1661309754197
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
list.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.add(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309754204
GPR[SPVAP]-1661309754204
GPR[EPVAP]-1661309754747
GPR[EPVS]-1661309754747
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
list.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309754819
GPR[SPVAP]-1661309754819
GPR[EPVAP]-1661309755366
GPR[EPVS]-1661309755366
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309755368
GPR[SPVAP]-1661309755368
GPR[EPVAP]-1661309755915
GPR[EPVS]-1661309755915
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
list.add(format==null?null:formatDescription);
Validate.add(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309755921
GPR[SPVAP]-1661309755921
GPR[EPVAP]-1661309756463
GPR[EPVS]-1661309756463
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).add(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
list.add(format);
list.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.add(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309756502
GPR[SPVAP]-1661309756502
GPR[EPVAP]-1661309757043
GPR[EPVS]-1661309757043
========
substitute(index,0,source.length);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309757391
GPR[SPVAP]-1661309757391
GPR[EPVAP]-1661309757954
GPR[EPVS]-1661309757954
========
substitute(new StrBuilder(fmtCount).append(c,index,length),0,fmtCount);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309757957
GPR[SPVAP]-1661309757957
GPR[EPVAP]-1661309758498
GPR[EPVS]-1661309758498
========
substitute(new StrBuilder(fmtCount).append(stripCustom,index,length),0,fmtCount);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309758499
GPR[SPVAP]-1661309758499
GPR[EPVAP]-1661309759049
GPR[EPVS]-1661309759049
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).getMessage(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.getMessage(foundFormats.size()==fmtCount);
Validate.getMessage(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.getMessage(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309759171
GPR[SPVAP]-1661309759171
GPR[EPVAP]-1661309759718
GPR[EPVS]-1661309759718
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.getMessage(foundFormats.size()==fmtCount);
Validate.getMessage(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.getMessage(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309759721
GPR[SPVAP]-1661309759721
GPR[EPVAP]-1661309760271
GPR[EPVS]-1661309760271
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.getMessage(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.getMessage(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309760272
GPR[SPVAP]-1661309760272
GPR[EPVAP]-1661309760818
GPR[EPVS]-1661309760818
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).getMessage(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309760820
GPR[SPVAP]-1661309760820
GPR[EPVAP]-1661309761362
GPR[EPVS]-1661309761362
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.getMessage(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309761363
GPR[SPVAP]-1661309761363
GPR[EPVAP]-1661309761912
GPR[EPVS]-1661309761912
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.getMessage(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309761913
GPR[SPVAP]-1661309761913
GPR[EPVAP]-1661309762460
GPR[EPVS]-1661309762460
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.getMessage(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309762462
GPR[SPVAP]-1661309762462
GPR[EPVAP]-1661309763010
GPR[EPVS]-1661309763010
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
Nestable.class.isInstance(this.getThrowables()[start])?stripCustom.append(START_FE).append(index):this.getThrowables()[start].getMessage();
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309763011
GPR[SPVAP]-1661309763011
GPR[EPVAP]-1661309763557
GPR[EPVS]-1661309763557
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
Nestable.class.isInstance(this.getThrowables()[start])?foundFormats.add(format):this.getThrowables()[start].getMessage();
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309763558
GPR[SPVAP]-1661309763558
GPR[EPVAP]-1661309764112
GPR[EPVS]-1661309764112
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
Nestable.class.isInstance(this.getThrowables()[start])?foundDescriptions.add(format==null?null:formatDescription):this.getThrowables()[start].getMessage();
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309764113
GPR[SPVAP]-1661309764113
GPR[EPVAP]-1661309764664
GPR[EPVS]-1661309764664
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Nestable.class.isInstance(this.getThrowables()[start])?Validate.isTrue(foundFormats.size()==fmtCount):this.getThrowables()[start].getMessage();
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309764665
GPR[SPVAP]-1661309764665
GPR[EPVAP]-1661309765209
GPR[EPVS]-1661309765209
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Nestable.class.isInstance(this.getThrowables()[start])?Validate.isTrue(foundDescriptions.size()==fmtCount):this.getThrowables()[start].getMessage();
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309765210
GPR[SPVAP]-1661309765210
GPR[EPVAP]-1661309765755
GPR[EPVS]-1661309765755
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
Nestable.class.isInstance(this.getThrowables()[start])?stripCustom.append(c[pos.getIndex()]):this.getThrowables()[start].getMessage();
next(pos);

}
}

========
GPR[SPVS]-1661309765756
GPR[SPVAP]-1661309765756
GPR[EPVAP]-1661309766305
GPR[EPVS]-1661309766305
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.getMessage(foundFormats.size()==fmtCount);
Validate.getMessage(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309767955
GPR[SPVAP]-1661309767955
GPR[EPVAP]-1661309768504
GPR[EPVS]-1661309768504
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.getMessage(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.getMessage(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309768505
GPR[SPVAP]-1661309768505
GPR[EPVAP]-1661309769054
GPR[EPVS]-1661309769054
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).getMessage(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.getMessage(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309769055
GPR[SPVAP]-1661309769055
GPR[EPVAP]-1661309769599
GPR[EPVS]-1661309769599
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).getMessage(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.getMessage(foundFormats.size()==fmtCount);
Validate.getMessage(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309769653
GPR[SPVAP]-1661309769653
GPR[EPVAP]-1661309770201
GPR[EPVS]-1661309770201
========
if(substitute(index,0,fmtCount)==false){
return DUMMY_PATTERN.substring(fmtCount,offset+length);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309781904
GPR[SPVAP]-1661309781904
GPR[EPVAP]-1661309782460
GPR[EPVS]-1661309782460
========
while(pos.getIndex()<pattern.length()){
return start+fmtCount;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309782462
GPR[SPVAP]-1661309782462
GPR[EPVAP]-1661309783006
GPR[EPVS]-1661309783006
========
checkTokenized();
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309783007
GPR[SPVAP]-1661309783007
GPR[EPVAP]-1661309783558
GPR[EPVS]-1661309783558
========
deleteImpl(fmtCount,index+1,1);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309783560
GPR[SPVAP]-1661309783560
GPR[EPVAP]-1661309784111
GPR[EPVS]-1661309784111
========
while(pos.getIndex()<pattern.length()){
ensureCapacity(start+fmtCount);
ensureCapacity(start+fmtCount);
size+=fmtCount;

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309784113
GPR[SPVAP]-1661309784113
GPR[EPVAP]-1661309784656
GPR[EPVS]-1661309784656
========
while(pos.getIndex()<pattern.length()){
size+=fmtCount;
ensureCapacity(start+fmtCount);
size+=fmtCount;

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309784658
GPR[SPVAP]-1661309784658
GPR[EPVAP]-1661309785204
GPR[EPVS]-1661309785204
========
while(pos.getIndex()<pattern.length()){
ensureCapacity(start+fmtCount);
size+=fmtCount;
ensureCapacity(start+fmtCount);
size+=fmtCount;

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309785206
GPR[SPVAP]-1661309785206
GPR[EPVAP]-1661309785755
GPR[EPVS]-1661309785755
========
System.arraycopy(c,0,new char[array1.length+array2.length],0,array1.length);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309785757
GPR[SPVAP]-1661309785757
GPR[EPVAP]-1661309786305
GPR[EPVS]-1661309786305
========
System.arraycopy(c,0,new char[array1.length+array2.length],array1.length,array2.length);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309786306
GPR[SPVAP]-1661309786306
GPR[EPVAP]-1661309786861
GPR[EPVS]-1661309786861
========
try{
StringWriter index=new StringWriter(pattern.length());
unescapeJava(writer,str);
return writer.toString();
}catch (IOException ioe) {
  throw new UnhandledException(ioe);
}

while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309786864
GPR[SPVAP]-1661309786864
GPR[EPVAP]-1661309787405
GPR[EPVS]-1661309787405
========
while(pos.getIndex()<pattern.length()){
buffer=new char[start];
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309787407
GPR[SPVAP]-1661309787407
GPR[EPVAP]-1661309787952
GPR[EPVS]-1661309787952
========
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(DUMMY_PATTERN);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
buffer.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309787954
GPR[SPVAP]-1661309787954
GPR[EPVAP]-1661309788502
GPR[EPVS]-1661309788502
========
while(pos.getIndex()<pattern.length()){
names=new String[index];
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309788509
GPR[SPVAP]-1661309788509
GPR[EPVAP]-1661309789054
GPR[EPVS]-1661309789054
========
while(pos.getIndex()<pattern.length()){
values=new int[index];
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309789055
GPR[SPVAP]-1661309789055
GPR[EPVAP]-1661309789603
GPR[EPVS]-1661309789603
========
while(pos.getIndex()<pattern.length()){
names=new String[index];
values=new int[index];

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309789604
GPR[SPVAP]-1661309789604
GPR[EPVAP]-1661309790150
GPR[EPVS]-1661309790150
========
if(substitute(index,0,fmtCount)==false){
return false;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309790151
GPR[SPVAP]-1661309790151
GPR[EPVAP]-1661309790697
GPR[EPVS]-1661309790697
========
stripCustom.replace(fmtCount,offset+fmtCount,index.toString());
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309790698
GPR[SPVAP]-1661309790698
GPR[EPVAP]-1661309791240
GPR[EPVS]-1661309791240
========
while(pos.getIndex()<pattern.length()){
return this;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309791242
GPR[SPVAP]-1661309791242
GPR[EPVAP]-1661309791796
GPR[EPVS]-1661309791796
========
try{
StringWriter index=new StringWriter((int)(pattern.length()*1.5));
escapeHtml(writer,str);
return writer.toString();
}catch (IOException ioe) {
  throw new UnhandledException(ioe);
}

while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309791798
GPR[SPVAP]-1661309791798
GPR[EPVAP]-1661309792349
GPR[EPVS]-1661309792349
========
try{
StringWriter index=new StringWriter((int)(pattern.length()*1.5));
unescapeHtml(writer,str);
return writer.toString();
}catch (IOException ioe) {
  throw new UnhandledException(ioe);
}

while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309792350
GPR[SPVAP]-1661309792350
GPR[EPVAP]-1661309792897
GPR[EPVS]-1661309792897
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309792899
GPR[SPVAP]-1661309792899
GPR[EPVAP]-1661309793444
GPR[EPVS]-1661309793444
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309793445
GPR[SPVAP]-1661309793445
GPR[EPVAP]-1661309793995
GPR[EPVS]-1661309793995
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309793996
GPR[SPVAP]-1661309793996
GPR[EPVAP]-1661309794544
GPR[EPVS]-1661309794544
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309794546
GPR[SPVAP]-1661309794546
GPR[EPVAP]-1661309795092
GPR[EPVS]-1661309795092
========
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309795093
GPR[SPVAP]-1661309795093
GPR[EPVAP]-1661309795640
GPR[EPVS]-1661309795640
========
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309795641
GPR[SPVAP]-1661309795641
GPR[EPVAP]-1661309796191
GPR[EPVS]-1661309796191
========
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309796193
GPR[SPVAP]-1661309796193
GPR[EPVAP]-1661309796741
GPR[EPVS]-1661309796741
========
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309796742
GPR[SPVAP]-1661309796742
GPR[EPVAP]-1661309797296
GPR[EPVS]-1661309797296
========
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309797297
GPR[SPVAP]-1661309797297
GPR[EPVAP]-1661309797845
GPR[EPVS]-1661309797845
========
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309797846
GPR[SPVAP]-1661309797846
GPR[EPVAP]-1661309798392
GPR[EPVS]-1661309798392
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309798393
GPR[SPVAP]-1661309798393
GPR[EPVAP]-1661309798960
GPR[EPVS]-1661309798960
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309798961
GPR[SPVAP]-1661309798961
GPR[EPVAP]-1661309799505
GPR[EPVS]-1661309799505
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309799506
GPR[SPVAP]-1661309799506
GPR[EPVAP]-1661309800053
GPR[EPVS]-1661309800053
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309800054
GPR[SPVAP]-1661309800054
GPR[EPVAP]-1661309800602
GPR[EPVS]-1661309800602
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309800603
GPR[SPVAP]-1661309800603
GPR[EPVAP]-1661309801158
GPR[EPVS]-1661309801158
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309801159
GPR[SPVAP]-1661309801159
GPR[EPVAP]-1661309801705
GPR[EPVS]-1661309801705
========
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309801706
GPR[SPVAP]-1661309801706
GPR[EPVAP]-1661309802253
GPR[EPVS]-1661309802253
========
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309802254
GPR[SPVAP]-1661309802254
GPR[EPVAP]-1661309802803
GPR[EPVS]-1661309802803
========
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309802804
GPR[SPVAP]-1661309802804
GPR[EPVAP]-1661309803345
GPR[EPVS]-1661309803345
========
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309803346
GPR[SPVAP]-1661309803346
GPR[EPVAP]-1661309803897
GPR[EPVS]-1661309803897
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309803898
GPR[SPVAP]-1661309803898
GPR[EPVAP]-1661309804442
GPR[EPVS]-1661309804442
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309804443
GPR[SPVAP]-1661309804443
GPR[EPVAP]-1661309804995
GPR[EPVS]-1661309804995
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309804996
GPR[SPVAP]-1661309804996
GPR[EPVAP]-1661309805551
GPR[EPVS]-1661309805551
========
if(DUMMY_PATTERN.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309805553
GPR[SPVAP]-1661309805553
GPR[EPVAP]-1661309806098
GPR[EPVS]-1661309806098
========
if(DUMMY_PATTERN.length()==1&&!Character.isDigit(val.charAt(0))){
throw new NumberFormatException(val+" is not a valid number.");
}
if(DUMMY_PATTERN.startsWith("--")){
return null;
}
if(DUMMY_PATTERN.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(index>-1){
if(fmtCount>-1){
if(expPos<decPos){
throw new NumberFormatException(DUMMY_PATTERN+" is not a valid number.");
}
formatDescription=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
DUMMY_PATTERN=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309806099
GPR[SPVAP]-1661309806099
GPR[EPVAP]-1661309806643
GPR[EPVS]-1661309806643
========
while(pos.getIndex()<pattern.length()){
return -1;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309806646
GPR[SPVAP]-1661309806646
GPR[EPVAP]-1661309807190
GPR[EPVS]-1661309807190
========
while(pos.getIndex()<pattern.length()){
ensureCapacity(start+4);
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309807193
GPR[SPVAP]-1661309807193
GPR[EPVAP]-1661309807744
GPR[EPVS]-1661309807744
========
while(pos.getIndex()<pattern.length()){
buffer[index++]='t';
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309807745
GPR[SPVAP]-1661309807745
GPR[EPVAP]-1661309808294
GPR[EPVS]-1661309808294
========
while(pos.getIndex()<pattern.length()){
buffer[index++]='r';
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309808295
GPR[SPVAP]-1661309808295
GPR[EPVAP]-1661309808847
GPR[EPVS]-1661309808847
========
while(pos.getIndex()<pattern.length()){
buffer[index++]='u';
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309808848
GPR[SPVAP]-1661309808848
GPR[EPVAP]-1661309809401
GPR[EPVS]-1661309809401
========
while(pos.getIndex()<pattern.length()){
buffer[index]='e';
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309809403
GPR[SPVAP]-1661309809403
GPR[EPVAP]-1661309809951
GPR[EPVS]-1661309809951
========
while(pos.getIndex()<pattern.length()){
size+=4;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309809952
GPR[SPVAP]-1661309809952
GPR[EPVAP]-1661309810496
GPR[EPVS]-1661309810496
========
while(pos.getIndex()<pattern.length()){
ensureCapacity(start+4);
buffer[index++]='t';
buffer[index++]='r';
buffer[index++]='u';
buffer[index]='e';
size+=4;

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309810498
GPR[SPVAP]-1661309810498
GPR[EPVAP]-1661309811044
GPR[EPVS]-1661309811044
========
while(pos.getIndex()<pattern.length()){
ensureCapacity(start+5);
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309811046
GPR[SPVAP]-1661309811046
GPR[EPVAP]-1661309811595
GPR[EPVS]-1661309811595
========
while(pos.getIndex()<pattern.length()){
buffer[index++]='f';
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309811596
GPR[SPVAP]-1661309811596
GPR[EPVAP]-1661309812145
GPR[EPVS]-1661309812145
========
while(pos.getIndex()<pattern.length()){
buffer[index++]='a';
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309812146
GPR[SPVAP]-1661309812146
GPR[EPVAP]-1661309812712
GPR[EPVS]-1661309812712
========
while(pos.getIndex()<pattern.length()){
buffer[index++]='l';
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309812713
GPR[SPVAP]-1661309812713
GPR[EPVAP]-1661309813258
GPR[EPVS]-1661309813258
========
while(pos.getIndex()<pattern.length()){
buffer[index++]='s';
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309813259
GPR[SPVAP]-1661309813259
GPR[EPVAP]-1661309813806
GPR[EPVS]-1661309813806
========
while(pos.getIndex()<pattern.length()){
size+=5;
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309813807
GPR[SPVAP]-1661309813807
GPR[EPVAP]-1661309814347
GPR[EPVS]-1661309814347
========
while(pos.getIndex()<pattern.length()){
ensureCapacity(start+5);
buffer[index++]='f';
buffer[index++]='a';
buffer[index++]='l';
buffer[index++]='s';
buffer[index]='e';
size+=5;

swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309814349
GPR[SPVAP]-1661309814349
GPR[EPVAP]-1661309814889
GPR[EPVS]-1661309814889
========
validateIndex(fmtCount);
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309814890
GPR[SPVAP]-1661309814890
GPR[EPVAP]-1661309815433
GPR[EPVS]-1661309815433
========
if(DUMMY_PATTERN.length()!=2&&len!=5&&len<7){
throw new IllegalArgumentException("Invalid locale format: "+DUMMY_PATTERN);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309815436
GPR[SPVAP]-1661309815436
GPR[EPVAP]-1661309815982
GPR[EPVS]-1661309815982
========
if(start<'a'||ch0>'z'||DUMMY_PATTERN.charAt(1)<'a'||ch1>'z'){
throw new IllegalArgumentException("Invalid locale format: "+DUMMY_PATTERN);
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309815983
GPR[SPVAP]-1661309815983
GPR[EPVAP]-1661309816525
GPR[EPVS]-1661309816526
========
if(DUMMY_PATTERN.length()==2){
return new Locale(DUMMY_PATTERN,"");
}else {
if(str.charAt(2)!='_'){
throw new IllegalArgumentException("Invalid locale format: "+str);
}
char DUMMY_PATTERN.charAt(3)=str.charAt(3);
if(ch3=='_'){
return new Locale(str.substring(0,2),"",str.substring(4));
}
char format=str.charAt(4);
if(ch3<'A'||ch3>'Z'||ch4<'A'||ch4>'Z'){
throw new IllegalArgumentException("Invalid locale format: "+str);
}
if(len==5){
return new Locale(str.substring(0,2),str.substring(3,5));
}else {
if(str.charAt(5)!='_'){
throw new IllegalArgumentException("Invalid locale format: "+str);
}
return new Locale(str.substring(0,2),str.substring(3,5),str.substring(6));
}
}
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309816527
GPR[SPVAP]-1661309816527
GPR[EPVAP]-1661309817069
GPR[EPVS]-1661309817069
========
fmtCount--;
while(pos.getIndex()<pattern.length()){
swtich (c[pos.getIndex()]){
case QUOTE :
appendQuotedString(pattern,pos,stripCustom,true);
break;

case START_FE :
fmtCount++;
seekNonWs(pattern,pos);
int start=pos.getIndex();
int index=readArgumentIndex(pattern,next(pos));
stripCustom.append(START_FE).append(index);
seekNonWs(pattern,pos);
Format format=null;
String formatDescription=null;
if(c[pos.getIndex()]==START_FMT){
formatDescription=parseFormatDescription(pattern,next(pos));
format=getFormat(formatDescription);
if(format==null){
stripCustom.append(START_FMT).append(formatDescription);
}
}
foundFormats.add(format);
foundDescriptions.add(format==null?null:formatDescription);
Validate.isTrue(foundFormats.size()==fmtCount);
Validate.isTrue(foundDescriptions.size()==fmtCount);
if(c[pos.getIndex()]!=END_FE){
throw new IllegalArgumentException("Unreadable format element at position "+start);
}

default :
stripCustom.append(c[pos.getIndex()]);
next(pos);

}
}

========
GPR[SPVS]-1661309817077
GPR[SPVAP]-1661309817077
GPR[EPVAP]-1661309817620
GPR[EPVS]-1661309817620
GPR[ESUN]-1661309817623
GPR[SSUN]-1661309817623
org.apache.commons.lang.text.ExtendedMessageFormat,156
Find no block!
GPR[SSUN]-1661309817740
org.apache.commons.lang.text.ExtendedMessageFormat,187
GPR[ESUN]-1661309817793
GPR[SSUN]-1661309817793
org.apache.commons.lang.text.ExtendedMessageFormat,188
GPR[ESUN]-1661309817842
GPR[SSUN]-1661309817842
org.apache.commons.lang.text.ExtendedMessageFormat,403
========
pos.setErrorIndex(0);
pos.setIndex(pos.getIndex()+1);
return pos;

========
GPR[SPVS]-1661309818206
GPR[SPVAP]-1661309818206
GPR[EPVAP]-1661309821334
GPR[SPVATF]-1661309821334
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661309862253
GPR[EPVS]-1661309862253
========
pos.append(pos.getIndex()+1);
return pos;

========
GPR[SPVS]-1661309862255
GPR[SPVAP]-1661309862255
GPR[EPVAP]-1661309862940
GPR[EPVS]-1661309862940
========
pos.charAt(pos.getIndex()+1);
return pos;

========
GPR[SPVS]-1661309862941
GPR[SPVAP]-1661309862941
GPR[EPVAP]-1661309863605
GPR[EPVS]-1661309863605
GPR[ESUN]-1661309863605
GPR[SSUN]-1661309863605
org.apache.commons.lang.text.ExtendedMessageFormat,404
GPR[ESUN]-1661309863720
GPR[SSUN]-1661309863720
org.apache.commons.lang.text.ExtendedMessageFormat,124
========
if((FormatFactory)registry.get(DUMMY_PATTERN)!=null){
return factory.getFormat(DUMMY_PATTERN,pattern,getLocale());
}
super(DUMMY_PATTERN);
setLocale(locale);
this.registry=registry;
applyPattern(pattern);

========
GPR[SPVS]-1661309864067
GPR[SPVAP]-1661309864067
GPR[EPVAP]-1661309865248
GPR[EPVS]-1661309865248
========
super(DUMMY_PATTERN);
charAt(locale);
this.registry=registry;
applyPattern(pattern);

========
GPR[SPVS]-1661309865250
GPR[SPVAP]-1661309865250
GPR[EPVAP]-1661309866064
GPR[EPVS]-1661309866064
========
if(locale==null){
locale=Locale.getDefault();
}
super(DUMMY_PATTERN);
setLocale(locale);
this.registry=registry;
applyPattern(pattern);

========
GPR[SPVS]-1661309866066
GPR[SPVAP]-1661309866066
GPR[EPVAP]-1661309866876
GPR[EPVS]-1661309866876
========
locale=locale;
super(DUMMY_PATTERN);
setLocale(locale);
this.registry=registry;
applyPattern(pattern);

========
GPR[SPVS]-1661309866877
GPR[SPVAP]-1661309866877
GPR[EPVAP]-1661309867679
GPR[EPVS]-1661309867679
GPR[ESUN]-1661309867679
GPR[SSUN]-1661309867679
org.apache.commons.lang.text.ExtendedMessageFormat,125
GPR[ESUN]-1661309867741
GPR[SSUN]-1661309867741
org.apache.commons.lang.text.ExtendedMessageFormat,126
GPR[ESUN]-1661309867796
GPR[SSUN]-1661309867796
org.apache.commons.lang.text.ExtendedMessageFormat,127
GPR[ESUN]-1661309867846
GPR[SSUN]-1661309867846
org.apache.commons.lang.text.ExtendedMessageFormat,143
GPR[ESUN]-1661309868194
GPR[SSUN]-1661309868194
org.apache.commons.lang.text.ExtendedMessageFormat,144
GPR[ESUN]-1661309868239
GPR[SSUN]-1661309868239
org.apache.commons.lang.text.ExtendedMessageFormat,145
GPR[ESUN]-1661309868290
GPR[SSUN]-1661309868290
org.apache.commons.lang.text.ExtendedMessageFormat,146
GPR[ESUN]-1661309868341
GPR[SSUN]-1661309868341
org.apache.commons.lang.text.StrMatcher,349
========
Arrays.sort(this.chars);
super();
chars=str.toCharArray();

========
GPR[SPVS]-1661309868940
GPR[SPVAP]-1661309868940
GPR[EPVAP]-1661309870131
GPR[EPVS]-1661309870131
========
super();
chars=input.toCharArray();

========
GPR[SPVS]-1661309870132
GPR[SPVAP]-1661309870132
GPR[EPVAP]-1661309870906
GPR[EPVS]-1661309870906
========
super();
reset();
chars=str.toCharArray();

========
GPR[SPVS]-1661309870907
GPR[SPVAP]-1661309870907
GPR[EPVAP]-1661309871665
GPR[EPVS]-1661309871665
GPR[ESUN]-1661309871668
GPR[SSUN]-1661309871668
org.apache.commons.lang.text.StrMatcher,350
GPR[ESUN]-1661309871725
GPR[SSUN]-1661309871725
org.apache.commons.lang.text.StrMatcher,351
Find no block!
GPR[SSUN]-1661309871767
org.apache.commons.lang.text.StrMatcher,363
========
if(pos+len>pos){
return 0;
}

========
GPR[SPVS]-1661309872162
GPR[SPVAP]-1661309872162
GPR[EPVAP]-1661309875331
GPR[SPVATF]-1661309875331
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661309916410
GPR[EPVS]-1661309916410
========
if(pos+len>len){
return 0;
}

========
GPR[SPVS]-1661309916412
GPR[SPVAP]-1661309916412
GPR[EPVAP]-1661309917508
GPR[SPVATF]-1661309917508
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661309958383
GPR[EPVS]-1661309958383
========
if(pos+len>size){
return 0;
}

========
GPR[SPVS]-1661309958385
GPR[SPVAP]-1661309958385
GPR[EPVAP]-1661309959044
GPR[EPVS]-1661309959044
========
if(pos+len>=bufferEnd){
return 0;
}

========
GPR[SPVS]-1661309959045
GPR[SPVAP]-1661309959045
GPR[EPVAP]-1661309960122
GPR[SPVATF]-1661309960122
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310000924
GPR[EPVS]-1661310000924
========
if(pos+len>=len){
return 0;
}

========
GPR[SPVS]-1661310000925
GPR[SPVAP]-1661310000925
GPR[EPVAP]-1661310002004
GPR[SPVATF]-1661310002004
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310042916
GPR[EPVS]-1661310042916
========
if(i+len>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310042917
GPR[SPVAP]-1661310042917
GPR[EPVAP]-1661310043548
GPR[EPVS]-1661310043548
========
if(pos+len>count){
return 0;
}

========
GPR[SPVS]-1661310043549
GPR[SPVAP]-1661310043549
GPR[EPVAP]-1661310044181
GPR[EPVS]-1661310044181
========
if(pos+len>startIndex){
return 0;
}

========
GPR[SPVS]-1661310044182
GPR[SPVAP]-1661310044182
GPR[EPVAP]-1661310044803
GPR[EPVS]-1661310044803
========
if(pos+len>bufferEnd){
return pos;
}

========
GPR[SPVS]-1661310044804
GPR[SPVAP]-1661310044804
GPR[EPVAP]-1661310045892
GPR[SPVATF]-1661310045892
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310086983
GPR[EPVS]-1661310086983
========
if(pos+len>bufferEnd){
return bufferEnd;
}

========
GPR[SPVS]-1661310086984
GPR[SPVAP]-1661310086984
GPR[EPVAP]-1661310088065
GPR[SPVATF]-1661310088065
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310128957
GPR[EPVS]-1661310128957
========
pos=validateRange(bufferEnd,endIndex);
if(pos+len>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310128959
GPR[SPVAP]-1661310128959
GPR[EPVAP]-1661310129605
GPR[EPVS]-1661310129605
========
if(pos+n>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310129606
GPR[SPVAP]-1661310129607
GPR[EPVAP]-1661310130240
GPR[EPVS]-1661310130240
========
this.getChars(pos,pos+len,buffer,bufferEnd);
if(pos+len>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310130241
GPR[SPVAP]-1661310130241
GPR[EPVAP]-1661310130902
GPR[EPVS]-1661310130902
========
pos+=len;
if(pos+len>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310130903
GPR[SPVAP]-1661310130903
GPR[EPVAP]-1661310131987
GPR[SPVATF]-1661310131987
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310172956
GPR[EPVS]-1661310172956
========
if(pos+len>currentType){
return 0;
}

========
GPR[SPVS]-1661310172958
GPR[SPVAP]-1661310172958
GPR[EPVAP]-1661310173598
GPR[EPVS]-1661310173598
========
if(off+off>off){
return 0;
}

========
GPR[SPVS]-1661310173600
GPR[SPVAP]-1661310173600
GPR[EPVAP]-1661310174248
GPR[EPVS]-1661310174248
========
if(length+length>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310174250
GPR[SPVAP]-1661310174250
GPR[EPVAP]-1661310174892
GPR[EPVS]-1661310174892
========
if(pos+off>off){
return 0;
}

========
GPR[SPVS]-1661310174893
GPR[SPVAP]-1661310174893
GPR[EPVAP]-1661310175540
GPR[EPVS]-1661310175540
========
if(off+len>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310175541
GPR[SPVAP]-1661310175541
GPR[EPVAP]-1661310176176
GPR[EPVS]-1661310176176
========
if(length+len>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310176177
GPR[SPVAP]-1661310176177
GPR[EPVAP]-1661310176810
GPR[EPVS]-1661310176810
========
if(pos+off>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310176811
GPR[SPVAP]-1661310176811
GPR[EPVAP]-1661310177449
GPR[EPVS]-1661310177449
========
if(pos+length>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310177450
GPR[SPVAP]-1661310177450
GPR[EPVAP]-1661310178081
GPR[EPVS]-1661310178082
========
if(pos+len>off){
return 0;
}

========
GPR[SPVS]-1661310178082
GPR[SPVAP]-1661310178082
GPR[EPVAP]-1661310178718
GPR[EPVS]-1661310178718
========
if(off+off>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310178719
GPR[SPVAP]-1661310178719
GPR[EPVAP]-1661310179360
GPR[EPVS]-1661310179360
========
if(off+len>off){
return 0;
}

========
GPR[SPVS]-1661310179361
GPR[SPVAP]-1661310179361
GPR[EPVAP]-1661310179992
GPR[EPVS]-1661310179992
========
if(off+len>len){
return 0;
}

========
GPR[SPVS]-1661310179993
GPR[SPVAP]-1661310179993
GPR[EPVAP]-1661310180619
GPR[EPVS]-1661310180619
========
if(pos+off>len){
return 0;
}

========
GPR[SPVS]-1661310180620
GPR[SPVAP]-1661310180620
GPR[EPVAP]-1661310181255
GPR[EPVS]-1661310181255
========
if(off+off>len){
return 0;
}

========
GPR[SPVS]-1661310181256
GPR[SPVAP]-1661310181256
GPR[EPVAP]-1661310181892
GPR[EPVS]-1661310181892
========
if(pos+len>max){
return 0;
}

========
GPR[SPVS]-1661310181893
GPR[SPVAP]-1661310181893
GPR[EPVAP]-1661310182510
GPR[EPVS]-1661310182510
========
pos=len+bufferEnd;
if(pos+len>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310182511
GPR[SPVAP]-1661310182511
GPR[EPVAP]-1661310183585
GPR[SPVATF]-1661310183585
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310224502
GPR[EPVS]-1661310224502
========
if(pos+len>length){
return 0;
}

========
GPR[SPVS]-1661310224503
GPR[SPVAP]-1661310224503
GPR[EPVAP]-1661310225125
GPR[EPVS]-1661310225125
========
System.arraycopy(buffer,0,buffer,0,len);
if(pos+len>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310225126
GPR[SPVAP]-1661310225126
GPR[EPVAP]-1661310226198
GPR[SPVATF]-1661310226198
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310267140
GPR[EPVS]-1661310267140
========
System.arraycopy(buffer,0,buffer,0,len);
if(pos+len>len){
return 0;
}

========
GPR[SPVS]-1661310267142
GPR[SPVAP]-1661310267142
GPR[EPVAP]-1661310268209
GPR[SPVATF]-1661310268209
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310309155
GPR[EPVS]-1661310309155
========
if(pos+sepLen>sepLen){
return 0;
}

========
GPR[SPVS]-1661310309157
GPR[SPVAP]-1661310309157
GPR[EPVAP]-1661310309797
GPR[EPVS]-1661310309797
========
if(pos+sepLen>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310309798
GPR[SPVAP]-1661310309798
GPR[EPVAP]-1661310310418
GPR[EPVS]-1661310310418
========
if(pos+len>sepLen){
return 0;
}

========
GPR[SPVS]-1661310310420
GPR[SPVAP]-1661310310420
GPR[EPVAP]-1661310311049
GPR[EPVS]-1661310311049
========
deleteImpl(pos,bufferStart,len);
if(pos+len>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310311050
GPR[SPVAP]-1661310311050
GPR[EPVAP]-1661310311685
GPR[EPVS]-1661310311685
========
if(removeLen+len>bufferEnd){
return 0;
}

========
GPR[SPVS]-1661310311686
GPR[SPVAP]-1661310311686
GPR[EPVAP]-1661310312306
GPR[EPVS]-1661310312306
========
if(buffer[i]!=ch){
return 0;
}

========
GPR[SPVS]-1661310313062
GPR[SPVAP]-1661310313062
GPR[EPVAP]-1661310313692
GPR[EPVS]-1661310313692
========
if(buffer[i]!=buffer[pos]){
return 0;
}

========
GPR[SPVS]-1661310313694
GPR[SPVAP]-1661310313694
GPR[EPVAP]-1661310314779
GPR[SPVATF]-1661310314779
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310355864
GPR[EPVS]-1661310355864
========
if(chars[i]!=ch){
return 0;
}

========
GPR[SPVS]-1661310355866
GPR[SPVAP]-1661310355866
GPR[EPVAP]-1661310356504
GPR[EPVS]-1661310356504
========
if(chars[i]==buffer[pos]){
return 0;
}

========
GPR[SPVS]-1661310356505
GPR[SPVAP]-1661310356505
GPR[EPVAP]-1661310357586
GPR[SPVATF]-1661310357586
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310398537
GPR[EPVS]-1661310398537
========
if(buffer[i]==ch){
return 0;
}

========
GPR[SPVS]-1661310398538
GPR[SPVAP]-1661310398538
GPR[EPVAP]-1661310399177
GPR[EPVS]-1661310399177
========
if(buffer[i]==buffer[pos]){
return 0;
}

========
GPR[SPVS]-1661310399178
GPR[SPVAP]-1661310399178
GPR[EPVAP]-1661310400243
GPR[SPVATF]-1661310400243
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310441141
GPR[EPVS]-1661310441141
========
if(chars[i]==ch){
return 0;
}

========
GPR[SPVS]-1661310441143
GPR[SPVAP]-1661310441143
GPR[EPVAP]-1661310441765
GPR[EPVS]-1661310441765
========
if(chars[i]!=buffer[bufferEnd+bufferEnd]){
return 0;
}

========
GPR[SPVS]-1661310441766
GPR[SPVAP]-1661310441766
GPR[EPVAP]-1661310442828
GPR[SPVATF]-1661310442828
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310483804
GPR[EPVS]-1661310483804
========
if(chars[i]!=null){
return 0;
}

========
GPR[SPVS]-1661310483806
GPR[SPVAP]-1661310483806
GPR[EPVAP]-1661310484435
GPR[EPVS]-1661310484435
========
if(thisBuf[i]==ch){
return 0;
}

========
GPR[SPVS]-1661310484436
GPR[SPVAP]-1661310484436
GPR[EPVAP]-1661310485066
GPR[EPVS]-1661310485066
========
if(ch==delimiters[i]){
return 0;
}

========
GPR[SPVS]-1661310485067
GPR[SPVAP]-1661310485067
GPR[EPVAP]-1661310485701
GPR[EPVS]-1661310485701
========
if(ch!=buffer[pos]){
return 0;
}

========
GPR[SPVS]-1661310485702
GPR[SPVAP]-1661310485702
GPR[EPVAP]-1661310486329
GPR[EPVS]-1661310486329
========
if(chars[i]!=buffer[i]){
return 0;
}

========
GPR[SPVS]-1661310486329
GPR[SPVAP]-1661310486329
GPR[EPVAP]-1661310487408
GPR[SPVATF]-1661310487408
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310528485
GPR[EPVS]-1661310528485
========
if(chars[i]==buffer[i]){
return 0;
}

========
GPR[SPVS]-1661310528487
GPR[SPVAP]-1661310528487
GPR[EPVAP]-1661310529550
GPR[SPVATF]-1661310529550
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310570442
GPR[EPVS]-1661310570442
========
if(thisBuf[i]!=otherBuf[i]){
return 0;
}

========
GPR[SPVS]-1661310570443
GPR[SPVAP]-1661310570443
GPR[EPVAP]-1661310571080
GPR[EPVS]-1661310571080
========
if(buffer[i]!=buffer[i]){
return 0;
}

========
GPR[SPVS]-1661310571081
GPR[SPVAP]-1661310571081
GPR[EPVAP]-1661310572171
GPR[SPVATF]-1661310572171
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310613089
GPR[EPVS]-1661310613089
========
if(chars[i]==null){
return 0;
}

========
GPR[SPVS]-1661310613091
GPR[SPVAP]-1661310613091
GPR[EPVAP]-1661310613710
GPR[EPVS]-1661310613710
========
if(searchChars[j]==ch){
return 0;
}

========
GPR[SPVS]-1661310613711
GPR[SPVAP]-1661310613711
GPR[EPVAP]-1661310614333
GPR[EPVS]-1661310614333
========
if(chars.length==1){
return new CharMatcher(chars[0]);
}
if(chars[i]!=buffer[pos]){
return 0;
}

========
GPR[SPVS]-1661310614335
GPR[SPVAP]-1661310614335
GPR[EPVAP]-1661310614970
GPR[EPVS]-1661310614970
========
ch=buffer[i];
if(chars[i]!=buffer[pos]){
return 0;
}

========
GPR[SPVS]-1661310614973
GPR[SPVAP]-1661310614973
GPR[EPVAP]-1661310615596
GPR[EPVS]-1661310615596
========
bufferEnd--;
if(chars[i]!=buffer[pos]){
return 0;
}

========
GPR[SPVS]-1661310615598
GPR[SPVAP]-1661310615598
GPR[EPVAP]-1661310616667
GPR[SPVATF]-1661310616667
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310657625
GPR[EPVS]-1661310657625
========
if(chars[i]!='0'){
return 0;
}

========
GPR[SPVS]-1661310657629
GPR[SPVAP]-1661310657629
GPR[EPVAP]-1661310658719
GPR[SPVATF]-1661310658719
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310699608
GPR[EPVS]-1661310699608
========
if(invalidChars[j]==ch){
return 0;
}

========
GPR[SPVS]-1661310699609
GPR[SPVAP]-1661310699609
GPR[EPVAP]-1661310700266
GPR[EPVS]-1661310700266
========
if(buffer[bufferEnd]!=buffer[pos]){
return 0;
}

========
GPR[SPVS]-1661310700267
GPR[SPVAP]-1661310700267
GPR[EPVAP]-1661310701346
GPR[SPVATF]-1661310701346
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310742299
GPR[EPVS]-1661310742299
========
if(buffer[bufferEnd]==buffer[pos]){
return 0;
}

========
GPR[SPVS]-1661310742301
GPR[SPVAP]-1661310742301
GPR[EPVAP]-1661310743383
GPR[SPVATF]-1661310743383
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310784573
GPR[EPVS]-1661310784573
========
if(buffer[bufferEnd]!=ch){
return 0;
}

========
GPR[SPVS]-1661310784575
GPR[SPVAP]-1661310784575
GPR[EPVAP]-1661310785212
GPR[EPVS]-1661310785212
========
if(buffer[bufferEnd]==ch){
return 0;
}

========
GPR[SPVS]-1661310785213
GPR[SPVAP]-1661310785213
GPR[EPVAP]-1661310785851
GPR[EPVS]-1661310785851
========
if(chars[i]!=Calendar.HOUR_OF_DAY){
return 0;
}

========
GPR[SPVS]-1661310785853
GPR[SPVAP]-1661310785853
GPR[EPVAP]-1661310786480
GPR[EPVS]-1661310786480
========
if(chars[i]!=Calendar.DATE){
return 0;
}

========
GPR[SPVS]-1661310786482
GPR[SPVAP]-1661310786482
GPR[EPVAP]-1661310787115
GPR[EPVS]-1661310787115
========
if(ch==array[i]){
return 0;
}

========
GPR[SPVS]-1661310787117
GPR[SPVAP]-1661310787117
GPR[EPVAP]-1661310787740
GPR[EPVS]-1661310787740
========
if(ch==buffer[pos]){
return 0;
}

========
GPR[SPVS]-1661310787741
GPR[SPVAP]-1661310787741
GPR[EPVAP]-1661310788376
GPR[EPVS]-1661310788376
========
if(ch!=buffer[i]){
return 0;
}

========
GPR[SPVS]-1661310788377
GPR[SPVAP]-1661310788377
GPR[EPVAP]-1661310789007
GPR[EPVS]-1661310789007
========
if(ch==buffer[i]){
return 0;
}

========
GPR[SPVS]-1661310789008
GPR[SPVAP]-1661310789008
GPR[EPVAP]-1661310789646
GPR[EPVS]-1661310789646
========
for(int i=0;i<length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661310790644
GPR[SPVAP]-1661310790644
GPR[EPVAP]-1661310791268
GPR[EPVS]-1661310791268
========
for(int i=0;i<len;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661310791270
GPR[SPVAP]-1661310791270
GPR[EPVAP]-1661310792334
GPR[SPVATF]-1661310792334
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310833257
GPR[EPVS]-1661310833257
========
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}

========
GPR[SPVS]-1661310833258
GPR[SPVAP]-1661310833258
GPR[EPVAP]-1661310833901
GPR[EPVS]-1661310833901
========
for(int i=0;i<array.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661310833903
GPR[SPVAP]-1661310833903
GPR[EPVAP]-1661310834521
GPR[EPVS]-1661310834521
========
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661310834522
GPR[SPVAP]-1661310834522
GPR[EPVAP]-1661310835620
GPR[SPVATF]-1661310835620
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310876541
GPR[EPVS]-1661310876541
========
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=null){
return 0;
}
}

========
GPR[SPVS]-1661310876542
GPR[SPVAP]-1661310876542
GPR[EPVAP]-1661310877173
GPR[EPVS]-1661310877173
========
for(int i=0;i<array.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661310877174
GPR[SPVAP]-1661310877174
GPR[EPVAP]-1661310877834
GPR[EPVS]-1661310877834
========
for(int i=0;i<array.length;i++,pos++){
if(chars[i]!=null){
return 0;
}
}

========
GPR[SPVS]-1661310877836
GPR[SPVAP]-1661310877836
GPR[EPVAP]-1661310878461
GPR[EPVS]-1661310878461
========
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==null){
return 0;
}
}

========
GPR[SPVS]-1661310878462
GPR[SPVAP]-1661310878462
GPR[EPVAP]-1661310879098
GPR[EPVS]-1661310879098
========
for(int i=0;i<array.length;i++,pos++){
if(chars[i]==null){
return 0;
}
}

========
GPR[SPVS]-1661310879099
GPR[SPVAP]-1661310879099
GPR[EPVAP]-1661310879732
GPR[EPVS]-1661310879732
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661310879734
GPR[SPVAP]-1661310879734
GPR[EPVAP]-1661310880804
GPR[SPVATF]-1661310880804
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310921712
GPR[EPVS]-1661310921712
========
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==length){
return 0;
}
}

========
GPR[SPVS]-1661310921714
GPR[SPVAP]-1661310921714
GPR[EPVAP]-1661310922340
GPR[EPVS]-1661310922340
========
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661310922342
GPR[SPVAP]-1661310922342
GPR[EPVAP]-1661310923446
GPR[SPVATF]-1661310923446
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661310964504
GPR[EPVS]-1661310964504
========
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=length){
return 0;
}
}

========
GPR[SPVS]-1661310964505
GPR[SPVAP]-1661310964505
GPR[EPVAP]-1661310965133
GPR[EPVS]-1661310965133
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661310965134
GPR[SPVAP]-1661310965134
GPR[EPVAP]-1661310966211
GPR[SPVATF]-1661310966211
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311007124
GPR[EPVS]-1661311007124
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311007125
GPR[SPVAP]-1661311007125
GPR[EPVAP]-1661311008213
GPR[SPVATF]-1661311008213
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311049054
GPR[EPVS]-1661311049054
========
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311049055
GPR[SPVAP]-1661311049055
GPR[EPVAP]-1661311050134
GPR[SPVATF]-1661311050134
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311091119
GPR[EPVS]-1661311091119
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311091120
GPR[SPVAP]-1661311091120
GPR[EPVAP]-1661311092217
GPR[SPVATF]-1661311092217
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311133226
GPR[EPVS]-1661311133226
========
for(int i=bufferEnd;i<array.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311133228
GPR[SPVAP]-1661311133228
GPR[EPVAP]-1661311133860
GPR[EPVS]-1661311133860
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(chars[i]!=null){
return 0;
}
}

========
GPR[SPVS]-1661311133861
GPR[SPVAP]-1661311133861
GPR[EPVAP]-1661311134508
GPR[EPVS]-1661311134508
========
for(int i=bufferEnd;i<array.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311134509
GPR[SPVAP]-1661311134509
GPR[EPVAP]-1661311135136
GPR[EPVS]-1661311135136
========
for(int i=bufferEnd;i<array.length;i++,pos++){
if(chars[i]!=null){
return 0;
}
}

========
GPR[SPVS]-1661311135137
GPR[SPVAP]-1661311135137
GPR[EPVAP]-1661311135764
GPR[EPVS]-1661311135764
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(chars[i]==null){
return 0;
}
}

========
GPR[SPVS]-1661311135766
GPR[SPVAP]-1661311135766
GPR[EPVAP]-1661311136393
GPR[EPVS]-1661311136393
========
for(int i=bufferEnd;i<array.length;i++,pos++){
if(chars[i]==null){
return 0;
}
}

========
GPR[SPVS]-1661311136394
GPR[SPVAP]-1661311136394
GPR[EPVAP]-1661311137010
GPR[EPVS]-1661311137010
========
for(int i=0;i<searchChars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311137013
GPR[SPVAP]-1661311137013
GPR[EPVAP]-1661311137645
GPR[EPVS]-1661311137645
========
for(int i=0;i<chars.length;i++,pos++){
if(searchChars[j]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311137646
GPR[SPVAP]-1661311137646
GPR[EPVAP]-1661311138268
GPR[EPVS]-1661311138268
========
for(int i=0;i<searchChars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311138269
GPR[SPVAP]-1661311138269
GPR[EPVAP]-1661311138898
GPR[EPVS]-1661311138898
========
for(int i=0;i<searchChars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311138899
GPR[SPVAP]-1661311138899
GPR[EPVAP]-1661311139533
GPR[EPVS]-1661311139533
========
for(int i=0;i<searchChars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}

========
GPR[SPVS]-1661311139534
GPR[SPVAP]-1661311139534
GPR[EPVAP]-1661311140151
GPR[EPVS]-1661311140151
========
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311140152
GPR[SPVAP]-1661311140152
GPR[EPVAP]-1661311140774
GPR[EPVS]-1661311140774
========
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}

========
GPR[SPVS]-1661311140775
GPR[SPVAP]-1661311140775
GPR[EPVAP]-1661311141400
GPR[EPVS]-1661311141400
========
for(int i=0;i<searchChars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311141401
GPR[SPVAP]-1661311141401
GPR[EPVAP]-1661311142030
GPR[EPVS]-1661311142030
========
for(int i=0;i<searchChars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311142031
GPR[SPVAP]-1661311142031
GPR[EPVAP]-1661311142656
GPR[EPVS]-1661311142656
========
for(int i=0;i<searchChars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}

========
GPR[SPVS]-1661311142658
GPR[SPVAP]-1661311142658
GPR[EPVAP]-1661311143286
GPR[EPVS]-1661311143286
========
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311143287
GPR[SPVAP]-1661311143287
GPR[EPVAP]-1661311143907
GPR[EPVS]-1661311143907
========
for(int i=0;i<searchChars.length;i++,pos++){
if(buffer[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311143908
GPR[SPVAP]-1661311143908
GPR[EPVAP]-1661311144535
GPR[EPVS]-1661311144535
========
for(int i=0;i<length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311144536
GPR[SPVAP]-1661311144536
GPR[EPVAP]-1661311145160
GPR[EPVS]-1661311145160
========
for(int i=0;i<len;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311145161
GPR[SPVAP]-1661311145161
GPR[EPVAP]-1661311146228
GPR[SPVATF]-1661311146228
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311187144
GPR[EPVS]-1661311187144
========
for(int i=0;i<delimiters.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311187146
GPR[SPVAP]-1661311187146
GPR[EPVAP]-1661311187785
GPR[EPVS]-1661311187785
========
for(int i=0;i<chars.length;i++,pos++){
if(length==delimiters[i]){
return 0;
}
}

========
GPR[SPVS]-1661311187786
GPR[SPVAP]-1661311187786
GPR[EPVAP]-1661311188412
GPR[EPVS]-1661311188412
========
for(int i=0;i<chars.length;i++,pos++){
if(length!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311188413
GPR[SPVAP]-1661311188413
GPR[EPVAP]-1661311189048
GPR[EPVS]-1661311189048
========
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[i]){
return 0;
}
}

========
GPR[SPVS]-1661311189049
GPR[SPVAP]-1661311189049
GPR[EPVAP]-1661311190126
GPR[SPVATF]-1661311190126
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311230978
GPR[EPVS]-1661311230978
========
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==buffer[i]){
return 0;
}
}

========
GPR[SPVS]-1661311230980
GPR[SPVAP]-1661311230980
GPR[EPVAP]-1661311232052
GPR[SPVATF]-1661311232052
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311273162
GPR[EPVS]-1661311273162
========
for(int i=0;i<classArray.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311273164
GPR[SPVAP]-1661311273164
GPR[EPVAP]-1661311273811
GPR[EPVS]-1661311273811
========
for(int i=0;i<searchStrings.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311273813
GPR[SPVAP]-1661311273813
GPR[EPVAP]-1661311274435
GPR[EPVS]-1661311274435
========
for(int i=0;i<length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311274437
GPR[SPVAP]-1661311274437
GPR[EPVAP]-1661311275070
GPR[EPVS]-1661311275070
========
for(int i=0;i<length;i++,pos++){
if(buffer[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311275071
GPR[SPVAP]-1661311275071
GPR[EPVAP]-1661311275710
GPR[EPVS]-1661311275710
========
for(int i=0;i<length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}

========
GPR[SPVS]-1661311275711
GPR[SPVAP]-1661311275711
GPR[EPVAP]-1661311276343
GPR[EPVS]-1661311276343
========
for(int i=0;i<length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311276344
GPR[SPVAP]-1661311276344
GPR[EPVAP]-1661311276973
GPR[EPVS]-1661311276973
========
for(int i=0;i<length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311276974
GPR[SPVAP]-1661311276974
GPR[EPVAP]-1661311277592
GPR[EPVS]-1661311277592
========
for(int i=0;i<length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}

========
GPR[SPVS]-1661311277593
GPR[SPVAP]-1661311277593
GPR[EPVAP]-1661311278219
GPR[EPVS]-1661311278219
========
for(int i=0;i<array.length;i++,pos++){
if(chars[i]!=buffer[i]){
return 0;
}
}

========
GPR[SPVS]-1661311278221
GPR[SPVAP]-1661311278221
GPR[EPVAP]-1661311278842
GPR[EPVS]-1661311278842
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(chars[i]!=buffer[i]){
return 0;
}
}

========
GPR[SPVS]-1661311278843
GPR[SPVAP]-1661311278843
GPR[EPVAP]-1661311279933
GPR[SPVATF]-1661311279933
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311320920
GPR[EPVS]-1661311320920
========
for(int i=bufferEnd;i<array.length;i++,pos++){
if(chars[i]!=buffer[i]){
return 0;
}
}

========
GPR[SPVS]-1661311320922
GPR[SPVAP]-1661311320922
GPR[EPVAP]-1661311321552
GPR[EPVS]-1661311321552
========
for(int i=0;i<ts.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311321554
GPR[SPVAP]-1661311321554
GPR[EPVAP]-1661311322183
GPR[EPVS]-1661311322183
========
for(int i=0;i<bufferEnd;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311322185
GPR[SPVAP]-1661311322185
GPR[EPVAP]-1661311323246
GPR[SPVATF]-1661311323246
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311364134
GPR[EPVS]-1661311364134
========
for(int i=0;i<bufferEnd;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311364136
GPR[SPVAP]-1661311364136
GPR[EPVAP]-1661311365243
GPR[SPVATF]-1661311365243
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311406195
GPR[EPVS]-1661311406195
========
for(int i=0;i<bufferEnd;i++,pos++){
if(buffer[i]==length){
return 0;
}
}

========
GPR[SPVS]-1661311406197
GPR[SPVAP]-1661311406197
GPR[EPVAP]-1661311406820
GPR[EPVS]-1661311406820
========
for(int i=0;i<bufferEnd;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311406821
GPR[SPVAP]-1661311406821
GPR[EPVAP]-1661311407880
GPR[SPVATF]-1661311407880
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311448756
GPR[EPVS]-1661311448756
========
for(int i=0;i<bufferEnd;i++,pos++){
if(chars[i]!=length){
return 0;
}
}

========
GPR[SPVS]-1661311448757
GPR[SPVAP]-1661311448757
GPR[EPVAP]-1661311449392
GPR[EPVS]-1661311449392
========
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==length){
return 0;
}
}

========
GPR[SPVS]-1661311449394
GPR[SPVAP]-1661311449394
GPR[EPVAP]-1661311450011
GPR[EPVS]-1661311450011
========
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=length){
return 0;
}
}

========
GPR[SPVS]-1661311450012
GPR[SPVAP]-1661311450012
GPR[EPVAP]-1661311450641
GPR[EPVS]-1661311450641
========
for(int i=0;i<bufferEnd;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311450642
GPR[SPVAP]-1661311450642
GPR[EPVAP]-1661311451759
GPR[SPVATF]-1661311451759
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311492822
GPR[EPVS]-1661311492822
========
for(int i=0;i<bufferEnd;i++,pos++){
if(chars[i]==length){
return 0;
}
}

========
GPR[SPVS]-1661311492823
GPR[SPVAP]-1661311492823
GPR[EPVAP]-1661311493439
GPR[EPVS]-1661311493439
========
for(int i=0;i<bufferEnd;i++,pos++){
if(buffer[i]!=length){
return 0;
}
}

========
GPR[SPVS]-1661311493440
GPR[SPVAP]-1661311493440
GPR[EPVAP]-1661311494062
GPR[EPVS]-1661311494062
========
for(int i=0;i<throwables.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311494064
GPR[SPVAP]-1661311494064
GPR[EPVAP]-1661311494690
GPR[EPVS]-1661311494690
========
for(int i=bufferEnd;i<throwables.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311494691
GPR[SPVAP]-1661311494691
GPR[EPVAP]-1661311495308
GPR[EPVS]-1661311495308
========
for(int i=0;i<this.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311495310
GPR[SPVAP]-1661311495310
GPR[EPVAP]-1661311495944
GPR[EPVS]-1661311495944
========
for(int i=0;i<chars.length;i++,pos++){
if(thisBuf[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311495945
GPR[SPVAP]-1661311495945
GPR[EPVAP]-1661311496575
GPR[EPVS]-1661311496575
========
for(int i=0;i<tokens.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311496577
GPR[SPVAP]-1661311496577
GPR[EPVAP]-1661311497202
GPR[EPVS]-1661311497202
========
checkTokenized();
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311497203
GPR[SPVAP]-1661311497203
GPR[EPVAP]-1661311497842
GPR[EPVS]-1661311497842
========
for(int i=length;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311497844
GPR[SPVAP]-1661311497845
GPR[EPVAP]-1661311498480
GPR[EPVS]-1661311498480
========
for(int i=0;i<chars.length;i++,pos++){
if(thisBuf[i]!=otherBuf[i]){
return 0;
}
}

========
GPR[SPVS]-1661311498482
GPR[SPVAP]-1661311498482
GPR[EPVAP]-1661311499110
GPR[EPVS]-1661311499110
========
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[i]){
return 0;
}
}

========
GPR[SPVS]-1661311499111
GPR[SPVAP]-1661311499111
GPR[EPVAP]-1661311500194
GPR[SPVATF]-1661311500194
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311541124
GPR[EPVS]-1661311541124
========
for(int i=0;i<CAUSE_METHOD_NAMES.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311541127
GPR[SPVAP]-1661311541127
GPR[EPVAP]-1661311541760
GPR[EPVS]-1661311541760
========
for(int i=0;i<methodNames.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311541762
GPR[SPVAP]-1661311541762
GPR[EPVAP]-1661311542414
GPR[EPVS]-1661311542414
========
for(int i=0;i<searchList.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311542416
GPR[SPVAP]-1661311542416
GPR[EPVAP]-1661311543044
GPR[EPVS]-1661311543044
========
for(int i=0;i<ORDERED_PRIMITIVE_TYPES.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311543046
GPR[SPVAP]-1661311543046
GPR[EPVAP]-1661311543668
GPR[EPVS]-1661311543668
========
for(int i=bufferEnd;i<length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311543669
GPR[SPVAP]-1661311543669
GPR[EPVAP]-1661311544297
GPR[EPVS]-1661311544297
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(thisBuf[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311544298
GPR[SPVAP]-1661311544298
GPR[EPVAP]-1661311544920
GPR[EPVS]-1661311544920
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}

========
GPR[SPVS]-1661311544921
GPR[SPVAP]-1661311544922
GPR[EPVAP]-1661311545560
GPR[EPVS]-1661311545560
========
for(int i=0;i<length;i++,pos++){
if(thisBuf[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311545561
GPR[SPVAP]-1661311545561
GPR[EPVAP]-1661311546199
GPR[EPVS]-1661311546199
========
for(int i=bufferEnd;i<length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311546200
GPR[SPVAP]-1661311546200
GPR[EPVAP]-1661311546848
GPR[EPVS]-1661311546848
========
for(int i=bufferEnd;i<length;i++,pos++){
if(thisBuf[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311546849
GPR[SPVAP]-1661311546849
GPR[EPVAP]-1661311547479
GPR[EPVS]-1661311547479
========
for(int i=bufferEnd;i<length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311547480
GPR[SPVAP]-1661311547480
GPR[EPVAP]-1661311548143
GPR[EPVS]-1661311548143
========
for(int i=bufferEnd;i<length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}

========
GPR[SPVS]-1661311548144
GPR[SPVAP]-1661311548144
GPR[EPVAP]-1661311548778
GPR[EPVS]-1661311548778
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311548780
GPR[SPVAP]-1661311548780
GPR[EPVAP]-1661311549396
GPR[EPVS]-1661311549396
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}

========
GPR[SPVS]-1661311549398
GPR[SPVAP]-1661311549398
GPR[EPVAP]-1661311550067
GPR[EPVS]-1661311550067
========
for(int i=bufferEnd;i<length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311550068
GPR[SPVAP]-1661311550068
GPR[EPVAP]-1661311550692
GPR[EPVS]-1661311550692
========
for(int i=bufferEnd;i<length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311550693
GPR[SPVAP]-1661311550693
GPR[EPVAP]-1661311551333
GPR[EPVS]-1661311551333
========
for(int i=bufferEnd;i<length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}

========
GPR[SPVS]-1661311551334
GPR[SPVAP]-1661311551334
GPR[EPVAP]-1661311551970
GPR[EPVS]-1661311551970
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(buffer[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311551971
GPR[SPVAP]-1661311551971
GPR[EPVAP]-1661311552608
GPR[EPVS]-1661311552608
========
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!='0'){
return 0;
}
}

========
GPR[SPVS]-1661311552610
GPR[SPVAP]-1661311552610
GPR[EPVAP]-1661311553684
GPR[SPVATF]-1661311553684
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311594614
GPR[EPVS]-1661311594614
========
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[i+bufferEnd]){
return 0;
}
}

========
GPR[SPVS]-1661311594615
GPR[SPVAP]-1661311594615
GPR[EPVAP]-1661311595675
GPR[SPVATF]-1661311595675
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311636765
GPR[EPVS]-1661311636765
========
for(int i=0;i<chars.length;i++,pos++){
return i;
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311636767
GPR[SPVAP]-1661311636767
GPR[EPVAP]-1661311637416
GPR[EPVS]-1661311637416
========
for(int i=length;i<chars.length;i++,pos++){
if(chars[i]!=buffer[i+bufferEnd]){
return 0;
}
}

========
GPR[SPVS]-1661311637417
GPR[SPVAP]-1661311637417
GPR[EPVAP]-1661311638043
GPR[EPVS]-1661311638043
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(chars[i]!=buffer[i+bufferEnd]){
return 0;
}
}

========
GPR[SPVS]-1661311638044
GPR[SPVAP]-1661311638044
GPR[EPVAP]-1661311639128
GPR[SPVATF]-1661311639128
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311680166
GPR[EPVS]-1661311680166
========
for(int i=bufferEnd;i<len;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311680168
GPR[SPVAP]-1661311680168
GPR[EPVAP]-1661311681237
GPR[SPVATF]-1661311681237
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311722103
GPR[EPVS]-1661311722103
========
for(int i=0;i<fields.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311722105
GPR[SPVAP]-1661311722105
GPR[EPVAP]-1661311722743
GPR[EPVS]-1661311722743
========
if(i==-1){
return StringUtils.EMPTY;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311722744
GPR[SPVAP]-1661311722744
GPR[EPVAP]-1661311723374
GPR[EPVS]-1661311723374
========
for(int i=0;i<interfaces.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311723376
GPR[SPVAP]-1661311723376
GPR[EPVAP]-1661311723996
GPR[EPVS]-1661311723996
========
for(int i=0;i<chars.length;i++,pos++){
if(invalidChars[j]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311723998
GPR[SPVAP]-1661311723998
GPR[EPVAP]-1661311724627
GPR[EPVS]-1661311724627
========
for(int i=0;i<len;i++,pos++){
if(chars[i]!=buffer[i+bufferEnd]){
return 0;
}
}

========
GPR[SPVS]-1661311724630
GPR[SPVAP]-1661311724630
GPR[EPVAP]-1661311725691
GPR[SPVATF]-1661311725691
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311766624
GPR[EPVS]-1661311766624
========
for(int i=0;i<len;i++,pos++){
return i;
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311766625
GPR[SPVAP]-1661311766625
GPR[EPVAP]-1661311767278
GPR[EPVS]-1661311767278
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
return i;
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311767279
GPR[SPVAP]-1661311767279
GPR[EPVAP]-1661311767900
GPR[EPVS]-1661311767900
========
for(int i=0;i<chars.length;i++,pos++){
return i;
if(chars[i]!=buffer[i+bufferEnd]){
return 0;
}
}

========
GPR[SPVS]-1661311767901
GPR[SPVAP]-1661311767901
GPR[EPVAP]-1661311768524
GPR[EPVS]-1661311768524
========
for(int i=bufferEnd;i<len;i++,pos++){
if(chars[i]!=buffer[i+bufferEnd]){
return 0;
}
}

========
GPR[SPVS]-1661311768525
GPR[SPVAP]-1661311768525
GPR[EPVAP]-1661311769583
GPR[SPVATF]-1661311769583
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311810533
GPR[EPVS]-1661311810533
========
for(int i=bufferEnd;i<len;i++,pos++){
return i;
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311810534
GPR[SPVAP]-1661311810534
GPR[EPVAP]-1661311811172
GPR[EPVS]-1661311811172
========
for(int i=0;i<len;i++,pos++){
return i;
if(chars[i]!=buffer[i+bufferEnd]){
return 0;
}
}

========
GPR[SPVS]-1661311811173
GPR[SPVAP]-1661311811173
GPR[EPVAP]-1661311811794
GPR[EPVS]-1661311811794
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
return i;
if(chars[i]!=buffer[i+bufferEnd]){
return 0;
}
}

========
GPR[SPVS]-1661311811795
GPR[SPVAP]-1661311811795
GPR[EPVAP]-1661311812421
GPR[EPVS]-1661311812421
========
for(int i=bufferEnd;i<len;i++,pos++){
return i;
if(chars[i]!=buffer[i+bufferEnd]){
return 0;
}
}

========
GPR[SPVS]-1661311812422
GPR[SPVAP]-1661311812422
GPR[EPVAP]-1661311813054
GPR[EPVS]-1661311813054
========
i=bufferEnd;
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311813055
GPR[SPVAP]-1661311813055
GPR[EPVAP]-1661311813691
GPR[EPVS]-1661311813691
========
for(int i=0;i<ctors.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311813692
GPR[SPVAP]-1661311813692
GPR[EPVAP]-1661311814323
GPR[EPVS]-1661311814323
========
for(int i=0;i<parsePatterns.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311814325
GPR[SPVAP]-1661311814325
GPR[EPVAP]-1661311814954
GPR[EPVS]-1661311814954
========
for(int i=0;i<chars.length;i++,pos++){
pos.setIndex(0);
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311814955
GPR[SPVAP]-1661311814955
GPR[EPVAP]-1661311815592
GPR[EPVS]-1661311815592
========
for(int i=0;i<bufferEnd;i++,pos++){
if(buffer[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311815593
GPR[SPVAP]-1661311815593
GPR[EPVAP]-1661311816228
GPR[EPVS]-1661311816228
========
for(int i=0;i<bufferEnd;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}

========
GPR[SPVS]-1661311816229
GPR[SPVAP]-1661311816229
GPR[EPVAP]-1661311816856
GPR[EPVS]-1661311816856
========
for(int i=0;i<bufferEnd;i++,pos++){
if(chars[i]==ch){
return 0;
}
}

========
GPR[SPVS]-1661311816857
GPR[SPVAP]-1661311816857
GPR[EPVAP]-1661311817476
GPR[EPVS]-1661311817476
========
for(int i=0;i<bufferEnd;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}

========
GPR[SPVS]-1661311817477
GPR[SPVAP]-1661311817477
GPR[EPVAP]-1661311818121
GPR[EPVS]-1661311818121
========
for(int i=0;i<bufferEnd-bufferEnd;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311818123
GPR[SPVAP]-1661311818123
GPR[EPVAP]-1661311819202
GPR[SPVATF]-1661311819202
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311860295
GPR[EPVS]-1661311860295
========
for(int i=0;i<chars.length;i++,pos++){
ch=chrs[i];
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311860297
GPR[SPVAP]-1661311860297
GPR[EPVAP]-1661311860919
GPR[EPVS]-1661311860919
========
for(int i=0;i<chars.length;i++,pos++){
buffer.append(ch);
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311860920
GPR[SPVAP]-1661311860920
GPR[EPVAP]-1661311861557
GPR[EPVS]-1661311861557
========
for(int i=0;i<chars.length;i++,pos++){
lastChar=ch;
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311861558
GPR[SPVAP]-1661311861558
GPR[EPVAP]-1661311862187
GPR[EPVS]-1661311862187
========
for(int i=0;i<chars.length;i++,pos++){
ch=chrs[i];
buffer.append(ch);
lastChar=ch;

if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311862188
GPR[SPVAP]-1661311862188
GPR[EPVAP]-1661311862811
GPR[EPVS]-1661311862811
========
for(int i=0;i<methods.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311862813
GPR[SPVAP]-1661311862813
GPR[EPVAP]-1661311863450
GPR[EPVS]-1661311863450
========
for(int i=0;i<length;i++,pos++){
if(chars[i]!=null){
return 0;
}
}

========
GPR[SPVS]-1661311863451
GPR[SPVAP]-1661311863451
GPR[EPVAP]-1661311864094
GPR[EPVS]-1661311864094
========
for(int i=0;i<length;i++,pos++){
if(chars[i]==null){
return 0;
}
}

========
GPR[SPVS]-1661311864095
GPR[SPVAP]-1661311864095
GPR[EPVAP]-1661311864713
GPR[EPVS]-1661311864713
========
bufferEnd=++bufferEnd;
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311864715
GPR[SPVAP]-1661311864715
GPR[EPVAP]-1661311865779
GPR[SPVATF]-1661311865779
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311906595
GPR[EPVS]-1661311906595
========
for(int i=0;i<=chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311906597
GPR[SPVAP]-1661311906597
GPR[EPVAP]-1661311907683
GPR[SPVATF]-1661311907683
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311948804
GPR[EPVS]-1661311948804
========
for(int i=0;i<=length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311948806
GPR[SPVAP]-1661311948806
GPR[EPVAP]-1661311949443
GPR[EPVS]-1661311949443
========
if(i==-1){
return EMPTY;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311949445
GPR[SPVAP]-1661311949445
GPR[EPVAP]-1661311950074
GPR[EPVS]-1661311950074
========
if(chars.length>0){
int i=length();
ensureCapacity(len+strLen);
System.arraycopy(chars,0,buffer,len,strLen);
bufferEnd+=strLen;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311950075
GPR[SPVAP]-1661311950075
GPR[EPVAP]-1661311950708
GPR[EPVS]-1661311950708
========
i+=bufferEnd;
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311950710
GPR[SPVAP]-1661311950710
GPR[EPVAP]-1661311951344
GPR[EPVS]-1661311951344
========
for(int i=0;i<chars.length;i++,pos++){
if(bufferEnd==-1){
noMoreMatchesForReplIndex[i]=true;
}else {
if(bufferEnd==-1){
textIndex=bufferEnd;
replaceIndex=i;
}
}
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311951346
GPR[SPVAP]-1661311951346
GPR[EPVAP]-1661311952006
GPR[EPVS]-1661311952006
========
for(int i=0;i<length;i++,pos++){
if(bufferEnd==-1){
noMoreMatchesForReplIndex[i]=true;
}else {
if(bufferEnd==-1){
textIndex=bufferEnd;
replaceIndex=i;
}
}
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311952007
GPR[SPVAP]-1661311952007
GPR[EPVAP]-1661311952648
GPR[EPVS]-1661311952648
========
if(chars.length==1){
return new CharMatcher(chars[0]);
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311952649
GPR[SPVAP]-1661311952649
GPR[EPVAP]-1661311953299
GPR[EPVS]-1661311953299
========
pos=bufferEnd+length;
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311953301
GPR[SPVAP]-1661311953301
GPR[EPVAP]-1661311953927
GPR[EPVS]-1661311953927
========
System.arraycopy(buffer,0,chars,0,bufferEnd);
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311953928
GPR[SPVAP]-1661311953928
GPR[EPVAP]-1661311955003
GPR[SPVATF]-1661311955003
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661311995809
GPR[EPVS]-1661311995809
========
pos+=bufferEnd;
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661311995811
GPR[SPVAP]-1661311995811
GPR[EPVAP]-1661311996892
GPR[SPVATF]-1661311996892
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312037793
GPR[EPVS]-1661312037793
========
System.arraycopy(buffer,0,buffer,0,i);
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312037794
GPR[SPVAP]-1661312037794
GPR[EPVAP]-1661312038423
GPR[EPVS]-1661312038423
========
if(len>0){
ensureCapacity(bufferEnd+len);
System.arraycopy(buffer,bufferEnd,buffer,index+len,size-index);
System.arraycopy(chars,0,buffer,index,len);
size+=len;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312038424
GPR[SPVAP]-1661312038424
GPR[EPVAP]-1661312039044
GPR[EPVS]-1661312039044
========
for(int i=0;i<searchChars.length;i++,pos++){
if(searchChars[j]==ch){
return 0;
}
}

========
GPR[SPVS]-1661312039046
GPR[SPVAP]-1661312039046
GPR[EPVAP]-1661312039689
GPR[EPVS]-1661312039689
========
i=validateRange(bufferEnd,endIndex);
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312039691
GPR[SPVAP]-1661312039691
GPR[EPVAP]-1661312040324
GPR[EPVS]-1661312040324
========
System.arraycopy(buffer,bufferEnd,chars,0,len);
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312040325
GPR[SPVAP]-1661312040325
GPR[EPVAP]-1661312041391
GPR[SPVATF]-1661312041391
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312082305
GPR[EPVS]-1661312082305
========
for(int i=0;i<chars.length;i++,pos++){
swtich (c[pos.getIndex()]){
case QUOTE :
next(pos);

default :
next(pos);

}
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312082307
GPR[SPVAP]-1661312082307
GPR[EPVAP]-1661312082848
GPR[EPVS]-1661312082848
========
this.getChars(pos,pos+i,buffer,bufferEnd);
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312082850
GPR[SPVAP]-1661312082850
GPR[EPVAP]-1661312083482
GPR[EPVS]-1661312083482
========
pos+=i;
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312083483
GPR[SPVAP]-1661312083483
GPR[EPVAP]-1661312084116
GPR[EPVS]-1661312084116
========
buffer[i]=ch;
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312084118
GPR[SPVAP]-1661312084118
GPR[EPVAP]-1661312084728
GPR[EPVS]-1661312084728
========
System.arraycopy(buffer,0,new char[array1.length+array2.length],0,array1.length);
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312084730
GPR[SPVAP]-1661312084730
GPR[EPVAP]-1661312085356
GPR[EPVS]-1661312085356
========
System.arraycopy(buffer,0,new char[array1.length+array2.length],array1.length,array2.length);
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312085357
GPR[SPVAP]-1661312085357
GPR[EPVAP]-1661312085984
GPR[EPVS]-1661312085984
========
substitute(new StrBuilder(source.length).append(buffer),0,source.length);
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312085986
GPR[SPVAP]-1661312085986
GPR[EPVAP]-1661312086616
GPR[EPVS]-1661312086616
========
super();
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312086617
GPR[SPVAP]-1661312086617
GPR[EPVAP]-1661312087248
GPR[EPVS]-1661312087248
========
buffer=new char[bufferEnd];
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312087250
GPR[SPVAP]-1661312087250
GPR[EPVAP]-1661312088770
GPR[SPVATF]-1661312088770
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312129800
GPR[EPVS]-1661312129800
========
for(int i=0;i<chars.length;i++,pos++){
if(length==array[i]){
return 0;
}
}

========
GPR[SPVS]-1661312129802
GPR[SPVAP]-1661312129802
GPR[EPVAP]-1661312130427
GPR[EPVS]-1661312130427
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(length!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312130428
GPR[SPVAP]-1661312130428
GPR[EPVAP]-1661312131061
GPR[EPVS]-1661312131061
========
for(int i=0;i<chars.length;i++,pos++){
if(length==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312131062
GPR[SPVAP]-1661312131062
GPR[EPVAP]-1661312131693
GPR[EPVS]-1661312131693
========
for(int i=0;i<chars.length;i++,pos++){
if(length!=buffer[i]){
return 0;
}
}

========
GPR[SPVS]-1661312131694
GPR[SPVAP]-1661312131694
GPR[EPVAP]-1661312132328
GPR[EPVS]-1661312132328
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(length==buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312132329
GPR[SPVAP]-1661312132329
GPR[EPVAP]-1661312132965
GPR[EPVS]-1661312132966
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(chars[i]==buffer[i]){
return 0;
}
}

========
GPR[SPVS]-1661312132967
GPR[SPVAP]-1661312132967
GPR[EPVAP]-1661312134020
GPR[SPVATF]-1661312134020
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312175020
GPR[EPVS]-1661312175020
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(length!=buffer[i]){
return 0;
}
}

========
GPR[SPVS]-1661312175021
GPR[SPVAP]-1661312175021
GPR[EPVAP]-1661312175669
GPR[EPVS]-1661312175669
========
for(int i=0;i<chars.length;i++,pos++){
if(length==buffer[i]){
return 0;
}
}

========
GPR[SPVS]-1661312175670
GPR[SPVAP]-1661312175670
GPR[EPVAP]-1661312176301
GPR[EPVS]-1661312176301
========
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(length==buffer[i]){
return 0;
}
}

========
GPR[SPVS]-1661312176302
GPR[SPVAP]-1661312176302
GPR[EPVAP]-1661312176932
GPR[EPVS]-1661312176932
========
if(bufferEnd<0||endIndex>length()){
throw new StringIndexOutOfBoundsException(endIndex);
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312176934
GPR[SPVAP]-1661312176934
GPR[EPVAP]-1661312177556
GPR[EPVS]-1661312177556
========
if(bufferEnd>bufferEnd){
throw new StringIndexOutOfBoundsException("end < start");
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312177557
GPR[SPVAP]-1661312177557
GPR[EPVAP]-1661312178634
GPR[SPVATF]-1661312178634
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312219565
GPR[EPVS]-1661312219565
========
System.arraycopy(buffer,bufferEnd,buffer,bufferEnd,bufferEnd-startIndex);
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312219566
GPR[SPVAP]-1661312219566
GPR[EPVAP]-1661312220196
GPR[EPVS]-1661312220196
========
for(int i=0;i<chars.length;i++,pos++){
if(ch==array[i]){
return 0;
}
}

========
GPR[SPVS]-1661312220200
GPR[SPVAP]-1661312220200
GPR[EPVAP]-1661312220813
GPR[EPVS]-1661312220813
========
for(int i=0;i<chars.length;i++,pos++){
if(ch!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312220814
GPR[SPVAP]-1661312220814
GPR[EPVAP]-1661312221449
GPR[EPVS]-1661312221449
========
for(int i=0;i<array.length;i++,pos++){
if(chars[i]==buffer[i]){
return 0;
}
}

========
GPR[SPVS]-1661312221458
GPR[SPVAP]-1661312221458
GPR[EPVAP]-1661312222093
GPR[EPVS]-1661312222093
========
for(int i=bufferEnd;i<array.length;i++,pos++){
if(chars[i]==buffer[i]){
return 0;
}
}

========
GPR[SPVS]-1661312222094
GPR[SPVAP]-1661312222094
GPR[EPVAP]-1661312222730
GPR[EPVS]-1661312222730
========
i*=(bufferEnd<0?16:(max>64?64:max));
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312222737
GPR[SPVAP]-1661312222737
GPR[EPVAP]-1661312223360
GPR[EPVS]-1661312223360
========
i=(startIndex>=bufferEnd?size-1:startIndex);
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312223362
GPR[SPVAP]-1661312223362
GPR[EPVAP]-1661312223983
GPR[EPVS]-1661312223983
========
if(bufferEnd<0){
start=0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312223985
GPR[SPVAP]-1661312223985
GPR[EPVAP]-1661312224596
GPR[EPVS]-1661312224596
========
validateIndex(bufferEnd);
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312224597
GPR[SPVAP]-1661312224597
GPR[EPVAP]-1661312225224
GPR[EPVS]-1661312225224
========
if(i<2){
return EMPTY;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312225226
GPR[SPVAP]-1661312225226
GPR[EPVAP]-1661312225844
GPR[EPVS]-1661312225844
========
if(i==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312225846
GPR[SPVAP]-1661312225846
GPR[EPVAP]-1661312226466
GPR[EPVS]-1661312226466
========
if(i==0){
return true;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}

========
GPR[SPVS]-1661312226467
GPR[SPVAP]-1661312226467
GPR[EPVAP]-1661312227099
GPR[EPVS]-1661312227099
========
int len=chars.length;
if(i+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312228258
GPR[SPVAP]-1661312228258
GPR[EPVAP]-1661312228882
GPR[EPVS]-1661312228882
========
int len=chars.length;
if(pos+len>max){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312228883
GPR[SPVAP]-1661312228883
GPR[EPVAP]-1661312229508
GPR[EPVS]-1661312229508
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<bufferEnd;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312229509
GPR[SPVAP]-1661312229509
GPR[EPVAP]-1661312230584
GPR[SPVATF]-1661312230584
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312271450
GPR[EPVS]-1661312271450
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<len;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312271452
GPR[SPVAP]-1661312271452
GPR[EPVAP]-1661312272536
GPR[SPVATF]-1661312272536
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312313306
GPR[EPVS]-1661312313306
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312313307
GPR[SPVAP]-1661312313307
GPR[EPVAP]-1661312314349
GPR[SPVATF]-1661312314350
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312355316
GPR[EPVS]-1661312355316
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<bufferEnd;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312355317
GPR[SPVAP]-1661312355317
GPR[EPVAP]-1661312356416
GPR[SPVATF]-1661312356416
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312397409
GPR[EPVS]-1661312397409
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<len;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312397410
GPR[SPVAP]-1661312397410
GPR[EPVAP]-1661312398496
GPR[SPVATF]-1661312398496
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312439364
GPR[EPVS]-1661312439364
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312439366
GPR[SPVAP]-1661312439366
GPR[EPVAP]-1661312440018
GPR[EPVS]-1661312440018
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<array.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312440020
GPR[SPVAP]-1661312440020
GPR[EPVAP]-1661312440659
GPR[EPVS]-1661312440659
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312440660
GPR[SPVAP]-1661312440660
GPR[EPVAP]-1661312441731
GPR[SPVATF]-1661312441731
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312482488
GPR[EPVS]-1661312482488
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=null){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312482489
GPR[SPVAP]-1661312482489
GPR[EPVAP]-1661312483118
GPR[EPVS]-1661312483118
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<array.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312483120
GPR[SPVAP]-1661312483120
GPR[EPVAP]-1661312483754
GPR[EPVS]-1661312483754
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<array.length;i++,pos++){
if(chars[i]!=null){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312483755
GPR[SPVAP]-1661312483755
GPR[EPVAP]-1661312484398
GPR[EPVS]-1661312484398
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==null){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312484399
GPR[SPVAP]-1661312484399
GPR[EPVAP]-1661312485036
GPR[EPVS]-1661312485036
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<array.length;i++,pos++){
if(chars[i]==null){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312485037
GPR[SPVAP]-1661312485037
GPR[EPVAP]-1661312485680
GPR[EPVS]-1661312485680
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312485681
GPR[SPVAP]-1661312485681
GPR[EPVAP]-1661312486766
GPR[SPVATF]-1661312486766
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312527705
GPR[EPVS]-1661312527705
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=bufferEnd;i<array.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312527707
GPR[SPVAP]-1661312527707
GPR[EPVAP]-1661312528346
GPR[EPVS]-1661312528346
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312528347
GPR[SPVAP]-1661312528347
GPR[EPVAP]-1661312529429
GPR[SPVATF]-1661312529429
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312570284
GPR[EPVS]-1661312570284
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(chars[i]!=null){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312570285
GPR[SPVAP]-1661312570285
GPR[EPVAP]-1661312570916
GPR[EPVS]-1661312570916
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=bufferEnd;i<array.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312570917
GPR[SPVAP]-1661312570917
GPR[EPVAP]-1661312571534
GPR[EPVS]-1661312571534
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=bufferEnd;i<array.length;i++,pos++){
if(chars[i]!=null){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312571535
GPR[SPVAP]-1661312571535
GPR[EPVAP]-1661312572152
GPR[EPVS]-1661312572152
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(chars[i]==null){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312572153
GPR[SPVAP]-1661312572153
GPR[EPVAP]-1661312572779
GPR[EPVS]-1661312572779
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=bufferEnd;i<array.length;i++,pos++){
if(chars[i]==null){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312572780
GPR[SPVAP]-1661312572780
GPR[EPVAP]-1661312573398
GPR[EPVS]-1661312573398
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<searchStrings.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312573400
GPR[SPVAP]-1661312573400
GPR[EPVAP]-1661312574043
GPR[EPVS]-1661312574043
========
int len=tokens.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312574044
GPR[SPVAP]-1661312574044
GPR[EPVAP]-1661312574663
GPR[EPVS]-1661312574663
========
int len=chars.length;
if(pos+len>length){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312574664
GPR[SPVAP]-1661312574664
GPR[EPVAP]-1661312575298
GPR[EPVS]-1661312575298
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<classArray.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312575299
GPR[SPVAP]-1661312575299
GPR[EPVAP]-1661312575925
GPR[EPVS]-1661312575925
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<ts.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312575927
GPR[SPVAP]-1661312575927
GPR[EPVAP]-1661312576556
GPR[EPVS]-1661312576556
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<throwables.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312576557
GPR[SPVAP]-1661312576557
GPR[EPVAP]-1661312577188
GPR[EPVS]-1661312577188
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=bufferEnd;i<throwables.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312577189
GPR[SPVAP]-1661312577189
GPR[EPVAP]-1661312577815
GPR[EPVS]-1661312577815
========
if(i>0){
int len=length();
ensureCapacity(len+strLen);
System.arraycopy(chars,0,buffer,len,strLen);
bufferEnd+=strLen;
}
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312577817
GPR[SPVAP]-1661312577817
GPR[EPVAP]-1661312578452
GPR[EPVS]-1661312578452
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<tokens.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312578455
GPR[SPVAP]-1661312578455
GPR[EPVAP]-1661312579084
GPR[EPVS]-1661312579084
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
checkTokenized();
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312579085
GPR[SPVAP]-1661312579085
GPR[EPVAP]-1661312579705
GPR[EPVS]-1661312579705
========
int len=chars.length;
if(pos+len>startIndex){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312579706
GPR[SPVAP]-1661312579706
GPR[EPVAP]-1661312580343
GPR[EPVS]-1661312580343
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312580344
GPR[SPVAP]-1661312580344
GPR[EPVAP]-1661312580960
GPR[EPVS]-1661312580960
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=pos;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312580961
GPR[SPVAP]-1661312580961
GPR[EPVAP]-1661312582035
GPR[SPVATF]-1661312582035
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312622724
GPR[EPVS]-1661312622724
========
int len=chars.length;
pos=(startIndex<0?0:startIndex);
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312622725
GPR[SPVAP]-1661312622725
GPR[EPVAP]-1661312623372
GPR[EPVS]-1661312623372
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=pos;i<len;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312623373
GPR[SPVAP]-1661312623373
GPR[EPVAP]-1661312624455
GPR[SPVATF]-1661312624455
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312665235
GPR[EPVS]-1661312665235
========
int len=chars.length;
if(pos+len>len){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312665236
GPR[SPVAP]-1661312665236
GPR[EPVAP]-1661312666314
GPR[SPVATF]-1661312666314
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312707372
GPR[EPVS]-1661312707372
========
System.arraycopy(buffer,0,buffer,0,len);
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312707374
GPR[SPVAP]-1661312707374
GPR[EPVAP]-1661312708012
GPR[EPVS]-1661312708012
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312708018
GPR[SPVAP]-1661312708018
GPR[EPVAP]-1661312708644
GPR[EPVS]-1661312708644
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<ORDERED_PRIMITIVE_TYPES.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312708645
GPR[SPVAP]-1661312708645
GPR[EPVAP]-1661312709280
GPR[EPVS]-1661312709280
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[i]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312709282
GPR[SPVAP]-1661312709282
GPR[EPVAP]-1661312710343
GPR[SPVATF]-1661312710343
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312751135
GPR[EPVS]-1661312751135
========
int len=chars.length;
if(off+off>off){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312751143
GPR[SPVAP]-1661312751143
GPR[EPVAP]-1661312751796
GPR[EPVS]-1661312751796
========
int len=chars.length;
if(length+length>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312751797
GPR[SPVAP]-1661312751797
GPR[EPVAP]-1661312752438
GPR[EPVS]-1661312752438
========
int len=chars.length;
if(pos+off>off){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312752439
GPR[SPVAP]-1661312752439
GPR[EPVAP]-1661312753066
GPR[EPVS]-1661312753066
========
int len=chars.length;
if(off+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312753067
GPR[SPVAP]-1661312753067
GPR[EPVAP]-1661312753683
GPR[EPVS]-1661312753683
========
int len=chars.length;
if(length+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312753684
GPR[SPVAP]-1661312753684
GPR[EPVAP]-1661312754318
GPR[EPVS]-1661312754318
========
int len=chars.length;
if(pos+off>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312754319
GPR[SPVAP]-1661312754319
GPR[EPVAP]-1661312754950
GPR[EPVS]-1661312754950
========
int len=chars.length;
if(pos+length>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312754951
GPR[SPVAP]-1661312754951
GPR[EPVAP]-1661312755577
GPR[EPVS]-1661312755577
========
int len=chars.length;
if(pos+len>off){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312755577
GPR[SPVAP]-1661312755577
GPR[EPVAP]-1661312756203
GPR[EPVS]-1661312756203
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
if(pos>=this.size()){
return -1;
}
return len;

========
GPR[SPVS]-1661312756204
GPR[SPVAP]-1661312756204
GPR[EPVAP]-1661312756829
GPR[EPVS]-1661312756829
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
if(pos+len>size()){
len=this.size()-pos;
}
return len;

========
GPR[SPVS]-1661312756830
GPR[SPVAP]-1661312756830
GPR[EPVAP]-1661312757462
GPR[EPVS]-1661312757462
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
this.getChars(pos,pos+len,buffer,bufferEnd);
return len;

========
GPR[SPVS]-1661312757463
GPR[SPVAP]-1661312757463
GPR[EPVAP]-1661312758091
GPR[EPVS]-1661312758091
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
pos+=len;
return len;

========
GPR[SPVS]-1661312758092
GPR[SPVAP]-1661312758092
GPR[EPVAP]-1661312759153
GPR[SPVATF]-1661312759153
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312799929
GPR[EPVS]-1661312799929
========
int len=chars.length;
if(off+off>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312799930
GPR[SPVAP]-1661312799930
GPR[EPVAP]-1661312800588
GPR[EPVS]-1661312800588
========
int len=chars.length;
if(off+len>off){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312800589
GPR[SPVAP]-1661312800589
GPR[EPVAP]-1661312801211
GPR[EPVS]-1661312801211
========
int len=chars.length;
if(off+len>len){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312801212
GPR[SPVAP]-1661312801212
GPR[EPVAP]-1661312801836
GPR[EPVS]-1661312801836
========
int len=chars.length;
if(off+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
pos+=len;
return len;

========
GPR[SPVS]-1661312801837
GPR[SPVAP]-1661312801837
GPR[EPVAP]-1661312802462
GPR[EPVS]-1661312802462
========
int len=chars.length;
if(pos+off>len){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312802463
GPR[SPVAP]-1661312802463
GPR[EPVAP]-1661312803083
GPR[EPVS]-1661312803083
========
int len=chars.length;
if(pos+off>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
pos+=len;
return len;

========
GPR[SPVS]-1661312803084
GPR[SPVAP]-1661312803084
GPR[EPVAP]-1661312803704
GPR[EPVS]-1661312803704
========
int len=chars.length;
if(pos+len>off){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
pos+=len;
return len;

========
GPR[SPVS]-1661312803705
GPR[SPVAP]-1661312803705
GPR[EPVAP]-1661312804338
GPR[EPVS]-1661312804338
========
int len=chars.length;
if(pos+len>len){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
pos+=len;
return len;

========
GPR[SPVS]-1661312804339
GPR[SPVAP]-1661312804339
GPR[EPVAP]-1661312805414
GPR[SPVATF]-1661312805414
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312846318
GPR[EPVS]-1661312846318
========
int len=chars.length;
if(off+off>len){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312846319
GPR[SPVAP]-1661312846319
GPR[EPVAP]-1661312846961
GPR[EPVS]-1661312846961
========
int len=chars.length;
if(off+off>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
pos+=len;
return len;

========
GPR[SPVS]-1661312846962
GPR[SPVAP]-1661312846962
GPR[EPVAP]-1661312847612
GPR[EPVS]-1661312847612
========
int len=chars.length;
if(off+len>off){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
pos+=len;
return len;

========
GPR[SPVS]-1661312847613
GPR[SPVAP]-1661312847613
GPR[EPVAP]-1661312848232
GPR[EPVS]-1661312848232
========
int len=chars.length;
if(off+len>len){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
pos+=len;
return len;

========
GPR[SPVS]-1661312848233
GPR[SPVAP]-1661312848233
GPR[EPVAP]-1661312848862
GPR[EPVS]-1661312848862
========
int len=chars.length;
if(pos+off>off){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
pos+=len;
return len;

========
GPR[SPVS]-1661312848863
GPR[SPVAP]-1661312848863
GPR[EPVAP]-1661312849490
GPR[EPVS]-1661312849490
========
int len=chars.length;
if(pos+off>len){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
pos+=len;
return len;

========
GPR[SPVS]-1661312849491
GPR[SPVAP]-1661312849491
GPR[EPVAP]-1661312850112
GPR[EPVS]-1661312850112
========
int len=chars.length;
if(off+off>off){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
pos+=len;
return len;

========
GPR[SPVS]-1661312850113
GPR[SPVAP]-1661312850113
GPR[EPVAP]-1661312850753
GPR[EPVS]-1661312850753
========
int len=chars.length;
if(off+off>len){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
pos+=len;
return len;

========
GPR[SPVS]-1661312850754
GPR[SPVAP]-1661312850754
GPR[EPVAP]-1661312851401
GPR[EPVS]-1661312851401
========
int len=args.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312851403
GPR[SPVAP]-1661312851403
GPR[EPVAP]-1661312852031
GPR[EPVS]-1661312852031
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312852033
GPR[SPVAP]-1661312852033
GPR[EPVAP]-1661312853104
GPR[SPVATF]-1661312853104
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312894073
GPR[EPVS]-1661312894073
========
if(pos<0){
pos=0;
}
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312894074
GPR[SPVAP]-1661312894074
GPR[EPVAP]-1661312895162
GPR[SPVATF]-1661312895162
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312936045
GPR[EPVS]-1661312936045
========
if(pos<0){
pos=0;
}
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312936047
GPR[SPVAP]-1661312936047
GPR[EPVAP]-1661312937130
GPR[SPVATF]-1661312937130
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661312977908
GPR[EPVS]-1661312977908
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<interfaces.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312977910
GPR[SPVAP]-1661312977910
GPR[EPVAP]-1661312978558
GPR[EPVS]-1661312978558
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
validateIndex(pos);
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312978559
GPR[SPVAP]-1661312978559
GPR[EPVAP]-1661312979185
GPR[EPVS]-1661312979185
========
char len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312979187
GPR[SPVAP]-1661312979187
GPR[EPVAP]-1661312979798
GPR[EPVS]-1661312979798
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return hash;

========
GPR[SPVS]-1661312979799
GPR[SPVAP]-1661312979799
GPR[EPVAP]-1661312980448
GPR[EPVS]-1661312980448
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=bufferEnd;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312980449
GPR[SPVAP]-1661312980449
GPR[EPVAP]-1661312981085
GPR[EPVS]-1661312981085
========
int len=chars.length;
if(pos+sepLen>sepLen){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312981087
GPR[SPVAP]-1661312981087
GPR[EPVAP]-1661312981716
GPR[EPVS]-1661312981716
========
int len=chars.length;
if(pos+sepLen>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312981717
GPR[SPVAP]-1661312981717
GPR[EPVAP]-1661312982354
GPR[EPVS]-1661312982354
========
int len=chars.length;
if(pos+len>sepLen){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312982355
GPR[SPVAP]-1661312982355
GPR[EPVAP]-1661312982984
GPR[EPVS]-1661312982984
========
int len=buffer;
if(pos+len>len){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312982985
GPR[SPVAP]-1661312982985
GPR[EPVAP]-1661312983616
GPR[EPVS]-1661312983616
========
int len=array.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312983618
GPR[SPVAP]-1661312983618
GPR[EPVAP]-1661312984249
GPR[EPVS]-1661312984249
========
int len=chars.length;
if(pos+len>value){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312984251
GPR[SPVAP]-1661312984251
GPR[EPVAP]-1661312984872
GPR[EPVS]-1661312984872
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661312984875
GPR[SPVAP]-1661312984875
GPR[EPVAP]-1661312985949
GPR[SPVATF]-1661312985949
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313026836
GPR[EPVS]-1661313026836
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313026837
GPR[SPVAP]-1661313026837
GPR[EPVAP]-1661313027910
GPR[SPVATF]-1661313027910
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313068975
GPR[EPVS]-1661313068975
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313068977
GPR[SPVAP]-1661313068977
GPR[EPVAP]-1661313070094
GPR[SPVATF]-1661313070094
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313111067
GPR[EPVS]-1661313111067
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313111068
GPR[SPVAP]-1661313111068
GPR[EPVAP]-1661313112133
GPR[SPVATF]-1661313112133
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313153066
GPR[EPVS]-1661313153066
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(thisBuf[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313153067
GPR[SPVAP]-1661313153067
GPR[EPVAP]-1661313153701
GPR[EPVS]-1661313153701
========
int len=chars.length;
len=(startIndex<0?0:startIndex);
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313153702
GPR[SPVAP]-1661313153702
GPR[EPVAP]-1661313154329
GPR[EPVS]-1661313154329
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313154331
GPR[SPVAP]-1661313154331
GPR[EPVAP]-1661313154956
GPR[EPVS]-1661313154956
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313154957
GPR[SPVAP]-1661313154957
GPR[EPVAP]-1661313156034
GPR[SPVATF]-1661313156034
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313196855
GPR[EPVS]-1661313196855
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313196857
GPR[SPVAP]-1661313196857
GPR[EPVAP]-1661313197914
GPR[SPVATF]-1661313197914
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313238890
GPR[EPVS]-1661313238890
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313238891
GPR[SPVAP]-1661313238891
GPR[EPVAP]-1661313239977
GPR[SPVATF]-1661313239977
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313280838
GPR[EPVS]-1661313280838
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313280839
GPR[SPVAP]-1661313280840
GPR[EPVAP]-1661313281915
GPR[SPVATF]-1661313281915
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313322777
GPR[EPVS]-1661313322777
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313322778
GPR[SPVAP]-1661313322778
GPR[EPVAP]-1661313323412
GPR[EPVS]-1661313323412
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313323414
GPR[SPVAP]-1661313323414
GPR[EPVAP]-1661313324047
GPR[EPVS]-1661313324047
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313324048
GPR[SPVAP]-1661313324048
GPR[EPVAP]-1661313325122
GPR[SPVATF]-1661313325122
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313365989
GPR[EPVS]-1661313365989
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313365990
GPR[SPVAP]-1661313365990
GPR[EPVAP]-1661313366616
GPR[EPVS]-1661313366616
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313366617
GPR[SPVAP]-1661313366617
GPR[EPVAP]-1661313367681
GPR[SPVATF]-1661313367681
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313408508
GPR[EPVS]-1661313408508
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313408509
GPR[SPVAP]-1661313408509
GPR[EPVAP]-1661313409616
GPR[SPVATF]-1661313409616
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313450491
GPR[EPVS]-1661313450491
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313450492
GPR[SPVAP]-1661313450492
GPR[EPVAP]-1661313451566
GPR[SPVATF]-1661313451566
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313492722
GPR[EPVS]-1661313492722
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313492723
GPR[SPVAP]-1661313492723
GPR[EPVAP]-1661313493373
GPR[EPVS]-1661313493373
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313493375
GPR[SPVAP]-1661313493375
GPR[EPVAP]-1661313494024
GPR[EPVS]-1661313494024
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313494025
GPR[SPVAP]-1661313494025
GPR[EPVAP]-1661313494658
GPR[EPVS]-1661313494658
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313494659
GPR[SPVAP]-1661313494659
GPR[EPVAP]-1661313495276
GPR[EPVS]-1661313495276
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313495277
GPR[SPVAP]-1661313495277
GPR[EPVAP]-1661313495912
GPR[EPVS]-1661313495912
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313495913
GPR[SPVAP]-1661313495913
GPR[EPVAP]-1661313496560
GPR[EPVS]-1661313496560
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313496561
GPR[SPVAP]-1661313496561
GPR[EPVAP]-1661313497188
GPR[EPVS]-1661313497188
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313497189
GPR[SPVAP]-1661313497189
GPR[EPVAP]-1661313497807
GPR[EPVS]-1661313497807
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313497808
GPR[SPVAP]-1661313497808
GPR[EPVAP]-1661313498889
GPR[SPVATF]-1661313498889
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313539687
GPR[EPVS]-1661313539687
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313539689
GPR[SPVAP]-1661313539689
GPR[EPVAP]-1661313540818
GPR[SPVATF]-1661313540818
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313581678
GPR[EPVS]-1661313581678
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313581679
GPR[SPVAP]-1661313581679
GPR[EPVAP]-1661313582776
GPR[SPVATF]-1661313582776
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313623624
GPR[EPVS]-1661313623624
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313623625
GPR[SPVAP]-1661313623625
GPR[EPVAP]-1661313624246
GPR[EPVS]-1661313624246
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313624247
GPR[SPVAP]-1661313624247
GPR[EPVAP]-1661313624863
GPR[EPVS]-1661313624863
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313624864
GPR[SPVAP]-1661313624864
GPR[EPVAP]-1661313625493
GPR[EPVS]-1661313625493
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313625494
GPR[SPVAP]-1661313625494
GPR[EPVAP]-1661313626111
GPR[EPVS]-1661313626111
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313626113
GPR[SPVAP]-1661313626113
GPR[EPVAP]-1661313626763
GPR[EPVS]-1661313626763
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313626764
GPR[SPVAP]-1661313626764
GPR[EPVAP]-1661313627826
GPR[SPVATF]-1661313627826
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313668837
GPR[EPVS]-1661313668837
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313668838
GPR[SPVAP]-1661313668838
GPR[EPVAP]-1661313669927
GPR[SPVATF]-1661313669927
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313710663
GPR[EPVS]-1661313710663
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313710664
GPR[SPVAP]-1661313710664
GPR[EPVAP]-1661313711294
GPR[EPVS]-1661313711294
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313711295
GPR[SPVAP]-1661313711295
GPR[EPVAP]-1661313712362
GPR[SPVATF]-1661313712362
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313753298
GPR[EPVS]-1661313753298
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313753299
GPR[SPVAP]-1661313753299
GPR[EPVAP]-1661313753942
GPR[EPVS]-1661313753942
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313753943
GPR[SPVAP]-1661313753943
GPR[EPVAP]-1661313754580
GPR[EPVS]-1661313754580
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313754582
GPR[SPVAP]-1661313754582
GPR[EPVAP]-1661313755208
GPR[EPVS]-1661313755208
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313755209
GPR[SPVAP]-1661313755209
GPR[EPVAP]-1661313756297
GPR[SPVATF]-1661313756297
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313797173
GPR[EPVS]-1661313797173
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313797175
GPR[SPVAP]-1661313797175
GPR[EPVAP]-1661313798239
GPR[SPVATF]-1661313798239
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313839094
GPR[EPVS]-1661313839094
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313839095
GPR[SPVAP]-1661313839095
GPR[EPVAP]-1661313840178
GPR[SPVATF]-1661313840179
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313881007
GPR[EPVS]-1661313881007
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313881008
GPR[SPVAP]-1661313881008
GPR[EPVAP]-1661313882080
GPR[SPVATF]-1661313882080
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313922955
GPR[EPVS]-1661313922955
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313922956
GPR[SPVAP]-1661313922956
GPR[EPVAP]-1661313923592
GPR[EPVS]-1661313923593
========
int len=buffer;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313923594
GPR[SPVAP]-1661313923594
GPR[EPVAP]-1661313924228
GPR[EPVS]-1661313924228
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313924229
GPR[SPVAP]-1661313924229
GPR[EPVAP]-1661313924862
GPR[EPVS]-1661313924862
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313924863
GPR[SPVAP]-1661313924863
GPR[EPVAP]-1661313925493
GPR[EPVS]-1661313925493
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313925494
GPR[SPVAP]-1661313925494
GPR[EPVAP]-1661313926115
GPR[EPVS]-1661313926115
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313926116
GPR[SPVAP]-1661313926116
GPR[EPVAP]-1661313926738
GPR[EPVS]-1661313926738
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313926739
GPR[SPVAP]-1661313926739
GPR[EPVAP]-1661313927853
GPR[SPVATF]-1661313927853
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661313968941
GPR[EPVS]-1661313968941
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661313968942
GPR[SPVAP]-1661313968942
GPR[EPVAP]-1661313970006
GPR[SPVATF]-1661313970006
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314010886
GPR[EPVS]-1661314010887
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314010888
GPR[SPVAP]-1661314010888
GPR[EPVAP]-1661314011987
GPR[SPVATF]-1661314011987
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314053001
GPR[EPVS]-1661314053001
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314053002
GPR[SPVAP]-1661314053002
GPR[EPVAP]-1661314053629
GPR[EPVS]-1661314053629
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314053630
GPR[SPVAP]-1661314053630
GPR[EPVAP]-1661314054703
GPR[SPVATF]-1661314054703
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314095566
GPR[EPVS]-1661314095566
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314095568
GPR[SPVAP]-1661314095568
GPR[EPVAP]-1661314096668
GPR[SPVATF]-1661314096668
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314137577
GPR[EPVS]-1661314137577
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314137578
GPR[SPVAP]-1661314137578
GPR[EPVAP]-1661314138194
GPR[EPVS]-1661314138194
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314138195
GPR[SPVAP]-1661314138195
GPR[EPVAP]-1661314139267
GPR[SPVATF]-1661314139267
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314180153
GPR[EPVS]-1661314180153
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314180155
GPR[SPVAP]-1661314180155
GPR[EPVAP]-1661314180797
GPR[EPVS]-1661314180797
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314180798
GPR[SPVAP]-1661314180798
GPR[EPVAP]-1661314181434
GPR[EPVS]-1661314181434
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314181435
GPR[SPVAP]-1661314181435
GPR[EPVAP]-1661314182072
GPR[EPVS]-1661314182072
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314182073
GPR[SPVAP]-1661314182073
GPR[EPVAP]-1661314182696
GPR[EPVS]-1661314182696
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314182697
GPR[SPVAP]-1661314182697
GPR[EPVAP]-1661314183328
GPR[EPVS]-1661314183328
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314183329
GPR[SPVAP]-1661314183329
GPR[EPVAP]-1661314183988
GPR[EPVS]-1661314183988
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314183989
GPR[SPVAP]-1661314183989
GPR[EPVAP]-1661314184610
GPR[EPVS]-1661314184610
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314184611
GPR[SPVAP]-1661314184611
GPR[EPVAP]-1661314185228
GPR[EPVS]-1661314185228
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314185229
GPR[SPVAP]-1661314185229
GPR[EPVAP]-1661314185857
GPR[EPVS]-1661314185857
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314185858
GPR[SPVAP]-1661314185858
GPR[EPVAP]-1661314186932
GPR[SPVATF]-1661314186932
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314227767
GPR[EPVS]-1661314227767
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314227768
GPR[SPVAP]-1661314227768
GPR[EPVAP]-1661314228833
GPR[SPVATF]-1661314228833
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314269800
GPR[EPVS]-1661314269800
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314269801
GPR[SPVAP]-1661314269801
GPR[EPVAP]-1661314270897
GPR[SPVATF]-1661314270897
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314311843
GPR[EPVS]-1661314311843
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314311845
GPR[SPVAP]-1661314311845
GPR[EPVAP]-1661314312467
GPR[EPVS]-1661314312467
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314312468
GPR[SPVAP]-1661314312468
GPR[EPVAP]-1661314313090
GPR[EPVS]-1661314313090
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314313091
GPR[SPVAP]-1661314313091
GPR[EPVAP]-1661314313708
GPR[EPVS]-1661314313708
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314313709
GPR[SPVAP]-1661314313709
GPR[EPVAP]-1661314314343
GPR[EPVS]-1661314314343
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314314344
GPR[SPVAP]-1661314314344
GPR[EPVAP]-1661314314969
GPR[EPVS]-1661314314969
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314314970
GPR[SPVAP]-1661314314970
GPR[EPVAP]-1661314316021
GPR[SPVATF]-1661314316021
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314356857
GPR[EPVS]-1661314356857
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314356858
GPR[SPVAP]-1661314356858
GPR[EPVAP]-1661314357967
GPR[SPVATF]-1661314357967
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314398932
GPR[EPVS]-1661314398932
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314398933
GPR[SPVAP]-1661314398933
GPR[EPVAP]-1661314399552
GPR[EPVS]-1661314399552
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314399553
GPR[SPVAP]-1661314399553
GPR[EPVAP]-1661314400628
GPR[SPVATF]-1661314400628
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314441429
GPR[EPVS]-1661314441429
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314441430
GPR[SPVAP]-1661314441430
GPR[EPVAP]-1661314442068
GPR[EPVS]-1661314442068
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314442069
GPR[SPVAP]-1661314442069
GPR[EPVAP]-1661314442700
GPR[EPVS]-1661314442700
========
int len=buffer;
if(pos+len>=size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314442702
GPR[SPVAP]-1661314442702
GPR[EPVAP]-1661314443329
GPR[EPVS]-1661314443329
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314443329
GPR[SPVAP]-1661314443329
GPR[EPVAP]-1661314443961
GPR[EPVS]-1661314443961
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314443962
GPR[SPVAP]-1661314443962
GPR[EPVAP]-1661314444577
GPR[EPVS]-1661314444577
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314444578
GPR[SPVAP]-1661314444578
GPR[EPVAP]-1661314445225
GPR[EPVS]-1661314445225
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314445226
GPR[SPVAP]-1661314445226
GPR[EPVAP]-1661314445847
GPR[EPVS]-1661314445847
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314445849
GPR[SPVAP]-1661314445849
GPR[EPVAP]-1661314446468
GPR[EPVS]-1661314446468
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314446469
GPR[SPVAP]-1661314446469
GPR[EPVAP]-1661314447110
GPR[EPVS]-1661314447110
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314447111
GPR[SPVAP]-1661314447111
GPR[EPVAP]-1661314447738
GPR[EPVS]-1661314447738
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314447739
GPR[SPVAP]-1661314447739
GPR[EPVAP]-1661314448374
GPR[EPVS]-1661314448374
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314448375
GPR[SPVAP]-1661314448375
GPR[EPVAP]-1661314448995
GPR[EPVS]-1661314448995
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314448996
GPR[SPVAP]-1661314448996
GPR[EPVAP]-1661314449619
GPR[EPVS]-1661314449619
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314449620
GPR[SPVAP]-1661314449620
GPR[EPVAP]-1661314450240
GPR[EPVS]-1661314450240
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314450242
GPR[SPVAP]-1661314450242
GPR[EPVAP]-1661314450876
GPR[EPVS]-1661314450876
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314450877
GPR[SPVAP]-1661314450877
GPR[EPVAP]-1661314451496
GPR[EPVS]-1661314451496
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314451497
GPR[SPVAP]-1661314451497
GPR[EPVAP]-1661314452116
GPR[EPVS]-1661314452116
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314452117
GPR[SPVAP]-1661314452117
GPR[EPVAP]-1661314452754
GPR[EPVS]-1661314452754
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314452755
GPR[SPVAP]-1661314452755
GPR[EPVAP]-1661314453376
GPR[EPVS]-1661314453376
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314453377
GPR[SPVAP]-1661314453377
GPR[EPVAP]-1661314454000
GPR[EPVS]-1661314454000
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314454001
GPR[SPVAP]-1661314454001
GPR[EPVAP]-1661314454628
GPR[EPVS]-1661314454628
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314454629
GPR[SPVAP]-1661314454629
GPR[EPVAP]-1661314455706
GPR[SPVATF]-1661314455706
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314496649
GPR[EPVS]-1661314496649
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314496651
GPR[SPVAP]-1661314496651
GPR[EPVAP]-1661314497736
GPR[SPVATF]-1661314497736
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314538643
GPR[EPVS]-1661314538643
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314538644
GPR[SPVAP]-1661314538644
GPR[EPVAP]-1661314539300
GPR[EPVS]-1661314539300
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314539302
GPR[SPVAP]-1661314539302
GPR[EPVAP]-1661314540395
GPR[SPVATF]-1661314540395
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314581315
GPR[EPVS]-1661314581315
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314581317
GPR[SPVAP]-1661314581317
GPR[EPVAP]-1661314581927
GPR[EPVS]-1661314581927
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314581929
GPR[SPVAP]-1661314581929
GPR[EPVAP]-1661314582546
GPR[EPVS]-1661314582546
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314582547
GPR[SPVAP]-1661314582547
GPR[EPVAP]-1661314583174
GPR[EPVS]-1661314583174
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314583176
GPR[SPVAP]-1661314583176
GPR[EPVAP]-1661314583800
GPR[EPVS]-1661314583800
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314583802
GPR[SPVAP]-1661314583802
GPR[EPVAP]-1661314584422
GPR[EPVS]-1661314584422
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314584423
GPR[SPVAP]-1661314584423
GPR[EPVAP]-1661314585059
GPR[EPVS]-1661314585059
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314585060
GPR[SPVAP]-1661314585060
GPR[EPVAP]-1661314585707
GPR[EPVS]-1661314585707
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314585708
GPR[SPVAP]-1661314585708
GPR[EPVAP]-1661314586327
GPR[EPVS]-1661314586327
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314586328
GPR[SPVAP]-1661314586328
GPR[EPVAP]-1661314587459
GPR[SPVATF]-1661314587459
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314628374
GPR[EPVS]-1661314628374
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314628376
GPR[SPVAP]-1661314628376
GPR[EPVAP]-1661314629014
GPR[EPVS]-1661314629014
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314629015
GPR[SPVAP]-1661314629015
GPR[EPVAP]-1661314629648
GPR[EPVS]-1661314629648
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314629649
GPR[SPVAP]-1661314629649
GPR[EPVAP]-1661314630268
GPR[EPVS]-1661314630268
========
int len=buffer;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314630269
GPR[SPVAP]-1661314630269
GPR[EPVAP]-1661314630895
GPR[EPVS]-1661314630895
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314630896
GPR[SPVAP]-1661314630896
GPR[EPVAP]-1661314631531
GPR[EPVS]-1661314631531
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314631532
GPR[SPVAP]-1661314631532
GPR[EPVAP]-1661314632163
GPR[EPVS]-1661314632163
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314632164
GPR[SPVAP]-1661314632164
GPR[EPVAP]-1661314632784
GPR[EPVS]-1661314632784
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314632786
GPR[SPVAP]-1661314632786
GPR[EPVAP]-1661314633418
GPR[EPVS]-1661314633418
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314633419
GPR[SPVAP]-1661314633419
GPR[EPVAP]-1661314634495
GPR[SPVATF]-1661314634495
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314675473
GPR[EPVS]-1661314675473
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314675474
GPR[SPVAP]-1661314675474
GPR[EPVAP]-1661314676540
GPR[SPVATF]-1661314676540
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314717451
GPR[EPVS]-1661314717452
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314717453
GPR[SPVAP]-1661314717453
GPR[EPVAP]-1661314718532
GPR[SPVATF]-1661314718532
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314759405
GPR[EPVS]-1661314759405
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314759406
GPR[SPVAP]-1661314759406
GPR[EPVAP]-1661314760050
GPR[EPVS]-1661314760051
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314760052
GPR[SPVAP]-1661314760052
GPR[EPVAP]-1661314761114
GPR[SPVATF]-1661314761114
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314802021
GPR[EPVS]-1661314802021
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314802023
GPR[SPVAP]-1661314802023
GPR[EPVAP]-1661314803091
GPR[SPVATF]-1661314803091
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314844098
GPR[EPVS]-1661314844098
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314844100
GPR[SPVAP]-1661314844100
GPR[EPVAP]-1661314844715
GPR[EPVS]-1661314844715
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314844716
GPR[SPVAP]-1661314844716
GPR[EPVAP]-1661314845776
GPR[SPVATF]-1661314845776
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314886614
GPR[EPVS]-1661314886614
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314886615
GPR[SPVAP]-1661314886615
GPR[EPVAP]-1661314887253
GPR[EPVS]-1661314887253
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314887254
GPR[SPVAP]-1661314887254
GPR[EPVAP]-1661314887883
GPR[EPVS]-1661314887883
========
int len=buffer;
if(pos+len>=pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314887884
GPR[SPVAP]-1661314887884
GPR[EPVAP]-1661314888509
GPR[EPVS]-1661314888509
========
int len=buffer;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314888510
GPR[SPVAP]-1661314888510
GPR[EPVAP]-1661314889140
GPR[EPVS]-1661314889140
========
int len=buffer;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314889141
GPR[SPVAP]-1661314889141
GPR[EPVAP]-1661314889773
GPR[EPVS]-1661314889773
========
int len=buffer;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314889774
GPR[SPVAP]-1661314889774
GPR[EPVAP]-1661314890403
GPR[EPVS]-1661314890403
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314890404
GPR[SPVAP]-1661314890404
GPR[EPVAP]-1661314891036
GPR[EPVS]-1661314891036
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314891037
GPR[SPVAP]-1661314891037
GPR[EPVAP]-1661314891672
GPR[EPVS]-1661314891672
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314891674
GPR[SPVAP]-1661314891674
GPR[EPVAP]-1661314892297
GPR[EPVS]-1661314892297
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314892298
GPR[SPVAP]-1661314892298
GPR[EPVAP]-1661314892936
GPR[EPVS]-1661314892936
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314892937
GPR[SPVAP]-1661314892937
GPR[EPVAP]-1661314893552
GPR[EPVS]-1661314893552
========
int len=buffer;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314893553
GPR[SPVAP]-1661314893553
GPR[EPVAP]-1661314894182
GPR[EPVS]-1661314894182
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314894183
GPR[SPVAP]-1661314894183
GPR[EPVAP]-1661314895261
GPR[SPVATF]-1661314895261
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314936153
GPR[EPVS]-1661314936153
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314936154
GPR[SPVAP]-1661314936154
GPR[EPVAP]-1661314937226
GPR[SPVATF]-1661314937226
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661314978121
GPR[EPVS]-1661314978121
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314978122
GPR[SPVAP]-1661314978122
GPR[EPVAP]-1661314978761
GPR[EPVS]-1661314978761
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661314978762
GPR[SPVAP]-1661314978762
GPR[EPVAP]-1661314979856
GPR[SPVATF]-1661314979856
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661315020777
GPR[EPVS]-1661315020777
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315020778
GPR[SPVAP]-1661315020778
GPR[EPVAP]-1661315021408
GPR[EPVS]-1661315021408
========
int len=chars.length;
if(pos+len>=pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315021416
GPR[SPVAP]-1661315021416
GPR[EPVAP]-1661315022051
GPR[EPVS]-1661315022051
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315022052
GPR[SPVAP]-1661315022052
GPR[EPVAP]-1661315023120
GPR[SPVATF]-1661315023120
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661315063943
GPR[EPVS]-1661315063943
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315063944
GPR[SPVAP]-1661315063944
GPR[EPVAP]-1661315064586
GPR[EPVS]-1661315064586
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315064587
GPR[SPVAP]-1661315064587
GPR[EPVAP]-1661315065220
GPR[EPVS]-1661315065220
========
int len=chars.length;
if(pos+len>pos){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315065221
GPR[SPVAP]-1661315065221
GPR[EPVAP]-1661315065849
GPR[EPVS]-1661315065849
========
int len=buffer;
if(pos+len>=size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315065850
GPR[SPVAP]-1661315065850
GPR[EPVAP]-1661315066472
GPR[EPVS]-1661315066472
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315066473
GPR[SPVAP]-1661315066473
GPR[EPVAP]-1661315067109
GPR[EPVS]-1661315067109
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315067110
GPR[SPVAP]-1661315067110
GPR[EPVAP]-1661315067741
GPR[EPVS]-1661315067741
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315067742
GPR[SPVAP]-1661315067742
GPR[EPVAP]-1661315068371
GPR[EPVS]-1661315068371
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315068373
GPR[SPVAP]-1661315068373
GPR[EPVAP]-1661315068998
GPR[EPVS]-1661315068998
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315068999
GPR[SPVAP]-1661315068999
GPR[EPVAP]-1661315069622
GPR[EPVS]-1661315069622
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315069623
GPR[SPVAP]-1661315069623
GPR[EPVAP]-1661315070264
GPR[EPVS]-1661315070264
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315070265
GPR[SPVAP]-1661315070265
GPR[EPVAP]-1661315070889
GPR[EPVS]-1661315070889
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315070889
GPR[SPVAP]-1661315070889
GPR[EPVAP]-1661315071527
GPR[EPVS]-1661315071527
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315071528
GPR[SPVAP]-1661315071528
GPR[EPVAP]-1661315072164
GPR[EPVS]-1661315072164
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315072165
GPR[SPVAP]-1661315072165
GPR[EPVAP]-1661315072798
GPR[EPVS]-1661315072798
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315072799
GPR[SPVAP]-1661315072799
GPR[EPVAP]-1661315073422
GPR[EPVS]-1661315073422
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315073423
GPR[SPVAP]-1661315073423
GPR[EPVAP]-1661315074047
GPR[EPVS]-1661315074047
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315074048
GPR[SPVAP]-1661315074048
GPR[EPVAP]-1661315074676
GPR[EPVS]-1661315074676
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315074677
GPR[SPVAP]-1661315074677
GPR[EPVAP]-1661315075300
GPR[EPVS]-1661315075300
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315075301
GPR[SPVAP]-1661315075301
GPR[EPVAP]-1661315075930
GPR[EPVS]-1661315075930
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315075932
GPR[SPVAP]-1661315075932
GPR[EPVAP]-1661315076565
GPR[EPVS]-1661315076565
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315076566
GPR[SPVAP]-1661315076566
GPR[EPVAP]-1661315077193
GPR[EPVS]-1661315077193
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315077195
GPR[SPVAP]-1661315077195
GPR[EPVAP]-1661315077826
GPR[EPVS]-1661315077826
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315077827
GPR[SPVAP]-1661315077827
GPR[EPVAP]-1661315078907
GPR[SPVATF]-1661315078907
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661315119760
GPR[EPVS]-1661315119760
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315119762
GPR[SPVAP]-1661315119762
GPR[EPVAP]-1661315120830
GPR[SPVATF]-1661315120830
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661315161608
GPR[EPVS]-1661315161608
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315161610
GPR[SPVAP]-1661315161610
GPR[EPVAP]-1661315162258
GPR[EPVS]-1661315162258
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315162260
GPR[SPVAP]-1661315162260
GPR[EPVAP]-1661315163330
GPR[SPVATF]-1661315163330
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661315204317
GPR[EPVS]-1661315204317
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315204318
GPR[SPVAP]-1661315204318
GPR[EPVAP]-1661315204941
GPR[EPVS]-1661315204941
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315204942
GPR[SPVAP]-1661315204942
GPR[EPVAP]-1661315205576
GPR[EPVS]-1661315205576
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315205577
GPR[SPVAP]-1661315205577
GPR[EPVAP]-1661315206199
GPR[EPVS]-1661315206199
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315206200
GPR[SPVAP]-1661315206200
GPR[EPVAP]-1661315206818
GPR[EPVS]-1661315206818
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315206820
GPR[SPVAP]-1661315206820
GPR[EPVAP]-1661315207455
GPR[EPVS]-1661315207455
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315207456
GPR[SPVAP]-1661315207456
GPR[EPVAP]-1661315208095
GPR[EPVS]-1661315208095
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315208096
GPR[SPVAP]-1661315208096
GPR[EPVAP]-1661315208720
GPR[EPVS]-1661315208720
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315208721
GPR[SPVAP]-1661315208721
GPR[EPVAP]-1661315209360
GPR[EPVS]-1661315209360
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315209362
GPR[SPVAP]-1661315209362
GPR[EPVAP]-1661315210421
GPR[SPVATF]-1661315210421
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661315251392
GPR[EPVS]-1661315251392
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315251393
GPR[SPVAP]-1661315251393
GPR[EPVAP]-1661315252027
GPR[EPVS]-1661315252027
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<pos;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315252028
GPR[SPVAP]-1661315252028
GPR[EPVAP]-1661315252657
GPR[EPVS]-1661315252657
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<pos;i++,pos++){
if(buffer[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315252658
GPR[SPVAP]-1661315252658
GPR[EPVAP]-1661315253288
GPR[EPVS]-1661315253288
========
int len=buffer;
if(pos+len>=size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315253290
GPR[SPVAP]-1661315253290
GPR[EPVAP]-1661315253929
GPR[EPVS]-1661315253929
========
int len=buffer;
if(pos+len>=size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315253931
GPR[SPVAP]-1661315253931
GPR[EPVAP]-1661315254556
GPR[EPVS]-1661315254556
========
int len=buffer;
if(pos+len>=size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315254558
GPR[SPVAP]-1661315254558
GPR[EPVAP]-1661315255179
GPR[EPVS]-1661315255179
========
int len=buffer;
if(pos+len>=size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315255180
GPR[SPVAP]-1661315255180
GPR[EPVAP]-1661315255815
GPR[EPVS]-1661315255815
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315255816
GPR[SPVAP]-1661315255816
GPR[EPVAP]-1661315256448
GPR[EPVS]-1661315256448
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315256449
GPR[SPVAP]-1661315256449
GPR[EPVAP]-1661315257084
GPR[EPVS]-1661315257084
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315257085
GPR[SPVAP]-1661315257085
GPR[EPVAP]-1661315257716
GPR[EPVS]-1661315257716
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315257717
GPR[SPVAP]-1661315257717
GPR[EPVAP]-1661315258343
GPR[EPVS]-1661315258343
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315258344
GPR[SPVAP]-1661315258344
GPR[EPVAP]-1661315258967
GPR[EPVS]-1661315258967
========
int len=buffer;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315258968
GPR[SPVAP]-1661315258968
GPR[EPVAP]-1661315259604
GPR[EPVS]-1661315259604
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315259605
GPR[SPVAP]-1661315259605
GPR[EPVAP]-1661315260228
GPR[EPVS]-1661315260228
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315260229
GPR[SPVAP]-1661315260229
GPR[EPVAP]-1661315260866
GPR[EPVS]-1661315260866
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315260867
GPR[SPVAP]-1661315260867
GPR[EPVAP]-1661315261496
GPR[EPVS]-1661315261496
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315261497
GPR[SPVAP]-1661315261497
GPR[EPVAP]-1661315262128
GPR[EPVS]-1661315262128
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315262129
GPR[SPVAP]-1661315262129
GPR[EPVAP]-1661315262768
GPR[EPVS]-1661315262768
========
int len=buffer;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315262769
GPR[SPVAP]-1661315262769
GPR[EPVAP]-1661315263389
GPR[EPVS]-1661315263389
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315263390
GPR[SPVAP]-1661315263390
GPR[EPVAP]-1661315264030
GPR[EPVS]-1661315264030
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315264031
GPR[SPVAP]-1661315264031
GPR[EPVAP]-1661315264659
GPR[EPVS]-1661315264659
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315264659
GPR[SPVAP]-1661315264659
GPR[EPVAP]-1661315265293
GPR[EPVS]-1661315265293
========
int len=buffer;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315265294
GPR[SPVAP]-1661315265294
GPR[EPVAP]-1661315265917
GPR[EPVS]-1661315265917
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315265918
GPR[SPVAP]-1661315265918
GPR[EPVAP]-1661315266551
GPR[EPVS]-1661315266551
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315266552
GPR[SPVAP]-1661315266552
GPR[EPVAP]-1661315267179
GPR[EPVS]-1661315267179
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315267180
GPR[SPVAP]-1661315267180
GPR[EPVAP]-1661315267803
GPR[EPVS]-1661315267803
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315267803
GPR[SPVAP]-1661315267803
GPR[EPVAP]-1661315268428
GPR[EPVS]-1661315268428
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315268429
GPR[SPVAP]-1661315268429
GPR[EPVAP]-1661315269060
GPR[EPVS]-1661315269060
========
int len=chars.length;
if(pos+len>=size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315269061
GPR[SPVAP]-1661315269061
GPR[EPVAP]-1661315269676
GPR[EPVS]-1661315269676
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315269677
GPR[SPVAP]-1661315269677
GPR[EPVAP]-1661315270760
GPR[SPVATF]-1661315270760
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661315311624
GPR[EPVS]-1661315311624
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315311625
GPR[SPVAP]-1661315311625
GPR[EPVAP]-1661315312299
GPR[EPVS]-1661315312299
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315312300
GPR[SPVAP]-1661315312300
GPR[EPVAP]-1661315312932
GPR[EPVS]-1661315312932
========
int len=chars.length;
if(pos+len>=bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315312934
GPR[SPVAP]-1661315312934
GPR[EPVAP]-1661315313568
GPR[EPVS]-1661315313568
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]==buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315313570
GPR[SPVAP]-1661315313570
GPR[EPVAP]-1661315314200
GPR[EPVS]-1661315314200
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(chars[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315314201
GPR[SPVAP]-1661315314201
GPR[EPVAP]-1661315314828
GPR[EPVS]-1661315314828
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]!=ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315314829
GPR[SPVAP]-1661315314829
GPR[EPVAP]-1661315315468
GPR[EPVS]-1661315315468
========
int len=chars.length;
if(pos+len>size){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(buffer[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315315469
GPR[SPVAP]-1661315315469
GPR[EPVAP]-1661315316104
GPR[EPVS]-1661315316104
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=len;i<chars.length;i++,pos++){
if(buffer[i]==ch){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315316106
GPR[SPVAP]-1661315316106
GPR[EPVAP]-1661315316746
GPR[EPVS]-1661315316747
========
i=validateRange(bufferEnd,endIndex);
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315316748
GPR[SPVAP]-1661315316748
GPR[EPVAP]-1661315317372
GPR[EPVS]-1661315317372
========
System.arraycopy(buffer,bufferEnd,chars,0,len);
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315317373
GPR[SPVAP]-1661315317373
GPR[EPVAP]-1661315317993
GPR[EPVS]-1661315317993
========
pos--;
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315317995
GPR[SPVAP]-1661315317995
GPR[EPVAP]-1661315319071
GPR[SPVATF]-1661315319071
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661315359997
GPR[EPVS]-1661315359997
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<ctors.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315359999
GPR[SPVAP]-1661315359999
GPR[EPVAP]-1661315360656
GPR[EPVS]-1661315360656
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!='0'){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315360665
GPR[SPVAP]-1661315360665
GPR[EPVAP]-1661315361749
GPR[SPVATF]-1661315361749
TESTING : org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477
GPR[EPVATF]-1661315402622
GPR[EPVS]-1661315402622
========
int len=chars.length;
if(pos+len>ret){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315402625
GPR[SPVAP]-1661315402625
GPR[EPVAP]-1661315403274
GPR[EPVS]-1661315403274
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=0;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return EMPTY;

========
GPR[SPVS]-1661315403276
GPR[SPVAP]-1661315403276
GPR[EPVAP]-1661315403917
GPR[EPVS]-1661315403917
========
int len=chars.length;
if(pos+len>bufferEnd){
return 0;
}
for(int i=length;i<chars.length;i++,pos++){
if(chars[i]!=buffer[pos]){
return 0;
}
}
return len;

========
GPR[SPVS]-1661315403919
GPR[SPVAP]-1661315403919
GPR[EPVAP]-1661315404548
GPR[EPVS]-1661315404548
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fadc9bf3773, pid=613819, tid=140384700884736
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 5309 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007fadc9bf3773 [0x00007fadc9bf0780+0x2ff3]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/lang/lang_43_buggy/hs_err_pid613819.log
Compiled method (c2) 11228512 5309       4       cofix.core.parser.node.expr.InfixExpr::match (1104 bytes)
 total in heap  [0x00007fadc9beffd0,0x00007fadc9c02300] = 74544
 relocation     [0x00007fadc9bf00f8,0x00007fadc9bf0780] = 1672
 main code      [0x00007fadc9bf0780,0x00007fadc9bfaec0] = 42816
 stub code      [0x00007fadc9bfaec0,0x00007fadc9bfafc8] = 264
 oops           [0x00007fadc9bfafc8,0x00007fadc9bfb038] = 112
 metadata       [0x00007fadc9bfb038,0x00007fadc9bfb218] = 480
 scopes data    [0x00007fadc9bfb218,0x00007fadc9c00958] = 22336
 scopes pcs     [0x00007fadc9c00958,0x00007fadc9c018b8] = 3936
 dependencies   [0x00007fadc9c018b8,0x00007fadc9c01900] = 72
 handler table  [0x00007fadc9c01900,0x00007fadc9c02038] = 1848
 nul chk table  [0x00007fadc9c02038,0x00007fadc9c02300] = 712
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Lang/43 results at /experiment_home///results/SimFix/Lang/43/seed_284/
\n\nNode: host-57\n
\n\nDate: Tue 23 Aug 2022 09:30:04 PM PDT\n
Removing checked out dir script/workingdir/SimFix/lang/lang_43_buggy
Killing all java process
GPR[SSLE]-1661315405544
GPR[ESLE]-1661315465548
