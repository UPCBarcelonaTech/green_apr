Sleep 1m start
GPR[SSLI]-1658595659551
GPR[ESLI]-1658595719557
Running SimFix Math 59b
Timezone: America/Los_Angeles
Seed 250
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Math/59/seed_250/
Project lc: math
New out script/workingdir/SimFix/math/math_59_buggy
The file script/workingdir/SimFix/math/math_59_buggy does not exist!
script/workingdir/SimFix/math/math_59_buggy
Current directory: script/workingdir/SimFix/math/math_59_buggy
classpath:  script/workingdir/SimFix/math/math_59_buggy/target/classes:script/workingdir/SimFix/math/math_59_buggy/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/SimFix/math/math_59_buggy/lib/junit-4.4.jar
Src java:  /src/main/java
Classes Java:  /target/classes
Src Test:  /src/test/java
Classes Test:  /target/test-classes
GPR[SSLB]-1658595735064
GPR[ESLB]-1658595795069
Calling SimFix: at script/workingdir/SimFix/math/math_59_buggy
build.xml
checkstyle.xml
d4j-info
defects4j.build.properties
doap_math.rdf
findbugs-exclude-filter.xml
license-header.txt
LICENSE.txt
math-pre-RC.sh
math-RC.sh
NOTICE.txt
pom.xml
PROPOSAL.html
RELEASE-NOTES.txt
siteMods
src
target
test-jar.xml
content current dir: build.xml checkstyle.xml d4j-info defects4j.build.properties doap_math.rdf findbugs-exclude-filter.xml license-header.txt LICENSE.txt math-pre-RC.sh math-RC.sh NOTICE.txt pom.xml PROPOSAL.html RELEASE-NOTES.txt siteMods src target test-jar.xml
Node: host-66
Date init: Sat 23 Jul 2022 10:03:18 AM PDT
OAR_JOB_ID: 3695161
script/workingdir/SimFix/
GPR[SSUP]-1658595798287
=================================================
Project : math_59	start : 22/07/23 10:03

Field type inconsistancy 'SUPER' with types : MathIllegalStateException and MathException
Field type inconsistancy 'SUPER' with types : MathIllegalNumberException and MathException
GPR[ESUP]-1658595802050
MM Purify? false
GPR[SFL]-1658595802487
GPR[EFL]-1658595802530
GPR[SFP]-1658595802530
TIMEOUT : 18000000
GPR[SSUN]-1658595802540
org.apache.commons.math.util.FastMath,3446
========
return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:b);

========
MM Copying to MM
GPR[SPVS]-1658595804067
GPR[SPVAP]-1658595804067
GPR[EPVAP]-1658595809247
GPR[SPVATF]-1658595809247
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595811189
GPR[EPVS]-1658595811189
========
return (a<=b)?a:(Float.isNaN(a+b)?Double.NaN:b);

========
MM Copying to MM
GPR[SPVS]-1658595811194
GPR[SPVAP]-1658595811194
GPR[EPVAP]-1658595812316
GPR[EPVS]-1658595812316
========
return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:a);

========
MM Copying to MM
GPR[SPVS]-1658595812319
GPR[SPVAP]-1658595812319
GPR[EPVAP]-1658595814331
GPR[SPVATF]-1658595814331
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595816312
GPR[EPVS]-1658595816312
========
return (a<0.0)?-1.0:((a>0.0)?1.0:(Double.isNaN(a)?Double.NaN:0.0));

========
MM Copying to MM
GPR[SPVS]-1658595816318
GPR[SPVAP]-1658595816318
GPR[EPVAP]-1658595817429
GPR[EPVS]-1658595817429
========
return (a<b)?a:(Float.isNaN(a+b)?Float.NaN:b);

========
MM Copying to MM
GPR[SPVS]-1658595817431
GPR[SPVAP]-1658595817431
GPR[EPVAP]-1658595819478
GPR[SPVATF]-1658595819478
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595821504
GPR[EPVS]-1658595821504
========
return (a<=b)?MIN_VALUE:(Float.isNaN(a+b)?Float.NaN:b);

========
MM Copying to MM
GPR[SPVS]-1658595821507
GPR[SPVAP]-1658595821508
GPR[EPVAP]-1658595822635
GPR[EPVS]-1658595822635
GPR[ESUN]-1658595822639
GPR[SSUN]-1658595822639
org.apache.commons.math.util.FastMath,3482
========
return (a<=b)?a:(Float.isNaN(a+b)?Float.NaN:b);

========
MM Copying to MM
GPR[SPVS]-1658595824165
GPR[SPVAP]-1658595824165
GPR[EPVAP]-1658595829277
GPR[SPVATF]-1658595829277
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595831222
GPR[EPVS]-1658595831222
========
return (a<=b)?b:(Float.isNaN(a+b)?Double.NaN:b);

========
MM Copying to MM
GPR[SPVS]-1658595831226
GPR[SPVAP]-1658595831226
GPR[EPVAP]-1658595832347
GPR[EPVS]-1658595832347
========
return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:a);

========
MM Copying to MM
GPR[SPVS]-1658595832350
GPR[SPVAP]-1658595832351
GPR[EPVAP]-1658595834350
GPR[SPVATF]-1658595834350
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 0
GPR[EPVATF]-1658595836351
GPR[SPVATR]-1658595836352
TESTING : math_59
MM messageFailing tests: 0
GPR[EPVATR]-1658595853236
GPR[EPVS]-1658595853236
GPR[PF]-1658595853236
sourceFile  script/workingdir/SimFix/math/math_59_buggy/src/main/java/org/apache/commons/math/util/FastMath.java
location   script/workingdir/SimFix/math/math_59_buggy
MM Out patch at /experiment_home///results/SimFix/Math/59/seed_250/patch/math/59/0/patch_50709_1_ts_1658595853236.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math/util/FastMath.java --label=/src/main/java/org/apache/commons/math/util/FastMath.java /tmp/tmpDirMM7289621951860731350/FastMath.java  /experiment_home///results/SimFix/Math/59/seed_250/patch/math/59/0/1_FastMath.java  --unified=3  > /experiment_home///results/SimFix/Math/59/seed_250/patch/math/59/0/patch_50709_1_ts_1658595853236.diff
MMOut command diff: []
========
return (a<0.0)?-1.0:((a>0.0)?1.0:(Double.isNaN(a)?Double.NaN:0.0));

========
MM Copying to MM
GPR[SPVS]-1658595853251
GPR[SPVAP]-1658595853251
GPR[EPVAP]-1658595854355
GPR[EPVS]-1658595854355
========
return (a<b)?b:(Float.isNaN(a+b)?Float.NaN:b);

========
MM Copying to MM
GPR[SPVS]-1658595854357
GPR[SPVAP]-1658595854357
GPR[EPVAP]-1658595856344
GPR[SPVATF]-1658595856344
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595858301
GPR[EPVS]-1658595858301
========
return (a<=b)?MIN_VALUE:(Float.isNaN(a+b)?Float.NaN:b);

========
MM Copying to MM
GPR[SPVS]-1658595858305
GPR[SPVAP]-1658595858305
GPR[EPVAP]-1658595859415
GPR[EPVS]-1658595859415
GPR[ESUN]-1658595859418
GPR[SSUN]-1658595859418
org.apache.commons.math.dfp.DfpField,174
GPR[ESUN]-1658595860848
GPR[SSUN]-1658595860848
org.apache.commons.math.dfp.DfpField,175
Find no block!
GPR[SSUN]-1658595861070
org.apache.commons.math.dfp.DfpField,188
Find no block!
GPR[SSUN]-1658595861305
org.apache.commons.math.dfp.DfpField,190
========
this.zero=new Dfp(this,0);
this.radixDigits=(decimalDigits<13)?4:(decimalDigits+3)/4;
this.rMode=RoundingMode.ROUND_HALF_EVEN;
this.ieeeFlags=0;

========
MM Copying to MM
GPR[SPVS]-1658595862537
GPR[SPVAP]-1658595862537
GPR[EPVAP]-1658595864583
GPR[EPVS]-1658595864583
GPR[ESUN]-1658595864583
GPR[SSUN]-1658595864583
org.apache.commons.math.dfp.DfpField,191
GPR[ESUN]-1658595864878
GPR[SSUN]-1658595864878
org.apache.commons.math.dfp.DfpField,192
========
this.one=new Dfp(this,1);
this.rMode=RoundingMode.ROUND_HALF_EVEN;
this.ieeeFlags=0;
this.zero=new Dfp(this,0);

========
MM Copying to MM
GPR[SPVS]-1658595866157
GPR[SPVAP]-1658595866157
GPR[EPVAP]-1658595868211
GPR[EPVS]-1658595868211
========
this.two=new Dfp(this,2);
this.rMode=RoundingMode.ROUND_HALF_EVEN;
this.ieeeFlags=0;
this.zero=new Dfp(this,0);

========
MM Copying to MM
GPR[SPVS]-1658595868212
GPR[SPVAP]-1658595868212
GPR[EPVAP]-1658595870027
GPR[EPVS]-1658595870027
========
this.rMode=RoundingMode.ROUND_HALF_EVEN;
this.ieeeFlags=0;
new Dfp[2][0]=ln2;
this.zero=new Dfp(this,0);

========
MM Copying to MM
GPR[SPVS]-1658595870029
GPR[SPVAP]-1658595870029
GPR[EPVAP]-1658595871856
GPR[EPVS]-1658595871856
========
this.rMode=RoundingMode.ROUND_HALF_EVEN;
this.ieeeFlags=0;
new Dfp[2][1]=zero;
this.zero=new Dfp(this,0);

========
MM Copying to MM
GPR[SPVS]-1658595871858
GPR[SPVAP]-1658595871858
GPR[EPVAP]-1658595873615
GPR[EPVS]-1658595873616
========
this.rMode=RoundingMode.ROUND_HALF_EVEN;
this.ieeeFlags=0;
new Dfp[2][0]=ln2;
new Dfp[2][1]=zero;
this.zero=new Dfp(this,0);

========
MM Copying to MM
GPR[SPVS]-1658595873617
GPR[SPVAP]-1658595873617
GPR[EPVAP]-1658595875426
GPR[EPVS]-1658595875426
GPR[ESUN]-1658595875430
GPR[SSUN]-1658595875430
org.apache.commons.math.dfp.DfpField,193
========
this.rMode=RoundingMode.ROUND_HALF_EVEN;
this.ieeeFlags=0;
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);

========
MM Copying to MM
GPR[SPVS]-1658595876702
GPR[SPVAP]-1658595876702
GPR[EPVAP]-1658595881777
GPR[SPVATF]-1658595881777
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595883771
GPR[EPVS]-1658595883771
========
this.two=new Dfp(this,2);
this.ieeeFlags=0;
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);

========
MM Copying to MM
GPR[SPVS]-1658595883773
GPR[SPVAP]-1658595883773
GPR[EPVAP]-1658595884871
GPR[EPVS]-1658595884871
========
this.ieeeFlags=0;
new Dfp[2][0]=ln2;
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);

========
MM Copying to MM
GPR[SPVS]-1658595884873
GPR[SPVAP]-1658595884873
GPR[EPVAP]-1658595885929
GPR[EPVS]-1658595885929
========
this.ieeeFlags=0;
new Dfp[2][1]=zero;
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);

========
MM Copying to MM
GPR[SPVS]-1658595885930
GPR[SPVAP]-1658595885930
GPR[EPVAP]-1658595887026
GPR[EPVS]-1658595887026
========
this.ieeeFlags=0;
new Dfp[2][0]=ln2;
new Dfp[2][1]=zero;
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);

========
MM Copying to MM
GPR[SPVS]-1658595887028
GPR[SPVAP]-1658595887028
GPR[EPVAP]-1658595888126
GPR[EPVS]-1658595888126
========
new Dfp[2][0]=sqr2Split[0].subtract(one);
this.ieeeFlags=0;
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);

========
MM Copying to MM
GPR[SPVS]-1658595888128
GPR[SPVAP]-1658595888128
GPR[EPVAP]-1658595889171
GPR[EPVS]-1658595889171
========
new Dfp[2][1]=sqr2Split[1];
this.ieeeFlags=0;
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);

========
MM Copying to MM
GPR[SPVS]-1658595889172
GPR[SPVAP]-1658595889172
GPR[EPVAP]-1658595890261
GPR[EPVS]-1658595890261
========
this.ieeeFlags=0;
ln2=x.multiply(ln2);
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);

========
MM Copying to MM
GPR[SPVS]-1658595890263
GPR[SPVAP]-1658595890263
GPR[EPVAP]-1658595891322
GPR[EPVS]-1658595891323
========
this.ieeeFlags=0;
ln2=y.add(ln2.divide(one));
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);

========
MM Copying to MM
GPR[SPVS]-1658595891324
GPR[SPVAP]-1658595891324
GPR[EPVAP]-1658595892356
GPR[EPVS]-1658595892356
========
if(ln2.equals(ln2)){
break;
}
this.ieeeFlags=0;
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);

========
MM Copying to MM
GPR[SPVS]-1658595892357
GPR[SPVAP]-1658595892357
GPR[EPVAP]-1658595893391
GPR[EPVS]-1658595893391
========
this.ieeeFlags=0;
this.zero=new Dfp(this,0);
ln2=one.subtract(ln2).divide(one.add(s));
this.one=new Dfp(this,1);

========
MM Copying to MM
GPR[SPVS]-1658595893392
GPR[SPVAP]-1658595893392
GPR[EPVAP]-1658595894428
GPR[EPVS]-1658595894428
GPR[ESUN]-1658595894429
GPR[SSUN]-1658595894429
org.apache.commons.math.dfp.DfpField,194
========
this.ieeeFlags=0;
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);
this.two=new Dfp(this,2);

========
MM Copying to MM
GPR[SPVS]-1658595895874
GPR[SPVAP]-1658595895874
GPR[EPVAP]-1658595900995
GPR[SPVATF]-1658595900995
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595902946
GPR[EPVS]-1658595902946
========
new Dfp[2][0]=ln2;
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);
this.two=new Dfp(this,2);

========
MM Copying to MM
GPR[SPVS]-1658595902948
GPR[SPVAP]-1658595902948
GPR[EPVAP]-1658595904010
GPR[EPVS]-1658595904010
========
new Dfp[2][1]=zero;
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);
this.two=new Dfp(this,2);

========
MM Copying to MM
GPR[SPVS]-1658595904012
GPR[SPVAP]-1658595904012
GPR[EPVAP]-1658595905046
GPR[EPVS]-1658595905046
========
new Dfp[2][0]=ln2;
new Dfp[2][1]=zero;
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);
this.two=new Dfp(this,2);

========
MM Copying to MM
GPR[SPVS]-1658595905048
GPR[SPVAP]-1658595905048
GPR[EPVAP]-1658595906084
GPR[EPVS]-1658595906084
========
new Dfp[2][0]=sqr2Split[0].subtract(one);
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);
this.two=new Dfp(this,2);

========
MM Copying to MM
GPR[SPVS]-1658595906085
GPR[SPVAP]-1658595906085
GPR[EPVAP]-1658595907124
GPR[EPVS]-1658595907124
========
new Dfp[2][1]=sqr2Split[1];
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);
this.two=new Dfp(this,2);

========
MM Copying to MM
GPR[SPVS]-1658595907125
GPR[SPVAP]-1658595907125
GPR[EPVAP]-1658595908177
GPR[EPVS]-1658595908177
========
ln2=y.add(two.divide(one));
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);
this.two=new Dfp(this,2);

========
MM Copying to MM
GPR[SPVS]-1658595908179
GPR[SPVAP]-1658595908179
GPR[EPVAP]-1658595909217
GPR[EPVS]-1658595909218
========
if(ln2.equals(ln2)){
break;
}
this.zero=new Dfp(this,0);
this.one=new Dfp(this,1);
this.two=new Dfp(this,2);

========
MM Copying to MM
GPR[SPVS]-1658595909219
GPR[SPVAP]-1658595909219
GPR[EPVAP]-1658595910284
GPR[EPVS]-1658595910284
========
this.zero=new Dfp(this,0);
ln2=one.subtract(ln2).divide(one.add(s));
this.one=new Dfp(this,1);
this.two=new Dfp(this,2);

========
MM Copying to MM
GPR[SPVS]-1658595910286
GPR[SPVAP]-1658595910286
GPR[EPVAP]-1658595911326
GPR[EPVS]-1658595911326
GPR[ESUN]-1658595911327
GPR[SSUN]-1658595911327
org.apache.commons.math.dfp.DfpField,195
GPR[ESUN]-1658595911718
GPR[SSUN]-1658595911718
org.apache.commons.math.dfp.DfpField,197
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595913198
GPR[SPVAP]-1658595913198
GPR[EPVAP]-1658595918340
GPR[SPVATF]-1658595918341
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595920188
GPR[EPVS]-1658595920188
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595920189
GPR[SPVAP]-1658595920189
GPR[EPVAP]-1658595922117
GPR[SPVATF]-1658595922117
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595923975
GPR[EPVS]-1658595923975
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595923976
GPR[SPVAP]-1658595923976
GPR[EPVAP]-1658595925882
GPR[SPVATF]-1658595925882
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595927738
GPR[EPVS]-1658595927738
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();

sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595927740
GPR[SPVAP]-1658595927740
GPR[EPVAP]-1658595929655
GPR[SPVATF]-1658595929655
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595931522
GPR[EPVS]-1658595931522
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr2Reciprocal=null;
sqr3=null;
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595931524
GPR[SPVAP]-1658595931524
GPR[EPVAP]-1658595933434
GPR[SPVATF]-1658595933434
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595935299
GPR[EPVS]-1658595935299
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();
sqr2=null;
sqr2Split=null;
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595935301
GPR[SPVAP]-1658595935301
GPR[EPVAP]-1658595937198
GPR[SPVATF]-1658595937198
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595939049
GPR[EPVS]-1658595939049
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();

sqr2=null;
sqr2Split=null;
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595939051
GPR[SPVAP]-1658595939051
GPR[EPVAP]-1658595941008
GPR[SPVATF]-1658595941009
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595942864
GPR[EPVS]-1658595942864
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595942866
GPR[SPVAP]-1658595942866
GPR[EPVAP]-1658595944777
GPR[SPVATF]-1658595944777
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595946627
GPR[EPVS]-1658595946627
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();

sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595946629
GPR[SPVAP]-1658595946629
GPR[EPVAP]-1658595948539
GPR[SPVATF]-1658595948540
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595950374
GPR[EPVS]-1658595950374
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();

sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595950376
GPR[SPVAP]-1658595950376
GPR[EPVAP]-1658595952289
GPR[SPVATF]-1658595952289
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595954128
GPR[EPVS]-1658595954128
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();
sqr2=null;
sqr2Split=null;
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr2Reciprocal=null;
sqr3=null;
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595954129
GPR[SPVAP]-1658595954129
GPR[EPVAP]-1658595956053
GPR[SPVATF]-1658595956053
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595957880
GPR[EPVS]-1658595957880
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();

sqr2=null;
sqr2Split=null;
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr2Reciprocal=null;
sqr3=null;
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595957881
GPR[SPVAP]-1658595957881
GPR[EPVAP]-1658595959798
GPR[SPVATF]-1658595959798
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595961622
GPR[EPVS]-1658595961622
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();

sqr2=null;
sqr2Split=null;
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595961623
GPR[SPVAP]-1658595961623
GPR[EPVAP]-1658595963522
GPR[SPVATF]-1658595963522
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595965386
GPR[EPVS]-1658595965386
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();

sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595965388
GPR[SPVAP]-1658595965388
GPR[EPVAP]-1658595967292
GPR[SPVATF]-1658595967292
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595969152
GPR[EPVS]-1658595969152
========
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
ln10String=computeLn(new Dfp(new DfpField(decimalDigits,false),10),new Dfp(new DfpField(decimalDigits,false),1),new Dfp(new DfpField(decimalDigits,false),2)).toString();

sqr2=null;
sqr2Split=null;
sqr2String=new Dfp(new DfpField(decimalDigits,false),2).sqrt().toString();
sqr2Reciprocal=null;
sqr3=null;
sqr3String=new Dfp(new DfpField(decimalDigits,false),3).sqrt().toString();
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595969154
GPR[SPVAP]-1658595969154
GPR[EPVAP]-1658595971058
GPR[SPVATF]-1658595971058
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658595972936
GPR[EPVS]-1658595972936
========
if(new Dfp(zero).lessThan(sqr3Reciprocal)){
computeConstants=true;
zero=x.negate();
}
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595972940
GPR[SPVAP]-1658595972940
GPR[EPVAP]-1658595973996
GPR[EPVS]-1658595973996
========
if(new Dfp(zero).greaterThan(one)){
computeConstants=true;
zero=one.divide(x);
}
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595973997
GPR[SPVAP]-1658595973997
GPR[EPVAP]-1658595975039
GPR[EPVS]-1658595975039
========
if(new Dfp(zero).greaterThan(ln10)){
Dfp new Dfp[2][]=new Dfp[2];
computeConstants=true;
sty[0]=sqr2Split[0].subtract(one);
sty[1]=sqr2Split[1];
Dfp[] split(new Dfp(zero))=split(new Dfp(zero));
Dfp[] splitMult(split(new Dfp(zero)),new Dfp[2])=splitMult(xs,sty);
ds[0]=ds[0].add(one);
xs[0]=xs[0].subtract(sty[0]);
xs[1]=xs[1].subtract(sty[1]);
xs=splitDiv(xs,ds);
x=xs[0].add(xs[1]);
}
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595975040
GPR[SPVAP]-1658595975040
GPR[EPVAP]-1658595975999
GPR[EPVS]-1658595975999
========
if(false){
zero=piSplit[0].divide(2).subtract(y).add(piSplit[1].divide(2));
}
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595976000
GPR[SPVAP]-1658595976001
GPR[EPVAP]-1658595977047
GPR[EPVS]-1658595977047
========
if(false){
zero=y.negate();
}
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595977048
GPR[SPVAP]-1658595977048
GPR[EPVAP]-1658595978082
GPR[EPVS]-1658595978083
========
if(zero.equals(zero.getZero())||zero.lessThan(a.getZero())){
a.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
return a.dotrap(DfpField.FLAG_INVALID,"ln",a,a.newInstance((byte)1,Dfp.QNAN));
}
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595978085
GPR[SPVAP]-1658595978085
GPR[EPVAP]-1658595979110
GPR[EPVS]-1658595979112
========
sqr2Reciprocal=new Dfp(zero);
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595979114
GPR[SPVAP]-1658595979114
GPR[EPVAP]-1658595980177
GPR[EPVS]-1658595980177
========
decimalDigits=sqr2Reciprocal.log10K();
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595980178
GPR[SPVAP]-1658595980178
GPR[EPVAP]-1658595981224
GPR[EPVS]-1658595981224
========
sqr2Reciprocal=x.divide(pow(zero.newInstance(10000),decimalDigits));
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595981225
GPR[SPVAP]-1658595981225
GPR[EPVAP]-1658595982272
GPR[EPVS]-1658595982272
========
FLAG_UNDERFLOW=sqr2Reciprocal.floor().intValue();
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595982274
GPR[SPVAP]-1658595982274
GPR[EPVAP]-1658595983318
GPR[EPVS]-1658595983318
========
new Dfp[2][0]=pow(zero.getTwo(),FLAG_UNDERFLOW);
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595983320
GPR[SPVAP]-1658595983320
GPR[EPVAP]-1658595984357
GPR[EPVS]-1658595984357
========
split(sqr2Reciprocal)[0]=spx[0].divide(new Dfp[2][0]);
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595984358
GPR[SPVAP]-1658595984358
GPR[EPVAP]-1658595985419
GPR[EPVS]-1658595985419
========
split(sqr2Reciprocal)[1]=spx[1].divide(new Dfp[2][0]);
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595985420
GPR[SPVAP]-1658595985420
GPR[EPVAP]-1658595986450
GPR[EPVS]-1658595986450
========
new Dfp[2][0]=zero.newInstance("1.33333");
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595986452
GPR[SPVAP]-1658595986452
GPR[EPVAP]-1658595987491
GPR[EPVS]-1658595987491
========
split(sqr2Reciprocal)[0]=zero.newInstance(new StringBuilder().append(FLAG_UNDERFLOW+4*decimalDigits).toString());
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595987492
GPR[SPVAP]-1658595987492
GPR[EPVAP]-1658595988526
GPR[EPVS]-1658595988526
========
split(sqr2Reciprocal)[1]=zero.getZero();
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595988528
GPR[SPVAP]-1658595988528
GPR[EPVAP]-1658595989563
GPR[EPVS]-1658595989563
========
ln5Split=splitMult(zero.getField().getLn2Split(),split(sqr2Reciprocal));
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595989564
GPR[SPVAP]-1658595989564
GPR[EPVAP]-1658595990617
GPR[EPVS]-1658595990617
========
logInternal(split(sqr2Reciprocal))[0]=spz[0].add(new Dfp[2][0]);
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595990618
GPR[SPVAP]-1658595990618
GPR[EPVAP]-1658595991649
GPR[EPVS]-1658595991649
========
logInternal(split(sqr2Reciprocal))[1]=spz[1].add(new Dfp[2][1]);
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595991650
GPR[SPVAP]-1658595991650
GPR[EPVAP]-1658595992687
GPR[EPVS]-1658595992687
========
split(sqr2Reciprocal)[0]=zero.newInstance(new StringBuilder().append(4*decimalDigits).toString());
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595992688
GPR[SPVAP]-1658595992688
GPR[EPVAP]-1658595993734
GPR[EPVS]-1658595993734
========
new double[2][0]=2.7182817;
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595993737
GPR[SPVAP]-1658595993737
GPR[EPVAP]-1658595994778
GPR[EPVS]-1658595994778
========
new double[2][1]=1.4456469E-16;
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595994779
GPR[SPVAP]-1658595994779
GPR[EPVAP]-1658595995818
GPR[EPVS]-1658595995818
========
split(1.0,new double[2]);
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595995819
GPR[SPVAP]-1658595995819
GPR[EPVAP]-1658595996878
GPR[EPVS]-1658595996878
========
if(zero.remainder(pi.multiply(2)).lessThan(zero)){
zero=x.negate();
computeConstants=true;
}
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595996880
GPR[SPVAP]-1658595996880
GPR[EPVAP]-1658595997936
GPR[EPVS]-1658595997936
========
if(zero.remainder(pi.multiply(2)).greaterThan(pi.divide(2))){
zero=pi.subtract(x);
}
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595997938
GPR[SPVAP]-1658595997938
GPR[EPVAP]-1658595998990
GPR[EPVS]-1658595998990
========
if(zero.remainder(pi.multiply(2)).lessThan(pi.divide(4))){
Dfp ln2Split[]=new Dfp[2];
c[0]=zero.remainder(pi.multiply(2));
c[1]=zero;
sqr2Reciprocal=sinInternal(split(x));
}else {
 final Dfp c[]=new Dfp[2];
 final Dfp[] piSplit=zero.getField().getPiSplit();
c[0]=piSplit[0].divide(2).subtract(x);
c[1]=piSplit[1].divide(2);
y=cosInternal(c);
}
if(computeConstants){
synchronized(DfpField.class){
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);
}
}else {
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;
}

========
MM Copying to MM
GPR[SPVS]-1658595998991
GPR[SPVAP]-1658595998991
GPR[EPVAP]-1658596000034
GPR[EPVS]-1658596000034
GPR[ESUN]-1658596000035
GPR[SSUN]-1658596000035
org.apache.commons.math.dfp.DfpField,199
Find no block!
GPR[SSUN]-1658596000473
org.apache.commons.math.dfp.DfpField,205
========
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596001746
GPR[SPVAP]-1658596001746
GPR[EPVAP]-1658596003758
GPR[EPVS]-1658596003759
========
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596003766
GPR[SPVAP]-1658596003766
GPR[EPVAP]-1658596008689
GPR[SPVATF]-1658596008689
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596010696
GPR[EPVS]-1658596010696
========
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596010697
GPR[SPVAP]-1658596010697
GPR[EPVAP]-1658596011752
GPR[EPVS]-1658596011752
========
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
pi=new Dfp(this,sqr2String);
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596011754
GPR[SPVAP]-1658596011754
GPR[EPVAP]-1658596012791
GPR[EPVS]-1658596012791
========
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
piSplit=split(sqr2String);
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596012793
GPR[SPVAP]-1658596012793
GPR[EPVAP]-1658596013823
GPR[EPVS]-1658596013823
========
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
ln2Split=split(ln2String);
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596013824
GPR[SPVAP]-1658596013824
GPR[EPVAP]-1658596014871
GPR[EPVS]-1658596014871
========
ln10=new Dfp(this,ln10String);
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596014872
GPR[SPVAP]-1658596014872
GPR[EPVAP]-1658596015907
GPR[EPVS]-1658596015907
========
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
this.rMode=RoundingMode.ROUND_HALF_EVEN;
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596015908
GPR[SPVAP]-1658596015908
GPR[EPVAP]-1658596017840
GPR[SPVATF]-1658596017840
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596019819
GPR[EPVS]-1658596019819
========
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
this.ieeeFlags=0;
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596019821
GPR[SPVAP]-1658596019821
GPR[EPVAP]-1658596021739
GPR[SPVATF]-1658596021739
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596023721
GPR[EPVS]-1658596023721
========
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
this.rMode=RoundingMode.ROUND_HALF_EVEN;
this.ieeeFlags=0;
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596023723
GPR[SPVAP]-1658596023723
GPR[EPVAP]-1658596025662
GPR[SPVATF]-1658596025662
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596027595
GPR[EPVS]-1658596027595
========
sqr2ReciprocalString=zero.divide(zero.sqrt()).toString();
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596027597
GPR[SPVAP]-1658596027597
GPR[EPVAP]-1658596029486
GPR[SPVATF]-1658596029486
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596031468
GPR[EPVS]-1658596031468
========
ln5Split[0]=sqr2Split[0].subtract(one);
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596031469
GPR[SPVAP]-1658596031469
GPR[EPVAP]-1658596032505
GPR[EPVS]-1658596032505
========
ln5Split[1]=sqr2Split[1];
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596032506
GPR[SPVAP]-1658596032506
GPR[EPVAP]-1658596033550
GPR[EPVS]-1658596033550
========
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2Split[1]=zero;
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596033551
GPR[SPVAP]-1658596033551
GPR[EPVAP]-1658596034590
GPR[EPVS]-1658596034590
========
if((decimalDigits&1)==0){
continue;
}
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596034591
GPR[SPVAP]-1658596034591
GPR[EPVAP]-1658596035639
GPR[EPVS]-1658596035639
========
if((decimalDigits&1)!=0){
continue;
}
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596035641
GPR[SPVAP]-1658596035641
GPR[EPVAP]-1658596036667
GPR[EPVS]-1658596036667
========
zero=y.multiply(ln5Split[0].getTwo());
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596036669
GPR[SPVAP]-1658596036669
GPR[EPVAP]-1658596037706
GPR[EPVS]-1658596037706
========
sqr2Reciprocal=null;
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596037708
GPR[SPVAP]-1658596037708
GPR[EPVAP]-1658596038744
GPR[EPVS]-1658596038744
========
sqr2=null;
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);

========
MM Copying to MM
GPR[SPVS]-1658596038746
GPR[SPVAP]-1658596038746
GPR[EPVAP]-1658596039827
GPR[EPVS]-1658596039827
GPR[ESUN]-1658596039827
GPR[SSUN]-1658596039827
org.apache.commons.math.dfp.DfpField,208
GPR[ESUN]-1658596040213
GPR[SSUN]-1658596040214
org.apache.commons.math.dfp.DfpField,209
========
sqr2=new Dfp(this,sqr3String);
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596041433
GPR[SPVAP]-1658596041433
GPR[EPVAP]-1658596043524
GPR[EPVS]-1658596043524
========
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596043526
GPR[SPVAP]-1658596043526
GPR[EPVAP]-1658596045379
GPR[EPVS]-1658596045379
========
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(eString);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596045380
GPR[SPVAP]-1658596045380
GPR[EPVAP]-1658596050302
GPR[SPVATF]-1658596050302
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596052265
GPR[EPVS]-1658596052265
========
piSplit=split(sqr2ReciprocalString);
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596052267
GPR[SPVAP]-1658596052267
GPR[EPVAP]-1658596053348
GPR[EPVS]-1658596053348
========
ln2Split=split(sqr2String);
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596053350
GPR[SPVAP]-1658596053350
GPR[EPVAP]-1658596054380
GPR[EPVS]-1658596054380
========
zero=y.multiply(ln5Split[0].getTwo());
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596054381
GPR[SPVAP]-1658596054382
GPR[EPVAP]-1658596055425
GPR[EPVS]-1658596055425
========
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Split[1]=zero;
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596055426
GPR[SPVAP]-1658596055426
GPR[EPVAP]-1658596057355
GPR[SPVATF]-1658596057355
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596059311
GPR[EPVS]-1658596059311
========
sqr2=null;
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596059313
GPR[SPVAP]-1658596059313
GPR[EPVAP]-1658596060370
GPR[EPVS]-1658596060370
========
ln5Split[0]=sqr2Split[0].subtract(one);
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596060372
GPR[SPVAP]-1658596060372
GPR[EPVAP]-1658596061410
GPR[EPVS]-1658596061410
========
ln5Split[1]=sqr2Split[1];
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596061412
GPR[SPVAP]-1658596061412
GPR[EPVAP]-1658596062459
GPR[EPVS]-1658596062459
GPR[ESUN]-1658596062459
GPR[SSUN]-1658596062459
org.apache.commons.math.dfp.DfpField,210
========
sqr2=new Dfp(this,sqr2String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);

========
MM Copying to MM
GPR[SPVS]-1658596063853
GPR[SPVAP]-1658596063853
GPR[EPVAP]-1658596065893
GPR[EPVS]-1658596065893
========
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);

========
MM Copying to MM
GPR[SPVS]-1658596065895
GPR[SPVAP]-1658596065895
GPR[EPVAP]-1658596067787
GPR[EPVS]-1658596067787
========
sqr2Split=split(sqr2ReciprocalString);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);

========
MM Copying to MM
GPR[SPVS]-1658596067788
GPR[SPVAP]-1658596067788
GPR[EPVAP]-1658596072726
GPR[SPVATF]-1658596072726
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596074692
GPR[EPVS]-1658596074692
========
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
piSplit=split(sqr2String);
sqr3=new Dfp(this,sqr3String);

========
MM Copying to MM
GPR[SPVS]-1658596074694
GPR[SPVAP]-1658596074694
GPR[EPVAP]-1658596075757
GPR[EPVS]-1658596075757
========
ln2Split=split(sqr3String);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);

========
MM Copying to MM
GPR[SPVS]-1658596075758
GPR[SPVAP]-1658596075758
GPR[EPVAP]-1658596076800
GPR[EPVS]-1658596076800
========
zero=y.multiply(ln5Split[0].getTwo());
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);

========
MM Copying to MM
GPR[SPVS]-1658596076802
GPR[SPVAP]-1658596076802
GPR[EPVAP]-1658596077854
GPR[EPVS]-1658596077854
========
sqr2Split=split(sqr2String);
sqr2Split[1]=zero;
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);

========
MM Copying to MM
GPR[SPVS]-1658596077855
GPR[SPVAP]-1658596077855
GPR[EPVAP]-1658596079782
GPR[SPVATF]-1658596079782
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596081784
GPR[EPVS]-1658596081784
========
sqr2=null;
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);

========
MM Copying to MM
GPR[SPVS]-1658596081785
GPR[SPVAP]-1658596081785
GPR[EPVAP]-1658596082842
GPR[EPVS]-1658596082842
========
ln5Split[0]=sqr2Split[0].subtract(one);
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);

========
MM Copying to MM
GPR[SPVS]-1658596082843
GPR[SPVAP]-1658596082843
GPR[EPVAP]-1658596083874
GPR[EPVS]-1658596083874
========
ln5Split[1]=sqr2Split[1];
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);

========
MM Copying to MM
GPR[SPVS]-1658596083875
GPR[SPVAP]-1658596083875
GPR[EPVAP]-1658596084901
GPR[EPVS]-1658596084901
========
piString=computePi(zero,zero,zero).toString();
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);

========
MM Copying to MM
GPR[SPVS]-1658596084903
GPR[SPVAP]-1658596084903
GPR[EPVAP]-1658596086829
GPR[SPVATF]-1658596086829
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596088775
GPR[EPVS]-1658596088775
GPR[ESUN]-1658596088776
GPR[SSUN]-1658596088776
org.apache.commons.math.dfp.DfpField,211
========
sqr2=new Dfp(this,sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596090158
GPR[SPVAP]-1658596090158
GPR[EPVAP]-1658596092218
GPR[EPVS]-1658596092218
========
sqr2Split=split(sqr2String);
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596092220
GPR[SPVAP]-1658596092220
GPR[EPVAP]-1658596094102
GPR[EPVS]-1658596094102
========
piString=computePi(zero,zero,zero).toString();
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596094104
GPR[SPVAP]-1658596094104
GPR[EPVAP]-1658596099090
GPR[SPVATF]-1658596099090
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596101016
GPR[EPVS]-1658596101016
========
sqr2=null;
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596101017
GPR[SPVAP]-1658596101017
GPR[EPVAP]-1658596102082
GPR[EPVS]-1658596102082
========
sqr2Split=null;
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);

========
MM Copying to MM
GPR[SPVS]-1658596102083
GPR[SPVAP]-1658596102083
GPR[EPVAP]-1658596103134
GPR[EPVS]-1658596103134
GPR[ESUN]-1658596103134
GPR[SSUN]-1658596103134
org.apache.commons.math.dfp.DfpField,212
========
sqr2Split=split(sqr2String);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);

========
MM Copying to MM
GPR[SPVS]-1658596104438
GPR[SPVAP]-1658596104438
GPR[EPVAP]-1658596106486
GPR[EPVS]-1658596106486
========
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);

========
MM Copying to MM
GPR[SPVS]-1658596106488
GPR[SPVAP]-1658596106488
GPR[EPVAP]-1658596108303
GPR[EPVS]-1658596108303
========
eString=computeExp(zero,highPrecisionOne).toString();
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);

========
MM Copying to MM
GPR[SPVS]-1658596108305
GPR[SPVAP]-1658596108305
GPR[EPVAP]-1658596110083
GPR[EPVS]-1658596110083
========
ln2String=computeLn(zero,zero,highPrecisionTwo).toString();
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);

========
MM Copying to MM
GPR[SPVS]-1658596110084
GPR[SPVAP]-1658596110084
GPR[EPVAP]-1658596111888
GPR[EPVS]-1658596111888
========
sqr2Split=null;
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);

========
MM Copying to MM
GPR[SPVS]-1658596111889
GPR[SPVAP]-1658596111889
GPR[EPVAP]-1658596113745
GPR[EPVS]-1658596113745
========
sqr2Reciprocal=null;
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);

========
MM Copying to MM
GPR[SPVS]-1658596113747
GPR[SPVAP]-1658596113747
GPR[EPVAP]-1658596115519
GPR[EPVS]-1658596115519
GPR[ESUN]-1658596115519
GPR[SSUN]-1658596115519
org.apache.commons.math.dfp.DfpField,213
========
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);

========
MM Copying to MM
GPR[SPVS]-1658596116790
GPR[SPVAP]-1658596116790
GPR[EPVAP]-1658596118851
GPR[EPVS]-1658596118851
========
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);

========
MM Copying to MM
GPR[SPVS]-1658596118852
GPR[SPVAP]-1658596118852
GPR[EPVAP]-1658596120672
GPR[EPVS]-1658596120672
========
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596120673
GPR[SPVAP]-1658596120673
GPR[EPVAP]-1658596125690
GPR[SPVATF]-1658596125690
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596127664
GPR[EPVS]-1658596127664
========
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
eSplit=split(sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);

========
MM Copying to MM
GPR[SPVS]-1658596127665
GPR[SPVAP]-1658596127665
GPR[EPVAP]-1658596128753
GPR[EPVS]-1658596128753
========
ln2Split=split(piString);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);

========
MM Copying to MM
GPR[SPVS]-1658596128754
GPR[SPVAP]-1658596128754
GPR[EPVAP]-1658596129839
GPR[EPVS]-1658596129839
========
zero=y.multiply(ln5Split[0].getTwo());
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);

========
MM Copying to MM
GPR[SPVS]-1658596129841
GPR[SPVAP]-1658596129841
GPR[EPVAP]-1658596130889
GPR[EPVS]-1658596130889
========
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
piSplit[1]=zero;
pi=new Dfp(this,piString);
piSplit=split(piString);

========
MM Copying to MM
GPR[SPVS]-1658596130890
GPR[SPVAP]-1658596130890
GPR[EPVAP]-1658596131921
GPR[EPVS]-1658596131921
========
eString=computeExp(zero,highPrecisionOne).toString();
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);

========
MM Copying to MM
GPR[SPVS]-1658596131922
GPR[SPVAP]-1658596131922
GPR[EPVAP]-1658596132949
GPR[EPVS]-1658596132949
========
ln2String=computeLn(zero,zero,highPrecisionTwo).toString();
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);

========
MM Copying to MM
GPR[SPVS]-1658596132950
GPR[SPVAP]-1658596132950
GPR[EPVAP]-1658596134012
GPR[EPVS]-1658596134012
========
sqr2Reciprocal=null;
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);

========
MM Copying to MM
GPR[SPVS]-1658596134013
GPR[SPVAP]-1658596134013
GPR[EPVAP]-1658596135074
GPR[EPVS]-1658596135074
========
sqr3=null;
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);

========
MM Copying to MM
GPR[SPVS]-1658596135075
GPR[SPVAP]-1658596135075
GPR[EPVAP]-1658596136112
GPR[EPVS]-1658596136112
========
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
ln5Split[0]=piSplit[0].divide(2).subtract(zero);
pi=new Dfp(this,piString);
piSplit=split(piString);

========
MM Copying to MM
GPR[SPVS]-1658596136114
GPR[SPVAP]-1658596136114
GPR[EPVAP]-1658596137156
GPR[EPVS]-1658596137156
========
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
ln5Split[1]=piSplit[1].divide(2);
pi=new Dfp(this,piString);
piSplit=split(piString);

========
MM Copying to MM
GPR[SPVS]-1658596137157
GPR[SPVAP]-1658596137157
GPR[EPVAP]-1658596138198
GPR[EPVS]-1658596138198
GPR[ESUN]-1658596138199
GPR[SSUN]-1658596138199
org.apache.commons.math.dfp.DfpField,214
========
sqr3=new Dfp(this,sqr3String);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);

========
MM Copying to MM
GPR[SPVS]-1658596139631
GPR[SPVAP]-1658596139631
GPR[EPVAP]-1658596141702
GPR[EPVS]-1658596141702
========
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);

========
MM Copying to MM
GPR[SPVS]-1658596141703
GPR[SPVAP]-1658596141703
GPR[EPVAP]-1658596143536
GPR[EPVS]-1658596143536
========
pi=new Dfp(this,piString);
piSplit=split(ln5String);
e=new Dfp(this,eString);

========
MM Copying to MM
GPR[SPVS]-1658596143537
GPR[SPVAP]-1658596143538
GPR[EPVAP]-1658596148482
GPR[SPVATF]-1658596148482
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596150415
GPR[EPVS]-1658596150415
========
pi=new Dfp(this,piString);
piSplit=split(piString);
eSplit=split(eString);
e=new Dfp(this,eString);

========
MM Copying to MM
GPR[SPVS]-1658596150416
GPR[SPVAP]-1658596150416
GPR[EPVAP]-1658596151490
GPR[EPVS]-1658596151490
========
ln2Split=split(piString);
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);

========
MM Copying to MM
GPR[SPVS]-1658596151491
GPR[SPVAP]-1658596151491
GPR[EPVAP]-1658596152536
GPR[EPVS]-1658596152536
========
zero=y.multiply(ln5Split[0].getTwo());
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);

========
MM Copying to MM
GPR[SPVS]-1658596152537
GPR[SPVAP]-1658596152537
GPR[EPVAP]-1658596153585
GPR[EPVS]-1658596153585
========
pi=new Dfp(this,piString);
piSplit=split(piString);
piSplit[1]=zero;
e=new Dfp(this,eString);

========
MM Copying to MM
GPR[SPVS]-1658596153586
GPR[SPVAP]-1658596153586
GPR[EPVAP]-1658596155517
GPR[SPVATF]-1658596155517
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596157499
GPR[EPVS]-1658596157499
========
sqr3ReciprocalString=zero.divide(zero).toString();
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);

========
MM Copying to MM
GPR[SPVS]-1658596157501
GPR[SPVAP]-1658596157501
GPR[EPVAP]-1658596159506
GPR[SPVATF]-1658596159506
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596161484
GPR[EPVS]-1658596161484
========
ln2String=computeLn(zero,zero,highPrecisionTwo).toString();
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);

========
MM Copying to MM
GPR[SPVS]-1658596161485
GPR[SPVAP]-1658596161485
GPR[EPVAP]-1658596162540
GPR[EPVS]-1658596162540
========
sqr3=null;
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);

========
MM Copying to MM
GPR[SPVS]-1658596162542
GPR[SPVAP]-1658596162542
GPR[EPVAP]-1658596163574
GPR[EPVS]-1658596163574
========
sqr3Reciprocal=null;
pi=new Dfp(this,piString);
piSplit=split(piString);
e=new Dfp(this,eString);

========
MM Copying to MM
GPR[SPVS]-1658596163576
GPR[SPVAP]-1658596163576
GPR[EPVAP]-1658596164678
GPR[EPVS]-1658596164678
========
pi=new Dfp(this,piString);
piSplit=split(piString);
ln5Split[0]=piSplit[0].divide(2).subtract(zero);
e=new Dfp(this,eString);

========
MM Copying to MM
GPR[SPVS]-1658596164680
GPR[SPVAP]-1658596164680
GPR[EPVAP]-1658596165747
GPR[EPVS]-1658596165747
========
pi=new Dfp(this,piString);
piSplit=split(piString);
ln5Split[1]=piSplit[1].divide(2);
e=new Dfp(this,eString);

========
MM Copying to MM
GPR[SPVS]-1658596165749
GPR[SPVAP]-1658596165749
GPR[EPVAP]-1658596166784
GPR[EPVS]-1658596166784
GPR[ESUN]-1658596166784
GPR[SSUN]-1658596166784
org.apache.commons.math.dfp.DfpField,215
========
piSplit=split(ln5String);
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596168201
GPR[SPVAP]-1658596168201
GPR[EPVAP]-1658596173395
GPR[SPVATF]-1658596173395
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596175455
GPR[EPVS]-1658596175455
========
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(piString);

========
MM Copying to MM
GPR[SPVS]-1658596175456
GPR[SPVAP]-1658596175456
GPR[EPVAP]-1658596177393
GPR[SPVATF]-1658596177393
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596179335
GPR[EPVS]-1658596179335
========
ln2Split=split(eString);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596179336
GPR[SPVAP]-1658596179336
GPR[EPVAP]-1658596180385
GPR[EPVS]-1658596180385
========
ln5=new Dfp(this,ln5String);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596180387
GPR[SPVAP]-1658596180387
GPR[EPVAP]-1658596181446
GPR[EPVS]-1658596181446
========
piSplit=split(ln5String);
e=new Dfp(this,eString);
eSplit=split(piString);

========
MM Copying to MM
GPR[SPVS]-1658596181447
GPR[SPVAP]-1658596181447
GPR[EPVAP]-1658596183398
GPR[SPVATF]-1658596183398
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596185380
GPR[EPVS]-1658596185380
========
piSplit=split(eString);
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596185381
GPR[SPVAP]-1658596185381
GPR[EPVAP]-1658596187309
GPR[SPVATF]-1658596187309
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596189303
GPR[EPVS]-1658596189303
========
piSplit=split(piString);
e=new Dfp(this,eString);
sqr3=new Dfp(this,piString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596189304
GPR[SPVAP]-1658596189304
GPR[EPVAP]-1658596190351
GPR[EPVS]-1658596190351
========
piSplit=split(piString);
e=new Dfp(this,eString);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596190352
GPR[SPVAP]-1658596190352
GPR[EPVAP]-1658596191398
GPR[EPVS]-1658596191398
========
piSplit=split(piString);
eSplit[1]=zero;
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596191400
GPR[SPVAP]-1658596191400
GPR[EPVAP]-1658596192454
GPR[EPVS]-1658596192454
========
zero=y.multiply(ln5Split[0].getTwo());
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596192455
GPR[SPVAP]-1658596192455
GPR[EPVAP]-1658596193529
GPR[EPVS]-1658596193529
========
ln5Split[0]=sqr2Split[0].subtract(one);
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596193530
GPR[SPVAP]-1658596193530
GPR[EPVAP]-1658596194566
GPR[EPVS]-1658596194566
========
ln5Split[1]=sqr2Split[1];
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596194568
GPR[SPVAP]-1658596194568
GPR[EPVAP]-1658596195627
GPR[EPVS]-1658596195627
========
sqr3ReciprocalString=zero.divide(zero).toString();
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596195629
GPR[SPVAP]-1658596195629
GPR[EPVAP]-1658596197568
GPR[SPVATF]-1658596197568
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596199528
GPR[EPVS]-1658596199528
========
ln2String=computeLn(zero,zero,highPrecisionTwo).toString();
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596199530
GPR[SPVAP]-1658596199530
GPR[EPVAP]-1658596200559
GPR[EPVS]-1658596200559
========
sqr3Reciprocal=null;
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596200560
GPR[SPVAP]-1658596200560
GPR[EPVAP]-1658596201593
GPR[EPVS]-1658596201593
========
pi=null;
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596201594
GPR[SPVAP]-1658596201594
GPR[EPVAP]-1658596202642
GPR[EPVS]-1658596202642
========
piSplit=split(piString);
ln5Split[0]=piSplit[0].divide(2).subtract(zero);
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596202643
GPR[SPVAP]-1658596202643
GPR[EPVAP]-1658596203685
GPR[EPVS]-1658596203685
========
piSplit=split(piString);
ln5Split[1]=piSplit[1].divide(2);
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596203686
GPR[SPVAP]-1658596203686
GPR[EPVAP]-1658596204726
GPR[EPVS]-1658596204726
========
piSplit=split(piString);
ln5Split[0]=piSplit[0].divide(2).subtract(zero);
ln5Split[1]=piSplit[1].divide(2);
e=new Dfp(this,eString);
eSplit=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596204728
GPR[SPVAP]-1658596204728
GPR[EPVAP]-1658596205766
GPR[EPVS]-1658596205766
GPR[ESUN]-1658596205766
GPR[SSUN]-1658596205766
org.apache.commons.math.dfp.DfpField,216
========
e=new Dfp(this,eString);
eSplit=split(eString);
sqr3Reciprocal=new Dfp(this,ln2String);
ln2=new Dfp(this,ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596207167
GPR[SPVAP]-1658596207167
GPR[EPVAP]-1658596209207
GPR[EPVS]-1658596209207
========
piSplit=split(piString);
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596209208
GPR[SPVAP]-1658596209208
GPR[EPVAP]-1658596211077
GPR[EPVS]-1658596211077
========
e=new Dfp(this,eString);
eSplit=split(eString);
ln2Split=split(ln2String);
ln2=new Dfp(this,ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596211078
GPR[SPVAP]-1658596211078
GPR[EPVAP]-1658596212825
GPR[EPVS]-1658596212825
========
e=new Dfp(this,eString);
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
eSplit=split(eString);
ln2=new Dfp(this,ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596212827
GPR[SPVAP]-1658596212827
GPR[EPVAP]-1658596217780
GPR[SPVATF]-1658596217780
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596219738
GPR[EPVS]-1658596219738
========
e=new Dfp(this,eString);
sqr2=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596219740
GPR[SPVAP]-1658596219740
GPR[EPVAP]-1658596220811
GPR[EPVS]-1658596220811
========
sqr3ReciprocalString=zero.divide(zero).toString();
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596220813
GPR[SPVAP]-1658596220813
GPR[EPVAP]-1658596222741
GPR[SPVATF]-1658596222741
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596224708
GPR[EPVS]-1658596224708
========
piString=computePi(zero,zero,zero).toString();
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596224709
GPR[SPVAP]-1658596224709
GPR[EPVAP]-1658596226680
GPR[SPVATF]-1658596226680
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596228739
GPR[EPVS]-1658596228739
========
sqr3ReciprocalString=zero.divide(zero).toString();
piString=computePi(zero,zero,zero).toString();
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596228740
GPR[SPVAP]-1658596228740
GPR[EPVAP]-1658596230666
GPR[SPVATF]-1658596230666
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596232602
GPR[EPVS]-1658596232602
========
zero=y.multiply(ln5Split[0].getTwo());
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596232604
GPR[SPVAP]-1658596232604
GPR[EPVAP]-1658596233646
GPR[EPVS]-1658596233646
========
e=new Dfp(this,eString);
eSplit=split(eString);
eSplit[1]=zero;
ln2=new Dfp(this,ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596233647
GPR[SPVAP]-1658596233647
GPR[EPVAP]-1658596235553
GPR[SPVATF]-1658596235553
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596237550
GPR[EPVS]-1658596237550
========
pi=null;
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596237552
GPR[SPVAP]-1658596237552
GPR[EPVAP]-1658596238588
GPR[EPVS]-1658596238588
========
piSplit=null;
e=new Dfp(this,eString);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596238589
GPR[SPVAP]-1658596238590
GPR[EPVAP]-1658596239677
GPR[EPVS]-1658596239677
GPR[ESUN]-1658596239678
GPR[SSUN]-1658596239678
org.apache.commons.math.dfp.DfpField,217
========
eSplit=split(ln2String);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596241098
GPR[SPVAP]-1658596241098
GPR[EPVAP]-1658596246368
GPR[SPVATF]-1658596246368
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596248350
GPR[EPVS]-1658596248350
========
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596248351
GPR[SPVAP]-1658596248351
GPR[EPVAP]-1658596250295
GPR[SPVATF]-1658596250295
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596252245
GPR[EPVS]-1658596252245
========
ln10=new Dfp(this,ln10String);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596252247
GPR[SPVAP]-1658596252247
GPR[EPVAP]-1658596253287
GPR[EPVS]-1658596253287
========
eSplit=split(ln2String);
ln2=new Dfp(this,ln2String);
ln2Split=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596253288
GPR[SPVAP]-1658596253288
GPR[EPVAP]-1658596255268
GPR[SPVATF]-1658596255268
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596257214
GPR[EPVS]-1658596257214
========
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596257217
GPR[SPVAP]-1658596257217
GPR[EPVAP]-1658596258252
GPR[EPVS]-1658596258252
========
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
pi=new Dfp(this,ln2String);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596258253
GPR[SPVAP]-1658596258253
GPR[EPVAP]-1658596259293
GPR[EPVS]-1658596259293
========
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596259295
GPR[SPVAP]-1658596259295
GPR[EPVAP]-1658596261210
GPR[SPVATF]-1658596261210
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596263144
GPR[EPVS]-1658596263144
========
sqr2=new Dfp(this,ln2String);
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596263146
GPR[SPVAP]-1658596263146
GPR[EPVAP]-1658596264190
GPR[EPVS]-1658596264190
========
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
eSplit=split(ln2String);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596264192
GPR[SPVAP]-1658596264192
GPR[EPVAP]-1658596266082
GPR[SPVATF]-1658596266082
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596268074
GPR[EPVS]-1658596268074
========
eSplit=split(eString);
eSplit[1]=zero;
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596268075
GPR[SPVAP]-1658596268075
GPR[EPVAP]-1658596270004
GPR[SPVATF]-1658596270004
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596271951
GPR[EPVS]-1658596271951
========
zero=y.multiply(ln5Split[0].getTwo());
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596271952
GPR[SPVAP]-1658596271952
GPR[EPVAP]-1658596273005
GPR[EPVS]-1658596273005
========
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln5Split[0]=sqr2Split[0].subtract(one);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596273006
GPR[SPVAP]-1658596273006
GPR[EPVAP]-1658596274056
GPR[EPVS]-1658596274056
========
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln5Split[1]=sqr2Split[1];
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596274057
GPR[SPVAP]-1658596274057
GPR[EPVAP]-1658596275107
GPR[EPVS]-1658596275107
========
sqr3ReciprocalString=zero.divide(zero).toString();
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596275108
GPR[SPVAP]-1658596275108
GPR[EPVAP]-1658596277011
GPR[SPVATF]-1658596277011
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596278968
GPR[EPVS]-1658596278968
========
piString=computePi(zero,zero,zero).toString();
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596278969
GPR[SPVAP]-1658596278969
GPR[EPVAP]-1658596280879
GPR[SPVATF]-1658596280879
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596282832
GPR[EPVS]-1658596282832
========
sqr3ReciprocalString=zero.divide(zero).toString();
piString=computePi(zero,zero,zero).toString();
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596282833
GPR[SPVAP]-1658596282833
GPR[EPVAP]-1658596284731
GPR[SPVATF]-1658596284731
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596286671
GPR[EPVS]-1658596286671
========
piSplit=null;
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596286673
GPR[SPVAP]-1658596286673
GPR[EPVAP]-1658596287708
GPR[EPVS]-1658596287708
========
e=null;
eSplit=split(eString);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);

========
MM Copying to MM
GPR[SPVS]-1658596287709
GPR[SPVAP]-1658596287709
GPR[EPVAP]-1658596288735
GPR[EPVS]-1658596288735
GPR[ESUN]-1658596288735
GPR[SSUN]-1658596288735
org.apache.commons.math.dfp.DfpField,218
========
ln5Split=split(ln5String);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596290125
GPR[SPVAP]-1658596290125
GPR[EPVAP]-1658596292171
GPR[EPVS]-1658596292171
========
ln10=new Dfp(this,ln5String);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596292173
GPR[SPVAP]-1658596292173
GPR[EPVAP]-1658596294020
GPR[EPVS]-1658596294020
========
ln2=new Dfp(this,ln2String);
ln2Split=split(eString);
ln5=new Dfp(this,ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596294022
GPR[SPVAP]-1658596294022
GPR[EPVAP]-1658596298899
GPR[SPVATF]-1658596298899
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596300851
GPR[EPVS]-1658596300851
========
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
sqr3Reciprocal=new Dfp(this,ln5String);
ln5=new Dfp(this,ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596300852
GPR[SPVAP]-1658596300852
GPR[EPVAP]-1658596301930
GPR[EPVS]-1658596301930
========
piSplit=split(ln2String);
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596301931
GPR[SPVAP]-1658596301931
GPR[EPVAP]-1658596302971
GPR[EPVS]-1658596302971
========
ln2=new Dfp(this,ln2String);
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596302972
GPR[SPVAP]-1658596302972
GPR[EPVAP]-1658596304903
GPR[SPVATF]-1658596304903
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596306857
GPR[EPVS]-1658596306857
========
ln2=new Dfp(this,ln2String);
sqr2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596306859
GPR[SPVAP]-1658596306859
GPR[EPVAP]-1658596307905
GPR[EPVS]-1658596307905
========
ln2=new Dfp(this,ln2String);
piString=computePi(zero,zero,zero).toString();
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596307906
GPR[SPVAP]-1658596307906
GPR[EPVAP]-1658596309830
GPR[SPVATF]-1658596309830
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596311807
GPR[EPVS]-1658596311807
========
ln2=new Dfp(this,ln2String);
eString=computeExp(zero,highPrecisionOne).toString();
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596311808
GPR[SPVAP]-1658596311808
GPR[EPVAP]-1658596312843
GPR[EPVS]-1658596312843
========
zero=y.multiply(ln5Split[0].getTwo());
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596312844
GPR[SPVAP]-1658596312844
GPR[EPVAP]-1658596313905
GPR[EPVS]-1658596313905
========
ln2Split[1]=zero;
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596313906
GPR[SPVAP]-1658596313906
GPR[EPVAP]-1658596314939
GPR[EPVS]-1658596314939
========
e=null;
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596314940
GPR[SPVAP]-1658596314940
GPR[EPVAP]-1658596315999
GPR[EPVS]-1658596315999
========
eSplit=null;
ln2=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596316000
GPR[SPVAP]-1658596316000
GPR[EPVAP]-1658596317067
GPR[EPVS]-1658596317067
GPR[ESUN]-1658596317067
GPR[SSUN]-1658596317067
org.apache.commons.math.dfp.DfpField,219
========
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596318555
GPR[SPVAP]-1658596318555
GPR[EPVAP]-1658596320685
GPR[EPVS]-1658596320685
========
ln10=new Dfp(this,ln10String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596320687
GPR[SPVAP]-1658596320687
GPR[EPVAP]-1658596322514
GPR[EPVS]-1658596322515
========
ln2Split=split(ln5String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596322516
GPR[SPVAP]-1658596322516
GPR[EPVAP]-1658596327459
GPR[SPVATF]-1658596327459
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596329415
GPR[EPVS]-1658596329415
========
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596329416
GPR[SPVAP]-1658596329416
GPR[EPVAP]-1658596331330
GPR[SPVATF]-1658596331330
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596333285
GPR[EPVS]-1658596333285
========
sqr3Reciprocal=new Dfp(this,ln2String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596333286
GPR[SPVAP]-1658596333286
GPR[EPVAP]-1658596334351
GPR[EPVS]-1658596334351
========
pi=new Dfp(this,ln5String);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596334353
GPR[SPVAP]-1658596334353
GPR[EPVAP]-1658596335384
GPR[EPVS]-1658596335384
========
ln2Split=split(ln5String);
ln5=new Dfp(this,ln5String);
ln5Split=split(eString);

========
MM Copying to MM
GPR[SPVS]-1658596335386
GPR[SPVAP]-1658596335386
GPR[EPVAP]-1658596337345
GPR[SPVATF]-1658596337345
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596339338
GPR[EPVS]-1658596339338
========
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596339340
GPR[SPVAP]-1658596339340
GPR[EPVAP]-1658596341232
GPR[SPVATF]-1658596341232
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596343196
GPR[EPVS]-1658596343196
========
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
sqr2=new Dfp(this,ln5String);
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596343197
GPR[SPVAP]-1658596343197
GPR[EPVAP]-1658596344246
GPR[EPVS]-1658596344246
========
ln2Split=split(ln2String);
ln5Split[1]=zero;
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596344248
GPR[SPVAP]-1658596344248
GPR[EPVAP]-1658596345291
GPR[EPVS]-1658596345291
========
piString=computePi(zero,zero,zero).toString();
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596345293
GPR[SPVAP]-1658596345293
GPR[EPVAP]-1658596347192
GPR[SPVATF]-1658596347192
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596349152
GPR[EPVS]-1658596349152
========
eString=computeExp(zero,highPrecisionOne).toString();
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596349153
GPR[SPVAP]-1658596349153
GPR[EPVAP]-1658596350205
GPR[EPVS]-1658596350205
========
zero=y.multiply(ln5Split[0].getTwo());
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596350207
GPR[SPVAP]-1658596350207
GPR[EPVAP]-1658596351251
GPR[EPVS]-1658596351251
========
eSplit[0]=sqr2Split[0].subtract(one);
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596351252
GPR[SPVAP]-1658596351252
GPR[EPVAP]-1658596353218
GPR[SPVATF]-1658596353218
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596355161
GPR[EPVS]-1658596355161
========
eSplit[1]=sqr2Split[1];
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596355162
GPR[SPVAP]-1658596355162
GPR[EPVAP]-1658596357062
GPR[SPVATF]-1658596357062
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596359016
GPR[EPVS]-1658596359016
========
eSplit[0]=sqr2Split[0].subtract(one);
eSplit[1]=sqr2Split[1];
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596359018
GPR[SPVAP]-1658596359018
GPR[EPVAP]-1658596360908
GPR[SPVATF]-1658596360908
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596362849
GPR[EPVS]-1658596362849
========
ln10=null;
ln2Split=split(ln2String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);

========
MM Copying to MM
GPR[SPVS]-1658596362850
GPR[SPVAP]-1658596362850
GPR[EPVAP]-1658596363888
GPR[EPVS]-1658596363888
GPR[ESUN]-1658596363888
GPR[SSUN]-1658596363888
org.apache.commons.math.dfp.DfpField,220
========
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln2Split=split(ln2String);
ln10=new Dfp(this,ln10String);

========
MM Copying to MM
GPR[SPVS]-1658596365282
GPR[SPVAP]-1658596365282
GPR[EPVAP]-1658596367439
GPR[EPVS]-1658596367439
========
ln10=new Dfp(this,ln10String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);

========
MM Copying to MM
GPR[SPVS]-1658596367440
GPR[SPVAP]-1658596367440
GPR[EPVAP]-1658596369309
GPR[EPVS]-1658596369309
========
ln5=new Dfp(this,ln5String);
ln5Split=split(eString);
ln10=new Dfp(this,ln10String);

========
MM Copying to MM
GPR[SPVS]-1658596369311
GPR[SPVAP]-1658596369311
GPR[EPVAP]-1658596374201
GPR[SPVATF]-1658596374201
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596376184
GPR[EPVS]-1658596376184
========
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
sqr3Reciprocal=new Dfp(this,ln10String);
ln10=new Dfp(this,ln10String);

========
MM Copying to MM
GPR[SPVS]-1658596376186
GPR[SPVAP]-1658596376186
GPR[EPVAP]-1658596377238
GPR[EPVS]-1658596377238
========
piSplit=split(ln5String);
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);

========
MM Copying to MM
GPR[SPVS]-1658596377239
GPR[SPVAP]-1658596377239
GPR[EPVAP]-1658596378285
GPR[EPVS]-1658596378285
========
ln5=new Dfp(this,ln5String);
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);

========
MM Copying to MM
GPR[SPVS]-1658596378286
GPR[SPVAP]-1658596378286
GPR[EPVAP]-1658596380197
GPR[SPVATF]-1658596380197
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596382166
GPR[EPVS]-1658596382166
========
ln5=new Dfp(this,ln5String);
sqr2=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);

========
MM Copying to MM
GPR[SPVS]-1658596382168
GPR[SPVAP]-1658596382168
GPR[EPVAP]-1658596383219
GPR[EPVS]-1658596383219
========
eString=computeExp(zero,highPrecisionOne).toString();
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);

========
MM Copying to MM
GPR[SPVS]-1658596383220
GPR[SPVAP]-1658596383220
GPR[EPVAP]-1658596384287
GPR[EPVS]-1658596384287
========
zero=y.multiply(ln5Split[0].getTwo());
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);

========
MM Copying to MM
GPR[SPVS]-1658596384288
GPR[SPVAP]-1658596384288
GPR[EPVAP]-1658596385326
GPR[EPVS]-1658596385326
========
ln5Split[1]=zero;
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);

========
MM Copying to MM
GPR[SPVS]-1658596385328
GPR[SPVAP]-1658596385328
GPR[EPVAP]-1658596386375
GPR[EPVS]-1658596386375
========
ln2Split=null;
ln5=new Dfp(this,ln5String);
ln5Split=split(ln5String);
ln10=new Dfp(this,ln10String);

========
MM Copying to MM
GPR[SPVS]-1658596386376
GPR[SPVAP]-1658596386376
GPR[EPVAP]-1658596387427
GPR[EPVS]-1658596387427
GPR[ESUN]-1658596387427
GPR[SSUN]-1658596387427
org.apache.commons.math.dfp.DfpField,221
GPR[ESUN]-1658596387839
GPR[SSUN]-1658596387839
org.apache.commons.math.dfp.DfpField,223
Find no block!
GPR[SSUN]-1658596388090
org.apache.commons.math.dfp.DfpField,226
========
sqr2=null;
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;

========
MM Copying to MM
GPR[SPVS]-1658596389300
GPR[SPVAP]-1658596389300
GPR[EPVAP]-1658596391350
GPR[EPVS]-1658596391350
========
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;

========
MM Copying to MM
GPR[SPVS]-1658596391351
GPR[SPVAP]-1658596391351
GPR[EPVAP]-1658596396327
GPR[SPVATF]-1658596396327
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596404128
GPR[EPVS]-1658596404128
========
new Dfp[2][0]=sqr2Split[0].subtract(one);
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;

========
MM Copying to MM
GPR[SPVS]-1658596404129
GPR[SPVAP]-1658596404129
GPR[EPVAP]-1658596405193
GPR[EPVS]-1658596405193
========
new Dfp[2][1]=sqr2Split[1];
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;

========
MM Copying to MM
GPR[SPVS]-1658596405195
GPR[SPVAP]-1658596405195
GPR[EPVAP]-1658596406259
GPR[EPVS]-1658596406259
GPR[ESUN]-1658596406259
GPR[SSUN]-1658596406259
org.apache.commons.math.dfp.DfpField,227
GPR[ESUN]-1658596406672
GPR[SSUN]-1658596406672
org.apache.commons.math.dfp.DfpField,228
========
sqr2=null;
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;

========
MM Copying to MM
GPR[SPVS]-1658596407866
GPR[SPVAP]-1658596407866
GPR[EPVAP]-1658596409925
GPR[EPVS]-1658596409925
========
computeStringConstants((decimalDigits<67)?200:(3*decimalDigits));
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;

========
MM Copying to MM
GPR[SPVS]-1658596409927
GPR[SPVAP]-1658596409927
GPR[EPVAP]-1658596414943
GPR[SPVATF]-1658596414943
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596422584
GPR[EPVS]-1658596422584
========
sqr2=new Dfp(this,sqr2String);
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;

========
MM Copying to MM
GPR[SPVS]-1658596422586
GPR[SPVAP]-1658596422586
GPR[EPVAP]-1658596423667
GPR[EPVS]-1658596423667
========
new Dfp[2][0]=sqr2Split[0].subtract(one);
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;

========
MM Copying to MM
GPR[SPVS]-1658596423669
GPR[SPVAP]-1658596423669
GPR[EPVAP]-1658596424713
GPR[EPVS]-1658596424713
========
new Dfp[2][1]=sqr2Split[1];
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;

========
MM Copying to MM
GPR[SPVS]-1658596424715
GPR[SPVAP]-1658596424715
GPR[EPVAP]-1658596425755
GPR[EPVS]-1658596425755
GPR[ESUN]-1658596425755
GPR[SSUN]-1658596425755
org.apache.commons.math.dfp.DfpField,229
========
sqr2=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;

========
MM Copying to MM
GPR[SPVS]-1658596427084
GPR[SPVAP]-1658596427084
GPR[EPVAP]-1658596429199
GPR[EPVS]-1658596429199
========
sqr2Split=null;
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;

========
MM Copying to MM
GPR[SPVS]-1658596429201
GPR[SPVAP]-1658596429201
GPR[EPVAP]-1658596431022
GPR[EPVS]-1658596431022
========
sqr2=new Dfp(this,sqr2String);
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;

========
MM Copying to MM
GPR[SPVS]-1658596431023
GPR[SPVAP]-1658596431023
GPR[EPVAP]-1658596432881
GPR[EPVS]-1658596432881
========
sqr2Split=split(sqr2String);
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;

========
MM Copying to MM
GPR[SPVS]-1658596432883
GPR[SPVAP]-1658596432883
GPR[EPVAP]-1658596434684
GPR[EPVS]-1658596434684
GPR[ESUN]-1658596434684
GPR[SSUN]-1658596434684
org.apache.commons.math.dfp.DfpField,230
========
sqr2Split=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;

========
MM Copying to MM
GPR[SPVS]-1658596435977
GPR[SPVAP]-1658596435977
GPR[EPVAP]-1658596438079
GPR[EPVS]-1658596438079
========
sqr2Reciprocal=null;
sqr3=null;
sqr3Reciprocal=null;
pi=null;

========
MM Copying to MM
GPR[SPVS]-1658596438081
GPR[SPVAP]-1658596438081
GPR[EPVAP]-1658596439908
GPR[EPVS]-1658596439908
========
sqr2Split=split(sqr2String);
sqr3=null;
sqr3Reciprocal=null;
pi=null;

========
MM Copying to MM
GPR[SPVS]-1658596439910
GPR[SPVAP]-1658596439910
GPR[EPVAP]-1658596441727
GPR[EPVS]-1658596441727
========
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3=null;
sqr3Reciprocal=null;
pi=null;

========
MM Copying to MM
GPR[SPVS]-1658596441729
GPR[SPVAP]-1658596441729
GPR[EPVAP]-1658596443484
GPR[EPVS]-1658596443484
GPR[ESUN]-1658596443484
GPR[SSUN]-1658596443484
org.apache.commons.math.dfp.DfpField,231
========
sqr2Reciprocal=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;

========
MM Copying to MM
GPR[SPVS]-1658596444725
GPR[SPVAP]-1658596444725
GPR[EPVAP]-1658596446791
GPR[EPVS]-1658596446791
========
sqr3=null;
sqr3Reciprocal=null;
pi=null;
piSplit=null;

========
MM Copying to MM
GPR[SPVS]-1658596446792
GPR[SPVAP]-1658596446792
GPR[EPVAP]-1658596448610
GPR[EPVS]-1658596448610
========
sqr2Reciprocal=new Dfp(this,sqr2ReciprocalString);
sqr3Reciprocal=null;
pi=null;
piSplit=null;

========
MM Copying to MM
GPR[SPVS]-1658596448611
GPR[SPVAP]-1658596448611
GPR[EPVAP]-1658596450424
GPR[EPVS]-1658596450424
========
sqr3=new Dfp(this,sqr3String);
sqr3Reciprocal=null;
pi=null;
piSplit=null;

========
MM Copying to MM
GPR[SPVS]-1658596450425
GPR[SPVAP]-1658596450425
GPR[EPVAP]-1658596452242
GPR[EPVS]-1658596452242
GPR[ESUN]-1658596452243
GPR[SSUN]-1658596452243
org.apache.commons.math.dfp.DfpField,232
========
sqr3=null;
pi=null;
piSplit=null;
e=null;

========
MM Copying to MM
GPR[SPVS]-1658596453480
GPR[SPVAP]-1658596453480
GPR[EPVAP]-1658596455570
GPR[EPVS]-1658596455570
========
sqr3Reciprocal=null;
pi=null;
piSplit=null;
e=null;

========
MM Copying to MM
GPR[SPVS]-1658596455571
GPR[SPVAP]-1658596455571
GPR[EPVAP]-1658596457361
GPR[EPVS]-1658596457361
========
sqr3=new Dfp(this,sqr3String);
pi=null;
piSplit=null;
e=null;

========
MM Copying to MM
GPR[SPVS]-1658596457362
GPR[SPVAP]-1658596457362
GPR[EPVAP]-1658596459178
GPR[EPVS]-1658596459178
========
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
pi=null;
piSplit=null;
e=null;

========
MM Copying to MM
GPR[SPVS]-1658596459179
GPR[SPVAP]-1658596459179
GPR[EPVAP]-1658596460987
GPR[EPVS]-1658596460987
GPR[ESUN]-1658596460987
GPR[SSUN]-1658596460987
org.apache.commons.math.dfp.DfpField,233
========
sqr3Reciprocal=null;
piSplit=null;
e=null;
eSplit=null;

========
MM Copying to MM
GPR[SPVS]-1658596462211
GPR[SPVAP]-1658596462211
GPR[EPVAP]-1658596464248
GPR[EPVS]-1658596464248
========
pi=null;
piSplit=null;
e=null;
eSplit=null;

========
MM Copying to MM
GPR[SPVS]-1658596464250
GPR[SPVAP]-1658596464250
GPR[EPVAP]-1658596466042
GPR[EPVS]-1658596466042
========
sqr3Reciprocal=new Dfp(this,sqr3ReciprocalString);
piSplit=null;
e=null;
eSplit=null;

========
MM Copying to MM
GPR[SPVS]-1658596466043
GPR[SPVAP]-1658596466043
GPR[EPVAP]-1658596467851
GPR[EPVS]-1658596467851
========
pi=new Dfp(this,piString);
piSplit=null;
e=null;
eSplit=null;

========
MM Copying to MM
GPR[SPVS]-1658596467852
GPR[SPVAP]-1658596467852
GPR[EPVAP]-1658596469650
GPR[EPVS]-1658596469650
========
piSplit=null;
ln5Split[0]=piSplit[0].divide(2).subtract(zero);
e=null;
eSplit=null;

========
MM Copying to MM
GPR[SPVS]-1658596469651
GPR[SPVAP]-1658596469651
GPR[EPVAP]-1658596471431
GPR[EPVS]-1658596471431
========
piSplit=null;
ln5Split[1]=piSplit[1].divide(2);
e=null;
eSplit=null;

========
MM Copying to MM
GPR[SPVS]-1658596471432
GPR[SPVAP]-1658596471432
GPR[EPVAP]-1658596473213
GPR[EPVS]-1658596473213
========
piSplit=null;
ln5Split[0]=piSplit[0].divide(2).subtract(zero);
ln5Split[1]=piSplit[1].divide(2);
e=null;
eSplit=null;

========
MM Copying to MM
GPR[SPVS]-1658596473215
GPR[SPVAP]-1658596473215
GPR[EPVAP]-1658596475064
GPR[EPVS]-1658596475064
GPR[ESUN]-1658596475064
GPR[SSUN]-1658596475065
org.apache.commons.math.dfp.DfpField,234
========
pi=null;
e=null;
eSplit=null;
ln2=null;

========
MM Copying to MM
GPR[SPVS]-1658596476313
GPR[SPVAP]-1658596476313
GPR[EPVAP]-1658596478359
GPR[EPVS]-1658596478359
========
piSplit=null;
e=null;
eSplit=null;
ln2=null;

========
MM Copying to MM
GPR[SPVS]-1658596478361
GPR[SPVAP]-1658596478361
GPR[EPVAP]-1658596480170
GPR[EPVS]-1658596480170
========
pi=new Dfp(this,piString);
e=null;
eSplit=null;
ln2=null;

========
MM Copying to MM
GPR[SPVS]-1658596480172
GPR[SPVAP]-1658596480172
GPR[EPVAP]-1658596481970
GPR[EPVS]-1658596481970
========
piSplit=split(piString);
e=null;
eSplit=null;
ln2=null;

========
MM Copying to MM
GPR[SPVS]-1658596481972
GPR[SPVAP]-1658596481972
GPR[EPVAP]-1658596483790
GPR[EPVS]-1658596483790
GPR[ESUN]-1658596483790
GPR[SSUN]-1658596483790
org.apache.commons.math.dfp.DfpField,235
========
piSplit=null;
eSplit=null;
ln2=null;
ln2Split=null;

========
MM Copying to MM
GPR[SPVS]-1658596485058
GPR[SPVAP]-1658596485058
GPR[EPVAP]-1658596487208
GPR[EPVS]-1658596487208
========
e=null;
eSplit=null;
ln2=null;
ln2Split=null;

========
MM Copying to MM
GPR[SPVS]-1658596487210
GPR[SPVAP]-1658596487210
GPR[EPVAP]-1658596489031
GPR[EPVS]-1658596489031
========
piSplit=split(piString);
eSplit=null;
ln2=null;
ln2Split=null;

========
MM Copying to MM
GPR[SPVS]-1658596489032
GPR[SPVAP]-1658596489032
GPR[EPVAP]-1658596490826
GPR[EPVS]-1658596490826
========
e=new Dfp(this,eString);
eSplit=null;
ln2=null;
ln2Split=null;

========
MM Copying to MM
GPR[SPVS]-1658596490828
GPR[SPVAP]-1658596490828
GPR[EPVAP]-1658596492657
GPR[EPVS]-1658596492657
GPR[ESUN]-1658596492657
GPR[SSUN]-1658596492657
org.apache.commons.math.dfp.DfpField,236
========
e=null;
ln2=null;
ln2Split=null;
ln5=null;

========
MM Copying to MM
GPR[SPVS]-1658596493944
GPR[SPVAP]-1658596493944
GPR[EPVAP]-1658596496030
GPR[EPVS]-1658596496030
========
eSplit=null;
ln2=null;
ln2Split=null;
ln5=null;

========
MM Copying to MM
GPR[SPVS]-1658596496031
GPR[SPVAP]-1658596496031
GPR[EPVAP]-1658596497873
GPR[EPVS]-1658596497873
========
e=new Dfp(this,eString);
ln2=null;
ln2Split=null;
ln5=null;

========
MM Copying to MM
GPR[SPVS]-1658596497874
GPR[SPVAP]-1658596497874
GPR[EPVAP]-1658596499651
GPR[EPVS]-1658596499651
========
eSplit=split(eString);
ln2=null;
ln2Split=null;
ln5=null;

========
MM Copying to MM
GPR[SPVS]-1658596499652
GPR[SPVAP]-1658596499652
GPR[EPVAP]-1658596501496
GPR[EPVS]-1658596501496
GPR[ESUN]-1658596501496
GPR[SSUN]-1658596501496
org.apache.commons.math.dfp.DfpField,237
========
ln10=null;
ln2Split=null;
ln5=null;
ln5Split=null;

========
MM Copying to MM
GPR[SPVS]-1658596502736
GPR[SPVAP]-1658596502736
GPR[EPVAP]-1658596504845
GPR[EPVS]-1658596504845
========
ln10=new Dfp(this,ln10String);
ln2Split=null;
ln5=null;
ln5Split=null;

========
MM Copying to MM
GPR[SPVS]-1658596504846
GPR[SPVAP]-1658596504846
GPR[EPVAP]-1658596506720
GPR[EPVS]-1658596506720
GPR[ESUN]-1658596506720
GPR[SSUN]-1658596506720
org.apache.commons.math.dfp.DfpField,238
========
ln2Split=null;
ln5=null;
ln5Split=null;
ln10=null;

========
MM Copying to MM
GPR[SPVS]-1658596507949
GPR[SPVAP]-1658596507949
GPR[EPVAP]-1658596510015
GPR[EPVS]-1658596510015
========
ln2Split=split(ln2String);
ln5=null;
ln5Split=null;
ln10=null;

========
MM Copying to MM
GPR[SPVS]-1658596510016
GPR[SPVAP]-1658596510016
GPR[EPVAP]-1658596511848
GPR[EPVS]-1658596511848
GPR[ESUN]-1658596511848
GPR[SSUN]-1658596511848
org.apache.commons.math.dfp.DfpField,239
GPR[ESUN]-1658596512125
GPR[SSUN]-1658596512125
org.apache.commons.math.dfp.DfpField,242
Find no block!
GPR[SSUN]-1658596512406
org.apache.commons.math.dfp.DfpField,248
GPR[ESUN]-1658596513671
GPR[SSUN]-1658596513671
org.apache.commons.math.dfp.DfpField,266
GPR[ESUN]-1658596514874
GPR[SSUN]-1658596514874
org.apache.commons.math.dfp.DfpField,328
========
ieeeFlags|=flags&(FLAG_INVALID|FLAG_DIV_ZERO);

========
MM Copying to MM
GPR[SPVS]-1658596516054
GPR[SPVAP]-1658596516054
GPR[EPVAP]-1658596518062
GPR[EPVS]-1658596518062
GPR[ESUN]-1658596518062
GPR[SSUN]-1658596518062
org.apache.commons.math.dfp.DfpField,329
Find no block!
GPR[SSUN]-1658596518333
org.apache.commons.math.dfp.DfpField,400
========
return ln2.newInstance(zero);

========
MM Copying to MM
GPR[SPVS]-1658596519547
GPR[SPVAP]-1658596519547
GPR[EPVAP]-1658596524726
GPR[SPVATF]-1658596524726
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596526576
GPR[EPVS]-1658596526576
========
return ln2;

========
MM Copying to MM
GPR[SPVS]-1658596526578
GPR[SPVAP]-1658596526578
GPR[EPVAP]-1658596528522
GPR[SPVATF]-1658596528522
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596530424
GPR[EPVS]-1658596530424
========
return zero.newInstance(zero);

========
MM Copying to MM
GPR[SPVS]-1658596530425
GPR[SPVAP]-1658596530425
GPR[EPVAP]-1658596532350
GPR[SPVATF]-1658596532350
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596534321
GPR[EPVS]-1658596534321
========
return zero.newInstance(one);

========
MM Copying to MM
GPR[SPVS]-1658596534323
GPR[SPVAP]-1658596534323
GPR[EPVAP]-1658596536244
GPR[SPVATF]-1658596536244
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596538183
GPR[EPVS]-1658596538183
========
return zero.newInstance(Dfp.copysign(zero,one));

========
MM Copying to MM
GPR[SPVS]-1658596538186
GPR[SPVAP]-1658596538186
GPR[EPVAP]-1658596540071
GPR[SPVATF]-1658596540071
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596542020
GPR[EPVS]-1658596542020
========
return zero.newInstance(x.newInstance((byte)1,Dfp.INFINITE));

========
MM Copying to MM
GPR[SPVS]-1658596542022
GPR[SPVAP]-1658596542022
GPR[EPVAP]-1658596543068
GPR[EPVS]-1658596543068
========
return zero.newInstance(zero.negate());

========
MM Copying to MM
GPR[SPVS]-1658596543070
GPR[SPVAP]-1658596543070
GPR[EPVAP]-1658596544954
GPR[SPVATF]-1658596544954
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596546974
GPR[EPVS]-1658596546974
========
return zero.newInstance(x.newInstance((byte)-1,Dfp.INFINITE));

========
MM Copying to MM
GPR[SPVS]-1658596546975
GPR[SPVAP]-1658596546975
GPR[EPVAP]-1658596548013
GPR[EPVS]-1658596548013
GPR[ESUN]-1658596548014
GPR[SSUN]-1658596548014
org.apache.commons.math.dfp.DfpField,522
========
Dfp result[]=new Dfp[2];
boolean leading=false;
int sp=0;

========
MM Copying to MM
GPR[SPVS]-1658596549445
GPR[SPVAP]-1658596549445
GPR[EPVAP]-1658596554556
GPR[SPVATF]-1658596554556
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596556538
GPR[EPVS]-1658596556538
========
result[0]=ln5Split[0].getOne();
Dfp result[]=new Dfp[2];
boolean leading=true;
int sp=0;

========
MM Copying to MM
GPR[SPVS]-1658596556539
GPR[SPVAP]-1658596556539
GPR[EPVAP]-1658596557624
GPR[EPVS]-1658596557624
========
result[1]=ln5Split[0].getZero();
Dfp result[]=new Dfp[2];
boolean leading=true;
int sp=0;

========
MM Copying to MM
GPR[SPVS]-1658596557626
GPR[SPVAP]-1658596557626
GPR[EPVAP]-1658596558678
GPR[EPVS]-1658596558678
========
result[0]=a.add(a.multiply(a.power10K(a.getRadixDigits()/2))).subtract(shift);
Dfp result[]=new Dfp[2];
boolean leading=true;
int sp=0;

========
MM Copying to MM
GPR[SPVS]-1658596558680
GPR[SPVAP]-1658596558680
GPR[EPVAP]-1658596559730
GPR[EPVS]-1658596559730
========
result[1]=a.subtract(result[0]);
Dfp result[]=new Dfp[2];
boolean leading=true;
int sp=0;

========
MM Copying to MM
GPR[SPVS]-1658596559731
GPR[SPVAP]-1658596559731
GPR[EPVAP]-1658596560765
GPR[EPVS]-1658596560765
========
result[1]=a[0].getZero();
Dfp result[]=new Dfp[2];
boolean leading=true;
int sp=0;

========
MM Copying to MM
GPR[SPVS]-1658596560766
GPR[SPVAP]-1658596560766
GPR[EPVAP]-1658596561806
GPR[EPVS]-1658596561806
========
result[0]=a[0].multiply(ln5Split[0]);
Dfp result[]=new Dfp[2];
boolean leading=true;
int sp=0;

========
MM Copying to MM
GPR[SPVS]-1658596561807
GPR[SPVAP]-1658596561807
GPR[EPVAP]-1658596562867
GPR[EPVS]-1658596562867
========
if(result[0].classify()==Dfp.INFINITE||result[0].equals(result[1])){
return result;
}
Dfp result[]=new Dfp[2];
boolean leading=true;
int sp=0;

========
MM Copying to MM
GPR[SPVS]-1658596562868
GPR[SPVAP]-1658596562868
GPR[EPVAP]-1658596563923
GPR[EPVS]-1658596563923
========
result[1]=a[0].multiply(ln5Split[1]).add(a[1].multiply(b[0])).add(a[1].multiply(b[1]));
Dfp result[]=new Dfp[2];
boolean leading=true;
int sp=0;

========
MM Copying to MM
GPR[SPVS]-1658596563924
GPR[SPVAP]-1658596563924
GPR[EPVAP]-1658596564959
GPR[EPVS]-1658596564959
GPR[ESUN]-1658596564959
GPR[SSUN]-1658596564959
org.apache.commons.math.dfp.DfpField,523
GPR[ESUN]-1658596565348
GPR[SSUN]-1658596565348
org.apache.commons.math.dfp.DfpField,524
GPR[ESUN]-1658596566575
GPR[SSUN]-1658596566575
org.apache.commons.math.dfp.DfpField,525
========
buf=new char[a.length()];
int sp=0;
int sig=0;
char[] buf=new char[a.length()];

========
MM Copying to MM
GPR[SPVS]-1658596567832
GPR[SPVAP]-1658596567832
GPR[EPVAP]-1658596569895
GPR[EPVS]-1658596569895
GPR[ESUN]-1658596569896
GPR[SSUN]-1658596569896
org.apache.commons.math.dfp.DfpField,527
GPR[ESUN]-1658596570170
GPR[SSUN]-1658596570170
org.apache.commons.math.dfp.DfpField,529
UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

========
if(buf[i]>='1'&&buf[i]<='9'){
sig+=(400-sig)%4;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596573339
GPR[SPVAP]-1658596573339
GPR[EPVAP]-1658596578517
GPR[SPVATF]-1658596578517
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596580459
GPR[EPVS]-1658596580459
========
if(buf[i]>='\'9\''&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596580460
GPR[SPVAP]-1658596580460
GPR[EPVAP]-1658596581431
GPR[EPVS]-1658596581431
========
if(buf[i]>='1'&&i<sp){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596581433
GPR[SPVAP]-1658596581433
GPR[EPVAP]-1658596583403
GPR[SPVATF]-1658596583403
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596585374
GPR[EPVS]-1658596585374
========
if(buf[i]>='\'9\''&&i<sp){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596585376
GPR[SPVAP]-1658596585376
GPR[EPVAP]-1658596586335
GPR[EPVS]-1658596586335
========
if(buf[i]>='1'&&buf[i]<='9'){
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658596586337
GPR[SPVAP]-1658596586337
GPR[EPVAP]-1658596588268
GPR[SPVATF]-1658596588268
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596590216
GPR[EPVS]-1658596590216
========
if(buf[i]>='1'&&buf[i]<='9'){
break;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596590218
GPR[SPVAP]-1658596590218
GPR[EPVAP]-1658596591270
GPR[EPVS]-1658596591270
========
if(buf[i]>='1'&&i<sig){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596591275
GPR[SPVAP]-1658596591275
GPR[EPVAP]-1658596593216
GPR[SPVATF]-1658596593217
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596595206
GPR[EPVS]-1658596595206
========
if(buf[i]>='1'&&buf[i]<='9'){
numElements-=i;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596595208
GPR[SPVAP]-1658596595208
GPR[EPVAP]-1658596596254
GPR[EPVS]-1658596596254
========
if(i<0){
i=-i-2;
}
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596596259
GPR[SPVAP]-1658596596259
GPR[EPVAP]-1658596598173
GPR[SPVATF]-1658596598173
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596600134
GPR[EPVS]-1658596600134
========
if(sqr3String.charAt(i)>='0'&&sqr3String.charAt(i)<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596600139
GPR[SPVAP]-1658596600139
GPR[EPVAP]-1658596602095
GPR[SPVATF]-1658596602095
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596604060
GPR[EPVS]-1658596604060
========
if(sqr3String.charAt(i)>='0'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596604061
GPR[SPVAP]-1658596604061
GPR[EPVAP]-1658596605979
GPR[SPVATF]-1658596605979
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596607922
GPR[EPVS]-1658596607922
========
if(buf[i]>='1'&&sqr3String.charAt(i)<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596607923
GPR[SPVAP]-1658596607923
GPR[EPVAP]-1658596609843
GPR[SPVATF]-1658596609843
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596611770
GPR[EPVS]-1658596611770
========
if(buf[i]>='0'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596611772
GPR[SPVAP]-1658596611772
GPR[EPVAP]-1658596613678
GPR[SPVATF]-1658596613678
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596615625
GPR[EPVS]-1658596615625
========
if(buf[i]>='\'0\''&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596615627
GPR[SPVAP]-1658596615627
GPR[EPVAP]-1658596616584
GPR[EPVS]-1658596616584
========
if(buf[i]>='1'&&buf[i]<='9'){
continue;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596616585
GPR[SPVAP]-1658596616585
GPR[EPVAP]-1658596617632
GPR[EPVS]-1658596617632
========
if(sqr3String.charAt(i)>='0'&&sqr3String.charAt(i)<='9'){
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658596617633
GPR[SPVAP]-1658596617633
GPR[EPVAP]-1658596619524
GPR[SPVATF]-1658596619524
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596621536
GPR[EPVS]-1658596621536
========
if(sqr3String.charAt(i)>='0'&&buf[i]<='9'){
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658596621538
GPR[SPVAP]-1658596621538
GPR[EPVAP]-1658596623454
GPR[SPVATF]-1658596623454
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596625408
GPR[EPVS]-1658596625408
========
if(buf[i]>='1'&&sqr3String.charAt(i)<='9'){
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658596625409
GPR[SPVAP]-1658596625409
GPR[EPVAP]-1658596627335
GPR[SPVATF]-1658596627335
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596629289
GPR[EPVS]-1658596629289
========
if(buf[i]>='0'&&buf[i]<='9'){
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658596629291
GPR[SPVAP]-1658596629291
GPR[EPVAP]-1658596631181
GPR[SPVATF]-1658596631181
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596633120
GPR[EPVS]-1658596633120
========
if(buf[i]>='0'&&sqr3String.charAt(i)<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596633122
GPR[SPVAP]-1658596633122
GPR[EPVAP]-1658596635021
GPR[SPVATF]-1658596635021
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596636962
GPR[EPVS]-1658596636962
========
if(buf[i]>='0'&&sqr3String.charAt(i)<='9'){
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658596636964
GPR[SPVAP]-1658596636964
GPR[EPVAP]-1658596638894
GPR[SPVATF]-1658596638895
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596640813
GPR[EPVS]-1658596640813
========
if(buf[i]>='1'&&buf[i]<='9'){
p=realEigenvalues[j];
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596640816
GPR[SPVAP]-1658596640816
GPR[EPVAP]-1658596641877
GPR[EPVS]-1658596641877
========
sig-=i;
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596641879
GPR[SPVAP]-1658596641879
GPR[EPVAP]-1658596643779
GPR[SPVATF]-1658596643779
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596645743
GPR[EPVS]-1658596645743
========
if(buf[i]>='1'&&buf[i]<='9'){
obs1=observed1[i];
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596645751
GPR[SPVAP]-1658596645751
GPR[EPVAP]-1658596646819
GPR[EPVS]-1658596646819
========
if(buf[i]>='1'&&buf[i]<='9'){
obs2=observed2[i];
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596646820
GPR[SPVAP]-1658596646820
GPR[EPVAP]-1658596647861
GPR[EPVS]-1658596647861
========
if(buf[i]>='1'&&buf[i]<='9'){
obs1=observed1[i];
obs2=observed2[i];

leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596647863
GPR[SPVAP]-1658596647863
GPR[EPVAP]-1658596648891
GPR[EPVS]-1658596648891
UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

========
if(buf[i]=='.'){
sig+=(400-sig)%8;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596651760
GPR[SPVAP]-1658596651760
GPR[EPVAP]-1658596653651
GPR[SPVATF]-1658596653651
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596655597
GPR[EPVS]-1658596655597
========
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658596655600
GPR[SPVAP]-1658596655600
GPR[EPVAP]-1658596657502
GPR[SPVATF]-1658596657502
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596659454
GPR[EPVS]-1658596659454
========
result[0]=new Dfp(this,new String(buf,0,sig));
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596659459
GPR[SPVAP]-1658596659459
GPR[EPVAP]-1658596661351
GPR[SPVATF]-1658596661351
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596663280
GPR[EPVS]-1658596663280
========
if(buf[i]=='-'){
sig+=(400-sig)%4;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596663283
GPR[SPVAP]-1658596663283
GPR[EPVAP]-1658596665214
GPR[SPVATF]-1658596665214
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596667178
GPR[EPVS]-1658596667178
========
if(buf[i]=='\'-\''){
sig+=(400-sig)%4;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596667180
GPR[SPVAP]-1658596667180
GPR[EPVAP]-1658596668149
GPR[EPVS]-1658596668149
========
if(buf[i]=='\'9\''){
sig+=(400-sig)%4;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596668151
GPR[SPVAP]-1658596668151
GPR[EPVAP]-1658596669114
GPR[EPVS]-1658596669114
========
if(buf[i]=='-'){
sig+=(400-sig)%4;
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658596669116
GPR[SPVAP]-1658596669116
GPR[EPVAP]-1658596671035
GPR[SPVATF]-1658596671035
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596673015
GPR[EPVS]-1658596673015
========
if((sig+i)>internalArray.length){
expandTo(startIndex+i);
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596673017
GPR[SPVAP]-1658596673017
GPR[EPVAP]-1658596674095
GPR[EPVS]-1658596674095
========
FLAG_UNDERFLOW=i;
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596674096
GPR[SPVAP]-1658596674096
GPR[EPVAP]-1658596675141
GPR[EPVS]-1658596675141
========
if(buf[i]!='.'){
sig+=(400-sig)%4;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596675143
GPR[SPVAP]-1658596675143
GPR[EPVAP]-1658596677076
GPR[SPVATF]-1658596677076
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596679024
GPR[EPVS]-1658596679024
========
if(striped[p]!='0'){
sig+=(400-sig)%4;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596679025
GPR[SPVAP]-1658596679025
GPR[EPVAP]-1658596680064
GPR[EPVS]-1658596680064
========
if(buf[i]=='0'){
sig+=(400-sig)%4;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596680065
GPR[SPVAP]-1658596680065
GPR[EPVAP]-1658596681990
GPR[SPVATF]-1658596681990
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596683950
GPR[EPVS]-1658596683950
========
if(buf[i]=='\'0\''){
sig+=(400-sig)%4;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596683951
GPR[SPVAP]-1658596683951
GPR[EPVAP]-1658596684900
GPR[EPVS]-1658596684900
========
FLAG_UNDERFLOW-=i;
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596684901
GPR[SPVAP]-1658596684901
GPR[EPVAP]-1658596685929
GPR[EPVS]-1658596685929
========
if(buf[i]!='0'){
sig+=(400-sig)%4;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596685931
GPR[SPVAP]-1658596685931
GPR[EPVAP]-1658596687854
GPR[SPVATF]-1658596687854
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596689853
GPR[EPVS]-1658596689853
========
if(buf[i]=='.'){
sig+=(400-sig)%4;
obs1=observed1[i];
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596689857
GPR[SPVAP]-1658596689857
GPR[EPVAP]-1658596690896
GPR[EPVS]-1658596690896
========
if(buf[i]=='.'){
sig+=(400-sig)%4;
obs2=observed2[i];
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596690898
GPR[SPVAP]-1658596690898
GPR[EPVAP]-1658596691943
GPR[EPVS]-1658596691943
========
if(buf[i]=='.'){
sig+=(400-sig)%4;
obs1=observed1[i];
obs2=observed2[i];

leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658596691945
GPR[SPVAP]-1658596691945
GPR[EPVAP]-1658596692986
GPR[EPVS]-1658596692986
UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

========
if(i==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596695826
GPR[SPVAP]-1658596695826
GPR[EPVAP]-1658596697738
GPR[SPVATF]-1658596697738
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596699691
GPR[EPVS]-1658596699691
========
if(sig==(radixDigits/2)*1){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596699692
GPR[SPVAP]-1658596699692
GPR[EPVAP]-1658596701579
GPR[SPVATF]-1658596701579
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596703556
GPR[EPVS]-1658596703556
========
if(i==(radixDigits/2)*1){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596703558
GPR[SPVAP]-1658596703558
GPR[EPVAP]-1658596705462
GPR[SPVATF]-1658596705462
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596707405
GPR[EPVS]-1658596707405
========
if(c==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596707407
GPR[SPVAP]-1658596707407
GPR[EPVAP]-1658596708460
GPR[EPVS]-1658596708460
========
if(colIndex==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596708461
GPR[SPVAP]-1658596708461
GPR[EPVAP]-1658596709486
GPR[EPVS]-1658596709486
========
if(sig==(radixDigits/2)*4){
coefficients[i]=0;
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596709488
GPR[SPVAP]-1658596709488
GPR[EPVAP]-1658596710519
GPR[EPVS]-1658596710519
========
if(j==(radixDigits/2)*4){
sp=j;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596710520
GPR[SPVAP]-1658596710520
GPR[EPVAP]-1658596711554
GPR[EPVS]-1658596711554
========
if(((sig>>radixDigits)&1)==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596711556
GPR[SPVAP]-1658596711556
GPR[EPVAP]-1658596713447
GPR[SPVATF]-1658596713447
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596715387
GPR[EPVS]-1658596715387
========
if(j==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596715388
GPR[SPVAP]-1658596715388
GPR[EPVAP]-1658596716438
GPR[EPVS]-1658596716438
========
if(sig==(radixDigits/2)*4){
sp=j;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596716439
GPR[SPVAP]-1658596716439
GPR[EPVAP]-1658596717483
GPR[EPVS]-1658596717483
========
if(product==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596717485
GPR[SPVAP]-1658596717485
GPR[EPVAP]-1658596718547
GPR[EPVS]-1658596718547
========
if(startIndex==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596718549
GPR[SPVAP]-1658596718549
GPR[EPVAP]-1658596719611
GPR[EPVS]-1658596719611
========
if(index==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596719613
GPR[SPVAP]-1658596719613
GPR[EPVAP]-1658596720671
GPR[EPVS]-1658596720671
========
if(i<0){
throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.INDEX_NOT_POSITIVE,i);
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596720673
GPR[SPVAP]-1658596720673
GPR[EPVAP]-1658596721720
GPR[EPVS]-1658596721720
========
sp=i;
if(sig==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596721721
GPR[SPVAP]-1658596721721
GPR[EPVAP]-1658596723665
GPR[SPVATF]-1658596723665
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596725622
GPR[EPVS]-1658596725622
========
sp=i;
if(startIndex==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596725624
GPR[SPVAP]-1658596725624
GPR[EPVAP]-1658596726668
GPR[EPVS]-1658596726668
========
sp=i;
if(i==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596726669
GPR[SPVAP]-1658596726669
GPR[EPVAP]-1658596728571
GPR[SPVATF]-1658596728571
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596730578
GPR[EPVS]-1658596730578
========
if(minimalIterationCount==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596730580
GPR[SPVAP]-1658596730580
GPR[EPVAP]-1658596731606
GPR[EPVS]-1658596731606
========
if(nearest==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596731608
GPR[SPVAP]-1658596731608
GPR[EPVAP]-1658596732646
GPR[EPVS]-1658596732646
========
if(sig==(radixDigits/2)*radixDigits){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596732648
GPR[SPVAP]-1658596732648
GPR[EPVAP]-1658596734583
GPR[SPVATF]-1658596734583
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596736556
GPR[EPVS]-1658596736556
========
if((sig&1)==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596736557
GPR[SPVAP]-1658596736557
GPR[EPVAP]-1658596738488
GPR[SPVATF]-1658596738488
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596740818
GPR[EPVS]-1658596740818
========
if(sig!=(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596740819
GPR[SPVAP]-1658596740819
GPR[EPVAP]-1658596742715
GPR[SPVATF]-1658596742715
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596744678
GPR[EPVS]-1658596744678
========
if((sig&1)!=(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596744680
GPR[SPVAP]-1658596744680
GPR[EPVAP]-1658596746569
GPR[SPVATF]-1658596746569
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596748520
GPR[EPVS]-1658596748520
========
if(i!=(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596748522
GPR[SPVAP]-1658596748522
GPR[EPVAP]-1658596750412
GPR[SPVATF]-1658596750412
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596752363
GPR[EPVS]-1658596752363
========
setSeed(19650218);
if(sig==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596752365
GPR[SPVAP]-1658596752365
GPR[EPVAP]-1658596753416
GPR[EPVS]-1658596753416
========
if(diff==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596753418
GPR[SPVAP]-1658596753418
GPR[EPVAP]-1658596754506
GPR[EPVS]-1658596754506
========
if(sig==(radixDigits/2)*4){
lostdigit=mant[0];
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596754508
GPR[SPVAP]-1658596754508
GPR[EPVAP]-1658596755558
GPR[EPVS]-1658596755558
========
if(sig==(radixDigits/2)*4){
shiftRight();
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596755559
GPR[SPVAP]-1658596755559
GPR[EPVAP]-1658596756613
GPR[EPVS]-1658596756613
========
if(sig==(radixDigits/2)*4){
lostdigit=mant[0];
shiftRight();

sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596756614
GPR[SPVAP]-1658596756614
GPR[EPVAP]-1658596757655
GPR[EPVS]-1658596757655
========
if((sig&2)==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596757657
GPR[SPVAP]-1658596757657
GPR[EPVAP]-1658596759582
GPR[SPVATF]-1658596759582
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596761527
GPR[EPVS]-1658596761527
========
if((sig&2)!=(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596761528
GPR[SPVAP]-1658596761528
GPR[EPVAP]-1658596763430
GPR[SPVATF]-1658596763430
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596765383
GPR[EPVS]-1658596765383
========
if(radixDigits==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596765385
GPR[SPVAP]-1658596765385
GPR[EPVAP]-1658596767273
GPR[SPVATF]-1658596767273
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596769217
GPR[EPVS]-1658596769217
========
if(bytesOut==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596769219
GPR[SPVAP]-1658596769219
GPR[EPVAP]-1658596770252
GPR[EPVS]-1658596770252
========
if(mu==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596770254
GPR[SPVAP]-1658596770254
GPR[EPVAP]-1658596771292
GPR[EPVS]-1658596771292
========
result[0]=new Dfp(this,new String(buf,0,radixDigits));
if(sig==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596771294
GPR[SPVAP]-1658596771294
GPR[EPVAP]-1658596773227
GPR[SPVATF]-1658596773227
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596775208
GPR[EPVS]-1658596775208
========
result[0]=new Dfp(this,new String(buf,0,radixDigits));
if(sig==(radixDigits/2)*radixDigits){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596775210
GPR[SPVAP]-1658596775210
GPR[EPVAP]-1658596777137
GPR[SPVATF]-1658596777137
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596779096
GPR[EPVS]-1658596779096
========
if(cutoff==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596779099
GPR[SPVAP]-1658596779099
GPR[EPVAP]-1658596780138
GPR[EPVS]-1658596780138
========
if(sig==(radixDigits/2)*4){
sp=dev;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596780140
GPR[SPVAP]-1658596780140
GPR[EPVAP]-1658596781197
GPR[EPVS]-1658596781197
========
if(k==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596781200
GPR[SPVAP]-1658596781200
GPR[EPVAP]-1658596782244
GPR[EPVS]-1658596782244
========
if(FLAG_UNDERFLOW==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596782247
GPR[SPVAP]-1658596782247
GPR[EPVAP]-1658596784167
GPR[SPVATF]-1658596784167
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596786100
GPR[EPVS]-1658596786100
========
if(length==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596786102
GPR[SPVAP]-1658596786102
GPR[EPVAP]-1658596787151
GPR[EPVS]-1658596787151
========
if(FLAG_UNDERFLOW!=(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596787152
GPR[SPVAP]-1658596787152
GPR[EPVAP]-1658596789076
GPR[SPVATF]-1658596789076
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596791037
GPR[EPVS]-1658596791037
========
if(nextRight==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596791043
GPR[SPVAP]-1658596791043
GPR[EPVAP]-1658596792084
GPR[EPVS]-1658596792084
========
if(y.length==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596792087
GPR[SPVAP]-1658596792087
GPR[EPVAP]-1658596793135
GPR[EPVS]-1658596793135
========
if(length!=(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596793137
GPR[SPVAP]-1658596793137
GPR[EPVAP]-1658596794173
GPR[EPVS]-1658596794173
========
if(sig==(radixDigits/2)*4){
sp=ratio;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596794176
GPR[SPVAP]-1658596794176
GPR[EPVAP]-1658596795246
GPR[EPVS]-1658596795246
========
if(x==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596795248
GPR[SPVAP]-1658596795248
GPR[EPVAP]-1658596796290
GPR[EPVS]-1658596796290
========
if(xvalI.length==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596796292
GPR[SPVAP]-1658596796292
GPR[EPVAP]-1658596797330
GPR[EPVS]-1658596797330
========
if(end==(radixDigits/2)*4){
sp=i;
break;
}

========
MM Copying to MM
GPR[SPVS]-1658596797331
GPR[SPVAP]-1658596797331
GPR[EPVAP]-1658596798375
GPR[EPVS]-1658596798375
UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

========
if(buf[i]>='0'&&buf[i]<='9'&&buf[i]<='9'){
sig++;
}

========
MM Copying to MM
GPR[SPVS]-1658596801136
GPR[SPVAP]-1658596801136
GPR[EPVAP]-1658596803051
GPR[SPVATF]-1658596803051
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596805003
GPR[EPVS]-1658596805003
========
if(buf[i]>='0'&&buf[i]<='9'&&i<sp){
sig++;
}

========
MM Copying to MM
GPR[SPVS]-1658596805005
GPR[SPVAP]-1658596805005
GPR[EPVAP]-1658596806924
GPR[SPVATF]-1658596806924
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596808901
GPR[EPVS]-1658596808901
========
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
break;
sig++;
}

========
MM Copying to MM
GPR[SPVS]-1658596808904
GPR[SPVAP]-1658596808904
GPR[EPVAP]-1658596809964
GPR[EPVS]-1658596809964
========
i++;
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}

========
MM Copying to MM
GPR[SPVS]-1658596809968
GPR[SPVAP]-1658596809968
GPR[EPVAP]-1658596811864
GPR[SPVATF]-1658596811864
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596813792
GPR[EPVS]-1658596813792
========
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
value+=d[nearest];
sig++;
}

========
MM Copying to MM
GPR[SPVS]-1658596813797
GPR[SPVAP]-1658596813797
GPR[EPVAP]-1658596814858
GPR[EPVS]-1658596814858
========
if((sig+i)>internalArray.length){
expandTo(startIndex+i);
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}

========
MM Copying to MM
GPR[SPVS]-1658596814861
GPR[SPVAP]-1658596814861
GPR[EPVAP]-1658596815890
GPR[EPVS]-1658596815890
========
sig=i;
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}

========
MM Copying to MM
GPR[SPVS]-1658596815891
GPR[SPVAP]-1658596815891
GPR[EPVAP]-1658596817785
GPR[SPVATF]-1658596817785
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596819753
GPR[EPVS]-1658596819753
========
FLAG_UNDERFLOW-=i;
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}

========
MM Copying to MM
GPR[SPVS]-1658596819755
GPR[SPVAP]-1658596819755
GPR[EPVAP]-1658596820791
GPR[EPVS]-1658596820791
========
if(i<0){
i=-i-2;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}

========
MM Copying to MM
GPR[SPVS]-1658596820792
GPR[SPVAP]-1658596820792
GPR[EPVAP]-1658596822701
GPR[SPVATF]-1658596822701
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596824634
GPR[EPVS]-1658596824634
========
if(buf[i]>='0'&&buf[i]<='9'&&i<sig){
sig++;
}

========
MM Copying to MM
GPR[SPVS]-1658596824636
GPR[SPVAP]-1658596824636
GPR[EPVAP]-1658596826548
GPR[SPVATF]-1658596826548
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596828475
GPR[EPVS]-1658596828475
========
if(buf[i]>='0'&&buf[i]<='9'&&!small){
sig++;
}

========
MM Copying to MM
GPR[SPVS]-1658596828477
GPR[SPVAP]-1658596828477
GPR[EPVAP]-1658596829508
GPR[EPVS]-1658596829508
========
if(buf[i]>='0'&&buf[i]<='9'&&sqr3String.charAt(i)<='9'){
sig++;
}

========
MM Copying to MM
GPR[SPVS]-1658596829514
GPR[SPVAP]-1658596829514
GPR[EPVAP]-1658596831410
GPR[SPVATF]-1658596831410
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596833363
GPR[EPVS]-1658596833363
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&i<radixDigits){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596837210
GPR[SPVAP]-1658596837210
GPR[EPVAP]-1658596839117
GPR[SPVATF]-1658596839117
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596841086
GPR[EPVS]-1658596841086
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='\'9\''&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596841087
GPR[SPVAP]-1658596841087
GPR[EPVAP]-1658596842048
GPR[EPVS]-1658596842048
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='\'9\''){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596842050
GPR[SPVAP]-1658596842050
GPR[EPVAP]-1658596843013
GPR[EPVS]-1658596843013
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596843016
GPR[SPVAP]-1658596843016
GPR[EPVAP]-1658596844053
GPR[EPVS]-1658596844053
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596844055
GPR[SPVAP]-1658596844055
GPR[EPVAP]-1658596845102
GPR[EPVS]-1658596845102
========
buf[sig]=sqr3String.charAt(i);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596845104
GPR[SPVAP]-1658596845104
GPR[EPVAP]-1658596846147
GPR[EPVS]-1658596846147
========
sig++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596846148
GPR[SPVAP]-1658596846148
GPR[EPVAP]-1658596848063
GPR[SPVATF]-1658596848063
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596850036
GPR[EPVS]-1658596850036
========
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596850037
GPR[SPVAP]-1658596850037
GPR[EPVAP]-1658596851077
GPR[EPVS]-1658596851077
========
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596851078
GPR[SPVAP]-1658596851078
GPR[EPVAP]-1658596852109
GPR[EPVS]-1658596852109
========
for(int i=0;i<ranks.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596852112
GPR[SPVAP]-1658596852112
GPR[EPVAP]-1658596853167
GPR[EPVS]-1658596853167
========
for(int i=0;i<realEigenvalues.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596853169
GPR[SPVAP]-1658596853169
GPR[EPVAP]-1658596854204
GPR[EPVS]-1658596854204
========
for(int i=0;i<mant.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596854206
GPR[SPVAP]-1658596854206
GPR[EPVAP]-1658596855261
GPR[EPVS]-1658596855261
========
for(int i=0;i<z.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596855263
GPR[SPVAP]-1658596855263
GPR[EPVAP]-1658596856315
GPR[EPVS]-1658596856315
========
for(int i=0;i<point.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596856317
GPR[SPVAP]-1658596856317
GPR[EPVAP]-1658596857369
GPR[EPVS]-1658596857369
========
for(int i=0;i<in.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596857371
GPR[SPVAP]-1658596857371
GPR[EPVAP]-1658596858408
GPR[EPVS]-1658596858408
========
for(int i=0;i<data.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596858410
GPR[SPVAP]-1658596858410
GPR[EPVAP]-1658596859464
GPR[EPVS]-1658596859464
========
for(int i=0;i<x.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596859467
GPR[SPVAP]-1658596859467
GPR[EPVAP]-1658596860497
GPR[EPVS]-1658596860497
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(i==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596860500
GPR[SPVAP]-1658596860500
GPR[EPVAP]-1658596862404
GPR[SPVATF]-1658596862404
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596864371
GPR[EPVS]-1658596864371
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=randInt;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596864372
GPR[SPVAP]-1658596864372
GPR[EPVAP]-1658596865431
GPR[EPVS]-1658596865431
========
for(int i=0;i<buf.length;i++){
bytes[bytesOut++]=(byte)sp;
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596865432
GPR[SPVAP]-1658596865432
GPR[EPVAP]-1658596866479
GPR[EPVS]-1658596866479
========
for(int i=0;i<buf.length;i++){
if(radixDigits==bytes.length){
return ;
}
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596866480
GPR[SPVAP]-1658596866480
GPR[EPVAP]-1658596867539
GPR[EPVS]-1658596867539
========
for(int i=0;i<buf.length;i++){
bytes[bytesOut++]=(byte)sp;
if(radixDigits==bytes.length){
return ;
}

buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596867540
GPR[SPVAP]-1658596867540
GPR[EPVAP]-1658596868577
GPR[EPVS]-1658596868577
========
for(int i=0;i<coordinates.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596868578
GPR[SPVAP]-1658596868578
GPR[EPVAP]-1658596869635
GPR[EPVS]-1658596869635
========
for(int i=0;i<coordinates.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(i==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596869636
GPR[SPVAP]-1658596869636
GPR[EPVAP]-1658596870678
GPR[EPVS]-1658596870678
========
if((sig+i)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596870680
GPR[SPVAP]-1658596870680
GPR[EPVAP]-1658596871744
GPR[EPVS]-1658596871744
========
sp=i;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596871746
GPR[SPVAP]-1658596871746
GPR[EPVAP]-1658596872811
GPR[EPVS]-1658596872811
========
for(int i=0;i<special.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596872812
GPR[SPVAP]-1658596872812
GPR[EPVAP]-1658596873852
GPR[EPVS]-1658596873852
========
for(int i=0;i<length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596873854
GPR[SPVAP]-1658596873854
GPR[EPVAP]-1658596874902
GPR[EPVS]-1658596874902
========
for(int i=0;i<radixDigits;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596874904
GPR[SPVAP]-1658596874904
GPR[EPVAP]-1658596876852
GPR[SPVATF]-1658596876852
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596878808
GPR[EPVS]-1658596878808
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(c==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596878810
GPR[SPVAP]-1658596878810
GPR[EPVAP]-1658596879912
GPR[EPVS]-1658596879912
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
result.mant[0]=radixDigits+sp;
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596879914
GPR[SPVAP]-1658596879914
GPR[EPVAP]-1658596880959
GPR[EPVS]-1658596880959
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
aextradigit=0;
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596880960
GPR[SPVAP]-1658596880960
GPR[EPVAP]-1658596882016
GPR[EPVS]-1658596882016
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
result.mant[0]=radixDigits+sp;
aextradigit=0;

sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596882018
GPR[SPVAP]-1658596882018
GPR[EPVAP]-1658596883065
GPR[EPVS]-1658596883065
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(result.mant[mant.length-1]!=0){
break;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596883066
GPR[SPVAP]-1658596883066
GPR[EPVAP]-1658596884109
GPR[EPVS]-1658596884109
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
result.shiftLeft();
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596884110
GPR[SPVAP]-1658596884110
GPR[EPVAP]-1658596885151
GPR[EPVS]-1658596885151
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(result.mant[mant.length-1]!=0){
break;
}
result.shiftLeft();

if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596885152
GPR[SPVAP]-1658596885152
GPR[EPVAP]-1658596886202
GPR[EPVS]-1658596886202
========
for(int i=0;i<mant.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(i==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596886204
GPR[SPVAP]-1658596886204
GPR[EPVAP]-1658596887241
GPR[EPVS]-1658596887241
========
for(int i=0;i<currentDerivative.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596887243
GPR[SPVAP]-1658596887243
GPR[EPVAP]-1658596888289
GPR[EPVS]-1658596888289
========
for(int i=0;i<data.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(i==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596888291
GPR[SPVAP]-1658596888291
GPR[EPVAP]-1658596889323
GPR[EPVS]-1658596889323
========
for(int i=0;i<points.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596889325
GPR[SPVAP]-1658596889325
GPR[EPVAP]-1658596890357
GPR[EPVS]-1658596890357
========
for(int i=0;i<val.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596890361
GPR[SPVAP]-1658596890361
GPR[EPVAP]-1658596891404
GPR[EPVS]-1658596891404
========
for(int i=0;i<xArray.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596891405
GPR[SPVAP]-1658596891405
GPR[EPVAP]-1658596892436
GPR[EPVS]-1658596892436
========
checkVectorDimensions(v.length);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596892439
GPR[SPVAP]-1658596892439
GPR[EPVAP]-1658596893471
GPR[EPVS]-1658596893471
========
for(int i=0;i<coefficients.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596893473
GPR[SPVAP]-1658596893473
GPR[EPVAP]-1658596894536
GPR[EPVS]-1658596894536
========
for(int i=0;i<sig;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596894539
GPR[SPVAP]-1658596894539
GPR[EPVAP]-1658596896439
GPR[SPVATF]-1658596896439
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596898371
GPR[EPVS]-1658596898371
========
if(z.length==0){
throw new IllegalArgumentException("z must contain at least one element");
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596898373
GPR[SPVAP]-1658596898373
GPR[EPVAP]-1658596899418
GPR[EPVS]-1658596899418
========
for(int i=0;i<results.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596899420
GPR[SPVAP]-1658596899420
GPR[EPVAP]-1658596900462
GPR[EPVS]-1658596900462
========
for(int i=0;i<result.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596900464
GPR[SPVAP]-1658596900464
GPR[EPVAP]-1658596902373
GPR[SPVATF]-1658596902373
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596904287
GPR[EPVS]-1658596904287
========
checkVectorDimensions(v.length);
for(int i=0;i<data.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596904290
GPR[SPVAP]-1658596904290
GPR[EPVAP]-1658596905330
GPR[EPVS]-1658596905330
========
for(int i=0;i<root.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596905335
GPR[SPVAP]-1658596905335
GPR[EPVAP]-1658596906373
GPR[EPVS]-1658596906373
========
for(int i=0;i<parameters.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596906376
GPR[SPVAP]-1658596906376
GPR[EPVAP]-1658596907420
GPR[EPVS]-1658596907420
========
if(sig==1){
return new double[]{0};
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596907422
GPR[SPVAP]-1658596907422
GPR[EPVAP]-1658596908461
GPR[EPVS]-1658596908461
========
for(int i=0;i<randomBytes.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596908464
GPR[SPVAP]-1658596908464
GPR[EPVAP]-1658596909499
GPR[EPVS]-1658596909499
========
for(int i=0;i<hash.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596909501
GPR[SPVAP]-1658596909501
GPR[EPVAP]-1658596910551
GPR[EPVS]-1658596910551
========
for(int i=0;i<a.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596910553
GPR[SPVAP]-1658596910553
GPR[EPVAP]-1658596911628
GPR[EPVS]-1658596911628
========
for(int i=0;i<dx2.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596911630
GPR[SPVAP]-1658596911630
GPR[EPVAP]-1658596912681
GPR[EPVS]-1658596912681
========
for(int i=0;i<v.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596912685
GPR[SPVAP]-1658596912685
GPR[EPVAP]-1658596913752
GPR[EPVS]-1658596913752
========
checkVectorDimensions(v.length);
for(int i=0;i<v.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596913754
GPR[SPVAP]-1658596913754
GPR[EPVAP]-1658596914785
GPR[EPVS]-1658596914785
========
for(int i=0;k<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596914789
GPR[SPVAP]-1658596914789
GPR[EPVAP]-1658596915865
GPR[EPVS]-1658596915865
========
for(int i=0;i<random.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596915867
GPR[SPVAP]-1658596915867
GPR[EPVAP]-1658596916923
GPR[EPVS]-1658596916923
========
for(int i=0;i<dimensionSize.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596916924
GPR[SPVAP]-1658596916924
GPR[EPVAP]-1658596917963
GPR[EPVS]-1658596917963
========
for(int i=0;i<buf.length;i++){
vector[i]++;
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596917965
GPR[SPVAP]-1658596917965
GPR[EPVAP]-1658596919027
GPR[EPVS]-1658596919027
========
if(sig==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596919030
GPR[SPVAP]-1658596919030
GPR[EPVAP]-1658596920070
GPR[EPVS]-1658596920070
========
if(sig==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596920071
GPR[SPVAP]-1658596920071
GPR[EPVAP]-1658596921114
GPR[EPVS]-1658596921114
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(j==(radixDigits/2)*4){
sp=j;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596921116
GPR[SPVAP]-1658596921116
GPR[EPVAP]-1658596922195
GPR[EPVS]-1658596922195
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(((sig>>FLAG_UNDERFLOW)&1)==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596922196
GPR[SPVAP]-1658596922196
GPR[EPVAP]-1658596924130
GPR[SPVATF]-1658596924130
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596926087
GPR[EPVS]-1658596926087
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(j==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596926088
GPR[SPVAP]-1658596926088
GPR[EPVAP]-1658596927127
GPR[EPVS]-1658596927127
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=j;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596927128
GPR[SPVAP]-1658596927128
GPR[EPVAP]-1658596928173
GPR[EPVS]-1658596928173
========
for(int i=0;i<buf.length;i++){
if(sp>=Wmax){
++FLAG_UNDERFLOW;
}
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596928175
GPR[SPVAP]-1658596928175
GPR[EPVAP]-1658596929209
GPR[EPVS]-1658596929209
========
for(int i=0;i<diagonal.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596929210
GPR[SPVAP]-1658596929210
GPR[EPVAP]-1658596930250
GPR[EPVS]-1658596930250
========
for(int i=radixDigits;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596930252
GPR[SPVAP]-1658596930252
GPR[EPVAP]-1658596932163
GPR[SPVATF]-1658596932163
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596934113
GPR[EPVS]-1658596934113
========
for(int i=0;j<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596934115
GPR[SPVAP]-1658596934115
GPR[EPVAP]-1658596935165
GPR[EPVS]-1658596935165
========
for(int i=radixDigits;i<length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596935166
GPR[SPVAP]-1658596935166
GPR[EPVAP]-1658596936206
GPR[EPVS]-1658596936206
========
for(int i=0;i<buf.length;i++){
list[i]=sp;
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596936210
GPR[SPVAP]-1658596936210
GPR[EPVAP]-1658596937259
GPR[EPVS]-1658596937259
========
if(sig<=0){
throw new NoDataException(LocalizedFormats.INSUFFICIENT_DIMENSION);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596937260
GPR[SPVAP]-1658596937260
GPR[EPVAP]-1658596938319
GPR[EPVS]-1658596938319
========
for(int i=0;i<simplex.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596938321
GPR[SPVAP]-1658596938321
GPR[EPVAP]-1658596939365
GPR[EPVS]-1658596939365
========
for(int i=0;i<rawData.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596939367
GPR[SPVAP]-1658596939367
GPR[EPVAP]-1658596940419
GPR[EPVS]-1658596940419
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig!=(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596940420
GPR[SPVAP]-1658596940420
GPR[EPVAP]-1658596942330
GPR[SPVATF]-1658596942330
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596944290
GPR[EPVS]-1658596944290
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(length==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596944292
GPR[SPVAP]-1658596944292
GPR[EPVAP]-1658596945345
GPR[EPVS]-1658596945345
========
default :

for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596945350
GPR[SPVAP]-1658596945350
GPR[EPVAP]-1658596946306
GPR[EPVS]-1658596946306
========
for(int i=0;i<buf.length;i++){
res[index]=(double)sig/radixDigits;
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596946308
GPR[SPVAP]-1658596946308
GPR[EPVAP]-1658596947348
GPR[EPVS]-1658596947348
========
for(int i=0;i<scale.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596947349
GPR[SPVAP]-1658596947349
GPR[EPVAP]-1658596948374
GPR[EPVS]-1658596948374
========
for(int i=0;i<newPols.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596948376
GPR[SPVAP]-1658596948377
GPR[EPVAP]-1658596949414
GPR[EPVS]-1658596949414
========
for(int i=0;i<sig;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&i<radixDigits){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596949417
GPR[SPVAP]-1658596949417
GPR[EPVAP]-1658596951347
GPR[SPVATF]-1658596951347
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596953320
GPR[EPVS]-1658596953320
========
for(int i=0;i<p.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596953322
GPR[SPVAP]-1658596953322
GPR[EPVAP]-1658596954366
GPR[EPVS]-1658596954366
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(difference==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596954368
GPR[SPVAP]-1658596954368
GPR[EPVAP]-1658596955402
GPR[EPVS]-1658596955402
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(size==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596955403
GPR[SPVAP]-1658596955403
GPR[EPVAP]-1658596956435
GPR[EPVS]-1658596956435
========
FLAG_UNDERFLOW=1;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596956438
GPR[SPVAP]-1658596956438
GPR[EPVAP]-1658596957465
GPR[EPVS]-1658596957465
========
for(int i=sig;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596957467
GPR[SPVAP]-1658596957467
GPR[EPVAP]-1658596959381
GPR[SPVATF]-1658596959381
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596961337
GPR[EPVS]-1658596961337
========
for(int i=sig;i<radixDigits;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596961338
GPR[SPVAP]-1658596961338
GPR[EPVAP]-1658596963226
GPR[SPVATF]-1658596963226
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596965176
GPR[EPVS]-1658596965176
========
for(int i=0;i<p.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(difference==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596965178
GPR[SPVAP]-1658596965178
GPR[EPVAP]-1658596966218
GPR[EPVS]-1658596966218
========
for(int i=0;i<p.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(size==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596966219
GPR[SPVAP]-1658596966219
GPR[EPVAP]-1658596967265
GPR[EPVS]-1658596967265
========
for(int i=FLAG_UNDERFLOW;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596967268
GPR[SPVAP]-1658596967268
GPR[EPVAP]-1658596969191
GPR[SPVATF]-1658596969191
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596971168
GPR[EPVS]-1658596971168
========
for(int i=FLAG_UNDERFLOW;i<sig;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596971169
GPR[SPVAP]-1658596971169
GPR[EPVAP]-1658596973068
GPR[SPVATF]-1658596973068
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596975050
GPR[EPVS]-1658596975050
========
sp=0;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596975052
GPR[SPVAP]-1658596975052
GPR[EPVAP]-1658596976977
GPR[SPVATF]-1658596976977
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596978939
GPR[EPVS]-1658596978939
========
if(i<0){
i=-i-2;
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596978941
GPR[SPVAP]-1658596978941
GPR[EPVAP]-1658596979975
GPR[EPVS]-1658596979975
========
if(i>=polynomials.length){
i--;
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596979976
GPR[SPVAP]-1658596979976
GPR[EPVAP]-1658596981024
GPR[EPVS]-1658596981024
========
for(int i=0;i<sig+radixDigits;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596981026
GPR[SPVAP]-1658596981026
GPR[EPVAP]-1658596982913
GPR[SPVATF]-1658596982913
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596984952
GPR[EPVS]-1658596984952
========
for(int i=sig;i<sig+radixDigits;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596984953
GPR[SPVAP]-1658596984953
GPR[EPVAP]-1658596986868
GPR[SPVATF]-1658596986868
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596988840
GPR[EPVS]-1658596988840
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(colIndex==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596988843
GPR[SPVAP]-1658596988843
GPR[EPVAP]-1658596989908
GPR[EPVS]-1658596989908
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
coefficients[i]=0;
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596989910
GPR[SPVAP]-1658596989910
GPR[EPVAP]-1658596990961
GPR[EPVS]-1658596990961
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
break;
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596990963
GPR[SPVAP]-1658596990963
GPR[EPVAP]-1658596992016
GPR[EPVS]-1658596992016
========
for(int i=0;i<buf.length;i++){
if(leading){
throw new MathIllegalArgumentException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX,i,sig);
}
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596992017
GPR[SPVAP]-1658596992017
GPR[EPVAP]-1658596993066
GPR[EPVS]-1658596993066
========
for(int i=0;i<main.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596993067
GPR[SPVAP]-1658596993067
GPR[EPVAP]-1658596994104
GPR[EPVS]-1658596994104
========
for(int i=FLAG_UNDERFLOW;i<radixDigits;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596994106
GPR[SPVAP]-1658596994106
GPR[EPVAP]-1658596996018
GPR[SPVATF]-1658596996018
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658596997947
GPR[EPVS]-1658596997947
========
F[0]=new Complex(2*(fft(new Complex[N])[0].getReal()+z[0].getImaginary()),0.0);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596997951
GPR[SPVAP]-1658596997951
GPR[EPVAP]-1658596999034
GPR[EPVS]-1658596999034
========
if(vector.length!=dimensionSize.length){
throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,vector.length,dimensionSize.length);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658596999035
GPR[SPVAP]-1658596999035
GPR[EPVAP]-1658597000069
GPR[EPVS]-1658597000069
========
for(int i=0;i<polynoms.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597000072
GPR[SPVAP]-1658597000072
GPR[EPVAP]-1658597001118
GPR[EPVS]-1658597001118
========
for(int i=0;i<centroid.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597001120
GPR[SPVAP]-1658597001120
GPR[EPVAP]-1658597002170
GPR[EPVS]-1658597002170
========
if(x.length<3){
throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,x.length,3,true);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597002172
GPR[SPVAP]-1658597002172
GPR[EPVAP]-1658597003206
GPR[EPVS]-1658597003206
========
new double[sig][0]=0.0;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597003208
GPR[SPVAP]-1658597003208
GPR[EPVAP]-1658597004252
GPR[EPVS]-1658597004252
========
new double[sig+1][0]=0.0;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597004254
GPR[SPVAP]-1658597004254
GPR[EPVAP]-1658597005300
GPR[EPVS]-1658597005300
========
for(int i=0;i<newCoefficients.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597005303
GPR[SPVAP]-1658597005303
GPR[EPVAP]-1658597006345
GPR[EPVS]-1658597006345
========
for(int i=0;i<buf.length;i++){
buffer[p++]=(char)(((mant[i]/100)%10)+'0');
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597006347
GPR[SPVAP]-1658597006347
GPR[EPVAP]-1658597007389
GPR[EPVS]-1658597007389
========
for(int i=0;i<buf.length;i++){
buffer[p++]=(char)(((mant[i]/10)%10)+'0');
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597007390
GPR[SPVAP]-1658597007390
GPR[EPVAP]-1658597008429
GPR[EPVS]-1658597008429
========
for(int i=0;i<buf.length;i++){
buffer[p++]=(char)(((mant[i])%10)+'0');
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597008431
GPR[SPVAP]-1658597008431
GPR[EPVAP]-1658597009481
GPR[EPVS]-1658597009481
========
for(int i=0;i<buf.length;i++){
if(--e==0){
buffer[p++]='.';
pointInserted=true;
}
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597009482
GPR[SPVAP]-1658597009482
GPR[EPVAP]-1658597010531
GPR[EPVS]-1658597010531
========
for(int i=0;i<buf.length;i++){
buffer[p++]=(char)(((mant[i]/100)%10)+'0');
buffer[p++]=(char)(((mant[i]/10)%10)+'0');
buffer[p++]=(char)(((mant[i])%10)+'0');
if(--e==0){
buffer[p++]='.';
pointInserted=true;
}

buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597010532
GPR[SPVAP]-1658597010532
GPR[EPVAP]-1658597011601
GPR[EPVS]-1658597011601
========
for(int i=0;i<buf.length;i++){
xAug[i][0]=1.0;
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597011604
GPR[SPVAP]-1658597011604
GPR[EPVAP]-1658597012655
GPR[EPVS]-1658597012655
========
FLAG_UNDERFLOW=radixDigits-1+FLAG_UNDERFLOW;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597012658
GPR[SPVAP]-1658597012658
GPR[EPVAP]-1658597013690
GPR[EPVS]-1658597013690
========
FLAG_UNDERFLOW-=i;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597013691
GPR[SPVAP]-1658597013691
GPR[EPVAP]-1658597014728
GPR[EPVS]-1658597014728
========
sp+=i;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597014729
GPR[SPVAP]-1658597014729
GPR[EPVAP]-1658597015770
GPR[EPVS]-1658597015770
========
for(int i=0;i<observed1.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597015774
GPR[SPVAP]-1658597015774
GPR[EPVAP]-1658597016803
GPR[EPVS]-1658597016803
========
for(int i=0;idxStep<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597016805
GPR[SPVAP]-1658597016805
GPR[EPVAP]-1658597017849
GPR[EPVS]-1658597017849
========
for(int i=sig;i<points.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597017850
GPR[SPVAP]-1658597017850
GPR[EPVAP]-1658597018899
GPR[EPVS]-1658597018899
========
for(int i=0;i<buf.length;i++){
out[ranks[i].getPosition()]=sp;
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597018902
GPR[SPVAP]-1658597018902
GPR[EPVAP]-1658597019934
GPR[EPVS]-1658597019934
========
for(int i=0;i<sample.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597019937
GPR[SPVAP]-1658597019937
GPR[EPVAP]-1658597020963
GPR[EPVS]-1658597020963
========
if(radixDigits>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597020966
GPR[SPVAP]-1658597020966
GPR[EPVAP]-1658597022012
GPR[EPVS]-1658597022012
========
if(FLAG_UNDERFLOW==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597022014
GPR[SPVAP]-1658597022014
GPR[EPVAP]-1658597023055
GPR[EPVS]-1658597023055
========
if(radixDigits>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}
if(sig==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597023058
GPR[SPVAP]-1658597023058
GPR[EPVAP]-1658597024106
GPR[EPVS]-1658597024106
========
if(radixDigits>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}
if(FLAG_UNDERFLOW==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597024107
GPR[SPVAP]-1658597024108
GPR[EPVAP]-1658597025165
GPR[EPVS]-1658597025165
========
if(sig==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
if(FLAG_UNDERFLOW==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597025166
GPR[SPVAP]-1658597025166
GPR[EPVAP]-1658597026191
GPR[EPVS]-1658597026191
========
if(radixDigits>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}
if(sig==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
if(FLAG_UNDERFLOW==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597026192
GPR[SPVAP]-1658597026192
GPR[EPVAP]-1658597027233
GPR[EPVS]-1658597027233
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
ys[0]=as[0];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597027235
GPR[SPVAP]-1658597027235
GPR[EPVAP]-1658597028274
GPR[EPVS]-1658597028274
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597028275
GPR[SPVAP]-1658597028275
GPR[EPVAP]-1658597029319
GPR[EPVS]-1658597029319
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597029320
GPR[SPVAP]-1658597029320
GPR[EPVAP]-1658597030356
GPR[EPVS]-1658597030356
========
for(int i=0;i<buf.length;i++){
ys[1]=as[1];
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597030357
GPR[SPVAP]-1658597030357
GPR[EPVAP]-1658597031397
GPR[EPVS]-1658597031397
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597031398
GPR[SPVAP]-1658597031398
GPR[EPVAP]-1658597032451
GPR[EPVS]-1658597032451
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
ys[0]=as[0];
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597032452
GPR[SPVAP]-1658597032452
GPR[EPVAP]-1658597033516
GPR[EPVS]-1658597033516
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
buf[i]=a.charAt(i);
ys[0]=as[0];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597033518
GPR[SPVAP]-1658597033518
GPR[EPVAP]-1658597034568
GPR[EPVS]-1658597034568
========
for(int i=0;i<buf.length;i++){
ys[1]=as[1];
buf[i]=a.charAt(i);
ys[0]=as[0];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597034569
GPR[SPVAP]-1658597034569
GPR[EPVAP]-1658597035612
GPR[EPVS]-1658597035612
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
ys[0]=as[0];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597035613
GPR[SPVAP]-1658597035613
GPR[EPVAP]-1658597036674
GPR[EPVS]-1658597036674
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
buf[i]=a.charAt(i);
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597036675
GPR[SPVAP]-1658597036675
GPR[EPVAP]-1658597037730
GPR[EPVS]-1658597037730
========
for(int i=0;i<buf.length;i++){
ys[1]=as[1];
buf[i]=a.charAt(i);
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597037731
GPR[SPVAP]-1658597037731
GPR[EPVAP]-1658597038775
GPR[EPVS]-1658597038775
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597038776
GPR[SPVAP]-1658597038776
GPR[EPVAP]-1658597039817
GPR[EPVS]-1658597039817
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[1]=as[1];
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597039818
GPR[SPVAP]-1658597039818
GPR[EPVAP]-1658597040863
GPR[EPVS]-1658597040863
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597040864
GPR[SPVAP]-1658597040864
GPR[EPVAP]-1658597041898
GPR[EPVS]-1658597041898
========
for(int i=0;i<buf.length;i++){
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597041899
GPR[SPVAP]-1658597041899
GPR[EPVAP]-1658597042941
GPR[EPVS]-1658597042941
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
buf[i]=a.charAt(i);
ys[0]=as[0];
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597042942
GPR[SPVAP]-1658597042942
GPR[EPVAP]-1658597043987
GPR[EPVS]-1658597043987
========
for(int i=0;i<buf.length;i++){
ys[1]=as[1];
buf[i]=a.charAt(i);
ys[0]=as[0];
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597043988
GPR[SPVAP]-1658597043988
GPR[EPVAP]-1658597045035
GPR[EPVS]-1658597045035
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
ys[0]=as[0];
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597045036
GPR[SPVAP]-1658597045036
GPR[EPVAP]-1658597046082
GPR[EPVS]-1658597046082
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[1]=as[1];
buf[i]=a.charAt(i);
ys[0]=as[0];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597046083
GPR[SPVAP]-1658597046083
GPR[EPVAP]-1658597047120
GPR[EPVS]-1658597047120
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
ys[0]=as[0];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597047121
GPR[SPVAP]-1658597047121
GPR[EPVAP]-1658597048167
GPR[EPVS]-1658597048167
========
for(int i=0;i<buf.length;i++){
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
ys[0]=as[0];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597048168
GPR[SPVAP]-1658597048168
GPR[EPVAP]-1658597049217
GPR[EPVS]-1658597049217
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[1]=as[1];
buf[i]=a.charAt(i);
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597049218
GPR[SPVAP]-1658597049218
GPR[EPVAP]-1658597050271
GPR[EPVS]-1658597050271
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597050272
GPR[SPVAP]-1658597050272
GPR[EPVAP]-1658597051310
GPR[EPVS]-1658597051310
========
for(int i=0;i<buf.length;i++){
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597051311
GPR[SPVAP]-1658597051311
GPR[EPVAP]-1658597052370
GPR[EPVS]-1658597052370
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597052371
GPR[SPVAP]-1658597052371
GPR[EPVAP]-1658597053414
GPR[EPVS]-1658597053414
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[1]=as[1];
buf[i]=a.charAt(i);
ys[0]=as[0];
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597053415
GPR[SPVAP]-1658597053415
GPR[EPVAP]-1658597054469
GPR[EPVS]-1658597054469
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
ys[0]=as[0];
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597054470
GPR[SPVAP]-1658597054470
GPR[EPVAP]-1658597055526
GPR[EPVS]-1658597055526
========
for(int i=0;i<buf.length;i++){
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
ys[0]=as[0];
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597055527
GPR[SPVAP]-1658597055527
GPR[EPVAP]-1658597056572
GPR[EPVS]-1658597056572
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
ys[0]=as[0];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597056574
GPR[SPVAP]-1658597056574
GPR[EPVAP]-1658597057624
GPR[EPVS]-1658597057624
========
for(int i=0;i<buf.length;i++){
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];
ys[0]=as[0];
ys[1]=as[1];

buf[i]=a.charAt(i);
ys[1]=as[1];
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597057625
GPR[SPVAP]-1658597057625
GPR[EPVAP]-1658597058719
GPR[EPVS]-1658597058719
========
for(int i=0;i<buf.length;i++){
rh=sig/RADIX;
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597058721
GPR[SPVAP]-1658597058721
GPR[EPVAP]-1658597059762
GPR[EPVS]-1658597059762
========
if(FLAG_UNDERFLOW==0){
FLAG_UNDERFLOW=radixDigits-1;
continue;
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597059763
GPR[SPVAP]-1658597059763
GPR[EPVAP]-1658597060819
GPR[EPVS]-1658597060819
========
FLAG_UNDERFLOW=minadj/(divisor.mant[mant.length-1]+1);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597060820
GPR[SPVAP]-1658597060820
GPR[EPVAP]-1658597061857
GPR[EPVS]-1658597061857
========
if(FLAG_UNDERFLOW>=2){
sp=radixDigits+minadj;
continue;
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597061859
GPR[SPVAP]-1658597061859
GPR[EPVAP]-1658597062923
GPR[EPVS]-1658597062923
========
leading=false;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597062924
GPR[SPVAP]-1658597062924
GPR[EPVAP]-1658597064846
GPR[SPVATF]-1658597064846
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597066814
GPR[EPVS]-1658597066814
========
FLAG_UNDERFLOW=1;
for(int i=0;i<mant.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597066815
GPR[SPVAP]-1658597066815
GPR[EPVAP]-1658597067854
GPR[EPVS]-1658597067854
========
leading=false;
for(int i=0;i<mant.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597067855
GPR[SPVAP]-1658597067855
GPR[EPVAP]-1658597068898
GPR[EPVS]-1658597068898
========
FLAG_UNDERFLOW=1;
leading=false;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597068900
GPR[SPVAP]-1658597068900
GPR[EPVAP]-1658597069934
GPR[EPVS]-1658597069934
========
FLAG_UNDERFLOW=1;
leading=false;
for(int i=0;i<mant.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597069935
GPR[SPVAP]-1658597069935
GPR[EPVAP]-1658597070968
GPR[EPVS]-1658597070968
========
for(int i=0;i<observed.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597070971
GPR[SPVAP]-1658597070971
GPR[EPVAP]-1658597072015
GPR[EPVS]-1658597072015
========
if(sig<2){
throw new NumberIsTooSmallException(n,2,true);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597072017
GPR[SPVAP]-1658597072017
GPR[EPVAP]-1658597073095
GPR[EPVS]-1658597073095
========
for(int i=0;i<buf.length;i++){
a[i]=divdiff[0];
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597073097
GPR[SPVAP]-1658597073097
GPR[EPVAP]-1658597074159
GPR[EPVS]-1658597074159
========
System.arraycopy((coefficients.length<p.coefficients.length)?p.coefficients:coefficients,sig,new double[radixDigits],lowLength,radixDigits-lowLength);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597074160
GPR[SPVAP]-1658597074160
GPR[EPVAP]-1658597075204
GPR[EPVS]-1658597075204
========
for(int i=0;i<FLAG_UNDERFLOW;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597075207
GPR[SPVAP]-1658597075207
GPR[EPVAP]-1658597077127
GPR[SPVATF]-1658597077127
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597079039
GPR[EPVS]-1658597079039
========
FLAG_UNDERFLOW=size.length;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597079040
GPR[SPVAP]-1658597079040
GPR[EPVAP]-1658597080113
GPR[EPVS]-1658597080113
========
FLAG_UNDERFLOW=FLAG_UNDERFLOW-1;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597080114
GPR[SPVAP]-1658597080114
GPR[EPVAP]-1658597081154
GPR[EPVS]-1658597081154
========
if(FLAG_UNDERFLOW<=0){
throw new NotStrictlyPositiveException(tS);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597081156
GPR[SPVAP]-1658597081156
GPR[EPVAP]-1658597082195
GPR[EPVS]-1658597082195
========
sp=FLAG_UNDERFLOW;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597082196
GPR[SPVAP]-1658597082196
GPR[EPVAP]-1658597084116
GPR[SPVATF]-1658597084116
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597086103
GPR[EPVS]-1658597086103
========
sp=FLAG_UNDERFLOW;
for(int i=0;i<FLAG_UNDERFLOW;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597086105
GPR[SPVAP]-1658597086105
GPR[EPVAP]-1658597088019
GPR[SPVATF]-1658597088019
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597089971
GPR[EPVS]-1658597089971
========
FLAG_UNDERFLOW=0;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597089973
GPR[SPVAP]-1658597089973
GPR[EPVAP]-1658597090997
GPR[EPVS]-1658597090997
========
if(b.length!=sig){
throw new DimensionMismatchException(b.length,m);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597090999
GPR[SPVAP]-1658597090999
GPR[EPVAP]-1658597092054
GPR[EPVS]-1658597092054
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597092056
GPR[SPVAP]-1658597092056
GPR[EPVAP]-1658597093110
GPR[EPVS]-1658597093110
========
this.sp=brightnessExponent;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597093111
GPR[SPVAP]-1658597093111
GPR[EPVAP]-1658597094201
GPR[EPVS]-1658597094201
========
MatrixUtils.checkRowIndex(this,FLAG_UNDERFLOW);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597094202
GPR[SPVAP]-1658597094202
GPR[EPVAP]-1658597095248
GPR[EPVS]-1658597095248
========
MatrixUtils.checkColumnIndex(this,radixDigits);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597095250
GPR[SPVAP]-1658597095250
GPR[EPVAP]-1658597096287
GPR[EPVS]-1658597096287
========
MatrixUtils.checkRowIndex(this,sig+FLAG_UNDERFLOW-1);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597096288
GPR[SPVAP]-1658597096288
GPR[EPVAP]-1658597097390
GPR[EPVS]-1658597097390
========
MatrixUtils.checkColumnIndex(this,FLAG_UNDERFLOW+radixDigits-1);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597097391
GPR[SPVAP]-1658597097391
GPR[EPVAP]-1658597098427
GPR[EPVS]-1658597098427
========
System.arraycopy(new IntDoublePair[ranks.length],0,new IntDoublePair[FLAG_UNDERFLOW],0,FLAG_UNDERFLOW);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597098429
GPR[SPVAP]-1658597098429
GPR[EPVAP]-1658597099498
GPR[EPVS]-1658597099498
========
for(int i=0;i<buf.length;i++){
p=z[j][i];
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597099500
GPR[SPVAP]-1658597099500
GPR[EPVAP]-1658597100537
GPR[EPVS]-1658597100537
========
for(int i=0;j<radixDigits;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597100538
GPR[SPVAP]-1658597100538
GPR[EPVAP]-1658597101584
GPR[EPVS]-1658597101584
========
for(int i=0;i<sums.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597101585
GPR[SPVAP]-1658597101585
GPR[EPVAP]-1658597102643
GPR[EPVS]-1658597102643
========
if(x.length<2){
throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,x.length,2,true);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597102645
GPR[SPVAP]-1658597102645
GPR[EPVAP]-1658597103692
GPR[EPVS]-1658597103692
========
if(f.length==1){
new double[f.length][0]=0.0;
return transformed;
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597103693
GPR[SPVAP]-1658597103693
GPR[EPVAP]-1658597104734
GPR[EPVS]-1658597104734
========
new double[f.length][0]=0.0;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597104735
GPR[SPVAP]-1658597104735
GPR[EPVAP]-1658597105797
GPR[EPVS]-1658597105797
========
for(int i=0;i<after.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597105799
GPR[SPVAP]-1658597105799
GPR[EPVAP]-1658597106844
GPR[EPVS]-1658597106844
========
for(int i=0;i<buf.length;i++){
after[i]+=previous[i]+scaled[i];
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597106845
GPR[SPVAP]-1658597106845
GPR[EPVAP]-1658597107915
GPR[EPVS]-1658597107915
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(fX2==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597107918
GPR[SPVAP]-1658597107918
GPR[EPVAP]-1658597108957
GPR[EPVS]-1658597108957
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(fVal==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597108958
GPR[SPVAP]-1658597108958
GPR[EPVAP]-1658597110005
GPR[EPVS]-1658597110005
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
x=result[0];
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597110007
GPR[SPVAP]-1658597110007
GPR[EPVAP]-1658597111039
GPR[EPVS]-1658597111039
========
for(int i=0;i<buf.length;i++){
e[i]=secondary[i];
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597111041
GPR[SPVAP]-1658597111041
GPR[EPVAP]-1658597112079
GPR[EPVS]-1658597112079
========
e[sig-1]=0.0;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597112080
GPR[SPVAP]-1658597112080
GPR[EPVAP]-1658597113130
GPR[EPVS]-1658597113130
========
if(xval.length!=fval.length){
throw new DimensionMismatchException(xval.length,fval.length);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597113133
GPR[SPVAP]-1658597113133
GPR[EPVAP]-1658597114178
GPR[EPVS]-1658597114178
========
for(int i=0;i<=buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597114180
GPR[SPVAP]-1658597114180
GPR[EPVAP]-1658597116119
GPR[SPVATF]-1658597116119
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597118101
GPR[EPVS]-1658597118101
========
for(int i=0;i<coefficients.length-1;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597118103
GPR[SPVAP]-1658597118103
GPR[EPVAP]-1658597119138
GPR[EPVS]-1658597119138
========
for(int i=0;i<buf.length;i++){
buf[i]=a.sqrt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597119140
GPR[SPVAP]-1658597119140
GPR[EPVAP]-1658597120187
GPR[EPVS]-1658597120187
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]!='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597120189
GPR[SPVAP]-1658597120189
GPR[EPVAP]-1658597122107
GPR[SPVATF]-1658597122107
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597124080
GPR[EPVS]-1658597124080
========
for(int i=0;i<radixDigits;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]!='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597124081
GPR[SPVAP]-1658597124081
GPR[EPVAP]-1658597126031
GPR[SPVATF]-1658597126031
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597127996
GPR[EPVS]-1658597127996
========
for(int i=FLAG_UNDERFLOW;i<=buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597128005
GPR[SPVAP]-1658597128005
GPR[EPVAP]-1658597129906
GPR[SPVATF]-1658597129906
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597131887
GPR[EPVS]-1658597131887
========
for(int i=FLAG_UNDERFLOW;i<length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597131889
GPR[SPVAP]-1658597131889
GPR[EPVAP]-1658597132938
GPR[EPVS]-1658597132938
========
for(int i=FLAG_UNDERFLOW;k<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597132939
GPR[SPVAP]-1658597132939
GPR[EPVAP]-1658597133983
GPR[EPVS]-1658597133983
========
for(int i=0;i<=length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597133984
GPR[SPVAP]-1658597133984
GPR[EPVAP]-1658597135027
GPR[EPVS]-1658597135027
========
for(int i=0;k<=buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597135029
GPR[SPVAP]-1658597135029
GPR[EPVAP]-1658597136076
GPR[EPVS]-1658597136076
========
for(int i=0;k<length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597136078
GPR[SPVAP]-1658597136078
GPR[EPVAP]-1658597137130
GPR[EPVS]-1658597137130
========
for(int i=FLAG_UNDERFLOW;i<=length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597137131
GPR[SPVAP]-1658597137131
GPR[EPVAP]-1658597138179
GPR[EPVS]-1658597138179
========
for(int i=FLAG_UNDERFLOW;k<=buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597138180
GPR[SPVAP]-1658597138180
GPR[EPVAP]-1658597139226
GPR[EPVS]-1658597139226
========
for(int i=FLAG_UNDERFLOW;k<length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597139227
GPR[SPVAP]-1658597139227
GPR[EPVAP]-1658597140262
GPR[EPVS]-1658597140262
========
for(int i=0;k<=length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597140263
GPR[SPVAP]-1658597140263
GPR[EPVAP]-1658597141313
GPR[EPVS]-1658597141313
========
for(int i=FLAG_UNDERFLOW;k<=length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597141315
GPR[SPVAP]-1658597141315
GPR[EPVAP]-1658597142354
GPR[EPVS]-1658597142354
========
if(leading){
throw new SingularMatrixException();
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597142358
GPR[SPVAP]-1658597142358
GPR[EPVAP]-1658597143386
GPR[EPVS]-1658597143386
========
for(int i=0;i<=FLAG_UNDERFLOW;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597143389
GPR[SPVAP]-1658597143389
GPR[EPVAP]-1658597145287
GPR[SPVATF]-1658597145287
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597147219
GPR[EPVS]-1658597147220
========
for(int i=householderVectors.length;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597147225
GPR[SPVAP]-1658597147225
GPR[EPVAP]-1658597148276
GPR[EPVS]-1658597148276
========
for(int i=0;i<rawdigits.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597148279
GPR[SPVAP]-1658597148279
GPR[EPVAP]-1658597149323
GPR[EPVS]-1658597149323
========
for(int i=0;p<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597149324
GPR[SPVAP]-1658597149324
GPR[EPVAP]-1658597150365
GPR[EPVS]-1658597150365
========
super();
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597150368
GPR[SPVAP]-1658597150368
GPR[EPVAP]-1658597151434
GPR[EPVS]-1658597151434
========
if(v1.length+v2.length==0){
throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597151437
GPR[SPVAP]-1658597151437
GPR[EPVAP]-1658597152505
GPR[EPVS]-1658597152505
========
for(int i=0;i<buf.length;i++){
buffer[p++]='.';
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597152507
GPR[SPVAP]-1658597152507
GPR[EPVAP]-1658597153556
GPR[EPVS]-1658597153556
========
for(int i=0;i<buf.length;i++){
pointInserted=true;
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597153557
GPR[SPVAP]-1658597153557
GPR[EPVAP]-1658597154594
GPR[EPVS]-1658597154594
========
for(int i=0;i<buf.length;i++){
buffer[p++]='.';
pointInserted=true;

buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597154595
GPR[SPVAP]-1658597154595
GPR[EPVAP]-1658597155646
GPR[EPVS]-1658597155646
========
buf[0]=' ';
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597155647
GPR[SPVAP]-1658597155647
GPR[EPVAP]-1658597157583
GPR[SPVATF]-1658597157583
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597159525
GPR[EPVS]-1658597159525
========
for(int i=0;i<interpolator.yDotK.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597159527
GPR[SPVAP]-1658597159527
GPR[EPVAP]-1658597160564
GPR[EPVS]-1658597160564
========
for(int i=0;k<interpolator.yDotK.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597160565
GPR[SPVAP]-1658597160565
GPR[EPVAP]-1658597161605
GPR[EPVS]-1658597161605
========
for(int i=0;r<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597161606
GPR[SPVAP]-1658597161606
GPR[EPVAP]-1658597162651
GPR[EPVS]-1658597162651
========
for(int i=0;r<sig;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597162653
GPR[SPVAP]-1658597162653
GPR[EPVAP]-1658597163692
GPR[EPVS]-1658597163692
========
if(knots.length<2){
throw new NumberIsTooSmallException(LocalizedFormats.NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION,2,knots.length,false);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597163694
GPR[SPVAP]-1658597163694
GPR[EPVAP]-1658597164733
GPR[EPVS]-1658597164733
========
if(knots.length-1!=polynomials.length){
throw new DimensionMismatchException(polynomials.length,knots.length);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597164735
GPR[SPVAP]-1658597164735
GPR[EPVAP]-1658597165766
GPR[EPVS]-1658597165766
========
this.sig=knots.length-1;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597165767
GPR[SPVAP]-1658597165767
GPR[EPVAP]-1658597166822
GPR[EPVS]-1658597166822
========
for(int i=0;i<yDotKLast.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597166824
GPR[SPVAP]-1658597166824
GPR[EPVAP]-1658597167878
GPR[EPVS]-1658597167878
========
for(int i=0;k<v.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597167880
GPR[SPVAP]-1658597167880
GPR[EPVAP]-1658597168922
GPR[EPVS]-1658597168922
========
for(int i=0;k<yDotKLast.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597168924
GPR[SPVAP]-1658597168924
GPR[EPVAP]-1658597169979
GPR[EPVS]-1658597169979
========
for(int i=0;i<yMidDots.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597169981
GPR[SPVAP]-1658597169981
GPR[EPVAP]-1658597171055
GPR[EPVS]-1658597171055
========
for(int i=0;j<yMidDots.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597171056
GPR[SPVAP]-1658597171056
GPR[EPVAP]-1658597172085
GPR[EPVS]-1658597172085
========
for(int i=0;i<sequence.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597172087
GPR[SPVAP]-1658597172087
GPR[EPVAP]-1658597173131
GPR[EPVS]-1658597173131
========
checkRowIndex(FLAG_UNDERFLOW);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597173133
GPR[SPVAP]-1658597173133
GPR[EPVAP]-1658597174193
GPR[EPVS]-1658597174193
========
checkColumnIndex(FLAG_UNDERFLOW);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597174195
GPR[SPVAP]-1658597174195
GPR[EPVAP]-1658597175251
GPR[EPVS]-1658597175251
========
for(int i=0;k<sig;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597175252
GPR[SPVAP]-1658597175252
GPR[EPVAP]-1658597176300
GPR[EPVS]-1658597176300
========
resetTables(FLAG_UNDERFLOW);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597176302
GPR[SPVAP]-1658597176302
GPR[EPVAP]-1658597177359
GPR[EPVS]-1658597177359
========
sig=FLAG_UNDERFLOW;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597177360
GPR[SPVAP]-1658597177360
GPR[EPVAP]-1658597179258
GPR[SPVATF]-1658597179258
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597181232
GPR[EPVS]-1658597181232
========
System.arraycopy(v2.data,0,data,v1.length,v2.data.length);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597181234
GPR[SPVAP]-1658597181234
GPR[EPVAP]-1658597182288
GPR[EPVS]-1658597182288
========
System.arraycopy(v1.data,0,data,0,v1.data.length);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597182289
GPR[SPVAP]-1658597182289
GPR[EPVAP]-1658597183376
GPR[EPVS]-1658597183376
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='\'9\''&&i<radixDigits){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597183378
GPR[SPVAP]-1658597183378
GPR[EPVAP]-1658597184327
GPR[EPVS]-1658597184327
========
for(int i=0;row<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597184329
GPR[SPVAP]-1658597184329
GPR[EPVAP]-1658597185370
GPR[EPVS]-1658597185370
========
System.arraycopy(v2.data,0,data,v1.data.length,v2.data.length);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597185372
GPR[SPVAP]-1658597185372
GPR[EPVAP]-1658597186423
GPR[EPVS]-1658597186423
========
getVT().walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor(){
  /** 
 * {@inheritDoc} 
 */
  @Override public void visit(  final int row,  final int column,  final double value){
    data[row][column]=value / singularValues[row];
  }
}
,0,i-1,0,sig-1);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597186425
GPR[SPVAP]-1658597186425
GPR[EPVAP]-1658597187470
GPR[EPVS]-1658597187470
========
for(int i=0;i<values.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597187473
GPR[SPVAP]-1658597187473
GPR[EPVAP]-1658597188497
GPR[EPVS]-1658597188497
========
for(int i=0;key<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597188498
GPR[SPVAP]-1658597188498
GPR[EPVAP]-1658597189538
GPR[EPVS]-1658597189538
========
sp=values.length;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597189540
GPR[SPVAP]-1658597189540
GPR[EPVAP]-1658597190569
GPR[EPVS]-1658597190569
========
if(x.length!=f.length){
throw new DimensionMismatchException(xLen,f.length);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597190570
GPR[SPVAP]-1658597190570
GPR[EPVAP]-1658597191606
GPR[EPVS]-1658597191606
========
if(x.length!=dFdX.length){
throw new DimensionMismatchException(xLen,dFdX.length);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597191607
GPR[SPVAP]-1658597191607
GPR[EPVAP]-1658597192655
GPR[EPVS]-1658597192655
========
if(x.length!=dFdY.length){
throw new DimensionMismatchException(xLen,dFdY.length);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597192657
GPR[SPVAP]-1658597192657
GPR[EPVAP]-1658597193730
GPR[EPVS]-1658597193730
========
if(x.length!=dFdZ.length){
throw new DimensionMismatchException(xLen,dFdZ.length);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597193732
GPR[SPVAP]-1658597193732
GPR[EPVAP]-1658597194765
GPR[EPVS]-1658597194765
========
if(leading){
return calculateExactPValue(Wmax,N);
}else {
 final double Wmin=((double)(N*(N+1))/2.0)-Wmax;
return calculateAsymptoticPValue(Wmin,N);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597194767
GPR[SPVAP]-1658597194767
GPR[EPVAP]-1658597195824
GPR[EPVS]-1658597195824
========
System.arraycopy(xdfp.mant,0,mant,0,mant.length);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597195827
GPR[SPVAP]-1658597195827
GPR[EPVAP]-1658597196882
GPR[EPVS]-1658597196882
========
sp=xdfp.exp;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597196883
GPR[SPVAP]-1658597196883
GPR[EPVAP]-1658597197938
GPR[EPVS]-1658597197938
========
if(x.length!=d2FdXdY.length){
throw new DimensionMismatchException(xLen,d2FdXdY.length);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597197939
GPR[SPVAP]-1658597197939
GPR[EPVAP]-1658597198968
GPR[EPVS]-1658597198968
========
if(x.length!=f.length){
throw new DimensionMismatchException(xLen,f.length);
}
if(x.length!=dFdX.length){
throw new DimensionMismatchException(xLen,dFdX.length);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597198970
GPR[SPVAP]-1658597198970
GPR[EPVAP]-1658597200050
GPR[EPVS]-1658597200050
========
if(x.length!=f.length){
throw new DimensionMismatchException(xLen,f.length);
}
if(x.length!=dFdY.length){
throw new DimensionMismatchException(xLen,dFdY.length);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597200051
GPR[SPVAP]-1658597200051
GPR[EPVAP]-1658597201128
GPR[EPVS]-1658597201128
========
if(x.length!=dFdX.length){
throw new DimensionMismatchException(xLen,dFdX.length);
}
if(x.length!=dFdY.length){
throw new DimensionMismatchException(xLen,dFdY.length);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597201129
GPR[SPVAP]-1658597201129
GPR[EPVAP]-1658597202181
GPR[EPVS]-1658597202181
========
if(x.length!=f.length){
throw new DimensionMismatchException(xLen,f.length);
}
if(x.length!=dFdX.length){
throw new DimensionMismatchException(xLen,dFdX.length);
}
if(x.length!=dFdY.length){
throw new DimensionMismatchException(xLen,dFdY.length);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597202182
GPR[SPVAP]-1658597202182
GPR[EPVAP]-1658597203252
GPR[EPVS]-1658597203252
========
for(int i=0;key<values.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597203254
GPR[SPVAP]-1658597203254
GPR[EPVAP]-1658597204299
GPR[EPVS]-1658597204299
========
sp=values.length;
for(int i=0;i<values.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597204300
GPR[SPVAP]-1658597204300
GPR[EPVAP]-1658597205337
GPR[EPVS]-1658597205337
========
sp=values.length;
for(int i=0;key<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597205339
GPR[SPVAP]-1658597205339
GPR[EPVAP]-1658597206389
GPR[EPVS]-1658597206389
========
sp=values.length;
for(int i=0;key<values.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597206391
GPR[SPVAP]-1658597206391
GPR[EPVAP]-1658597207449
GPR[EPVS]-1658597207449
========
if(sig==0){
throw new NoDataException();
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597207451
GPR[SPVAP]-1658597207451
GPR[EPVAP]-1658597208511
GPR[EPVS]-1658597208511
========
for(int i=0;minor<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597208512
GPR[SPVAP]-1658597208513
GPR[EPVAP]-1658597209560
GPR[EPVS]-1658597209560
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597209563
GPR[SPVAP]-1658597209563
GPR[EPVAP]-1658597210607
GPR[EPVS]-1658597210607
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597210608
GPR[SPVAP]-1658597210608
GPR[EPVAP]-1658597211643
GPR[EPVS]-1658597211643
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
sig++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597211644
GPR[SPVAP]-1658597211644
GPR[EPVAP]-1658597212701
GPR[EPVS]-1658597212701
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597212702
GPR[SPVAP]-1658597212702
GPR[EPVAP]-1658597213752
GPR[EPVS]-1658597213752
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597213753
GPR[SPVAP]-1658597213753
GPR[EPVAP]-1658597214784
GPR[EPVS]-1658597214784
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597214786
GPR[SPVAP]-1658597214786
GPR[EPVAP]-1658597215832
GPR[EPVS]-1658597215832
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
sig++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597215833
GPR[SPVAP]-1658597215833
GPR[EPVAP]-1658597216876
GPR[EPVS]-1658597216876
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597216877
GPR[SPVAP]-1658597216877
GPR[EPVAP]-1658597217959
GPR[EPVS]-1658597217959
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597217961
GPR[SPVAP]-1658597217961
GPR[EPVAP]-1658597219008
GPR[EPVS]-1658597219008
========
buf[sig]=sqr3String.charAt(i);
sig++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597219009
GPR[SPVAP]-1658597219009
GPR[EPVAP]-1658597220051
GPR[EPVS]-1658597220051
========
buf[sig]=sqr3String.charAt(i);
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597220052
GPR[SPVAP]-1658597220052
GPR[EPVAP]-1658597221100
GPR[EPVS]-1658597221100
========
buf[sig]=sqr3String.charAt(i);
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597221101
GPR[SPVAP]-1658597221101
GPR[EPVAP]-1658597222133
GPR[EPVS]-1658597222133
========
sig++;
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597222134
GPR[SPVAP]-1658597222134
GPR[EPVAP]-1658597223187
GPR[EPVS]-1658597223187
========
sig++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597223188
GPR[SPVAP]-1658597223188
GPR[EPVAP]-1658597224232
GPR[EPVS]-1658597224232
========
i++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597224233
GPR[SPVAP]-1658597224233
GPR[EPVAP]-1658597225292
GPR[EPVS]-1658597225292
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597225294
GPR[SPVAP]-1658597225294
GPR[EPVAP]-1658597226369
GPR[EPVS]-1658597226369
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
sig++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597226370
GPR[SPVAP]-1658597226370
GPR[EPVAP]-1658597227412
GPR[EPVS]-1658597227412
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597227414
GPR[SPVAP]-1658597227414
GPR[EPVAP]-1658597228469
GPR[EPVS]-1658597228469
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597228470
GPR[SPVAP]-1658597228470
GPR[EPVAP]-1658597229534
GPR[EPVS]-1658597229534
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
sig++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597229535
GPR[SPVAP]-1658597229535
GPR[EPVAP]-1658597230582
GPR[EPVS]-1658597230582
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597230584
GPR[SPVAP]-1658597230584
GPR[EPVAP]-1658597231637
GPR[EPVS]-1658597231637
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597231638
GPR[SPVAP]-1658597231638
GPR[EPVAP]-1658597232679
GPR[EPVS]-1658597232679
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
sig++;
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597232680
GPR[SPVAP]-1658597232680
GPR[EPVAP]-1658597233735
GPR[EPVS]-1658597233735
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
sig++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597233737
GPR[SPVAP]-1658597233737
GPR[EPVAP]-1658597234785
GPR[EPVS]-1658597234785
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
i++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597234786
GPR[SPVAP]-1658597234786
GPR[EPVAP]-1658597235818
GPR[EPVS]-1658597235818
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
sig++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597235819
GPR[SPVAP]-1658597235819
GPR[EPVAP]-1658597236886
GPR[EPVS]-1658597236886
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597236888
GPR[SPVAP]-1658597236888
GPR[EPVAP]-1658597237946
GPR[EPVS]-1658597237946
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597237947
GPR[SPVAP]-1658597237947
GPR[EPVAP]-1658597238993
GPR[EPVS]-1658597238993
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
sig++;
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597238994
GPR[SPVAP]-1658597238994
GPR[EPVAP]-1658597240048
GPR[EPVS]-1658597240048
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
sig++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597240049
GPR[SPVAP]-1658597240049
GPR[EPVAP]-1658597241092
GPR[EPVS]-1658597241092
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
i++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597241093
GPR[SPVAP]-1658597241093
GPR[EPVAP]-1658597242153
GPR[EPVS]-1658597242153
========
buf[sig]=sqr3String.charAt(i);
sig++;
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597242155
GPR[SPVAP]-1658597242155
GPR[EPVAP]-1658597243194
GPR[EPVS]-1658597243194
========
buf[sig]=sqr3String.charAt(i);
sig++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597243195
GPR[SPVAP]-1658597243195
GPR[EPVAP]-1658597244240
GPR[EPVS]-1658597244240
========
buf[sig]=sqr3String.charAt(i);
i++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597244242
GPR[SPVAP]-1658597244242
GPR[EPVAP]-1658597245278
GPR[EPVS]-1658597245278
========
sig++;
i++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597245279
GPR[SPVAP]-1658597245279
GPR[EPVAP]-1658597246329
GPR[EPVS]-1658597246329
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
sig++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597246331
GPR[SPVAP]-1658597246331
GPR[EPVAP]-1658597247389
GPR[EPVS]-1658597247389
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597247390
GPR[SPVAP]-1658597247390
GPR[EPVAP]-1658597248431
GPR[EPVS]-1658597248431
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597248433
GPR[SPVAP]-1658597248433
GPR[EPVAP]-1658597249469
GPR[EPVS]-1658597249469
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
sig++;
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597249470
GPR[SPVAP]-1658597249470
GPR[EPVAP]-1658597250509
GPR[EPVS]-1658597250509
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
sig++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597250510
GPR[SPVAP]-1658597250510
GPR[EPVAP]-1658597251551
GPR[EPVS]-1658597251551
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
i++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597251552
GPR[SPVAP]-1658597251552
GPR[EPVAP]-1658597252615
GPR[EPVS]-1658597252615
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
sig++;
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597252616
GPR[SPVAP]-1658597252616
GPR[EPVAP]-1658597253650
GPR[EPVS]-1658597253650
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
sig++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597253652
GPR[SPVAP]-1658597253652
GPR[EPVAP]-1658597254688
GPR[EPVS]-1658597254688
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
i++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597254690
GPR[SPVAP]-1658597254690
GPR[EPVAP]-1658597255724
GPR[EPVS]-1658597255725
========
if(sqr3String.charAt(i)=='.'){
leading=true;
FLAG_UNDERFLOW=FLAG_UNDERFLOW;
p++;
continue;
}
sig++;
i++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597255726
GPR[SPVAP]-1658597255726
GPR[EPVAP]-1658597256766
GPR[EPVS]-1658597256767
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
sig++;
i++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597256767
GPR[SPVAP]-1658597256767
GPR[EPVAP]-1658597257805
GPR[EPVS]-1658597257805
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
sig++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597257806
GPR[SPVAP]-1658597257806
GPR[EPVAP]-1658597258858
GPR[EPVS]-1658597258858
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
buf[sig]=sqr3String.charAt(i);
i++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597258859
GPR[SPVAP]-1658597258859
GPR[EPVAP]-1658597259914
GPR[EPVS]-1658597259914
========
if(sqr3String.charAt(i)<'0'||fpdecimal.charAt(p)>'9'){
p++;
continue;
}
sig++;
i++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597259915
GPR[SPVAP]-1658597259915
GPR[EPVAP]-1658597260930
GPR[EPVS]-1658597260930
========
buf[sig]=sqr3String.charAt(i);
sig++;
i++;
FLAG_UNDERFLOW++;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597260932
GPR[SPVAP]-1658597260932
GPR[EPVAP]-1658597261992
GPR[EPVS]-1658597261992
========
if(!isNonSingular()){
throw new SingularMatrixException();
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597261996
GPR[SPVAP]-1658597261996
GPR[EPVAP]-1658597263033
GPR[EPVS]-1658597263033
========
checkSubMatrixIndex(FLAG_UNDERFLOW,FLAG_UNDERFLOW+subMatrix.length-1,FLAG_UNDERFLOW,radixDigits);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597263035
GPR[SPVAP]-1658597263035
GPR[EPVAP]-1658597264101
GPR[EPVS]-1658597264101
========
MatrixUtils.checkSubMatrixIndex(this,FLAG_UNDERFLOW,FLAG_UNDERFLOW+subMatrix.length-1,FLAG_UNDERFLOW,radixDigits);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597264103
GPR[SPVAP]-1658597264103
GPR[EPVAP]-1658597265147
GPR[EPVS]-1658597265147
========
if(sig>1023){
return leading?Double.NEGATIVE_INFINITY:Double.POSITIVE_INFINITY;
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597265151
GPR[SPVAP]-1658597265151
GPR[EPVAP]-1658597266201
GPR[EPVS]-1658597266201
========
e=y.multiply(newInstance(4503599627370496l)).rint();
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597269059
GPR[SPVAP]-1658597269059
GPR[EPVAP]-1658597270094
GPR[EPVS]-1658597270094
========
sqr3String=str.substring(0,str.length()-1);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597270095
GPR[SPVAP]-1658597270095
GPR[EPVAP]-1658597271137
GPR[EPVS]-1658597271137
========
if(Long.parseLong(e.toString())==4503599627370496L){
mantissa=0;
sig++;
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597271138
GPR[SPVAP]-1658597271138
GPR[EPVAP]-1658597272190
GPR[EPVS]-1658597272190
========
if(sig<=-1023){
exponent--;
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597272192
GPR[SPVAP]-1658597272192
GPR[EPVAP]-1658597273242
GPR[EPVS]-1658597273242
========
if(sig==0){
throw new NoDataException(LocalizedFormats.POLYNOMIAL);
}
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597273244
GPR[SPVAP]-1658597273244
GPR[EPVAP]-1658597274290
GPR[EPVS]-1658597274290
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
this.sp=brightnessExponent;
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597274295
GPR[SPVAP]-1658597274295
GPR[EPVAP]-1658597275333
GPR[EPVS]-1658597275333
========
MathUtils.sortInPlace(new double[x.length],new double[y.length]);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597275336
GPR[SPVAP]-1658597275336
GPR[EPVAP]-1658597276381
GPR[EPVS]-1658597276381
========
verifyInterpolationArray(new double[x.length],new double[y.length],true);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597276382
GPR[SPVAP]-1658597276382
GPR[EPVAP]-1658597277427
GPR[EPVS]-1658597277427
========
for(int i=0;i<rawData.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig!=(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597277429
GPR[SPVAP]-1658597277429
GPR[EPVAP]-1658597278493
GPR[EPVS]-1658597278493
========
for(int i=0;i<rawData.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(length==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597278494
GPR[SPVAP]-1658597278494
GPR[EPVAP]-1658597279537
GPR[EPVS]-1658597279537
========
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(length!=(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597279538
GPR[SPVAP]-1658597279538
GPR[EPVAP]-1658597280586
GPR[EPVS]-1658597280586
========
for(int i=0;i<rawData.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(length!=(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597280587
GPR[SPVAP]-1658597280587
GPR[EPVAP]-1658597281627
GPR[EPVS]-1658597281627
========
resetEvaluations();
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597281632
GPR[SPVAP]-1658597281632
GPR[EPVAP]-1658597282689
GPR[EPVS]-1658597282689
========
new NordsieckStepInterpolator().reinitialize(new double[y0.length],leading);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597282690
GPR[SPVAP]-1658597282690
GPR[EPVAP]-1658597283778
GPR[EPVS]-1658597283778
========
resetEvaluations();
new NordsieckStepInterpolator().reinitialize(new double[y0.length],leading);
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597283780
GPR[SPVAP]-1658597283780
GPR[EPVAP]-1658597284827
GPR[EPVS]-1658597284827
========
new StringBuilder().append('(');
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597284829
GPR[SPVAP]-1658597284829
GPR[EPVAP]-1658597286807
GPR[SPVATF]-1658597286807
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597288728
GPR[EPVS]-1658597288728
========
new StringBuilder().append(')');
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597288729
GPR[SPVAP]-1658597288729
GPR[EPVAP]-1658597290628
GPR[SPVATF]-1658597290628
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597292571
GPR[EPVS]-1658597292571
========
new StringBuilder().append('(');
new StringBuilder().append(')');
for(int i=0;i<buf.length;i++){
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
if(sig==(radixDigits/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!leading){
sig++;
}
}

========
MM Copying to MM
GPR[SPVS]-1658597292573
GPR[SPVAP]-1658597292573
GPR[EPVAP]-1658597294473
GPR[SPVATF]-1658597294473
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597296430
GPR[EPVS]-1658597296430
GPR[ESUN]-1658597296431
GPR[SSUN]-1658597296431
org.apache.commons.math.dfp.DfpField,530
UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

========
if(buf[i]=='.'){
sig+=(400-sig)%4;
leading=false;
}
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597299813
GPR[SPVAP]-1658597299813
GPR[EPVAP]-1658597304910
GPR[SPVATF]-1658597304910
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597306859
GPR[EPVS]-1658597306859
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658597306861
GPR[SPVAP]-1658597306861
GPR[EPVAP]-1658597308814
GPR[SPVATF]-1658597308814
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597310767
GPR[EPVS]-1658597310767
========
buf[i]=a.charAt(i);
if(sqr3String.charAt(i)>='0'&&sqr3String.charAt(i)<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597310769
GPR[SPVAP]-1658597310769
GPR[EPVAP]-1658597312686
GPR[SPVATF]-1658597312686
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597314667
GPR[EPVS]-1658597314667
========
buf[i]=a.charAt(i);
if(sqr3String.charAt(i)>='0'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597314668
GPR[SPVAP]-1658597314668
GPR[EPVAP]-1658597316581
GPR[SPVATF]-1658597316581
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597318583
GPR[EPVS]-1658597318583
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&sqr3String.charAt(i)<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597318585
GPR[SPVAP]-1658597318585
GPR[EPVAP]-1658597320509
GPR[SPVATF]-1658597320509
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597322514
GPR[EPVS]-1658597322514
========
buf[i]=a.charAt(i);
if(buf[i]>='0'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597322516
GPR[SPVAP]-1658597322516
GPR[EPVAP]-1658597324413
GPR[SPVATF]-1658597324413
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597326399
GPR[EPVS]-1658597326399
========
buf[i]=a.charAt(i);
if(buf[i]>='\'0\''&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597326400
GPR[SPVAP]-1658597326400
GPR[EPVAP]-1658597327374
GPR[EPVS]-1658597327374
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
continue;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597327375
GPR[SPVAP]-1658597327375
GPR[EPVAP]-1658597328411
GPR[EPVS]-1658597328411
========
buf[i]=a.charAt(i);
if(sqr3String.charAt(i)>='0'&&sqr3String.charAt(i)<='9'){
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658597328412
GPR[SPVAP]-1658597328412
GPR[EPVAP]-1658597330362
GPR[SPVATF]-1658597330362
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597332326
GPR[EPVS]-1658597332326
========
buf[i]=a.charAt(i);
if(sqr3String.charAt(i)>='0'&&buf[i]<='9'){
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658597332327
GPR[SPVAP]-1658597332327
GPR[EPVAP]-1658597334225
GPR[SPVATF]-1658597334225
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597336165
GPR[EPVS]-1658597336165
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&sqr3String.charAt(i)<='9'){
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658597336167
GPR[SPVAP]-1658597336167
GPR[EPVAP]-1658597338101
GPR[SPVATF]-1658597338101
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597340062
GPR[EPVS]-1658597340062
========
buf[i]=a.charAt(i);
if(buf[i]>='0'&&buf[i]<='9'){
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658597340063
GPR[SPVAP]-1658597340063
GPR[EPVAP]-1658597341971
GPR[SPVATF]-1658597341971
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597343935
GPR[EPVS]-1658597343935
========
buf[i]=a.charAt(i);
if(buf[i]>='0'&&sqr3String.charAt(i)<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597343937
GPR[SPVAP]-1658597343937
GPR[EPVAP]-1658597345827
GPR[SPVATF]-1658597345827
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597347826
GPR[EPVS]-1658597347826
========
buf[i]=a.charAt(i);
if(buf[i]>='0'&&sqr3String.charAt(i)<='9'){
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658597347827
GPR[SPVAP]-1658597347827
GPR[EPVAP]-1658597349727
GPR[SPVATF]-1658597349727
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597351687
GPR[EPVS]-1658597351687
========
buf[i]=fpdecimal.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597351689
GPR[SPVAP]-1658597351689
GPR[EPVAP]-1658597352734
GPR[EPVS]-1658597352734
========
sig++;
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597352735
GPR[SPVAP]-1658597352735
GPR[EPVAP]-1658597354662
GPR[SPVATF]-1658597354662
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597356600
GPR[EPVS]-1658597356600
========
sig++;
buf[i]=a.charAt(i);
if(buf[i]>='\'0\''&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597356602
GPR[SPVAP]-1658597356602
GPR[EPVAP]-1658597357548
GPR[EPVS]-1658597357548
========
result[0]=new Dfp(this,new String(buf,0,sp));
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597357550
GPR[SPVAP]-1658597357550
GPR[EPVAP]-1658597359443
GPR[SPVATF]-1658597359443
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597361382
GPR[EPVS]-1658597361382
========
buf[i]=a.charAt(i);
if(a.charAt(i)>='1'&&a.charAt(i)<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597361384
GPR[SPVAP]-1658597361384
GPR[EPVAP]-1658597363277
GPR[SPVATF]-1658597363277
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597365236
GPR[EPVS]-1658597365236
========
buf[i]=a.charAt(i);
if(a.charAt(i)>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597365237
GPR[SPVAP]-1658597365237
GPR[EPVAP]-1658597367161
GPR[SPVATF]-1658597367161
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597369106
GPR[EPVS]-1658597369106
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&a.charAt(i)<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597369107
GPR[SPVAP]-1658597369107
GPR[EPVAP]-1658597371019
GPR[SPVATF]-1658597371019
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597372983
GPR[EPVS]-1658597372983
========
buf[i]=a.charAt(i);
if(buf[i]>='\'9\''&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597372985
GPR[SPVAP]-1658597372985
GPR[EPVAP]-1658597373934
GPR[EPVS]-1658597373934
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
decimalPos=radixDigits;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597373935
GPR[SPVAP]-1658597373935
GPR[EPVAP]-1658597374975
GPR[EPVS]-1658597374975
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
i++;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597374976
GPR[SPVAP]-1658597374976
GPR[EPVAP]-1658597376890
GPR[SPVATF]-1658597376890
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597378826
GPR[EPVS]-1658597378826
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
decimalPos=radixDigits;
i++;
continue;

leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597378827
GPR[SPVAP]-1658597378827
GPR[EPVAP]-1658597379857
GPR[EPVS]-1658597379857
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
i++;
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658597379858
GPR[SPVAP]-1658597379858
GPR[EPVAP]-1658597381768
GPR[SPVATF]-1658597381768
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597383677
GPR[EPVS]-1658597383677
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
continue;
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658597383679
GPR[SPVAP]-1658597383679
GPR[EPVAP]-1658597384730
GPR[EPVS]-1658597384730
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
i++;
continue;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597384731
GPR[SPVAP]-1658597384731
GPR[EPVAP]-1658597385771
GPR[EPVS]-1658597385771
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
i++;
continue;
leading=true;
}

========
MM Copying to MM
GPR[SPVS]-1658597385772
GPR[SPVAP]-1658597385772
GPR[EPVAP]-1658597386811
GPR[EPVS]-1658597386811
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='\'0\''){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597386812
GPR[SPVAP]-1658597386812
GPR[EPVAP]-1658597387765
GPR[EPVS]-1658597387765
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
break;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597387767
GPR[SPVAP]-1658597387767
GPR[EPVAP]-1658597388818
GPR[EPVS]-1658597388818
========
if(sig<0){
return ;
}
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597388821
GPR[SPVAP]-1658597388821
GPR[EPVAP]-1658597389857
GPR[EPVS]-1658597389857
========
buf[i]=a.charAt(i);
i++;
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597389858
GPR[SPVAP]-1658597389858
GPR[EPVAP]-1658597391783
GPR[SPVATF]-1658597391783
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597393751
GPR[EPVS]-1658597393751
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
numElements-=i;
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597393752
GPR[SPVAP]-1658597393752
GPR[EPVAP]-1658597394807
GPR[EPVS]-1658597394807
========
if((sig+i)>internalArray.length){
expandTo(startIndex+i);
}
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597394811
GPR[SPVAP]-1658597394811
GPR[EPVAP]-1658597395854
GPR[EPVS]-1658597395854
========
sig=i;
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597395855
GPR[SPVAP]-1658597395855
GPR[EPVAP]-1658597397770
GPR[SPVATF]-1658597397770
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597399767
GPR[EPVS]-1658597399767
========
buf[i]=a.sqrt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597399771
GPR[SPVAP]-1658597399771
GPR[EPVAP]-1658597400808
GPR[EPVS]-1658597400808
========
if(i<0){
i=-i-2;
}
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597400811
GPR[SPVAP]-1658597400811
GPR[EPVAP]-1658597402715
GPR[SPVATF]-1658597402715
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597404671
GPR[EPVS]-1658597404671
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
p=realEigenvalues[j];
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597404673
GPR[SPVAP]-1658597404673
GPR[EPVAP]-1658597405717
GPR[EPVS]-1658597405717
========
sig-=i;
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597405720
GPR[SPVAP]-1658597405720
GPR[EPVAP]-1658597407604
GPR[SPVATF]-1658597407604
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597409526
GPR[EPVS]-1658597409526
========
sig+=i;
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597409527
GPR[SPVAP]-1658597409527
GPR[EPVAP]-1658597411454
GPR[SPVATF]-1658597411454
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597413387
GPR[EPVS]-1658597413387
========
sig-=i;
sig+=i;
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597413388
GPR[SPVAP]-1658597413388
GPR[EPVAP]-1658597415350
GPR[SPVATF]-1658597415350
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597417295
GPR[EPVS]-1658597417295
========
buf[i]=a.cumulativeProbability(i);
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597417302
GPR[SPVAP]-1658597417302
GPR[EPVAP]-1658597418358
GPR[EPVS]-1658597418358
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
obs1=observed1[i];
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597418360
GPR[SPVAP]-1658597418360
GPR[EPVAP]-1658597419446
GPR[EPVS]-1658597419446
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
obs2=observed2[i];
leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597419447
GPR[SPVAP]-1658597419447
GPR[EPVAP]-1658597420535
GPR[EPVS]-1658597420535
========
buf[i]=a.charAt(i);
if(buf[i]>='1'&&buf[i]<='9'){
obs1=observed1[i];
obs2=observed2[i];

leading=false;
}

========
MM Copying to MM
GPR[SPVS]-1658597420536
GPR[SPVAP]-1658597420536
GPR[EPVAP]-1658597421571
GPR[EPVS]-1658597421571
GPR[ESUN]-1658597421577
GPR[SSUN]-1658597421577
org.apache.commons.math.dfp.DfpField,532
GPR[ESUN]-1658597421961
GPR[SSUN]-1658597421961
org.apache.commons.math.dfp.DfpField,533
GPR[ESUN]-1658597422205
GPR[SSUN]-1658597422205
org.apache.commons.math.dfp.DfpField,536
GPR[ESUN]-1658597422442
GPR[SSUN]-1658597422442
org.apache.commons.math.dfp.DfpField,537
GPR[ESUN]-1658597422693
GPR[SSUN]-1658597422693
org.apache.commons.math.dfp.DfpField,538
GPR[ESUN]-1658597422914
GPR[SSUN]-1658597422914
org.apache.commons.math.dfp.DfpField,541
GPR[ESUN]-1658597423153
GPR[SSUN]-1658597423153
org.apache.commons.math.dfp.DfpField,542
GPR[ESUN]-1658597423403
GPR[SSUN]-1658597423403
org.apache.commons.math.dfp.DfpField,543
GPR[ESUN]-1658597423648
GPR[SSUN]-1658597423648
org.apache.commons.math.dfp.DfpField,546
GPR[ESUN]-1658597423882
GPR[SSUN]-1658597423882
org.apache.commons.math.dfp.DfpField,547
GPR[ESUN]-1658597424114
GPR[SSUN]-1658597424114
org.apache.commons.math.dfp.DfpField,551
UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (MathUserException mue) {
  lastException=mue;
  optima[i]=null;
}

========
if(buf[i]>='0'&&buf[i]<='9'&&buf[i]<='9'){
buf[i]='0';
}

========
MM Copying to MM
GPR[SPVS]-1658597427057
GPR[SPVAP]-1658597427057
GPR[EPVAP]-1658597432181
GPR[SPVATF]-1658597432181
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM:   - org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658597434150
GPR[EPVS]-1658597434150
========
if(buf[i]>='0'&&buf[i]<='9'&&i<sp){
i=1;
buf[i]='0';
}

========
MM Copying to MM
GPR[SPVS]-1658597434152
GPR[SPVAP]-1658597434152
GPR[EPVAP]-1658597436091
GPR[SPVATF]-1658597436091
TESTING : org.apache.commons.math.util.FastMathTest::testMinMaxFloat
MM: Running ant (run.dev.tests)................................................ 
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1658613798213
GPR[EPVS]-1658613798213
========
if(buf[i]>='0'&&buf[i]<='9'&&i<sp){
break;
buf[i]='0';
}

========
End running Math/59 results at /experiment_home///results/SimFix/Math/59/seed_250/
\n\nNode: host-66\n
\n\nDate: Sat 23 Jul 2022 03:03:18 PM PDT\n
Removing checked out dir script/workingdir/SimFix/math/math_59_buggy
GPR[SSLE]-1658613798234
GPR[ESLE]-1658613858240
