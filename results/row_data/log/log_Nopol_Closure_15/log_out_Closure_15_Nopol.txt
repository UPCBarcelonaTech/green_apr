Sleep 1m start
GPR[SSLI]-1659926123031
GPR[ESLI]-1659926183037
Running Nopol Closure 15b with approach: smt
Timezone: America/Los_Angeles
Seed 261
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/15/seed_261/
The file script/workingdir/Nopol/Closure_15 does not exist!
script/workingdir/Nopol/Closure_15
script/workingdir/Nopol/Closure_15
classpath:  script/workingdir/Nopol/Closure_15/build/classes:script/workingdir/Nopol/Closure_15/lib/args4j.jar:script/workingdir/Nopol/Closure_15/lib/guava.jar:script/workingdir/Nopol/Closure_15/lib/json.jar:script/workingdir/Nopol/Closure_15/lib/jsr305.jar:script/workingdir/Nopol/Closure_15/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_15/build/lib/rhino.jar:script/workingdir/Nopol/Closure_15/lib/ant.jar:script/workingdir/Nopol/Closure_15/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_15/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_15/lib/jarjar.jar:script/workingdir/Nopol/Closure_15/lib/junit.jar:script/workingdir/Nopol/Closure_15/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659926202168
GPR[ESLB]-1659926262174
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_15//build/classes:script/workingdir/Nopol/Closure_15//build/test:script/workingdir/Nopol/Closure_15/build/classes:script/workingdir/Nopol/Closure_15/lib/args4j.jar:script/workingdir/Nopol/Closure_15/lib/guava.jar:script/workingdir/Nopol/Closure_15/lib/json.jar:script/workingdir/Nopol/Closure_15/lib/jsr305.jar:script/workingdir/Nopol/Closure_15/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_15/build/lib/rhino.jar:script/workingdir/Nopol/Closure_15/lib/ant.jar:script/workingdir/Nopol/Closure_15/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_15/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_15/lib/jarjar.jar:script/workingdir/Nopol/Closure_15/lib/junit.jar:script/workingdir/Nopol/Closure_15/build/test
Node: host-48
Date init: Sun 07 Aug 2022 07:37:42 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_15/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_15/build/classes/, file:script/workingdir/Nopol/Closure_15/build/test/, file:script/workingdir/Nopol/Closure_15/build/classes/, file:script/workingdir/Nopol/Closure_15/lib/args4j.jar, file:script/workingdir/Nopol/Closure_15/lib/guava.jar, file:script/workingdir/Nopol/Closure_15/lib/json.jar, file:script/workingdir/Nopol/Closure_15/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_15/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_15/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_15/lib/ant.jar, file:script/workingdir/Nopol/Closure_15/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_15/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_15/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_15/lib/junit.jar, file:script/workingdir/Nopol/Closure_15/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_15/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/15/seed_261/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659926267494
GPR[ESUP]-1659926267494
GPR[SFL]-1659926267494
GPR[EFL]-1659926308734
GPR[SFP]-1659926308734
GPR[SSUN]-1659926310502
-283827935
GPR[SPVATF]-1659926310985
GPR[EPVATF]-1659926311022
[48086] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926311023
GPR[SSUN]-1659926311023
-128675625
GPR[SPVATF]-1659926311282
GPR[EPVATF]-1659926311676
GPR[SPS]-1659926311676
[50170] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:371.
GPR[EPS]-1659926313107
GPR[ESUN]-1659926313108
GPR[SSUN]-1659926313108
80988634
GPR[ESUN]-1659926313289
GPR[SSUN]-1659926313289
-1966087783
GPR[ESUN]-1659926313483
GPR[SSUN]-1659926313483
-1966087783
GPR[SPVATF]-1659926313674
GPR[EPVATF]-1659926313701
[50765] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926313702
GPR[SSUN]-1659926313702
-1659631726
GPR[ESUN]-1659926313893
GPR[SSUN]-1659926313893
130004992
GPR[ESUN]-1659926314075
GPR[SSUN]-1659926314075
130004992
GPR[SPVATF]-1659926314251
GPR[EPVATF]-1659926314277
[51340] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926314277
GPR[SSUN]-1659926314277
130004992
GPR[ESUN]-1659926314456
GPR[SSUN]-1659926314456
80988634
GPR[ESUN]-1659926314626
GPR[SSUN]-1659926314626
-1966087783
GPR[SPVATF]-1659926314819
GPR[EPVATF]-1659926314839
[51902] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926314839
GPR[SSUN]-1659926314839
-1966087783
GPR[SPVATF]-1659926315029
GPR[EPVATF]-1659926315049
[52112] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926315049
GPR[SSUN]-1659926315049
890942016
GPR[ESUN]-1659926315247
GPR[SSUN]-1659926315247
890942016
GPR[SPVATF]-1659926315671
GPR[EPVATF]-1659926315690
[52753] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926315690
GPR[SSUN]-1659926315690
890942016
GPR[SPVATF]-1659926315884
GPR[EPVATF]-1659926315904
[52967] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926315904
GPR[EPVATF]-1659926315923
[52986] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926315923
GPR[SSUN]-1659926315923
890942016
GPR[ESUN]-1659926316118
GPR[SSUN]-1659926316118
890942016
GPR[ESUN]-1659926316316
GPR[SSUN]-1659926316316
-1966087783
GPR[ESUN]-1659926316512
GPR[SSUN]-1659926316512
-1966087783
GPR[SPVATF]-1659926316707
GPR[EPVATF]-1659926316726
[53790] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926316727
GPR[EPVATF]-1659926316745
[53809] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926316746
GPR[SSUN]-1659926316746
-1966087783
GPR[ESUN]-1659926316942
GPR[SSUN]-1659926316942
-1966087783
GPR[SPVATF]-1659926317136
GPR[EPVATF]-1659926317157
[54220] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926317157
GPR[EPVATF]-1659926317176
[54239] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926317176
GPR[SSUN]-1659926317176
-1966087783
GPR[ESUN]-1659926317368
GPR[SSUN]-1659926317368
-1966087783
GPR[ESUN]-1659926317557
GPR[SSUN]-1659926317557
-1966087783
GPR[ESUN]-1659926317745
GPR[SSUN]-1659926317745
80988634
GPR[ESUN]-1659926317921
GPR[SSUN]-1659926317921
-128675625
GPR[SPVATF]-1659926320168
GPR[EPVATF]-1659926320522
GPR[SPS]-1659926320522
[58206] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:370.
GPR[EPS]-1659926321143
GPR[SPVATF]-1659926321143
GPR[EPVATF]-1659926321498
GPR[SPS]-1659926321498
GPR[EPS]-1659926340737
GPR[ESUN]-1659926340737
GPR[SSUN]-1659926340737
-128675625
GPR[ESUN]-1659926341089
GPR[SSUN]-1659926341089
-1516948592
GPR[SPVATF]-1659926341275
GPR[EPVATF]-1659926341620
GPR[SPS]-1659926341620
[79193] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:225.
GPR[EPS]-1659926342130
GPR[ESUN]-1659926342130
GPR[SSUN]-1659926342130
1613130706
GPR[ESUN]-1659926342343
GPR[SSUN]-1659926342343
1613130706
GPR[ESUN]-1659926342550
GPR[SSUN]-1659926342550
1613130706
GPR[SPVATF]-1659926342757
GPR[EPVATF]-1659926342927
[79990] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926342927
GPR[SSUN]-1659926342927
234947553
GPR[ESUN]-1659926343122
GPR[SSUN]-1659926343122
234947553
GPR[SPVATF]-1659926343315
GPR[EPVATF]-1659926343331
[80394] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926343332
GPR[EPVATF]-1659926343348
[80411] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926343348
GPR[SSUN]-1659926343348
234947553
GPR[ESUN]-1659926343541
GPR[SSUN]-1659926343541
234947553
GPR[SPVATF]-1659926343730
GPR[EPVATF]-1659926343748
[80811] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926343748
GPR[EPVATF]-1659926343764
[80827] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926343764
GPR[SSUN]-1659926343764
234947553
GPR[SPVATF]-1659926343955
GPR[EPVATF]-1659926343970
[81034] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926343971
GPR[SSUN]-1659926343971
234947553
GPR[ESUN]-1659926344160
GPR[SSUN]-1659926344160
234947553
GPR[ESUN]-1659926344346
GPR[SSUN]-1659926344346
234947553
GPR[SPVATF]-1659926344533
GPR[EPVATF]-1659926344548
[81611] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926344548
GPR[SSUN]-1659926344548
234947553
GPR[SPVATF]-1659926344756
GPR[EPVATF]-1659926344772
[81835] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926344772
GPR[SSUN]-1659926344772
234947553
GPR[SPVATF]-1659926344962
GPR[EPVATF]-1659926344979
[82042] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926344979
GPR[SSUN]-1659926344979
234947553
GPR[ESUN]-1659926345168
GPR[SSUN]-1659926345168
234947553
GPR[ESUN]-1659926345359
GPR[SSUN]-1659926345359
234947553
GPR[SPVATF]-1659926345546
GPR[EPVATF]-1659926345562
[82625] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926345562
GPR[SSUN]-1659926345562
234947553
GPR[SPVATF]-1659926345752
GPR[EPVATF]-1659926345768
[82831] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926345768
GPR[SSUN]-1659926345768
234947553
GPR[ESUN]-1659926345957
GPR[SSUN]-1659926345957
234947553
GPR[SPVATF]-1659926346145
GPR[EPVATF]-1659926346160
[83223] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926346160
GPR[SSUN]-1659926346160
234947553
GPR[SPVATF]-1659926346361
GPR[EPVATF]-1659926346376
[83439] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926346376
GPR[SSUN]-1659926346376
234947553
GPR[ESUN]-1659926346572
GPR[SSUN]-1659926346572
-1516948592
GPR[SPVATF]-1659926346754
GPR[EPVATF]-1659926347101
GPR[SPS]-1659926347101
[85237] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:203.
GPR[EPS]-1659926348174
GPR[ESUN]-1659926348175
GPR[SSUN]-1659926348175
890942016
GPR[SPVATF]-1659926348438
GPR[EPVATF]-1659926348456
[85519] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926348456
GPR[EPVATF]-1659926348473
[85536] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926348473
GPR[SSUN]-1659926348473
890942016
GPR[SPVATF]-1659926348664
GPR[EPVATF]-1659926348682
[85745] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926348682
GPR[SSUN]-1659926348682
890942016
GPR[ESUN]-1659926348870
GPR[SSUN]-1659926348871
890942016
GPR[SPVATF]-1659926349061
GPR[EPVATF]-1659926349079
[86142] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926349079
GPR[SSUN]-1659926349079
890942016
GPR[SPVATF]-1659926349273
GPR[EPVATF]-1659926349291
[86354] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926349291
GPR[EPVATF]-1659926349313
[86376] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926349313
GPR[SSUN]-1659926349313
890942016
GPR[SPVATF]-1659926349498
GPR[EPVATF]-1659926349516
[86579] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926349516
GPR[SSUN]-1659926349516
890942016
GPR[SPVATF]-1659926349706
GPR[EPVATF]-1659926349724
[86787] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926349724
GPR[EPVATF]-1659926349741
[86805] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926349742
GPR[SSUN]-1659926349742
890942016
GPR[ESUN]-1659926349932
GPR[SSUN]-1659926349932
890942016
GPR[SPVATF]-1659926350119
GPR[EPVATF]-1659926350137
[87200] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926350137
GPR[SSUN]-1659926350137
890942016
GPR[SPVATF]-1659926350325
GPR[EPVATF]-1659926350342
[87405] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926350342
GPR[SSUN]-1659926350342
890942016
GPR[SPVATF]-1659926350530
GPR[EPVATF]-1659926350548
[87611] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926350548
GPR[SSUN]-1659926350548
890942016
GPR[ESUN]-1659926350736
GPR[SSUN]-1659926350736
1613130706
GPR[SPVATF]-1659926350951
GPR[EPVATF]-1659926351118
[88181] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926351119
GPR[EPVATF]-1659926351287
[88350] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926351287
GPR[SSUN]-1659926351287
1613130706
GPR[SPVATF]-1659926351493
GPR[EPVATF]-1659926351659
[88722] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926351660
GPR[SSUN]-1659926351660
1613130706
GPR[SPVATF]-1659926351866
GPR[EPVATF]-1659926352036
[89099] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926352036
GPR[EPVATF]-1659926352207
[89270] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926352207
GPR[SSUN]-1659926352207
1187751237
GPR[ESUN]-1659926352489
GPR[SSUN]-1659926352489
-1516948592
GPR[ESUN]-1659926352671
GPR[SSUN]-1659926352671
-1516948592
GPR[SPVATF]-1659926352849
GPR[EPVATF]-1659926353192
GPR[SPS]-1659926353192
[90725] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:206.
GPR[EPS]-1659926353662
GPR[ESUN]-1659926353662
GPR[SSUN]-1659926353662
-1516948592
GPR[ESUN]-1659926353847
GPR[SSUN]-1659926353847
-1516948592
GPR[SPVATF]-1659926354044
GPR[EPVATF]-1659926354385
GPR[SPS]-1659926354385
[91918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:224.
GPR[EPS]-1659926354855
GPR[SPVATF]-1659926354855
GPR[EPVATF]-1659926355201
GPR[SPS]-1659926355201
GPR[EPS]-1659926377645
GPR[ESUN]-1659926377645
GPR[SSUN]-1659926377645
-1516948592
GPR[ESUN]-1659926377843
GPR[SSUN]-1659926377843
-1516948592
GPR[SPVATF]-1659926378025
GPR[EPVATF]-1659926378360
GPR[SPS]-1659926378360
[115881] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:219.
GPR[EPS]-1659926378818
GPR[SPVATF]-1659926378818
GPR[EPVATF]-1659926380605
GPR[SPS]-1659926380605
[118136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:219.
GPR[EPS]-1659926381073
GPR[ESUN]-1659926381073
GPR[SSUN]-1659926381073
-1516948592
GPR[SPVATF]-1659926381270
GPR[EPVATF]-1659926381614
GPR[SPS]-1659926381614
[119142] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:216.
GPR[EPS]-1659926382079
GPR[SPVATF]-1659926382079
GPR[EPVATF]-1659926382429
GPR[SPS]-1659926382429
[119951] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:216.
GPR[EPS]-1659926382888
GPR[ESUN]-1659926382888
GPR[SSUN]-1659926382888
-1516948592
GPR[SPVATF]-1659926383072
GPR[EPVATF]-1659926383435
GPR[SPS]-1659926383435
[121024] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:214.
GPR[EPS]-1659926383961
GPR[ESUN]-1659926383961
GPR[SSUN]-1659926383962
-1516948592
GPR[SPVATF]-1659926384148
GPR[EPVATF]-1659926384511
GPR[SPS]-1659926384511
[122058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:211.
GPR[EPS]-1659926384995
GPR[SPVATF]-1659926384995
GPR[EPVATF]-1659926385336
GPR[SPS]-1659926385336
[122860] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:211.
GPR[EPS]-1659926385797
GPR[ESUN]-1659926385797
GPR[SSUN]-1659926385797
2433571
GPR[SPVATF]-1659926386053
GPR[EPVATF]-1659926386407
GPR[SPS]-1659926386407
[124293] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1459.
GPR[EPS]-1659926387230
GPR[ESUN]-1659926387230
GPR[SSUN]-1659926387230
2433571
GPR[SPVATF]-1659926387495
GPR[EPVATF]-1659926387841
GPR[SPS]-1659926387841
GPR[EPS]-1659926388977
GPR[SPVATR]-1659926388977
[126040] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1430: PRECONDITION node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP
[126547] INFO TestPatch - Running test suite to check the patch "node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP" is working
GPR[EPVATR]-1659926389699
[126762] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659926389699
[126792] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1429,7 +1429,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/15/seed_261/patch_122235_1ts_1659926389729.diff
GPR[ESUN]-1659926389730
GPR[SSUN]-1659926389730
-1516948592
GPR[SPVATF]-1659926389912
GPR[EPVATF]-1659926390268
GPR[SPS]-1659926390268
[127812] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:208.
GPR[EPS]-1659926390749
GPR[ESUN]-1659926390749
GPR[SSUN]-1659926390749
-1516948592
GPR[SPVATF]-1659926390930
GPR[EPVATF]-1659926391270
GPR[SPS]-1659926391270
[129492] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:205.
GPR[EPS]-1659926392429
GPR[SPVATF]-1659926392430
GPR[EPVATF]-1659926392818
GPR[SPS]-1659926392818
[130353] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:205.
GPR[EPS]-1659926393290
GPR[ESUN]-1659926393290
GPR[SSUN]-1659926393290
-1516948592
GPR[SPVATF]-1659926393478
GPR[EPVATF]-1659926393832
GPR[SPS]-1659926393832
[131347] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:201.
GPR[EPS]-1659926394284
GPR[SPVATF]-1659926394284
GPR[EPVATF]-1659926394630
GPR[SPS]-1659926394630
GPR[EPS]-1659926410676
GPR[ESUN]-1659926410676
GPR[SSUN]-1659926410676
-1516948592
GPR[ESUN]-1659926410860
GPR[SSUN]-1659926410860
-1516948592
GPR[SPVATF]-1659926411036
GPR[EPVATF]-1659926411387
GPR[SPS]-1659926411387
[148928] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:124.
GPR[EPS]-1659926411865
GPR[ESUN]-1659926411865
GPR[SSUN]-1659926411865
-1516948592
GPR[ESUN]-1659926412049
GPR[SSUN]-1659926412049
-1516948592
GPR[SPVATF]-1659926412230
GPR[EPVATF]-1659926412575
GPR[SPS]-1659926412575
[150120] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:122.
GPR[EPS]-1659926413057
GPR[ESUN]-1659926413057
GPR[SSUN]-1659926413057
1613130706
GPR[SPVATF]-1659926413269
GPR[EPVATF]-1659926413441
[150504] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926413441
GPR[EPVATF]-1659926413609
[150672] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926413609
GPR[SSUN]-1659926413609
1613130706
GPR[SPVATF]-1659926413818
GPR[EPVATF]-1659926413987
[151050] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926413987
GPR[EPVATF]-1659926414157
[151220] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926414157
GPR[SSUN]-1659926414157
1613130706
GPR[ESUN]-1659926414366
GPR[SSUN]-1659926414366
1613130706
GPR[ESUN]-1659926414572
GPR[SSUN]-1659926414572
1613130706
GPR[ESUN]-1659926414773
GPR[SSUN]-1659926414773
1613130706
GPR[ESUN]-1659926414975
GPR[SSUN]-1659926414975
1613130706
GPR[SPVATF]-1659926415176
GPR[EPVATF]-1659926415377
[152440] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926415378
GPR[EPVATF]-1659926415551
[152614] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926415551
GPR[SSUN]-1659926415551
1613130706
GPR[SPVATF]-1659926415759
GPR[EPVATF]-1659926415930
[152993] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926415931
GPR[SSUN]-1659926415931
1613130706
GPR[ESUN]-1659926416134
GPR[SSUN]-1659926416134
1613130706
GPR[SPVATF]-1659926416343
GPR[EPVATF]-1659926416519
[153582] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926416520
GPR[EPVATF]-1659926416696
[153759] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926416696
GPR[SSUN]-1659926416696
1613130706
GPR[ESUN]-1659926416902
GPR[SSUN]-1659926416902
1613130706
GPR[SPVATF]-1659926417115
GPR[EPVATF]-1659926417288
[154351] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926417288
GPR[EPVATF]-1659926417465
[154528] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926417465
GPR[SSUN]-1659926417465
-1966087783
GPR[ESUN]-1659926417656
GPR[SSUN]-1659926417656
-1966087783
GPR[SPVATF]-1659926417846
GPR[EPVATF]-1659926417868
[154931] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926417868
GPR[EPVATF]-1659926417888
[154951] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926417888
GPR[SSUN]-1659926417888
-1966087783
GPR[SPVATF]-1659926418075
GPR[EPVATF]-1659926418096
[155159] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926418096
GPR[SSUN]-1659926418096
-1966087783
GPR[SPVATF]-1659926418280
GPR[EPVATF]-1659926418302
[155365] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926418302
GPR[EPVATF]-1659926418323
[155386] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926418323
GPR[SSUN]-1659926418323
-1966087783
GPR[SPVATF]-1659926418512
GPR[EPVATF]-1659926418534
[155597] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926418534
GPR[EPVATF]-1659926418556
[155619] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926418556
GPR[SSUN]-1659926418556
-1966087783
GPR[SPVATF]-1659926418746
GPR[EPVATF]-1659926418768
[155831] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926418769
GPR[EPVATF]-1659926418789
[155852] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926418790
GPR[SSUN]-1659926418790
-1966087783
GPR[ESUN]-1659926418974
GPR[SSUN]-1659926418974
-1966087783
GPR[ESUN]-1659926419190
GPR[SSUN]-1659926419190
-1966087783
GPR[SPVATF]-1659926419390
GPR[EPVATF]-1659926419411
[156474] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926419411
GPR[EPVATF]-1659926419433
[156497] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926419434
GPR[SSUN]-1659926419434
-1966087783
GPR[SPVATF]-1659926419616
GPR[EPVATF]-1659926419638
[156702] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926419639
GPR[EPVATF]-1659926419660
[156723] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926419660
GPR[SSUN]-1659926419660
-1966087783
GPR[ESUN]-1659926419845
GPR[SSUN]-1659926419845
-1966087783
GPR[SPVATF]-1659926420022
GPR[EPVATF]-1659926420044
[157107] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926420044
GPR[SSUN]-1659926420044
2433571
GPR[SPVATF]-1659926420309
GPR[EPVATF]-1659926420693
GPR[SPS]-1659926420693
[158399] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1446.
GPR[EPS]-1659926421336
GPR[ESUN]-1659926421336
GPR[SSUN]-1659926421336
-1966087783
GPR[SPVATF]-1659926421531
GPR[EPVATF]-1659926421554
[158617] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926421554
GPR[SSUN]-1659926421554
-1966087783
GPR[ESUN]-1659926421741
GPR[SSUN]-1659926421741
-1966087783
GPR[SPVATF]-1659926421927
GPR[EPVATF]-1659926421949
[159012] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926421949
GPR[SSUN]-1659926421949
-1966087783
GPR[ESUN]-1659926422138
GPR[SSUN]-1659926422138
-1966087783
GPR[ESUN]-1659926422331
GPR[SSUN]-1659926422331
-1966087783
GPR[SPVATF]-1659926422547
GPR[EPVATF]-1659926422568
[159631] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926422568
GPR[SSUN]-1659926422568
-1966087783
GPR[SPVATF]-1659926422753
GPR[EPVATF]-1659926422774
[159838] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926422775
GPR[SSUN]-1659926422775
-128675625
GPR[ESUN]-1659926422997
GPR[SSUN]-1659926422997
-128675625
GPR[SPVATF]-1659926423217
GPR[EPVATF]-1659926423600
GPR[SPS]-1659926423600
[161179] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:397.
GPR[EPS]-1659926424116
GPR[ESUN]-1659926424116
GPR[SSUN]-1659926424116
-128675625
GPR[SPVATF]-1659926424361
GPR[EPVATF]-1659926424713
GPR[SPS]-1659926424713
[162911] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:396.
GPR[EPS]-1659926425848
GPR[ESUN]-1659926425848
GPR[SSUN]-1659926425848
-128675625
GPR[ESUN]-1659926426078
GPR[SSUN]-1659926426078
-1966087783
GPR[SPVATF]-1659926426267
GPR[EPVATF]-1659926426285
[163348] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926426285
GPR[SSUN]-1659926426285
-1119592721
GPR[ESUN]-1659926426508
GPR[SSUN]-1659926426508
2433571
GPR[SPVATF]-1659926426743
GPR[EPVATF]-1659926427194
GPR[SPS]-1659926427194
[164916] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:965.
GPR[EPS]-1659926427853
GPR[ESUN]-1659926427853
GPR[SSUN]-1659926427853
80988634
GPR[ESUN]-1659926428027
GPR[SSUN]-1659926428027
-1966087783
GPR[SPVATF]-1659926428213
GPR[EPVATF]-1659926428230
[165293] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926428230
GPR[SSUN]-1659926428230
-1966087783
GPR[SPVATF]-1659926428419
GPR[EPVATF]-1659926428436
[165499] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926428436
GPR[SSUN]-1659926428436
-1966087783
GPR[SPVATF]-1659926428623
GPR[EPVATF]-1659926428639
[165703] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926428640
GPR[SSUN]-1659926428640
-1966087783
GPR[SPVATF]-1659926428824
GPR[EPVATF]-1659926428841
[165904] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926428841
GPR[SSUN]-1659926428841
-1966087783
GPR[SPVATF]-1659926429028
GPR[EPVATF]-1659926429045
[166108] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926429045
GPR[SSUN]-1659926429045
-1966087783
GPR[SPVATF]-1659926429240
GPR[EPVATF]-1659926429258
[166321] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926429258
GPR[EPVATF]-1659926429275
[166338] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926429275
GPR[SSUN]-1659926429275
-1966087783
GPR[ESUN]-1659926429462
GPR[SSUN]-1659926429462
2433571
GPR[SPVATF]-1659926429695
GPR[EPVATF]-1659926430052
GPR[SPS]-1659926430052
[167734] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:962.
GPR[EPS]-1659926430671
GPR[SPVATF]-1659926430672
GPR[EPVATF]-1659926431018
GPR[SPS]-1659926431018
[168698] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:962.
GPR[EPS]-1659926431635
GPR[ESUN]-1659926431635
GPR[SSUN]-1659926431635
2433571
GPR[SPVATF]-1659926431872
GPR[EPVATF]-1659926432220
GPR[SPS]-1659926432220
[169916] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:958.
GPR[EPS]-1659926432853
GPR[ESUN]-1659926432853
GPR[SSUN]-1659926432853
2433571
GPR[ESUN]-1659926433088
GPR[SSUN]-1659926433088
2433571
GPR[ESUN]-1659926433320
GPR[SSUN]-1659926433320
-675467674
GPR[ESUN]-1659926433495
GPR[SSUN]-1659926433495
-1119592721
GPR[SPVATF]-1659926433718
GPR[EPVATF]-1659926434062
GPR[SPS]-1659926434062
[171657] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:440.
GPR[EPS]-1659926434594
GPR[SPVATF]-1659926434595
GPR[EPVATF]-1659926434941
GPR[SPS]-1659926434941
[172534] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:440.
GPR[EPS]-1659926435471
GPR[ESUN]-1659926435471
GPR[SSUN]-1659926435471
1965452846
GPR[ESUN]-1659926435688
GPR[SSUN]-1659926435688
1965452846
GPR[SPVATF]-1659926435929
GPR[EPVATF]-1659926436280
GPR[SPS]-1659926436280
[173911] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph$AnnotatedLinkedDirectedGraphEdge:578.
GPR[EPS]-1659926436848
GPR[ESUN]-1659926436848
GPR[SSUN]-1659926436848
1965452846
GPR[ESUN]-1659926437062
GPR[SSUN]-1659926437062
-1516948592
GPR[ESUN]-1659926437243
GPR[SSUN]-1659926437243
-1516948592
GPR[ESUN]-1659926437427
GPR[SSUN]-1659926437427
-1516948592
GPR[SPVATF]-1659926437607
GPR[EPVATF]-1659926437961
GPR[SPS]-1659926437961
[175542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:147.
GPR[EPS]-1659926438479
GPR[ESUN]-1659926438479
GPR[SSUN]-1659926438479
-1516948592
GPR[SPVATF]-1659926438661
GPR[EPVATF]-1659926439021
GPR[SPS]-1659926439021
[176552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:146.
GPR[EPS]-1659926439489
GPR[SPVATF]-1659926439489
GPR[EPVATF]-1659926439835
GPR[SPS]-1659926439835
[177387] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:146.
GPR[EPS]-1659926440324
GPR[ESUN]-1659926440324
GPR[SSUN]-1659926440324
-1516948592
GPR[ESUN]-1659926440510
GPR[SSUN]-1659926440510
-1516948592
GPR[SPVATF]-1659926440692
GPR[EPVATF]-1659926441047
GPR[SPS]-1659926441047
[178578] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:142.
GPR[EPS]-1659926441515
GPR[SPVATF]-1659926441516
GPR[EPVATF]-1659926441871
GPR[SPS]-1659926441871
[179396] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:142.
GPR[EPS]-1659926442333
GPR[ESUN]-1659926442333
GPR[SSUN]-1659926442333
1965452846
GPR[ESUN]-1659926442550
GPR[SSUN]-1659926442550
1965452846
GPR[SPVATF]-1659926442764
GPR[EPVATF]-1659926443127
GPR[SPS]-1659926443127
[180810] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:316.
GPR[EPS]-1659926443747
GPR[ESUN]-1659926443747
GPR[SSUN]-1659926443747
-128675625
GPR[SPVATF]-1659926443975
GPR[EPVATF]-1659926444335
GPR[SPS]-1659926444335
[181960] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:418.
GPR[EPS]-1659926444897
GPR[ESUN]-1659926444897
GPR[SSUN]-1659926444897
-1516948592
GPR[ESUN]-1659926445087
GPR[SSUN]-1659926445087
-1516948592
GPR[SPVATF]-1659926445271
GPR[EPVATF]-1659926445633
GPR[SPS]-1659926445633
[183162] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:152.
GPR[EPS]-1659926446099
GPR[ESUN]-1659926446099
GPR[SSUN]-1659926446099
-1516948592
GPR[SPVATF]-1659926446284
GPR[EPVATF]-1659926446659
GPR[SPS]-1659926446659
[184924] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:141.
GPR[EPS]-1659926447861
GPR[ESUN]-1659926447861
GPR[SSUN]-1659926447861
-1516948592
GPR[SPVATF]-1659926448050
GPR[EPVATF]-1659926448538
GPR[SPS]-1659926448538
[186101] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:140.
GPR[EPS]-1659926449038
GPR[ESUN]-1659926449038
GPR[SSUN]-1659926449038
-1516948592
GPR[ESUN]-1659926449342
GPR[SSUN]-1659926449342
-1516948592
GPR[SPVATF]-1659926449521
GPR[EPVATF]-1659926449891
GPR[SPS]-1659926449891
[187405] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:136.
GPR[EPS]-1659926450342
GPR[ESUN]-1659926450342
GPR[SSUN]-1659926450342
-1516948592
GPR[SPVATF]-1659926450527
GPR[EPVATF]-1659926450881
GPR[SPS]-1659926450881
[188398] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:135.
GPR[EPS]-1659926451335
GPR[ESUN]-1659926451335
GPR[SSUN]-1659926451335
-1516948592
GPR[ESUN]-1659926451522
GPR[SSUN]-1659926451522
-1516948592
GPR[SPVATF]-1659926451705
GPR[EPVATF]-1659926452063
GPR[SPS]-1659926452063
[189582] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:131.
GPR[EPS]-1659926452519
GPR[ESUN]-1659926452519
GPR[SSUN]-1659926452519
-1516948592
GPR[SPVATF]-1659926452703
GPR[EPVATF]-1659926453089
GPR[SPS]-1659926453089
[190596] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:130.
GPR[EPS]-1659926453533
GPR[ESUN]-1659926453534
GPR[SSUN]-1659926453534
-1516948592
GPR[SPVATF]-1659926453715
GPR[EPVATF]-1659926454065
GPR[SPS]-1659926454065
[191569] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:129.
GPR[EPS]-1659926454506
GPR[ESUN]-1659926454506
GPR[SSUN]-1659926454506
1965452846
GPR[ESUN]-1659926454718
GPR[SSUN]-1659926454718
1965452846
GPR[ESUN]-1659926454924
GPR[SSUN]-1659926454924
1965452846
GPR[SPVATF]-1659926455135
GPR[EPVATF]-1659926455493
GPR[SPS]-1659926455493
[193091] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:315.
GPR[EPS]-1659926456028
GPR[ESUN]-1659926456028
GPR[SSUN]-1659926456028
1965452846
GPR[SPVATF]-1659926456240
GPR[EPVATF]-1659926456615
GPR[SPS]-1659926456615
[194242] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:314.
GPR[EPS]-1659926457179
GPR[ESUN]-1659926457179
GPR[SSUN]-1659926457179
1965452846
GPR[ESUN]-1659926457394
GPR[SSUN]-1659926457394
-718432441
GPR[SPVATF]-1659926457610
GPR[EPVATF]-1659926457987
GPR[SPS]-1659926457987
[195741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:647.
GPR[EPS]-1659926458678
GPR[ESUN]-1659926458678
GPR[SSUN]-1659926458678
-718432441
GPR[SPVATF]-1659926458892
GPR[EPVATF]-1659926459244
GPR[SPS]-1659926459244
[196969] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:646.
GPR[EPS]-1659926459906
GPR[ESUN]-1659926459906
GPR[SSUN]-1659926459906
-718432441
GPR[SPVATF]-1659926460116
GPR[EPVATF]-1659926460480
GPR[SPS]-1659926460480
[198236] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:645.
GPR[EPS]-1659926461173
GPR[ESUN]-1659926461173
GPR[SSUN]-1659926461173
-718432441
GPR[SPVATF]-1659926461388
GPR[EPVATF]-1659926461750
GPR[SPS]-1659926461750
[199515] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:644.
GPR[EPS]-1659926462452
GPR[ESUN]-1659926462452
GPR[SSUN]-1659926462452
69062959
GPR[ESUN]-1659926462644
GPR[SSUN]-1659926462644
69062959
GPR[ESUN]-1659926462828
GPR[SSUN]-1659926462828
69062959
GPR[ESUN]-1659926463012
GPR[SSUN]-1659926463012
69062959
GPR[SPVATF]-1659926463197
GPR[EPVATF]-1659926463552
GPR[SPS]-1659926463552
[201143] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:350.
GPR[EPS]-1659926464080
GPR[ESUN]-1659926464080
GPR[SSUN]-1659926464080
69062959
GPR[SPVATF]-1659926464268
GPR[EPVATF]-1659926464637
GPR[SPS]-1659926464637
[202219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:349.
GPR[EPS]-1659926465156
GPR[ESUN]-1659926465156
GPR[SSUN]-1659926465156
69062959
GPR[ESUN]-1659926465345
GPR[SSUN]-1659926465345
69062959
GPR[ESUN]-1659926465531
GPR[SSUN]-1659926465531
69062959
GPR[SPVATF]-1659926465717
GPR[EPVATF]-1659926466077
GPR[SPS]-1659926466077
[203617] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:341.
GPR[EPS]-1659926466554
GPR[ESUN]-1659926466554
GPR[SSUN]-1659926466554
69062959
GPR[SPVATF]-1659926466738
GPR[EPVATF]-1659926467102
GPR[SPS]-1659926467102
[204648] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:340.
GPR[EPS]-1659926467585
GPR[ESUN]-1659926467585
GPR[SSUN]-1659926467585
69062959
GPR[SPVATF]-1659926467779
GPR[EPVATF]-1659926468147
GPR[SPS]-1659926468147
[205697] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:339.
GPR[EPS]-1659926468634
GPR[ESUN]-1659926468634
GPR[SSUN]-1659926468634
69062959
GPR[SPVATF]-1659926468823
GPR[EPVATF]-1659926469199
GPR[SPS]-1659926469199
[206728] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:338.
GPR[EPS]-1659926469665
GPR[ESUN]-1659926469665
GPR[SSUN]-1659926469665
69062959
GPR[ESUN]-1659926469851
GPR[SSUN]-1659926469851
69062959
GPR[SPVATF]-1659926470088
GPR[EPVATF]-1659926471196
GPR[SPS]-1659926471196
[208994] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:280.
GPR[EPS]-1659926471931
GPR[ESUN]-1659926471932
GPR[SSUN]-1659926471932
69062959
GPR[SPVATF]-1659926472127
GPR[EPVATF]-1659926472594
GPR[SPS]-1659926472594
[210134] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:278.
GPR[EPS]-1659926473071
GPR[ESUN]-1659926473072
GPR[SSUN]-1659926473072
69062959
GPR[ESUN]-1659926473305
GPR[SSUN]-1659926473305
69062959
GPR[SPVATF]-1659926473488
GPR[EPVATF]-1659926473848
GPR[SPS]-1659926473848
[211370] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:270.
GPR[EPS]-1659926474308
GPR[ESUN]-1659926474308
GPR[SSUN]-1659926474308
69062959
GPR[SPVATF]-1659926474499
GPR[EPVATF]-1659926474856
GPR[SPS]-1659926474856
[212376] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:268.
GPR[EPS]-1659926475313
GPR[ESUN]-1659926475313
GPR[SSUN]-1659926475313
69062959
GPR[SPVATF]-1659926475500
GPR[EPVATF]-1659926475859
GPR[SPS]-1659926475859
[213401] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:267.
GPR[EPS]-1659926476338
GPR[SPVATF]-1659926476338
GPR[EPVATF]-1659926476724
GPR[SPS]-1659926476724
[214246] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:267.
GPR[EPS]-1659926477183
GPR[ESUN]-1659926477183
GPR[SSUN]-1659926477183
69062959
GPR[ESUN]-1659926477367
GPR[SSUN]-1659926477367
69062959
GPR[SPVATF]-1659926477552
GPR[EPVATF]-1659926477904
GPR[SPS]-1659926477904
[215444] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:259.
GPR[EPS]-1659926478381
GPR[ESUN]-1659926478381
GPR[SSUN]-1659926478381
69062959
GPR[SPVATF]-1659926478572
GPR[EPVATF]-1659926478931
GPR[SPS]-1659926478931
[216457] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:257.
GPR[EPS]-1659926479394
GPR[ESUN]-1659926479394
GPR[SSUN]-1659926479394
69062959
GPR[ESUN]-1659926479581
GPR[SSUN]-1659926479581
69062959
GPR[SPVATF]-1659926479765
GPR[EPVATF]-1659926480122
GPR[SPS]-1659926480122
[217710] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:249.
GPR[EPS]-1659926480647
GPR[ESUN]-1659926480647
GPR[SSUN]-1659926480647
69062959
GPR[SPVATF]-1659926480835
GPR[EPVATF]-1659926481188
GPR[SPS]-1659926481188
[218757] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:247.
GPR[EPS]-1659926481694
GPR[ESUN]-1659926481695
GPR[SSUN]-1659926481695
69062959
GPR[SPVATF]-1659926481882
GPR[EPVATF]-1659926482236
GPR[SPS]-1659926482236
[219761] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:246.
GPR[EPS]-1659926482698
GPR[SPVATF]-1659926482698
GPR[EPVATF]-1659926483040
GPR[SPS]-1659926483040
[220561] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:246.
GPR[EPS]-1659926483498
GPR[ESUN]-1659926483498
GPR[SSUN]-1659926483498
-128675625
GPR[ESUN]-1659926483725
GPR[SSUN]-1659926483726
-128675625
GPR[ESUN]-1659926483947
GPR[SSUN]-1659926483947
-128675625
GPR[SPVATF]-1659926484172
GPR[EPVATF]-1659926484524
GPR[SPS]-1659926484524
[222095] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:401.
GPR[EPS]-1659926485032
GPR[ESUN]-1659926485032
GPR[SSUN]-1659926485032
-128675625
GPR[SPVATF]-1659926485254
GPR[EPVATF]-1659926485603
GPR[SPS]-1659926485603
[223172] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:384.
GPR[EPS]-1659926486109
GPR[SPVATF]-1659926486109
GPR[EPVATF]-1659926486459
GPR[SPS]-1659926486459
[224040] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:384.
GPR[EPS]-1659926486977
GPR[ESUN]-1659926486977
GPR[SSUN]-1659926486977
-128675625
GPR[ESUN]-1659926487254
GPR[SSUN]-1659926487254
-128675625
GPR[ESUN]-1659926487476
GPR[SSUN]-1659926487476
-128675625
GPR[ESUN]-1659926487695
GPR[SSUN]-1659926487695
-128675625
GPR[SPVATF]-1659926487918
GPR[EPVATF]-1659926488270
GPR[SPS]-1659926488270
[225851] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:356.
GPR[EPS]-1659926488788
GPR[SPVATF]-1659926488788
GPR[EPVATF]-1659926489196
GPR[SPS]-1659926489196
[226767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:356.
GPR[EPS]-1659926489704
GPR[ESUN]-1659926489704
GPR[SSUN]-1659926489704
-128675625
GPR[SPVATF]-1659926489928
GPR[EPVATF]-1659926490273
GPR[SPS]-1659926490273
[227853] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:148.
GPR[EPS]-1659926490790
GPR[ESUN]-1659926490790
GPR[SSUN]-1659926490790
-1345859678
GPR[ESUN]-1659926491042
GPR[SSUN]-1659926491042
-128675625
GPR[SPVATF]-1659926491274
GPR[EPVATF]-1659926491644
GPR[SPS]-1659926491644
[229245] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:328.
GPR[EPS]-1659926492182
GPR[SPVATF]-1659926492182
GPR[EPVATF]-1659926492613
GPR[SPS]-1659926492613
[230192] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:328.
GPR[EPS]-1659926493129
GPR[ESUN]-1659926493130
GPR[SSUN]-1659926493130
-132053243
GPR[SPVATF]-1659926493322
GPR[EPVATF]-1659926493339
[230403] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926493340
GPR[SSUN]-1659926493340
-132053243
GPR[SPVATF]-1659926493530
GPR[EPVATF]-1659926493547
[230610] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926493548
GPR[SSUN]-1659926493548
-132053243
GPR[SPVATF]-1659926493737
GPR[EPVATF]-1659926493755
[230818] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926493755
GPR[SSUN]-1659926493755
-128675625
GPR[SPVATF]-1659926493976
GPR[EPVATF]-1659926494340
GPR[SPS]-1659926494340
[232716] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:317.
GPR[EPS]-1659926495653
GPR[SPVATF]-1659926495654
GPR[EPVATF]-1659926496110
GPR[SPS]-1659926496110
[233809] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:317.
GPR[EPS]-1659926496746
GPR[ESUN]-1659926496746
GPR[SSUN]-1659926496746
-128675625
GPR[ESUN]-1659926496968
GPR[SSUN]-1659926496968
-128675625
GPR[ESUN]-1659926497190
GPR[SSUN]-1659926497190
-128675625
GPR[SPVATF]-1659926497408
GPR[EPVATF]-1659926497786
GPR[SPS]-1659926497786
[235374] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:310.
GPR[EPS]-1659926498311
GPR[SPVATF]-1659926498311
GPR[EPVATF]-1659926498702
GPR[SPS]-1659926498702
[236270] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:310.
GPR[EPS]-1659926499207
GPR[ESUN]-1659926499207
GPR[SSUN]-1659926499207
-132053243
GPR[SPVATF]-1659926499398
GPR[EPVATF]-1659926499415
[236478] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926499415
GPR[EPVATF]-1659926499432
[236495] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926499432
GPR[SSUN]-1659926499432
-132053243
GPR[ESUN]-1659926499622
GPR[SSUN]-1659926499622
80988634
GPR[ESUN]-1659926499795
GPR[SSUN]-1659926499795
-128675625
GPR[SPVATF]-1659926500017
GPR[EPVATF]-1659926500413
GPR[SPS]-1659926500413
[238003] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:305.
GPR[EPS]-1659926500940
GPR[SPVATF]-1659926500940
GPR[EPVATF]-1659926501300
GPR[SPS]-1659926501300
[238892] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:305.
GPR[EPS]-1659926501829
GPR[ESUN]-1659926501829
GPR[SSUN]-1659926501829
-128675625
GPR[SPVATF]-1659926502050
GPR[EPVATF]-1659926502411
GPR[SPS]-1659926502411
[239979] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:260.
GPR[EPS]-1659926502916
GPR[ESUN]-1659926502917
GPR[SSUN]-1659926502917
-132053243
GPR[ESUN]-1659926503104
GPR[SSUN]-1659926503104
-132053243
GPR[SPVATF]-1659926503288
GPR[EPVATF]-1659926503304
[240367] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926503305
GPR[EPVATF]-1659926503320
[240383] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926503320
GPR[SSUN]-1659926503320
-132053243
GPR[ESUN]-1659926503505
GPR[SSUN]-1659926503505
-132053243
GPR[ESUN]-1659926503688
GPR[SSUN]-1659926503688
-132053243
GPR[ESUN]-1659926503871
GPR[SSUN]-1659926503871
-132053243
GPR[SPVATF]-1659926504055
GPR[EPVATF]-1659926504071
[241134] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926504071
GPR[EPVATF]-1659926504087
[241150] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926504087
GPR[SSUN]-1659926504087
-132053243
GPR[SPVATF]-1659926504274
GPR[EPVATF]-1659926504292
[241355] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926504292
GPR[SSUN]-1659926504292
2433571
GPR[ESUN]-1659926504522
GPR[SSUN]-1659926504522
-128675625
GPR[SPVATF]-1659926504742
GPR[EPVATF]-1659926505102
GPR[SPS]-1659926505102
[242703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:296.
GPR[EPS]-1659926505640
GPR[SPVATF]-1659926505641
GPR[EPVATF]-1659926506007
GPR[SPS]-1659926506007
[243580] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:296.
GPR[EPS]-1659926506517
GPR[ESUN]-1659926506517
GPR[SSUN]-1659926506517
-128675625
GPR[SPVATF]-1659926506743
GPR[EPVATF]-1659926507099
GPR[SPS]-1659926507099
[244719] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:288.
GPR[EPS]-1659926507656
GPR[SPVATF]-1659926507656
GPR[EPVATF]-1659926508022
GPR[SPS]-1659926508022
[245586] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:288.
GPR[EPS]-1659926508523
GPR[ESUN]-1659926508523
GPR[SSUN]-1659926508523
-128675625
GPR[SPVATF]-1659926508748
GPR[EPVATF]-1659926509108
GPR[SPS]-1659926509108
[246792] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:281.
GPR[EPS]-1659926509729
GPR[SPVATF]-1659926509729
GPR[EPVATF]-1659926510125
GPR[SPS]-1659926510125
[247696] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:281.
GPR[EPS]-1659926510633
GPR[ESUN]-1659926510633
GPR[SSUN]-1659926510633
-128675625
GPR[ESUN]-1659926510859
GPR[SSUN]-1659926510859
-128675625
GPR[SPVATF]-1659926511079
GPR[EPVATF]-1659926511447
GPR[SPS]-1659926511447
[249038] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:488.
GPR[EPS]-1659926511975
GPR[ESUN]-1659926511975
GPR[SSUN]-1659926511975
-128675625
GPR[ESUN]-1659926512197
GPR[SSUN]-1659926512197
-128675625
GPR[SPVATF]-1659926512414
GPR[EPVATF]-1659926512785
GPR[SPS]-1659926512785
[250364] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:469.
GPR[EPS]-1659926513301
GPR[ESUN]-1659926513301
GPR[SSUN]-1659926513301
-128675625
GPR[SPVATF]-1659926513579
GPR[EPVATF]-1659926513934
GPR[SPS]-1659926513934
[251513] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:468.
GPR[EPS]-1659926514450
GPR[ESUN]-1659926514450
GPR[SSUN]-1659926514450
-132053243
GPR[SPVATF]-1659926514640
GPR[EPVATF]-1659926514659
[251722] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926514659
GPR[EPVATF]-1659926514678
[251741] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926514678
GPR[SSUN]-1659926514678
GPR[ESUN]-1659926514678
GPR[SSUN]-1659926514678
GPR[ESUN]-1659926514678
GPR[SSUN]-1659926514678
GPR[ESUN]-1659926514678
GPR[SSUN]-1659926514678
GPR[ESUN]-1659926514678
GPR[SSUN]-1659926514678
-1345859678
GPR[ESUN]-1659926514923
GPR[SSUN]-1659926514923
-132053243
GPR[SPVATF]-1659926515112
GPR[EPVATF]-1659926515129
[252192] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926515129
GPR[SSUN]-1659926515129
-132053243
GPR[SPVATF]-1659926515315
GPR[EPVATF]-1659926515333
[252396] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926515333
GPR[SSUN]-1659926515333
-1119592721
GPR[SPVATF]-1659926515557
GPR[EPVATF]-1659926515916
GPR[SPS]-1659926515916
[253502] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:402.
GPR[EPS]-1659926516439
GPR[ESUN]-1659926516439
GPR[SSUN]-1659926516439
-128675625
GPR[ESUN]-1659926516662
GPR[SSUN]-1659926516662
-128675625
GPR[SPVATF]-1659926516882
GPR[EPVATF]-1659926517239
GPR[SPS]-1659926517239
[254821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$4:449.
GPR[EPS]-1659926517758
GPR[ESUN]-1659926517758
GPR[SSUN]-1659926517758
-128675625
GPR[SPVATF]-1659926517988
GPR[EPVATF]-1659926519130
GPR[SPS]-1659926519130
[256895] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$4:445.
GPR[EPS]-1659926519832
GPR[SPVATF]-1659926519832
GPR[EPVATF]-1659926520422
GPR[SPS]-1659926520422
[257974] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$4:445.
GPR[EPS]-1659926520911
GPR[ESUN]-1659926520911
GPR[SSUN]-1659926520911
-128675625
GPR[ESUN]-1659926521132
GPR[SSUN]-1659926521132
-128675625
GPR[ESUN]-1659926521353
GPR[SSUN]-1659926521353
-128675625
GPR[SPVATF]-1659926521575
GPR[EPVATF]-1659926521963
GPR[SPS]-1659926521963
[259538] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:417.
GPR[EPS]-1659926522475
GPR[SPVATF]-1659926522475
GPR[EPVATF]-1659926522851
GPR[SPS]-1659926522851
[260422] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:417.
GPR[EPS]-1659926523359
GPR[ESUN]-1659926523359
GPR[SSUN]-1659926523359
-128675625
GPR[SPVATF]-1659926523588
GPR[EPVATF]-1659926523956
GPR[SPS]-1659926523956
[261526] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:415.
GPR[EPS]-1659926524463
GPR[ESUN]-1659926524463
GPR[SSUN]-1659926524463
-128675625
GPR[ESUN]-1659926524693
GPR[SSUN]-1659926524693
-128675625
GPR[SPVATF]-1659926524923
GPR[EPVATF]-1659926525297
GPR[SPS]-1659926525297
[262922] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:454.
GPR[EPS]-1659926525859
GPR[ESUN]-1659926525859
GPR[SSUN]-1659926525859
-128675625
GPR[ESUN]-1659926526086
GPR[SSUN]-1659926526086
-128675625
GPR[ESUN]-1659926526310
GPR[SSUN]-1659926526310
-128675625
GPR[SPVATF]-1659926526532
GPR[EPVATF]-1659926526932
GPR[SPS]-1659926526932
[264506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:431.
GPR[EPS]-1659926527444
GPR[ESUN]-1659926527444
GPR[SSUN]-1659926527444
-128675625
GPR[ESUN]-1659926527672
GPR[SSUN]-1659926527672
-128675625
GPR[SPVATF]-1659926527899
GPR[EPVATF]-1659926528265
GPR[SPS]-1659926528265
[265883] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:273.
GPR[EPS]-1659926528820
GPR[SPVATF]-1659926528820
GPR[EPVATF]-1659926529191
GPR[SPS]-1659926529191
[266779] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:273.
GPR[EPS]-1659926529716
GPR[ESUN]-1659926529716
GPR[SSUN]-1659926529716
-128675625
GPR[SPVATF]-1659926529945
GPR[EPVATF]-1659926530316
GPR[SPS]-1659926530316
[267903] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:267.
GPR[EPS]-1659926530840
GPR[SPVATF]-1659926530841
GPR[EPVATF]-1659926531202
GPR[SPS]-1659926531202
[268781] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:267.
GPR[EPS]-1659926531718
GPR[ESUN]-1659926531718
GPR[SSUN]-1659926531718
-128675625
GPR[SPVATF]-1659926531943
GPR[EPVATF]-1659926532309
GPR[SPS]-1659926532309
[269936] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:264.
GPR[EPS]-1659926532873
GPR[ESUN]-1659926532873
GPR[SSUN]-1659926532873
-128675625
GPR[SPVATF]-1659926533097
GPR[EPVATF]-1659926533473
GPR[SPS]-1659926533473
[271042] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:263.
GPR[EPS]-1659926533979
GPR[ESUN]-1659926533979
GPR[SSUN]-1659926533979
1616555300
GPR[SPVATF]-1659926534169
GPR[EPVATF]-1659926534538
GPR[SPS]-1659926534538
[272070] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:223.
GPR[EPS]-1659926535007
GPR[ESUN]-1659926535007
GPR[SSUN]-1659926535007
-1765952779
GPR[ESUN]-1659926535222
GPR[SSUN]-1659926535222
-1765952779
GPR[ESUN]-1659926535436
GPR[SSUN]-1659926535436
-1765952779
GPR[SPVATF]-1659926535647
GPR[EPVATF]-1659926536034
GPR[SPS]-1659926536034
[273616] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:281.
GPR[EPS]-1659926536553
GPR[ESUN]-1659926536553
GPR[SSUN]-1659926536553
-1765952779
GPR[ESUN]-1659926536770
GPR[SSUN]-1659926536770
-132053243
GPR[ESUN]-1659926536956
GPR[SSUN]-1659926536956
-132053243
GPR[SPVATF]-1659926537142
GPR[EPVATF]-1659926537160
[274223] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926537161
GPR[EPVATF]-1659926537178
[274241] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926537178
GPR[SSUN]-1659926537178
-132053243
GPR[ESUN]-1659926537364
GPR[SSUN]-1659926537365
80988634
GPR[ESUN]-1659926537541
GPR[SSUN]-1659926537541
-132053243
GPR[SPVATF]-1659926537730
GPR[EPVATF]-1659926537749
[274812] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926537749
GPR[SSUN]-1659926537749
-132053243
GPR[SPVATF]-1659926537940
GPR[EPVATF]-1659926537958
[275021] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926537958
GPR[SSUN]-1659926537958
-132053243
GPR[SPVATF]-1659926538145
GPR[EPVATF]-1659926538164
[275227] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926538164
GPR[SSUN]-1659926538164
-132053243
GPR[SPVATF]-1659926538349
GPR[EPVATF]-1659926538369
[275432] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926538369
GPR[SSUN]-1659926538369
-132053243
GPR[SPVATF]-1659926538553
GPR[EPVATF]-1659926538571
[275634] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926538571
GPR[SSUN]-1659926538571
-132053243
GPR[ESUN]-1659926538756
GPR[SSUN]-1659926538756
2433571
GPR[SPVATF]-1659926539038
GPR[EPVATF]-1659926539417
GPR[SPS]-1659926539417
[277122] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:994.
GPR[EPS]-1659926540059
GPR[ESUN]-1659926540059
GPR[SSUN]-1659926540059
2433571
GPR[SPVATF]-1659926540291
GPR[EPVATF]-1659926540655
GPR[SPS]-1659926540656
[278339] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:993.
GPR[EPS]-1659926541276
GPR[ESUN]-1659926541276
GPR[SSUN]-1659926541276
2433571
GPR[SPVATF]-1659926541511
GPR[EPVATF]-1659926541890
GPR[SPS]-1659926541890
[279549] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(116).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            if (com.google.javascript.rhino.Node.this.last!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.parent!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.next!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.first!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(116).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            value = x.toString();

                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[279549] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659926542486
GPR[SSUN]-1659926542486
2433571
GPR[SPVATF]-1659926542759
GPR[EPVATF]-1659926543135
GPR[SPS]-1659926543135
[280799] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(117).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectionEnds();
                }
                if (runtimeAngelicValue)
                    switch (type) {
                        default :
                            value = x.toString();
                            break;
                    }

                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[280800] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659926543737
GPR[SSUN]-1659926543737
2433571
GPR[SPVATF]-1659926543972
GPR[EPVATF]-1659926544353
GPR[SPS]-1659926544353
[282869] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:986.
GPR[EPS]-1659926545806
GPR[ESUN]-1659926545806
GPR[SSUN]-1659926545806
2433571
GPR[SPVATF]-1659926546046
GPR[EPVATF]-1659926546424
GPR[SPS]-1659926546424
[284418] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:985.
GPR[EPS]-1659926547355
GPR[ESUN]-1659926547355
GPR[SSUN]-1659926547355
2433571
GPR[SPVATF]-1659926547583
GPR[EPVATF]-1659926547977
GPR[SPS]-1659926547977
[285641] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:984.
GPR[EPS]-1659926548579
GPR[ESUN]-1659926548579
GPR[SSUN]-1659926548579
2433571
GPR[ESUN]-1659926548810
GPR[SSUN]-1659926548810
2433571
GPR[ESUN]-1659926549040
GPR[SSUN]-1659926549040
2433571
GPR[SPVATF]-1659926549269
GPR[EPVATF]-1659926549642
GPR[SPS]-1659926549642
[287304] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:975.
GPR[EPS]-1659926550241
GPR[ESUN]-1659926550241
GPR[SSUN]-1659926550241
2433571
GPR[SPVATF]-1659926550472
GPR[EPVATF]-1659926550847
GPR[SPS]-1659926550847
[288512] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:974.
GPR[EPS]-1659926551449
GPR[ESUN]-1659926551449
GPR[SSUN]-1659926551449
2433571
GPR[SPVATF]-1659926551683
GPR[EPVATF]-1659926552076
GPR[SPS]-1659926552076
[289735] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:887.
GPR[EPS]-1659926552672
GPR[ESUN]-1659926552672
GPR[SSUN]-1659926552672
2433571
GPR[SPVATF]-1659926552903
GPR[EPVATF]-1659926553275
GPR[SPS]-1659926553275
[290942] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:886.
GPR[EPS]-1659926553879
GPR[ESUN]-1659926553879
GPR[SSUN]-1659926553879
2433571
GPR[SPVATF]-1659926554111
GPR[EPVATF]-1659926554472
GPR[SPS]-1659926554472
[292135] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:881.
GPR[EPS]-1659926555072
GPR[ESUN]-1659926555072
GPR[SSUN]-1659926555072
2433571
GPR[ESUN]-1659926555303
GPR[SSUN]-1659926555303
2433571
GPR[ESUN]-1659926555526
GPR[SSUN]-1659926555526
2433571
GPR[ESUN]-1659926555751
GPR[SSUN]-1659926555751
881600600
GPR[ESUN]-1659926555943
GPR[SSUN]-1659926555943
-1119592721
GPR[SPVATF]-1659926556161
GPR[EPVATF]-1659926556528
GPR[SPS]-1659926556528
[294120] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:399.
GPR[EPS]-1659926557057
GPR[SPVATF]-1659926557057
GPR[EPVATF]-1659926557420
GPR[SPS]-1659926557420
[295002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:399.
GPR[EPS]-1659926557939
GPR[ESUN]-1659926557939
GPR[SSUN]-1659926557939
-1119592721
GPR[ESUN]-1659926558206
GPR[SSUN]-1659926558206
-1119592721
GPR[ESUN]-1659926558429
GPR[SSUN]-1659926558429
-1966087783
GPR[ESUN]-1659926558614
GPR[SSUN]-1659926558614
-1966087783
GPR[SPVATF]-1659926558797
GPR[EPVATF]-1659926558818
[295881] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926558818
GPR[EPVATF]-1659926558838
[295901] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926558838
GPR[SSUN]-1659926558838
80988634
GPR[ESUN]-1659926559013
GPR[SSUN]-1659926559013
2433571
GPR[SPVATF]-1659926559242
GPR[EPVATF]-1659926559616
GPR[SPS]-1659926559616
[297247] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1038.
GPR[EPS]-1659926560184
GPR[ESUN]-1659926560184
GPR[SSUN]-1659926560184
2433571
GPR[SPVATF]-1659926560418
GPR[EPVATF]-1659926560780
GPR[SPS]-1659926560780
[298422] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1031.
GPR[EPS]-1659926561359
GPR[ESUN]-1659926561359
GPR[SSUN]-1659926561359
2433571
GPR[ESUN]-1659926561593
GPR[SSUN]-1659926561593
2433571
GPR[ESUN]-1659926561828
GPR[SSUN]-1659926561828
2433571
GPR[SPVATF]-1659926562055
GPR[EPVATF]-1659926562424
GPR[SPS]-1659926562424
[300057] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1035.
GPR[EPS]-1659926562994
GPR[ESUN]-1659926562994
GPR[SSUN]-1659926562994
2433571
GPR[SPVATF]-1659926563226
GPR[EPVATF]-1659926563622
GPR[SPS]-1659926563622
[301252] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1034.
GPR[EPS]-1659926564189
GPR[ESUN]-1659926564190
GPR[SSUN]-1659926564190
2433571
GPR[SPVATF]-1659926564422
GPR[EPVATF]-1659926564798
GPR[SPS]-1659926564798
[302468] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1033.
GPR[EPS]-1659926565405
GPR[ESUN]-1659926565405
GPR[SSUN]-1659926565405
2433571
GPR[SPVATF]-1659926565645
GPR[EPVATF]-1659926566012
GPR[SPS]-1659926566012
[303650] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1030.
GPR[EPS]-1659926566587
GPR[ESUN]-1659926566587
GPR[SSUN]-1659926566587
2433571
GPR[ESUN]-1659926566824
GPR[SSUN]-1659926566824
2433571
GPR[SPVATF]-1659926567056
GPR[EPVATF]-1659926567425
GPR[SPS]-1659926567425
[305106] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1025.
GPR[EPS]-1659926568043
GPR[ESUN]-1659926568043
GPR[SSUN]-1659926568043
2433571
GPR[ESUN]-1659926568275
GPR[SSUN]-1659926568275
2433571
GPR[SPVATF]-1659926568507
GPR[EPVATF]-1659926568878
GPR[SPS]-1659926568878
[306566] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1017.
GPR[EPS]-1659926569503
GPR[ESUN]-1659926569503
GPR[SSUN]-1659926569503
2433571
GPR[ESUN]-1659926569855
GPR[SSUN]-1659926569855
2433571
GPR[ESUN]-1659926570084
GPR[SSUN]-1659926570084
80988634
GPR[ESUN]-1659926570257
GPR[SSUN]-1659926570257
2433571
GPR[SPVATF]-1659926570487
GPR[EPVATF]-1659926570884
GPR[SPS]-1659926570884
[308608] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:956.
GPR[EPS]-1659926571545
GPR[ESUN]-1659926571545
GPR[SSUN]-1659926571545
2433571
GPR[SPVATF]-1659926571778
GPR[EPVATF]-1659926572189
GPR[SPS]-1659926572189
[309858] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:955.
GPR[EPS]-1659926572795
GPR[ESUN]-1659926572795
GPR[SSUN]-1659926572795
2433571
GPR[SPVATF]-1659926573027
GPR[EPVATF]-1659926573415
GPR[SPS]-1659926573415
[311097] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:999.
GPR[EPS]-1659926574034
GPR[SPVATF]-1659926574035
GPR[EPVATF]-1659926574430
GPR[SPS]-1659926574430
[312102] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:999.
GPR[EPS]-1659926575039
GPR[ESUN]-1659926575039
GPR[SSUN]-1659926575039
2433571
GPR[SPVATF]-1659926575272
GPR[EPVATF]-1659926575659
GPR[SPS]-1659926575659
[313324] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:981.
GPR[EPS]-1659926576261
GPR[ESUN]-1659926576261
GPR[SSUN]-1659926576261
2433571
GPR[ESUN]-1659926576502
GPR[SSUN]-1659926576502
2433571
GPR[SPVATF]-1659926576731
GPR[EPVATF]-1659926577954
GPR[SPS]-1659926577954
[315629] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659926578566
GPR[SPVATF]-1659926578567
GPR[EPVATF]-1659926579618
GPR[SPS]-1659926579618
[317285] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659926580222
GPR[ESUN]-1659926580222
GPR[SSUN]-1659926580222
2433571
GPR[ESUN]-1659926580451
GPR[SSUN]-1659926580451
2433571
GPR[ESUN]-1659926580683
GPR[SSUN]-1659926580683
2433571
GPR[ESUN]-1659926580908
GPR[SSUN]-1659926580908
2433571
GPR[SPVATF]-1659926581133
GPR[EPVATF]-1659926581559
GPR[SPS]-1659926581559
[319221] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:890.
GPR[EPS]-1659926582158
GPR[ESUN]-1659926582158
GPR[SSUN]-1659926582158
2433571
GPR[SPVATF]-1659926582389
GPR[EPVATF]-1659926582770
GPR[SPS]-1659926582770
[320442] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:885.
GPR[EPS]-1659926583379
GPR[ESUN]-1659926583379
GPR[SSUN]-1659926583380
2433571
GPR[ESUN]-1659926583613
GPR[SSUN]-1659926583613
2433571
GPR[SPVATF]-1659926583842
GPR[EPVATF]-1659926584254
GPR[SPS]-1659926584254
[321920] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:880.
GPR[EPS]-1659926584857
GPR[ESUN]-1659926584857
GPR[SSUN]-1659926584857
2433571
GPR[ESUN]-1659926585116
GPR[SSUN]-1659926585116
-128675625
GPR[SPVATF]-1659926585338
GPR[EPVATF]-1659926585746
GPR[SPS]-1659926585746
[323335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:259.
GPR[EPS]-1659926586272
GPR[SPVATF]-1659926586272
GPR[EPVATF]-1659926586650
GPR[SPS]-1659926586650
[324234] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:259.
GPR[EPS]-1659926587171
GPR[ESUN]-1659926587171
GPR[SSUN]-1659926587171
-1119592721
GPR[ESUN]-1659926587396
GPR[SSUN]-1659926587396
-128675625
GPR[SPVATF]-1659926587619
GPR[EPVATF]-1659926587988
GPR[SPS]-1659926587988
[325563] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:218.
GPR[EPS]-1659926588501
GPR[ESUN]-1659926588501
GPR[SSUN]-1659926588501
-128675625
GPR[ESUN]-1659926588724
GPR[SSUN]-1659926588724
-128675625
GPR[SPVATF]-1659926588942
GPR[EPVATF]-1659926589315
GPR[SPS]-1659926589315
[326883] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:147.
GPR[EPS]-1659926589820
GPR[SPVATF]-1659926589820
GPR[EPVATF]-1659926590187
GPR[SPS]-1659926590187
[327732] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:147.
GPR[EPS]-1659926590669
GPR[ESUN]-1659926590669
GPR[SSUN]-1659926590669
-1765952779
GPR[SPVATF]-1659926590878
GPR[EPVATF]-1659926591256
GPR[SPS]-1659926591256
[328836] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:208.
GPR[EPS]-1659926591773
GPR[ESUN]-1659926591773
GPR[SSUN]-1659926591773
-1765952779
GPR[SPVATF]-1659926591989
GPR[EPVATF]-1659926592364
GPR[SPS]-1659926592364
[329961] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:207.
GPR[EPS]-1659926592898
GPR[SPVATF]-1659926592898
GPR[EPVATF]-1659926593278
GPR[SPS]-1659926593278
[330921] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:207.
GPR[EPS]-1659926593858
GPR[ESUN]-1659926593858
GPR[SSUN]-1659926593858
-1765952779
GPR[SPVATF]-1659926594073
GPR[EPVATF]-1659926594474
GPR[SPS]-1659926594474
[332056] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:206.
GPR[EPS]-1659926594993
GPR[ESUN]-1659926594993
GPR[SSUN]-1659926594993
-1119592721
GPR[SPVATF]-1659926595222
GPR[EPVATF]-1659926595590
GPR[SPS]-1659926595590
[333195] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:439.
GPR[EPS]-1659926596132
GPR[ESUN]-1659926596132
GPR[SSUN]-1659926596132
-1119592721
GPR[SPVATF]-1659926596354
GPR[EPVATF]-1659926596770
GPR[SPS]-1659926596770
[334342] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:273.
GPR[EPS]-1659926597279
GPR[ESUN]-1659926597279
GPR[SSUN]-1659926597279
-1119592721
GPR[SPVATF]-1659926597503
GPR[EPVATF]-1659926597889
GPR[SPS]-1659926597889
[335475] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:272.
GPR[EPS]-1659926598412
GPR[ESUN]-1659926598412
GPR[SSUN]-1659926598412
2433571
GPR[SPVATF]-1659926598642
GPR[EPVATF]-1659926599065
GPR[SPS]-1659926599065
[336742] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:967.
GPR[EPS]-1659926599679
GPR[SPVATF]-1659926599679
GPR[EPVATF]-1659926600069
GPR[SPS]-1659926600069
[337782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:967.
GPR[EPS]-1659926600719
GPR[ESUN]-1659926600719
GPR[SSUN]-1659926600719
-1119592721
GPR[ESUN]-1659926600943
GPR[SSUN]-1659926600943
-1119592721
GPR[SPVATF]-1659926601167
GPR[EPVATF]-1659926601617
GPR[SPS]-1659926601617
[339211] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:435.
GPR[EPS]-1659926602148
GPR[SPVATF]-1659926602148
GPR[EPVATF]-1659926602538
GPR[SPS]-1659926602538
[340132] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:435.
GPR[EPS]-1659926603069
GPR[ESUN]-1659926603069
GPR[SSUN]-1659926603069
-1119592721
GPR[ESUN]-1659926603301
GPR[SSUN]-1659926603301
-1119592721
GPR[ESUN]-1659926603526
GPR[SSUN]-1659926603526
-1119592721
GPR[ESUN]-1659926603746
GPR[SSUN]-1659926603746
-1119592721
GPR[SPVATF]-1659926603968
GPR[EPVATF]-1659926604388
GPR[SPS]-1659926604388
[341980] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:431.
GPR[EPS]-1659926604917
GPR[ESUN]-1659926604917
GPR[SSUN]-1659926604917
-128675625
GPR[SPVATF]-1659926605140
GPR[EPVATF]-1659926605546
GPR[SPS]-1659926605546
[343140] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:205.
GPR[EPS]-1659926606077
GPR[ESUN]-1659926606077
GPR[SSUN]-1659926606077
-1966087783
GPR[SPVATF]-1659926606268
GPR[EPVATF]-1659926606287
[343350] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926606287
GPR[EPVATF]-1659926606305
[343368] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926606305
GPR[SSUN]-1659926606305
-1966087783
GPR[ESUN]-1659926606490
GPR[SSUN]-1659926606490
2433571
GPR[SPVATF]-1659926606750
GPR[EPVATF]-1659926607161
GPR[SPS]-1659926607161
[344826] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659926607763
GPR[SPVATF]-1659926607764
GPR[EPVATF]-1659926608181
GPR[SPS]-1659926608181
[346743] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659926609680
GPR[ESUN]-1659926609680
GPR[SSUN]-1659926609680
80988634
GPR[ESUN]-1659926609859
GPR[SSUN]-1659926609859
-1765952779
GPR[SPVATF]-1659926610074
GPR[EPVATF]-1659926610600
GPR[SPS]-1659926610600
[348223] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:247.
GPR[EPS]-1659926611160
GPR[ESUN]-1659926611160
GPR[SSUN]-1659926611160
2433571
GPR[ESUN]-1659926611399
GPR[SSUN]-1659926611399
2433571
GPR[SPVATF]-1659926611627
GPR[EPVATF]-1659926612129
GPR[SPS]-1659926612129
[349797] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:998.
GPR[EPS]-1659926612734
GPR[SPVATF]-1659926612734
GPR[EPVATF]-1659926613129
GPR[SPS]-1659926613129
[350814] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:998.
GPR[EPS]-1659926613751
GPR[ESUN]-1659926613751
GPR[SSUN]-1659926613751
2433571
GPR[SPVATF]-1659926613984
GPR[EPVATF]-1659926614372
GPR[SPS]-1659926614372
[352052] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659926614989
GPR[SPVATF]-1659926614989
GPR[EPVATF]-1659926615378
GPR[SPS]-1659926615378
[353053] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659926615990
GPR[ESUN]-1659926615990
GPR[SSUN]-1659926615990
2433571
GPR[SPVATF]-1659926616229
GPR[EPVATF]-1659926616610
GPR[SPS]-1659926616610
[354365] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659926617302
GPR[SPVATF]-1659926617302
GPR[EPVATF]-1659926617687
GPR[SPS]-1659926617687
[355365] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659926618302
GPR[ESUN]-1659926618302
GPR[SSUN]-1659926618302
2433571
GPR[SPVATF]-1659926618546
GPR[EPVATF]-1659926618935
GPR[SPS]-1659926618936
[356629] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659926619566
GPR[SPVATF]-1659926619566
GPR[EPVATF]-1659926619968
GPR[SPS]-1659926619968
[357746] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659926620683
GPR[ESUN]-1659926620683
GPR[SSUN]-1659926620683
2433571
GPR[SPVATF]-1659926620921
GPR[EPVATF]-1659926621304
GPR[SPS]-1659926621304
[358982] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:953.
GPR[EPS]-1659926621919
GPR[ESUN]-1659926621919
GPR[SSUN]-1659926621919
2433571
GPR[ESUN]-1659926622149
GPR[SSUN]-1659926622149
2433571
GPR[SPVATF]-1659926622379
GPR[EPVATF]-1659926622806
GPR[SPS]-1659926622806
[360469] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:944.
GPR[EPS]-1659926623406
GPR[ESUN]-1659926623406
GPR[SSUN]-1659926623406
2433571
GPR[ESUN]-1659926623636
GPR[SSUN]-1659926623636
GPR[ESUN]-1659926623637
GPR[SSUN]-1659926623637
-1765952779
GPR[SPVATF]-1659926623847
GPR[EPVATF]-1659926624234
GPR[SPS]-1659926624234
[361871] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:265.
GPR[EPS]-1659926624808
GPR[ESUN]-1659926624808
GPR[SSUN]-1659926624808
-1765952779
GPR[ESUN]-1659926625023
GPR[SSUN]-1659926625023
-1765952779
GPR[SPVATF]-1659926625233
GPR[EPVATF]-1659926625621
GPR[SPS]-1659926625621
[363219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:205.
GPR[EPS]-1659926626156
GPR[SPVATF]-1659926626156
GPR[EPVATF]-1659926626537
GPR[SPS]-1659926626538
[364102] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:205.
GPR[EPS]-1659926627039
GPR[ESUN]-1659926627039
GPR[SSUN]-1659926627039
-1765952779
GPR[SPVATF]-1659926627252
GPR[EPVATF]-1659926627638
GPR[SPS]-1659926627638
[365218] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:203.
GPR[EPS]-1659926628156
GPR[ESUN]-1659926628156
GPR[SSUN]-1659926628156
-1765952779
GPR[ESUN]-1659926628365
GPR[SSUN]-1659926628365
-1765952779
GPR[ESUN]-1659926628574
GPR[SSUN]-1659926628574
-1765952779
GPR[SPVATF]-1659926628784
GPR[EPVATF]-1659926629176
GPR[SPS]-1659926629176
[366754] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:264.
GPR[EPS]-1659926629691
GPR[SPVATF]-1659926629691
GPR[EPVATF]-1659926630075
GPR[SPS]-1659926630075
[367780] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:264.
GPR[EPS]-1659926630717
GPR[ESUN]-1659926630717
GPR[SSUN]-1659926630717
1187751237
GPR[SPVATF]-1659926630988
GPR[EPVATF]-1659926631387
GPR[SPS]-1659926631387
[369146] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1616.
GPR[EPS]-1659926632083
GPR[ESUN]-1659926632083
GPR[SSUN]-1659926632083
-1765952779
GPR[SPVATF]-1659926632294
GPR[EPVATF]-1659926632751
GPR[SPS]-1659926632751
[370339] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:261.
GPR[EPS]-1659926633276
GPR[SPVATF]-1659926633276
GPR[EPVATF]-1659926633675
GPR[SPS]-1659926633675
[371265] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:261.
GPR[EPS]-1659926634202
GPR[ESUN]-1659926634202
GPR[SSUN]-1659926634202
-1765952779
GPR[ESUN]-1659926634417
GPR[SSUN]-1659926634417
-128675625
GPR[SPVATF]-1659926634636
GPR[EPVATF]-1659926635040
GPR[SPS]-1659926635040
[372617] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:216.
GPR[EPS]-1659926635554
GPR[SPVATF]-1659926635554
GPR[EPVATF]-1659926635976
GPR[SPS]-1659926635976
[373545] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:216.
GPR[EPS]-1659926636482
GPR[ESUN]-1659926636482
GPR[SSUN]-1659926636482
-128675625
GPR[ESUN]-1659926636710
GPR[SSUN]-1659926636710
-128675625
GPR[SPVATF]-1659926636931
GPR[EPVATF]-1659926637383
GPR[SPS]-1659926637383
[375038] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:209.
GPR[EPS]-1659926637975
GPR[SPVATF]-1659926637975
GPR[EPVATF]-1659926638389
GPR[SPS]-1659926638389
[375972] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:209.
GPR[EPS]-1659926638909
GPR[ESUN]-1659926638909
GPR[SSUN]-1659926638909
-128675625
GPR[ESUN]-1659926639134
GPR[SSUN]-1659926639134
-1119592721
GPR[SPVATF]-1659926639355
GPR[EPVATF]-1659926639793
GPR[SPS]-1659926639793
[377211] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class MustBeReachingVariableDef extends com.google.javascript.jscomp.DataFlowAnalysis<com.google.javascript.rhino.Node, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> {
    private final com.google.javascript.jscomp.Scope jsScope;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final java.util.Set<com.google.javascript.jscomp.Scope.Var> escaped;

    MustBeReachingVariableDef(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg, com.google.javascript.jscomp.Scope jsScope, com.google.javascript.jscomp.AbstractCompiler compiler) {
        super(cfg, new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDefJoin());
        this.jsScope = jsScope;
        this.compiler = compiler;
        this.escaped = com.google.common.collect.Sets.newHashSet();
        com.google.javascript.jscomp.DataFlowAnalysis.computeEscaped(jsScope, escaped, compiler);
    }

    private static class Definition {
        final com.google.javascript.rhino.Node node;

        final java.util.Set<com.google.javascript.jscomp.Scope.Var> depends = com.google.common.collect.Sets.newHashSet();

        private boolean unknownDependencies = false;

        Definition(com.google.javascript.rhino.Node node) {
            this.node = node;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.MustBeReachingVariableDef.Definition)) {
                return false;
            }
            com.google.javascript.jscomp.MustBeReachingVariableDef.Definition otherDef = ((com.google.javascript.jscomp.MustBeReachingVariableDef.Definition) (other));
            return otherDef.node == node;
        }
    }

    static final class MustDef implements com.google.javascript.jscomp.graph.LatticeElement {
        final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> reachingDef;

        public MustDef() {
            reachingDef = com.google.common.collect.Maps.newHashMap();
        }

        public MustDef(java.util.Iterator<com.google.javascript.jscomp.Scope.Var> vars) {
            this();
            while (vars.hasNext()) {
                com.google.javascript.jscomp.Scope.Var var = vars.next();
                reachingDef.put(var, new com.google.javascript.jscomp.MustBeReachingVariableDef.Definition(var.scope.getRootNode()));
            } 
        }

        public MustDef(com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef other) {
            reachingDef = com.google.common.collect.Maps.newHashMap(other.reachingDef);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            return (other instanceof com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef) && ((com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef) (other)).reachingDef.equals(this.reachingDef);
        }
    }

    private static class MustDefJoin extends com.google.javascript.jscomp.JoinOp.BinaryJoinOp<com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> {
        @java.lang.Override
        public com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef apply(com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef a, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef b) {
            com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef result = new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef();
            java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> resultMap = result.reachingDef;
            for (java.util.Map.Entry<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> varEntry : a.reachingDef.entrySet()) {
                com.google.javascript.jscomp.Scope.Var var = varEntry.getKey();
                com.google.javascript.jscomp.MustBeReachingVariableDef.Definition aDef = varEntry.getValue();
                if (aDef == null) {
                    resultMap.put(var, null);
                    continue;
                }
                com.google.javascript.rhino.Node aNode = aDef.node;
                if (b.reachingDef.containsKey(var)) {
                    com.google.javascript.jscomp.MustBeReachingVariableDef.Definition bDef = b.reachingDef.get(var);
                    if (aDef.equals(bDef)) {
                        resultMap.put(var, aDef);
                    } else {
                        resultMap.put(var, null);
                    }
                } else {
                    resultMap.put(var, aDef);
                }
            }
            for (java.util.Map.Entry<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> entry : b.reachingDef.entrySet()) {
                com.google.javascript.jscomp.Scope.Var var = entry.getKey();
                if (!a.reachingDef.containsKey(var)) {
                    resultMap.put(var, entry.getValue());
                }
            }
            return result;
        }
    }

    @java.lang.Override
    boolean isForward() {
        return true;
    }

    @java.lang.Override
    com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef createEntryLattice() {
        return new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef(jsScope.getVars());
    }

    @java.lang.Override
    com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef createInitialEstimateLattice() {
        return new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef();
    }

    @java.lang.Override
    com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef flowThrough(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef input) {
        com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef output = new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef(input);
        computeMustDef(n, n, output, false);
        return output;
    }

    private void computeMustDef(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node cfgNode, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef output, boolean conditional) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.FUNCTION :
                return;
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.IF :
                computeMustDef(com.google.javascript.jscomp.NodeUtil.getConditionExpression(n), cfgNode, output, conditional);
                return;
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    computeMustDef(com.google.javascript.jscomp.NodeUtil.getConditionExpression(n), cfgNode, output, conditional);
                } else {
                    com.google.javascript.rhino.Node lhs = n.getFirstChild();
                    com.google.javascript.rhino.Node rhs = lhs.getNext();
                    if (lhs.isVar()) {
                        lhs = lhs.getLastChild();
                    }
                    if (lhs.isName()) {
                        addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);
                    }
                }
                return;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                computeMustDef(n.getFirstChild(), cfgNode, output, conditional);
                computeMustDef(n.getLastChild(), cfgNode, output, true);
                return;
            case com.google.javascript.rhino.Token.HOOK :
                computeMustDef(n.getFirstChild(), cfgNode, output, conditional);
                computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);
                computeMustDef(n.getLastChild(), cfgNode, output, true);
                return;
            case com.google.javascript.rhino.Token.VAR :
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (c.hasChildren()) {
                        computeMustDef(c.getFirstChild(), cfgNode, output, conditional);
                        addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output);
                    }
                }
                return;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    if (n.getFirstChild().isName()) {
                        com.google.javascript.rhino.Node name = n.getFirstChild();
                        computeMustDef(name.getNext(), cfgNode, output, conditional);
                        addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output);
                        return;
                    } else if (com.google.javascript.jscomp.NodeUtil.isGet(n.getFirstChild())) {
                        com.google.javascript.rhino.Node obj = n.getFirstChild().getFirstChild();
                        if (obj.isName() && "arguments".equals(obj.getString())) {
                            escapeParameters(output);
                        }
                    }
                }
                if (n.isName() && "arguments".equals(n.getString())) {
                    escapeParameters(output);
                }
                if (n.isDec() || n.isInc()) {
                    com.google.javascript.rhino.Node target = n.getFirstChild();
                    if (target.isName()) {
                        addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output);
                        return;
                    }
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    computeMustDef(c, cfgNode, output, conditional);
                }
        }
    }

    private void addToDefIfLocal(java.lang.String name, @javax.annotation.Nullable
    com.google.javascript.rhino.Node node, @javax.annotation.Nullable
    com.google.javascript.rhino.Node rValue, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef def) {
        com.google.javascript.jscomp.Scope.Var var = jsScope.getVar(name);
        if ((var == null) || (var.scope != jsScope)) {
            return;
        }
        for (com.google.javascript.jscomp.Scope.Var other : def.reachingDef.keySet()) {
            com.google.javascript.jscomp.MustBeReachingVariableDef.Definition otherDef = def.reachingDef.get(other);
            if (otherDef == null) {
                continue;
            }
            if (otherDef.depends.contains(var)) {
                def.reachingDef.put(other, null);
            }
        }
        if (!escaped.contains(var)) {
            if (node == null) {
                def.reachingDef.put(var, null);
            } else {
                com.google.javascript.jscomp.MustBeReachingVariableDef.Definition definition = new com.google.javascript.jscomp.MustBeReachingVariableDef.Definition(node);
                if (rValue != null) {
                    computeDependence(definition, rValue);
                }
                def.reachingDef.put(var, definition);
            }
        }
    }

    private void escapeParameters(com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef output) {
        for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> i = jsScope.getVars(); i.hasNext();) {
            com.google.javascript.jscomp.Scope.Var v = i.next();
            if (isParameter(v)) {
                output.reachingDef.put(v, null);
            }
        }
        for (java.util.Map.Entry<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> pair : output.reachingDef.entrySet()) {
            com.google.javascript.jscomp.MustBeReachingVariableDef.Definition value = pair.getValue();
            if (value == null) {
                continue;
            }
            for (com.google.javascript.jscomp.Scope.Var dep : value.depends) {
                if (isParameter(dep)) {
                    output.reachingDef.put(pair.getKey(), null);
                }
            }
        }
    }

    private boolean isParameter(com.google.javascript.jscomp.Scope.Var v) {
        return v.getParentNode().isParamList();
    }

    private void computeDependence(final com.google.javascript.jscomp.MustBeReachingVariableDef.Definition def, com.google.javascript.rhino.Node rValue) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, rValue, new com.google.javascript.jscomp.ControlFlowGraph.AbstractCfgNodeTraversalCallback() {
            @java.lang.Override
            public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
                if (n.isName()) {
                    com.google.javascript.jscomp.Scope.Var dep = jsScope.getVar(n.getString());
                    if (dep == null) {
                        def.unknownDependencies = true;
                    } else {
                        def.depends.add(dep);
                    }
                }
            }
        });
    }

    com.google.javascript.rhino.Node getDef(java.lang.String name, com.google.javascript.rhino.Node useNode) {
        com.google.common.base.Preconditions.checkArgument(getCfg().hasNode(useNode));
        com.google.javascript.jscomp.graph.GraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n = getCfg().getNode(useNode);
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> state = n.getAnnotation();
        com.google.javascript.jscomp.MustBeReachingVariableDef.Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));
        if (def == null) {
            return null;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(190).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("com.google.javascript.jscomp.MustBeReachingVariableDef.this.jsScope",com.google.javascript.jscomp.MustBeReachingVariableDef.this.jsScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("useNode",useNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("def",def);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("com.google.javascript.jscomp.MustBeReachingVariableDef.this.compiler",com.google.javascript.jscomp.MustBeReachingVariableDef.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped",com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("state",state);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectionEnds();
            }
            if (runtimeAngelicValue)
                return def.node;

        }
    }

    boolean dependsOnOuterScopeVars(java.lang.String name, com.google.javascript.rhino.Node useNode) {
        com.google.common.base.Preconditions.checkArgument(getCfg().hasNode(useNode));
        com.google.javascript.jscomp.graph.GraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n = getCfg().getNode(useNode);
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> state = n.getAnnotation();
        com.google.javascript.jscomp.MustBeReachingVariableDef.Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));
        if (def.unknownDependencies) {
            return true;
        }
        for (com.google.javascript.jscomp.Scope.Var s : def.depends) {
            if (s.scope != jsScope) {
                return true;
            }
        }
        return false;
    }
}
[377211] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659926640149
GPR[SSUN]-1659926640149
-1119592721
GPR[SPVATF]-1659926640369
GPR[EPVATF]-1659926640808
GPR[SPS]-1659926640808
[378296] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class MustBeReachingVariableDef extends com.google.javascript.jscomp.DataFlowAnalysis<com.google.javascript.rhino.Node, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> {
    private final com.google.javascript.jscomp.Scope jsScope;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final java.util.Set<com.google.javascript.jscomp.Scope.Var> escaped;

    MustBeReachingVariableDef(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg, com.google.javascript.jscomp.Scope jsScope, com.google.javascript.jscomp.AbstractCompiler compiler) {
        super(cfg, new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDefJoin());
        this.jsScope = jsScope;
        this.compiler = compiler;
        this.escaped = com.google.common.collect.Sets.newHashSet();
        com.google.javascript.jscomp.DataFlowAnalysis.computeEscaped(jsScope, escaped, compiler);
    }

    private static class Definition {
        final com.google.javascript.rhino.Node node;

        final java.util.Set<com.google.javascript.jscomp.Scope.Var> depends = com.google.common.collect.Sets.newHashSet();

        private boolean unknownDependencies = false;

        Definition(com.google.javascript.rhino.Node node) {
            this.node = node;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.MustBeReachingVariableDef.Definition)) {
                return false;
            }
            com.google.javascript.jscomp.MustBeReachingVariableDef.Definition otherDef = ((com.google.javascript.jscomp.MustBeReachingVariableDef.Definition) (other));
            return otherDef.node == node;
        }
    }

    static final class MustDef implements com.google.javascript.jscomp.graph.LatticeElement {
        final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> reachingDef;

        public MustDef() {
            reachingDef = com.google.common.collect.Maps.newHashMap();
        }

        public MustDef(java.util.Iterator<com.google.javascript.jscomp.Scope.Var> vars) {
            this();
            while (vars.hasNext()) {
                com.google.javascript.jscomp.Scope.Var var = vars.next();
                reachingDef.put(var, new com.google.javascript.jscomp.MustBeReachingVariableDef.Definition(var.scope.getRootNode()));
            } 
        }

        public MustDef(com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef other) {
            reachingDef = com.google.common.collect.Maps.newHashMap(other.reachingDef);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            return (other instanceof com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef) && ((com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef) (other)).reachingDef.equals(this.reachingDef);
        }
    }

    private static class MustDefJoin extends com.google.javascript.jscomp.JoinOp.BinaryJoinOp<com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> {
        @java.lang.Override
        public com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef apply(com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef a, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef b) {
            com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef result = new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef();
            java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> resultMap = result.reachingDef;
            for (java.util.Map.Entry<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> varEntry : a.reachingDef.entrySet()) {
                com.google.javascript.jscomp.Scope.Var var = varEntry.getKey();
                com.google.javascript.jscomp.MustBeReachingVariableDef.Definition aDef = varEntry.getValue();
                if (aDef == null) {
                    resultMap.put(var, null);
                    continue;
                }
                com.google.javascript.rhino.Node aNode = aDef.node;
                if (b.reachingDef.containsKey(var)) {
                    com.google.javascript.jscomp.MustBeReachingVariableDef.Definition bDef = b.reachingDef.get(var);
                    if (aDef.equals(bDef)) {
                        resultMap.put(var, aDef);
                    } else {
                        resultMap.put(var, null);
                    }
                } else {
                    resultMap.put(var, aDef);
                }
            }
            for (java.util.Map.Entry<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> entry : b.reachingDef.entrySet()) {
                com.google.javascript.jscomp.Scope.Var var = entry.getKey();
                if (!a.reachingDef.containsKey(var)) {
                    resultMap.put(var, entry.getValue());
                }
            }
            return result;
        }
    }

    @java.lang.Override
    boolean isForward() {
        return true;
    }

    @java.lang.Override
    com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef createEntryLattice() {
        return new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef(jsScope.getVars());
    }

    @java.lang.Override
    com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef createInitialEstimateLattice() {
        return new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef();
    }

    @java.lang.Override
    com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef flowThrough(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef input) {
        com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef output = new com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef(input);
        computeMustDef(n, n, output, false);
        return output;
    }

    private void computeMustDef(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node cfgNode, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef output, boolean conditional) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.FUNCTION :
                return;
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.IF :
                computeMustDef(com.google.javascript.jscomp.NodeUtil.getConditionExpression(n), cfgNode, output, conditional);
                return;
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    computeMustDef(com.google.javascript.jscomp.NodeUtil.getConditionExpression(n), cfgNode, output, conditional);
                } else {
                    com.google.javascript.rhino.Node lhs = n.getFirstChild();
                    com.google.javascript.rhino.Node rhs = lhs.getNext();
                    if (lhs.isVar()) {
                        lhs = lhs.getLastChild();
                    }
                    if (lhs.isName()) {
                        addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);
                    }
                }
                return;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                computeMustDef(n.getFirstChild(), cfgNode, output, conditional);
                computeMustDef(n.getLastChild(), cfgNode, output, true);
                return;
            case com.google.javascript.rhino.Token.HOOK :
                computeMustDef(n.getFirstChild(), cfgNode, output, conditional);
                computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);
                computeMustDef(n.getLastChild(), cfgNode, output, true);
                return;
            case com.google.javascript.rhino.Token.VAR :
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (c.hasChildren()) {
                        computeMustDef(c.getFirstChild(), cfgNode, output, conditional);
                        addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output);
                    }
                }
                return;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    if (n.getFirstChild().isName()) {
                        com.google.javascript.rhino.Node name = n.getFirstChild();
                        computeMustDef(name.getNext(), cfgNode, output, conditional);
                        addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output);
                        return;
                    } else if (com.google.javascript.jscomp.NodeUtil.isGet(n.getFirstChild())) {
                        com.google.javascript.rhino.Node obj = n.getFirstChild().getFirstChild();
                        if (obj.isName() && "arguments".equals(obj.getString())) {
                            escapeParameters(output);
                        }
                    }
                }
                if (n.isName() && "arguments".equals(n.getString())) {
                    escapeParameters(output);
                }
                if (n.isDec() || n.isInc()) {
                    com.google.javascript.rhino.Node target = n.getFirstChild();
                    if (target.isName()) {
                        addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output);
                        return;
                    }
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    computeMustDef(c, cfgNode, output, conditional);
                }
        }
    }

    private void addToDefIfLocal(java.lang.String name, @javax.annotation.Nullable
    com.google.javascript.rhino.Node node, @javax.annotation.Nullable
    com.google.javascript.rhino.Node rValue, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef def) {
        com.google.javascript.jscomp.Scope.Var var = jsScope.getVar(name);
        if ((var == null) || (var.scope != jsScope)) {
            return;
        }
        for (com.google.javascript.jscomp.Scope.Var other : def.reachingDef.keySet()) {
            com.google.javascript.jscomp.MustBeReachingVariableDef.Definition otherDef = def.reachingDef.get(other);
            if (otherDef == null) {
                continue;
            }
            if (otherDef.depends.contains(var)) {
                def.reachingDef.put(other, null);
            }
        }
        if (!escaped.contains(var)) {
            if (node == null) {
                def.reachingDef.put(var, null);
            } else {
                com.google.javascript.jscomp.MustBeReachingVariableDef.Definition definition = new com.google.javascript.jscomp.MustBeReachingVariableDef.Definition(node);
                if (rValue != null) {
                    computeDependence(definition, rValue);
                }
                def.reachingDef.put(var, definition);
            }
        }
    }

    private void escapeParameters(com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef output) {
        for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> i = jsScope.getVars(); i.hasNext();) {
            com.google.javascript.jscomp.Scope.Var v = i.next();
            if (isParameter(v)) {
                output.reachingDef.put(v, null);
            }
        }
        for (java.util.Map.Entry<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.MustBeReachingVariableDef.Definition> pair : output.reachingDef.entrySet()) {
            com.google.javascript.jscomp.MustBeReachingVariableDef.Definition value = pair.getValue();
            if (value == null) {
                continue;
            }
            for (com.google.javascript.jscomp.Scope.Var dep : value.depends) {
                if (isParameter(dep)) {
                    output.reachingDef.put(pair.getKey(), null);
                }
            }
        }
    }

    private boolean isParameter(com.google.javascript.jscomp.Scope.Var v) {
        return v.getParentNode().isParamList();
    }

    private void computeDependence(final com.google.javascript.jscomp.MustBeReachingVariableDef.Definition def, com.google.javascript.rhino.Node rValue) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, rValue, new com.google.javascript.jscomp.ControlFlowGraph.AbstractCfgNodeTraversalCallback() {
            @java.lang.Override
            public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
                if (n.isName()) {
                    com.google.javascript.jscomp.Scope.Var dep = jsScope.getVar(n.getString());
                    if (dep == null) {
                        def.unknownDependencies = true;
                    } else {
                        def.depends.add(dep);
                    }
                }
            }
        });
    }

    com.google.javascript.rhino.Node getDef(java.lang.String name, com.google.javascript.rhino.Node useNode) {
        com.google.common.base.Preconditions.checkArgument(getCfg().hasNode(useNode));
        com.google.javascript.jscomp.graph.GraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n = getCfg().getNode(useNode);
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> state = n.getAnnotation();
        com.google.javascript.jscomp.MustBeReachingVariableDef.Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));
        if (def == null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(191).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.jscomp.MustBeReachingVariableDef.this.jsScope",com.google.javascript.jscomp.MustBeReachingVariableDef.this.jsScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("useNode",useNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("def",def);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.jscomp.MustBeReachingVariableDef.this.compiler",com.google.javascript.jscomp.MustBeReachingVariableDef.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped",com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("state",state);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectionEnds();
            }
            if (runtimeAngelicValue)
                return null;

        } else {
            return def.node;
        }
    }

    boolean dependsOnOuterScopeVars(java.lang.String name, com.google.javascript.rhino.Node useNode) {
        com.google.common.base.Preconditions.checkArgument(getCfg().hasNode(useNode));
        com.google.javascript.jscomp.graph.GraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n = getCfg().getNode(useNode);
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef> state = n.getAnnotation();
        com.google.javascript.jscomp.MustBeReachingVariableDef.Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));
        if (def.unknownDependencies) {
            return true;
        }
        for (com.google.javascript.jscomp.Scope.Var s : def.depends) {
            if (s.scope != jsScope) {
                return true;
            }
        }
        return false;
    }
}
[378297] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659926641234
GPR[SSUN]-1659926641234
-1119592721
GPR[ESUN]-1659926641454
GPR[SSUN]-1659926641454
-1119592721
GPR[SPVATF]-1659926641672
GPR[EPVATF]-1659926642114
GPR[SPS]-1659926642114
[379702] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:271.
GPR[EPS]-1659926642639
GPR[SPVATF]-1659926642639
GPR[EPVATF]-1659926643072
GPR[SPS]-1659926643072
[381498] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:271.
GPR[EPS]-1659926644435
GPR[ESUN]-1659926644435
GPR[SSUN]-1659926644435
-1119592721
GPR[SPVATF]-1659926644663
GPR[EPVATF]-1659926645127
GPR[SPS]-1659926645127
[383015] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:270.
GPR[EPS]-1659926645952
GPR[ESUN]-1659926645952
GPR[SSUN]-1659926645952
1187751237
GPR[ESUN]-1659926646272
GPR[SSUN]-1659926646272
-128675625
GPR[SPVATF]-1659926646564
GPR[EPVATF]-1659926646974
GPR[SPS]-1659926646974
[384560] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:202.
GPR[EPS]-1659926647497
GPR[SPVATF]-1659926647497
GPR[EPVATF]-1659926647892
GPR[SPS]-1659926647892
[385466] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:202.
GPR[EPS]-1659926648403
GPR[ESUN]-1659926648403
GPR[SSUN]-1659926648403
-128675625
GPR[SPVATF]-1659926648626
GPR[EPVATF]-1659926649009
GPR[SPS]-1659926649009
[386594] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:197.
GPR[EPS]-1659926649531
GPR[SPVATF]-1659926649532
GPR[EPVATF]-1659926649914
GPR[SPS]-1659926649914
[387485] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:197.
GPR[EPS]-1659926650422
GPR[ESUN]-1659926650422
GPR[SSUN]-1659926650422
-1119592721
GPR[ESUN]-1659926650645
GPR[SSUN]-1659926650645
-1119592721
GPR[SPVATF]-1659926650869
GPR[EPVATF]-1659926651253
GPR[SPS]-1659926651253
[388855] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:397.
GPR[EPS]-1659926651792
GPR[SPVATF]-1659926651792
GPR[EPVATF]-1659926652167
GPR[SPS]-1659926652167
[389794] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:397.
GPR[EPS]-1659926652731
GPR[ESUN]-1659926652731
GPR[SSUN]-1659926652731
-1119592721
GPR[ESUN]-1659926653013
GPR[SSUN]-1659926653013
-1119592721
GPR[SPVATF]-1659926653242
GPR[EPVATF]-1659926653609
GPR[SPS]-1659926653609
[391197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:393.
GPR[EPS]-1659926654134
GPR[ESUN]-1659926654134
GPR[SSUN]-1659926654134
-1119592721
GPR[SPVATF]-1659926654353
GPR[EPVATF]-1659926654753
GPR[SPS]-1659926654753
[392347] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:353.
GPR[EPS]-1659926655284
GPR[ESUN]-1659926655284
GPR[SSUN]-1659926655284
-1119592721
GPR[SPVATF]-1659926655505
GPR[EPVATF]-1659926655899
GPR[SPS]-1659926655899
[393490] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:355.
GPR[EPS]-1659926656427
GPR[ESUN]-1659926656427
GPR[SSUN]-1659926656428
-1119592721
GPR[SPVATF]-1659926656656
GPR[EPVATF]-1659926657067
GPR[SPS]-1659926657067
[394672] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:352.
GPR[EPS]-1659926657609
GPR[SPVATF]-1659926657609
GPR[EPVATF]-1659926658017
GPR[SPS]-1659926658017
[395626] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:352.
GPR[EPS]-1659926658563
GPR[ESUN]-1659926658563
GPR[SSUN]-1659926658563
-1119592721
GPR[ESUN]-1659926658791
GPR[SSUN]-1659926658791
-1119592721
GPR[SPVATF]-1659926659017
GPR[EPVATF]-1659926659379
GPR[SPS]-1659926659379
[396968] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:348.
GPR[EPS]-1659926659905
GPR[SPVATF]-1659926659905
GPR[EPVATF]-1659926660272
GPR[SPS]-1659926660272
[397853] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:348.
GPR[EPS]-1659926660790
GPR[ESUN]-1659926660790
GPR[SSUN]-1659926660790
-1765952779
GPR[SPVATF]-1659926661052
GPR[EPVATF]-1659926661436
GPR[SPS]-1659926661436
[399002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:250.
GPR[EPS]-1659926661939
GPR[ESUN]-1659926661939
GPR[SSUN]-1659926661939
1852376448
GPR[SPVATF]-1659926662155
GPR[EPVATF]-1659926662522
GPR[SPS]-1659926662522
[400093] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:158.
GPR[EPS]-1659926663030
GPR[ESUN]-1659926663030
GPR[SSUN]-1659926663030
-1119592721
GPR[ESUN]-1659926663252
GPR[SSUN]-1659926663252
-1119592721
GPR[SPVATF]-1659926663473
GPR[EPVATF]-1659926663848
GPR[SPS]-1659926663848
[401433] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:347.
GPR[EPS]-1659926664370
GPR[SPVATF]-1659926664370
GPR[EPVATF]-1659926664804
GPR[SPS]-1659926664804
[402393] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:347.
GPR[EPS]-1659926665330
GPR[ESUN]-1659926665330
GPR[SSUN]-1659926665330
-1119592721
GPR[ESUN]-1659926665557
GPR[SSUN]-1659926665557
-1119592721
GPR[SPVATF]-1659926665781
GPR[EPVATF]-1659926666160
GPR[SPS]-1659926666160
[403761] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:342.
GPR[EPS]-1659926666698
GPR[SPVATF]-1659926666698
GPR[EPVATF]-1659926667112
GPR[SPS]-1659926667112
[404707] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:342.
GPR[EPS]-1659926667644
GPR[ESUN]-1659926667644
GPR[SSUN]-1659926667644
-1119592721
GPR[SPVATF]-1659926667864
GPR[EPVATF]-1659926668252
GPR[SPS]-1659926668252
[405858] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:339.
GPR[EPS]-1659926668795
GPR[SPVATF]-1659926668796
GPR[EPVATF]-1659926669258
GPR[SPS]-1659926669258
[406855] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:339.
GPR[EPS]-1659926669792
GPR[ESUN]-1659926669792
GPR[SSUN]-1659926669792
-1119592721
GPR[ESUN]-1659926670097
GPR[SSUN]-1659926670097
-1119592721
GPR[SPVATF]-1659926670320
GPR[EPVATF]-1659926670708
GPR[SPS]-1659926670708
[408307] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:337.
GPR[EPS]-1659926671244
GPR[ESUN]-1659926671244
GPR[SSUN]-1659926671244
-1765952779
GPR[ESUN]-1659926671460
GPR[SSUN]-1659926671460
-1765952779
GPR[SPVATF]-1659926671671
GPR[EPVATF]-1659926672108
GPR[SPS]-1659926672108
[409686] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:249.
GPR[EPS]-1659926672623
GPR[SPVATF]-1659926672623
GPR[EPVATF]-1659926673035
GPR[SPS]-1659926673035
[410618] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:249.
GPR[EPS]-1659926673555
GPR[ESUN]-1659926673555
GPR[SSUN]-1659926673555
-1119592721
GPR[SPVATF]-1659926673780
GPR[EPVATF]-1659926674192
GPR[SPS]-1659926674192
[411815] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:333.
GPR[EPS]-1659926674752
GPR[SPVATF]-1659926674752
GPR[EPVATF]-1659926675162
GPR[SPS]-1659926675162
[412763] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:333.
GPR[EPS]-1659926675700
GPR[ESUN]-1659926675700
GPR[SSUN]-1659926675700
-1119592721
GPR[ESUN]-1659926675921
GPR[SSUN]-1659926675921
-1765952779
GPR[ESUN]-1659926676130
GPR[SSUN]-1659926676130
-1765952779
GPR[SPVATF]-1659926676336
GPR[EPVATF]-1659926676758
GPR[SPS]-1659926676758
[414337] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:161.
GPR[EPS]-1659926677274
GPR[ESUN]-1659926677274
GPR[SSUN]-1659926677274
-128675625
GPR[SPVATF]-1659926677580
GPR[EPVATF]-1659926678034
GPR[SPS]-1659926678034
[415618] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates:183.
GPR[EPS]-1659926678555
GPR[ESUN]-1659926678555
GPR[SSUN]-1659926678555
-1765952779
GPR[SPVATF]-1659926678770
GPR[EPVATF]-1659926679188
GPR[SPS]-1659926679188
[416764] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:246.
GPR[EPS]-1659926679701
GPR[SPVATF]-1659926679701
GPR[EPVATF]-1659926680109
GPR[SPS]-1659926680109
[418562] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:246.
GPR[EPS]-1659926681499
GPR[ESUN]-1659926681499
GPR[SSUN]-1659926681499
-1765952779
GPR[ESUN]-1659926681716
GPR[SSUN]-1659926681716
-1765952779
GPR[SPVATF]-1659926681925
GPR[EPVATF]-1659926682364
GPR[SPS]-1659926682364
[420146] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:233.
GPR[EPS]-1659926683083
GPR[ESUN]-1659926683084
GPR[SSUN]-1659926683084
-1765952779
GPR[ESUN]-1659926683294
GPR[SSUN]-1659926683294
-1765952779
GPR[SPVATF]-1659926683520
GPR[EPVATF]-1659926684518
GPR[SPS]-1659926684518
[422092] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:232.
GPR[EPS]-1659926685029
GPR[ESUN]-1659926685029
GPR[SSUN]-1659926685029
-1765952779
GPR[SPVATF]-1659926685242
GPR[EPVATF]-1659926685652
GPR[SPS]-1659926685652
[423218] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:214.
GPR[EPS]-1659926686155
GPR[SPVATF]-1659926686155
GPR[EPVATF]-1659926686547
GPR[SPS]-1659926686547
[424113] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:214.
GPR[EPS]-1659926687050
GPR[ESUN]-1659926687050
GPR[SSUN]-1659926687050
-1119592721
GPR[SPVATF]-1659926687275
GPR[EPVATF]-1659926687661
GPR[SPS]-1659926687661
[425243] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:423.
GPR[EPS]-1659926688180
GPR[ESUN]-1659926688180
GPR[SSUN]-1659926688180
-1119592721
GPR[ESUN]-1659926688405
GPR[SSUN]-1659926688405
-1119592721
GPR[ESUN]-1659926688630
GPR[SSUN]-1659926688630
-1119592721
GPR[ESUN]-1659926688850
GPR[SSUN]-1659926688850
-1119592721
GPR[SPVATF]-1659926689068
GPR[EPVATF]-1659926689457
GPR[SPS]-1659926689457
[427074] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:419.
GPR[EPS]-1659926690011
GPR[ESUN]-1659926690011
GPR[SSUN]-1659926690011
GPR[ESUN]-1659926690011
GPR[SSUN]-1659926690011
GPR[ESUN]-1659926690011
GPR[SSUN]-1659926690011
-1119592721
GPR[SPVATF]-1659926690350
GPR[EPVATF]-1659926690727
GPR[SPS]-1659926690727
[428321] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:315.
GPR[EPS]-1659926691258
GPR[ESUN]-1659926691258
GPR[SSUN]-1659926691258
-1119592721
GPR[ESUN]-1659926691518
GPR[SSUN]-1659926691518
-1119592721
GPR[SPVATF]-1659926691737
GPR[EPVATF]-1659926692144
GPR[SPS]-1659926692144
[429740] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:314.
GPR[EPS]-1659926692677
GPR[ESUN]-1659926692677
GPR[SSUN]-1659926692677
-1119592721
GPR[SPVATF]-1659926692900
GPR[EPVATF]-1659926693279
GPR[SPS]-1659926693279
[430868] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:305.
GPR[EPS]-1659926693805
GPR[SPVATF]-1659926693805
GPR[EPVATF]-1659926694180
GPR[SPS]-1659926694180
GPR[EPS]-1659926703805
GPR[ESUN]-1659926703805
GPR[SSUN]-1659926703805
-1119592721
GPR[SPVATF]-1659926704033
GPR[EPVATF]-1659926704408
GPR[SPS]-1659926704408
[442022] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:300.
GPR[EPS]-1659926704959
GPR[SPVATF]-1659926704959
GPR[EPVATF]-1659926705326
GPR[SPS]-1659926705326
[442921] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:300.
GPR[EPS]-1659926705858
GPR[ESUN]-1659926705858
GPR[SSUN]-1659926705858
-1119592721
GPR[SPVATF]-1659926706088
GPR[EPVATF]-1659926706471
GPR[SPS]-1659926706471
[444065] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:280.
GPR[EPS]-1659926707002
GPR[SPVATF]-1659926707002
GPR[EPVATF]-1659926707368
GPR[SPS]-1659926707368
[444956] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:280.
GPR[EPS]-1659926707894
GPR[ESUN]-1659926707894
GPR[SSUN]-1659926707894
1207178244
GPR[ESUN]-1659926708102
GPR[SSUN]-1659926708102
GPR[ESUN]-1659926708102
GPR[SSUN]-1659926708102
GPR[ESUN]-1659926708102
GPR[SSUN]-1659926708102
GPR[ESUN]-1659926708102
GPR[SSUN]-1659926708102
69062959
GPR[ESUN]-1659926708288
GPR[SSUN]-1659926708288
-128675625
GPR[ESUN]-1659926708512
GPR[SSUN]-1659926708512
-128675625
GPR[SPVATF]-1659926708735
GPR[EPVATF]-1659926709109
GPR[SPS]-1659926709109
[446683] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:193.
GPR[EPS]-1659926709620
GPR[SPVATF]-1659926709620
GPR[EPVATF]-1659926710005
GPR[SPS]-1659926710005
[447571] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:193.
GPR[EPS]-1659926710508
GPR[ESUN]-1659926710508
GPR[SSUN]-1659926710508
-128675625
GPR[ESUN]-1659926710731
GPR[SSUN]-1659926710731
-128675625
GPR[SPVATF]-1659926711012
GPR[EPVATF]-1659926711393
GPR[SPS]-1659926711393
[448975] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:146.
GPR[EPS]-1659926711912
GPR[ESUN]-1659926711912
GPR[SSUN]-1659926711912
-128675625
GPR[SPVATF]-1659926712135
GPR[EPVATF]-1659926712512
GPR[SPS]-1659926712512
[450097] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:145.
GPR[EPS]-1659926713034
GPR[ESUN]-1659926713034
GPR[SSUN]-1659926713034
-128675625
GPR[SPVATF]-1659926713344
GPR[EPVATF]-1659926713738
GPR[SPS]-1659926713738
[451313] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:144.
GPR[EPS]-1659926714250
GPR[ESUN]-1659926714250
GPR[SSUN]-1659926714250
-128675625
GPR[SPVATF]-1659926714477
GPR[EPVATF]-1659926714886
GPR[SPS]-1659926714886
[452467] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:140.
GPR[EPS]-1659926715404
GPR[ESUN]-1659926715404
GPR[SSUN]-1659926715404
-128675625
GPR[SPVATF]-1659926715631
GPR[EPVATF]-1659926716036
GPR[SPS]-1659926716036
[453614] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:136.
GPR[EPS]-1659926716551
GPR[ESUN]-1659926716551
GPR[SSUN]-1659926716551
-128675625
GPR[SPVATF]-1659926716775
GPR[EPVATF]-1659926717184
GPR[SPS]-1659926717184
[454760] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:135.
GPR[EPS]-1659926717697
GPR[ESUN]-1659926717697
GPR[SSUN]-1659926717697
-128675625
GPR[SPVATF]-1659926717921
GPR[EPVATF]-1659926718339
GPR[SPS]-1659926718339
[455922] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:134.
GPR[EPS]-1659926718859
GPR[ESUN]-1659926718859
GPR[SSUN]-1659926718859
-128675625
GPR[SPVATF]-1659926719083
GPR[EPVATF]-1659926719497
GPR[SPS]-1659926719497
[457146] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:133.
GPR[EPS]-1659926720083
GPR[ESUN]-1659926720083
GPR[SSUN]-1659926720083
-128675625
GPR[SPVATF]-1659926720306
GPR[EPVATF]-1659926720729
GPR[SPS]-1659926720729
[458309] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:132.
GPR[EPS]-1659926721246
GPR[ESUN]-1659926721246
GPR[SSUN]-1659926721246
-128675625
GPR[SPVATF]-1659926721467
GPR[EPVATF]-1659926721898
GPR[SPS]-1659926721898
[459486] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:131.
GPR[EPS]-1659926722423
GPR[ESUN]-1659926722423
GPR[SSUN]-1659926722423
-128675625
GPR[ESUN]-1659926722671
GPR[SSUN]-1659926722671
-128675625
GPR[SPVATF]-1659926722890
GPR[EPVATF]-1659926723323
GPR[SPS]-1659926723323
[460910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:123.
GPR[EPS]-1659926723847
GPR[SPVATF]-1659926723848
GPR[EPVATF]-1659926724270
GPR[SPS]-1659926724270
[461841] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:123.
GPR[EPS]-1659926724778
GPR[ESUN]-1659926724778
GPR[SSUN]-1659926724778
-128675625
GPR[ESUN]-1659926725002
GPR[SSUN]-1659926725002
-128675625
GPR[SPVATF]-1659926725226
GPR[EPVATF]-1659926725649
GPR[SPS]-1659926725649
[464115] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates:224.
GPR[EPS]-1659926727052
GPR[ESUN]-1659926727052
GPR[SSUN]-1659926727052
-128675625
GPR[ESUN]-1659926727284
GPR[SSUN]-1659926727284
-128675625
GPR[ESUN]-1659926727507
GPR[SSUN]-1659926727507
-128675625
GPR[ESUN]-1659926727726
GPR[SSUN]-1659926727726
-128675625
GPR[ESUN]-1659926727944
GPR[SSUN]-1659926727944
-128675625
GPR[SPVATF]-1659926728165
GPR[EPVATF]-1659926728581
GPR[SPS]-1659926728581
[466379] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates:181.
GPR[EPS]-1659926729316
GPR[SPVATF]-1659926729316
GPR[EPVATF]-1659926730203
GPR[SPS]-1659926730203
[467760] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates:181.
GPR[EPS]-1659926730697
GPR[ESUN]-1659926730697
GPR[SSUN]-1659926730697
-128675625
GPR[ESUN]-1659926730917
GPR[SSUN]-1659926730917
-128675625
GPR[ESUN]-1659926731137
GPR[SSUN]-1659926731137
-128675625
GPR[ESUN]-1659926731356
GPR[SSUN]-1659926731356
-128675625
GPR[SPVATF]-1659926731575
GPR[EPVATF]-1659926731979
GPR[SPS]-1659926731979
[469556] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:158.
GPR[EPS]-1659926732493
GPR[ESUN]-1659926732493
GPR[SSUN]-1659926732493
-128675625
GPR[ESUN]-1659926732715
GPR[SSUN]-1659926732715
-128675625
GPR[SPVATF]-1659926732935
GPR[EPVATF]-1659926733339
GPR[SPS]-1659926733339
[470903] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:120.
GPR[EPS]-1659926733840
GPR[ESUN]-1659926733840
GPR[SSUN]-1659926733840
-128675625
GPR[SPVATF]-1659926734061
GPR[EPVATF]-1659926734450
GPR[SPS]-1659926734451
[472032] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:119.
GPR[EPS]-1659926734969
GPR[SPVATF]-1659926734969
GPR[EPVATF]-1659926735372
GPR[SPS]-1659926735372
[472940] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:119.
GPR[EPS]-1659926735877
GPR[ESUN]-1659926735878
GPR[SSUN]-1659926735878
1207178244
GPR[ESUN]-1659926736088
GPR[SSUN]-1659926736088
-1765952779
GPR[ESUN]-1659926736300
GPR[SSUN]-1659926736300
-1765952779
GPR[ESUN]-1659926736515
GPR[SSUN]-1659926736515
-1765952779
GPR[ESUN]-1659926736725
GPR[SSUN]-1659926736726
-1765952779
GPR[SPVATF]-1659926736937
GPR[EPVATF]-1659926737327
GPR[SPS]-1659926737327
[474891] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:154.
GPR[EPS]-1659926737828
GPR[ESUN]-1659926737828
GPR[SSUN]-1659926737828
-1765952779
GPR[ESUN]-1659926738039
GPR[SSUN]-1659926738039
-1765952779
GPR[SPVATF]-1659926738246
GPR[EPVATF]-1659926738630
GPR[SPS]-1659926738630
[476273] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:148.
GPR[EPS]-1659926739210
GPR[ESUN]-1659926739210
GPR[SSUN]-1659926739210
-1765952779
GPR[ESUN]-1659926739422
GPR[SSUN]-1659926739422
-1765952779
GPR[ESUN]-1659926739628
GPR[SSUN]-1659926739628
-1765952779
GPR[ESUN]-1659926739833
GPR[SSUN]-1659926739834
-1765952779
GPR[ESUN]-1659926740039
GPR[SSUN]-1659926740039
-132053243
GPR[ESUN]-1659926740224
GPR[SSUN]-1659926740224
-132053243
GPR[SPVATF]-1659926740407
GPR[EPVATF]-1659926740427
[477490] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926740427
GPR[SSUN]-1659926740427
-1119592721
GPR[ESUN]-1659926740650
GPR[SSUN]-1659926740650
-1119592721
GPR[SPVATF]-1659926740871
GPR[EPVATF]-1659926741266
GPR[SPS]-1659926741266
[478842] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:227.
GPR[EPS]-1659926741779
GPR[ESUN]-1659926741779
GPR[SSUN]-1659926741779
-1119592721
GPR[ESUN]-1659926741998
GPR[SSUN]-1659926741998
-1119592721
GPR[SPVATF]-1659926742216
GPR[EPVATF]-1659926742626
GPR[SPS]-1659926742626
[480203] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:216.
GPR[EPS]-1659926743140
GPR[ESUN]-1659926743140
GPR[SSUN]-1659926743140
-1119592721
GPR[ESUN]-1659926743392
GPR[SSUN]-1659926743392
-1119592721
GPR[ESUN]-1659926743611
GPR[SSUN]-1659926743611
-1119592721
GPR[ESUN]-1659926743830
GPR[SSUN]-1659926743830
-1119592721
GPR[ESUN]-1659926744049
GPR[SSUN]-1659926744050
-1119592721
GPR[ESUN]-1659926744268
GPR[SSUN]-1659926744268
711965926
GPR[ESUN]-1659926744446
GPR[SSUN]-1659926744446
711965926
GPR[SPVATF]-1659926744623
GPR[EPVATF]-1659926745045
GPR[SPS]-1659926745045
[482576] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:37.
GPR[EPS]-1659926745513
GPR[ESUN]-1659926745513
GPR[SSUN]-1659926745514
948429589
GPR[ESUN]-1659926745736
GPR[SSUN]-1659926745736
948429589
GPR[SPVATF]-1659926745957
GPR[EPVATF]-1659926746339
GPR[SPS]-1659926746340
[483931] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:296.
GPR[EPS]-1659926746868
GPR[SPVATF]-1659926746868
GPR[EPVATF]-1659926747257
GPR[SPS]-1659926747257
[484855] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:296.
GPR[EPS]-1659926747792
GPR[ESUN]-1659926747792
GPR[SSUN]-1659926747792
948429589
GPR[SPVATF]-1659926748015
GPR[EPVATF]-1659926748409
GPR[SPS]-1659926748409
[486001] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:295.
GPR[EPS]-1659926748938
GPR[ESUN]-1659926748939
GPR[SSUN]-1659926748939
948429589
GPR[ESUN]-1659926749158
GPR[SSUN]-1659926749158
948429589
GPR[SPVATF]-1659926749379
GPR[EPVATF]-1659926749771
GPR[SPS]-1659926749771
[487364] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:293.
GPR[EPS]-1659926750301
GPR[SPVATF]-1659926750301
GPR[EPVATF]-1659926750691
GPR[SPS]-1659926750691
[488400] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:293.
GPR[EPS]-1659926751337
GPR[ESUN]-1659926751337
GPR[SSUN]-1659926751337
948429589
GPR[ESUN]-1659926751566
GPR[SSUN]-1659926751566
948429589
GPR[SPVATF]-1659926751840
GPR[EPVATF]-1659926752257
GPR[SPS]-1659926752257
[489865] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:290.
GPR[EPS]-1659926752802
GPR[ESUN]-1659926752802
GPR[SSUN]-1659926752802
948429589
GPR[SPVATF]-1659926753024
GPR[EPVATF]-1659926753442
GPR[SPS]-1659926753442
[491031] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:289.
GPR[EPS]-1659926753968
GPR[SPVATF]-1659926753968
GPR[EPVATF]-1659926754369
GPR[SPS]-1659926754369
[491954] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:289.
GPR[EPS]-1659926754891
GPR[ESUN]-1659926754891
GPR[SSUN]-1659926754891
948429589
GPR[SPVATF]-1659926755130
GPR[EPVATF]-1659926755523
GPR[SPS]-1659926755523
[492953] ERROR ConstraintModelBuilder - Unable to compile the change: 
abstract class DataFlowAnalysis<N, L extends com.google.javascript.jscomp.graph.LatticeElement> {
    private final com.google.javascript.jscomp.ControlFlowGraph<N> cfg;

    final com.google.javascript.jscomp.JoinOp<L> joinOp;

    protected final java.util.Set<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> orderedWorkSet;

    public static final int MAX_STEPS = 200000;

    DataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N> targetCfg, com.google.javascript.jscomp.JoinOp<L> joinOp) {
        this.cfg = targetCfg;
        this.joinOp = joinOp;
        java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> nodeComparator = cfg.getOptionalNodeComparator(isForward());
        if (nodeComparator != null) {
            this.orderedWorkSet = com.google.common.collect.Sets.newTreeSet(nodeComparator);
        } else {
            this.orderedWorkSet = com.google.common.collect.Sets.newLinkedHashSet();
        }
    }

    final com.google.javascript.jscomp.ControlFlowGraph<N> getCfg() {
        return cfg;
    }

    L getExitLatticeElement() {
        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node = getCfg().getImplicitReturn();
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        return state.getIn();
    }

    @java.lang.SuppressWarnings("unchecked")
    protected L join(L latticeA, L latticeB) {
        return joinOp.apply(com.google.common.collect.Lists.<L>newArrayList(latticeA, latticeB));
    }

    abstract boolean isForward();

    abstract L flowThrough(N node, L input);

    final void analyze() {
        analyze(com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS);
    }

    final void analyze(int maxSteps) {
        initialize();
        int step = 0;
        while (!orderedWorkSet.isEmpty()) {
            if (step > maxSteps) {
                throw new com.google.javascript.jscomp.DataFlowAnalysis.MaxIterationsExceededException(("Analysis did not terminate after " + maxSteps) + " iterations");
            }
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> curNode = orderedWorkSet.iterator().next();
            orderedWorkSet.remove(curNode);
            joinInputs(curNode);
            if (flow(curNode)) {
                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> nextNodes = (isForward()) ? cfg.getDirectedSuccNodes(curNode) : cfg.getDirectedPredNodes(curNode);
                for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> nextNode : nextNodes) {
                    if (nextNode != cfg.getImplicitReturn()) {
                        orderedWorkSet.add(nextNode);
                    }
                }
            }
            step++;
        } 
        if (isForward()) {
            joinInputs(getCfg().getImplicitReturn());
        }
    }

    abstract L createInitialEstimateLattice();

    abstract L createEntryLattice();

    protected void initialize() {
        orderedWorkSet.clear();
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node : cfg.getDirectedGraphNodes()) {
            node.setAnnotation(new com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L>(createInitialEstimateLattice(), createInitialEstimateLattice()));
            if (node != cfg.getImplicitReturn()) {
                orderedWorkSet.add(node);
            }
        }
    }

    protected boolean flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        if (isForward()) {
            L outBefore = state.out;
            state.out = flowThrough(node.getValue(), state.in);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(273).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(273).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(273).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(273).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS",com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(273).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.orderedWorkSet",com.google.javascript.jscomp.DataFlowAnalysis.this.orderedWorkSet);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(273).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.cfg",com.google.javascript.jscomp.DataFlowAnalysis.this.cfg);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(273).collectInput("outBefore",outBefore);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(273).collectInput("state",state);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(273).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.joinOp",com.google.javascript.jscomp.DataFlowAnalysis.this.joinOp);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(273).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(273).collectionEnds();
            }
            if (runtimeAngelicValue)
                return !outBefore.equals(state.out);

        } else {
            L inBefore = state.in;
            state.in = flowThrough(node.getValue(), state.out);
            return !inBefore.equals(state.in);
        }
    }

    protected void joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        if (isForward()) {
            if (cfg.getEntry() == node) {
                state.setIn(createEntryLattice());
            } else {
                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> inNodes = cfg.getDirectedPredNodes(node);
                if (inNodes.size() == 1) {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> inNodeState = inNodes.get(0).getAnnotation();
                    state.setIn(inNodeState.getOut());
                } else if (inNodes.size() > 1) {
                    java.util.List<L> values = new java.util.ArrayList<L>(inNodes.size());
                    for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> currentNode : inNodes) {
                        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> currentNodeState = currentNode.getAnnotation();
                        values.add(currentNodeState.getOut());
                    }
                    state.setIn(joinOp.apply(values));
                }
            }
        } else {
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> inNodes = cfg.getDirectedSuccNodes(node);
            if (inNodes.size() == 1) {
                com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> inNode = inNodes.get(0);
                if (inNode == cfg.getImplicitReturn()) {
                    state.setOut(createEntryLattice());
                } else {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> inNodeState = inNode.getAnnotation();
                    state.setOut(inNodeState.getIn());
                }
            } else if (inNodes.size() > 1) {
                java.util.List<L> values = new java.util.ArrayList<L>(inNodes.size());
                for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> currentNode : inNodes) {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> currentNodeState = currentNode.getAnnotation();
                    values.add(currentNodeState.getIn());
                }
                state.setOut(joinOp.apply(values));
            }
        }
    }

    static class FlowState<L extends com.google.javascript.jscomp.graph.LatticeElement> implements com.google.javascript.jscomp.graph.Annotation {
        private L in;

        private L out;

        private FlowState(L inState, L outState) {
            com.google.common.base.Preconditions.checkNotNull(inState);
            com.google.common.base.Preconditions.checkNotNull(outState);
            this.in = inState;
            this.out = outState;
        }

        L getIn() {
            return in;
        }

        void setIn(L in) {
            com.google.common.base.Preconditions.checkNotNull(in);
            this.in = in;
        }

        L getOut() {
            return out;
        }

        void setOut(L out) {
            com.google.common.base.Preconditions.checkNotNull(out);
            this.out = out;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.format("IN: %s OUT: %s", in, out);
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(in, out);
        }
    }

    static class MaxIterationsExceededException extends java.lang.RuntimeException {
        private static final long serialVersionUID = 1L;

        MaxIterationsExceededException(java.lang.String msg) {
            super(msg);
        }
    }

    static abstract class BranchedForwardDataFlowAnalysis<N, L extends com.google.javascript.jscomp.graph.LatticeElement> extends com.google.javascript.jscomp.DataFlowAnalysis<N, L> {
        @java.lang.Override
        protected void initialize() {
            orderedWorkSet.clear();
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node : getCfg().getDirectedGraphNodes()) {
                int outEdgeCount = getCfg().getOutEdges(node.getValue()).size();
                java.util.List<L> outLattices = com.google.common.collect.Lists.newArrayList();
                for (int i = 0; i < outEdgeCount; i++) {
                    outLattices.add(createInitialEstimateLattice());
                }
                node.setAnnotation(new com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L>(createInitialEstimateLattice(), outLattices));
                if (node != getCfg().getImplicitReturn()) {
                    orderedWorkSet.add(node);
                }
            }
        }

        BranchedForwardDataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N> targetCfg, com.google.javascript.jscomp.JoinOp<L> joinOp) {
            super(targetCfg, joinOp);
        }

        @java.lang.Override
        L getExitLatticeElement() {
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node = getCfg().getImplicitReturn();
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            return state.getIn();
        }

        @java.lang.Override
        final boolean isForward() {
            return true;
        }

        abstract java.util.List<L> branchedFlowThrough(N node, L input);

        @java.lang.Override
        protected final boolean flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            java.util.List<L> outBefore = state.out;
            state.out = branchedFlowThrough(node.getValue(), state.in);
            com.google.common.base.Preconditions.checkState(outBefore.size() == state.out.size());
            for (int i = 0; i < outBefore.size(); i++) {
                if (!outBefore.get(i).equals(state.out.get(i))) {
                    return true;
                }
            }
            return false;
        }

        @java.lang.Override
        protected void joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> predNodes = getCfg().getDirectedPredNodes(node);
            java.util.List<L> values = new java.util.ArrayList<L>(predNodes.size());
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> predNode : predNodes) {
                com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> predNodeState = predNode.getAnnotation();
                L in = predNodeState.out.get(getCfg().getDirectedSuccNodes(predNode).indexOf(node));
                values.add(in);
            }
            if (getCfg().getEntry() == node) {
                state.setIn(createEntryLattice());
            } else if (!values.isEmpty()) {
                state.setIn(joinOp.apply(values));
            }
        }
    }

    static class BranchedFlowState<L extends com.google.javascript.jscomp.graph.LatticeElement> implements com.google.javascript.jscomp.graph.Annotation {
        private L in;

        private java.util.List<L> out;

        private BranchedFlowState(L inState, java.util.List<L> outState) {
            com.google.common.base.Preconditions.checkNotNull(inState);
            com.google.common.base.Preconditions.checkNotNull(outState);
            this.in = inState;
            this.out = outState;
        }

        L getIn() {
            return in;
        }

        void setIn(L in) {
            com.google.common.base.Preconditions.checkNotNull(in);
            this.in = in;
        }

        java.util.List<L> getOut() {
            return out;
        }

        void setOut(java.util.List<L> out) {
            com.google.common.base.Preconditions.checkNotNull(out);
            for (L item : out) {
                com.google.common.base.Preconditions.checkNotNull(item);
            }
            this.out = out;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.format("IN: %s OUT: %s", in, out);
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(in, out);
        }
    }

    static void computeEscaped(final com.google.javascript.jscomp.Scope jsScope, final java.util.Set<com.google.javascript.jscomp.Scope.Var> escaped, com.google.javascript.jscomp.AbstractCompiler compiler) {
        com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback finder = new com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback() {
            @java.lang.Override
            public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
                if (((jsScope == t.getScope()) || (!n.isName())) || parent.isFunction()) {
                    return;
                }
                java.lang.String name = n.getString();
                com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name);
                if ((var != null) && (var.scope == jsScope)) {
                    escaped.add(jsScope.getVar(name));
                }
            }
        };
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, finder);
        t.traverseAtScope(jsScope);
        for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> i = jsScope.getVars(); i.hasNext();) {
            com.google.javascript.jscomp.Scope.Var var = i.next();
            if (var.getParentNode().isCatch() || compiler.getCodingConvention().isExported(var.getName())) {
                escaped.add(var);
            }
        }
    }
}
[492953] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659926755890
GPR[SSUN]-1659926755890
948429589
GPR[SPVATF]-1659926756113
GPR[EPVATF]-1659926756530
GPR[SPS]-1659926756530
[494116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:271.
GPR[EPS]-1659926757054
GPR[ESUN]-1659926757054
GPR[SSUN]-1659926757054
948429589
GPR[ESUN]-1659926757273
GPR[SSUN]-1659926757273
948429589
GPR[ESUN]-1659926757492
GPR[SSUN]-1659926757492
948429589
GPR[ESUN]-1659926757712
GPR[SSUN]-1659926757712
948429589
GPR[SPVATF]-1659926757929
GPR[EPVATF]-1659926758341
GPR[SPS]-1659926758341
[495937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$FlowState:354.
GPR[EPS]-1659926758874
GPR[ESUN]-1659926758874
GPR[SSUN]-1659926758874
948429589
GPR[SPVATF]-1659926759096
GPR[EPVATF]-1659926759513
GPR[SPS]-1659926759513
[497179] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$FlowState:353.
GPR[EPS]-1659926760116
GPR[ESUN]-1659926760116
GPR[SSUN]-1659926760116
1187751237
GPR[ESUN]-1659926760390
GPR[SSUN]-1659926760390
1207178244
GPR[SPVATF]-1659926760597
GPR[EPVATF]-1659926761013
GPR[SPS]-1659926761013
[498574] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowGraph$AbstractCfgNodeTraversalCallback:141.
GPR[EPS]-1659926761511
GPR[ESUN]-1659926761511
GPR[SSUN]-1659926761511
1207178244
GPR[SPVATF]-1659926761715
GPR[EPVATF]-1659926762136
GPR[SPS]-1659926762136
[499695] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowGraph$AbstractCfgNodeTraversalCallback:140.
GPR[EPS]-1659926762632
GPR[SPVATF]-1659926762632
GPR[EPVATF]-1659926763109
GPR[SPS]-1659926763109
[500661] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowGraph$AbstractCfgNodeTraversalCallback:140.
GPR[EPS]-1659926763598
GPR[ESUN]-1659926763598
GPR[SSUN]-1659926763598
1187751237
GPR[ESUN]-1659926763874
GPR[SSUN]-1659926763874
1187751237
GPR[SPVATF]-1659926764145
GPR[EPVATF]-1659926764576
GPR[SPS]-1659926764576
[502328] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1615.
GPR[EPS]-1659926765265
GPR[SPVATF]-1659926765265
GPR[EPVATF]-1659926766581
GPR[SPS]-1659926766581
[504642] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1615.
GPR[EPS]-1659926767579
GPR[ESUN]-1659926767579
GPR[SSUN]-1659926767579
1187751237
GPR[SPVATF]-1659926767854
GPR[EPVATF]-1659926768313
GPR[SPS]-1659926768313
[506048] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1611.
GPR[EPS]-1659926768985
GPR[SPVATF]-1659926768985
GPR[EPVATF]-1659926769397
GPR[SPS]-1659926769397
[507103] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1611.
GPR[EPS]-1659926770040
GPR[ESUN]-1659926770040
GPR[SSUN]-1659926770040
1187751237
GPR[SPVATF]-1659926770309
GPR[EPVATF]-1659926770705
GPR[SPS]-1659926770705
[508433] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1610.
GPR[EPS]-1659926771370
GPR[ESUN]-1659926771370
GPR[SSUN]-1659926771370
GPR[ESUN]-1659926771370
GPR[SSUN]-1659926771370
GPR[ESUN]-1659926771370
GPR[SSUN]-1659926771370
GPR[ESUN]-1659926771370
GPR[SSUN]-1659926771370
948429589
GPR[SPVATF]-1659926771596
GPR[EPVATF]-1659926771990
GPR[SPS]-1659926771991
[509575] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:313.
GPR[EPS]-1659926772512
GPR[ESUN]-1659926772512
GPR[SSUN]-1659926772512
948429589
GPR[ESUN]-1659926772735
GPR[SSUN]-1659926772735
1187751237
GPR[ESUN]-1659926773025
GPR[SSUN]-1659926773025
1187751237
GPR[ESUN]-1659926773293
GPR[SSUN]-1659926773293
948429589
GPR[SPVATF]-1659926773508
GPR[EPVATF]-1659926773893
GPR[SPS]-1659926773893
[511507] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:310.
GPR[EPS]-1659926774444
GPR[ESUN]-1659926774444
GPR[SSUN]-1659926774444
GPR[ESUN]-1659926774444
GPR[SSUN]-1659926774444
160819208
GPR[SPVATF]-1659926774690
GPR[EPVATF]-1659926775098
GPR[SPS]-1659926775098
[512569] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class ControlFlowAnalysis implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg;

    private java.util.Map<com.google.javascript.rhino.Node, java.lang.Integer> astPosition;

    private java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> nodePriorities;

    private final java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> priorityComparator = new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
        @java.lang.Override
        public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> a, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> b) {
            return astPosition.get(a.getValue()) - astPosition.get(b.getValue());
        }
    };

    private int astPositionCounter;

    private int priorityCounter;

    private final boolean shouldTraverseFunctions;

    private final boolean edgeAnnotations;

    private com.google.javascript.rhino.Node root;

    private final java.util.Deque<com.google.javascript.rhino.Node> exceptionHandler = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> finallyMap = com.google.common.collect.HashMultimap.create();

    ControlFlowAnalysis(com.google.javascript.jscomp.AbstractCompiler compiler, boolean shouldTraverseFunctions, boolean edgeAnnotations) {
        this.compiler = compiler;
        this.shouldTraverseFunctions = shouldTraverseFunctions;
        this.edgeAnnotations = edgeAnnotations;
    }

    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getCfg() {
        return cfg;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        this.root = root;
        astPositionCounter = 0;
        astPosition = com.google.common.collect.Maps.newHashMap();
        nodePriorities = com.google.common.collect.Maps.newHashMap();
        cfg = new com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph(com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(root), nodePriorities, edgeAnnotations);
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, this);
        astPosition.put(null, ++astPositionCounter);
        priorityCounter = 0;
        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry = cfg.getEntry();
        prioritizeFromEntryNode(entry);
        if (shouldTraverseFunctions) {
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
                com.google.javascript.rhino.Node value = candidate.getValue();
                if ((value != null) && value.isFunction()) {
                    com.google.common.base.Preconditions.checkState((!nodePriorities.containsKey(candidate)) || (candidate == entry));
                    prioritizeFromEntryNode(candidate);
                }
            }
        }
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
            if (!nodePriorities.containsKey(candidate)) {
                nodePriorities.put(candidate, ++priorityCounter);
            }
        }
        nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);
    }

    private void prioritizeFromEntryNode(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry) {
        java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> worklist = new java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>(10, priorityComparator);
        worklist.add(entry);
        while (!worklist.isEmpty()) {
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> current = worklist.remove();
            if (nodePriorities.containsKey(current)) {
                continue;
            }
            nodePriorities.put(current, ++priorityCounter);
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> successors = cfg.getDirectedSuccNodes(current);
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : successors) {
                worklist.add(candidate);
            }
        } 
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        astPosition.put(n, astPositionCounter++);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                if (shouldTraverseFunctions || (n == cfg.getEntry().getValue())) {
                    exceptionHandler.push(n);
                    return true;
                }
                return false;
            case com.google.javascript.rhino.Token.TRY :
                exceptionHandler.push(n);
                return true;
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.FOR :
                    return n == parent.getLastChild();
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return n != parent.getFirstChild();
                case com.google.javascript.rhino.Token.DO :
                    return n != parent.getFirstChild().getNext();
                case com.google.javascript.rhino.Token.SWITCH :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.CATCH :
                case com.google.javascript.rhino.Token.LABEL :
                    return n != parent.getFirstChild();
                case com.google.javascript.rhino.Token.FUNCTION :
                    return n == parent.getFirstChild().getNext().getNext();
                case com.google.javascript.rhino.Token.CONTINUE :
                case com.google.javascript.rhino.Token.BREAK :
                case com.google.javascript.rhino.Token.EXPR_RESULT :
                case com.google.javascript.rhino.Token.VAR :
                case com.google.javascript.rhino.Token.RETURN :
                case com.google.javascript.rhino.Token.THROW :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if (n == parent.getFirstChild().getNext()) {
                        com.google.common.base.Preconditions.checkState(exceptionHandler.peek() == parent);
                        exceptionHandler.pop();
                    }
            }
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
                handleIf(n);
                return;
            case com.google.javascript.rhino.Token.WHILE :
                handleWhile(n);
                return;
            case com.google.javascript.rhino.Token.DO :
                handleDo(n);
                return;
            case com.google.javascript.rhino.Token.FOR :
                handleFor(n);
                return;
            case com.google.javascript.rhino.Token.SWITCH :
                handleSwitch(n);
                return;
            case com.google.javascript.rhino.Token.CASE :
                handleCase(n);
                return;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                handleDefault(n);
                return;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.SCRIPT :
                handleStmtList(n);
                return;
            case com.google.javascript.rhino.Token.FUNCTION :
                handleFunction(n);
                return;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                handleExpr(n);
                return;
            case com.google.javascript.rhino.Token.THROW :
                handleThrow(n);
                return;
            case com.google.javascript.rhino.Token.TRY :
                handleTry(n);
                return;
            case com.google.javascript.rhino.Token.CATCH :
                handleCatch(n);
                return;
            case com.google.javascript.rhino.Token.BREAK :
                handleBreak(n);
                return;
            case com.google.javascript.rhino.Token.CONTINUE :
                handleContinue(n);
                return;
            case com.google.javascript.rhino.Token.RETURN :
                handleReturn(n);
                return;
            case com.google.javascript.rhino.Token.WITH :
                handleWith(n);
                return;
            case com.google.javascript.rhino.Token.LABEL :
                return;
            default :
                handleStmt(n);
                return;
        }
    }

    private void handleIf(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node thenBlock = node.getFirstChild().getNext();
        com.google.javascript.rhino.Node elseBlock = thenBlock.getNext();
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(thenBlock));
        if (elseBlock == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(elseBlock));
        }
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleWhile(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleDo(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleFor(com.google.javascript.rhino.Node forNode) {
        if (forNode.getChildCount() == 4) {
            com.google.javascript.rhino.Node init = forNode.getFirstChild();
            com.google.javascript.rhino.Node cond = init.getNext();
            com.google.javascript.rhino.Node iter = cond.getNext();
            com.google.javascript.rhino.Node body = iter.getNext();
            createEdge(init, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            createEdge(iter, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            connectToPossibleExceptionHandler(init, init);
            connectToPossibleExceptionHandler(forNode, cond);
            connectToPossibleExceptionHandler(iter, iter);
        } else {
            com.google.javascript.rhino.Node item = forNode.getFirstChild();
            com.google.javascript.rhino.Node collection = item.getNext();
            com.google.javascript.rhino.Node body = collection.getNext();
            createEdge(collection, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            connectToPossibleExceptionHandler(forNode, collection);
        }
    }

    private void handleSwitch(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getFirstChild().getNext(), com.google.javascript.rhino.Token.CASE, com.google.javascript.rhino.Token.EMPTY);
        if (next != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, next);
        } else if (node.getFirstChild().getNext() != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild().getNext());
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleCase(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, node.getFirstChild().getNext());
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getNext(), com.google.javascript.rhino.Token.CASE);
        if (next != null) {
            com.google.common.base.Preconditions.checkState(next.isCase());
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, next);
        } else {
            com.google.javascript.rhino.Node parent = node.getParent();
            com.google.javascript.rhino.Node deflt = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(parent.getFirstChild().getNext(), com.google.javascript.rhino.Token.DEFAULT_CASE);
            if (deflt != null) {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, deflt);
            } else {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
            }
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleDefault(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleWith(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleStmtList(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if ((((node.isBlock() && (parent != null)) && parent.isTry()) && (com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent) == node)) && (!com.google.javascript.jscomp.NodeUtil.hasCatchHandler(node))) {
            return;
        }
        com.google.javascript.rhino.Node child = node.getFirstChild();
        while ((child != null) && child.isFunction()) {
            child = child.getNext();
        } 
        if (child != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(child));
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.TRY :
                    break;
                default :
                    if (node.isBlock() && node.isSyntheticBlock()) {
                        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.SYN_BLOCK, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
                    }
                    break;
            }
        }
    }

    private void handleFunction(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(node.getChildCount() >= 3);
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext().getNext()));
        com.google.common.base.Preconditions.checkState(exceptionHandler.peek() == node);
        exceptionHandler.pop();
    }

    private void handleExpr(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleThrow(com.google.javascript.rhino.Node node) {
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleTry(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleCatch(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
    }

    private void handleBreak(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !com.google.javascript.jscomp.ControlFlowAnalysis.isBreakTarget(cur, label); cur = parent , parent = parent.getParent()) {
            if ((cur.isTry() && com.google.javascript.jscomp.NodeUtil.hasFinally(cur)) && (cur.getLastChild() != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            if (parent == null) {
                if (compiler.isIdeMode()) {
                    return;
                } else {
                    throw new java.lang.IllegalStateException("Cannot find break target.");
                }
            }
            previous = cur;
        }
        if (lastJump == node) {
            createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        } else {
            finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        }
    }

    private void handleContinue(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !com.google.javascript.jscomp.ControlFlowAnalysis.isContinueTarget(cur, parent, label); cur = parent , parent = parent.getParent()) {
            if ((cur.isTry() && com.google.javascript.jscomp.NodeUtil.hasFinally(cur)) && (cur.getLastChild() != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, cur.getLastChild());
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            com.google.common.base.Preconditions.checkState(parent != null, "Cannot find continue target.");
            previous = cur;
        }
        com.google.javascript.rhino.Node iter = cur;
        if (cur.getChildCount() == 4) {
            iter = cur.getFirstChild().getNext().getNext();
        }
        if (lastJump == node) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, iter);
        } else {
            finallyMap.put(lastJump, iter);
        }
    }

    private void handleReturn(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node lastJump = null;
        for (java.util.Iterator<com.google.javascript.rhino.Node> iter = exceptionHandler.iterator(); iter.hasNext();) {
            com.google.javascript.rhino.Node curHandler = iter.next();
            if (curHandler.isFunction()) {
                break;
            }
            if (com.google.javascript.jscomp.NodeUtil.hasFinally(curHandler)) {
                if (lastJump == null) {
                    createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, curHandler.getLastChild());
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(curHandler.getLastChild()));
                }
                lastJump = curHandler;
            }
        }
        if (node.hasChildren()) {
            connectToPossibleExceptionHandler(node, node.getFirstChild());
        }
        if (lastJump == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, null);
        } else {
            finallyMap.put(lastJump, null);
        }
    }

    private void handleStmt(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, cfa);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, null);
    }

    private static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node fromNode, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if (((parent == null) || parent.isFunction()) || ((cfa != null) && (node == cfa.root))) {
            return null;
        }
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.IF :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                if (parent.getNext() != null) {
                    if (parent.getNext().isCase()) {
                        return parent.getNext().getFirstChild().getNext();
                    } else if (parent.getNext().isDefaultCase()) {
                        return parent.getNext().getFirstChild();
                    } else {
                        com.google.common.base.Preconditions.checkState(false, "Not reachable");
                    }
                } else {
                    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                }
                break;
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent;
                } else {
                    return parent.getFirstChild().getNext().getNext();
                }
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
                return parent;
            case com.google.javascript.rhino.Token.TRY :
                if (parent.getFirstChild() == node) {
                    if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(parent.getLastChild());
                    } else {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                    }
                } else if (com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent) == node) {
                    if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getNext());
                    } else {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                    }
                } else if (parent.getLastChild() == node) {
                    if (cfa != null) {
                        for (com.google.javascript.rhino.Node finallyNode : cfa.finallyMap.get(parent)) {
                            cfa.createEdge(fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, finallyNode);
                        }
                    }
                    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                }
        }
        com.google.javascript.rhino.Node nextSibling = node.getNext();
        while ((nextSibling != null) && nextSibling.isFunction()) {
            nextSibling = nextSibling.getNext();
        } 
        if (nextSibling != null) {
            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(nextSibling);
        } else {
            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
        }
    }

    static com.google.javascript.rhino.Node computeFallThrough(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DO :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    return n.getFirstChild().getNext();
                }
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.LABEL :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getLastChild());
            default :
                return n;
        }
    }

    private void createEdge(com.google.javascript.rhino.Node fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch branch, com.google.javascript.rhino.Node toNode) {
        cfg.createNode(fromNode);
        cfg.createNode(toNode);
        cfg.connectIfNotFound(fromNode, branch, toNode);
    }

    private void connectToPossibleExceptionHandler(com.google.javascript.rhino.Node cfgNode, com.google.javascript.rhino.Node target) {
        if (com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(target) && (!exceptionHandler.isEmpty())) {
            com.google.javascript.rhino.Node lastJump = cfgNode;
            for (com.google.javascript.rhino.Node handler : exceptionHandler) {
                if (handler.isFunction()) {
                    return;
                }
                com.google.common.base.Preconditions.checkState(handler.isTry());
                com.google.javascript.rhino.Node catchBlock = com.google.javascript.jscomp.NodeUtil.getCatchBlock(handler);
                if (!com.google.javascript.jscomp.NodeUtil.hasCatchHandler(catchBlock)) {
                    if (lastJump == cfgNode) {
                        createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, handler.getLastChild());
                    } else {
                        finallyMap.put(lastJump, handler.getLastChild());
                    }
                } else if (lastJump == cfgNode) {
                    createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, catchBlock);
                    return;
                } else {
                    finallyMap.put(lastJump, catchBlock);
                }
                lastJump = handler;
            }
        }
    }

    private static com.google.javascript.rhino.Node getNextSiblingOfType(com.google.javascript.rhino.Node first, int... types) {
        for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
            for (int type : types) {
                if (c.getType() == type) {
                    return c;
                }
            }
        }
        return null;
    }

    public static boolean isBreakTarget(com.google.javascript.rhino.Node target, java.lang.String label) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.isBreakStructure(target, label != null) && com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(target.getParent(), label);
    }

    private static boolean isContinueTarget(com.google.javascript.rhino.Node target, com.google.javascript.rhino.Node parent, java.lang.String label) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.isContinueStructure(target) && com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(parent, label);
    }

    private static boolean matchLabel(com.google.javascript.rhino.Node target, java.lang.String label) {
        if (label == null) {
            return true;
        }
        while (target.isLabel()) {
            if (target.getFirstChild().getString().equals(label)) {
                return true;
            }
            target = target.getParent();
        } 
        return false;
    }

    public static boolean mayThrowException(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if ((!com.google.javascript.jscomp.ControlFlowGraph.isEnteringNewCfgNode(c)) && com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(c)) {
                return true;
            }
        }
        return false;
    }

    static boolean isBreakStructure(com.google.javascript.rhino.Node n, boolean labeled) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.SWITCH :
                return true;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.TRY :
                return labeled;
            default :
                return false;
        }
    }

    static boolean isContinueStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getExceptionHandler(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node cur = n; (!cur.isScript()) && (!cur.isFunction()); cur = cur.getParent()) {
            com.google.javascript.rhino.Node catchNode = com.google.javascript.jscomp.ControlFlowAnalysis.getCatchHandlerForBlock(cur);
            if (catchNode != null) {
                return catchNode;
            }
        }
        return null;
    }

    static com.google.javascript.rhino.Node getCatchHandlerForBlock(com.google.javascript.rhino.Node block) {
        if ((block.isBlock() && block.getParent().isTry()) && (block.getParent().getFirstChild() == block)) {
            for (com.google.javascript.rhino.Node s = block.getNext(); s != null; s = s.getNext()) {
                if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(s)) {
                    return s.getFirstChild();
                }
            }
        }
        return null;
    }

    private static class AstControlFlowGraph extends com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> {
        private final java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities;

        private AstControlFlowGraph(com.google.javascript.rhino.Node entry, java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities, boolean edgeAnnotations) {
            super(entry, true, edgeAnnotations);
            this.priorities = priorities;
        }

        @java.lang.Override
        public java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> getOptionalNodeComparator(boolean isForward) {
            if (isForward) {
                return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                    @java.lang.Override
                    public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                        return getPosition(n1) - getPosition(n2);
                    }
                };
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(287).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(287).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(287).collectInput("isForward",isForward);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(287).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(287).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                        @java.lang.Override
                        public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                            return getPosition(n2) - getPosition(n1);
                        }
                    };

            }
        }

        private int getPosition(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n) {
            java.lang.Integer priority = priorities.get(n);
            com.google.common.base.Preconditions.checkNotNull(priority);
            return priority;
        }
    }
}
[512569] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659926775506
GPR[SSUN]-1659926775506
948429589
GPR[SPVATF]-1659926775733
GPR[EPVATF]-1659926776119
GPR[SPS]-1659926776119
[513703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:315.
GPR[EPS]-1659926776640
GPR[SPVATF]-1659926776640
GPR[EPVATF]-1659926777034
GPR[SPS]-1659926777034
[514613] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:315.
GPR[EPS]-1659926777550
GPR[ESUN]-1659926777550
GPR[SSUN]-1659926777550
948429589
GPR[SPVATF]-1659926777770
GPR[EPVATF]-1659926778152
GPR[SPS]-1659926778152
[515755] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:309.
GPR[EPS]-1659926778692
GPR[SPVATF]-1659926778692
GPR[EPVATF]-1659926779071
GPR[SPS]-1659926779071
[516645] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:309.
GPR[EPS]-1659926779582
GPR[ESUN]-1659926779582
GPR[SSUN]-1659926779582
948429589
GPR[ESUN]-1659926779802
GPR[SSUN]-1659926779802
948429589
GPR[SPVATF]-1659926780022
GPR[EPVATF]-1659926780413
GPR[SPS]-1659926780413
[518041] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:307.
GPR[EPS]-1659926780978
GPR[SPVATF]-1659926780978
GPR[EPVATF]-1659926781371
GPR[SPS]-1659926781371
[518957] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:307.
GPR[EPS]-1659926781894
GPR[ESUN]-1659926781894
GPR[SSUN]-1659926781894
948429589
GPR[ESUN]-1659926782114
GPR[SSUN]-1659926782114
948429589
GPR[SPVATF]-1659926782330
GPR[EPVATF]-1659926782710
GPR[SPS]-1659926782710
[520129] ERROR ConstraintModelBuilder - Unable to compile the change: 
abstract class DataFlowAnalysis<N, L extends com.google.javascript.jscomp.graph.LatticeElement> {
    private final com.google.javascript.jscomp.ControlFlowGraph<N> cfg;

    final com.google.javascript.jscomp.JoinOp<L> joinOp;

    protected final java.util.Set<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> orderedWorkSet;

    public static final int MAX_STEPS = 200000;

    DataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N> targetCfg, com.google.javascript.jscomp.JoinOp<L> joinOp) {
        this.cfg = targetCfg;
        this.joinOp = joinOp;
        java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> nodeComparator = cfg.getOptionalNodeComparator(isForward());
        if (nodeComparator != null) {
            this.orderedWorkSet = com.google.common.collect.Sets.newTreeSet(nodeComparator);
        } else {
            this.orderedWorkSet = com.google.common.collect.Sets.newLinkedHashSet();
        }
    }

    final com.google.javascript.jscomp.ControlFlowGraph<N> getCfg() {
        return cfg;
    }

    L getExitLatticeElement() {
        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node = getCfg().getImplicitReturn();
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        return state.getIn();
    }

    @java.lang.SuppressWarnings("unchecked")
    protected L join(L latticeA, L latticeB) {
        return joinOp.apply(com.google.common.collect.Lists.<L>newArrayList(latticeA, latticeB));
    }

    abstract boolean isForward();

    abstract L flowThrough(N node, L input);

    final void analyze() {
        analyze(com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS);
    }

    final void analyze(int maxSteps) {
        initialize();
        int step = 0;
        while (!orderedWorkSet.isEmpty()) {
            if (step > maxSteps) {
                throw new com.google.javascript.jscomp.DataFlowAnalysis.MaxIterationsExceededException(("Analysis did not terminate after " + maxSteps) + " iterations");
            }
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> curNode = orderedWorkSet.iterator().next();
            orderedWorkSet.remove(curNode);
            joinInputs(curNode);
            if (flow(curNode)) {
                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> nextNodes = (isForward()) ? cfg.getDirectedSuccNodes(curNode) : cfg.getDirectedPredNodes(curNode);
                for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> nextNode : nextNodes) {
                    if (nextNode != cfg.getImplicitReturn()) {
                        orderedWorkSet.add(nextNode);
                    }
                }
            }
            step++;
        } 
        if (isForward()) {
            joinInputs(getCfg().getImplicitReturn());
        }
    }

    abstract L createInitialEstimateLattice();

    abstract L createEntryLattice();

    protected void initialize() {
        orderedWorkSet.clear();
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node : cfg.getDirectedGraphNodes()) {
            node.setAnnotation(new com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L>(createInitialEstimateLattice(), createInitialEstimateLattice()));
            if (node != cfg.getImplicitReturn()) {
                orderedWorkSet.add(node);
            }
        }
    }

    protected boolean flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        if (isForward()) {
            L outBefore = state.out;
            state.out = flowThrough(node.getValue(), state.in);
            return !outBefore.equals(state.out);
        } else {
            L inBefore = state.in;
            state.in = flowThrough(node.getValue(), state.out);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(294).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(294).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(294).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(294).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS",com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(294).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.orderedWorkSet",com.google.javascript.jscomp.DataFlowAnalysis.this.orderedWorkSet);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(294).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.cfg",com.google.javascript.jscomp.DataFlowAnalysis.this.cfg);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(294).collectInput("state",state);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(294).collectInput("inBefore",inBefore);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(294).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.joinOp",com.google.javascript.jscomp.DataFlowAnalysis.this.joinOp);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(294).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(294).collectionEnds();
            }
            if (runtimeAngelicValue)
                return !inBefore.equals(state.in);

        }
    }

    protected void joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        if (isForward()) {
            if (cfg.getEntry() == node) {
                state.setIn(createEntryLattice());
            } else {
                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> inNodes = cfg.getDirectedPredNodes(node);
                if (inNodes.size() == 1) {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> inNodeState = inNodes.get(0).getAnnotation();
                    state.setIn(inNodeState.getOut());
                } else if (inNodes.size() > 1) {
                    java.util.List<L> values = new java.util.ArrayList<L>(inNodes.size());
                    for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> currentNode : inNodes) {
                        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> currentNodeState = currentNode.getAnnotation();
                        values.add(currentNodeState.getOut());
                    }
                    state.setIn(joinOp.apply(values));
                }
            }
        } else {
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> inNodes = cfg.getDirectedSuccNodes(node);
            if (inNodes.size() == 1) {
                com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> inNode = inNodes.get(0);
                if (inNode == cfg.getImplicitReturn()) {
                    state.setOut(createEntryLattice());
                } else {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> inNodeState = inNode.getAnnotation();
                    state.setOut(inNodeState.getIn());
                }
            } else if (inNodes.size() > 1) {
                java.util.List<L> values = new java.util.ArrayList<L>(inNodes.size());
                for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> currentNode : inNodes) {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> currentNodeState = currentNode.getAnnotation();
                    values.add(currentNodeState.getIn());
                }
                state.setOut(joinOp.apply(values));
            }
        }
    }

    static class FlowState<L extends com.google.javascript.jscomp.graph.LatticeElement> implements com.google.javascript.jscomp.graph.Annotation {
        private L in;

        private L out;

        private FlowState(L inState, L outState) {
            com.google.common.base.Preconditions.checkNotNull(inState);
            com.google.common.base.Preconditions.checkNotNull(outState);
            this.in = inState;
            this.out = outState;
        }

        L getIn() {
            return in;
        }

        void setIn(L in) {
            com.google.common.base.Preconditions.checkNotNull(in);
            this.in = in;
        }

        L getOut() {
            return out;
        }

        void setOut(L out) {
            com.google.common.base.Preconditions.checkNotNull(out);
            this.out = out;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.format("IN: %s OUT: %s", in, out);
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(in, out);
        }
    }

    static class MaxIterationsExceededException extends java.lang.RuntimeException {
        private static final long serialVersionUID = 1L;

        MaxIterationsExceededException(java.lang.String msg) {
            super(msg);
        }
    }

    static abstract class BranchedForwardDataFlowAnalysis<N, L extends com.google.javascript.jscomp.graph.LatticeElement> extends com.google.javascript.jscomp.DataFlowAnalysis<N, L> {
        @java.lang.Override
        protected void initialize() {
            orderedWorkSet.clear();
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node : getCfg().getDirectedGraphNodes()) {
                int outEdgeCount = getCfg().getOutEdges(node.getValue()).size();
                java.util.List<L> outLattices = com.google.common.collect.Lists.newArrayList();
                for (int i = 0; i < outEdgeCount; i++) {
                    outLattices.add(createInitialEstimateLattice());
                }
                node.setAnnotation(new com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L>(createInitialEstimateLattice(), outLattices));
                if (node != getCfg().getImplicitReturn()) {
                    orderedWorkSet.add(node);
                }
            }
        }

        BranchedForwardDataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N> targetCfg, com.google.javascript.jscomp.JoinOp<L> joinOp) {
            super(targetCfg, joinOp);
        }

        @java.lang.Override
        L getExitLatticeElement() {
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node = getCfg().getImplicitReturn();
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            return state.getIn();
        }

        @java.lang.Override
        final boolean isForward() {
            return true;
        }

        abstract java.util.List<L> branchedFlowThrough(N node, L input);

        @java.lang.Override
        protected final boolean flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            java.util.List<L> outBefore = state.out;
            state.out = branchedFlowThrough(node.getValue(), state.in);
            com.google.common.base.Preconditions.checkState(outBefore.size() == state.out.size());
            for (int i = 0; i < outBefore.size(); i++) {
                if (!outBefore.get(i).equals(state.out.get(i))) {
                    return true;
                }
            }
            return false;
        }

        @java.lang.Override
        protected void joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> predNodes = getCfg().getDirectedPredNodes(node);
            java.util.List<L> values = new java.util.ArrayList<L>(predNodes.size());
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> predNode : predNodes) {
                com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> predNodeState = predNode.getAnnotation();
                L in = predNodeState.out.get(getCfg().getDirectedSuccNodes(predNode).indexOf(node));
                values.add(in);
            }
            if (getCfg().getEntry() == node) {
                state.setIn(createEntryLattice());
            } else if (!values.isEmpty()) {
                state.setIn(joinOp.apply(values));
            }
        }
    }

    static class BranchedFlowState<L extends com.google.javascript.jscomp.graph.LatticeElement> implements com.google.javascript.jscomp.graph.Annotation {
        private L in;

        private java.util.List<L> out;

        private BranchedFlowState(L inState, java.util.List<L> outState) {
            com.google.common.base.Preconditions.checkNotNull(inState);
            com.google.common.base.Preconditions.checkNotNull(outState);
            this.in = inState;
            this.out = outState;
        }

        L getIn() {
            return in;
        }

        void setIn(L in) {
            com.google.common.base.Preconditions.checkNotNull(in);
            this.in = in;
        }

        java.util.List<L> getOut() {
            return out;
        }

        void setOut(java.util.List<L> out) {
            com.google.common.base.Preconditions.checkNotNull(out);
            for (L item : out) {
                com.google.common.base.Preconditions.checkNotNull(item);
            }
            this.out = out;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.format("IN: %s OUT: %s", in, out);
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(in, out);
        }
    }

    static void computeEscaped(final com.google.javascript.jscomp.Scope jsScope, final java.util.Set<com.google.javascript.jscomp.Scope.Var> escaped, com.google.javascript.jscomp.AbstractCompiler compiler) {
        com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback finder = new com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback() {
            @java.lang.Override
            public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
                if (((jsScope == t.getScope()) || (!n.isName())) || parent.isFunction()) {
                    return;
                }
                java.lang.String name = n.getString();
                com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name);
                if ((var != null) && (var.scope == jsScope)) {
                    escaped.add(jsScope.getVar(name));
                }
            }
        };
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, finder);
        t.traverseAtScope(jsScope);
        for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> i = jsScope.getVars(); i.hasNext();) {
            com.google.javascript.jscomp.Scope.Var var = i.next();
            if (var.getParentNode().isCatch() || compiler.getCodingConvention().isExported(var.getName())) {
                escaped.add(var);
            }
        }
    }
}
[520129] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659926783066
GPR[SSUN]-1659926783066
948429589
GPR[SPVATF]-1659926783290
GPR[EPVATF]-1659926783682
GPR[SPS]-1659926783682
[521255] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:275.
GPR[EPS]-1659926784192
GPR[ESUN]-1659926784192
GPR[SSUN]-1659926784192
948429589
GPR[ESUN]-1659926784409
GPR[SSUN]-1659926784409
948429589
GPR[ESUN]-1659926784626
GPR[SSUN]-1659926784626
948429589
GPR[SPVATF]-1659926784842
GPR[EPVATF]-1659926785255
GPR[SPS]-1659926785255
[522839] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$FlowState:363.
GPR[EPS]-1659926785776
GPR[ESUN]-1659926785776
GPR[SSUN]-1659926785776
948429589
GPR[SPVATF]-1659926785998
GPR[EPVATF]-1659926786387
GPR[SPS]-1659926786387
[523981] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$FlowState:362.
GPR[EPS]-1659926786918
GPR[ESUN]-1659926786918
GPR[SSUN]-1659926786918
-718432441
GPR[SPVATF]-1659926787130
GPR[EPVATF]-1659926787531
GPR[SPS]-1659926787531
[525250] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:472.
GPR[EPS]-1659926788187
GPR[ESUN]-1659926788187
GPR[SSUN]-1659926788187
-718432441
GPR[SPVATF]-1659926788397
GPR[EPVATF]-1659926788838
GPR[SPS]-1659926788838
[526555] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:471.
GPR[EPS]-1659926789492
GPR[ESUN]-1659926789492
GPR[SSUN]-1659926789492
-718432441
GPR[SPVATF]-1659926789700
GPR[EPVATF]-1659926790102
GPR[SPS]-1659926790102
[527811] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:470.
GPR[EPS]-1659926790748
GPR[ESUN]-1659926790748
GPR[SSUN]-1659926790748
-718432441
GPR[SPVATF]-1659926790957
GPR[EPVATF]-1659926791351
GPR[SPS]-1659926791351
[529070] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:469.
GPR[EPS]-1659926792007
GPR[ESUN]-1659926792007
GPR[SSUN]-1659926792007
-718432441
GPR[SPVATF]-1659926792216
GPR[EPVATF]-1659926792615
GPR[SPS]-1659926792615
[530335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:468.
GPR[EPS]-1659926793272
GPR[ESUN]-1659926793272
GPR[SSUN]-1659926793272
-718432441
GPR[SPVATF]-1659926793481
GPR[EPVATF]-1659926793898
GPR[SPS]-1659926793898
[531624] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:465.
GPR[EPS]-1659926794561
GPR[ESUN]-1659926794561
GPR[SSUN]-1659926794561
948429589
GPR[ESUN]-1659926794778
GPR[SSUN]-1659926794778
1852376448
GPR[SPVATF]-1659926794985
GPR[EPVATF]-1659926795463
GPR[SPS]-1659926795463
[533029] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:184.
GPR[EPS]-1659926795966
GPR[ESUN]-1659926795966
GPR[SSUN]-1659926795966
79711797
GPR[ESUN]-1659926796200
GPR[SSUN]-1659926796200
948429589
GPR[ESUN]-1659926796422
GPR[SSUN]-1659926796422
948429589
GPR[SPVATF]-1659926796640
GPR[EPVATF]-1659926797057
GPR[SPS]-1659926797057
[534676] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:573.
GPR[EPS]-1659926797613
GPR[SPVATF]-1659926797613
GPR[EPVATF]-1659926798041
GPR[SPS]-1659926798041
[535636] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:573.
GPR[EPS]-1659926798573
GPR[ESUN]-1659926798573
GPR[SSUN]-1659926798573
948429589
GPR[ESUN]-1659926798806
GPR[SSUN]-1659926798806
948429589
GPR[SPVATF]-1659926799030
GPR[EPVATF]-1659926799472
GPR[SPS]-1659926799472
[537063] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$1:556.
GPR[EPS]-1659926800000
GPR[ESUN]-1659926800000
GPR[SSUN]-1659926800000
948429589
GPR[SPVATF]-1659926800227
GPR[EPVATF]-1659926800663
GPR[SPS]-1659926800663
[538289] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$1:554.
GPR[EPS]-1659926801226
GPR[SPVATF]-1659926801227
GPR[EPVATF]-1659926801689
GPR[SPS]-1659926801689
[539281] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$1:554.
GPR[EPS]-1659926802218
GPR[ESUN]-1659926802218
GPR[SSUN]-1659926802218
948429589
GPR[ESUN]-1659926802442
GPR[SSUN]-1659926802442
948429589
GPR[SPVATF]-1659926802666
GPR[EPVATF]-1659926803107
GPR[SPS]-1659926803107
[540788] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:571.
GPR[EPS]-1659926803725
GPR[ESUN]-1659926803725
GPR[SSUN]-1659926803725
948429589
GPR[SPVATF]-1659926803951
GPR[EPVATF]-1659926805298
GPR[SPS]-1659926805298
[543196] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:567.
GPR[EPS]-1659926806133
GPR[ESUN]-1659926806133
GPR[SSUN]-1659926806133
948429589
GPR[ESUN]-1659926806352
GPR[SSUN]-1659926806352
948429589
GPR[ESUN]-1659926806574
GPR[SSUN]-1659926806574
948429589
GPR[ESUN]-1659926806791
GPR[SSUN]-1659926806791
948429589
GPR[ESUN]-1659926807005
GPR[SSUN]-1659926807005
948429589
GPR[SPVATF]-1659926807225
GPR[EPVATF]-1659926808360
GPR[SPS]-1659926808360
[545935] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:288.
GPR[EPS]-1659926808872
GPR[SPVATF]-1659926808872
GPR[EPVATF]-1659926809276
GPR[SPS]-1659926809276
[546844] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:288.
GPR[EPS]-1659926809781
GPR[ESUN]-1659926809781
GPR[SSUN]-1659926809781
948429589
GPR[ESUN]-1659926810004
GPR[SSUN]-1659926810005
948429589
GPR[SPVATF]-1659926810225
GPR[EPVATF]-1659926810617
GPR[SPS]-1659926810617
[548277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:269.
GPR[EPS]-1659926811214
GPR[ESUN]-1659926811214
GPR[SSUN]-1659926811214
948429589
GPR[ESUN]-1659926811442
GPR[SSUN]-1659926811442
948429589
GPR[ESUN]-1659926811661
GPR[SSUN]-1659926811661
948429589
GPR[ESUN]-1659926811880
GPR[SSUN]-1659926811880
948429589
GPR[SPVATF]-1659926812096
GPR[EPVATF]-1659926812488
GPR[SPS]-1659926812488
[550063] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:257.
GPR[EPS]-1659926813000
GPR[ESUN]-1659926813000
GPR[SSUN]-1659926813000
948429589
GPR[SPVATF]-1659926813220
GPR[EPVATF]-1659926813591
GPR[SPS]-1659926813591
[551203] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:256.
GPR[EPS]-1659926814140
GPR[SPVATF]-1659926814140
GPR[EPVATF]-1659926814521
GPR[SPS]-1659926814521
[552072] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:256.
GPR[EPS]-1659926815009
GPR[ESUN]-1659926815009
GPR[SSUN]-1659926815009
948429589
GPR[SPVATF]-1659926815249
GPR[EPVATF]-1659926815634
GPR[SPS]-1659926815634
[553215] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:254.
GPR[EPS]-1659926816152
GPR[ESUN]-1659926816152
GPR[SSUN]-1659926816152
948429589
GPR[SPVATF]-1659926816372
GPR[EPVATF]-1659926816755
GPR[SPS]-1659926816755
[554335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:253.
GPR[EPS]-1659926817272
GPR[ESUN]-1659926817272
GPR[SSUN]-1659926817272
948429589
GPR[SPVATF]-1659926817494
GPR[EPVATF]-1659926817885
GPR[SPS]-1659926817885
[555481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:252.
GPR[EPS]-1659926818418
GPR[ESUN]-1659926818418
GPR[SSUN]-1659926818418
1331276989
GPR[SPVATF]-1659926818630
GPR[EPVATF]-1659926819015
GPR[SPS]-1659926819015
[556595] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:356.
GPR[EPS]-1659926819532
GPR[ESUN]-1659926819532
GPR[SSUN]-1659926819532
1331276989
GPR[ESUN]-1659926819743
GPR[SSUN]-1659926819743
1331276989
GPR[ESUN]-1659926819950
GPR[SSUN]-1659926819950
1331276989
GPR[SPVATF]-1659926820153
GPR[EPVATF]-1659926820535
GPR[SPS]-1659926820535
[558116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:367.
GPR[EPS]-1659926821053
GPR[ESUN]-1659926821053
GPR[SSUN]-1659926821053
1331276989
GPR[SPVATF]-1659926821257
GPR[EPVATF]-1659926821634
GPR[SPS]-1659926821634
[559256] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:365.
GPR[EPS]-1659926822193
GPR[ESUN]-1659926822193
GPR[SSUN]-1659926822193
1331276989
GPR[SPVATF]-1659926822398
GPR[EPVATF]-1659926822777
GPR[SPS]-1659926822777
[560342] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:364.
GPR[EPS]-1659926823279
GPR[ESUN]-1659926823279
GPR[SSUN]-1659926823279
1331276989
GPR[ESUN]-1659926823486
GPR[SSUN]-1659926823486
1331276989
GPR[ESUN]-1659926823689
GPR[SSUN]-1659926823689
1331276989
GPR[SPVATF]-1659926823892
GPR[EPVATF]-1659926824263
GPR[SPS]-1659926824263
[561820] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:360.
GPR[EPS]-1659926824758
GPR[ESUN]-1659926824758
GPR[SSUN]-1659926824758
1331276989
GPR[SPVATF]-1659926824959
GPR[EPVATF]-1659926825356
GPR[SPS]-1659926825356
[562912] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:359.
GPR[EPS]-1659926825849
GPR[ESUN]-1659926825849
GPR[SSUN]-1659926825849
1331276989
GPR[SPVATF]-1659926826054
GPR[EPVATF]-1659926826434
GPR[SPS]-1659926826434
[564011] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:358.
GPR[EPS]-1659926826948
GPR[ESUN]-1659926826948
GPR[SSUN]-1659926826948
1331276989
GPR[SPVATF]-1659926827155
GPR[EPVATF]-1659926827532
GPR[SPS]-1659926827532
[565111] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:355.
GPR[EPS]-1659926828049
GPR[SPVATF]-1659926828049
GPR[EPVATF]-1659926828445
GPR[SPS]-1659926828445
[566016] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:355.
GPR[EPS]-1659926828953
GPR[ESUN]-1659926828953
GPR[SSUN]-1659926828953
1331276989
GPR[SPVATF]-1659926829159
GPR[EPVATF]-1659926829541
GPR[SPS]-1659926829541
[567166] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:352.
GPR[EPS]-1659926830103
GPR[SPVATF]-1659926830103
GPR[EPVATF]-1659926830496
GPR[SPS]-1659926830496
[568064] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:352.
GPR[EPS]-1659926831001
GPR[ESUN]-1659926831001
GPR[SSUN]-1659926831001
1331276989
GPR[ESUN]-1659926831209
GPR[SSUN]-1659926831209
-1117079791
GPR[ESUN]-1659926831407
GPR[SSUN]-1659926831407
-1117079791
GPR[SPVATF]-1659926831604
GPR[EPVATF]-1659926832013
GPR[SPS]-1659926832013
[569576] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:744.
GPR[EPS]-1659926832513
GPR[ESUN]-1659926832513
GPR[SSUN]-1659926832513
-1117079791
GPR[SPVATF]-1659926832706
GPR[EPVATF]-1659926833107
GPR[SPS]-1659926833107
[570649] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:743.
GPR[EPS]-1659926833586
GPR[ESUN]-1659926833586
GPR[SSUN]-1659926833586
-1117079791
GPR[ESUN]-1659926833780
GPR[SSUN]-1659926833780
-1117079791
GPR[SPVATF]-1659926833970
GPR[EPVATF]-1659926834374
GPR[SPS]-1659926834374
[571969] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:174.
GPR[EPS]-1659926834906
GPR[ESUN]-1659926834906
GPR[SSUN]-1659926834906
1187751237
GPR[ESUN]-1659926835175
GPR[SSUN]-1659926835175
-1117079791
GPR[ESUN]-1659926835367
GPR[SSUN]-1659926835367
-1117079791
GPR[SPVATF]-1659926835556
GPR[EPVATF]-1659926835971
GPR[SPS]-1659926835971
[573512] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:239.
GPR[EPS]-1659926836449
GPR[ESUN]-1659926836449
GPR[SSUN]-1659926836449
2013302092
GPR[SPVATF]-1659926836676
GPR[EPVATF]-1659926837100
GPR[SPS]-1659926837100
[574698] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:205.
GPR[EPS]-1659926837635
GPR[ESUN]-1659926837635
GPR[SSUN]-1659926837635
2013302092
GPR[SPVATF]-1659926837864
GPR[EPVATF]-1659926838343
GPR[SPS]-1659926838343
[575941] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:194.
GPR[EPS]-1659926838878
GPR[ESUN]-1659926838878
GPR[SSUN]-1659926838878
2013302092
GPR[SPVATF]-1659926839104
GPR[EPVATF]-1659926839549
GPR[SPS]-1659926839549
[577143] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:193.
GPR[EPS]-1659926840080
GPR[SPVATF]-1659926840080
GPR[EPVATF]-1659926840503
GPR[SPS]-1659926840503
[578096] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:193.
GPR[EPS]-1659926841033
GPR[ESUN]-1659926841033
GPR[SSUN]-1659926841033
2013302092
GPR[ESUN]-1659926841260
GPR[SSUN]-1659926841260
2013302092
GPR[ESUN]-1659926841483
GPR[SSUN]-1659926841484
2433571
GPR[ESUN]-1659926841711
GPR[SSUN]-1659926841711
2433571
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
GPR[ESUN]-1659926841938
GPR[SSUN]-1659926841938
1537627151
GPR[ESUN]-1659926842136
GPR[SSUN]-1659926842136
-1345859678
GPR[ESUN]-1659926842376
GPR[SSUN]-1659926842376
-1345859678
GPR[ESUN]-1659926842612
GPR[SSUN]-1659926842612
1852376448
GPR[ESUN]-1659926842821
GPR[SSUN]-1659926842821
-1117079791
GPR[ESUN]-1659926843012
GPR[SSUN]-1659926843012
-1117079791
GPR[ESUN]-1659926843201
GPR[SSUN]-1659926843201
-1117079791
GPR[SPVATF]-1659926843396
GPR[EPVATF]-1659926843851
GPR[SPS]-1659926843851
[581411] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:652.
GPR[EPS]-1659926844348
GPR[ESUN]-1659926844348
GPR[SSUN]-1659926844348
-1117079791
GPR[SPVATF]-1659926844541
GPR[EPVATF]-1659926844998
GPR[SPS]-1659926844998
[582542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:649.
GPR[EPS]-1659926845479
GPR[ESUN]-1659926845479
GPR[SSUN]-1659926845479
-1117079791
GPR[SPVATF]-1659926845747
GPR[EPVATF]-1659926846249
GPR[SPS]-1659926846249
[583791] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:648.
GPR[EPS]-1659926846728
GPR[ESUN]-1659926846728
GPR[SSUN]-1659926846728
-1117079791
GPR[ESUN]-1659926846926
GPR[SSUN]-1659926846926
-1117079791
GPR[SPVATF]-1659926847118
GPR[EPVATF]-1659926847589
GPR[SPS]-1659926847589
[586040] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:231.
GPR[EPS]-1659926848977
GPR[ESUN]-1659926848977
GPR[SSUN]-1659926848977
-1117079791
GPR[SPVATF]-1659926849175
GPR[EPVATF]-1659926849984
GPR[SPS]-1659926849984
[587583] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:279.
GPR[EPS]-1659926850520
GPR[ESUN]-1659926850520
GPR[SSUN]-1659926850520
-718432441
GPR[SPVATF]-1659926850744
GPR[EPVATF]-1659926851588
GPR[SPS]-1659926851588
[589321] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:911.
GPR[EPS]-1659926852258
GPR[ESUN]-1659926852258
GPR[SSUN]-1659926852258
-718432441
GPR[SPVATF]-1659926852466
GPR[EPVATF]-1659926852886
GPR[SPS]-1659926852886
[590601] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:910.
GPR[EPS]-1659926853538
GPR[ESUN]-1659926853538
GPR[SSUN]-1659926853538
-1117079791
GPR[ESUN]-1659926853734
GPR[SSUN]-1659926853734
-1117079791
GPR[SPVATF]-1659926853927
GPR[EPVATF]-1659926854108
[591171] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926854108
GPR[SSUN]-1659926854108
-1117079791
GPR[SPVATF]-1659926854304
GPR[EPVATF]-1659926854486
[591550] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926854487
GPR[SSUN]-1659926854487
-1117079791
GPR[SPVATF]-1659926854685
GPR[EPVATF]-1659926854873
[591936] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926854873
GPR[SSUN]-1659926854873
-1117079791
GPR[SPVATF]-1659926855071
GPR[EPVATF]-1659926855255
[592318] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926855255
GPR[SSUN]-1659926855255
-1117079791
GPR[ESUN]-1659926855450
GPR[SSUN]-1659926855450
-1117079791
GPR[SPVATF]-1659926855641
GPR[EPVATF]-1659926855826
[592889] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926855826
GPR[SSUN]-1659926855826
-1117079791
GPR[SPVATF]-1659926856021
GPR[EPVATF]-1659926856206
[593269] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926856206
GPR[SSUN]-1659926856206
2433571
GPR[ESUN]-1659926856439
GPR[SSUN]-1659926856439
1187751237
GPR[SPVATF]-1659926856705
GPR[EPVATF]-1659926857099
GPR[SPS]-1659926857099
[594870] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:841.
GPR[EPS]-1659926857807
GPR[SPVATF]-1659926857807
GPR[EPVATF]-1659926858194
GPR[SPS]-1659926858194
[595912] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:841.
GPR[EPS]-1659926858849
GPR[ESUN]-1659926858850
GPR[SSUN]-1659926858850
GPR[ESUN]-1659926858850
GPR[SSUN]-1659926858850
-1117079791
GPR[ESUN]-1659926859112
GPR[SSUN]-1659926859112
-1117079791
GPR[SPVATF]-1659926859305
GPR[EPVATF]-1659926859482
[596545] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926859482
GPR[EPVATF]-1659926859659
[596722] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926859659
GPR[SSUN]-1659926859659
-1117079791
GPR[SPVATF]-1659926859857
GPR[EPVATF]-1659926860034
[597097] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926860034
GPR[SSUN]-1659926860034
-1117079791
GPR[SPVATF]-1659926860227
GPR[EPVATF]-1659926860411
[597474] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926860411
GPR[SSUN]-1659926860411
-1345859678
GPR[SPVATF]-1659926860651
GPR[EPVATF]-1659926861046
GPR[SPS]-1659926861046
[598529] ERROR ConstraintModelBuilder - Unable to compile the change: 
class IRFactory {
    static final java.lang.String GETTER_ERROR_MESSAGE = "getters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SETTER_ERROR_MESSAGE = "setters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SUSPICIOUS_COMMENT_WARNING = "Non-JSDoc comment has annotations. " + "Did you mean to start it with '/**'?";

    private final java.lang.String sourceString;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.parsing.Config config;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.ImmutableSet.of("use strict");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield");

    private final java.util.Set<java.lang.String> reservedKeywords;

    private final java.util.Set<com.google.javascript.rhino.head.ast.Comment> parsedComments = com.google.common.collect.Sets.newHashSet();

    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);

    com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();

    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;

    private com.google.javascript.rhino.Node templateNode;

    private IRFactory(java.lang.String sourceString, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.sourceString = sourceString;
        this.sourceFile = sourceFile;
        this.sourceName = (sourceFile == null) ? null : sourceFile.getName();
        this.config = config;
        this.errorReporter = errorReporter;
        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();
        this.templateNode = createTemplateNode();
        switch (config.languageMode) {
            case ECMASCRIPT3 :
                reservedKeywords = null;
                break;
            case ECMASCRIPT5 :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;
                break;
            case ECMASCRIPT5_STRICT :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;
                break;
            default :
                throw new java.lang.IllegalStateException("unknown language mode");
        }
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        templateNode.setStaticSourceFile(sourceFile);
        return templateNode;
    }

    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.rhino.head.ast.AstRoot node, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, sourceFile, config, errorReporter);
        com.google.javascript.rhino.Node irNode = irFactory.transform(node);
        if (node.getComments() != null) {
            for (com.google.javascript.rhino.head.ast.Comment comment : node.getComments()) {
                if ((comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.JSDOC) && (!irFactory.parsedComments.contains(comment))) {
                    irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
                } else if (comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.BLOCK_COMMENT) {
                    irFactory.handleBlockComment(comment);
                }
            }
        }
        irFactory.setFileOverviewJsDoc(irNode);
        return irNode;
    }

    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();
        if (rootNodeJsDoc != null) {
            irNode.setJSDocInfo(rootNodeJsDoc);
            rootNodeJsDoc.setAssociatedNode(irNode);
        }
        if (fileOverviewInfo != null) {
            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {
                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());
            }
            irNode.setJSDocInfo(fileOverviewInfo);
            fileOverviewInfo.setAssociatedNode(irNode);
        }
    }

    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = transform(node);
        if (!irNode.isBlock()) {
            if (irNode.isEmpty()) {
                irNode.setType(com.google.javascript.rhino.Token.BLOCK);
                irNode.setWasEmptyNode(true);
            } else {
                com.google.javascript.rhino.Node newBlock = newNode(com.google.javascript.rhino.Token.BLOCK, irNode);
                newBlock.setLineno(irNode.getLineno());
                newBlock.setCharno(irNode.getCharno());
                maybeSetLengthFrom(newBlock, node);
                irNode = newBlock;
            }
        }
        return irNode;
    }

    private void handleBlockComment(com.google.javascript.rhino.head.ast.Comment comment) {
        java.lang.String value = comment.getValue();
        if ((value.indexOf("/* @") != (-1)) || (value.indexOf("\n * @") != (-1))) {
            errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), "", 0);
        }
    }

    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {
        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {
            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();
            return true;
        }
        return false;
    }

    private void handlePossibleFileOverviewJsDoc(com.google.javascript.rhino.head.ast.Comment comment, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
        parsedComments.add(comment);
        handlePossibleFileOverviewJsDoc(jsDocParser);
    }

    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
            parsedComments.add(comment);
            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {
                return jsDocParser.retrieveAndResetParsedJSDocInfo();
            }
        }
        return null;
    }

    private com.google.javascript.rhino.Node transform(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.rhino.head.ast.Name node) {
        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, literalNode);
        return irNode;
    }

    private static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.rhino.head.ast.AstNode node) {
        if (irNode.getLineno() == (-1)) {
            int lineno = node.getLineno();
            irNode.setLineno(lineno);
            int charno = position2charno(node.getAbsolutePosition());
            irNode.setCharno(charno);
            maybeSetLengthFrom(irNode, node);
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);
        jsdocParser.parse();
        return jsdocParser;
    }

    private void maybeSetLengthFrom(com.google.javascript.rhino.Node node, com.google.javascript.rhino.head.ast.AstNode source) {
        if (config.isIdeMode) {
            node.setLength(source.getLength());
        }
    }

    private int position2charno(int position) {
        int lineIndex = sourceString.lastIndexOf('\n', position);
        if (lineIndex == (-1)) {
            return position;
        } else {
            return (position - lineIndex) - 1;
        }
    }

    private com.google.javascript.rhino.Node justTransform(com.google.javascript.rhino.head.ast.AstNode node) {
        return transformDispatcher.process(node);
    }

    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.rhino.head.Node n) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));
            for (com.google.javascript.rhino.head.Node child : n) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            return node;
        }

        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.rhino.head.ast.AstNode n) {
            com.google.javascript.rhino.Node ret;
            if (n instanceof com.google.javascript.rhino.head.ast.Name) {
                ret = transformNameAsString(((com.google.javascript.rhino.head.ast.Name) (n)));
            } else if (n instanceof com.google.javascript.rhino.head.ast.NumberLiteral) {
                ret = transformNumberAsString(((com.google.javascript.rhino.head.ast.NumberLiteral) (n)));
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            } else {
                ret = transform(n);
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            }
            com.google.common.base.Preconditions.checkState(ret.isString());
            return ret;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.rhino.head.ast.ArrayLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.ARRAYLIT);
            for (com.google.javascript.rhino.head.ast.AstNode child : literalNode.getElements()) {
                com.google.javascript.rhino.Node c = transform(child);
                node.addChildToBack(c);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAssignment(com.google.javascript.rhino.head.ast.Assignment assignmentNode) {
            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);
            com.google.javascript.rhino.Node target = assign.getFirstChild();
            if (!validAssignmentTarget(target)) {
                errorReporter.error("invalid assignment target", sourceName, target.getLineno(), "", 0);
            }
            return assign;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.rhino.head.ast.AstRoot rootNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SCRIPT);
            for (com.google.javascript.rhino.head.Node child : rootNode) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            parseDirectives(node);
            return node;
        }

        private void parseDirectives(com.google.javascript.rhino.Node node) {
            java.util.Set<java.lang.String> directives = null;
            while (isDirective(node.getFirstChild())) {
                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();
                if (directives == null) {
                    directives = com.google.common.collect.Sets.newHashSet(directive);
                } else {
                    directives.add(directive);
                }
            } 
            if (directives != null) {
                node.setDirectives(directives);
            }
        }

        private boolean isDirective(com.google.javascript.rhino.Node n) {
            if (n == null) {
                return false;
            }
            int nType = n.getType();
            return ((nType == com.google.javascript.rhino.Token.EXPR_RESULT) && n.getFirstChild().isString()) && com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBlock(com.google.javascript.rhino.head.ast.Block blockNode) {
            return processGeneric(blockNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.rhino.head.ast.BreakStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.BREAK);
            if (statementNode.getBreakLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.rhino.head.ast.CatchClause clauseNode) {
            com.google.javascript.rhino.head.ast.AstNode catchVar = clauseNode.getVarName();
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CATCH, transform(catchVar));
            if (clauseNode.getCatchCondition() != null) {
                errorReporter.error("Catch clauses are not supported", sourceName, clauseNode.getCatchCondition().getLineno(), "", 0);
            }
            node.addChildToBack(transformBlock(clauseNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.rhino.head.ast.ConditionalExpression exprNode) {
            return newNode(com.google.javascript.rhino.Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.rhino.head.ast.ContinueStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CONTINUE);
            if (statementNode.getLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.rhino.head.ast.DoLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processElementGet(com.google.javascript.rhino.head.ast.ElementGet getNode) {
            return newNode(com.google.javascript.rhino.Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.rhino.head.ast.EmptyExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyStatement(com.google.javascript.rhino.head.ast.EmptyStatement exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));
            node.addChildToBack(transform(statementNode.getExpression()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.rhino.head.ast.ForInLoop loopNode) {
            if (loopNode.isForEach()) {
                errorReporter.error("unsupported language extension: for each", sourceName, loopNode.getLineno(), "", 0);
                return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
            }
            return newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForLoop(com.google.javascript.rhino.head.ast.ForLoop loopNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));
            node.addChildToBack(transformBlock(loopNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall callNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : callNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(node.getFirstChild().getLineno());
            node.setCharno(node.getFirstChild().getCharno());
            maybeSetLengthFrom(node, callNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode functionNode) {
            com.google.javascript.rhino.head.ast.Name name = functionNode.getFunctionName();
            java.lang.Boolean isUnnamedFunction = false;
            if (name == null) {
                int functionType = functionNode.getFunctionType();
                if (functionType != com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_EXPRESSION) {
                    errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
                    return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
                }
                name = new com.google.javascript.rhino.head.ast.Name();
                name.setIdentifier("");
                isUnnamedFunction = true;
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FUNCTION);
            com.google.javascript.rhino.Node newName = transform(name);
            if (isUnnamedFunction) {
                newName.setLineno(functionNode.getLineno());
                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
                newName.setCharno(position2charno(lpColumn));
                maybeSetLengthFrom(newName, name);
            }
            node.addChildToBack(newName);
            com.google.javascript.rhino.Node lp = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
            com.google.javascript.rhino.head.ast.Name fnName = functionNode.getFunctionName();
            if (fnName != null) {
                lp.setLineno(fnName.getLineno());
            } else {
                lp.setLineno(functionNode.getLineno());
            }
            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
            lp.setCharno(position2charno(lparenCharno));
            for (com.google.javascript.rhino.head.ast.AstNode param : functionNode.getParams()) {
                com.google.javascript.rhino.Node paramNode = transform(param);
                if (paramNode.isName()) {
                    lp.addChildToBack(paramNode);
                } else {
                    com.google.common.base.Preconditions.checkState((config.isIdeMode || paramNode.isObjectLit()) || paramNode.isArrayLit());
                }
            }
            node.addChildToBack(lp);
            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());
            if (!bodyNode.isBlock()) {
                com.google.common.base.Preconditions.checkState(config.isIdeMode);
                bodyNode = com.google.javascript.rhino.IR.block();
            }
            parseDirectives(bodyNode);
            node.addChildToBack(bodyNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.rhino.head.ast.IfStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.IF);
            node.addChildToBack(transform(statementNode.getCondition()));
            node.addChildToBack(transformBlock(statementNode.getThenPart()));
            if (statementNode.getElsePart() != null) {
                node.addChildToBack(transformBlock(statementNode.getElsePart()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression exprNode) {
            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));
            n.setLineno(exprNode.getLineno());
            n.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(n, exprNode);
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.rhino.head.ast.KeywordLiteral literalNode) {
            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabel(com.google.javascript.rhino.head.ast.Label labelNode) {
            return newStringNode(com.google.javascript.rhino.Token.LABEL_NAME, labelNode.getName());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.rhino.head.ast.LabeledStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.LABEL);
            com.google.javascript.rhino.Node prev = null;
            com.google.javascript.rhino.Node cur = node;
            for (com.google.javascript.rhino.head.ast.Label label : statementNode.getLabels()) {
                if (prev != null) {
                    prev.addChildToBack(cur);
                }
                cur.addChildToBack(transform(label));
                cur.setLineno(label.getLineno());
                maybeSetLengthFrom(cur, label);
                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());
                cur.setCharno(clauseAbsolutePosition);
                prev = cur;
                cur = newNode(com.google.javascript.rhino.Token.LABEL);
            }
            prev.addChildToBack(transform(statementNode.getStatement()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode) {
            return processName(nameNode, false);
        }

        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode, boolean asString) {
            if (asString) {
                return newStringNode(com.google.javascript.rhino.Token.STRING, nameNode.getIdentifier());
            } else {
                if (isReservedKeyword(nameNode.getIdentifier())) {
                    errorReporter.error("identifier is a reserved word", sourceName, nameNode.getLineno(), "", 0);
                }
                return newStringNode(com.google.javascript.rhino.Token.NAME, nameNode.getIdentifier());
            }
        }

        private boolean isReservedKeyword(java.lang.String identifier) {
            return (reservedKeywords != null) && reservedKeywords.contains(identifier);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.rhino.head.ast.NewExpression exprNode) {
            return processFunctionCall(exprNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
            return newNumberNode(literalNode.getNumber());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.rhino.head.ast.ObjectLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.OBJECTLIT);
            for (com.google.javascript.rhino.head.ast.ObjectProperty el : literalNode.getElements()) {
                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {
                    if (el.isGetter()) {
                        reportGetter(el);
                        continue;
                    } else if (el.isSetter()) {
                        reportSetter(el);
                        continue;
                    }
                }
                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());
                key.setType(com.google.javascript.rhino.Token.STRING_KEY);
                com.google.javascript.rhino.Node value = transform(el.getRight());
                if (el.isGetter()) {
                    key.setType(com.google.javascript.rhino.Token.GETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (getFnParamNode(value).hasChildren()) {
                        reportGetterParam(el.getLeft());
                    }
                } else if (el.isSetter()) {
                    key.setType(com.google.javascript.rhino.Token.SETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (!getFnParamNode(value).hasOneChild()) {
                        reportSetterParam(el.getLeft());
                    }
                }
                key.addChildToFront(value);
                node.addChildToBack(key);
            }
            return node;
        }

        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {
            com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
            return fnNode.getFirstChild().getNext();
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.rhino.head.ast.ObjectProperty propertyNode) {
            return processInfixExpression(propertyNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.rhino.head.ast.ParenthesizedExpression exprNode) {
            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());
            node.putProp(com.google.javascript.rhino.Node.PARENTHESIZED_PROP, java.lang.Boolean.TRUE);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet getNode) {
            com.google.javascript.rhino.Node leftChild = transform(getNode.getTarget());
            com.google.javascript.rhino.Node newNode = newNode(com.google.javascript.rhino.Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));
            newNode.setLineno(leftChild.getLineno());
            newNode.setCharno(leftChild.getCharno());
            maybeSetLengthFrom(newNode, getNode);
            return newNode;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.rhino.head.ast.RegExpLiteral literalNode) {
            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());
            literalStringNode.setLineno(literalNode.getLineno());
            maybeSetLengthFrom(literalStringNode, literalNode);
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.REGEXP, literalStringNode);
            java.lang.String flags = literalNode.getFlags();
            if ((flags != null) && (!flags.isEmpty())) {
                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);
                flagsNode.setLineno(literalNode.getLineno());
                maybeSetLengthFrom(flagsNode, literalNode);
                node.addChildToBack(flagsNode);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.rhino.head.ast.ReturnStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.RETURN);
            if (statementNode.getReturnValue() != null) {
                node.addChildToBack(transform(statementNode.getReturnValue()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processScope(com.google.javascript.rhino.head.ast.Scope scopeNode) {
            return processGeneric(scopeNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.rhino.head.ast.StringLiteral literalNode) {
            java.lang.String value = literalNode.getValue();
            com.google.javascript.rhino.Node n = newStringNode(value);
            if (value.indexOf('\u000b') != (-1)) {
                int start = literalNode.getAbsolutePosition();
                int end = start + literalNode.getLength();
                if ((start < sourceString.length()) && (sourceString.substring(start, java.lang.Math.min(sourceString.length(), end)).indexOf("\\v") != (-1))) {
                    n.putBooleanProp(com.google.javascript.rhino.Node.SLASH_V, true);
                }
            }
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.rhino.head.ast.SwitchCase caseNode) {
            com.google.javascript.rhino.Node node;
            if (caseNode.isDefault()) {
                node = newNode(com.google.javascript.rhino.Token.DEFAULT_CASE);
            } else {
                com.google.javascript.rhino.head.ast.AstNode expr = caseNode.getExpression();
                node = newNode(com.google.javascript.rhino.Token.CASE, transform(expr));
            }
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            block.putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, true);
            block.setLineno(caseNode.getLineno());
            block.setCharno(position2charno(caseNode.getAbsolutePosition()));
            maybeSetLengthFrom(block, caseNode);
            if (caseNode.getStatements() != null) {
                for (com.google.javascript.rhino.head.ast.AstNode child : caseNode.getStatements()) {
                    block.addChildToBack(transform(child));
                }
            }
            node.addChildToBack(block);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.rhino.head.ast.SwitchStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SWITCH, transform(statementNode.getExpression()));
            for (com.google.javascript.rhino.head.ast.AstNode child : statementNode.getCases()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.rhino.head.ast.ThrowStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.THROW, transform(statementNode.getExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.rhino.head.ast.TryStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.TRY, transformBlock(statementNode.getTryBlock()));
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            boolean lineSet = false;
            for (com.google.javascript.rhino.head.ast.CatchClause cc : statementNode.getCatchClauses()) {
                if (lineSet == false) {
                    block.setLineno(cc.getLineno());
                    maybeSetLengthFrom(block, cc);
                    lineSet = true;
                }
                block.addChildToBack(transform(cc));
            }
            node.addChildToBack(block);
            com.google.javascript.rhino.head.ast.AstNode finallyBlock = statementNode.getFinallyBlock();
            if (finallyBlock != null) {
                node.addChildToBack(transformBlock(finallyBlock));
            }
            if ((lineSet == false) && (finallyBlock != null)) {
                block.setLineno(finallyBlock.getLineno());
                maybeSetLengthFrom(block, finallyBlock);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.rhino.head.ast.UnaryExpression exprNode) {
            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());
            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());
            if ((type == com.google.javascript.rhino.Token.NEG) && operand.isNumber()) {
                operand.setDouble(-operand.getDouble());
                return operand;
            } else {
                if ((type == com.google.javascript.rhino.Token.DELPROP) && (!((operand.isGetProp() || operand.isGetElem()) || operand.isName()))) {
                    java.lang.String msg = "Invalid delete operand. Only properties can be deleted.";
                    errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
                    if (!validAssignmentTarget(operand)) {
                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? "invalid increment target" : "invalid decrement target";
                        errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                    }
                }
                com.google.javascript.rhino.Node node = newNode(type, operand);
                if (exprNode.isPostfix()) {
                    node.putBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP, true);
                }
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(349).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceString",com.google.javascript.jscomp.parsing.IRFactory.this.sourceString);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher",com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo",com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile",com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter",com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder",com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords",com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.templateNode",com.google.javascript.jscomp.parsing.IRFactory.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.config",com.google.javascript.jscomp.parsing.IRFactory.this.config);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments",com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("exprNode",exprNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceName",com.google.javascript.jscomp.parsing.IRFactory.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("operand",operand);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(349).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return node;

            }
        }

        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {
            switch (target.getType()) {
                case com.google.javascript.rhino.Token.NAME :
                case com.google.javascript.rhino.Token.GETPROP :
                case com.google.javascript.rhino.Token.GETELEM :
                    return true;
            }
            return false;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration declarationNode) {
            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.rhino.head.Token.CONST)) {
                processIllegalToken(declarationNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.VAR);
            for (com.google.javascript.rhino.head.ast.VariableInitializer child : declarationNode.getVariables()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer initializerNode) {
            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());
            if (initializerNode.getInitializer() != null) {
                com.google.javascript.rhino.Node initalizer = transform(initializerNode.getInitializer());
                node.addChildToBack(initalizer);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.rhino.head.ast.WhileLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.rhino.head.ast.WithStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("Unsupported syntax: " + com.google.javascript.rhino.head.Token.typeToName(node.getType()), sourceName, node.getLineno(), "", 0);
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }

        void reportDestructuringAssign(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("destructuring assignment forbidden", sourceName, node.getLineno(), "", 0);
        }

        void reportGetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportSetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportGetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters may not have parameters", sourceName, node.getLineno(), "", 0);
        }

        void reportSetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters must have exactly one parameter", sourceName, node.getLineno(), "", 0);
        }
    }

    private static int transformTokenType(int token) {
        switch (token) {
            case com.google.javascript.rhino.head.Token.RETURN :
                return com.google.javascript.rhino.Token.RETURN;
            case com.google.javascript.rhino.head.Token.BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.head.Token.BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.head.Token.BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.head.Token.EQ :
                return com.google.javascript.rhino.Token.EQ;
            case com.google.javascript.rhino.head.Token.NE :
                return com.google.javascript.rhino.Token.NE;
            case com.google.javascript.rhino.head.Token.LT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.head.Token.LE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.head.Token.GT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.head.Token.GE :
                return com.google.javascript.rhino.Token.GE;
            case com.google.javascript.rhino.head.Token.LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.head.Token.RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.head.Token.URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.head.Token.ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.head.Token.SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.head.Token.MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.head.Token.DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.head.Token.MOD :
                return com.google.javascript.rhino.Token.MOD;
            case com.google.javascript.rhino.head.Token.NOT :
                return com.google.javascript.rhino.Token.NOT;
            case com.google.javascript.rhino.head.Token.BITNOT :
                return com.google.javascript.rhino.Token.BITNOT;
            case com.google.javascript.rhino.head.Token.POS :
                return com.google.javascript.rhino.Token.POS;
            case com.google.javascript.rhino.head.Token.NEG :
                return com.google.javascript.rhino.Token.NEG;
            case com.google.javascript.rhino.head.Token.NEW :
                return com.google.javascript.rhino.Token.NEW;
            case com.google.javascript.rhino.head.Token.DELPROP :
                return com.google.javascript.rhino.Token.DELPROP;
            case com.google.javascript.rhino.head.Token.TYPEOF :
                return com.google.javascript.rhino.Token.TYPEOF;
            case com.google.javascript.rhino.head.Token.GETPROP :
                return com.google.javascript.rhino.Token.GETPROP;
            case com.google.javascript.rhino.head.Token.GETELEM :
                return com.google.javascript.rhino.Token.GETELEM;
            case com.google.javascript.rhino.head.Token.CALL :
                return com.google.javascript.rhino.Token.CALL;
            case com.google.javascript.rhino.head.Token.NAME :
                return com.google.javascript.rhino.Token.NAME;
            case com.google.javascript.rhino.head.Token.NUMBER :
                return com.google.javascript.rhino.Token.NUMBER;
            case com.google.javascript.rhino.head.Token.STRING :
                return com.google.javascript.rhino.Token.STRING;
            case com.google.javascript.rhino.head.Token.NULL :
                return com.google.javascript.rhino.Token.NULL;
            case com.google.javascript.rhino.head.Token.THIS :
                return com.google.javascript.rhino.Token.THIS;
            case com.google.javascript.rhino.head.Token.FALSE :
                return com.google.javascript.rhino.Token.FALSE;
            case com.google.javascript.rhino.head.Token.TRUE :
                return com.google.javascript.rhino.Token.TRUE;
            case com.google.javascript.rhino.head.Token.SHEQ :
                return com.google.javascript.rhino.Token.SHEQ;
            case com.google.javascript.rhino.head.Token.SHNE :
                return com.google.javascript.rhino.Token.SHNE;
            case com.google.javascript.rhino.head.Token.REGEXP :
                return com.google.javascript.rhino.Token.REGEXP;
            case com.google.javascript.rhino.head.Token.THROW :
                return com.google.javascript.rhino.Token.THROW;
            case com.google.javascript.rhino.head.Token.IN :
                return com.google.javascript.rhino.Token.IN;
            case com.google.javascript.rhino.head.Token.INSTANCEOF :
                return com.google.javascript.rhino.Token.INSTANCEOF;
            case com.google.javascript.rhino.head.Token.ARRAYLIT :
                return com.google.javascript.rhino.Token.ARRAYLIT;
            case com.google.javascript.rhino.head.Token.OBJECTLIT :
                return com.google.javascript.rhino.Token.OBJECTLIT;
            case com.google.javascript.rhino.head.Token.TRY :
                return com.google.javascript.rhino.Token.TRY;
            case com.google.javascript.rhino.head.Token.LP :
                return com.google.javascript.rhino.Token.PARAM_LIST;
            case com.google.javascript.rhino.head.Token.COMMA :
                return com.google.javascript.rhino.Token.COMMA;
            case com.google.javascript.rhino.head.Token.ASSIGN :
                return com.google.javascript.rhino.Token.ASSIGN;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.ASSIGN_BITAND;
            case com.google.javascript.rhino.head.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.ASSIGN_LSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.ASSIGN_RSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.ASSIGN_URSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ASSIGN_ADD;
            case com.google.javascript.rhino.head.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.ASSIGN_SUB;
            case com.google.javascript.rhino.head.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.ASSIGN_MUL;
            case com.google.javascript.rhino.head.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.ASSIGN_DIV;
            case com.google.javascript.rhino.head.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.ASSIGN_MOD;
            case com.google.javascript.rhino.head.Token.HOOK :
                return com.google.javascript.rhino.Token.HOOK;
            case com.google.javascript.rhino.head.Token.OR :
                return com.google.javascript.rhino.Token.OR;
            case com.google.javascript.rhino.head.Token.AND :
                return com.google.javascript.rhino.Token.AND;
            case com.google.javascript.rhino.head.Token.INC :
                return com.google.javascript.rhino.Token.INC;
            case com.google.javascript.rhino.head.Token.DEC :
                return com.google.javascript.rhino.Token.DEC;
            case com.google.javascript.rhino.head.Token.FUNCTION :
                return com.google.javascript.rhino.Token.FUNCTION;
            case com.google.javascript.rhino.head.Token.IF :
                return com.google.javascript.rhino.Token.IF;
            case com.google.javascript.rhino.head.Token.SWITCH :
                return com.google.javascript.rhino.Token.SWITCH;
            case com.google.javascript.rhino.head.Token.CASE :
                return com.google.javascript.rhino.Token.CASE;
            case com.google.javascript.rhino.head.Token.DEFAULT :
                return com.google.javascript.rhino.Token.DEFAULT_CASE;
            case com.google.javascript.rhino.head.Token.WHILE :
                return com.google.javascript.rhino.Token.WHILE;
            case com.google.javascript.rhino.head.Token.DO :
                return com.google.javascript.rhino.Token.DO;
            case com.google.javascript.rhino.head.Token.FOR :
                return com.google.javascript.rhino.Token.FOR;
            case com.google.javascript.rhino.head.Token.BREAK :
                return com.google.javascript.rhino.Token.BREAK;
            case com.google.javascript.rhino.head.Token.CONTINUE :
                return com.google.javascript.rhino.Token.CONTINUE;
            case com.google.javascript.rhino.head.Token.VAR :
                return com.google.javascript.rhino.Token.VAR;
            case com.google.javascript.rhino.head.Token.WITH :
                return com.google.javascript.rhino.Token.WITH;
            case com.google.javascript.rhino.head.Token.CATCH :
                return com.google.javascript.rhino.Token.CATCH;
            case com.google.javascript.rhino.head.Token.VOID :
                return com.google.javascript.rhino.Token.VOID;
            case com.google.javascript.rhino.head.Token.EMPTY :
                return com.google.javascript.rhino.Token.EMPTY;
            case com.google.javascript.rhino.head.Token.BLOCK :
                return com.google.javascript.rhino.Token.BLOCK;
            case com.google.javascript.rhino.head.Token.LABEL :
                return com.google.javascript.rhino.Token.LABEL;
            case com.google.javascript.rhino.head.Token.EXPR_VOID :
            case com.google.javascript.rhino.head.Token.EXPR_RESULT :
                return com.google.javascript.rhino.Token.EXPR_RESULT;
            case com.google.javascript.rhino.head.Token.SCRIPT :
                return com.google.javascript.rhino.Token.SCRIPT;
            case com.google.javascript.rhino.head.Token.GET :
                return com.google.javascript.rhino.Token.GETTER_DEF;
            case com.google.javascript.rhino.head.Token.SET :
                return com.google.javascript.rhino.Token.SETTER_DEF;
            case com.google.javascript.rhino.head.Token.CONST :
                return com.google.javascript.rhino.Token.CONST;
            case com.google.javascript.rhino.head.Token.DEBUGGER :
                return com.google.javascript.rhino.Token.DEBUGGER;
        }
        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {
        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {
        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {
        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {
        return com.google.javascript.rhino.IR.string(value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {
        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {
        return com.google.javascript.rhino.IR.number(value).clonePropsFrom(templateNode);
    }
}
[598530] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659926861467
GPR[SSUN]-1659926861467
-1345859678
GPR[SPVATF]-1659926861710
GPR[EPVATF]-1659926862112
GPR[SPS]-1659926862112
[599781] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1044.
GPR[EPS]-1659926862718
GPR[SPVATF]-1659926862718
GPR[EPVATF]-1659926863111
GPR[SPS]-1659926863111
[600774] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1044.
GPR[EPS]-1659926863711
GPR[ESUN]-1659926863711
GPR[SSUN]-1659926863711
-1345859678
GPR[ESUN]-1659926863959
GPR[SSUN]-1659926863959
-1345859678
GPR[SPVATF]-1659926864205
GPR[EPVATF]-1659926864629
GPR[SPS]-1659926864629
[602291] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1021.
GPR[EPS]-1659926865228
GPR[SPVATF]-1659926865228
GPR[EPVATF]-1659926865614
GPR[SPS]-1659926865614
[603272] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1021.
GPR[EPS]-1659926866209
GPR[ESUN]-1659926866209
GPR[SSUN]-1659926866209
GPR[ESUN]-1659926866209
GPR[SSUN]-1659926866209
2433571
GPR[ESUN]-1659926866441
GPR[SSUN]-1659926866441
-1345859678
GPR[ESUN]-1659926866686
GPR[SSUN]-1659926866686
-1345859678
GPR[SPVATF]-1659926866928
GPR[EPVATF]-1659926867346
GPR[SPS]-1659926867346
[605020] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:617.
GPR[EPS]-1659926867957
GPR[ESUN]-1659926867957
GPR[SSUN]-1659926867957
-1251822497
GPR[SPVATF]-1659926868144
GPR[EPVATF]-1659926868539
GPR[SPS]-1659926868539
[605834] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class JSDocInfoBuilder {
    private com.google.javascript.rhino.JSDocInfo currentInfo;

    private boolean populated = false;

    private boolean parseDocumentation = false;

    private com.google.javascript.rhino.JSDocInfo.Marker currentMarker = null;

    public JSDocInfoBuilder(boolean parseDocumentation) {
        this.currentInfo = new com.google.javascript.rhino.JSDocInfo(parseDocumentation);
        this.parseDocumentation = parseDocumentation;
    }

    public void recordOriginalCommentString(java.lang.String sourceComment) {
        if (parseDocumentation) {
            currentInfo.setOriginalCommentString(sourceComment);
        }
    }

    public boolean shouldParseDocumentation() {
        return parseDocumentation;
    }

    public boolean isPopulated() {
        return populated;
    }

    public boolean isPopulatedWithFileOverview() {
        return isPopulated() && ((currentInfo.hasFileOverview() || currentInfo.isExterns()) || currentInfo.isNoCompile());
    }

    public boolean isDescriptionRecorded() {
        return currentInfo.getDescription() != null;
    }

    public com.google.javascript.rhino.JSDocInfo build(com.google.javascript.rhino.Node associatedNode) {
        if (populated) {
            com.google.javascript.rhino.JSDocInfo built = currentInfo;
            built.setAssociatedNode(associatedNode);
            com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(built);
            populated = false;
            currentInfo = new com.google.javascript.rhino.JSDocInfo(this.parseDocumentation);
            return built;
        } else {
            return null;
        }
    }

    private static void populateDefaults(com.google.javascript.rhino.JSDocInfo info) {
        if (info.getVisibility() == null) {
            info.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED);
        }
    }

    public void markAnnotation(java.lang.String annotation, int lineno, int charno) {
        com.google.javascript.rhino.JSDocInfo.Marker marker = currentInfo.addMarker();
        if (marker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(annotation);
            position.setPositionInformation(lineno, charno, lineno, charno + annotation.length());
            marker.setAnnotation(position);
            populated = true;
        }
        currentMarker = marker;
    }

    public void markText(java.lang.String text, int startLineno, int startCharno, int endLineno, int endCharno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.StringPosition position = new com.google.javascript.rhino.JSDocInfo.StringPosition();
            position.setItem(text);
            position.setPositionInformation(startLineno, startCharno, endLineno, endCharno);
            currentMarker.setDescription(position);
        }
    }

    public void markTypeNode(com.google.javascript.rhino.Node typeNode, int lineno, int startCharno, int endLineno, int endCharno, boolean hasLC) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TypePosition position = new com.google.javascript.rhino.JSDocInfo.TypePosition();
            position.setItem(typeNode);
            position.setHasBrackets(hasLC);
            position.setPositionInformation(lineno, startCharno, endLineno, endCharno);
            currentMarker.setType(position);
        }
    }

    @java.lang.Deprecated
    public void markName(java.lang.String name, int lineno, int charno) {
        markName(name, null, lineno, charno);
    }

    public void markName(java.lang.String name, com.google.javascript.rhino.jstype.StaticSourceFile file, int lineno, int charno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(name);
            position.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setName(position);
            com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodePos = new com.google.javascript.rhino.JSDocInfo.NamePosition();
            com.google.javascript.rhino.Node node = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, name, lineno, charno);
            node.setLength(name.length());
            node.setStaticSourceFile(file);
            nodePos.setItem(node);
            nodePos.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setNameNode(nodePos);
        }
    }

    public boolean recordBlockDescription(java.lang.String description) {
        populated = true;
        return currentInfo.documentBlock(description);
    }

    public boolean recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility visibility) {
        if (currentInfo.getVisibility() == null) {
            populated = true;
            currentInfo.setVisibility(visibility);
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameter(java.lang.String parameterName, com.google.javascript.rhino.JSTypeExpression type) {
        if ((!hasAnySingletonTypeTags()) && currentInfo.declareParam(type, parameterName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameterDescription(java.lang.String parameterName, java.lang.String description) {
        if (currentInfo.documentParam(parameterName, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTemplateTypeNames(java.util.List<java.lang.String> names) {
        if (currentInfo.declareTemplateTypeNames(names)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThrowType(com.google.javascript.rhino.JSTypeExpression type) {
        if (!hasAnySingletonTypeTags()) {
            currentInfo.declareThrows(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordThrowDescription(com.google.javascript.rhino.JSTypeExpression type, java.lang.String description) {
        if (currentInfo.documentThrows(type, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addAuthor(java.lang.String author) {
        if (currentInfo.documentAuthor(author)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addReference(java.lang.String reference) {
        if (currentInfo.documentReference(reference)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConsistentIdGenerator() {
        if (!currentInfo.isConsistentIdGenerator()) {
            currentInfo.setConsistentIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordVersion(java.lang.String version) {
        if (currentInfo.documentVersion(version)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecationReason(java.lang.String reason) {
        if (currentInfo.setDeprecationReason(reason)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordSuppressions(java.util.Set<java.lang.String> suppressions) {
        if (currentInfo.setSuppressions(suppressions)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordModifies(java.util.Set<java.lang.String> modifies) {
        if ((!hasAnySingletonSideEffectTags()) && currentInfo.setModifies(modifies)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTypedef(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setTypedefType(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordIdGenerator() {
        if (!currentInfo.isIdGenerator()) {
            currentInfo.setIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (currentInfo.getReturnType() == null)) && (!hasAnySingletonTypeTags())) {
            currentInfo.setReturnType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnDescription(java.lang.String description) {
        if (currentInfo.documentReturn(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDefineType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((((type != null) && (!currentInfo.isConstant())) && (!currentInfo.isDefine())) && recordType(type)) {
            currentInfo.setDefine(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordEnumParameterType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setEnumParameterType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThisType(com.google.javascript.rhino.JSTypeExpression type) {
        if (((type != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasThisType())) {
            currentInfo.setThisType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordBaseType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasBaseType())) {
            currentInfo.setBaseType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstancy() {
        if (!currentInfo.isConstant()) {
            currentInfo.setConstant(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDescription(java.lang.String description) {
        if ((description != null) && (currentInfo.getDescription() == null)) {
            currentInfo.setDescription(description);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordMeaning(java.lang.String meaning) {
        if ((meaning != null) && (currentInfo.getMeaning() == null)) {
            currentInfo.setMeaning(meaning);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordFileOverview(java.lang.String description) {
        if (currentInfo.documentFileOverview(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordHiddenness() {
        if (!currentInfo.isHidden()) {
            currentInfo.setHidden(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoCompile() {
        if (!currentInfo.isNoCompile()) {
            currentInfo.setNoCompile(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoTypeCheck() {
        if (!currentInfo.isNoTypeCheck()) {
            currentInfo.setNoCheck(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstructor() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setConstructor(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isConstructorRecorded() {
        return currentInfo.isConstructor();
    }

    public boolean recordJavaDispatch() {
        if (!currentInfo.isJavaDispatch()) {
            currentInfo.setJavaDispatch(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isJavaDispatch() {
        return currentInfo.isJavaDispatch();
    }

    public boolean recordPreserveTry() {
        if (!currentInfo.shouldPreserveTry()) {
            currentInfo.setShouldPreserveTry(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordOverride() {
        if (!currentInfo.isOverride()) {
            currentInfo.setOverride(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoAlias() {
        if (!currentInfo.isNoAlias()) {
            currentInfo.setNoAlias(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecated() {
        if (!currentInfo.isDeprecated()) {
            currentInfo.setDeprecated(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordInterface() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setInterface(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExport() {
        if (!currentInfo.isExport()) {
            currentInfo.setExport(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExpose() {
        if (!currentInfo.isExpose()) {
            currentInfo.setExpose(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoShadow() {
        if (!currentInfo.isNoShadow()) {
            currentInfo.setNoShadow(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordImplicitCast() {
        if (!currentInfo.isImplicitCast()) {
            currentInfo.setImplicitCast(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoSideEffects() {
        if ((!hasAnySingletonSideEffectTags()) && (!currentInfo.isNoSideEffects())) {
            currentInfo.setNoSideEffects(true);
            populated = true;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(355).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(355).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(355).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.populated",com.google.javascript.rhino.JSDocInfoBuilder.this.populated);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(355).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation",com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(355).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker",com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(355).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo",com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(355).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(355).collectionEnds();
            }
            if (runtimeAngelicValue)
                return true;

        } else {
            return false;
        }
    }

    public boolean recordExterns() {
        if (!currentInfo.isExterns()) {
            currentInfo.setExterns(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isInterfaceRecorded() {
        return currentInfo.isInterface();
    }

    public boolean hasParameter(java.lang.String name) {
        return currentInfo.hasParameter(name);
    }

    public boolean recordImplementedInterface(com.google.javascript.rhino.JSTypeExpression interfaceName) {
        if (currentInfo.addImplementedInterface(interfaceName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExtendedInterface(com.google.javascript.rhino.JSTypeExpression interfaceType) {
        if (currentInfo.addExtendedInterface(interfaceType)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordLends(java.lang.String name) {
        if (!hasAnyTypeRelatedTags()) {
            currentInfo.setLendsName(name);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    private boolean hasAnyTypeRelatedTags() {
        return (((((((currentInfo.isConstructor() || currentInfo.isInterface()) || (currentInfo.getParameterCount() > 0)) || currentInfo.hasReturnType()) || currentInfo.hasBaseType()) || (currentInfo.getExtendedInterfacesCount() > 0)) || (currentInfo.getLendsName() != null)) || currentInfo.hasThisType()) || hasAnySingletonTypeTags();
    }

    private boolean hasAnySingletonTypeTags() {
        return (currentInfo.hasType() || currentInfo.hasTypedefType()) || currentInfo.hasEnumParameterType();
    }

    private boolean hasAnySingletonSideEffectTags() {
        return currentInfo.isNoSideEffects() || currentInfo.hasModifies();
    }
}
[605834] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659926868771
GPR[SSUN]-1659926868771
-1251822497
GPR[SPVATF]-1659926868958
GPR[EPVATF]-1659926869341
GPR[SPS]-1659926869341
[606827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:885.
GPR[EPS]-1659926869764
GPR[ESUN]-1659926869764
GPR[SSUN]-1659926869764
-1251822497
GPR[SPVATF]-1659926869956
GPR[EPVATF]-1659926870335
GPR[SPS]-1659926870335
[607892] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:884.
GPR[EPS]-1659926870829
GPR[ESUN]-1659926870829
GPR[SSUN]-1659926870829
1508981886
GPR[ESUN]-1659926871126
GPR[SSUN]-1659926871126
1508981886
GPR[SPVATF]-1659926871333
GPR[EPVATF]-1659926871730
GPR[SPS]-1659926871730
[609279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:406.
GPR[EPS]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872216
GPR[ESUN]-1659926872216
GPR[SSUN]-1659926872217
GPR[ESUN]-1659926872217
GPR[SSUN]-1659926872217
GPR[ESUN]-1659926872217
GPR[SSUN]-1659926872217
GPR[ESUN]-1659926872217
GPR[SSUN]-1659926872217
GPR[ESUN]-1659926872217
GPR[SSUN]-1659926872217
GPR[ESUN]-1659926872217
GPR[SSUN]-1659926872217
GPR[ESUN]-1659926872217
GPR[SSUN]-1659926872217
GPR[ESUN]-1659926872217
GPR[SSUN]-1659926872217
GPR[ESUN]-1659926872217
GPR[SSUN]-1659926872217
-1251822497
GPR[SPVATF]-1659926872458
GPR[EPVATF]-1659926872839
GPR[SPS]-1659926872839
[610390] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:882.
GPR[EPS]-1659926873327
GPR[ESUN]-1659926873327
GPR[SSUN]-1659926873327
-179796259
GPR[SPVATF]-1659926873568
GPR[EPVATF]-1659926873987
GPR[SPS]-1659926873987
[611767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:740.
GPR[EPS]-1659926874704
GPR[ESUN]-1659926874704
GPR[SSUN]-1659926874704
-179796259
GPR[SPVATF]-1659926874942
GPR[EPVATF]-1659926875333
GPR[SPS]-1659926875333
[613089] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:739.
GPR[EPS]-1659926876026
GPR[ESUN]-1659926876026
GPR[SSUN]-1659926876026
-179796259
GPR[SPVATF]-1659926876264
GPR[EPVATF]-1659926876664
GPR[SPS]-1659926876664
[614393] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:735.
GPR[EPS]-1659926877330
GPR[SPVATF]-1659926877331
GPR[EPVATF]-1659926877725
GPR[SPS]-1659926877725
[615450] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:735.
GPR[EPS]-1659926878387
GPR[ESUN]-1659926878387
GPR[SSUN]-1659926878387
-1251822497
GPR[ESUN]-1659926878574
GPR[SSUN]-1659926878574
1508981886
GPR[ESUN]-1659926878780
GPR[SSUN]-1659926878780
1852376448
GPR[SPVATF]-1659926878993
GPR[EPVATF]-1659926879405
GPR[SPS]-1659926879405
[616982] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:157.
GPR[EPS]-1659926879919
GPR[SPVATF]-1659926879919
GPR[EPVATF]-1659926880323
GPR[SPS]-1659926880323
[617962] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:157.
GPR[EPS]-1659926880899
GPR[ESUN]-1659926880899
GPR[SSUN]-1659926880899
1852376448
GPR[SPVATF]-1659926881115
GPR[EPVATF]-1659926881516
GPR[SPS]-1659926881516
[619092] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:140.
GPR[EPS]-1659926882029
GPR[SPVATF]-1659926882029
GPR[EPVATF]-1659926882442
GPR[SPS]-1659926882442
[620021] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:140.
GPR[EPS]-1659926882958
GPR[ESUN]-1659926882958
GPR[SSUN]-1659926882958
1852376448
GPR[ESUN]-1659926883171
GPR[SSUN]-1659926883171
1852376448
GPR[SPVATF]-1659926883386
GPR[EPVATF]-1659926883810
GPR[SPS]-1659926883810
[621385] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:136.
GPR[EPS]-1659926884322
GPR[ESUN]-1659926884323
GPR[SSUN]-1659926884323
1852376448
GPR[ESUN]-1659926884535
GPR[SSUN]-1659926884535
1852376448
GPR[ESUN]-1659926884750
GPR[SSUN]-1659926884750
GPR[ESUN]-1659926884750
GPR[SSUN]-1659926884750
1537627151
GPR[ESUN]-1659926884951
GPR[SSUN]-1659926884951
-1345859678
GPR[SPVATF]-1659926885195
GPR[EPVATF]-1659926885671
GPR[SPS]-1659926885671
[623330] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1017.
GPR[EPS]-1659926886267
GPR[ESUN]-1659926886267
GPR[SSUN]-1659926886267
-1345859678
GPR[ESUN]-1659926886510
GPR[SSUN]-1659926886510
-1345859678
GPR[ESUN]-1659926886756
GPR[SSUN]-1659926886756
GPR[ESUN]-1659926886756
GPR[SSUN]-1659926886756
GPR[ESUN]-1659926886756
GPR[SSUN]-1659926886756
GPR[ESUN]-1659926886756
GPR[SSUN]-1659926886756
GPR[ESUN]-1659926886756
GPR[SSUN]-1659926886756
GPR[ESUN]-1659926886756
GPR[SSUN]-1659926886756
GPR[ESUN]-1659926886756
GPR[SSUN]-1659926886756
GPR[ESUN]-1659926886756
GPR[SSUN]-1659926886756
GPR[ESUN]-1659926886756
GPR[SSUN]-1659926886756
1508981886
GPR[ESUN]-1659926886959
GPR[SSUN]-1659926886959
1852376448
GPR[SPVATF]-1659926887173
GPR[EPVATF]-1659926887598
GPR[SPS]-1659926887598
[625165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:183.
GPR[EPS]-1659926888102
GPR[SPVATF]-1659926888102
GPR[EPVATF]-1659926888609
GPR[SPS]-1659926888609
[626168] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:183.
GPR[EPS]-1659926889105
GPR[ESUN]-1659926889105
GPR[SSUN]-1659926889105
1852376448
GPR[ESUN]-1659926889318
GPR[SSUN]-1659926889318
-1117079791
GPR[ESUN]-1659926889510
GPR[SSUN]-1659926889510
-1117079791
GPR[SPVATF]-1659926889704
GPR[EPVATF]-1659926890959
GPR[SPS]-1659926890959
[628765] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:376.
GPR[EPS]-1659926891702
GPR[ESUN]-1659926891702
GPR[SSUN]-1659926891702
-1117079791
GPR[SPVATF]-1659926891894
GPR[EPVATF]-1659926892986
GPR[SPS]-1659926892986
[630539] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:375.
GPR[EPS]-1659926893476
GPR[ESUN]-1659926893476
GPR[SSUN]-1659926893476
-1117079791
GPR[SPVATF]-1659926893670
GPR[EPVATF]-1659926894087
GPR[SPS]-1659926894087
[631624] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:374.
GPR[EPS]-1659926894561
GPR[ESUN]-1659926894561
GPR[SSUN]-1659926894562
-1117079791
GPR[SPVATF]-1659926894757
GPR[EPVATF]-1659926895163
GPR[SPS]-1659926895163
[632732] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:373.
GPR[EPS]-1659926895669
GPR[ESUN]-1659926895669
GPR[SSUN]-1659926895669
-1117079791
GPR[ESUN]-1659926895864
GPR[SSUN]-1659926895864
-1117079791
GPR[SPVATF]-1659926896053
GPR[EPVATF]-1659926896454
GPR[SPS]-1659926896454
[634010] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:259.
GPR[EPS]-1659926896947
GPR[ESUN]-1659926896947
GPR[SSUN]-1659926896947
1187751237
GPR[SPVATF]-1659926897221
GPR[EPVATF]-1659926897596
GPR[SPS]-1659926897596
[635339] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1013.
GPR[EPS]-1659926898276
GPR[SPVATF]-1659926898277
GPR[EPVATF]-1659926898667
GPR[SPS]-1659926898667
[636425] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1013.
GPR[EPS]-1659926899362
GPR[ESUN]-1659926899362
GPR[SSUN]-1659926899362
1187751237
GPR[SPVATF]-1659926899632
GPR[EPVATF]-1659926900031
GPR[SPS]-1659926900031
[637769] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1010.
GPR[EPS]-1659926900706
GPR[SPVATF]-1659926900706
GPR[EPVATF]-1659926901087
GPR[SPS]-1659926901087
[638810] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1010.
GPR[EPS]-1659926901747
GPR[ESUN]-1659926901747
GPR[SSUN]-1659926901747
1187751237
GPR[ESUN]-1659926902020
GPR[SSUN]-1659926902020
1187751237
GPR[SPVATF]-1659926902289
GPR[EPVATF]-1659926902670
GPR[SPS]-1659926902670
[640410] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2677.
GPR[EPS]-1659926903347
GPR[SPVATF]-1659926903347
GPR[EPVATF]-1659926903735
GPR[SPS]-1659926903735
[641448] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2677.
GPR[EPS]-1659926904385
GPR[ESUN]-1659926904385
GPR[SSUN]-1659926904385
704176156
GPR[SPVATF]-1659926904590
GPR[EPVATF]-1659926905003
GPR[SPS]-1659926905003
[642564] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:171.
GPR[EPS]-1659926905501
GPR[ESUN]-1659926905501
GPR[SSUN]-1659926905501
1187751237
GPR[SPVATF]-1659926905822
GPR[EPVATF]-1659926906206
GPR[SPS]-1659926906206
[643947] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:928.
GPR[EPS]-1659926906884
GPR[SPVATF]-1659926906884
GPR[EPVATF]-1659926907302
GPR[SPS]-1659926907302
[645023] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:928.
GPR[EPS]-1659926907960
GPR[ESUN]-1659926907960
GPR[SSUN]-1659926907960
1616555300
GPR[ESUN]-1659926908149
GPR[SSUN]-1659926908149
1616555300
GPR[SPVATF]-1659926908334
GPR[EPVATF]-1659926908715
GPR[SPS]-1659926908715
[646237] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:125.
GPR[EPS]-1659926909174
GPR[ESUN]-1659926909174
GPR[SSUN]-1659926909174
1616555300
GPR[SPVATF]-1659926909368
GPR[EPVATF]-1659926909758
GPR[SPS]-1659926909758
[647276] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:124.
GPR[EPS]-1659926910213
GPR[ESUN]-1659926910213
GPR[SSUN]-1659926910213
GPR[ESUN]-1659926910213
GPR[SSUN]-1659926910213
GPR[ESUN]-1659926910213
GPR[SSUN]-1659926910213
-1117079791
GPR[ESUN]-1659926910407
GPR[SSUN]-1659926910407
-1117079791
GPR[SPVATF]-1659926910598
GPR[EPVATF]-1659926910968
GPR[SPS]-1659926910968
[648510] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:202.
GPR[EPS]-1659926911447
GPR[ESUN]-1659926911447
GPR[SSUN]-1659926911448
2013302092
GPR[SPVATF]-1659926911679
GPR[EPVATF]-1659926912056
GPR[SPS]-1659926912057
[649460] ERROR ConstraintModelBuilder - Unable to compile the change: 
class SimpleDefinitionFinder implements com.google.javascript.jscomp.CompilerPass , com.google.javascript.jscomp.DefinitionProvider {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.jscomp.DefinitionSite> definitionSiteMap;

    private final com.google.common.collect.Multimap<java.lang.String, com.google.javascript.jscomp.DefinitionsRemover.Definition> nameDefinitionMultimap;

    private final com.google.common.collect.Multimap<java.lang.String, com.google.javascript.jscomp.UseSite> nameUseSiteMultimap;

    public SimpleDefinitionFinder(com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.compiler = compiler;
        this.definitionSiteMap = com.google.common.collect.Maps.newLinkedHashMap();
        this.nameDefinitionMultimap = com.google.common.collect.LinkedHashMultimap.create();
        this.nameUseSiteMultimap = com.google.common.collect.LinkedHashMultimap.create();
    }

    public java.util.Collection<com.google.javascript.jscomp.DefinitionSite> getDefinitionSites() {
        return definitionSiteMap.values();
    }

    private com.google.javascript.jscomp.DefinitionSite getDefinitionAt(com.google.javascript.rhino.Node node) {
        return definitionSiteMap.get(node);
    }

    com.google.javascript.jscomp.DefinitionSite getDefinitionForFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return getDefinitionAt(com.google.javascript.jscomp.SimpleDefinitionFinder.getNameNodeFromFunctionNode(function));
    }

    @java.lang.Override
    public java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> getDefinitionsReferencedAt(com.google.javascript.rhino.Node useSite) {
        if (definitionSiteMap.containsKey(useSite)) {
            return null;
        }
        if (useSite.isGetProp()) {
            java.lang.String propName = useSite.getLastChild().getString();
            if (propName.equals("apply") || propName.equals("call")) {
                useSite = useSite.getFirstChild();
            }
        }
        java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(useSite);
        if (name != null) {
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> defs = nameDefinitionMultimap.get(name);
            if (!defs.isEmpty()) {
                return defs;
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(389).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(389).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(389).collectInput("defs",defs);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(389).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.compiler",com.google.javascript.jscomp.SimpleDefinitionFinder.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(389).collectInput("useSite",useSite);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(389).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameDefinitionMultimap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameDefinitionMultimap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(389).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameUseSiteMultimap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameUseSiteMultimap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(389).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(389).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.definitionSiteMap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.definitionSiteMap);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(389).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(389).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return null;

            }
        } else {
            return null;
        }
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node source) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, externs, new com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback(true));
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, source, new com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback(false));
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, source, new com.google.javascript.jscomp.SimpleDefinitionFinder.UseSiteGatheringCallback());
    }

    java.util.Collection<com.google.javascript.jscomp.UseSite> getUseSites(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(definition.getLValue());
        return nameUseSiteMultimap.get(name);
    }

    private static java.lang.String getSimplifiedName(com.google.javascript.rhino.Node node) {
        if (node.isName()) {
            java.lang.String name = node.getString();
            if ((name != null) && (!name.isEmpty())) {
                return name;
            } else {
                return null;
            }
        } else if (node.isGetProp()) {
            return "this." + node.getLastChild().getString();
        }
        return null;
    }

    private class DefinitionGatheringCallback extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        private boolean inExterns;

        DefinitionGatheringCallback(boolean inExterns) {
            this.inExterns = inExterns;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            if ((inExterns && node.isName()) && parent.isParamList()) {
                return;
            }
            com.google.javascript.jscomp.DefinitionsRemover.Definition def = com.google.javascript.jscomp.DefinitionsRemover.getDefinition(node, inExterns);
            if (def != null) {
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(def.getLValue());
                if (name != null) {
                    com.google.javascript.rhino.Node rValue = def.getRValue();
                    if (((rValue != null) && (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(rValue))) && (!rValue.isFunction())) {
                        com.google.javascript.jscomp.DefinitionsRemover.Definition unknownDef = new com.google.javascript.jscomp.DefinitionsRemover.UnknownDefinition(def.getLValue(), inExterns);
                        def = unknownDef;
                    }
                    if (inExterns) {
                        java.util.List<com.google.javascript.jscomp.DefinitionsRemover.Definition> stubsToRemove = com.google.common.collect.Lists.newArrayList();
                        java.lang.String qualifiedName = node.getQualifiedName();
                        if (qualifiedName != null) {
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : nameDefinitionMultimap.get(name)) {
                                if ((prevDef instanceof com.google.javascript.jscomp.DefinitionsRemover.ExternalNameOnlyDefinition) && (!jsdocContainsDeclarations(node))) {
                                    java.lang.String prevName = prevDef.getLValue().getQualifiedName();
                                    if (qualifiedName.equals(prevName)) {
                                        stubsToRemove.add(prevDef);
                                    }
                                }
                            }
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : stubsToRemove) {
                                nameDefinitionMultimap.remove(name, prevDef);
                            }
                        }
                    }
                    nameDefinitionMultimap.put(name, def);
                    definitionSiteMap.put(node, new com.google.javascript.jscomp.DefinitionSite(node, def, traversal.getModule(), traversal.inGlobalScope(), inExterns));
                }
            }
            if ((inExterns && (parent != null)) && parent.isExprResult()) {
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(node);
                if (name != null) {
                    boolean dropStub = false;
                    if (!jsdocContainsDeclarations(node)) {
                        java.lang.String qualifiedName = node.getQualifiedName();
                        if (qualifiedName != null) {
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : nameDefinitionMultimap.get(name)) {
                                java.lang.String prevName = prevDef.getLValue().getQualifiedName();
                                if (qualifiedName.equals(prevName)) {
                                    dropStub = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (!dropStub) {
                        com.google.javascript.jscomp.DefinitionsRemover.Definition definition = new com.google.javascript.jscomp.DefinitionsRemover.ExternalNameOnlyDefinition(node);
                        nameDefinitionMultimap.put(name, definition);
                        definitionSiteMap.put(node, new com.google.javascript.jscomp.DefinitionSite(node, definition, traversal.getModule(), traversal.inGlobalScope(), inExterns));
                    }
                }
            }
        }

        private boolean jsdocContainsDeclarations(com.google.javascript.rhino.Node node) {
            com.google.javascript.rhino.JSDocInfo info = node.getJSDocInfo();
            return (info != null) && info.containsDeclaration();
        }
    }

    private class UseSiteGatheringCallback extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> defs = getDefinitionsReferencedAt(node);
            if (defs == null) {
                return;
            }
            com.google.javascript.jscomp.DefinitionsRemover.Definition first = defs.iterator().next();
            java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(first.getLValue());
            com.google.common.base.Preconditions.checkNotNull(name);
            nameUseSiteMultimap.put(name, new com.google.javascript.jscomp.UseSite(node, traversal.getScope(), traversal.getModule()));
        }
    }

    static boolean isCallOrNewSite(com.google.javascript.jscomp.UseSite use) {
        com.google.javascript.rhino.Node call = use.node.getParent();
        if (call == null) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isCallOrNew(call) && (call.getFirstChild() == use.node);
    }

    boolean canModifyDefinition(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        if (isExported(definition)) {
            return false;
        }
        java.util.Collection<com.google.javascript.jscomp.UseSite> useSites = getUseSites(definition);
        if (useSites.isEmpty()) {
            return false;
        }
        for (com.google.javascript.jscomp.UseSite site : useSites) {
            com.google.javascript.rhino.Node nameNode = site.node;
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> singleSiteDefinitions = getDefinitionsReferencedAt(nameNode);
            if (singleSiteDefinitions.size() > 1) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(!singleSiteDefinitions.isEmpty());
            com.google.common.base.Preconditions.checkState(singleSiteDefinitions.contains(definition));
        }
        return true;
    }

    private boolean isExported(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        com.google.javascript.rhino.Node lValue = definition.getLValue();
        if (lValue == null) {
            return true;
        }
        java.lang.String partialName;
        if (lValue.isGetProp()) {
            partialName = lValue.getLastChild().getString();
        } else if (lValue.isName()) {
            partialName = lValue.getString();
        } else {
            return true;
        }
        com.google.javascript.jscomp.CodingConvention codingConvention = compiler.getCodingConvention();
        if (codingConvention.isExported(partialName)) {
            return true;
        }
        return false;
    }

    static boolean isSimpleFunctionDeclaration(com.google.javascript.rhino.Node fn) {
        com.google.javascript.rhino.Node parent = fn.getParent();
        com.google.javascript.rhino.Node gramps = parent.getParent();
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.SimpleDefinitionFinder.getNameNodeFromFunctionNode(fn);
        if ((nameNode != null) && nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (name.equals(com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN) || name.equals(com.google.javascript.jscomp.ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {
                return false;
            }
        }
        if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(fn)) {
            return true;
        }
        if (fn.getFirstChild().getString().isEmpty() && (com.google.javascript.jscomp.NodeUtil.isExprAssign(gramps) || parent.isName())) {
            return true;
        }
        return false;
    }

    static com.google.javascript.rhino.Node getNameNodeFromFunctionNode(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(function)) {
            return function.getFirstChild();
        } else {
            com.google.javascript.rhino.Node parent = function.getParent();
            if (com.google.javascript.jscomp.NodeUtil.isVarDeclaration(parent)) {
                return parent;
            } else if (parent.isAssign()) {
                return parent.getFirstChild();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent;
            }
        }
        return null;
    }

    void removeReferences(com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.DefinitionsRemover.isDefinitionNode(node)) {
            com.google.javascript.jscomp.DefinitionSite defSite = definitionSiteMap.get(node);
            if (defSite != null) {
                com.google.javascript.jscomp.DefinitionsRemover.Definition def = defSite.definition;
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(def.getLValue());
                if (name != null) {
                    this.definitionSiteMap.remove(node);
                    this.nameDefinitionMultimap.remove(name, node);
                }
            }
        } else {
            com.google.javascript.rhino.Node useSite = node;
            if (useSite.isGetProp()) {
                java.lang.String propName = useSite.getLastChild().getString();
                if (propName.equals("apply") || propName.equals("call")) {
                    useSite = useSite.getFirstChild();
                }
            }
            java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(useSite);
            if (name != null) {
                this.nameUseSiteMultimap.remove(name, new com.google.javascript.jscomp.UseSite(useSite, null, null));
            }
        }
        for (com.google.javascript.rhino.Node child : node.children()) {
            removeReferences(child);
        }
    }
}
[649460] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659926912397
GPR[SSUN]-1659926912397
602654447
GPR[ESUN]-1659926912596
GPR[SSUN]-1659926912596
GPR[ESUN]-1659926912596
GPR[SSUN]-1659926912596
GPR[ESUN]-1659926912596
GPR[SSUN]-1659926912596
GPR[ESUN]-1659926912596
GPR[SSUN]-1659926912596
GPR[ESUN]-1659926912596
GPR[SSUN]-1659926912596
GPR[ESUN]-1659926912596
GPR[SSUN]-1659926912596
GPR[ESUN]-1659926912596
GPR[SSUN]-1659926912597
GPR[ESUN]-1659926912597
GPR[SSUN]-1659926912597
GPR[ESUN]-1659926912597
GPR[SSUN]-1659926912597
1331276989
GPR[ESUN]-1659926912801
GPR[SSUN]-1659926912801
2013302092
GPR[SPVATF]-1659926913026
GPR[EPVATF]-1659926913466
GPR[SPS]-1659926913466
[651057] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:178.
GPR[EPS]-1659926913995
GPR[ESUN]-1659926913995
GPR[SSUN]-1659926913995
2013302092
GPR[ESUN]-1659926914222
GPR[SSUN]-1659926914222
GPR[ESUN]-1659926914222
GPR[SSUN]-1659926914222
GPR[ESUN]-1659926914222
GPR[SSUN]-1659926914222
GPR[ESUN]-1659926914222
GPR[SSUN]-1659926914222
GPR[ESUN]-1659926914222
GPR[SSUN]-1659926914222
1852376448
GPR[SPVATF]-1659926914434
GPR[EPVATF]-1659926914821
GPR[SPS]-1659926914821
[652378] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:178.
GPR[EPS]-1659926915315
GPR[ESUN]-1659926915315
GPR[SSUN]-1659926915315
1852376448
GPR[SPVATF]-1659926915529
GPR[EPVATF]-1659926915927
GPR[SPS]-1659926915927
[653481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:177.
GPR[EPS]-1659926916418
GPR[SPVATF]-1659926916418
GPR[EPVATF]-1659926916816
GPR[SPS]-1659926916816
[654368] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:177.
GPR[EPS]-1659926917305
GPR[ESUN]-1659926917305
GPR[SSUN]-1659926917305
1852376448
GPR[ESUN]-1659926917517
GPR[SSUN]-1659926917517
1852376448
GPR[ESUN]-1659926917729
GPR[SSUN]-1659926917729
1852376448
GPR[ESUN]-1659926917940
GPR[SSUN]-1659926917940
1852376448
GPR[SPVATF]-1659926918152
GPR[EPVATF]-1659926918544
GPR[SPS]-1659926918544
[656121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:69.
GPR[EPS]-1659926919058
GPR[ESUN]-1659926919058
GPR[SSUN]-1659926919058
1852376448
GPR[SPVATF]-1659926919277
GPR[EPVATF]-1659926919690
GPR[SPS]-1659926919690
[657262] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:66.
GPR[EPS]-1659926920199
GPR[ESUN]-1659926920199
GPR[SSUN]-1659926920200
1852376448
GPR[SPVATF]-1659926920412
GPR[EPVATF]-1659926920829
GPR[SPS]-1659926920829
[658395] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:64.
GPR[EPS]-1659926921333
GPR[ESUN]-1659926921333
GPR[SSUN]-1659926921333
1852376448
GPR[SPVATF]-1659926921622
GPR[EPVATF]-1659926922024
GPR[SPS]-1659926922024
[659592] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:60.
GPR[EPS]-1659926922529
GPR[ESUN]-1659926922529
GPR[SSUN]-1659926922529
1852376448
GPR[ESUN]-1659926922740
GPR[SSUN]-1659926922740
1852376448
GPR[ESUN]-1659926922949
GPR[SSUN]-1659926922949
1852376448
GPR[SPVATF]-1659926923163
GPR[EPVATF]-1659926923591
GPR[SPS]-1659926923591
[661166] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:130.
GPR[EPS]-1659926924103
GPR[SPVATF]-1659926924104
GPR[EPVATF]-1659926924531
GPR[SPS]-1659926924531
[662085] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:130.
GPR[EPS]-1659926925022
GPR[ESUN]-1659926925022
GPR[SSUN]-1659926925022
1852376448
GPR[SPVATF]-1659926925236
GPR[EPVATF]-1659926925687
GPR[SPS]-1659926925687
[663262] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:125.
GPR[EPS]-1659926926199
GPR[SPVATF]-1659926926199
GPR[EPVATF]-1659926926629
GPR[SPS]-1659926926629
[664192] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:125.
GPR[EPS]-1659926927129
GPR[ESUN]-1659926927129
GPR[SSUN]-1659926927129
1852376448
GPR[SPVATF]-1659926927342
GPR[EPVATF]-1659926927812
GPR[SPS]-1659926927812
[665374] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:121.
GPR[EPS]-1659926928311
GPR[SPVATF]-1659926928311
GPR[EPVATF]-1659926928752
GPR[SPS]-1659926928752
[666373] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:121.
GPR[EPS]-1659926929310
GPR[ESUN]-1659926929310
GPR[SSUN]-1659926929310
2433571
GPR[ESUN]-1659926929545
GPR[SSUN]-1659926929546
2433571
GPR[ESUN]-1659926929872
GPR[SSUN]-1659926929872
2433571
GPR[ESUN]-1659926930097
GPR[SSUN]-1659926930097
2433571
GPR[SPVATF]-1659926930324
GPR[EPVATF]-1659926930811
GPR[SPS]-1659926930811
[1268824] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659927531761
GPR[SSUN]-1659927536912
\n\nNode: host-48\n
\n\nDate: Sun 07 Aug 2022 09:07:54 PM PDT\n
End running Nopol Closure/15 results at /experiment_home///results/Nopol/Closure/15/seed_261/
Removing checked out dir script/workingdir/Nopol/Closure_15
GPR[SSLE]-1659931675158
GPR[ESLE]-1659931735162
