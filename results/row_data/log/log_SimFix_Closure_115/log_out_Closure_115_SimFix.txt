Sleep 1m start
GPR[SSLI]-1659885573130
GPR[ESLI]-1659885633136
Running SimFix Closure 115b
Timezone: America/Los_Angeles
Seed 261
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Closure/115/seed_261/
Project lc: closure
New out script/workingdir/SimFix/closure/closure_115_buggy
The file script/workingdir/SimFix/closure/closure_115_buggy does not exist!
script/workingdir/SimFix/closure/closure_115_buggy
Current directory: script/workingdir/SimFix/closure/closure_115_buggy
classpath:  script/workingdir/SimFix/closure/closure_115_buggy/build/classes:script/workingdir/SimFix/closure/closure_115_buggy/lib/args4j.jar:script/workingdir/SimFix/closure/closure_115_buggy/lib/guava.jar:script/workingdir/SimFix/closure/closure_115_buggy/lib/json.jar:script/workingdir/SimFix/closure/closure_115_buggy/lib/jsr305.jar:script/workingdir/SimFix/closure/closure_115_buggy/lib/protobuf-java.jar:script/workingdir/SimFix/closure/closure_115_buggy/build/lib/rhino.jar:script/workingdir/SimFix/closure/closure_115_buggy/lib/ant.jar:script/workingdir/SimFix/closure/closure_115_buggy/lib/ant-launcher.jar:script/workingdir/SimFix/closure/closure_115_buggy/lib/caja-r4314.jar:script/workingdir/SimFix/closure/closure_115_buggy/lib/jarjar.jar:script/workingdir/SimFix/closure/closure_115_buggy/lib/junit.jar:script/workingdir/SimFix/closure/closure_115_buggy/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659885652603
GPR[ESLB]-1659885712609
Calling SimFix: at script/workingdir/SimFix/closure/closure_115_buggy
build
build.xml
closure-compiler.pom
contrib
CONTRIBUTORS
COPYING
d4j-info
defects4j.build.properties
externs
gen
lib
README
src
test
tools
content current dir: build build.xml closure-compiler.pom contrib CONTRIBUTORS COPYING d4j-info defects4j.build.properties externs gen lib README src test tools
Node: host-46
Date init: Sun 07 Aug 2022 08:21:54 AM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659885714901
=================================================
Project : closure_115	start : 22/08/07 08:21

Field type inconsistancy 'type' with types : JSType and Type
Variable type inconsistancy of 'name' in method 'visit,NodeTraversal,Node,Node' with types : String and Name
Variable type inconsistancy of 'start' in method 'parseRegExp,String,String' with types : int and char
Variable type inconsistancy of 'end' in method 'parseRegExp,String,String' with types : int and char
Field type inconsistancy 'SUPER' with types : FunctionInjector.Reference and SimpleReference<SimpleSlot>
Field type inconsistancy 'THIS' with types : Token and int
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testDoubleInlining1
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified9
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions23
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions6
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions22
GPR[ESUP]-1659885748740
GPR[SFL]-1659885749445
GPR[EFL]-1659885749449
GPR[SFP]-1659885749449
TIMEOUT : 3600000
GPR[SSUN]-1659885749528
com.google.javascript.rhino.Node,1430
GPR[ESUN]-1659885751346
GPR[SSUN]-1659885751346
com.google.javascript.rhino.Node,1446
GPR[ESUN]-1659885753142
GPR[SSUN]-1659885753142
com.google.javascript.rhino.Node,1459
GPR[ESUN]-1659885754810
GPR[SSUN]-1659885754810
com.google.javascript.rhino.Node,2194
Find no block!
GPR[SSUN]-1659885755063
com.google.javascript.rhino.Node,2195
GPR[ESUN]-1659885756771
GPR[SSUN]-1659885756771
com.google.javascript.rhino.Node,2196
GPR[ESUN]-1659885757037
GPR[SSUN]-1659885757037
com.google.javascript.rhino.Node,2197
Find no block!
GPR[SSUN]-1659885757286
com.google.javascript.jscomp.FunctionInjector,731
========
if(current.shouldRemove&&NodeUtil.canBeSideEffected(cArg)){
return CanInlineResult.NO;
}

========
GPR[SPVS]-1659885759079
GPR[SPVAP]-1659885759079
GPR[EPVAP]-1659885763139
GPR[EPVS]-1659885763139
========
if(shouldRemove&&NodeUtil.canBeSideEffected(cArg)){
return CanInlineResult.NO;
}

========
GPR[SPVS]-1659885763141
GPR[SPVAP]-1659885763141
GPR[EPVAP]-1659885765668
GPR[EPVS]-1659885765669
========
if(cArg==null&&NodeUtil.canBeSideEffected(cArg)){
return CanInlineResult.NO;
}

========
GPR[SPVS]-1659885765671
GPR[SPVAP]-1659885765671
GPR[EPVAP]-1659885773723
GPR[SPVATF]-1659885773723
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659885777382
GPR[SPVATR]-1659885777382
TESTING : closure_115
GPR[EPVATR]-1659885851214
GPR[EPVS]-1659885851214
GPR[PF]-1659885851214
sourceFile  script/workingdir/SimFix/closure/closure_115_buggy/src/com/google/javascript/jscomp/FunctionInjector.java
location   script/workingdir/SimFix/closure/closure_115_buggy
========
if(cArg!=null&&NodeUtil.isFunctionObjectCall(callNode)){
return CanInlineResult.NO;
}

========
GPR[SPVS]-1659885851226
GPR[SPVAP]-1659885851226
GPR[EPVAP]-1659885855152
GPR[SPVATF]-1659885855152
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659885858748
GPR[SPVATR]-1659885858749
TESTING : closure_115
GPR[EPVATR]-1659885928950
GPR[EPVS]-1659885928950
========
if(cArg!=null&&NodeUtil.canBeSideEffected(cArg)){
return CanInlineResult.NO;
}

========
GPR[SPVS]-1659885928952
GPR[SPVAP]-1659885928952
GPR[EPVAP]-1659885932938
GPR[SPVATF]-1659885932938
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659885936605
GPR[EPVS]-1659885936605
========
if(hasSideEffects&&NodeUtil.isFunctionObjectCall(callNode)){
return CanInlineResult.NO;
}

========
GPR[SPVS]-1659885936606
GPR[SPVAP]-1659885936606
GPR[EPVAP]-1659885940580
GPR[SPVATF]-1659885940580
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659885944148
GPR[SPVATR]-1659885944149
TESTING : closure_115
GPR[EPVATR]-1659886014369
GPR[EPVS]-1659886014369
GPR[PF]-1659886014369
sourceFile  script/workingdir/SimFix/closure/closure_115_buggy/src/com/google/javascript/jscomp/FunctionInjector.java
location   script/workingdir/SimFix/closure/closure_115_buggy
GPR[ESUN]-1659886014380
GPR[SSUN]-1659886014380
com.google.javascript.jscomp.FunctionToBlockMutator,201
========
return "JSCompiler_inline_this_"+idSupplier.get();

========
GPR[SPVS]-1659886016655
GPR[SPVAP]-1659886016655
GPR[EPVAP]-1659886026944
GPR[SPVATF]-1659886026944
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886031134
GPR[EPVS]-1659886031134
========
return "JSCompiler_inline_label_"+safeNameIdSupplier.get();

========
GPR[SPVS]-1659886031136
GPR[SPVAP]-1659886031136
GPR[EPVAP]-1659886032983
GPR[EPVS]-1659886032983
========
return "JSCompiler_inline_anon_param_"+idSupplier.get();

========
GPR[SPVS]-1659886032984
GPR[SPVAP]-1659886032984
GPR[EPVAP]-1659886037026
GPR[SPVATF]-1659886037026
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886040933
GPR[EPVS]-1659886040933
GPR[ESUN]-1659886040939
GPR[SSUN]-1659886040939
com.google.javascript.jscomp.FunctionToBlockMutator,192
Find no block!
GPR[SSUN]-1659886041478
com.google.javascript.jscomp.InlineFunctions,503
UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

========
if(!referenceAdded&&mode==InliningMode.DIRECT&&DIRECT){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886043501
GPR[SPVAP]-1659886043501
GPR[EPVAP]-1659886047210
GPR[EPVS]-1659886047210
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&ns.onlyAffectsClassDef){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886047212
GPR[SPVAP]-1659886047212
GPR[EPVAP]-1659886049783
GPR[EPVS]-1659886049783
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&ns){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886049785
GPR[SPVAP]-1659886049785
GPR[EPVAP]-1659886052314
GPR[EPVS]-1659886052315
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&onlyAffectsClassDef){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886052316
GPR[SPVAP]-1659886052316
GPR[EPVAP]-1659886054783
GPR[EPVS]-1659886054783
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&!t.inGlobalScope()){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886054785
GPR[SPVAP]-1659886054785
GPR[EPVAP]-1659886062783
GPR[SPVATF]-1659886062783
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886066454
GPR[EPVS]-1659886066454
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&t){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886066455
GPR[SPVAP]-1659886066455
GPR[EPVAP]-1659886068314
GPR[EPVS]-1659886068314
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&!callNode.isExprResult()){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886068316
GPR[SPVAP]-1659886068316
GPR[EPVAP]-1659886072249
GPR[SPVATF]-1659886072249
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886075876
GPR[EPVS]-1659886075876
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&node){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886075878
GPR[SPVAP]-1659886075878
GPR[EPVAP]-1659886077749
GPR[EPVS]-1659886077749
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
updateMinimumModule(module);
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886077751
GPR[SPVAP]-1659886077751
GPR[EPVAP]-1659886079588
GPR[EPVS]-1659886079588
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
mode=module;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886079589
GPR[SPVAP]-1659886079589
GPR[EPVAP]-1659886081577
GPR[EPVS]-1659886081577
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&n){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886081580
GPR[SPVAP]-1659886081580
GPR[EPVAP]-1659886083444
GPR[EPVS]-1659886083445
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&externsRoot){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886083446
GPR[SPVAP]-1659886083446
GPR[EPVAP]-1659886085473
GPR[EPVS]-1659886085473
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
mode=t;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886085476
GPR[SPVAP]-1659886085476
GPR[EPVAP]-1659886087309
GPR[EPVS]-1659886087309
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
mode=compiler;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886087311
GPR[SPVAP]-1659886087311
GPR[EPVAP]-1659886089183
GPR[EPVS]-1659886089183
========
info.moduleToContainDecl=module;
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886089185
GPR[SPVAP]-1659886089185
GPR[EPVAP]-1659886091078
GPR[EPVS]-1659886091078
========
info.parentForNewVarDecl=var;
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886091080
GPR[SPVAP]-1659886091080
GPR[EPVAP]-1659886092913
GPR[EPVS]-1659886092913
========
if(relationship.type==SubclassType.INHERITS){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886092915
GPR[SPVAP]-1659886092915
GPR[EPVAP]-1659886094780
GPR[EPVS]-1659886094780
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&subClass){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886094782
GPR[SPVAP]-1659886094782
GPR[EPVAP]-1659886096813
GPR[EPVS]-1659886096813
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
actualReturnType=getNativeType(VOID_TYPE);
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886096815
GPR[SPVAP]-1659886096815
GPR[EPVAP]-1659886098684
GPR[EPVS]-1659886098684
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&parent){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886098686
GPR[SPVAP]-1659886098686
GPR[EPVAP]-1659886100561
GPR[EPVS]-1659886100561
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&!NodeUtil.isFunctionObjectCall(callNode)){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886100563
GPR[SPVAP]-1659886100563
GPR[EPVAP]-1659886104656
GPR[SPVATF]-1659886104656
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886108357
GPR[EPVS]-1659886108357
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&NodeUtil.isFunctionObjectCall(callNode)){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886108359
GPR[SPVAP]-1659886108359
GPR[EPVAP]-1659886112291
GPR[SPVATF]-1659886112291
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886115897
GPR[EPVS]-1659886115897
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&depModule){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886115899
GPR[SPVAP]-1659886115899
GPR[EPVAP]-1659886117770
GPR[EPVS]-1659886117770
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&inlineLocalFunctions){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886117773
GPR[SPVAP]-1659886117773
GPR[EPVAP]-1659886121768
GPR[SPVATF]-1659886121768
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886125464
GPR[EPVS]-1659886125464
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&notProvidedByRequires){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886125466
GPR[SPVAP]-1659886125466
GPR[EPVAP]-1659886127327
GPR[EPVS]-1659886127327
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&di){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886127328
GPR[SPVAP]-1659886127328
GPR[EPVAP]-1659886129579
GPR[EPVS]-1659886129579
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&PRIVATE){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886129581
GPR[SPVAP]-1659886129581
GPR[EPVAP]-1659886131809
GPR[EPVS]-1659886131809
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&var.getScope()){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886131811
GPR[SPVAP]-1659886131811
GPR[EPVAP]-1659886133705
GPR[EPVS]-1659886133705
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&var){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886133707
GPR[SPVAP]-1659886133707
GPR[EPVAP]-1659886135604
GPR[EPVS]-1659886135604
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&callsSeen<callsSeen){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886135607
GPR[SPVAP]-1659886135607
GPR[EPVAP]-1659886137441
GPR[EPVS]-1659886137441
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&maxArgs){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886137443
GPR[SPVAP]-1659886137443
GPR[EPVAP]-1659886139495
GPR[EPVS]-1659886139495
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&numArgs){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886139496
GPR[SPVAP]-1659886139496
GPR[EPVAP]-1659886141356
GPR[EPVS]-1659886141356
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&callNode.getString().endsWith("__")){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886141359
GPR[SPVAP]-1659886141359
GPR[EPVAP]-1659886145418
GPR[SPVATF]-1659886145418
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886149090
GPR[EPVS]-1659886149090
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&callNode){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886149092
GPR[SPVAP]-1659886149092
GPR[EPVAP]-1659886150979
GPR[EPVS]-1659886150979
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&NAME){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886150982
GPR[SPVAP]-1659886150982
GPR[EPVAP]-1659886152942
GPR[EPVS]-1659886152942
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&!referenceAdded){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886152945
GPR[SPVAP]-1659886152945
GPR[EPVAP]-1659886156907
GPR[SPVATF]-1659886156907
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886160887
GPR[EPVS]-1659886160887
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&declaredOverride){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886160889
GPR[SPVAP]-1659886160889
GPR[EPVAP]-1659886162875
GPR[EPVS]-1659886162875
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
if(var!=null){
JSType var.getType()=var.getType();
if(var.getType()!=null){
type=var.getType();
}
}
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886162877
GPR[SPVAP]-1659886162877
GPR[EPVAP]-1659886164546
GPR[EPVS]-1659886164546
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&!t.getInput().isExtern()){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886164548
GPR[SPVAP]-1659886164548
GPR[EPVAP]-1659886168487
GPR[SPVATF]-1659886168487
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886172072
GPR[EPVS]-1659886172072
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&(!t.inGlobalScope()&&blockFunctionInliningEnabled)){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886172074
GPR[SPVAP]-1659886172074
GPR[EPVAP]-1659886176063
GPR[SPVATF]-1659886176063
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886180026
GPR[EPVS]-1659886180026
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&pair.distance*4<fakeName.length()){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886180028
GPR[SPVAP]-1659886180028
GPR[EPVAP]-1659886181942
GPR[EPVS]-1659886181942
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&pair){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886181944
GPR[SPVAP]-1659886181944
GPR[EPVAP]-1659886183900
GPR[EPVS]-1659886183900
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&distance){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886183902
GPR[SPVAP]-1659886183902
GPR[EPVAP]-1659886185818
GPR[EPVS]-1659886185818
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&fakeName.length()){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886185820
GPR[SPVAP]-1659886185820
GPR[EPVAP]-1659886187889
GPR[EPVS]-1659886187889
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&fakeName){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886187891
GPR[SPVAP]-1659886187891
GPR[EPVAP]-1659886189804
GPR[EPVS]-1659886189804
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&superClassHasProperty){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886189808
GPR[SPVAP]-1659886189808
GPR[EPVAP]-1659886191649
GPR[EPVS]-1659886191649
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&sameInput){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886191652
GPR[SPVAP]-1659886191652
GPR[EPVAP]-1659886193888
GPR[EPVS]-1659886193888
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&desiredType){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886193891
GPR[SPVAP]-1659886193891
GPR[EPVAP]-1659886195731
GPR[EPVS]-1659886195731
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&(fakeName!=null&&referencesThis?null:callNode.getString().equals(valueName))){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886195734
GPR[SPVAP]-1659886195734
GPR[EPVAP]-1659886197722
GPR[EPVS]-1659886197722
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&valueName){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886197724
GPR[SPVAP]-1659886197724
GPR[EPVAP]-1659886199742
GPR[EPVS]-1659886199742
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&referencesThis?null:callNode.getString().equals(fakeName)){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886199743
GPR[SPVAP]-1659886199743
GPR[EPVAP]-1659886201730
GPR[EPVS]-1659886201730
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&referencesThis?null:callNode.getString()){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886201732
GPR[SPVAP]-1659886201732
GPR[EPVAP]-1659886204000
GPR[EPVS]-1659886204000
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&GET_COMPILER_OVERRIDES){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886204002
GPR[SPVAP]-1659886204002
GPR[EPVAP]-1659886205895
GPR[EPVS]-1659886205895
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&(inlineLocalFunctions||!NodeUtil.mayHaveSideEffects(var,t.getCompiler()))){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886205899
GPR[SPVAP]-1659886205899
GPR[EPVAP]-1659886208437
GPR[EPVS]-1659886208437
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&isSimpleOp){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886208438
GPR[SPVAP]-1659886208438
GPR[EPVAP]-1659886210291
GPR[EPVS]-1659886210291
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&NodeUtil.mayHaveSideEffects(var,t.getCompiler())){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886210293
GPR[SPVAP]-1659886210293
GPR[EPVAP]-1659886212124
GPR[EPVS]-1659886212124
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&isExtern){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886212126
GPR[SPVAP]-1659886212126
GPR[EPVAP]-1659886214125
GPR[EPVS]-1659886214125
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&ownerType){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886214126
GPR[SPVAP]-1659886214126
GPR[EPVAP]-1659886216131
GPR[EPVS]-1659886216131
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&inExterns){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886216134
GPR[SPVAP]-1659886216134
GPR[EPVAP]-1659886218124
GPR[EPVS]-1659886218124
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&var.getString().equals(relationship.subclassName)){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886218128
GPR[SPVAP]-1659886218128
GPR[EPVAP]-1659886219955
GPR[EPVS]-1659886219955
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&callNode.getFirstChild()==callNode){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886219958
GPR[SPVAP]-1659886219958
GPR[EPVAP]-1659886223944
GPR[SPVATF]-1659886223944
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886227629
GPR[EPVS]-1659886227629
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&(classifyCallSite(callNode)==CallSiteType.DECOMPOSABLE_EXPRESSION||callSiteType==CallSiteType.EXPRESSION)){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886227633
GPR[SPVAP]-1659886227633
GPR[EPVAP]-1659886229480
GPR[EPVS]-1659886229480
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&callSiteType){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886229482
GPR[SPVAP]-1659886229482
GPR[EPVAP]-1659886231326
GPR[EPVS]-1659886231326
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&DECOMPOSABLE_EXPRESSION){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886231328
GPR[SPVAP]-1659886231328
GPR[EPVAP]-1659886233407
GPR[EPVS]-1659886233407
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&EXPRESSION){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886233408
GPR[SPVAP]-1659886233408
GPR[EPVAP]-1659886235296
GPR[EPVS]-1659886235296
========
if(classifyCallSite(callNode)==CallSiteType.UNSUPPORTED){
return CanInlineResult.NO;
}
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886235298
GPR[SPVAP]-1659886235298
GPR[EPVAP]-1659886237349
GPR[EPVS]-1659886237349
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&var!=null&&isGlobalFunctionDeclaration(t,firstChild)){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886237351
GPR[SPVAP]-1659886237351
GPR[EPVAP]-1659886239376
GPR[EPVS]-1659886239376
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&firstChild){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659886239377
GPR[SPVAP]-1659886239377
GPR[EPVAP]-1659886241284
GPR[EPVS]-1659886241284
GPR[ESUN]-1659886241290
GPR[SSUN]-1659886241290
com.google.javascript.jscomp.InlineFunctions,504
GPR[ESUN]-1659886241766
GPR[SSUN]-1659886241766
com.google.javascript.jscomp.InlineFunctions,541
========
if(result!=CanInlineResult.NO){
boolean decompose=(result==CanInlineResult.AFTER_PREPARATION);
fs.addReference(new Reference(callNode,module,mode,decompose));
return true;
}
return true;

========
GPR[SPVS]-1659886243494
GPR[SPVAP]-1659886243494
GPR[EPVAP]-1659886252320
GPR[SPVATF]-1659886252320
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886256270
GPR[EPVS]-1659886256270
========
if(fs.getCodingConvention().getSingletonGetterClassName(callNode)!=null){
return true;
}
if(result!=CanInlineResult.NO){
boolean decompose=(result==CanInlineResult.AFTER_PREPARATION);
fs.addReference(new Reference(callNode,module,mode,decompose));
return true;
}
return false;

========
GPR[SPVS]-1659886256272
GPR[SPVAP]-1659886256272
GPR[EPVAP]-1659886258544
GPR[EPVS]-1659886258544
========
if(callNode.isOnlyModifiesArgumentsCall()&&allArgsUnescapedLocal(callNode)){
return false;
}
if(result!=CanInlineResult.NO){
boolean decompose=(result==CanInlineResult.AFTER_PREPARATION);
fs.addReference(new Reference(callNode,module,mode,decompose));
return true;
}
return false;

========
GPR[SPVS]-1659886258548
GPR[SPVAP]-1659886258548
GPR[EPVAP]-1659886260564
GPR[EPVS]-1659886260565
========
if(callNode.getFirstChild().isName()&&CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())){
return false;
}
if(result!=CanInlineResult.NO){
boolean decompose=(result==CanInlineResult.AFTER_PREPARATION);
fs.addReference(new Reference(callNode,module,mode,decompose));
return true;
}
return false;

========
GPR[SPVS]-1659886260567
GPR[SPVAP]-1659886260567
GPR[EPVAP]-1659886262538
GPR[EPVS]-1659886262538
========
if(result!=CanInlineResult.NO){
boolean decompose=(result==CanInlineResult.AFTER_PREPARATION);
fs.addReference(new Reference(callNode,module,mode,decompose));
return true;
}
if(!callNode.isCall()){
throw new IllegalStateException("Expected CALL node, got "+Token.name(callNode.getType()));
}
return false;

========
GPR[SPVS]-1659886262541
GPR[SPVAP]-1659886262541
GPR[EPVAP]-1659886267416
GPR[SPVATF]-1659886267416
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886271409
GPR[EPVS]-1659886271409
========
if(callNode.isOnlyModifiesArgumentsCall()&&allArgsUnescapedLocal(callNode)){
return false;
}
if(result!=CanInlineResult.NO){
boolean decompose=(result==CanInlineResult.AFTER_PREPARATION);
fs.addReference(new Reference(callNode,module,mode,decompose));
return true;
}
if(!callNode.isCall()){
throw new IllegalStateException("Expected CALL node, got "+Token.name(callNode.getType()));
}
return false;

========
GPR[SPVS]-1659886271411
GPR[SPVAP]-1659886271411
GPR[EPVAP]-1659886273320
GPR[EPVS]-1659886273320
GPR[ESUN]-1659886273322
GPR[SSUN]-1659886273322
com.google.javascript.jscomp.RenameLabels,188
========
case Token.THIS :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886275957
GPR[SPVAP]-1659886275957
GPR[EPVAP]-1659886284889
GPR[SPVATF]-1659886284889
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886288493
GPR[EPVS]-1659886288493
========
case Token.FUNCTION :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886288495
GPR[SPVAP]-1659886288495
GPR[EPVAP]-1659886292346
GPR[SPVATF]-1659886292346
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886295920
GPR[EPVS]-1659886295920
========
default :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886295921
GPR[SPVAP]-1659886295921
GPR[EPVAP]-1659886299709
GPR[SPVATF]-1659886299709
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886303721
GPR[EPVS]-1659886303721
========
case Token.COMMA :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886303722
GPR[SPVAP]-1659886303722
GPR[EPVAP]-1659886307717
GPR[SPVATF]-1659886307717
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886311328
GPR[EPVS]-1659886311328
========
case Token.ARRAYLIT :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886311329
GPR[SPVAP]-1659886311329
GPR[EPVAP]-1659886315101
GPR[SPVATF]-1659886315101
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886318997
GPR[EPVS]-1659886318997
========
case Token.HOOK :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886318998
GPR[SPVAP]-1659886318998
GPR[EPVAP]-1659886323113
GPR[SPVATF]-1659886323113
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886327116
GPR[EPVS]-1659886327116
========
case Token.DELPROP :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886327118
GPR[SPVAP]-1659886327118
GPR[EPVAP]-1659886331114
GPR[SPVATF]-1659886331114
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886335107
GPR[EPVS]-1659886335107
========
case Token.GETPROP :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886335109
GPR[SPVAP]-1659886335109
GPR[EPVAP]-1659886339193
GPR[SPVATF]-1659886339193
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886343080
GPR[EPVS]-1659886343080
========
case Token.DEFAULT_CASE :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886343082
GPR[SPVAP]-1659886343082
GPR[EPVAP]-1659886347072
GPR[SPVATF]-1659886347072
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886350964
GPR[EPVS]-1659886350964
========
case Token.DO :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886350966
GPR[SPVAP]-1659886350966
GPR[EPVAP]-1659886354764
GPR[SPVATF]-1659886354764
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886358441
GPR[EPVS]-1659886358441
========
case Token.CONTINUE :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886358443
GPR[SPVAP]-1659886358443
GPR[EPVAP]-1659886360357
GPR[EPVS]-1659886360357
========
case NUMBER :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886360358
GPR[SPVAP]-1659886360358
GPR[EPVAP]-1659886362385
GPR[EPVS]-1659886362385
========
case Token.BITAND :
return tryRotateAssociativeOperator(node);

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886362386
GPR[SPVAP]-1659886362386
GPR[EPVAP]-1659886364222
GPR[EPVS]-1659886364222
========
case Token.NE :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886364223
GPR[SPVAP]-1659886364223
GPR[EPVAP]-1659886368246
GPR[SPVATF]-1659886368246
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886371890
GPR[EPVS]-1659886371890
========
case Token.SCRIPT :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886371897
GPR[SPVAP]-1659886371897
GPR[EPVAP]-1659886375686
GPR[SPVATF]-1659886375686
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886379857
GPR[EPVS]-1659886379857
========
case Token.BITOR :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886379858
GPR[SPVAP]-1659886379858
GPR[EPVAP]-1659886383707
GPR[SPVATF]-1659886383708
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886387342
GPR[EPVS]-1659886387342
========
case Token.NAME :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886387344
GPR[SPVAP]-1659886387344
GPR[EPVAP]-1659886391143
GPR[SPVATF]-1659886391143
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886394706
GPR[EPVS]-1659886394706
========
case Token.SHEQ :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886394707
GPR[SPVAP]-1659886394707
GPR[EPVAP]-1659886398499
GPR[SPVATF]-1659886398499
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886402379
GPR[EPVS]-1659886402379
========
case Token.THROW :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886402380
GPR[SPVAP]-1659886402380
GPR[EPVAP]-1659886406337
GPR[SPVATF]-1659886406337
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886409976
GPR[EPVS]-1659886409976
========
case Token.OBJECTLIT :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886409977
GPR[SPVAP]-1659886409977
GPR[EPVAP]-1659886413797
GPR[SPVATF]-1659886413797
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886417383
GPR[EPVS]-1659886417383
========
case Token.OR :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886417385
GPR[SPVAP]-1659886417385
GPR[EPVAP]-1659886421176
GPR[SPVATF]-1659886421176
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886425644
GPR[EPVS]-1659886425644
========
case Token.IF :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886425645
GPR[SPVAP]-1659886425645
GPR[EPVAP]-1659886429562
GPR[SPVATF]-1659886429562
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886433786
GPR[EPVS]-1659886433786
========
case Token.WITH :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886433787
GPR[SPVAP]-1659886433787
GPR[EPVAP]-1659886437749
GPR[SPVATF]-1659886437749
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886441622
GPR[EPVS]-1659886441622
========
case Token.VOID :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886441623
GPR[SPVAP]-1659886441623
GPR[EPVAP]-1659886445492
GPR[SPVATF]-1659886445492
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886449141
GPR[EPVS]-1659886449141
========
case Token.BLOCK :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886449143
GPR[SPVAP]-1659886449143
GPR[EPVAP]-1659886453130
GPR[SPVATF]-1659886453130
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886456700
GPR[EPVS]-1659886456700
========
case Token.EXPR_RESULT :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886456701
GPR[SPVAP]-1659886456701
GPR[EPVAP]-1659886460555
GPR[SPVATF]-1659886460555
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886464462
GPR[EPVS]-1659886464462
========
case Token.LABEL :
Preconditions.checkArgument(parent.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886464464
GPR[SPVAP]-1659886464464
GPR[EPVAP]-1659886468234
GPR[SPVATF]-1659886468234
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886472167
GPR[EPVS]-1659886472167
========
default :

case Token.LABEL :
Preconditions.checkArgument(parent.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886472169
GPR[SPVAP]-1659886472169
GPR[EPVAP]-1659886476040
GPR[SPVATF]-1659886476040
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886480404
GPR[EPVS]-1659886480404
========
case Token.DO :
tryMinimizeCondition(NodeUtil.getConditionExpression(node));
return node;

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886480406
GPR[SPVAP]-1659886480406
GPR[EPVAP]-1659886482321
GPR[EPVS]-1659886482321
========
case Token.FOR :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886482322
GPR[SPVAP]-1659886482322
GPR[EPVAP]-1659886486210
GPR[SPVATF]-1659886486210
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886490117
GPR[EPVS]-1659886490117
========
case Token.WHILE :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886490118
GPR[SPVAP]-1659886490118
GPR[EPVAP]-1659886493930
GPR[SPVATF]-1659886493930
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886497800
GPR[EPVS]-1659886497800
========
case Token.SWITCH :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886497801
GPR[SPVAP]-1659886497801
GPR[EPVAP]-1659886501625
GPR[SPVATF]-1659886501625
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886505564
GPR[EPVS]-1659886505564
========
case Token.OR :
return node!=parent.getFirstChild();

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886505565
GPR[SPVAP]-1659886505565
GPR[EPVAP]-1659886507436
GPR[EPVS]-1659886507436
========
case AssignExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886507437
GPR[SPVAP]-1659886507437
GPR[EPVAP]-1659886509433
GPR[EPVS]-1659886509433
========
case BlockStmt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886509434
GPR[SPVAP]-1659886509434
GPR[EPVAP]-1659886511474
GPR[EPVS]-1659886511474
========
case CallExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886511475
GPR[SPVAP]-1659886511475
GPR[EPVAP]-1659886513268
GPR[EPVS]-1659886513268
========
case CatchClause :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886513269
GPR[SPVAP]-1659886513269
GPR[EPVAP]-1659886515212
GPR[EPVS]-1659886515212
========
case ContinueStmt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886515213
GPR[SPVAP]-1659886515213
GPR[EPVAP]-1659886517032
GPR[EPVS]-1659886517032
========
case DataProp :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886517033
GPR[SPVAP]-1659886517033
GPR[EPVAP]-1659886519021
GPR[EPVS]-1659886519021
========
case SetterProp :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886519022
GPR[SPVAP]-1659886519022
GPR[EPVAP]-1659886520867
GPR[EPVS]-1659886520868
========
case DeleteExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886520869
GPR[SPVAP]-1659886520869
GPR[EPVAP]-1659886522685
GPR[EPVS]-1659886522685
========
case Empty :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886522686
GPR[SPVAP]-1659886522686
GPR[EPVAP]-1659886524610
GPR[EPVS]-1659886524610
========
case EvalExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886524611
GPR[SPVAP]-1659886524611
GPR[EPVAP]-1659886526539
GPR[EPVS]-1659886526539
========
case ForStmt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886526540
GPR[SPVAP]-1659886526540
GPR[EPVAP]-1659886528531
GPR[EPVS]-1659886528531
========
case FunctionExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886528532
GPR[SPVAP]-1659886528532
GPR[EPVAP]-1659886530477
GPR[EPVS]-1659886530477
========
case IdPatt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886530479
GPR[SPVAP]-1659886530479
GPR[EPVAP]-1659886532275
GPR[EPVS]-1659886532275
========
case InitPatt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886532276
GPR[SPVAP]-1659886532276
GPR[EPVAP]-1659886534138
GPR[EPVS]-1659886534138
========
case LabelledStmt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886534140
GPR[SPVAP]-1659886534140
GPR[EPVAP]-1659886536035
GPR[EPVS]-1659886536035
========
case LogicalAndExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886536036
GPR[SPVAP]-1659886536036
GPR[EPVAP]-1659886537836
GPR[EPVS]-1659886537836
========
case MemberExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886537837
GPR[SPVAP]-1659886537837
GPR[EPVAP]-1659886539866
GPR[EPVS]-1659886539866
========
case ObjectExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886539867
GPR[SPVAP]-1659886539867
GPR[EPVAP]-1659886541845
GPR[EPVS]-1659886541845
========
case Program :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886541846
GPR[SPVAP]-1659886541846
GPR[EPVAP]-1659886543796
GPR[EPVS]-1659886543797
========
case RegExpExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886543798
GPR[SPVAP]-1659886543798
GPR[EPVAP]-1659886545906
GPR[EPVS]-1659886545906
========
case SwitchStmt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886545908
GPR[SPVAP]-1659886545908
GPR[EPVAP]-1659886547725
GPR[EPVS]-1659886547725
========
case ThrowStmt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886547726
GPR[SPVAP]-1659886547726
GPR[EPVAP]-1659886549560
GPR[EPVS]-1659886549560
========
case TypeofExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886549561
GPR[SPVAP]-1659886549561
GPR[EPVAP]-1659886551365
GPR[EPVS]-1659886551365
========
case VarDecl :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886551366
GPR[SPVAP]-1659886551366
GPR[EPVAP]-1659886553269
GPR[EPVS]-1659886553269
========
case Token.IF :
return NodeUtil.getConditionExpression(parent)!=node;

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886553270
GPR[SPVAP]-1659886553270
GPR[EPVAP]-1659886555167
GPR[EPVS]-1659886555167
========
case Token.FOR :
return NodeUtil.getConditionExpression(parent)==node;

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886555168
GPR[SPVAP]-1659886555168
GPR[EPVAP]-1659886557100
GPR[EPVS]-1659886557100
========
case Token.INSTANCEOF :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886557101
GPR[SPVAP]-1659886557101
GPR[EPVAP]-1659886561016
GPR[SPVATF]-1659886561016
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886564593
GPR[EPVS]-1659886564593
========
case Token.LABEL :
resultName=parent.getFirstChild().getString();
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886564594
GPR[SPVAP]-1659886564594
GPR[EPVAP]-1659886566507
GPR[EPVS]-1659886566507
========
case VAR_DECL_SIMPLE_ASSIGNMENT :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886566508
GPR[SPVAP]-1659886566508
GPR[EPVAP]-1659886568339
GPR[EPVS]-1659886568339
========
case Token.BITAND :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886568340
GPR[SPVAP]-1659886568340
GPR[EPVAP]-1659886572121
GPR[SPVATF]-1659886572121
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886575949
GPR[EPVS]-1659886575949
========
case Token.LE :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886575951
GPR[SPVAP]-1659886575951
GPR[EPVAP]-1659886579874
GPR[SPVATF]-1659886579874
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886583490
GPR[EPVS]-1659886583490
========
case Token.GE :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886583491
GPR[SPVAP]-1659886583491
GPR[EPVAP]-1659886587334
GPR[SPVATF]-1659886587334
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886591332
GPR[EPVS]-1659886591333
========
case Token.RSH :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886591334
GPR[SPVAP]-1659886591334
GPR[EPVAP]-1659886595273
GPR[SPVATF]-1659886595273
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886598901
GPR[EPVS]-1659886598901
========
case Token.ADD :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886598903
GPR[SPVAP]-1659886598903
GPR[EPVAP]-1659886602690
GPR[SPVATF]-1659886602690
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886606572
GPR[EPVS]-1659886606572
========
case Token.MUL :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886606573
GPR[SPVAP]-1659886606573
GPR[EPVAP]-1659886610619
GPR[SPVATF]-1659886610619
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886614213
GPR[EPVS]-1659886614213
========
case Token.MOD :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886614215
GPR[SPVAP]-1659886614215
GPR[EPVAP]-1659886618319
GPR[SPVATF]-1659886618319
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886622213
GPR[EPVS]-1659886622213
========
case Token.BITNOT :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886622214
GPR[SPVAP]-1659886622214
GPR[EPVAP]-1659886626073
GPR[SPVATF]-1659886626073
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886629997
GPR[EPVS]-1659886629997
========
case Token.NEG :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886629998
GPR[SPVAP]-1659886629998
GPR[EPVAP]-1659886633800
GPR[SPVATF]-1659886633800
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886637684
GPR[EPVS]-1659886637684
========
case Token.ASSIGN_BITOR :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886637685
GPR[SPVAP]-1659886637685
GPR[EPVAP]-1659886641560
GPR[SPVATF]-1659886641560
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886645113
GPR[EPVS]-1659886645113
========
case Token.ASSIGN_BITAND :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886645114
GPR[SPVAP]-1659886645114
GPR[EPVAP]-1659886648941
GPR[SPVATF]-1659886648941
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886652613
GPR[EPVS]-1659886652613
========
case Token.ASSIGN_RSH :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886652614
GPR[SPVAP]-1659886652614
GPR[EPVAP]-1659886656832
GPR[SPVATF]-1659886656832
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886660382
GPR[EPVS]-1659886660382
========
case Token.ASSIGN_ADD :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886660383
GPR[SPVAP]-1659886660383
GPR[EPVAP]-1659886664222
GPR[SPVATF]-1659886664223
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886667894
GPR[EPVS]-1659886667894
========
case Token.ASSIGN_MUL :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886667895
GPR[SPVAP]-1659886667895
GPR[EPVAP]-1659886671856
GPR[SPVATF]-1659886671856
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886675796
GPR[EPVS]-1659886675796
========
case Token.ASSIGN_MOD :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886675797
GPR[SPVAP]-1659886675797
GPR[EPVAP]-1659886680179
GPR[SPVATF]-1659886680179
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886684115
GPR[EPVS]-1659886684115
========
case Token.INC :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886684116
GPR[SPVAP]-1659886684116
GPR[EPVAP]-1659886687931
GPR[SPVATF]-1659886687931
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886691846
GPR[EPVS]-1659886691846
========
Preconditions.checkState(parent!=null);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886691847
GPR[SPVAP]-1659886691847
GPR[EPVAP]-1659886693490
GPR[EPVS]-1659886693490
========
case Token.AND :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886693491
GPR[SPVAP]-1659886693491
GPR[EPVAP]-1659886697542
GPR[SPVATF]-1659886697542
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886701126
GPR[EPVS]-1659886701126
========
case Token.RETURN :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886701127
GPR[SPVAP]-1659886701127
GPR[EPVAP]-1659886704901
GPR[SPVATF]-1659886704901
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886708873
GPR[EPVS]-1659886708873
========
case Token.CASE :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886708875
GPR[SPVAP]-1659886708875
GPR[EPVAP]-1659886712830
GPR[SPVATF]-1659886712830
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886716429
GPR[EPVS]-1659886716429
========
case Token.LABEL :
Preconditions.checkState(parent.hasOneChild());
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886716430
GPR[SPVAP]-1659886716430
GPR[EPVAP]-1659886720354
GPR[SPVATF]-1659886720354
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886723984
GPR[EPVS]-1659886723984
========
case Token.LABEL :
replaceWithRhs(node,parent);
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886723985
GPR[SPVAP]-1659886723985
GPR[EPVAP]-1659886725884
GPR[EPVS]-1659886725884
========
case Token.LABEL :
Preconditions.checkState(parent.hasOneChild());
replaceWithRhs(node,parent);

visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886725886
GPR[SPVAP]-1659886725886
GPR[EPVAP]-1659886727688
GPR[EPVS]-1659886727688
========
case Token.FUNCTION :

case Token.LABEL :
Preconditions.checkState(parent.hasOneChild());
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886727690
GPR[SPVAP]-1659886727690
GPR[EPVAP]-1659886731569
GPR[SPVATF]-1659886731569
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886735709
GPR[EPVS]-1659886735709
========
case Token.WITH :
return node!=parent.getFirstChild();

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886735710
GPR[SPVAP]-1659886735710
GPR[EPVAP]-1659886737503
GPR[EPVS]-1659886737503
========
case Token.LABEL :
NodeUtil.maybeAddFinally(node);
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886737505
GPR[SPVAP]-1659886737505
GPR[EPVAP]-1659886741510
GPR[SPVATF]-1659886741510
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886745810
GPR[EPVS]-1659886745810
========
case Token.VAR :
Preconditions.checkState(node==parent.getFirstChild());
return parent;

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886745812
GPR[SPVAP]-1659886745812
GPR[EPVAP]-1659886747748
GPR[EPVS]-1659886747748
========
case Token.ASSIGN_MOD :
maybeEliminateAssignmentByLvalueName(nodeTraversal,node,parent);
break;

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886747749
GPR[SPVAP]-1659886747749
GPR[EPVAP]-1659886749639
GPR[EPVS]-1659886749639
========
case Token.CALL :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886749640
GPR[SPVAP]-1659886749640
GPR[EPVAP]-1659886753609
GPR[SPVATF]-1659886753609
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886757400
GPR[EPVS]-1659886757400
========
case Token.NAME :
handleCandidateProvideDefinition(nodeTraversal,node,parent);
break;

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886757402
GPR[SPVAP]-1659886757402
GPR[EPVAP]-1659886759656
GPR[EPVS]-1659886759656
========
case Token.LABEL :
typeable=visitName(nodeTraversal,node,parent);
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886759657
GPR[SPVAP]-1659886759657
GPR[EPVAP]-1659886761469
GPR[EPVS]-1659886761469
========
case Token.PARAM_LIST :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886761470
GPR[SPVAP]-1659886761470
GPR[EPVAP]-1659886765280
GPR[SPVATF]-1659886765280
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886769018
GPR[EPVS]-1659886769018
========
case Token.LABEL :
typeable=!parent.isExprResult();
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886769019
GPR[SPVAP]-1659886769019
GPR[EPVAP]-1659886770963
GPR[EPVS]-1659886770963
========
NodeUtil.redeclareVarsInsideBranch(node);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886770964
GPR[SPVAP]-1659886770964
GPR[EPVAP]-1659886772849
GPR[EPVS]-1659886772849
========
NodeUtil.removeChild(parent,node);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886772851
GPR[SPVAP]-1659886772851
GPR[EPVAP]-1659886774513
GPR[EPVS]-1659886774513
========
case Token.OR :
return (node==parent.getFirstChild())?true:isExpressionResultUsed(parent);

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886774514
GPR[SPVAP]-1659886774514
GPR[EPVAP]-1659886776460
GPR[EPVS]-1659886776460
========
parent.replaceChild(node,parent);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886776461
GPR[SPVAP]-1659886776461
GPR[EPVAP]-1659886778153
GPR[EPVS]-1659886778153
========
if(parent.isBlock()){
NodeUtil.tryMergeBlock(newChild);
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886778154
GPR[SPVAP]-1659886778154
GPR[EPVAP]-1659886780384
GPR[EPVS]-1659886780384
========
case Token.STRING :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886780385
GPR[SPVAP]-1659886780385
GPR[EPVAP]-1659886784380
GPR[SPVATF]-1659886784381
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886787933
GPR[EPVS]-1659886787933
========
case Token.LABEL :
if((parent!=null)&&(parent.isVar())){
messageKey=node.getString();
isVar=true;
}else {
return ;
}
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886787934
GPR[SPVAP]-1659886787934
GPR[EPVAP]-1659886789769
GPR[EPVS]-1659886789769
========
case Token.LABEL :
msgNode=node.getFirstChild();
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886789770
GPR[SPVAP]-1659886789770
GPR[EPVAP]-1659886792028
GPR[EPVS]-1659886792029
========
case Token.LABEL :
msgNodeParent=node;
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886792030
GPR[SPVAP]-1659886792030
GPR[EPVAP]-1659886793934
GPR[EPVS]-1659886793934
========
case Token.LABEL :
if((parent!=null)&&(parent.isVar())){
messageKey=node.getString();
isVar=true;
}else {
return ;
}
msgNode=node.getFirstChild();
msgNodeParent=node;

visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886793935
GPR[SPVAP]-1659886793935
GPR[EPVAP]-1659886795919
GPR[EPVS]-1659886795919
========
case Token.EXPR_RESULT :
parent=node;
next=next.getFirstChild();
break;

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886795921
GPR[SPVAP]-1659886795921
GPR[EPVAP]-1659886797744
GPR[EPVS]-1659886797744
========
case Token.LABEL :
Preconditions.checkState(parent.isExprResult());
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886797746
GPR[SPVAP]-1659886797746
GPR[EPVAP]-1659886801667
GPR[SPVATF]-1659886801667
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886805546
GPR[EPVS]-1659886805546
========
default :

case Token.LABEL :
Preconditions.checkState(parent.isExprResult());
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886805547
GPR[SPVAP]-1659886805547
GPR[EPVAP]-1659886809518
GPR[SPVATF]-1659886809518
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886813353
GPR[EPVS]-1659886813353
========
Preconditions.checkState(removeUnused==true);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886813355
GPR[SPVAP]-1659886813355
GPR[EPVAP]-1659886814996
GPR[EPVS]-1659886814996
========
case Token.LABEL :
checkNameVisibility(nodeTraversal,node,parent);
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886814997
GPR[SPVAP]-1659886814997
GPR[EPVAP]-1659886816938
GPR[EPVS]-1659886816938
========
case Token.LABEL :
checkStringExprNode(node.getNext());
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886816940
GPR[SPVAP]-1659886816940
GPR[EPVAP]-1659886818870
GPR[EPVS]-1659886818870
========
if(node.getFirstChild().getType()!=Token.GETPROP&&first.getType()!=Token.GETELEM){
node.putBooleanProp(Node.FREE_CALL,true);
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886818872
GPR[SPVAP]-1659886818872
GPR[EPVAP]-1659886820696
GPR[EPVS]-1659886820696
========
case Token.LABEL :
typeable=!(parent.isAssign()&&parent.getFirstChild()==parent);
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886820698
GPR[SPVAP]-1659886820698
GPR[EPVAP]-1659886822516
GPR[EPVS]-1659886822516
========
case Token.GETELEM :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886822518
GPR[SPVAP]-1659886822518
GPR[EPVAP]-1659886826271
GPR[SPVATF]-1659886826271
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886829970
GPR[EPVS]-1659886829970
========
case Token.LABEL :
Preconditions.checkState(parent.getFirstChild()==null);
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886829972
GPR[SPVAP]-1659886829972
GPR[EPVAP]-1659886833724
GPR[SPVATF]-1659886833724
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659886837559
GPR[EPVS]-1659886837559
========
case Token.LABEL :
recordConsumers(nodeTraversal,parent,node);
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886837561
GPR[SPVAP]-1659886837561
GPR[EPVAP]-1659886839416
GPR[EPVS]-1659886839417
========
super.visit(nodeTraversal,node,parent);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886839418
GPR[SPVAP]-1659886839418
GPR[EPVAP]-1659886841280
GPR[EPVS]-1659886841280
========
compiler.reportCodeChange();
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886841281
GPR[SPVAP]-1659886841281
GPR[EPVAP]-1659886843170
GPR[EPVS]-1659886843170
========
parseDirectives(node);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886843172
GPR[SPVAP]-1659886843172
GPR[EPVAP]-1659886845352
GPR[EPVS]-1659886845352
========
reportCodeChange();
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886845354
GPR[SPVAP]-1659886845354
GPR[EPVAP]-1659886846992
GPR[EPVS]-1659886846992
========
if(!parent.isBlock()){
Preconditions.checkState(config.isIdeMode);
bodyNode=IR.block();
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886846994
GPR[SPVAP]-1659886846994
GPR[EPVAP]-1659886848771
GPR[EPVS]-1659886848771
========
node.addChildToBack(parent);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886848773
GPR[SPVAP]-1659886848773
GPR[EPVAP]-1659886850588
GPR[EPVS]-1659886850588
========
case Token.LABEL :
reportCodeChange();
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659886850590
GPR[SPVAP]-1659886850590
GPR[EPVAP]-1659886852572
GPR[EPVS]-1659886852572
========
parent.addChildToFront(node);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886852574
GPR[SPVAP]-1659886852574
GPR[EPVAP]-1659886854522
GPR[EPVS]-1659886854522
========
NodeUtil.redeclareVarsInsideBranch(node);
reportCodeChange();
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886854523
GPR[SPVAP]-1659886854523
GPR[EPVAP]-1659886856196
GPR[EPVS]-1659886856196
========
case ALIASING_GET :
Node node=alias.node.cloneTree();
Node node=ref.node;
node.getParent().replaceChild(node,newNode);

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886856197
GPR[SPVAP]-1659886856197
GPR[EPVAP]-1659886857996
GPR[EPVS]-1659886857996
========
Preconditions.checkState(node.getChildCount()==2);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886857997
GPR[SPVAP]-1659886857997
GPR[EPVAP]-1659886859662
GPR[EPVS]-1659886859662
========
parent.replaceChild(parent,parent.removeFirstChild());
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886859667
GPR[SPVAP]-1659886859667
GPR[EPVAP]-1659886861495
GPR[EPVS]-1659886861495
========
if(node.isCall()&&parent==gramps.getFirstChild()){
if(node==parent.getFirstChild()&&parent.getChildCount()==2&&expr.getNext().isName()&&"eval".equals(expr.getNext().getString())){
return true;
}
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886861496
GPR[SPVAP]-1659886861496
GPR[EPVAP]-1659886863316
GPR[EPVS]-1659886863316
========
parent.replaceChild(parent,NodeUtil.newExpr(node));
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886863317
GPR[SPVAP]-1659886863317
GPR[EPVAP]-1659886865001
GPR[EPVS]-1659886865001
========
if(node.getDirectives()==null){
return ;
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886865002
GPR[SPVAP]-1659886865002
GPR[EPVAP]-1659886866953
GPR[EPVS]-1659886866953
========
parent.replaceChild(node,node.getFirstChild().getNext());
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886866954
GPR[SPVAP]-1659886866954
GPR[EPVAP]-1659886868970
GPR[EPVS]-1659886868970
========
id+=estimateCostOneLevel(parent);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886868979
GPR[SPVAP]-1659886868979
GPR[EPVAP]-1659886870767
GPR[EPVS]-1659886870767
========
for(Node parent : node.children()){
processNode(child,new JsonML(TagType.BlockStmt));
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886870769
GPR[SPVAP]-1659886870769
GPR[EPVAP]-1659886872955
GPR[EPVS]-1659886872955
========
if(!nodeTraversal.inGlobalScope()&&NodeUtil.isHoistedFunctionDeclaration(parent)){
parent.addChildToFront(value.detachFromParent());
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886872956
GPR[SPVAP]-1659886872956
GPR[EPVAP]-1659886874716
GPR[EPVS]-1659886874716
========
parent.detachFromParent();
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886874718
GPR[SPVAP]-1659886874718
GPR[EPVAP]-1659886876724
GPR[EPVS]-1659886876724
========
parent.detachFromParent();
reportCodeChange();
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886876726
GPR[SPVAP]-1659886876726
GPR[EPVAP]-1659886878388
GPR[EPVS]-1659886878388
========
node.addChildToBack(node);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886878390
GPR[SPVAP]-1659886878390
GPR[EPVAP]-1659886880078
GPR[EPVS]-1659886880078
========
if(node.isName()){
Preconditions.checkArgument(parent.isFunction()||parent.isVar());
}else {
Preconditions.checkArgument(n.isGetProp()&&(parent.isAssign()||parent.isExprResult()));
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886880080
GPR[SPVAP]-1659886880080
GPR[EPVAP]-1659886881896
GPR[EPVS]-1659886881896
========
node.setLineno(node.getFirstChild().getLineno());
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886881898
GPR[SPVAP]-1659886881898
GPR[EPVAP]-1659886883889
GPR[EPVS]-1659886883889
========
node.setCharno(node.getFirstChild().getCharno());
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659886883890
GPR[SPVAP]-1659886883890
GPR[EPVAP]-1659886885856
GPR[EPVS]-1659886885856
========
swtich (node.getType()){
default :
return new CodePrinter.Builder(node).build();

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886889905
GPR[SPVAP]-1659886889905
GPR[EPVAP]-1659886891604
GPR[EPVS]-1659886891604
========
swtich (node.getType()){
default :
if(node.isBlock()&&node.isSyntheticBlock()){
createEdge(node,Branch.SYN_BLOCK,computeFollowNode(node,this));
}
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886891606
GPR[SPVAP]-1659886891606
GPR[EPVAP]-1659886893798
GPR[EPVS]-1659886893798
========
swtich (node.getType()){
case Token.SHNE :
node.setType(Token.SHEQ);
return this;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886893799
GPR[SPVAP]-1659886893799
GPR[EPVAP]-1659886895742
GPR[EPVS]-1659886895742
========
swtich (node.getType()){
default :
return this.addNot();

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886895743
GPR[SPVAP]-1659886895743
GPR[EPVAP]-1659886897604
GPR[EPVS]-1659886897604
========
swtich (node.getType()){
case Token.SHNE :
node.setType(Token.SHEQ);
return this;

default :
return this.addNot();


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886897605
GPR[SPVAP]-1659886897605
GPR[EPVAP]-1659886899272
GPR[EPVS]-1659886899272
========
swtich (node.getType()){
case Token.LABEL :
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886899273
GPR[SPVAP]-1659886899273
GPR[EPVAP]-1659886900905
GPR[EPVS]-1659886900905
========
swtich (node.getType()){
default :
throw new IllegalArgumentException("Unsupported parent node type in replaceWithRhs "+Token.name(parent.getType()));

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886900906
GPR[SPVAP]-1659886900906
GPR[EPVAP]-1659886903075
GPR[EPVS]-1659886903075
========
swtich (node.getType()){
case Token.LABEL :
break;

default :
throw new IllegalArgumentException("Unsupported parent node type in replaceWithRhs "+Token.name(parent.getType()));


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886903076
GPR[SPVAP]-1659886903076
GPR[EPVAP]-1659886905258
GPR[EPVS]-1659886905258
========
swtich (node.getType()){
case Token.ASSIGN :
Preconditions.checkArgument(parent.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886905260
GPR[SPVAP]-1659886905260
GPR[EPVAP]-1659886907216
GPR[EPVS]-1659886907216
========
swtich (node.getType()){
default :
throw new IllegalArgumentException("Unsupported node type in replaceWithRhs "+Token.name(node.getType()));

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886907217
GPR[SPVAP]-1659886907217
GPR[EPVAP]-1659886909043
GPR[EPVS]-1659886909043
========
swtich (node.getType()){
case Token.ASSIGN :
Preconditions.checkArgument(parent.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
break;

default :
throw new IllegalArgumentException("Unsupported node type in replaceWithRhs "+Token.name(node.getType()));


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886909044
GPR[SPVAP]-1659886909044
GPR[EPVAP]-1659886910700
GPR[EPVS]-1659886910700
========
if(node==null){
throw new IllegalArgumentException("Expected a string; found: null");
}
swtich (node.getType()){
case Token.ASSIGN :
Preconditions.checkArgument(parent.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
break;

default :
throw new IllegalArgumentException("Unsupported node type in replaceWithRhs "+Token.name(node.getType()));


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886910701
GPR[SPVAP]-1659886910701
GPR[EPVAP]-1659886912365
GPR[EPVS]-1659886912365
========
case Token.THIS :

swtich (node.getType()){
case Token.ASSIGN :
Preconditions.checkArgument(parent.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
break;

default :
throw new IllegalArgumentException("Unsupported node type in replaceWithRhs "+Token.name(node.getType()));


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886912366
GPR[SPVAP]-1659886912366
GPR[EPVAP]-1659886914189
GPR[EPVS]-1659886914189
========
swtich (node.getType()){
case Token.CATCH :
return !NodeUtil.hasFinally(getTryForCatch(node));

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886914191
GPR[SPVAP]-1659886914191
GPR[EPVAP]-1659886916114
GPR[EPVS]-1659886916114
========
swtich (node.getType()){
case Token.IF :
return parent==node.getLastChild();

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886916115
GPR[SPVAP]-1659886916115
GPR[EPVAP]-1659886917775
GPR[EPVS]-1659886917775
========
swtich (node.getType()){
case Token.CATCH :
return !NodeUtil.hasFinally(getTryForCatch(node));

case Token.IF :
return parent==node.getLastChild();


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886917776
GPR[SPVAP]-1659886917776
GPR[EPVAP]-1659886919432
GPR[EPVS]-1659886919432
========
default :

swtich (node.getType()){
case Token.CATCH :
return !NodeUtil.hasFinally(getTryForCatch(node));

case Token.IF :
return parent==node.getLastChild();


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886919433
GPR[SPVAP]-1659886919433
GPR[EPVAP]-1659886921094
GPR[EPVS]-1659886921094
========
case Token.COMMA :

swtich (node.getType()){
case Token.CATCH :
return !NodeUtil.hasFinally(getTryForCatch(node));

case Token.IF :
return parent==node.getLastChild();


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886921095
GPR[SPVAP]-1659886921095
GPR[EPVAP]-1659886922798
GPR[EPVS]-1659886922798
========
case Token.ARRAYLIT :

swtich (node.getType()){
case Token.CATCH :
return !NodeUtil.hasFinally(getTryForCatch(node));

case Token.IF :
return parent==node.getLastChild();


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886922799
GPR[SPVAP]-1659886922799
GPR[EPVAP]-1659886924503
GPR[EPVS]-1659886924503
========
swtich (node.getType()){
case Token.CALL :
visitCallNode(node,parent);
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886924504
GPR[SPVAP]-1659886924504
GPR[EPVAP]-1659886926476
GPR[EPVS]-1659886926476
========
swtich (node.getType()){
case Token.SCRIPT :
visitScriptNode(nodeTraversal);
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886926481
GPR[SPVAP]-1659886926481
GPR[EPVAP]-1659886928128
GPR[EPVS]-1659886928128
========
swtich (node.getType()){
case Token.NEW :
visitNewNode(nodeTraversal,node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886928130
GPR[SPVAP]-1659886928130
GPR[EPVAP]-1659886930339
GPR[EPVS]-1659886930339
========
swtich (node.getType()){
case Token.CALL :
visitCallNode(node,parent);
break;

case Token.SCRIPT :
visitScriptNode(nodeTraversal);
break;

case Token.NEW :
visitNewNode(nodeTraversal,node);


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886930340
GPR[SPVAP]-1659886930340
GPR[EPVAP]-1659886932261
GPR[EPVS]-1659886932261
========
case Token.BITAND :
return tryRotateAssociativeOperator(parent);

swtich (node.getType()){
case Token.CALL :
visitCallNode(node,parent);
break;

case Token.SCRIPT :
visitScriptNode(nodeTraversal);
break;

case Token.NEW :
visitNewNode(nodeTraversal,node);


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886932263
GPR[SPVAP]-1659886932263
GPR[EPVAP]-1659886933976
GPR[EPVS]-1659886933976
========
default :

swtich (node.getType()){
case Token.CALL :
visitCallNode(node,parent);
break;

case Token.SCRIPT :
visitScriptNode(nodeTraversal);
break;

case Token.NEW :
visitNewNode(nodeTraversal,node);


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886933977
GPR[SPVAP]-1659886933977
GPR[EPVAP]-1659886935862
GPR[EPVS]-1659886935862
========
swtich (node.getType()){
default :
throw new AssertionError("Bad LHS for assignment: "+parent.toStringTree());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886935863
GPR[SPVAP]-1659886935863
GPR[EPVAP]-1659886938096
GPR[EPVS]-1659886938096
========
swtich (node.getType()){
case Token.BITNOT :
tryReduceOperandsForOp(node);
return tryFoldUnaryOperator(node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886938097
GPR[SPVAP]-1659886938097
GPR[EPVAP]-1659886939755
GPR[EPVS]-1659886939755
========
swtich (node.getType()){
case Token.VOID :
return tryReduceVoid(node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886939757
GPR[SPVAP]-1659886939757
GPR[EPVAP]-1659886941472
GPR[EPVS]-1659886941472
========
swtich (node.getType()){
default :
tryReduceOperandsForOp(node);
return tryFoldBinaryOperator(node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886941473
GPR[SPVAP]-1659886941473
GPR[EPVAP]-1659886943421
GPR[EPVS]-1659886943421
========
swtich (node.getType()){
case Token.BITNOT :
tryReduceOperandsForOp(node);
return tryFoldUnaryOperator(node);

case Token.VOID :
return tryReduceVoid(node);

default :
tryReduceOperandsForOp(node);
return tryFoldBinaryOperator(node);


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886943422
GPR[SPVAP]-1659886943422
GPR[EPVAP]-1659886945320
GPR[EPVS]-1659886945320
========
case Token.NAME :

swtich (node.getType()){
case Token.BITNOT :
tryReduceOperandsForOp(node);
return tryFoldUnaryOperator(node);

case Token.VOID :
return tryReduceVoid(node);

default :
tryReduceOperandsForOp(node);
return tryFoldBinaryOperator(node);


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886945322
GPR[SPVAP]-1659886945322
GPR[EPVAP]-1659886947582
GPR[EPVS]-1659886947582
========
swtich (node.getType()){
case Token.COMMA :
Node parent=swapWithPlaceholderNode(node);
return computeMinimizedCondition(node).setPlaceholder(parent);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886947583
GPR[SPVAP]-1659886947583
GPR[EPVAP]-1659886949270
GPR[EPVS]-1659886949270
========
swtich (node.getType()){
default :
return unoptimized(node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886949271
GPR[SPVAP]-1659886949271
GPR[EPVAP]-1659886950981
GPR[EPVS]-1659886950981
========
swtich (node.getType()){
case Token.COMMA :
Node parent=swapWithPlaceholderNode(node);
return computeMinimizedCondition(node).setPlaceholder(parent);

default :
return unoptimized(node);


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886950982
GPR[SPVAP]-1659886950982
GPR[EPVAP]-1659886952638
GPR[EPVS]-1659886952639
========
swtich (node.getType()){
case Token.GETELEM :
Node node=parent.getFirstChild();
Node node.getNext()=node.getNext();
if(node.getNext().isString()&&NodeUtil.isValidPropertyName(node.getNext().getString())){
parent.removeChild(node);
parent.removeChild(node.getNext());
parent.replaceChild(parent,IR.getprop(node,node.getNext()));
compiler.reportCodeChange();
}
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886952640
GPR[SPVAP]-1659886952640
GPR[EPVAP]-1659886954337
GPR[EPVS]-1659886954337
========
swtich (node.getType()){
case Token.DO :
return ;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886954338
GPR[SPVAP]-1659886954338
GPR[EPVAP]-1659886956163
GPR[EPVS]-1659886956163
========
swtich (node.getType()){
default :
Node IR.block()=IR.block();
IR.block().copyInformationFrom(node);
parent.replaceChild(node,IR.block());
IR.block().addChildToFront(node);
reportCodeChange("LABEL normalization");
return ;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886956164
GPR[SPVAP]-1659886956164
GPR[EPVAP]-1659886957848
GPR[EPVS]-1659886957848
========
swtich (node.getType()){
case Token.DO :
return ;

default :
Node IR.block()=IR.block();
IR.block().copyInformationFrom(node);
parent.replaceChild(node,IR.block());
IR.block().addChildToFront(node);
reportCodeChange("LABEL normalization");
return ;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886957849
GPR[SPVAP]-1659886957849
GPR[EPVAP]-1659886959787
GPR[EPVS]-1659886959787
========
case Token.DO :
tryMinimizeCondition(NodeUtil.getConditionExpression(parent));
return node;

swtich (node.getType()){
case Token.DO :
return ;

default :
Node IR.block()=IR.block();
IR.block().copyInformationFrom(node);
parent.replaceChild(node,IR.block());
IR.block().addChildToFront(node);
reportCodeChange("LABEL normalization");
return ;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886959788
GPR[SPVAP]-1659886959788
GPR[EPVAP]-1659886961745
GPR[EPVS]-1659886961745
========
case Token.FOR :

swtich (node.getType()){
case Token.DO :
return ;

default :
Node IR.block()=IR.block();
IR.block().copyInformationFrom(node);
parent.replaceChild(node,IR.block());
IR.block().addChildToFront(node);
reportCodeChange("LABEL normalization");
return ;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886961747
GPR[SPVAP]-1659886961747
GPR[EPVAP]-1659886963951
GPR[EPVS]-1659886963951
========
swtich (node.getType()){
default :
throw new IllegalStateException("unexpected");

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886963952
GPR[SPVAP]-1659886963952
GPR[EPVAP]-1659886965611
GPR[EPVS]-1659886965611
========
swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886965612
GPR[SPVAP]-1659886965612
GPR[EPVAP]-1659886967271
GPR[EPVS]-1659886967271
========
swtich (node.getType()){
case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886967271
GPR[SPVAP]-1659886967271
GPR[EPVAP]-1659886969006
GPR[EPVS]-1659886969006
========
swtich (node.getType()){
case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886969008
GPR[SPVAP]-1659886969008
GPR[EPVAP]-1659886971040
GPR[EPVS]-1659886971040
========
swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886971041
GPR[SPVAP]-1659886971041
GPR[EPVAP]-1659886972668
GPR[EPVS]-1659886972668
========
case Token.BITOR :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886972669
GPR[SPVAP]-1659886972669
GPR[EPVAP]-1659886974585
GPR[EPVS]-1659886974585
========
case Token.NAME :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886974586
GPR[SPVAP]-1659886974586
GPR[EPVAP]-1659886976440
GPR[EPVS]-1659886976440
========
case Token.SHEQ :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886976441
GPR[SPVAP]-1659886976441
GPR[EPVAP]-1659886978123
GPR[EPVS]-1659886978123
========
case Token.THROW :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886978124
GPR[SPVAP]-1659886978124
GPR[EPVAP]-1659886980150
GPR[EPVS]-1659886980150
========
case Token.OBJECTLIT :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886980151
GPR[SPVAP]-1659886980151
GPR[EPVAP]-1659886981798
GPR[EPVS]-1659886981798
========
case Token.COMMA :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886981799
GPR[SPVAP]-1659886981799
GPR[EPVAP]-1659886983456
GPR[EPVS]-1659886983456
========
case Token.OR :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886983457
GPR[SPVAP]-1659886983457
GPR[EPVAP]-1659886985459
GPR[EPVS]-1659886985459
========
case Token.IF :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886985460
GPR[SPVAP]-1659886985460
GPR[EPVAP]-1659886987110
GPR[EPVS]-1659886987110
========
case Token.CASE :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886987111
GPR[SPVAP]-1659886987111
GPR[EPVAP]-1659886988767
GPR[EPVS]-1659886988767
========
case Token.BREAK :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886988768
GPR[SPVAP]-1659886988768
GPR[EPVAP]-1659886990458
GPR[EPVS]-1659886990458
========
case Token.WITH :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886990459
GPR[SPVAP]-1659886990459
GPR[EPVAP]-1659886992235
GPR[EPVS]-1659886992235
========
case Token.VOID :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886992236
GPR[SPVAP]-1659886992236
GPR[EPVAP]-1659886994270
GPR[EPVS]-1659886994270
========
case Token.BLOCK :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886994271
GPR[SPVAP]-1659886994271
GPR[EPVAP]-1659886995912
GPR[EPVS]-1659886995912
========
case Token.EXPR_RESULT :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886995914
GPR[SPVAP]-1659886995914
GPR[EPVAP]-1659886997562
GPR[EPVS]-1659886997562
========
swtich (node.getType()){
default :
violation("Expected object literal key expression but was "+Token.name(node.getType()),n);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886997563
GPR[SPVAP]-1659886997563
GPR[EPVAP]-1659886999476
GPR[EPVS]-1659886999476
========
swtich (node.getType()){
case Token.FOR :
continue;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659886999478
GPR[SPVAP]-1659886999478
GPR[EPVAP]-1659887001146
GPR[EPVS]-1659887001146
========
swtich (node.getType()){
case Token.RETURN :
continue;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887001147
GPR[SPVAP]-1659887001147
GPR[EPVAP]-1659887003037
GPR[EPVS]-1659887003037
========
swtich (node.getType()){
case Token.FOR :
continue;

case Token.RETURN :
continue;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887003039
GPR[SPVAP]-1659887003039
GPR[EPVAP]-1659887004686
GPR[EPVS]-1659887004686
========
swtich (node.getType()){
case Token.SETTER_DEF :
maybeRename(node);
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887004687
GPR[SPVAP]-1659887004687
GPR[EPVAP]-1659887006366
GPR[EPVS]-1659887006366
========
swtich (node.getType()){
default :
violation("Expected assignment target expression but was "+Token.name(node.getType()),n);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887006367
GPR[SPVAP]-1659887006367
GPR[EPVAP]-1659887008228
GPR[EPVS]-1659887008228
========
swtich (node.getType()){
case Token.THROW :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887008229
GPR[SPVAP]-1659887008229
GPR[EPVAP]-1659887009876
GPR[EPVS]-1659887009876
========
swtich (node.getType()){
case Token.CALL :
return NodeUtil.functionCallHasSideEffects(node,compiler);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887009877
GPR[SPVAP]-1659887009877
GPR[EPVAP]-1659887011708
GPR[EPVS]-1659887011708
========
swtich (node.getType()){
case Token.NEW :
return NodeUtil.constructorCallHasSideEffects(node,compiler);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887011709
GPR[SPVAP]-1659887011709
GPR[EPVAP]-1659887013361
GPR[EPVS]-1659887013361
========
swtich (node.getType()){
case Token.NAME :
return node.hasChildren();

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887013362
GPR[SPVAP]-1659887013362
GPR[EPVAP]-1659887015224
GPR[EPVS]-1659887015224
========
swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887015225
GPR[SPVAP]-1659887015225
GPR[EPVAP]-1659887017105
GPR[EPVS]-1659887017105
========
swtich (node.getType()){
case Token.THROW :
return true;

case Token.CALL :
return NodeUtil.functionCallHasSideEffects(node,compiler);

case Token.NEW :
return NodeUtil.constructorCallHasSideEffects(node,compiler);

case Token.NAME :
return node.hasChildren();

default :
return false;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887017106
GPR[SPVAP]-1659887017106
GPR[EPVAP]-1659887019009
GPR[EPVS]-1659887019009
========
swtich (node.getType()){
default :
return null;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887019010
GPR[SPVAP]-1659887019010
GPR[EPVAP]-1659887020676
GPR[EPVS]-1659887020676
========
swtich (node.getType()){
case Token.EXPR_RESULT :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887020677
GPR[SPVAP]-1659887020677
GPR[EPVAP]-1659887022556
GPR[EPVS]-1659887022556
========
swtich (node.getType()){
case Token.RETURN :
return node.hasChildren();

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887022557
GPR[SPVAP]-1659887022557
GPR[EPVAP]-1659887024229
GPR[EPVS]-1659887024229
========
swtich (node.getType()){
case Token.FOR :
if(NodeUtil.isForIn(node)){
return !mayHaveSideEffects(node.getFirstChild());
}else {
return !node.getFirstChild().isVar();
}

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887024230
GPR[SPVAP]-1659887024230
GPR[EPVAP]-1659887026094
GPR[EPVS]-1659887026094
========
swtich (node.getType()){
case Token.LABEL :
return isFusableControlStatement(node.getLastChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887026095
GPR[SPVAP]-1659887026095
GPR[EPVAP]-1659887028105
GPR[EPVS]-1659887028105
========
swtich (node.getType()){
case Token.BLOCK :
return !node.isSyntheticBlock()&&isFusableControlStatement(node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887028106
GPR[SPVAP]-1659887028106
GPR[EPVAP]-1659887029773
GPR[EPVS]-1659887029773
========
swtich (node.getType()){
case Token.EXPR_RESULT :
return true;

case Token.RETURN :
return node.hasChildren();

case Token.FOR :
if(NodeUtil.isForIn(node)){
return !mayHaveSideEffects(node.getFirstChild());
}else {
return !node.getFirstChild().isVar();
}

case Token.LABEL :
return isFusableControlStatement(node.getLastChild());

case Token.BLOCK :
return !node.isSyntheticBlock()&&isFusableControlStatement(node.getFirstChild());


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887029774
GPR[SPVAP]-1659887029774
GPR[EPVAP]-1659887031708
GPR[EPVS]-1659887031708
========
case Token.IF :

swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887031709
GPR[SPVAP]-1659887031709
GPR[EPVAP]-1659887033549
GPR[EPVS]-1659887033549
========
case Token.HOOK :

swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887033551
GPR[SPVAP]-1659887033551
GPR[EPVAP]-1659887035222
GPR[EPVS]-1659887035222
========
swtich (node.getType()){
default :
throw new IllegalStateException();

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887035223
GPR[SPVAP]-1659887035223
GPR[EPVAP]-1659887037163
GPR[EPVS]-1659887037163
========
swtich (node.getType()){
default :
return null;

case Token.LABEL :
definition=node.getLastChild();
visitLabel(node,parent);
break;


case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887037165
GPR[SPVAP]-1659887037165
GPR[EPVAP]-1659887038907
GPR[EPVS]-1659887038907
========
swtich (node.getType()){
default :
return null;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
if(NodeUtil.isFunctionDeclaration(node)){
definition=node;
}else {
return null;
}
visitBreakOrContinue(node);
break;



}

========
GPR[SPVS]-1659887038908
GPR[SPVAP]-1659887038908
GPR[EPVAP]-1659887040552
GPR[EPVS]-1659887040552
========
swtich (node.getType()){
default :
return null;

case Token.LABEL :
definition=node.getLastChild();
visitLabel(node,parent);
break;


case Token.BREAK :

case Token.CONTINUE :
if(NodeUtil.isFunctionDeclaration(node)){
definition=node;
}else {
return null;
}
visitBreakOrContinue(node);
break;



}

========
GPR[SPVS]-1659887040554
GPR[SPVAP]-1659887040554
GPR[EPVAP]-1659887042258
GPR[EPVS]-1659887042258
========
swtich (node.getType()){
case Token.FOR :
swtich (node.getChildCount()){
case 3 :
return null;

case 4 :
return node.getFirstChild().getNext();

}
throw new IllegalArgumentException("malformed \'for\' statement "+node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887042265
GPR[SPVAP]-1659887042265
GPR[EPVAP]-1659887044180
GPR[EPVS]-1659887044180
========
swtich (node.getType()){
case Token.CASE :
return null;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887044181
GPR[SPVAP]-1659887044181
GPR[EPVAP]-1659887046128
GPR[EPVS]-1659887046129
========
swtich (node.getType()){
case Token.FOR :
swtich (node.getChildCount()){
case 3 :
return null;

case 4 :
return node.getFirstChild().getNext();

}
throw new IllegalArgumentException("malformed \'for\' statement "+node);

case Token.CASE :
return null;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887046132
GPR[SPVAP]-1659887046132
GPR[EPVAP]-1659887048048
GPR[EPVS]-1659887048048
========
swtich (node.getType()){
case Token.GETELEM :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887048049
GPR[SPVAP]-1659887048049
GPR[EPVAP]-1659887049743
GPR[EPVS]-1659887049743
========
swtich (node.getType()){
case Token.FUNCTION :
Preconditions.checkState(isFunctionExpression(node));
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887049744
GPR[SPVAP]-1659887049744
GPR[EPVAP]-1659887051403
GPR[EPVS]-1659887051403
========
swtich (node.getType()){
case Token.GETELEM :
return true;

case Token.FUNCTION :
Preconditions.checkState(isFunctionExpression(node));
return false;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887051404
GPR[SPVAP]-1659887051404
GPR[EPVAP]-1659887056522
GPR[EPVS]-1659887056522
========
swtich (node.getType()){
case Token.DO :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(node),Token.CONTINUE,null);
Node parent=NodeUtil.getConditionExpression(node);
if(NodeUtil.getImpureBooleanValue(parent)==TernaryValue.FALSE){
tryMinimizeExits(node.getFirstChild(),Token.BREAK,null);
}
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887056523
GPR[SPVAP]-1659887056523
GPR[EPVAP]-1659887058181
GPR[EPVS]-1659887058181
========
swtich (node.getType()){
case Token.FUNCTION :
tryMinimizeExits(node.getLastChild(),Token.RETURN,null);
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887058183
GPR[SPVAP]-1659887058183
GPR[EPVAP]-1659887060116
GPR[EPVS]-1659887060116
========
swtich (node.getType()){
case Token.DO :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(node),Token.CONTINUE,null);
Node parent=NodeUtil.getConditionExpression(node);
if(NodeUtil.getImpureBooleanValue(parent)==TernaryValue.FALSE){
tryMinimizeExits(node.getFirstChild(),Token.BREAK,null);
}
break;

case Token.FUNCTION :
tryMinimizeExits(node.getLastChild(),Token.RETURN,null);
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887060118
GPR[SPVAP]-1659887060118
GPR[EPVAP]-1659887061759
GPR[EPVS]-1659887061759
========
case Token.DELPROP :

swtich (node.getType()){
case Token.DO :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(node),Token.CONTINUE,null);
Node parent=NodeUtil.getConditionExpression(node);
if(NodeUtil.getImpureBooleanValue(parent)==TernaryValue.FALSE){
tryMinimizeExits(node.getFirstChild(),Token.BREAK,null);
}
break;

case Token.FUNCTION :
tryMinimizeExits(node.getLastChild(),Token.RETURN,null);
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887061760
GPR[SPVAP]-1659887061760
GPR[EPVAP]-1659887063590
GPR[EPVS]-1659887063590
========
case Token.GETPROP :

swtich (node.getType()){
case Token.DO :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(node),Token.CONTINUE,null);
Node parent=NodeUtil.getConditionExpression(node);
if(NodeUtil.getImpureBooleanValue(parent)==TernaryValue.FALSE){
tryMinimizeExits(node.getFirstChild(),Token.BREAK,null);
}
break;

case Token.FUNCTION :
tryMinimizeExits(node.getLastChild(),Token.RETURN,null);
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887063591
GPR[SPVAP]-1659887063591
GPR[EPVAP]-1659887065760
GPR[EPVS]-1659887065761
========
case Token.WHILE :

swtich (node.getType()){
case Token.DO :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(node),Token.CONTINUE,null);
Node parent=NodeUtil.getConditionExpression(node);
if(NodeUtil.getImpureBooleanValue(parent)==TernaryValue.FALSE){
tryMinimizeExits(node.getFirstChild(),Token.BREAK,null);
}
break;

case Token.FUNCTION :
tryMinimizeExits(node.getLastChild(),Token.RETURN,null);
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887065764
GPR[SPVAP]-1659887065764
GPR[EPVAP]-1659887067765
GPR[EPVS]-1659887067765
========
swtich (node.getType()){
case Token.FALSE :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887067767
GPR[SPVAP]-1659887067767
GPR[EPVAP]-1659887069495
GPR[EPVS]-1659887069495
========
swtich (node.getType()){
case Token.NOT :
return isImmutableValue(node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887069496
GPR[SPVAP]-1659887069496
GPR[EPVAP]-1659887071392
GPR[EPVS]-1659887071392
========
swtich (node.getType()){
case Token.NEG :
return isImmutableValue(node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887071393
GPR[SPVAP]-1659887071393
GPR[EPVAP]-1659887073033
GPR[EPVS]-1659887073033
========
swtich (node.getType()){
case Token.NAME :
String node.getString()=node.getString();
return "undefined".equals(node.getString())||"Infinity".equals(node.getString());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887073033
GPR[SPVAP]-1659887073033
GPR[EPVAP]-1659887075189
GPR[EPVS]-1659887075190
========
swtich (node.getType()){
case Token.FALSE :
return true;

case Token.NOT :
return isImmutableValue(node.getFirstChild());

case Token.NEG :
return isImmutableValue(node.getFirstChild());

case Token.NAME :
String node.getString()=node.getString();
return "undefined".equals(node.getString())||"Infinity".equals(node.getString());


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887075191
GPR[SPVAP]-1659887075191
GPR[EPVAP]-1659887077171
GPR[EPVS]-1659887077171
========
swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887077172
GPR[SPVAP]-1659887077172
GPR[EPVAP]-1659887079083
GPR[EPVS]-1659887079083
========
case Token.BITAND :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887079084
GPR[SPVAP]-1659887079084
GPR[EPVAP]-1659887080750
GPR[EPVS]-1659887080750
========
case Token.NE :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887080751
GPR[SPVAP]-1659887080751
GPR[EPVAP]-1659887082376
GPR[EPVS]-1659887082376
========
case Token.LE :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887082377
GPR[SPVAP]-1659887082377
GPR[EPVAP]-1659887084080
GPR[EPVS]-1659887084080
========
case Token.GE :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887084081
GPR[SPVAP]-1659887084081
GPR[EPVAP]-1659887085792
GPR[EPVS]-1659887085792
========
case Token.RSH :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887085793
GPR[SPVAP]-1659887085793
GPR[EPVAP]-1659887087765
GPR[EPVS]-1659887087765
========
case Token.ADD :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887087766
GPR[SPVAP]-1659887087766
GPR[EPVAP]-1659887089453
GPR[EPVS]-1659887089453
========
case Token.MUL :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887089454
GPR[SPVAP]-1659887089454
GPR[EPVAP]-1659887091114
GPR[EPVS]-1659887091114
========
case Token.MOD :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887091116
GPR[SPVAP]-1659887091116
GPR[EPVAP]-1659887092762
GPR[EPVS]-1659887092762
========
case Token.BITNOT :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887092764
GPR[SPVAP]-1659887092764
GPR[EPVAP]-1659887094675
GPR[EPVS]-1659887094675
========
case Token.NEG :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887094676
GPR[SPVAP]-1659887094676
GPR[EPVAP]-1659887096546
GPR[EPVS]-1659887096546
========
case Token.INSTANCEOF :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887096547
GPR[SPVAP]-1659887096547
GPR[EPVAP]-1659887098443
GPR[EPVS]-1659887098443
========
case Token.ASSIGN_BITOR :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887098461
GPR[SPVAP]-1659887098461
GPR[EPVAP]-1659887100124
GPR[EPVS]-1659887100124
========
case Token.ASSIGN_BITAND :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887100125
GPR[SPVAP]-1659887100125
GPR[EPVAP]-1659887102099
GPR[EPVS]-1659887102099
========
case Token.ASSIGN_RSH :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887102100
GPR[SPVAP]-1659887102100
GPR[EPVAP]-1659887104018
GPR[EPVS]-1659887104018
========
case Token.ASSIGN_ADD :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887104019
GPR[SPVAP]-1659887104019
GPR[EPVAP]-1659887105677
GPR[EPVS]-1659887105677
========
case Token.ASSIGN_MUL :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887105678
GPR[SPVAP]-1659887105678
GPR[EPVAP]-1659887107478
GPR[EPVS]-1659887107478
========
case Token.ASSIGN_MOD :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887107479
GPR[SPVAP]-1659887107479
GPR[EPVAP]-1659887109451
GPR[EPVS]-1659887109451
========
case Token.INC :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887109452
GPR[SPVAP]-1659887109452
GPR[EPVAP]-1659887111116
GPR[EPVS]-1659887111116
========
swtich (node.getType()){
case Token.ASSIGN :
JSDocInfo node.getJSDocInfo()=node.getJSDocInfo();
if(node.getJSDocInfo()!=null&&node.getJSDocInfo().isNoTypeCheck()){
if(removeUnused){
id++;
}else {
id--;
}
}
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887111117
GPR[SPVAP]-1659887111117
GPR[EPVAP]-1659887113083
GPR[EPVS]-1659887113083
========
case NUMBER :

swtich (node.getType()){
case Token.ASSIGN :
JSDocInfo node.getJSDocInfo()=node.getJSDocInfo();
if(node.getJSDocInfo()!=null&&node.getJSDocInfo().isNoTypeCheck()){
if(removeUnused){
id++;
}else {
id--;
}
}
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887113084
GPR[SPVAP]-1659887113084
GPR[EPVAP]-1659887114748
GPR[EPVS]-1659887114748
========
swtich (node.getType()){
default :
throw new MalformedException("Expected FUNCTION, STRING, or ADD node; found: "+node.getType(),origValueNode);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887114749
GPR[SPVAP]-1659887114749
GPR[EPVAP]-1659887116623
GPR[EPVS]-1659887116623
========
swtich (node.getType()){
case Token.CALL :
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887116625
GPR[SPVAP]-1659887116625
GPR[EPVAP]-1659887118513
GPR[EPVS]-1659887118513
========
case Token.DELPROP :

swtich (node.getType()){
case Token.CALL :
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887118536
GPR[SPVAP]-1659887118536
GPR[EPVAP]-1659887120198
GPR[EPVS]-1659887120199
========
swtich (node.getType()){
default :
safe=NodeUtil.isImmutableValue(node);
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887120200
GPR[SPVAP]-1659887120200
GPR[EPVAP]-1659887122031
GPR[EPVS]-1659887122031
========
swtich (node.getType()){
default :
throw new IllegalStateException("unexpected:"+node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887122032
GPR[SPVAP]-1659887122032
GPR[EPVAP]-1659887123687
GPR[EPVS]-1659887123687
========
swtich (node.getType()){
case Token.SHNE :
reportIfNaN(nodeTraversal,parent.getFirstChild());
reportIfNaN(nodeTraversal,parent.getLastChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887123688
GPR[SPVAP]-1659887123688
GPR[EPVAP]-1659887125364
GPR[EPVS]-1659887125364
========
Preconditions.checkState(parent!=null);
swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887125365
GPR[SPVAP]-1659887125365
GPR[EPVAP]-1659887127572
GPR[EPVS]-1659887127572
========
swtich (node.getType()){
case Token.HOOK :
Node node.getFirstChild().getNext()=node.getFirstChild().getNext();
Name.Type getValueType(node.getFirstChild().getNext())=getValueType(node.getFirstChild().getNext());
if(getValueType(node.getFirstChild().getNext())!=Name.Type.OTHER){
return getValueType(node.getFirstChild().getNext());
}
Node parent=node.getFirstChild().getNext().getNext();
return getValueType(parent);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887127574
GPR[SPVAP]-1659887127574
GPR[EPVAP]-1659887129209
GPR[EPVS]-1659887129209
========
if(node.getFirstChild().getType()!=Token.GETPROP&&first.getType()!=Token.GETELEM){
node.putBooleanProp(Node.FREE_CALL,true);
}
swtich (node.getType()){
case Token.HOOK :
Node node.getFirstChild().getNext()=node.getFirstChild().getNext();
Name.Type getValueType(node.getFirstChild().getNext())=getValueType(node.getFirstChild().getNext());
if(getValueType(node.getFirstChild().getNext())!=Name.Type.OTHER){
return getValueType(node.getFirstChild().getNext());
}
Node parent=node.getFirstChild().getNext().getNext();
return getValueType(parent);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887129210
GPR[SPVAP]-1659887129211
GPR[EPVAP]-1659887130892
GPR[EPVS]-1659887130892
========
swtich (node.getType()){
case Token.WHILE :
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887130894
GPR[SPVAP]-1659887130894
GPR[EPVAP]-1659887132559
GPR[EPVS]-1659887132559
========
swtich (node.getType()){
default :
throw new IllegalArgumentException("Illegal type of node.");

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887132560
GPR[SPVAP]-1659887132560
GPR[EPVAP]-1659887134216
GPR[EPVS]-1659887134216
========
swtich (node.getType()){
case Token.SHNE :
complementOperator=Token.SHEQ;
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887134218
GPR[SPVAP]-1659887134218
GPR[EPVAP]-1659887136201
GPR[EPVS]-1659887136201
========
swtich (node.getType()){
default :
return parent;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887136203
GPR[SPVAP]-1659887136203
GPR[EPVAP]-1659887138112
GPR[EPVS]-1659887138112
========
swtich (node.getType()){
case Token.SHNE :
complementOperator=Token.SHEQ;
break;

default :
return parent;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887138114
GPR[SPVAP]-1659887138114
GPR[EPVAP]-1659887139991
GPR[EPVS]-1659887139991
========
case Token.GETPROP :

swtich (node.getType()){
case Token.SHNE :
complementOperator=Token.SHEQ;
break;

default :
return parent;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887139992
GPR[SPVAP]-1659887139992
GPR[EPVAP]-1659887141653
GPR[EPVS]-1659887141653
========
swtich (node.getType()){
case Token.NUMBER :
return getStringValue(node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887141654
GPR[SPVAP]-1659887141654
GPR[EPVAP]-1659887143516
GPR[EPVS]-1659887143516
========
swtich (node.getType()){
default :
throw new IllegalStateException("Unexpected.");

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887143518
GPR[SPVAP]-1659887143518
GPR[EPVAP]-1659887145174
GPR[EPVS]-1659887145174
========
swtich (node.getType()){
case Token.SWITCH :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887145176
GPR[SPVAP]-1659887145176
GPR[EPVAP]-1659887146852
GPR[EPVS]-1659887146852
========
swtich (node.getType()){
case Token.TRY :
return removeUnused;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887146853
GPR[SPVAP]-1659887146853
GPR[EPVAP]-1659887148517
GPR[EPVS]-1659887148517
========
swtich (node.getType()){
case Token.SWITCH :
return true;

case Token.TRY :
return removeUnused;

default :
return false;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887148518
GPR[SPVAP]-1659887148518
GPR[EPVAP]-1659887150533
GPR[EPVS]-1659887150533
========
swtich (node.getType()){
case Token.LE :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887150535
GPR[SPVAP]-1659887150535
GPR[EPVAP]-1659887152403
GPR[EPVS]-1659887152403
========
swtich (node.getType()){
case Token.THROW :
return true;

default :
return false;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887152404
GPR[SPVAP]-1659887152404
GPR[EPVAP]-1659887154399
GPR[EPVS]-1659887154399
========
case Token.STRING :

swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887154401
GPR[SPVAP]-1659887154401
GPR[EPVAP]-1659887156556
GPR[EPVS]-1659887156556
========
swtich (node.getType()){
case Token.MUL :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887156557
GPR[SPVAP]-1659887156557
GPR[EPVAP]-1659887158456
GPR[EPVS]-1659887158456
========
case Token.NAME :

swtich (node.getType()){
case Token.MUL :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887158458
GPR[SPVAP]-1659887158458
GPR[EPVAP]-1659887160379
GPR[EPVS]-1659887160379
========
case Token.CALL :

swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887160380
GPR[SPVAP]-1659887160380
GPR[EPVAP]-1659887162418
GPR[EPVS]-1659887162419
========
default :

swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887162449
GPR[SPVAP]-1659887162449
GPR[EPVAP]-1659887164260
GPR[EPVS]-1659887164260
========
swtich (node.getType()){
case Token.SHNE :
return !(Token.NULL==parent.getType());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887164262
GPR[SPVAP]-1659887164262
GPR[EPVAP]-1659887165921
GPR[EPVS]-1659887165921
========
swtich (node.getType()){
default :
throw new IllegalStateException("unexpected.");

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887165922
GPR[SPVAP]-1659887165922
GPR[EPVAP]-1659887167727
GPR[EPVS]-1659887167727
========
swtich (node.getType()){
case Token.SHNE :
return !(Token.NULL==parent.getType());

default :
throw new IllegalStateException("unexpected.");


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887167728
GPR[SPVAP]-1659887167728
GPR[EPVAP]-1659887169576
GPR[EPVS]-1659887169576
========
swtich (node.getType()){
case Token.PARAM_LIST :
return node.getParent().getParent().isFunction();

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887169578
GPR[SPVAP]-1659887169578
GPR[EPVAP]-1659887171464
GPR[EPVS]-1659887171464
========
swtich (node.getType()){
case Token.PARAM_LIST :
return node.getParent().getParent().isFunction();

default :
return false;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887171465
GPR[SPVAP]-1659887171465
GPR[EPVAP]-1659887173260
GPR[EPVS]-1659887173260
========
swtich (node.getType()){
case Token.FUNCTION :
 final Scope nodeTraversal.getScope()=nodeTraversal.getScope();
 final String node.getFirstChild().getString()=n.getFirstChild().getString();
if(functionPrivateName!=null&&functionPrivateName.length()>0&&outerScope.isDeclared(functionPrivateName,false)&&!(outerScope.getVar(functionPrivateName).getType() instanceof FunctionType)){
report(t,n,FUNCTION_MASKS_VARIABLE,functionPrivateName);
}
break;

}
swtich (node.getType()){
case Token.PARAM_LIST :
return node.getParent().getParent().isFunction();

default :
return false;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887173262
GPR[SPVAP]-1659887173262
GPR[EPVAP]-1659887175187
GPR[EPVS]-1659887175187
========
swtich (node.getType()){
case Token.FUNCTION :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887175189
GPR[SPVAP]-1659887175189
GPR[EPVAP]-1659887176852
GPR[EPVS]-1659887176852
========
case Token.ASSIGN :

swtich (node.getType()){
case Token.FUNCTION :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887176853
GPR[SPVAP]-1659887176853
GPR[EPVAP]-1659887178506
GPR[EPVS]-1659887178507
========
Preconditions.checkState(removeUnused==true);
swtich (node.getType()){
case Token.FUNCTION :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887178508
GPR[SPVAP]-1659887178508
GPR[EPVAP]-1659887180464
GPR[EPVS]-1659887180464
========
removeUnused=false;
swtich (node.getType()){
case Token.FUNCTION :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887180465
GPR[SPVAP]-1659887180465
GPR[EPVAP]-1659887182176
GPR[EPVS]-1659887182176
========
Preconditions.checkState(node.isFunction());
swtich (node.getType()){
case Token.FUNCTION :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887182178
GPR[SPVAP]-1659887182178
GPR[EPVAP]-1659887183868
GPR[EPVS]-1659887183868
========
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887183869
GPR[SPVAP]-1659887183869
GPR[EPVAP]-1659887185756
GPR[EPVS]-1659887185756
========
parent.addChildToBack(node);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887185758
GPR[SPVAP]-1659887185758
GPR[EPVAP]-1659887187414
GPR[EPVS]-1659887187414
========
case Token.GETPROP :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887187416
GPR[SPVAP]-1659887187416
GPR[EPVAP]-1659887189173
GPR[EPVS]-1659887189173
========
if(node.isCall()&&!NodeUtil.functionCallHasSideEffects(node,parent)){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887189175
GPR[SPVAP]-1659887189175
GPR[EPVAP]-1659887191207
GPR[EPVS]-1659887191207
========
if(node.isNew()&&!NodeUtil.constructorCallHasSideEffects(node)){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887191208
GPR[SPVAP]-1659887191208
GPR[EPVAP]-1659887192884
GPR[EPVS]-1659887192884
========
parseDirectives(node);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887192885
GPR[SPVAP]-1659887192885
GPR[EPVAP]-1659887194725
GPR[EPVS]-1659887194725
========
default :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887194727
GPR[SPVAP]-1659887194727
GPR[EPVAP]-1659887196438
GPR[EPVS]-1659887196438
========
case Token.HOOK :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887196440
GPR[SPVAP]-1659887196440
GPR[EPVAP]-1659887198110
GPR[EPVS]-1659887198110
========
case Token.IF :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887198112
GPR[SPVAP]-1659887198112
GPR[EPVAP]-1659887199804
GPR[EPVS]-1659887199804
========
case Token.WHILE :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887199805
GPR[SPVAP]-1659887199805
GPR[EPVAP]-1659887201976
GPR[EPVS]-1659887201976
========
case Token.SWITCH :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887201977
GPR[SPVAP]-1659887201977
GPR[EPVAP]-1659887203876
GPR[EPVS]-1659887203876
========
if(node.getIntProp(Node.INCRDECR_PROP)==1){
new JsonML(TagType.CountExpr).setAttribute(TagAttr.IS_PREFIX,false);
}else {
element.setAttribute(TagAttr.IS_PREFIX,true);
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887203878
GPR[SPVAP]-1659887203878
GPR[EPVAP]-1659887205544
GPR[EPVS]-1659887205544
========
processNode(node.getFirstChild(),new JsonML(TagType.CountExpr));
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887205545
GPR[SPVAP]-1659887205545
GPR[EPVAP]-1659887207744
GPR[EPVS]-1659887207744
========
if(s.propertyScope!=null){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887207746
GPR[SPVAP]-1659887207746
GPR[EPVAP]-1659887209392
GPR[EPVS]-1659887209392
========
case Token.CONTINUE :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887209394
GPR[SPVAP]-1659887209394
GPR[EPVAP]-1659887211303
GPR[EPVS]-1659887211303
========
case Token.OR :
return parent!=node.getFirstChild();

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887211304
GPR[SPVAP]-1659887211304
GPR[EPVAP]-1659887213304
GPR[EPVS]-1659887213304
========
if(!node.isCall()){
throw new MalformedException("Message must be initialized using "+MSG_FUNCTION_NAME,node);
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887213306
GPR[SPVAP]-1659887213306
GPR[EPVAP]-1659887214984
GPR[EPVS]-1659887214984
========
if(!MSG_FUNCTION_NAME.equals(node.getFirstChild().getQualifiedName())){
throw new MalformedException("Message initialized using unrecognized function. "+"Please use "+MSG_FUNCTION_NAME,fnNameNode);
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887214986
GPR[SPVAP]-1659887214986
GPR[EPVAP]-1659887216706
GPR[EPVS]-1659887216706
========
if(node.getFirstChild().getNext()==null){
throw new MalformedException("Message string literal expected",stringLiteralNode);
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887216707
GPR[SPVAP]-1659887216707
GPR[EPVAP]-1659887218362
GPR[EPVS]-1659887218363
========
case Token.IF :
return NodeUtil.getConditionExpression(parent)!=node;

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887218364
GPR[SPVAP]-1659887218364
GPR[EPVAP]-1659887220276
GPR[EPVS]-1659887220276
========
case Token.FOR :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887220277
GPR[SPVAP]-1659887220277
GPR[EPVAP]-1659887222122
GPR[EPVS]-1659887222122
========
case Token.FOR :
return NodeUtil.getConditionExpression(parent)==node;

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887222123
GPR[SPVAP]-1659887222123
GPR[EPVAP]-1659887224072
GPR[EPVS]-1659887224072
========
case Token.INSTANCEOF :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887224073
GPR[SPVAP]-1659887224074
GPR[EPVAP]-1659887225754
GPR[EPVS]-1659887225754
========
case Token.FUNCTION :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887225755
GPR[SPVAP]-1659887225755
GPR[EPVAP]-1659887227713
GPR[EPVS]-1659887227713
========
case Token.AND :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887227715
GPR[SPVAP]-1659887227715
GPR[EPVAP]-1659887229672
GPR[EPVS]-1659887229672
========
case Token.NAME :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887229673
GPR[SPVAP]-1659887229673
GPR[EPVAP]-1659887231587
GPR[EPVS]-1659887231587
========
case Token.RETURN :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887231588
GPR[SPVAP]-1659887231588
GPR[EPVAP]-1659887233217
GPR[EPVS]-1659887233217
========
case Token.CASE :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887233219
GPR[SPVAP]-1659887233219
GPR[EPVAP]-1659887235108
GPR[EPVS]-1659887235108
========
case Token.VAR :
Preconditions.checkState(node==parent.getFirstChild());
return parent;

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887235109
GPR[SPVAP]-1659887235109
GPR[EPVAP]-1659887237088
GPR[EPVS]-1659887237088
========
case Token.SCRIPT :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887237090
GPR[SPVAP]-1659887237090
GPR[EPVAP]-1659887238984
GPR[EPVS]-1659887238984
========
case Token.WITH :
return parent!=node.getFirstChild();

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887238986
GPR[SPVAP]-1659887238986
GPR[EPVAP]-1659887241176
GPR[EPVS]-1659887241176
========
case Token.ASSIGN_MOD :
maybeEliminateAssignmentByLvalueName(nodeTraversal,node,parent);
break;

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887241177
GPR[SPVAP]-1659887241177
GPR[EPVAP]-1659887243107
GPR[EPVS]-1659887243107
========
case Token.CALL :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887243108
GPR[SPVAP]-1659887243108
GPR[EPVAP]-1659887245001
GPR[EPVS]-1659887245001
========
case Token.NAME :
handleCandidateProvideDefinition(nodeTraversal,node,parent);
break;

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887245002
GPR[SPVAP]-1659887245002
GPR[EPVAP]-1659887247175
GPR[EPVS]-1659887247175
========
case Token.EXPR_RESULT :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887247176
GPR[SPVAP]-1659887247176
GPR[EPVAP]-1659887249117
GPR[EPVS]-1659887249117
========
case Token.OR :
return (node==parent.getFirstChild())?true:isExpressionResultUsed(parent);

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887249119
GPR[SPVAP]-1659887249119
GPR[EPVAP]-1659887251068
GPR[EPVS]-1659887251068
========
case Token.COMMA :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887251070
GPR[SPVAP]-1659887251070
GPR[EPVAP]-1659887252742
GPR[EPVS]-1659887252742
========
processDirectives(parent,new JsonML(TagType.BlockStmt));
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887252753
GPR[SPVAP]-1659887252753
GPR[EPVAP]-1659887254642
GPR[EPVS]-1659887254643
========
for(Node node : parent.children()){
processNode(child,new JsonML(TagType.BlockStmt));
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887254644
GPR[SPVAP]-1659887254644
GPR[EPVAP]-1659887256524
GPR[EPVS]-1659887256525
========
case VAR_DECL_SIMPLE_ASSIGNMENT :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887256526
GPR[SPVAP]-1659887256526
GPR[EPVAP]-1659887258180
GPR[EPVS]-1659887258180
========
node.setLineno(node.getFirstChild().getLineno());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887258181
GPR[SPVAP]-1659887258181
GPR[EPVAP]-1659887259996
GPR[EPVS]-1659887259997
========
node.setCharno(node.getFirstChild().getCharno());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887259998
GPR[SPVAP]-1659887259998
GPR[EPVAP]-1659887261646
GPR[EPVS]-1659887261646
========
if(node.getDirectives()==null){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887261648
GPR[SPVAP]-1659887261648
GPR[EPVAP]-1659887263296
GPR[EPVS]-1659887263296
========
Preconditions.checkArgument(node!=null&&node.parent==this,"The existing child node of the parent should not be null.");
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887263297
GPR[SPVAP]-1659887263297
GPR[EPVAP]-1659887264937
GPR[EPVS]-1659887264937
========
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887264938
GPR[SPVAP]-1659887264938
GPR[EPVAP]-1659887266612
GPR[EPVS]-1659887266613
========
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887266613
GPR[SPVAP]-1659887266613
GPR[EPVAP]-1659887269580
GPR[EPVS]-1659887269580
========
case Token.PARAM_LIST :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887269581
GPR[SPVAP]-1659887269581
GPR[EPVAP]-1659887271576
GPR[EPVS]-1659887271576
========
case AssignExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887271578
GPR[SPVAP]-1659887271578
GPR[EPVAP]-1659887273274
GPR[EPVS]-1659887273275
========
case BlockStmt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887273276
GPR[SPVAP]-1659887273276
GPR[EPVAP]-1659887274955
GPR[EPVS]-1659887274955
========
case CallExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887274956
GPR[SPVAP]-1659887274956
GPR[EPVAP]-1659887276770
GPR[EPVS]-1659887276770
========
case CatchClause :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887276771
GPR[SPVAP]-1659887276771
GPR[EPVAP]-1659887278455
GPR[EPVS]-1659887278455
========
case ContinueStmt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887278456
GPR[SPVAP]-1659887278456
GPR[EPVAP]-1659887280430
GPR[EPVS]-1659887280430
========
case DataProp :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887280431
GPR[SPVAP]-1659887280431
GPR[EPVAP]-1659887282410
GPR[EPVS]-1659887282411
========
case SetterProp :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887282412
GPR[SPVAP]-1659887282412
GPR[EPVAP]-1659887284056
GPR[EPVS]-1659887284056
========
case DeleteExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887284057
GPR[SPVAP]-1659887284057
GPR[EPVAP]-1659887285992
GPR[EPVS]-1659887285992
========
case Empty :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887285993
GPR[SPVAP]-1659887285993
GPR[EPVAP]-1659887287631
GPR[EPVS]-1659887287631
========
case EvalExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887287632
GPR[SPVAP]-1659887287632
GPR[EPVAP]-1659887289304
GPR[EPVS]-1659887289304
========
case ForStmt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887289305
GPR[SPVAP]-1659887289305
GPR[EPVAP]-1659887290958
GPR[EPVS]-1659887290958
========
case FunctionExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887290959
GPR[SPVAP]-1659887290959
GPR[EPVAP]-1659887292613
GPR[EPVS]-1659887292613
========
case IdPatt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887292614
GPR[SPVAP]-1659887292614
GPR[EPVAP]-1659887294495
GPR[EPVS]-1659887294495
========
case InitPatt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887294496
GPR[SPVAP]-1659887294496
GPR[EPVAP]-1659887296145
GPR[EPVS]-1659887296145
========
case LabelledStmt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887296146
GPR[SPVAP]-1659887296146
GPR[EPVAP]-1659887297952
GPR[EPVS]-1659887297952
========
case LogicalAndExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887297953
GPR[SPVAP]-1659887297953
GPR[EPVAP]-1659887299636
GPR[EPVS]-1659887299636
========
case MemberExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887299637
GPR[SPVAP]-1659887299637
GPR[EPVAP]-1659887301294
GPR[EPVS]-1659887301294
========
case ObjectExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887301295
GPR[SPVAP]-1659887301295
GPR[EPVAP]-1659887302948
GPR[EPVS]-1659887302948
========
case Program :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887302949
GPR[SPVAP]-1659887302949
GPR[EPVAP]-1659887304667
GPR[EPVS]-1659887304667
========
case RegExpExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887304668
GPR[SPVAP]-1659887304668
GPR[EPVAP]-1659887306576
GPR[EPVS]-1659887306576
========
case SwitchStmt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887306577
GPR[SPVAP]-1659887306577
GPR[EPVAP]-1659887308466
GPR[EPVS]-1659887308467
========
case ThrowStmt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887308468
GPR[SPVAP]-1659887308468
GPR[EPVAP]-1659887310449
GPR[EPVS]-1659887310449
========
case TypeofExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887310450
GPR[SPVAP]-1659887310450
GPR[EPVAP]-1659887312657
GPR[EPVS]-1659887312657
========
case VarDecl :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887312658
GPR[SPVAP]-1659887312658
GPR[EPVAP]-1659887314306
GPR[EPVS]-1659887314306
========
Preconditions.checkState(parent!=null);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887314307
GPR[SPVAP]-1659887314307
GPR[EPVAP]-1659887315960
GPR[EPVS]-1659887315960
========
Preconditions.checkNotNull(node.getFirstChild());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887315961
GPR[SPVAP]-1659887315961
GPR[EPVAP]-1659887317872
GPR[EPVS]-1659887317872
========
Preconditions.checkState(node.getFirstChild().getType()==Token.BLOCK);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887317873
GPR[SPVAP]-1659887317873
GPR[EPVAP]-1659887319554
GPR[EPVS]-1659887319554
========
parent=child.getFirstChild();
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887319556
GPR[SPVAP]-1659887319556
GPR[EPVAP]-1659887321238
GPR[EPVS]-1659887321238
========
case Token.EXPR_RESULT :
parent=node;
next=next.getFirstChild();
break;

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887321240
GPR[SPVAP]-1659887321240
GPR[EPVAP]-1659887322916
GPR[EPVS]-1659887322916
========
case Token.VAR :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887322918
GPR[SPVAP]-1659887322918
GPR[EPVAP]-1659887324578
GPR[EPVS]-1659887324578
========
Preconditions.checkArgument(node.getType()==Token.GETPROP);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887324580
GPR[SPVAP]-1659887324580
GPR[EPVAP]-1659887326467
GPR[EPVS]-1659887326467
========
parent.addChildToFront(node);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887326469
GPR[SPVAP]-1659887326469
GPR[EPVAP]-1659887328188
GPR[EPVS]-1659887328188
========
node.addChildToBack(parent);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887328189
GPR[SPVAP]-1659887328189
GPR[EPVAP]-1659887330140
GPR[EPVS]-1659887330140
========
Preconditions.checkState(node.getChildCount()==2);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887330142
GPR[SPVAP]-1659887330142
GPR[EPVAP]-1659887331790
GPR[EPVS]-1659887331790
========
Preconditions.checkState(node.getChildCount()>=2);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887331791
GPR[SPVAP]-1659887331791
GPR[EPVAP]-1659887333451
GPR[EPVS]-1659887333451
========
if(node.getChildCount()<3){
new JsonML(TagType.IfStmt).appendChild(new JsonML(TagType.EmptyStmt));
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887333453
GPR[SPVAP]-1659887333453
GPR[EPVAP]-1659887335349
GPR[EPVS]-1659887335349
========
compiler.reportCodeChange();
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887335351
GPR[SPVAP]-1659887335351
GPR[EPVAP]-1659887337411
GPR[EPVS]-1659887337411
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.BODY,node.getFirstChild().getString());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887337412
GPR[SPVAP]-1659887337412
GPR[EPVAP]-1659887339107
GPR[EPVS]-1659887339107
========
parent=child.getNext();
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887339108
GPR[SPVAP]-1659887339108
GPR[EPVAP]-1659887340928
GPR[EPVS]-1659887340928
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.FLAGS,"");
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887340930
GPR[SPVAP]-1659887340930
GPR[EPVAP]-1659887342602
GPR[EPVS]-1659887342602
========
if(compiler==null){
return null;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887342604
GPR[SPVAP]-1659887342604
GPR[EPVAP]-1659887344468
GPR[EPVS]-1659887344468
========
id=-1;
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887344469
GPR[SPVAP]-1659887344469
GPR[EPVAP]-1659887346129
GPR[EPVS]-1659887346129
========
parent.removeChild(node);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887346132
GPR[SPVAP]-1659887346132
GPR[EPVAP]-1659887348182
GPR[EPVS]-1659887348182
========
parent.getParent().getParent().getParent().addChildAfter(parent,parent.getParent().getParent());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887348183
GPR[SPVAP]-1659887348183
GPR[EPVAP]-1659887349888
GPR[EPVS]-1659887349888
========
Preconditions.checkArgument(node.getType()==Token.NAME);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887349890
GPR[SPVAP]-1659887349890
GPR[EPVAP]-1659887351731
GPR[EPVS]-1659887351731
========
if(removeUnused){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887351732
GPR[SPVAP]-1659887351732
GPR[EPVAP]-1659887353391
GPR[EPVS]-1659887353391
========
reportCodeChange();
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887353392
GPR[SPVAP]-1659887353392
GPR[EPVAP]-1659887355188
GPR[EPVS]-1659887355188
========
case Token.CATCH :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887355189
GPR[SPVAP]-1659887355189
GPR[EPVAP]-1659887357149
GPR[EPVS]-1659887357149
========
case Token.GETELEM :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887357151
GPR[SPVAP]-1659887357151
GPR[EPVAP]-1659887359123
GPR[EPVS]-1659887359123
========
case SIMPLE_ASSIGNMENT :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887359125
GPR[SPVAP]-1659887359125
GPR[EPVAP]-1659887360940
GPR[EPVS]-1659887360940
========
notifyOfRemoval(node);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887360942
GPR[SPVAP]-1659887360942
GPR[EPVAP]-1659887362904
GPR[EPVS]-1659887362904
========
if(parent.isCall()&&gramps.getFirstChild()==node){
return false;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887362906
GPR[SPVAP]-1659887362906
GPR[EPVAP]-1659887364792
GPR[EPVS]-1659887364792
========
if(parent.isDelProp()){
return false;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887364793
GPR[SPVAP]-1659887364793
GPR[EPVAP]-1659887366739
GPR[EPVS]-1659887366739
========
processNode(node.getFirstChild(),new JsonML(TagType.TryStmt));
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887366741
GPR[SPVAP]-1659887366741
GPR[EPVAP]-1659887368612
GPR[EPVS]-1659887368612
========
if(node.getFirstChild().hasChildren()){
processNode(child.getFirstChild(),new JsonML(TagType.TryStmt));
}else {
element.appendChild(new JsonML(TagType.Empty));
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887368613
GPR[SPVAP]-1659887368614
GPR[EPVAP]-1659887370626
GPR[EPVS]-1659887370626
========
if(node.getFirstChild()!=null){
processNode(child,new JsonML(TagType.TryStmt));
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887370627
GPR[SPVAP]-1659887370627
GPR[EPVAP]-1659887372285
GPR[EPVS]-1659887372285
========
Preconditions.checkNotNull(parent);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887372286
GPR[SPVAP]-1659887372286
GPR[EPVAP]-1659887373936
GPR[EPVS]-1659887373936
========
case Token.WITH :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887373938
GPR[SPVAP]-1659887373938
GPR[EPVAP]-1659887375900
GPR[EPVS]-1659887375900
========
if(nodeTraversal.getScopeDepth()<2){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887375901
GPR[SPVAP]-1659887375901
GPR[EPVAP]-1659887377776
GPR[EPVS]-1659887377776
========
case Token.POS :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887377778
GPR[SPVAP]-1659887377778
GPR[EPVAP]-1659887379432
GPR[EPVS]-1659887379432
========
node.addChildToBack(node);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887379434
GPR[SPVAP]-1659887379434
GPR[EPVAP]-1659887381395
GPR[EPVS]-1659887381395
========
if(!parent.isBlock()){
Preconditions.checkState(config.isIdeMode);
bodyNode=IR.block();
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887381396
GPR[SPVAP]-1659887381396
GPR[EPVAP]-1659887383378
GPR[EPVS]-1659887383378
========
parseDirectives(parent);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887383379
GPR[SPVAP]-1659887383379
GPR[EPVAP]-1659887385374
GPR[EPVS]-1659887385374
========
result.liveSet.andNot(new BitSet(input.liveSet.size()));
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887385375
GPR[SPVAP]-1659887385375
GPR[EPVAP]-1659887387032
GPR[EPVS]-1659887387032
========
result.liveSet.or(new BitSet(input.liveSet.size()));
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887387033
GPR[SPVAP]-1659887387033
GPR[EPVAP]-1659887388688
GPR[EPVS]-1659887388688
========
Preconditions.checkState(NodeUtil.isObjectLitKey(node)||node.getType()==Token.NAME||nType==Token.GETPROP);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887388692
GPR[SPVAP]-1659887388692
GPR[EPVAP]-1659887390324
GPR[EPVS]-1659887390324
========
case Token.MUL :
visitBinaryOperator(node.getType(),nodeTraversal,n);
break;

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887390325
GPR[SPVAP]-1659887390325
GPR[EPVAP]-1659887392141
GPR[EPVS]-1659887392141
========
case Token.DELPROP :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887392142
GPR[SPVAP]-1659887392142
GPR[EPVAP]-1659887394088
GPR[EPVS]-1659887394088
========
if(!node.isCall()){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887394090
GPR[SPVAP]-1659887394090
GPR[EPVAP]-1659887395718
GPR[EPVS]-1659887395718
========
if(!node.getFirstChild().isGetProp()){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887395719
GPR[SPVAP]-1659887395719
GPR[EPVAP]-1659887397708
GPR[EPVS]-1659887397708
========
if(!node.getFirstChild().getFirstChild().getNext().isString()){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887397710
GPR[SPVAP]-1659887397710
GPR[EPVAP]-1659887399386
GPR[EPVS]-1659887399386
========
if(nodeTraversal.getScope().getVar(node.getFirstChild().getString())!=null&&!define.isGlobal()){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887399388
GPR[SPVAP]-1659887399388
GPR[EPVAP]-1659887401074
GPR[EPVS]-1659887401074
========
if(!removeUnused){
ensureLibraryInjected("base");
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887401203
GPR[SPVAP]-1659887401203
GPR[EPVAP]-1659887402882
GPR[EPVS]-1659887402882
========
Preconditions.checkState(parent.getChildCount()==3);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887402889
GPR[SPVAP]-1659887402889
GPR[EPVAP]-1659887404542
GPR[EPVS]-1659887404542
========
Preconditions.checkState(parent.isFunction());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887404543
GPR[SPVAP]-1659887404543
GPR[EPVAP]-1659887406201
GPR[EPVS]-1659887406201
========
parent=parent;
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887406202
GPR[SPVAP]-1659887406202
GPR[EPVAP]-1659887408013
GPR[EPVS]-1659887408013
========
pushScope(parent);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887408014
GPR[SPVAP]-1659887408014
GPR[EPVAP]-1659887409652
GPR[EPVS]-1659887409652
========
if((parent!=null)&&NodeUtil.isFunctionExpression(parent)){
traverseBranch(node,parent);
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887409653
GPR[SPVAP]-1659887409653
GPR[EPVAP]-1659887411543
GPR[EPVS]-1659887411543
========
removeUnused=true;
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887411552
GPR[SPVAP]-1659887411552
GPR[EPVAP]-1659887413223
GPR[EPVS]-1659887413223
========
if(node.isName()){
Preconditions.checkArgument(parent.isFunction()||parent.isVar());
}else {
Preconditions.checkArgument(n.isGetProp()&&(parent.isAssign()||parent.isExprResult()));
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887413225
GPR[SPVAP]-1659887413225
GPR[EPVAP]-1659887415214
GPR[EPVS]-1659887415214
========
getCurrentScriptNode(parent).addChildToFront(IR.exprResult(IR.call(IR.getprop(IR.name("goog"),IR.string("require")),IR.string(toModuleName(node.getChildAtIndex(1).getString(),normalizeSourceName(nodeTraversal.getSourceName()))))).copyInformationFromForTree(node));
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887415215
GPR[SPVAP]-1659887415215
GPR[EPVAP]-1659887418158
GPR[EPVS]-1659887418158
========
if(getVarsDeclaredInBranch(node).isEmpty()){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887418166
GPR[SPVAP]-1659887418166
GPR[EPVAP]-1659887420054
GPR[EPVS]-1659887420054
========
parent.replaceChild(node,NodeUtil.newExpr(parent));
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887420056
GPR[SPVAP]-1659887420056
GPR[EPVAP]-1659887421902
GPR[EPVS]-1659887421902
========
Preconditions.checkState(parent.isAssign());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887421904
GPR[SPVAP]-1659887421904
GPR[EPVAP]-1659887424080
GPR[EPVS]-1659887424080
========
node.getParent().replaceChild(node,parent);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887424081
GPR[SPVAP]-1659887424081
GPR[EPVAP]-1659887425737
GPR[EPVS]-1659887425737
========
if(parent.isVar()){
parent=n;
}else {
Preconditions.checkState(n.hasOneChild());
newInitializer=n.getFirstChild();
n.removeChild(newInitializer);
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887425738
GPR[SPVAP]-1659887425738
GPR[EPVAP]-1659887428011
GPR[EPVS]-1659887428011
========
NodeUtil.redeclareVarsInsideBranch(parent);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887428013
GPR[SPVAP]-1659887428013
GPR[EPVAP]-1659887429666
GPR[EPVS]-1659887429666
========
parent.replaceChild(node,removeUnused?node.getFirstChild().getNext():node.getFirstChild().getNext().getNext());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887429667
GPR[SPVAP]-1659887429667
GPR[EPVAP]-1659887431484
GPR[EPVS]-1659887431484
========
this.parent=parent;
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887431491
GPR[SPVAP]-1659887431491
GPR[EPVAP]-1659887433522
GPR[EPVS]-1659887433522
========
id=pattern.perExtractionOverhead+pattern.perMemberOverhead;
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887433523
GPR[SPVAP]-1659887433523
GPR[EPVAP]-1659887435260
GPR[EPVS]-1659887435260
========
case Token.OR :
{
int node.getType()=node.getType();
int node.getType()==Token.AND?Token.OR:Token.AND=opType==Token.AND?Token.OR:Token.AND;
MinimizedCondition computeMinimizedCondition(node.getFirstChild().detachFromParent())=computeMinimizedCondition(n.getFirstChild().detachFromParent());
MinimizedCondition computeMinimizedCondition(node.getLastChild().detachFromParent())=computeMinimizedCondition(n.getLastChild().detachFromParent());
ImmutableList<MeasuredNode> ImmutableList.of(MeasuredNode.addNode(new Node(node.getType()).srcref(node),leftSubtree.positive.cloneTree(),rightSubtree.positive.cloneTree()),MeasuredNode.addNode(new Node(node.getType()==Token.AND?Token.OR:Token.AND).srcref(n),leftSubtree.negative.cloneTree(),rightSubtree.negative.cloneTree()).negate())=ImmutableList.of(MeasuredNode.addNode(new Node(opType).srcref(n),leftSubtree.positive.cloneTree(),rightSubtree.positive.cloneTree()),MeasuredNode.addNode(new Node(complementType).srcref(n),leftSubtree.negative.cloneTree(),rightSubtree.negative.cloneTree()).negate());
ImmutableList<MeasuredNode> ImmutableList.of(MeasuredNode.addNode(new Node(node.getType()).srcref(node),leftSubtree.positive,rightSubtree.positive).negate(),MeasuredNode.addNode(new Node(node.getType()==Token.AND?Token.OR:Token.AND).srcref(n),leftSubtree.negative,rightSubtree.negative))=ImmutableList.of(MeasuredNode.addNode(new Node(opType).srcref(n),leftSubtree.positive,rightSubtree.positive).negate(),MeasuredNode.addNode(new Node(complementType).srcref(n),leftSubtree.negative,rightSubtree.negative));
return new MinimizedCondition(Collections.min(positiveAsts,AST_LENGTH_COMPARATOR),Collections.min(negativeAsts,AST_LENGTH_COMPARATOR));
}

swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659887435261
GPR[SPVAP]-1659887435261
GPR[EPVAP]-1659887436917
GPR[EPVS]-1659887436917
GPR[ESUN]-1659887436918
GPR[SSUN]-1659887436918
com.google.javascript.jscomp.RenameLabels,198
========
if(!name.equals(newName)){
n.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887439810
GPR[SPVAP]-1659887439810
GPR[EPVAP]-1659887443833
GPR[EPVS]-1659887443833
========
if(!name.equals(newName)){
nameNode.setString(name);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887443834
GPR[SPVAP]-1659887443834
GPR[EPVAP]-1659887451501
GPR[SPVATF]-1659887451501
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887455196
GPR[EPVS]-1659887455196
========
if(!name.equals(newName)){
nameNode.setString(p.newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887455198
GPR[SPVAP]-1659887455198
GPR[EPVAP]-1659887457127
GPR[EPVS]-1659887457127
========
if(!name.equals(newName)){
origValueNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887457128
GPR[SPVAP]-1659887457128
GPR[EPVAP]-1659887458974
GPR[EPVS]-1659887458974
========
if(!name.equals(newName)){
node.getFirstChild().setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887458976
GPR[SPVAP]-1659887458976
GPR[EPVAP]-1659887462895
GPR[SPVATF]-1659887462895
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887466653
GPR[EPVS]-1659887466653
========
if(!name.equals(newName)){
node.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887466655
GPR[SPVAP]-1659887466655
GPR[EPVAP]-1659887470913
GPR[SPVATF]-1659887470913
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887474713
GPR[EPVS]-1659887474713
========
if(!name.equals(newName)){
if(!"".equals(newName)){
node.getLastChild().setString(newName);
}else if(node.getChildCount()==2){
node.getLastChild().detachFromParent();
}
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887474715
GPR[SPVAP]-1659887474715
GPR[EPVAP]-1659887478646
GPR[SPVATF]-1659887478646
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887482189
GPR[EPVS]-1659887482189
========
if(!name.equals(newName)){
reportCodeChange();
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887482190
GPR[SPVAP]-1659887482190
GPR[EPVAP]-1659887484078
GPR[EPVS]-1659887484078
========
if(!name.equals(newName)){
if(!"".equals(newName)){
node.getLastChild().setString(newName);
}else if(node.getChildCount()==2){
node.getLastChild().detachFromParent();
}
reportCodeChange();

nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887484079
GPR[SPVAP]-1659887484079
GPR[EPVAP]-1659887486005
GPR[EPVS]-1659887486005
========
if(!name.equals(newName)){
node.getFirstChild().setString(name);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887486006
GPR[SPVAP]-1659887486006
GPR[EPVAP]-1659887489996
GPR[SPVATF]-1659887489996
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887493564
GPR[EPVS]-1659887493564
========
if(!name.equals(newName)){
if(!"".equals(newName)){
node.getLastChild().setString(newName);
}else if(node.getChildCount()==2){
node.getLastChild().detachFromParent();
}
node.getFirstChild().setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887493565
GPR[SPVAP]-1659887493565
GPR[EPVAP]-1659887497353
GPR[SPVATF]-1659887497353
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887500969
GPR[EPVS]-1659887500969
========
if(!name.equals(newName)){
node.setString(name);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887500971
GPR[SPVAP]-1659887500971
GPR[EPVAP]-1659887504797
GPR[SPVATF]-1659887504797
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887508383
GPR[EPVS]-1659887508383
========
if(!name.equals(newName)){
if(!"".equals(newName)){
node.getLastChild().setString(newName);
}else if(node.getChildCount()==2){
node.getLastChild().detachFromParent();
}
node.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887508385
GPR[SPVAP]-1659887508385
GPR[EPVAP]-1659887512182
GPR[SPVATF]-1659887512182
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887516439
GPR[EPVS]-1659887516439
========
if(!name.equals(newName)){
if(!"".equals(newName)){
node.getLastChild().setString(newName);
}else if(node.getChildCount()==2){
node.getLastChild().detachFromParent();
}
nameNode.setString(name);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887516440
GPR[SPVAP]-1659887516441
GPR[EPVAP]-1659887520452
GPR[SPVATF]-1659887520452
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887524038
GPR[EPVS]-1659887524038
========
if(!name.equals(newName)){
if(!"".equals(newName)){
node.getLastChild().setString(newName);
}else if(node.getChildCount()==2){
node.getLastChild().detachFromParent();
}
node.getFirstChild().setString(name);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887524039
GPR[SPVAP]-1659887524039
GPR[EPVAP]-1659887527840
GPR[SPVATF]-1659887527840
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887531481
GPR[EPVS]-1659887531481
========
if(!name.equals(newName)){
if(!"".equals(newName)){
node.getLastChild().setString(newName);
}else if(node.getChildCount()==2){
node.getLastChild().detachFromParent();
}
node.setString(name);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887531482
GPR[SPVAP]-1659887531482
GPR[EPVAP]-1659887535285
GPR[SPVATF]-1659887535285
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887538913
GPR[EPVS]-1659887538913
========
node.setString(newName);
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887538915
GPR[SPVAP]-1659887538915
GPR[EPVAP]-1659887543107
GPR[SPVATF]-1659887543107
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887547062
GPR[EPVS]-1659887547062
========
compiler.reportCodeChange();
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887547063
GPR[SPVAP]-1659887547063
GPR[EPVAP]-1659887551016
GPR[SPVATF]-1659887551016
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887554871
GPR[EPVS]-1659887554871
========
node.setString(newName);
compiler.reportCodeChange();
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887554872
GPR[SPVAP]-1659887554872
GPR[EPVAP]-1659887558830
GPR[SPVATF]-1659887558830
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887562417
GPR[EPVS]-1659887562417
========
if(!name.equals(ARGUMENTS)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887562419
GPR[SPVAP]-1659887562419
GPR[EPVAP]-1659887564412
GPR[EPVS]-1659887564412
========
if(!name.equals(newName)){
nameNode.setString(newName);
referencedNames.reportCodeChange();
}

========
GPR[SPVS]-1659887564414
GPR[SPVAP]-1659887564414
GPR[EPVAP]-1659887566319
GPR[EPVS]-1659887566319
========
if(!name.equals(newName)){
compiler.reportCodeChange();
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887566320
GPR[SPVAP]-1659887566320
GPR[EPVAP]-1659887570112
GPR[SPVATF]-1659887570112
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887573765
GPR[EPVS]-1659887573765
========
if(!name.equals(newName)){
compiler.reportCodeChange();
n.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887573766
GPR[SPVAP]-1659887573766
GPR[EPVAP]-1659887575603
GPR[EPVS]-1659887575603
========
if(!name.equals(jsError.description)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887575605
GPR[SPVAP]-1659887575605
GPR[EPVAP]-1659887577583
GPR[EPVS]-1659887577583
========
if(!name.equals(newName)){
nameNode.setString(newName);
symbolGraph.reportCodeChange();
}

========
GPR[SPVS]-1659887577584
GPR[SPVAP]-1659887577584
GPR[EPVAP]-1659887579495
GPR[EPVS]-1659887579495
========
if(!name.equals(JSDocInfo.Visibility.PRIVATE)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887579497
GPR[SPVAP]-1659887579497
GPR[EPVAP]-1659887581737
GPR[EPVS]-1659887581737
========
if(!name.equals(newName)){
nameNode.setString(newName);
ctors.reportCodeChange();
}

========
GPR[SPVS]-1659887581738
GPR[SPVAP]-1659887581738
GPR[EPVAP]-1659887583729
GPR[EPVS]-1659887583729
========
if(!name.equals(newName)){
nameNode.setString(newName);
dstFragments.reportCodeChange();
}

========
GPR[SPVS]-1659887583730
GPR[SPVAP]-1659887583730
GPR[EPVAP]-1659887585734
GPR[EPVS]-1659887585734
========
if(!name.equals(newName)){
nameNode.setString(newName);
requires.reportCodeChange();
}

========
GPR[SPVS]-1659887585735
GPR[SPVAP]-1659887585735
GPR[EPVAP]-1659887587612
GPR[EPVS]-1659887587612
========
if(!name.equals(newName)){
nameNode.addChildToBack(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887587614
GPR[SPVAP]-1659887587614
GPR[EPVAP]-1659887589458
GPR[EPVS]-1659887589458
========
if(!name.equals(jsError.sourceName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887589459
GPR[SPVAP]-1659887589459
GPR[EPVAP]-1659887591298
GPR[EPVS]-1659887591299
========
if(!name.equals(newName)){
call.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887591302
GPR[SPVAP]-1659887591302
GPR[EPVAP]-1659887593108
GPR[EPVS]-1659887593108
========
if(!name.equals(newName)){
nameNode.setString(newName);
nameNode.getFirstChild().getNext().getNext().addChildToFront(IR.exprResult(node));
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887593109
GPR[SPVAP]-1659887593109
GPR[EPVAP]-1659887594980
GPR[EPVS]-1659887594980
========
if(!name.equals(newName)){
cur.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887594982
GPR[SPVAP]-1659887594982
GPR[EPVAP]-1659887596814
GPR[EPVS]-1659887596814
========
if(!name.equals(newName)){
node.getParent().replaceChild(n,node);
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887596815
GPR[SPVAP]-1659887596815
GPR[EPVAP]-1659887598696
GPR[EPVS]-1659887598696
========
if(!name.equals(newName)){
node.getParent().replaceChild(n,node);
reportCodeChange();

nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887598697
GPR[SPVAP]-1659887598697
GPR[EPVAP]-1659887600957
GPR[EPVS]-1659887600957
========
if(!name.getString().equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887600959
GPR[SPVAP]-1659887600959
GPR[EPVAP]-1659887602800
GPR[EPVS]-1659887602800
========
if(!name.equals(newName)){
nameNode.setString(newName);
declarations.reportCodeChange();
}

========
GPR[SPVS]-1659887602802
GPR[SPVAP]-1659887602802
GPR[EPVAP]-1659887604646
GPR[EPVS]-1659887604647
========
if(!name.equals(newName)){
nameNode.setString(newName);
properties.reportCodeChange();
}

========
GPR[SPVS]-1659887604648
GPR[SPVAP]-1659887604648
GPR[EPVAP]-1659887606559
GPR[EPVS]-1659887606559
========
if(!name.equals(newName)){
nameNode.setString(newName);
stringNodesToRename.reportCodeChange();
}

========
GPR[SPVS]-1659887606560
GPR[SPVAP]-1659887606560
GPR[EPVAP]-1659887608503
GPR[EPVS]-1659887608503
========
if(!name.equals(newName)){
nameNode.setString(newName);
vars.reportCodeChange();
}

========
GPR[SPVS]-1659887608505
GPR[SPVAP]-1659887608505
GPR[EPVAP]-1659887610717
GPR[EPVS]-1659887610717
========
if(!name.equals(newName)){
nameNode.setString(newName);
parser.reportCodeChange();
}

========
GPR[SPVS]-1659887610720
GPR[SPVAP]-1659887610720
GPR[EPVAP]-1659887612562
GPR[EPVS]-1659887612562
========
if(!name.equals(newName)){
nameNode.setString(newName);
msgBuilder.reportCodeChange();
}

========
GPR[SPVS]-1659887612563
GPR[SPVAP]-1659887612563
GPR[EPVAP]-1659887614468
GPR[EPVS]-1659887614468
========
if(!name.equals(newName)){
nameNode.setString(newName);
logger.reportCodeChange();
}

========
GPR[SPVS]-1659887614470
GPR[SPVAP]-1659887614470
GPR[EPVAP]-1659887616275
GPR[EPVS]-1659887616275
========
if(!name.equals(newName)){
inlineEmptyMethod(node,nameNode);
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887616275
GPR[SPVAP]-1659887616275
GPR[EPVAP]-1659887618311
GPR[EPVS]-1659887618311
========
if(!name.equals(newName)){
if(compiler.contains(newName)){
return ;
}
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887618313
GPR[SPVAP]-1659887618313
GPR[EPVAP]-1659887620105
GPR[EPVS]-1659887620105
========
if(!name.equals(newName)){
nameNode.setString(newName);
nameNode.addChildrenToFront(IR.exprResult(IR.call(IR.name(name),IR.string(newName))));
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887620107
GPR[SPVAP]-1659887620107
GPR[EPVAP]-1659887622164
GPR[EPVS]-1659887622164
========
if(!name.equals(newName)){
if(removeUnused){
throw new IllegalStateException("Unexpected variable "+newName);
}else {
createSynthesizedExternVar(newName);
}
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887622165
GPR[SPVAP]-1659887622165
GPR[EPVAP]-1659887624072
GPR[EPVS]-1659887624072
========
if(!name.equals(newName)){
nameNode.setString(newName);
errors.reportCodeChange();
}

========
GPR[SPVS]-1659887624074
GPR[SPVAP]-1659887624074
GPR[EPVAP]-1659887626066
GPR[EPVS]-1659887626066
========
if(!name.equals(newName)){
nameNode.setString(newName);
err.reportCodeChange();
}

========
GPR[SPVS]-1659887626068
GPR[SPVAP]-1659887626068
GPR[EPVAP]-1659887627892
GPR[EPVS]-1659887627892
========
if(!name.equals(newName)){
isConfigValid=false;
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887627893
GPR[SPVAP]-1659887627893
GPR[EPVAP]-1659887629720
GPR[EPVS]-1659887629720
========
if(!name.equals(ARGUMENT_ARRAY_ALIAS)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887629722
GPR[SPVAP]-1659887629722
GPR[EPVAP]-1659887631523
GPR[EPVS]-1659887631523
========
if(!name.equals(newName)){
inlineConstReturn(node,nameNode,newName);
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887631525
GPR[SPVAP]-1659887631525
GPR[EPVAP]-1659887633347
GPR[EPVS]-1659887633347
========
if(!name.equals(newName)){
nameNode.setString(newName);
if(isValidPrivateConstructorAccess(node)){
return ;
}
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887633348
GPR[SPVAP]-1659887633348
GPR[EPVAP]-1659887635255
GPR[EPVS]-1659887635255
========
if(!name.equals(newName)){
nameNode.setString(newName);
globals.reportCodeChange();
}

========
GPR[SPVS]-1659887635258
GPR[SPVAP]-1659887635258
GPR[EPVAP]-1659887637104
GPR[EPVS]-1659887637104
========
if(!name.equals(newName)){
nameNode.setString(newName);
set.reportCodeChange();
}

========
GPR[SPVS]-1659887637106
GPR[SPVAP]-1659887637106
GPR[EPVAP]-1659887639024
GPR[EPVS]-1659887639024
========
Preconditions.checkState(nameNode.isName());
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887639025
GPR[SPVAP]-1659887639025
GPR[EPVAP]-1659887642899
GPR[SPVATF]-1659887642899
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887646937
GPR[EPVS]-1659887646937
========
if(!name.equals(newName)){
nameNode.setString(newName);
symbols.reportCodeChange();
}

========
GPR[SPVS]-1659887646940
GPR[SPVAP]-1659887646940
GPR[EPVAP]-1659887648869
GPR[EPVS]-1659887648869
========
Preconditions.checkNotNull(newName);
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887648870
GPR[SPVAP]-1659887648870
GPR[EPVAP]-1659887652757
GPR[SPVATF]-1659887652757
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887656313
GPR[EPVS]-1659887656313
========
if(!name.equals(newName)){
node.addChildAfter(bind.thisValue.cloneTree(),newName);
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887656315
GPR[SPVAP]-1659887656315
GPR[EPVAP]-1659887658348
GPR[EPVS]-1659887658348
========
if(!name.equals(newName)){
node.putBooleanProp(Node.FREE_CALL,false);
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887658349
GPR[SPVAP]-1659887658349
GPR[EPVAP]-1659887662407
GPR[SPVATF]-1659887662407
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887665968
GPR[EPVS]-1659887665968
========
if(!name.equals(newName)){
node.addChildAfter(bind.thisValue.cloneTree(),newName);
node.putBooleanProp(Node.FREE_CALL,false);

nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887665969
GPR[SPVAP]-1659887665969
GPR[EPVAP]-1659887667843
GPR[EPVS]-1659887667843
========
reportCodeChange();
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887667844
GPR[SPVAP]-1659887667844
GPR[EPVAP]-1659887669681
GPR[EPVS]-1659887669681
========
if(!name.equals(newName)){
node.putBooleanProp(Node.FREE_CALL,false);
n.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887669683
GPR[SPVAP]-1659887669683
GPR[EPVAP]-1659887671502
GPR[EPVS]-1659887671502
========
if(!name.equals(newName)){
nameNode.setString(newName);
renamer.reportCodeChange();
}

========
GPR[SPVS]-1659887671503
GPR[SPVAP]-1659887671503
GPR[EPVAP]-1659887673430
GPR[EPVS]-1659887673430
========
if(!name.equals(newName)){
nameNode.setString(newName);
mappingsBuilder.reportCodeChange();
}

========
GPR[SPVS]-1659887673433
GPR[SPVAP]-1659887673433
GPR[EPVAP]-1659887676360
GPR[EPVS]-1659887676360
========
if(!name.equals(newName)){
startLine=id;
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887676361
GPR[SPVAP]-1659887676361
GPR[EPVAP]-1659887678219
GPR[EPVS]-1659887678219
========
if(!name.equals(newName)){
lastLine=id;
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887678220
GPR[SPVAP]-1659887678220
GPR[EPVAP]-1659887680210
GPR[EPVS]-1659887680210
========
if(!name.equals(newName)){
startMapId=id;
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887680211
GPR[SPVAP]-1659887680211
GPR[EPVAP]-1659887682223
GPR[EPVS]-1659887682223
========
if(!name.equals(newName)){
names.clear();
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887682224
GPR[SPVAP]-1659887682224
GPR[EPVAP]-1659887686136
GPR[SPVATF]-1659887686136
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887689713
GPR[EPVS]-1659887689713
========
if(!name.equals(newName)){
startLine=id;
lastLine=id;
startMapId=id;
names.clear();

nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887689714
GPR[SPVAP]-1659887689714
GPR[EPVAP]-1659887691712
GPR[EPVS]-1659887691712
========
if(!name.equals(newName)){
nameNode.setString(newName);
use.reportCodeChange();
}

========
GPR[SPVS]-1659887691714
GPR[SPVAP]-1659887691714
GPR[EPVAP]-1659887693808
GPR[EPVS]-1659887693808
========
if(!name.equals(newName)){
nameNode.setString(newName);
mayUseMap.reportCodeChange();
}

========
GPR[SPVS]-1659887693809
GPR[SPVAP]-1659887693809
GPR[EPVAP]-1659887695713
GPR[EPVS]-1659887695713
========
if(!name.equals(newName)){
nameNode.setString(newName);
sb.reportCodeChange();
}

========
GPR[SPVS]-1659887695714
GPR[SPVAP]-1659887695714
GPR[EPVAP]-1659887697531
GPR[EPVS]-1659887697531
========
if(!name.equals(newName)){
nameNode.setString(newName);
forbiddenLocals.reportCodeChange();
}

========
GPR[SPVS]-1659887697533
GPR[SPVAP]-1659887697533
GPR[EPVAP]-1659887699435
GPR[EPVS]-1659887699435
========
if(!name.equals(newName)){
globalRegExpPropertiesUsed=true;
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887699437
GPR[SPVAP]-1659887699437
GPR[EPVAP]-1659887701255
GPR[EPVS]-1659887701255
========
if(!name.equals(newName)){
nameNode.setString(newName);
candidate.reportCodeChange();
}

========
GPR[SPVS]-1659887701257
GPR[SPVAP]-1659887701257
GPR[EPVAP]-1659887703110
GPR[EPVS]-1659887703110
========
if(!name.equals(newName)){
nameNode.setString(newName);
refInfo.reportCodeChange();
}

========
GPR[SPVS]-1659887703111
GPR[SPVAP]-1659887703111
GPR[EPVAP]-1659887704986
GPR[EPVS]-1659887704986
========
if(!name.equals(newName)){
Preconditions.checkNotNull(newName);
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887704987
GPR[SPVAP]-1659887704987
GPR[EPVAP]-1659887708884
GPR[SPVATF]-1659887708885
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887712871
GPR[EPVS]-1659887712871
========
if(!name.equals(newName)){
n.setString(name);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659887712873
GPR[SPVAP]-1659887712873
GPR[EPVAP]-1659887714725
GPR[EPVS]-1659887714725
========
if(li!=null&&p.newName!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887717126
GPR[SPVAP]-1659887717126
GPR[EPVAP]-1659887718929
GPR[EPVS]-1659887718929
========
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
n.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887718930
GPR[SPVAP]-1659887718930
GPR[EPVAP]-1659887720809
GPR[EPVS]-1659887720809
========
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(p.newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887720811
GPR[SPVAP]-1659887720811
GPR[EPVAP]-1659887722664
GPR[EPVS]-1659887722664
========
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
Preconditions.checkState(newName.equals(p.oldName));
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887722665
GPR[SPVAP]-1659887722665
GPR[EPVAP]-1659887724513
GPR[EPVS]-1659887724513
========
if(li!=null&&a.newName!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887724514
GPR[SPVAP]-1659887724514
GPR[EPVAP]-1659887726302
GPR[EPVS]-1659887726302
========
if(li==null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887726308
GPR[SPVAP]-1659887726308
GPR[EPVAP]-1659887730204
GPR[SPVATF]-1659887730204
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887734151
GPR[EPVS]-1659887734151
========
nameNode.detachChildren();
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887734153
GPR[SPVAP]-1659887734153
GPR[EPVAP]-1659887738257
GPR[SPVATF]-1659887738257
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887741841
GPR[EPVS]-1659887741841
========
reportCodeChange();
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887741842
GPR[SPVAP]-1659887741842
GPR[EPVAP]-1659887743872
GPR[EPVS]-1659887743872
========
if(li!=null||name.isOn()){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887743875
GPR[SPVAP]-1659887743875
GPR[EPVAP]-1659887745924
GPR[EPVS]-1659887745924
========
if(li!=null&&nameNode.getString().equals(relationship.subclassName)){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887745927
GPR[SPVAP]-1659887745927
GPR[EPVAP]-1659887747756
GPR[EPVS]-1659887747756
========
if(nameNode!=null){
explicitNode.detachFromParent();
}
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887747759
GPR[SPVAP]-1659887747759
GPR[EPVAP]-1659887749807
GPR[EPVS]-1659887749807
========
compiler.reportCodeChange();
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887749808
GPR[SPVAP]-1659887749808
GPR[EPVAP]-1659887753581
GPR[SPVATF]-1659887753581
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887757213
GPR[EPVS]-1659887757213
========
compiler.reportCodeChange();
if(li==null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887757215
GPR[SPVAP]-1659887757215
GPR[EPVAP]-1659887761067
GPR[SPVATF]-1659887761067
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887765070
GPR[EPVS]-1659887765070
========
if(li!=null){
compiler.setProgress(referenced,newName);
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887765073
GPR[SPVAP]-1659887765073
GPR[EPVAP]-1659887766896
GPR[EPVS]-1659887766896
========
maybePrintAstHashcodes(newName,node);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887766897
GPR[SPVAP]-1659887766897
GPR[EPVAP]-1659887768731
GPR[EPVS]-1659887768731
========
maybeSanityCheck(node,node);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887768732
GPR[SPVAP]-1659887768732
GPR[EPVAP]-1659887770670
GPR[EPVS]-1659887770670
========
if(li!=null){
String newName=getSimplifiedName(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887770679
GPR[SPVAP]-1659887770679
GPR[EPVAP]-1659887772618
GPR[EPVS]-1659887772618
========
if(li!=null){
if(newName!=null){
this.name.remove(newName,node);
}
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887772619
GPR[SPVAP]-1659887772619
GPR[EPVAP]-1659887774621
GPR[EPVS]-1659887774621
========
if(!name.contains(newName)){
use.mayUseMap.removeAll(var);
}
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887774624
GPR[SPVAP]-1659887774624
GPR[EPVAP]-1659887776431
GPR[EPVS]-1659887776431
========
if(li!=v.scope){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887776432
GPR[SPVAP]-1659887776432
GPR[EPVAP]-1659887778234
GPR[EPVS]-1659887778234
========
if(li!=Token.NAME){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887778237
GPR[SPVAP]-1659887778237
GPR[EPVAP]-1659887780089
GPR[EPVS]-1659887780089
========
if(!name.contains(newName)){
use.mayUseMap.put(var,node);
}
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887780090
GPR[SPVAP]-1659887780090
GPR[EPVAP]-1659887782097
GPR[EPVS]-1659887782097
========
if(li!=null){
p.getDeclaration().node=nameNode;
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887782100
GPR[SPVAP]-1659887782100
GPR[EPVAP]-1659887784016
GPR[EPVS]-1659887784016
========
if(newName.length()==0){
return ;
}
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887784019
GPR[SPVAP]-1659887784019
GPR[EPVAP]-1659887786006
GPR[EPVS]-1659887786006
========
if(li!=null){
String newName=getNameForId(li.id);
nameInfo.name=classes.subclassName;
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887786008
GPR[SPVAP]-1659887786008
GPR[EPVAP]-1659887788004
GPR[EPVS]-1659887788004
========
if(li!=null){
String newName=getNameForId(li.id);
nameInfo.onlyAffectsClassDef=true;
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887788005
GPR[SPVAP]-1659887788005
GPR[EPVAP]-1659887789872
GPR[EPVS]-1659887789872
========
if(li!=null){
String newName=getNameForId(li.id);
nameInfo.name=classes.subclassName;
nameInfo.onlyAffectsClassDef=true;

li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887789874
GPR[SPVAP]-1659887789874
GPR[EPVAP]-1659887791705
GPR[EPVS]-1659887791705
========
if(newName!=null&&!newName.isEmpty()&&li!=null&&!NodeUtil.isFunctionDeclaration(nameNode)){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887791709
GPR[SPVAP]-1659887791709
GPR[EPVAP]-1659887793490
GPR[EPVS]-1659887793491
========
case Token.PARAM_LIST :

if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887793492
GPR[SPVAP]-1659887793492
GPR[EPVAP]-1659887795500
GPR[EPVS]-1659887795500
========
Preconditions.checkState(nameNode!=null);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887795502
GPR[SPVAP]-1659887795502
GPR[EPVAP]-1659887799396
GPR[SPVATF]-1659887799396
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887803437
GPR[EPVS]-1659887803437
========
IR.exprResult(IR.assign(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),newName,nameNode,namespace),createNamespaceLiteral())).putBooleanProp(Node.IS_NAMESPACE,true);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887803440
GPR[SPVAP]-1659887803440
GPR[EPVAP]-1659887805309
GPR[EPVS]-1659887805309
========
Preconditions.checkState(isNamespacePlaceholder(IR.exprResult(IR.assign(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),newName,nameNode,namespace),createNamespaceLiteral()))));
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887805310
GPR[SPVAP]-1659887805310
GPR[EPVAP]-1659887807234
GPR[EPVS]-1659887807234
========
setSourceInfo(IR.exprResult(IR.assign(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),newName,nameNode,namespace),createNamespaceLiteral())));
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887807235
GPR[SPVAP]-1659887807235
GPR[EPVAP]-1659887809195
GPR[EPVS]-1659887809195
========
if(li!=Token.GETTER_DEF){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887809198
GPR[SPVAP]-1659887809198
GPR[EPVAP]-1659887811189
GPR[EPVS]-1659887811189
========
if(context.scope!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887811192
GPR[SPVAP]-1659887811192
GPR[EPVAP]-1659887813113
GPR[EPVS]-1659887813113
========
case Token.POS :

if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887813115
GPR[SPVAP]-1659887813115
GPR[EPVAP]-1659887814746
GPR[EPVS]-1659887814747
========
if(li!=RenameStrategy.INCONSISTENT){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659887814749
GPR[SPVAP]-1659887814749
GPR[EPVAP]-1659887816592
GPR[EPVS]-1659887816592
========
{
Node nameNode=candidateDefinition.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887821289
GPR[SPVAP]-1659887821289
GPR[EPVAP]-1659887823117
GPR[EPVS]-1659887823117
========
{
Node nameNode=assignNode.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887823119
GPR[SPVAP]-1659887823119
GPR[EPVAP]-1659887824928
GPR[EPVS]-1659887824928
========
{
Node nameNode=nameNode.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887824929
GPR[SPVAP]-1659887824929
GPR[EPVAP]-1659887826768
GPR[EPVS]-1659887826768
========
{
node.detachFromParent();
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887826769
GPR[SPVAP]-1659887826769
GPR[EPVAP]-1659887828612
GPR[EPVS]-1659887828612
========
{
compiler.reportCodeChange();
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887828614
GPR[SPVAP]-1659887828614
GPR[EPVAP]-1659887830472
GPR[EPVS]-1659887830472
========
{
node.detachFromParent();
compiler.reportCodeChange();

Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887830473
GPR[SPVAP]-1659887830473
GPR[EPVAP]-1659887832282
GPR[EPVS]-1659887832282
========
{
Node nameNode=constructorNameNode.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887832286
GPR[SPVAP]-1659887832286
GPR[EPVAP]-1659887834203
GPR[EPVS]-1659887834203
========
{
Node nameNode=node.getFirstChild();
if(nameNode==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887834206
GPR[SPVAP]-1659887834206
GPR[EPVAP]-1659887836156
GPR[EPVS]-1659887836156
========
{
Node nameNode=node.getFirstChild();
if(parent!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887836157
GPR[SPVAP]-1659887836157
GPR[EPVAP]-1659887838020
GPR[EPVS]-1659887838020
========
{
Node nameNode=node.getFirstChild();
Preconditions.checkState(!newName.isExtern());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887838021
GPR[SPVAP]-1659887838021
GPR[EPVAP]-1659887839962
GPR[EPVS]-1659887839962
========
{
swtich (nameNode.getType()){
case Token.ADD :
break;

case Token.FUNCTION :
break;

case Token.CALL :
break;

}
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887839966
GPR[SPVAP]-1659887839966
GPR[EPVAP]-1659887841621
GPR[EPVS]-1659887841621
========
{
Node nameNode=functionBody.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887841630
GPR[SPVAP]-1659887841630
GPR[EPVAP]-1659887843462
GPR[EPVS]-1659887843462
========
{
Preconditions.checkState(node.getParent().isFunction());
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887843463
GPR[SPVAP]-1659887843463
GPR[EPVAP]-1659887845512
GPR[EPVS]-1659887845512
========
{
Node nameNode=n.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887845514
GPR[SPVAP]-1659887845514
GPR[EPVAP]-1659887847331
GPR[EPVS]-1659887847331
========
{
Preconditions.checkArgument(node.isGetProp());
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887847335
GPR[SPVAP]-1659887847335
GPR[EPVAP]-1659887849178
GPR[EPVS]-1659887849178
========
{
instanceType=li!=null?li:getType(node.getFirstChild());
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887849179
GPR[SPVAP]-1659887849179
GPR[EPVAP]-1659887850996
GPR[EPVS]-1659887850996
========
{
Preconditions.checkState(getType(node.getFirstChild()).toObjectType()!=null);
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887850997
GPR[SPVAP]-1659887850997
GPR[EPVAP]-1659887852871
GPR[EPVS]-1659887852871
========
{
if(!removeUnused){
Reference new Reference(node,node)=new Reference(node,node);
FunctionType getType(node.getFirstChild()).toObjectType().getConstructor()=getType(node.getFirstChild()).toObjectType().getConstructor();
if(getType(node.getFirstChild()).toObjectType().getConstructor()!=null){
String newName=node.getLastChild().getString();
if(!getType(node.getFirstChild()).toObjectType().getConstructor().getPrototype().hasOwnProperty(newName)){
recordSuperClassPrototypePropUse(getType(node.getFirstChild()).toObjectType().getConstructor(),newName,new Reference(node,node));
}
recordSubclassPrototypePropUse(getType(node.getFirstChild()).toObjectType().getConstructor(),newName,new Reference(node,node));
}else {
recordUnknownUse(node,node);
}
}
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887852872
GPR[SPVAP]-1659887852872
GPR[EPVAP]-1659887854604
GPR[EPVS]-1659887854604
========
{
Preconditions.checkArgument(node.isGetProp());
instanceType=li!=null?li:getType(node.getFirstChild());
Preconditions.checkState(getType(node.getFirstChild()).toObjectType()!=null);
if(!removeUnused){
Reference new Reference(node,node)=new Reference(node,node);
FunctionType getType(node.getFirstChild()).toObjectType().getConstructor()=getType(node.getFirstChild()).toObjectType().getConstructor();
if(getType(node.getFirstChild()).toObjectType().getConstructor()!=null){
String newName=node.getLastChild().getString();
if(!getType(node.getFirstChild()).toObjectType().getConstructor().getPrototype().hasOwnProperty(newName)){
recordSuperClassPrototypePropUse(getType(node.getFirstChild()).toObjectType().getConstructor(),newName,new Reference(node,node));
}
recordSubclassPrototypePropUse(getType(node.getFirstChild()).toObjectType().getConstructor(),newName,new Reference(node,node));
}else {
recordUnknownUse(node,node);
}
}

Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887854605
GPR[SPVAP]-1659887854605
GPR[EPVAP]-1659887856564
GPR[EPVS]-1659887856564
========
{
Node nameNode=node.getFirstChild();
if(nameNode!=nameNode.getNext()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887856566
GPR[SPVAP]-1659887856566
GPR[EPVAP]-1659887858451
GPR[EPVS]-1659887858451
========
{
Node nameNode=node.getFirstChild();
if(nameNode.getNext()!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887858452
GPR[SPVAP]-1659887858452
GPR[EPVAP]-1659887860447
GPR[EPVS]-1659887860447
========
{
Node nameNode=node.getFirstChild();
if(cur!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887860448
GPR[SPVAP]-1659887860448
GPR[EPVAP]-1659887862439
GPR[EPVS]-1659887862439
========
{
Node nameNode=node.getFirstChild();
if(next!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887862440
GPR[SPVAP]-1659887862440
GPR[EPVAP]-1659887864243
GPR[EPVS]-1659887864243
========
{
if(!NodeUtil.isStatementBlock(node)){
return node;
}
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887864244
GPR[SPVAP]-1659887864244
GPR[EPVAP]-1659887866058
GPR[EPVS]-1659887866058
========
{
Node nameNode=ancestor.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887866060
GPR[SPVAP]-1659887866060
GPR[EPVAP]-1659887867942
GPR[EPVS]-1659887867942
========
{
Node nameNode=node.getFirstChild();
if(tracker!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887867944
GPR[SPVAP]-1659887867944
GPR[EPVAP]-1659887869967
GPR[EPVS]-1659887869967
========
{
tracer=new Tracer("JSCompiler");
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887869969
GPR[SPVAP]-1659887869969
GPR[EPVAP]-1659887871755
GPR[EPVS]-1659887871755
========
{
try{
maybeSanityCheck(newName,node);
}catch (IllegalStateException e) {
  throw new RuntimeException("Sanity check failed for " + name,e);
}

Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887871756
GPR[SPVAP]-1659887871756
GPR[EPVAP]-1659887873748
GPR[EPVS]-1659887873748
========
{
tracer=new Tracer("JSCompiler");
try{
maybeSanityCheck(newName,node);
}catch (IllegalStateException e) {
  throw new RuntimeException("Sanity check failed for " + name,e);
}


Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887873749
GPR[SPVAP]-1659887873749
GPR[EPVAP]-1659887875559
GPR[EPVS]-1659887875559
========
{
if(!NodeUtil.isStatementBlock(name)){
return ;
}
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887875561
GPR[SPVAP]-1659887875561
GPR[EPVAP]-1659887877499
GPR[EPVS]-1659887877499
========
{
Preconditions.checkNotNull(nameNode);
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887877500
GPR[SPVAP]-1659887877500
GPR[EPVAP]-1659887879318
GPR[EPVS]-1659887879318
========
{
Preconditions.checkNotNull(nameNode.getNext());
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887879319
GPR[SPVAP]-1659887879319
GPR[EPVAP]-1659887881288
GPR[EPVS]-1659887881288
========
{
if(!NodeUtil.isStatementBlock(name)){
return ;
}
Preconditions.checkNotNull(nameNode);
Preconditions.checkNotNull(nameNode.getNext());

Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887881289
GPR[SPVAP]-1659887881289
GPR[EPVAP]-1659887883112
GPR[EPVS]-1659887883112
========
{
Node nameNode=nameNode.getFirstChild().getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887883114
GPR[SPVAP]-1659887883114
GPR[EPVAP]-1659887885411
GPR[EPVS]-1659887885411
========
{
NodeUtil.redeclareVarsInsideBranch(removeUnused?nameNode.getFirstChild().getNext().getNext():nameNode.getFirstChild().getNext());
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887885415
GPR[SPVAP]-1659887885415
GPR[EPVAP]-1659887887383
GPR[EPVS]-1659887887383
========
{
nameNode.removeChild(newName);
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887887384
GPR[SPVAP]-1659887887384
GPR[EPVAP]-1659887889341
GPR[EPVS]-1659887889341
========
{
node.replaceChild(nameNode,newName);
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887889342
GPR[SPVAP]-1659887889342
GPR[EPVAP]-1659887891198
GPR[EPVS]-1659887891198
========
{
reportCodeChange();
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887891199
GPR[SPVAP]-1659887891199
GPR[EPVAP]-1659887893051
GPR[EPVS]-1659887893051
========
{
NodeUtil.redeclareVarsInsideBranch(removeUnused?nameNode.getFirstChild().getNext().getNext():nameNode.getFirstChild().getNext());
nameNode.removeChild(newName);
node.replaceChild(nameNode,newName);
reportCodeChange();

Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887893052
GPR[SPVAP]-1659887893052
GPR[EPVAP]-1659887895016
GPR[EPVS]-1659887895016
========
{
Node nameNode=parameterTypes.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887895022
GPR[SPVAP]-1659887895022
GPR[EPVAP]-1659887896829
GPR[EPVS]-1659887896829
========
{
Node nameNode=node.getFirstChild();
if(parameterTypeNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887896830
GPR[SPVAP]-1659887896830
GPR[EPVAP]-1659887898632
GPR[EPVS]-1659887898632
========
{
Node nameNode=parameters.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887898633
GPR[SPVAP]-1659887898633
GPR[EPVAP]-1659887900432
GPR[EPVS]-1659887900432
========
{
Node nameNode=node.getFirstChild();
if(thisParam!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887900433
GPR[SPVAP]-1659887900433
GPR[EPVAP]-1659887902276
GPR[EPVS]-1659887902276
========
{
Node nameNode=maybeIf.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887902285
GPR[SPVAP]-1659887902285
GPR[EPVAP]-1659887904131
GPR[EPVS]-1659887904131
========
{
Node nameNode=node.getFirstChild();
if(nameNode!=null&&nameNode.isBreak()&&!nameNode.hasChildren()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887904133
GPR[SPVAP]-1659887904133
GPR[EPVAP]-1659887906010
GPR[EPVS]-1659887906010
========
{
Node nameNode=node.getFirstChild();
if(maybeBreak!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887906011
GPR[SPVAP]-1659887906011
GPR[EPVAP]-1659887907910
GPR[EPVS]-1659887907910
========
{
if(newName!=null){
symbol=addSymbol(GLOBAL_THIS,compiler.getNativeType(JSTypeNative.GLOBAL_THIS),false,id,newName);
name.setDeclaration(new Reference(symbol,newName));
}
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887907913
GPR[SPVAP]-1659887907913
GPR[EPVAP]-1659887909882
GPR[EPVS]-1659887909882
========
{
Node nameNode=node.getFirstChild();
if(node.isBlock()&&nameNode!=null&&nameNode.isTry()&&NodeUtil.getCatchBlock(nameNode)==node&&!NodeUtil.hasCatchHandler(node)){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887909885
GPR[SPVAP]-1659887909885
GPR[EPVAP]-1659887911717
GPR[EPVS]-1659887911717
========
{
Node nameNode=node.getFirstChild();
if(node!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887911719
GPR[SPVAP]-1659887911719
GPR[EPVAP]-1659887913621
GPR[EPVS]-1659887913621
========
{
if(node.getFirstChild()!=null){
createEdge(node,Branch.UNCOND,computeFallThrough(node.getFirstChild()));
}else {
createEdge(node,Branch.UNCOND,computeFollowNode(node,this));
}
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887913622
GPR[SPVAP]-1659887913622
GPR[EPVAP]-1659887915437
GPR[EPVS]-1659887915437
========
{
if(nameNode!=null){
swtich (nameNode.getType()){
case Token.TRY :
break;

default :
if(node.isBlock()&&node.isSyntheticBlock()){
createEdge(node,Branch.SYN_BLOCK,computeFollowNode(node,this));
}
break;

}
}
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887915438
GPR[SPVAP]-1659887915438
GPR[EPVAP]-1659887917090
GPR[EPVS]-1659887917090
========
{
if(node.getFirstChild()!=null){
createEdge(node,Branch.UNCOND,computeFallThrough(node.getFirstChild()));
}else {
createEdge(node,Branch.UNCOND,computeFollowNode(node,this));
}
if(nameNode!=null){
swtich (nameNode.getType()){
case Token.TRY :
break;

default :
if(node.isBlock()&&node.isSyntheticBlock()){
createEdge(node,Branch.SYN_BLOCK,computeFollowNode(node,this));
}
break;

}
}

Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887917091
GPR[SPVAP]-1659887917091
GPR[EPVAP]-1659887918918
GPR[EPVS]-1659887918918
========
{
Node nameNode=parent.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887918920
GPR[SPVAP]-1659887918920
GPR[EPVAP]-1659887920836
GPR[EPVS]-1659887920836
========
{
node.addChildToFront(newName);
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887920837
GPR[SPVAP]-1659887920837
GPR[EPVAP]-1659887922636
GPR[EPVS]-1659887922636
========
{
Node nameNode=hook.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887922645
GPR[SPVAP]-1659887922645
GPR[EPVAP]-1659887924460
GPR[EPVS]-1659887924460
========
{
Preconditions.checkArgument(node.isHook(),"Expected: HOOK, Got: %s",Token.name(hook.getType()));
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887924461
GPR[SPVAP]-1659887924461
GPR[EPVAP]-1659887926386
GPR[EPVS]-1659887926386
========
{
Node nameNode=node.getFirstChild();
if(!getJSType(newName).restrictByNotNullOrUndefined().canBeCalled()){
return ;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659887926390
GPR[SPVAP]-1659887926390
GPR[EPVAP]-1659887928252
GPR[EPVS]-1659887928252
GPR[ESUN]-1659887928257
GPR[SSUN]-1659887928257
com.google.javascript.jscomp.RenameLabels,199
========
if(nameNode!=null&&nameNode.isName()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659887932180
GPR[SPVAP]-1659887932180
GPR[EPVAP]-1659887941170
GPR[SPVATF]-1659887941170
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887945087
GPR[EPVS]-1659887945087
========
if(nameNode!=null){
if(name.equals(NodeUtil.JSC_PROPERTY_NAME_FN)||name.equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)){
return false;
}
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659887945088
GPR[SPVAP]-1659887945088
GPR[EPVAP]-1659887946948
GPR[EPVS]-1659887946948
========
if(NodeUtil.isFunctionDeclaration(node)){
return true;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659887946950
GPR[SPVAP]-1659887946950
GPR[EPVAP]-1659887948804
GPR[EPVS]-1659887948804
========
if(node.getFirstChild().getString().isEmpty()&&(NodeUtil.isExprAssign(newName)||node.getParent().isName())){
return true;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659887948806
GPR[SPVAP]-1659887948806
GPR[EPVAP]-1659887950633
GPR[EPVS]-1659887950633
========
if(nameNode!=null){
nameNode.removeChild(nameNode);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659887950635
GPR[SPVAP]-1659887950635
GPR[EPVAP]-1659887954709
GPR[SPVATF]-1659887954709
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887958349
GPR[EPVS]-1659887958349
========
if(nameNode!=null){
compiler.reportCodeChange();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659887958350
GPR[SPVAP]-1659887958350
GPR[EPVAP]-1659887962762
GPR[SPVATF]-1659887962762
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887966671
GPR[EPVS]-1659887966671
========
if(nameNode!=null){
nameNode.removeChild(nameNode);
compiler.reportCodeChange();

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659887966672
GPR[SPVAP]-1659887966672
GPR[EPVAP]-1659887970842
GPR[SPVATF]-1659887970842
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887974913
GPR[EPVS]-1659887974913
========
if(nameNode!=null){
nameNode.removeChild(nameNode);
compiler.reportCodeChange();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659887974914
GPR[SPVAP]-1659887974914
GPR[EPVAP]-1659887978749
GPR[SPVATF]-1659887978749
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887982745
GPR[EPVS]-1659887982745
========
if(nameNode!=null){
nameNode.removeChild(nameNode);
nameNode.removeChild(nameNode);
compiler.reportCodeChange();

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659887982746
GPR[SPVAP]-1659887982746
GPR[EPVAP]-1659887986734
GPR[SPVATF]-1659887986734
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887990826
GPR[EPVS]-1659887990826
========
if(nameNode!=null){
compiler.reportCodeChange();
nameNode.removeChild(nameNode);
compiler.reportCodeChange();

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659887990827
GPR[SPVAP]-1659887990827
GPR[EPVAP]-1659887994673
GPR[SPVATF]-1659887994673
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659887998397
GPR[EPVS]-1659887998397
========
if(nameNode!=null){
nameNode.removeChild(nameNode);
compiler.reportCodeChange();
nameNode.removeChild(nameNode);
compiler.reportCodeChange();

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659887998398
GPR[SPVAP]-1659887998398
GPR[EPVAP]-1659888002372
GPR[SPVATF]-1659888002372
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888006028
GPR[EPVS]-1659888006028
========
if((nameNode!=null)&&(nameNode.isVar())){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888006029
GPR[SPVAP]-1659888006029
GPR[EPVAP]-1659888009812
GPR[SPVATF]-1659888009812
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888013662
GPR[EPVS]-1659888013662
========
if(sibling!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888013662
GPR[SPVAP]-1659888013662
GPR[EPVAP]-1659888015683
GPR[EPVS]-1659888015683
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.setDesc(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888015684
GPR[SPVAP]-1659888015684
GPR[EPVAP]-1659888017923
GPR[EPVS]-1659888017923
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.setIsHidden(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888017924
GPR[SPVAP]-1659888017924
GPR[EPVAP]-1659888019741
GPR[EPVS]-1659888019741
========
if(nameNode!=null){
node.replaceChild(newName,IR.getprop(IR.name(WINDOW),IR.string(name)).srcrefTree(n));
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888019743
GPR[SPVAP]-1659888019743
GPR[EPVAP]-1659888021623
GPR[EPVS]-1659888021623
========
if(nameNode!=null&&nameNode.isName()&&nameNode.getString().equals(var.name)&&node.isAssign()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888021625
GPR[SPVAP]-1659888021625
GPR[EPVAP]-1659888023476
GPR[EPVS]-1659888023476
========
if(rhs!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888023477
GPR[SPVAP]-1659888023477
GPR[EPVAP]-1659888025325
GPR[EPVS]-1659888025325
========
if(nameNode!=null){
String name=nameNode.getString();
node.removeChild(nameNode);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888025326
GPR[SPVAP]-1659888025326
GPR[EPVAP]-1659888029277
GPR[SPVATF]-1659888029277
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888033117
GPR[EPVS]-1659888033117
========
if(nameNode!=null){
String name=nameNode.getString();
node.getParent().replaceChild(n,nameNode);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888033119
GPR[SPVAP]-1659888033119
GPR[EPVAP]-1659888034932
GPR[EPVS]-1659888034932
========
if(nameNode!=null){
String name=nameNode.getString();
node.removeChild(nameNode);
node.getParent().replaceChild(n,nameNode);

Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888034933
GPR[SPVAP]-1659888034933
GPR[EPVAP]-1659888036784
GPR[EPVS]-1659888036784
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.substring(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888036786
GPR[SPVAP]-1659888036786
GPR[EPVAP]-1659888038632
GPR[EPVS]-1659888038632
========
if(target!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888038634
GPR[SPVAP]-1659888038634
GPR[EPVAP]-1659888040510
GPR[EPVS]-1659888040510
========
Preconditions.checkState(node.isName());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888040512
GPR[SPVAP]-1659888040512
GPR[EPVAP]-1659888044440
GPR[SPVATF]-1659888044440
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888048140
GPR[EPVS]-1659888048140
========
if(isCandidateUsage(node)){
return ;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888048142
GPR[SPVAP]-1659888048142
GPR[EPVAP]-1659888050024
GPR[EPVS]-1659888050024
========
if(compiler.get(name)==null){
return ;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888050025
GPR[SPVAP]-1659888050025
GPR[EPVAP]-1659888052007
GPR[EPVS]-1659888052007
========
if(node.isAssign()&&parent.getFirstChild()==node){
compiler.get(name).setInline(false);
}else {
fs.setRemove(false);
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888052008
GPR[SPVAP]-1659888052008
GPR[EPVAP]-1659888054040
GPR[EPVS]-1659888054040
========
if(nameNode==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888054042
GPR[SPVAP]-1659888054042
GPR[EPVAP]-1659888057953
GPR[SPVATF]-1659888057953
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888061611
GPR[EPVS]-1659888061611
========
if(param!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888061613
GPR[SPVAP]-1659888061613
GPR[EPVAP]-1659888063443
GPR[EPVS]-1659888063443
========
if(nameNode!=null){
keyString=nameNode.getString();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888063445
GPR[SPVAP]-1659888063445
GPR[EPVAP]-1659888065236
GPR[EPVS]-1659888065236
========
if(nameNode!=null){
param=nameNode.getNext();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888065237
GPR[SPVAP]-1659888065237
GPR[EPVAP]-1659888067120
GPR[EPVS]-1659888067120
========
if(nameNode!=null){
if(nameNode!=null){
Preconditions.checkState(nameNode.isName());
valueString=nameNode.getString();
}
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888067121
GPR[SPVAP]-1659888067121
GPR[EPVAP]-1659888069154
GPR[EPVS]-1659888069154
========
if(nameNode!=null){
keyString=nameNode.getString();
param=nameNode.getNext();
if(nameNode!=null){
Preconditions.checkState(nameNode.isName());
valueString=nameNode.getString();
}

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888069155
GPR[SPVAP]-1659888069155
GPR[EPVAP]-1659888071095
GPR[EPVS]-1659888071095
========
Preconditions.checkState(node.isFunction());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888071096
GPR[SPVAP]-1659888071096
GPR[EPVAP]-1659888075184
GPR[SPVATF]-1659888075184
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888078931
GPR[EPVS]-1659888078931
========
id--;
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888078932
GPR[SPVAP]-1659888078932
GPR[EPVAP]-1659888080736
GPR[EPVS]-1659888080736
========
Preconditions.checkState(id>=0,"Line number must be >= 0");
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888080738
GPR[SPVAP]-1659888080738
GPR[EPVAP]-1659888082630
GPR[EPVS]-1659888082630
========
Preconditions.checkState(id>=0,"Column index must be >= 0");
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888082631
GPR[SPVAP]-1659888082631
GPR[EPVAP]-1659888084661
GPR[EPVS]-1659888084661
========
if(nameNode!=null&&nameNode.isVar()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888084663
GPR[SPVAP]-1659888084663
GPR[EPVAP]-1659888088779
GPR[SPVATF]-1659888088779
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888093206
GPR[EPVS]-1659888093206
========
if(parent!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888093207
GPR[SPVAP]-1659888093207
GPR[EPVAP]-1659888095287
GPR[EPVS]-1659888095287
========
if(nameNode!=null){
String name=n.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888095289
GPR[SPVAP]-1659888095289
GPR[EPVAP]-1659888097308
GPR[EPVS]-1659888097308
========
if(name!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888097310
GPR[SPVAP]-1659888097310
GPR[EPVAP]-1659888099368
GPR[EPVS]-1659888099368
========
if(nameNode!=null){
String name=nameNode.getString();
node.removeChild(newName);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888099369
GPR[SPVAP]-1659888099369
GPR[EPVAP]-1659888101184
GPR[EPVS]-1659888101184
========
if(nameNode!=null){
String name=nameNode.getString();
node.replaceChild(node,newName);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888101185
GPR[SPVAP]-1659888101185
GPR[EPVAP]-1659888103004
GPR[EPVS]-1659888103004
========
if(nameNode!=null){
String name=nameNode.getString();
node.removeChild(newName);
node.replaceChild(node,newName);

Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888103006
GPR[SPVAP]-1659888103006
GPR[EPVAP]-1659888104943
GPR[EPVS]-1659888104943
========
if(nameNode!=null){
String name=removeUnused?null:nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888104946
GPR[SPVAP]-1659888104946
GPR[EPVAP]-1659888109031
GPR[SPVATF]-1659888109031
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888113108
GPR[EPVS]-1659888113108
========
if(right!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888113110
GPR[SPVAP]-1659888113110
GPR[EPVAP]-1659888114949
GPR[EPVS]-1659888114949
========
if(nameNode!=null){
Preconditions.checkState(-1!=-1);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888114950
GPR[SPVAP]-1659888114950
GPR[EPVAP]-1659888119086
GPR[SPVATF]-1659888119086
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888123094
GPR[EPVS]-1659888123094
========
if(nameNode!=null){
node.getParent().replaceChild(n,IR.number(-1));
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888123095
GPR[SPVAP]-1659888123095
GPR[EPVAP]-1659888124969
GPR[EPVS]-1659888124969
========
if(nameNode!=null){
reportCodeChange();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888124970
GPR[SPVAP]-1659888124970
GPR[EPVAP]-1659888126869
GPR[EPVS]-1659888126869
========
if(nameNode!=null){
Preconditions.checkState(-1!=-1);
node.getParent().replaceChild(n,IR.number(-1));
reportCodeChange();

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888126871
GPR[SPVAP]-1659888126871
GPR[EPVAP]-1659888128894
GPR[EPVS]-1659888128894
========
if(flags!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888128896
GPR[SPVAP]-1659888128896
GPR[EPVAP]-1659888131138
GPR[EPVS]-1659888131138
========
if(nameNode!=null){
String name=nameNode.getString();
if(!areValidRegexpFlags(nameNode.getString())){
report(INVALID_REGULAR_EXPRESSION_FLAGS,nameNode);
return node;
}
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888131140
GPR[SPVAP]-1659888131140
GPR[EPVAP]-1659888132986
GPR[EPVS]-1659888132986
========
if(nameNode!=null){
String name=nameNode.getString();
if(!areSafeFlagsToFold(nameNode.getString())){
return node;
}
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888132987
GPR[SPVAP]-1659888132987
GPR[EPVAP]-1659888135036
GPR[EPVS]-1659888135036
========
if(nameNode!=null){
String name=nameNode.getString();
if(!areValidRegexpFlags(nameNode.getString())){
report(INVALID_REGULAR_EXPRESSION_FLAGS,nameNode);
return node;
}
if(!areSafeFlagsToFold(nameNode.getString())){
return node;
}
node.removeChild(nameNode);

Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888135037
GPR[SPVAP]-1659888135037
GPR[EPVAP]-1659888136911
GPR[EPVS]-1659888136911
========
if(n!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888136912
GPR[SPVAP]-1659888136912
GPR[EPVAP]-1659888138769
GPR[EPVS]-1659888138769
========
if(nameNode!=null){
node.setLength(name.length());
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888138770
GPR[SPVAP]-1659888138770
GPR[EPVAP]-1659888140658
GPR[EPVS]-1659888140658
========
if(nameNode!=null){
new JSDocInfo.NamePosition().setItem(node);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888140659
GPR[SPVAP]-1659888140659
GPR[EPVAP]-1659888142669
GPR[EPVS]-1659888142669
========
if(nameNode!=null){
node.setLength(name.length());
new JSDocInfo.NamePosition().setItem(node);

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888142670
GPR[SPVAP]-1659888142670
GPR[EPVAP]-1659888144747
GPR[EPVS]-1659888144747
========
if(value!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888144749
GPR[SPVAP]-1659888144749
GPR[EPVAP]-1659888146589
GPR[EPVS]-1659888146589
========
if(nameNode!=null){
newName.addChildToBack(nameNode);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888146591
GPR[SPVAP]-1659888146591
GPR[EPVAP]-1659888148508
GPR[EPVS]-1659888148508
========
if(nameNode!=null){
newName.srcref(nameNode);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888148509
GPR[SPVAP]-1659888148509
GPR[EPVAP]-1659888150593
GPR[EPVS]-1659888150593
========
if(nameNode!=null){
newName.addChildToBack(nameNode);
newName.srcref(nameNode);

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888150594
GPR[SPVAP]-1659888150594
GPR[EPVAP]-1659888152439
GPR[EPVS]-1659888152439
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.getString(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888152441
GPR[SPVAP]-1659888152441
GPR[EPVAP]-1659888154404
GPR[EPVS]-1659888154404
========
if(left!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888154405
GPR[SPVAP]-1659888154405
GPR[EPVAP]-1659888156235
GPR[EPVS]-1659888156235
========
if(arg2!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888156236
GPR[SPVAP]-1659888156236
GPR[EPVAP]-1659888158047
GPR[EPVS]-1659888158047
========
if((id>name.length())||(id>stringAsString.length())){
return node;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888158048
GPR[SPVAP]-1659888158048
GPR[EPVAP]-1659888159954
GPR[EPVS]-1659888159954
========
node.getParent().replaceChild(node,IR.string(newName));
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888159955
GPR[SPVAP]-1659888159955
GPR[EPVAP]-1659888161765
GPR[EPVS]-1659888161765
========
reportCodeChange();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888161766
GPR[SPVAP]-1659888161766
GPR[EPVAP]-1659888163687
GPR[EPVS]-1659888163687
========
if(dest!=null){
String name=dest.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888163689
GPR[SPVAP]-1659888163689
GPR[EPVAP]-1659888165512
GPR[EPVS]-1659888165512
========
if(dest!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888165513
GPR[SPVAP]-1659888165513
GPR[EPVAP]-1659888167318
GPR[EPVS]-1659888167319
========
if(nameNode!=null){
String name=dest.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888167319
GPR[SPVAP]-1659888167319
GPR[EPVAP]-1659888169162
GPR[EPVS]-1659888169162
========
if(nameNode!=null&&nameNode.isObjectLit()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888169164
GPR[SPVAP]-1659888169164
GPR[EPVAP]-1659888173255
GPR[SPVATF]-1659888173255
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888177172
GPR[EPVS]-1659888177172
========
if(NodeUtil.isFunctionObjectApply(nameNode)){
return false;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888177173
GPR[SPVAP]-1659888177173
GPR[EPVAP]-1659888178995
GPR[EPVS]-1659888178995
========
Preconditions.checkState(name.size()==1);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888178996
GPR[SPVAP]-1659888178996
GPR[EPVAP]-1659888181213
GPR[EPVS]-1659888181213
========
if(nameNode!=null){
node.putBooleanProp(Node.IS_CONSTANT_NAME,true);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888181214
GPR[SPVAP]-1659888181214
GPR[EPVAP]-1659888185131
GPR[SPVATF]-1659888185131
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888188760
GPR[EPVS]-1659888188760
========
Preconditions.checkState(node.isName()||n.isString());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888188761
GPR[SPVAP]-1659888188761
GPR[EPVAP]-1659888190616
GPR[EPVS]-1659888190616
========
if(nameNode!=null){
node.putBooleanProp(Node.IS_CONSTANT_NAME,true);
String name=n.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888190619
GPR[SPVAP]-1659888190619
GPR[EPVAP]-1659888192477
GPR[EPVS]-1659888192477
========
if(nameNode!=null&&nameNode.isVar()&&node.hasChildren()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888192479
GPR[SPVAP]-1659888192479
GPR[EPVAP]-1659888196410
GPR[SPVATF]-1659888196410
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888199951
GPR[EPVS]-1659888199951
========
if(nameNode!=null&&nameNode.isVar()&&node.hasChildren()){
String name=n.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888199952
GPR[SPVAP]-1659888199952
GPR[EPVAP]-1659888201870
GPR[EPVS]-1659888201870
========
if(parent!=null){
String name=n.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888201871
GPR[SPVAP]-1659888201871
GPR[EPVAP]-1659888203780
GPR[EPVS]-1659888203780
========
if(OFF!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888203781
GPR[SPVAP]-1659888203781
GPR[EPVAP]-1659888205822
GPR[EPVS]-1659888205822
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.add(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888205824
GPR[SPVAP]-1659888205824
GPR[EPVAP]-1659888208012
GPR[EPVS]-1659888208012
========
if(n!=null){
String name=n.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888208013
GPR[SPVAP]-1659888208013
GPR[EPVAP]-1659888209888
GPR[EPVS]-1659888209888
========
if(nameNode!=null){
if(name!=null){
defineAndAlias(name);
return ;
}
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888209889
GPR[SPVAP]-1659888209889
GPR[EPVAP]-1659888212129
GPR[EPVS]-1659888212129
========
if(last!=null){
String name=last.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888212131
GPR[SPVAP]-1659888212131
GPR[EPVAP]-1659888213966
GPR[EPVS]-1659888213966
========
if(nameNode!=null&&nameNode.isString()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888213967
GPR[SPVAP]-1659888213967
GPR[EPVAP]-1659888217751
GPR[SPVATF]-1659888217751
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888221580
GPR[EPVS]-1659888221580
========
if(last!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888221581
GPR[SPVAP]-1659888221581
GPR[EPVAP]-1659888223454
GPR[EPVS]-1659888223455
========
if(nameNode!=null){
String name=last.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888223456
GPR[SPVAP]-1659888223456
GPR[EPVAP]-1659888225445
GPR[EPVS]-1659888225445
========
if(node.getFirstChild()!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888225448
GPR[SPVAP]-1659888225448
GPR[EPVAP]-1659888229206
GPR[SPVATF]-1659888229206
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888233088
GPR[EPVS]-1659888233088
========
if(node!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888233089
GPR[SPVAP]-1659888233089
GPR[EPVAP]-1659888237017
GPR[SPVATF]-1659888237017
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888240570
GPR[EPVS]-1659888240570
========
if(nameNode!=null){
String name=nameNode.getString();
replaceWithNull(nameNode,node);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888240571
GPR[SPVAP]-1659888240571
GPR[EPVAP]-1659888242488
GPR[EPVS]-1659888242488
========
if(node.getFirstChild()==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888242490
GPR[SPVAP]-1659888242490
GPR[EPVAP]-1659888246447
GPR[SPVATF]-1659888246447
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888250432
GPR[EPVS]-1659888250432
========
if(node==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888250433
GPR[SPVAP]-1659888250433
GPR[EPVAP]-1659888254280
GPR[SPVATF]-1659888254280
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888257888
GPR[EPVS]-1659888257888
========
if((id+id)>name.length()||(length<0)||(start<0)){
return node;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888257891
GPR[SPVAP]-1659888257891
GPR[EPVAP]-1659888259744
GPR[EPVS]-1659888259744
========
node.getParent().replaceChild(node,IR.string(newName));
if(arg2!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888259745
GPR[SPVAP]-1659888259745
GPR[EPVAP]-1659888261642
GPR[EPVS]-1659888261642
========
reportCodeChange();
if(arg2!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888261643
GPR[SPVAP]-1659888261643
GPR[EPVAP]-1659888263557
GPR[EPVS]-1659888263557
========
node.getParent().replaceChild(node,IR.string(newName));
reportCodeChange();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888263558
GPR[SPVAP]-1659888263558
GPR[EPVAP]-1659888265397
GPR[EPVS]-1659888265397
========
node.getParent().replaceChild(node,IR.string(newName));
reportCodeChange();
if(arg2!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888265398
GPR[SPVAP]-1659888265398
GPR[EPVAP]-1659888267192
GPR[EPVS]-1659888267192
========
if((nameNode!=null)&&(nameNode.isString()||nameNode.isNumber())){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888267193
GPR[SPVAP]-1659888267193
GPR[EPVAP]-1659888271347
GPR[SPVATF]-1659888271347
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888274973
GPR[EPVS]-1659888274973
========
if(firstArgument!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888274975
GPR[SPVAP]-1659888274975
GPR[EPVAP]-1659888276912
GPR[EPVS]-1659888276912
========
if(key!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888276914
GPR[SPVAP]-1659888276914
GPR[EPVAP]-1659888278980
GPR[EPVS]-1659888278980
========
if(nameNode!=null){
compiler.add(newName);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888278981
GPR[SPVAP]-1659888278981
GPR[EPVAP]-1659888280839
GPR[EPVS]-1659888280839
========
if(nameNode.getParent()!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888280842
GPR[SPVAP]-1659888280842
GPR[EPVAP]-1659888284659
GPR[SPVATF]-1659888284659
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888288521
GPR[EPVS]-1659888288521
========
if(!nameNode.isFunction()){
return null;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888288522
GPR[SPVAP]-1659888288522
GPR[EPVAP]-1659888290370
GPR[EPVS]-1659888290370
========
if(nameNode.getParent()==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888290371
GPR[SPVAP]-1659888290371
GPR[EPVAP]-1659888294278
GPR[SPVATF]-1659888294278
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888298216
GPR[EPVS]-1659888298216
========
if(nameNode!=null){
mapping.node=nameNode;
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888298218
GPR[SPVAP]-1659888298218
GPR[EPVAP]-1659888300210
GPR[EPVS]-1659888300210
========
if(nameNode!=null){
mapping.start=new FilePosition(li,getCurrentCharIndex());
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888300212
GPR[SPVAP]-1659888300212
GPR[EPVAP]-1659888302581
GPR[EPVS]-1659888302581
========
if(nameNode!=null){
mapping.node=nameNode;
mapping.start=new FilePosition(li,getCurrentCharIndex());

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888302589
GPR[SPVAP]-1659888302589
GPR[EPVAP]-1659888304662
GPR[EPVS]-1659888304662
========
Preconditions.checkState(nameNode!=null);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888304663
GPR[SPVAP]-1659888304663
GPR[EPVAP]-1659888308621
GPR[SPVATF]-1659888308621
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888312533
GPR[EPVS]-1659888312533
========
Preconditions.checkState(nameNode!=null);
if(node!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888312535
GPR[SPVAP]-1659888312535
GPR[EPVAP]-1659888316308
GPR[SPVATF]-1659888316308
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888320156
GPR[EPVS]-1659888320156
========
if(varName!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888320157
GPR[SPVAP]-1659888320157
GPR[EPVAP]-1659888322385
GPR[EPVS]-1659888322385
========
Preconditions.checkArgument(node.isFunction(),"Node must be a function.");
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888322387
GPR[SPVAP]-1659888322387
GPR[EPVAP]-1659888326140
GPR[SPVATF]-1659888326140
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888329985
GPR[EPVS]-1659888329985
========
Preconditions.checkArgument(name.isBlock(),"Node must be a block.");
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888329986
GPR[SPVAP]-1659888329986
GPR[EPVAP]-1659888331795
GPR[EPVS]-1659888331795
========
Preconditions.checkState(node.getParent()==null);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888331795
GPR[SPVAP]-1659888331795
GPR[EPVAP]-1659888335606
GPR[SPVATF]-1659888335606
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888339486
GPR[EPVS]-1659888339486
========
name.addChildToFront(node);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888339487
GPR[SPVAP]-1659888339487
GPR[EPVAP]-1659888341375
GPR[EPVS]-1659888341375
========
compiler.reportCodeChange();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888341376
GPR[SPVAP]-1659888341376
GPR[EPVAP]-1659888345207
GPR[SPVATF]-1659888345207
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888348782
GPR[EPVS]-1659888348782
========
Preconditions.checkArgument(node.isFunction(),"Node must be a function.");
Preconditions.checkState(node.getParent()==null);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888348784
GPR[SPVAP]-1659888348784
GPR[EPVAP]-1659888352696
GPR[SPVATF]-1659888352696
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888356297
GPR[EPVS]-1659888356297
========
Preconditions.checkArgument(node.isFunction(),"Node must be a function.");
compiler.reportCodeChange();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888356298
GPR[SPVAP]-1659888356298
GPR[EPVAP]-1659888360391
GPR[SPVATF]-1659888360391
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888364017
GPR[EPVS]-1659888364017
========
Preconditions.checkState(node.getParent()==null);
compiler.reportCodeChange();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888364018
GPR[SPVAP]-1659888364018
GPR[EPVAP]-1659888368034
GPR[SPVATF]-1659888368034
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888371587
GPR[EPVS]-1659888371587
========
Preconditions.checkArgument(node.isFunction(),"Node must be a function.");
Preconditions.checkState(node.getParent()==null);
compiler.reportCodeChange();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888371588
GPR[SPVAP]-1659888371588
GPR[EPVAP]-1659888375375
GPR[SPVATF]-1659888375375
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888379049
GPR[EPVS]-1659888379049
========
if(ECMASCRIPT3!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888379051
GPR[SPVAP]-1659888379051
GPR[EPVAP]-1659888381138
GPR[EPVS]-1659888381138
========
Preconditions.checkState(nameNode.isString(),"Bad GETPROP: RHS should be STRING");
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888381139
GPR[SPVAP]-1659888381139
GPR[EPVAP]-1659888385128
GPR[SPVATF]-1659888385128
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888388725
GPR[EPVS]-1659888388725
========
if((node.isNumber())){
add("(");
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888388726
GPR[SPVAP]-1659888388726
GPR[EPVAP]-1659888390680
GPR[EPVS]-1659888390680
========
if((node.isNumber())){
add(")");
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888390681
GPR[SPVAP]-1659888390681
GPR[EPVAP]-1659888392646
GPR[EPVS]-1659888392646
========
if(fnName!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888392649
GPR[SPVAP]-1659888392649
GPR[EPVAP]-1659888394457
GPR[EPVS]-1659888394457
========
if(val!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888394459
GPR[SPVAP]-1659888394459
GPR[EPVAP]-1659888396428
GPR[EPVS]-1659888396428
========
if(nameNode!=null){
String name=child.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888396429
GPR[SPVAP]-1659888396429
GPR[EPVAP]-1659888398735
GPR[EPVS]-1659888398735
========
prop.numOccurrences++;
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888398737
GPR[SPVAP]-1659888398737
GPR[EPVAP]-1659888400744
GPR[EPVS]-1659888400744
========
if(child!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888400746
GPR[SPVAP]-1659888400746
GPR[EPVAP]-1659888402640
GPR[EPVS]-1659888402640
========
name.setAttribute(TagAttr.BODY,nameNode.getString());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888402641
GPR[SPVAP]-1659888402641
GPR[EPVAP]-1659888404458
GPR[EPVS]-1659888404458
========
nameNode=child.getNext();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888404459
GPR[SPVAP]-1659888404459
GPR[EPVAP]-1659888406336
GPR[EPVS]-1659888406336
========
name.setAttribute(TagAttr.FLAGS,newName);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888406338
GPR[SPVAP]-1659888406338
GPR[EPVAP]-1659888408240
GPR[EPVS]-1659888408240
========
if(tracker!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888408242
GPR[SPVAP]-1659888408242
GPR[EPVAP]-1659888410300
GPR[EPVS]-1659888410300
========
if(li==null?null:var.getJSDocInfo()!=null&&docInfo.isDeprecated()&&shouldEmitDeprecationWarning(name,node,nameNode)){
if(docInfo.getDeprecationReason()!=null){
compiler.report(t.makeError(n,DEPRECATED_NAME_REASON,n.getString(),docInfo.getDeprecationReason()));
}else {
compiler.report(t.makeError(n,DEPRECATED_NAME,n.getString()));
}
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888410302
GPR[SPVAP]-1659888410302
GPR[EPVAP]-1659888412139
GPR[EPVS]-1659888412139
========
if((id+id)>name.length()||(length<0)||(start<0)){
return node;
}
if(arg2!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888412141
GPR[SPVAP]-1659888412141
GPR[EPVAP]-1659888413992
GPR[EPVS]-1659888413992
========
if(nameNode!=null){
new StringBuilder().append(" - FUNCTIONS: ");
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888413993
GPR[SPVAP]-1659888413993
GPR[EPVAP]-1659888417938
GPR[SPVATF]-1659888417939
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888421929
GPR[EPVS]-1659888421929
========
if(toRemove!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888421930
GPR[SPVAP]-1659888421930
GPR[EPVAP]-1659888423741
GPR[EPVS]-1659888423741
========
if(nameNode!=RenameStrategy.CONSISTENT){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888423743
GPR[SPVAP]-1659888423743
GPR[EPVAP]-1659888425628
GPR[EPVS]-1659888425628
========
if(li!=null){
return fullyNamedSym;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888425629
GPR[SPVAP]-1659888425629
GPR[EPVAP]-1659888427557
GPR[EPVS]-1659888427557
========
if(lvalueToRemoveLater!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888427559
GPR[SPVAP]-1659888427559
GPR[EPVAP]-1659888429372
GPR[EPVS]-1659888429372
========
if(nameNode!=null){
String name=nameNode.getString();
lvalueToRemoveLater=null;
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888429373
GPR[SPVAP]-1659888429373
GPR[EPVAP]-1659888431291
GPR[EPVS]-1659888431291
========
if(nameNode!=null){
lvalueToRemoveLater=null;
compiler.reportCodeChange();

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888431292
GPR[SPVAP]-1659888431292
GPR[EPVAP]-1659888433078
GPR[EPVS]-1659888433078
========
if(nameNode==null){
compiler.reportCodeChange();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888433079
GPR[SPVAP]-1659888433079
GPR[EPVAP]-1659888436962
GPR[SPVATF]-1659888436962
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888441149
GPR[EPVS]-1659888441149
========
if(node!=null){
compiler.reportCodeChange();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888441150
GPR[SPVAP]-1659888441150
GPR[EPVAP]-1659888445434
GPR[SPVATF]-1659888445434
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888448968
GPR[EPVS]-1659888448968
========
if(node==null){
compiler.reportCodeChange();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888448969
GPR[SPVAP]-1659888448969
GPR[EPVAP]-1659888452934
GPR[SPVATF]-1659888452934
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888456857
GPR[EPVS]-1659888456857
========
if(prop!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888456859
GPR[SPVAP]-1659888456859
GPR[EPVAP]-1659888458818
GPR[EPVS]-1659888458818
========
if(nameNode!=null){
node.getParent().replaceChild(ancestor,newName);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888458819
GPR[SPVAP]-1659888458819
GPR[EPVAP]-1659888460732
GPR[EPVS]-1659888460732
========
if(nameNode.getFirstChild()!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888460733
GPR[SPVAP]-1659888460733
GPR[EPVAP]-1659888464594
GPR[SPVATF]-1659888464594
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888468630
GPR[EPVS]-1659888468630
========
if(rValue!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888468632
GPR[SPVAP]-1659888468632
GPR[EPVAP]-1659888470622
GPR[EPVS]-1659888470622
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.report(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888470623
GPR[SPVAP]-1659888470623
GPR[EPVAP]-1659888472427
GPR[EPVS]-1659888472427
========
if(secondArg!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888472428
GPR[SPVAP]-1659888472429
GPR[EPVAP]-1659888474292
GPR[EPVS]-1659888474292
========
Preconditions.checkArgument(node.isCall());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888474294
GPR[SPVAP]-1659888474294
GPR[EPVAP]-1659888478166
GPR[SPVATF]-1659888478166
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888482180
GPR[EPVS]-1659888482180
========
Preconditions.checkArgument(node.isString());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888482181
GPR[SPVAP]-1659888482181
GPR[EPVAP]-1659888486024
GPR[SPVATF]-1659888486024
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888489729
GPR[EPVS]-1659888489729
========
if(li==null){
return node;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888489730
GPR[SPVAP]-1659888489730
GPR[EPVAP]-1659888491644
GPR[EPVS]-1659888491644
========
Preconditions.checkArgument(node.isCall());
Preconditions.checkArgument(node.isString());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888491645
GPR[SPVAP]-1659888491645
GPR[EPVAP]-1659888495524
GPR[SPVATF]-1659888495524
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888499108
GPR[EPVS]-1659888499108
========
case Token.GETPROP :

if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888499110
GPR[SPVAP]-1659888499110
GPR[EPVAP]-1659888500762
GPR[EPVS]-1659888500762
========
case Token.OBJECTLIT :

if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888500763
GPR[SPVAP]-1659888500763
GPR[EPVAP]-1659888502443
GPR[EPVS]-1659888502443
========
if(parent!=null){
compiler.add(newName);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888502444
GPR[SPVAP]-1659888502444
GPR[EPVAP]-1659888504284
GPR[EPVS]-1659888504284
========
if(node.getFirstChild()!=null){
compiler.add(newName);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888504285
GPR[SPVAP]-1659888504285
GPR[EPVAP]-1659888506282
GPR[EPVS]-1659888506282
========
if(node!=null){
compiler.add(newName);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888506283
GPR[SPVAP]-1659888506283
GPR[EPVAP]-1659888508508
GPR[EPVS]-1659888508508
========
if(n!=null){
compiler.add(newName);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888508509
GPR[SPVAP]-1659888508509
GPR[EPVAP]-1659888510347
GPR[EPVS]-1659888510347
========
if(nameNode!=Token.COLON){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888510349
GPR[SPVAP]-1659888510349
GPR[EPVAP]-1659888512555
GPR[EPVS]-1659888512555
========
if(fieldTypeNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888512556
GPR[SPVAP]-1659888512556
GPR[EPVAP]-1659888514505
GPR[EPVS]-1659888514505
========
if(name.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888514506
GPR[SPVAP]-1659888514506
GPR[EPVAP]-1659888516474
GPR[EPVS]-1659888516474
========
if(nextNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888516481
GPR[SPVAP]-1659888516481
GPR[EPVAP]-1659888518322
GPR[EPVS]-1659888518322
========
if(c!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888521348
GPR[SPVAP]-1659888521348
GPR[EPVAP]-1659888523148
GPR[EPVS]-1659888523148
========
Preconditions.checkState(nameNode.isStringKey());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888523150
GPR[SPVAP]-1659888523150
GPR[EPVAP]-1659888527125
GPR[SPVATF]-1659888527125
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888530849
GPR[EPVS]-1659888530849
========
add(":");
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888530850
GPR[SPVAP]-1659888530850
GPR[EPVAP]-1659888532663
GPR[EPVS]-1659888532663
========
if(nameNode!=null&&nameNode.isThis()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888532665
GPR[SPVAP]-1659888532665
GPR[EPVAP]-1659888536552
GPR[SPVATF]-1659888536553
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888540116
GPR[EPVS]-1659888540116
========
if(ownerNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888540117
GPR[SPVAP]-1659888540117
GPR[EPVAP]-1659888541984
GPR[EPVS]-1659888541984
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.setLength(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888541986
GPR[SPVAP]-1659888541986
GPR[EPVAP]-1659888543812
GPR[EPVS]-1659888543812
========
if(name.getFirstChild().getNext()!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888543814
GPR[SPVAP]-1659888543814
GPR[EPVAP]-1659888546076
GPR[EPVS]-1659888546076
========
if(nameNode.getParent().getFirstChild()!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888546077
GPR[SPVAP]-1659888546077
GPR[EPVAP]-1659888550106
GPR[SPVATF]-1659888550106
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888554209
GPR[EPVS]-1659888554209
========
if(newBlockNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888554211
GPR[SPVAP]-1659888554211
GPR[EPVAP]-1659888556466
GPR[EPVS]-1659888556466
========
if(nameNode!=null){
String name=nameNode.getString();
nameNode.copyInformationFromForTree(node);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888556467
GPR[SPVAP]-1659888556467
GPR[EPVAP]-1659888560409
GPR[SPVATF]-1659888560410
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888564409
GPR[EPVS]-1659888564409
========
if(nameNode!=null){
String name=nameNode.getString();
node.replaceChild(node,nameNode);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888564411
GPR[SPVAP]-1659888564411
GPR[EPVAP]-1659888568386
GPR[SPVATF]-1659888568386
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888572738
GPR[EPVS]-1659888572738
========
if(nameNode!=null){
String name=nameNode.getString();
nameNode.copyInformationFromForTree(node);
node.replaceChild(node,nameNode);

Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888572739
GPR[SPVAP]-1659888572739
GPR[EPVAP]-1659888576630
GPR[SPVATF]-1659888576630
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888580488
GPR[EPVS]-1659888580488
========
if(nameNode!=null){
String name=nameNode.getString();
nameNode.copyInformationFromForTree(node);
node.replaceChild(node,nameNode);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888580489
GPR[SPVAP]-1659888580489
GPR[EPVAP]-1659888584500
GPR[SPVATF]-1659888584500
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888588045
GPR[EPVS]-1659888588045
========
if(nameNode!=null){
String name=nameNode.getString();
nameNode.copyInformationFromForTree(node);
nameNode.copyInformationFromForTree(node);
node.replaceChild(node,nameNode);

Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888588047
GPR[SPVAP]-1659888588047
GPR[EPVAP]-1659888592016
GPR[SPVATF]-1659888592016
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888595896
GPR[EPVS]-1659888595896
========
if(nameNode!=null){
String name=nameNode.getString();
node.replaceChild(node,nameNode);
nameNode.copyInformationFromForTree(node);
node.replaceChild(node,nameNode);

Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888595897
GPR[SPVAP]-1659888595897
GPR[EPVAP]-1659888599976
GPR[SPVATF]-1659888599976
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888603828
GPR[EPVS]-1659888603828
========
if(nameNode!=null){
String name=nameNode.getString();
nameNode.copyInformationFromForTree(node);
node.replaceChild(node,nameNode);
nameNode.copyInformationFromForTree(node);
node.replaceChild(node,nameNode);

Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888603829
GPR[SPVAP]-1659888603829
GPR[EPVAP]-1659888607677
GPR[SPVATF]-1659888607677
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888611284
GPR[EPVS]-1659888611284
========
if(pNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888611286
GPR[SPVAP]-1659888611286
GPR[EPVAP]-1659888613224
GPR[EPVS]-1659888613224
========
if(result!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888613226
GPR[SPVAP]-1659888613226
GPR[EPVAP]-1659888615093
GPR[EPVS]-1659888615093
========
if(nameNode!=null&&nameNode.getSourceFileName().equals(newName)){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888615095
GPR[SPVAP]-1659888615095
GPR[EPVAP]-1659888617158
GPR[EPVS]-1659888617158
========
if(ctor!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888617160
GPR[SPVAP]-1659888617160
GPR[EPVAP]-1659888619479
GPR[EPVS]-1659888619479
========
if(nameNode!=node){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888619481
GPR[SPVAP]-1659888619481
GPR[EPVAP]-1659888623444
GPR[SPVATF]-1659888623444
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888627032
GPR[EPVS]-1659888627032
========
if(newValue!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888627033
GPR[SPVAP]-1659888627033
GPR[EPVAP]-1659888628956
GPR[EPVS]-1659888628956
========
if(nameNode!=node){
String name=nameNode.getString();
nameNode.copyInformationFromForTree(node);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888628958
GPR[SPVAP]-1659888628958
GPR[EPVAP]-1659888633083
GPR[SPVATF]-1659888633083
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888636661
GPR[EPVS]-1659888636661
========
if(nameNode!=null){
new JSDocInfo.TrimmedStringPosition().setPositionInformation(newName,id,lineno,charno+name.length());
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888636663
GPR[SPVAP]-1659888636663
GPR[EPVAP]-1659888638643
GPR[EPVS]-1659888638643
========
if(nameNode!=null){
populated=true;
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888638644
GPR[SPVAP]-1659888638644
GPR[EPVAP]-1659888640711
GPR[EPVS]-1659888640711
========
if(nameNode!=null){
new JSDocInfo.TrimmedStringPosition().setPositionInformation(newName,id,lineno,charno+name.length());
populated=true;

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888640712
GPR[SPVAP]-1659888640712
GPR[EPVAP]-1659888642692
GPR[EPVS]-1659888642692
========
if(explicitNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888642693
GPR[SPVAP]-1659888642693
GPR[EPVAP]-1659888644503
GPR[EPVS]-1659888644503
========
if(nameNode!=null){
state.sideEffects=true;
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888644505
GPR[SPVAP]-1659888644505
GPR[EPVAP]-1659888646412
GPR[EPVS]-1659888646412
========
if(nameNode!=null){
parent=node;
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888646413
GPR[SPVAP]-1659888646413
GPR[EPVAP]-1659888648284
GPR[EPVS]-1659888648284
========
if(nameNode!=null){
state.sideEffects=true;
parent=node;

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888648285
GPR[SPVAP]-1659888648285
GPR[EPVAP]-1659888650508
GPR[EPVS]-1659888650508
========
if(nameNode!=null&&nameNode.isFunction()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888650510
GPR[SPVAP]-1659888650510
GPR[EPVAP]-1659888654573
GPR[SPVATF]-1659888654573
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888658198
GPR[EPVS]-1659888658198
========
if(root!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888658200
GPR[SPVAP]-1659888658200
GPR[EPVAP]-1659888660095
GPR[EPVS]-1659888660095
========
if(nameNode!=null){
Preconditions.checkNotNull(nameNode.getInputId());
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888660096
GPR[SPVAP]-1659888660096
GPR[EPVAP]-1659888663868
GPR[SPVATF]-1659888663869
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888667410
GPR[EPVS]-1659888667410
========
if(candidateDefinition!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888667411
GPR[SPVAP]-1659888667411
GPR[EPVAP]-1659888669365
GPR[EPVS]-1659888669365
========
IR.exprResult(IR.assign(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),newName,node,namespace),createNamespaceLiteral())).putBooleanProp(Node.IS_NAMESPACE,true);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888669366
GPR[SPVAP]-1659888669366
GPR[EPVAP]-1659888671224
GPR[EPVS]-1659888671224
========
Preconditions.checkState(isNamespacePlaceholder(IR.exprResult(IR.assign(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),newName,node,namespace),createNamespaceLiteral()))));
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888671225
GPR[SPVAP]-1659888671225
GPR[EPVAP]-1659888673110
GPR[EPVS]-1659888673110
========
setSourceInfo(IR.exprResult(IR.assign(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),newName,node,namespace),createNamespaceLiteral())));
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888673111
GPR[SPVAP]-1659888673111
GPR[EPVAP]-1659888674957
GPR[EPVS]-1659888674957
========
if(nameNode!=null){
if(id==Token.GETELEM){
decomposeSubExpressions(nameNode.getLastChild(),null,newName);
}
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888674958
GPR[SPVAP]-1659888674958
GPR[EPVAP]-1659888676877
GPR[EPVS]-1659888676877
========
if(nameNode!=null){
decomposeSubExpressions(nameNode.getFirstChild(),null,newName);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888676878
GPR[SPVAP]-1659888676878
GPR[EPVAP]-1659888678858
GPR[EPVS]-1659888678858
========
if(nameNode!=null){
if(id==Token.GETELEM){
decomposeSubExpressions(nameNode.getLastChild(),null,newName);
}
decomposeSubExpressions(nameNode.getFirstChild(),null,newName);

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888678859
GPR[SPVAP]-1659888678859
GPR[EPVAP]-1659888680678
GPR[EPVS]-1659888680678
========
if(left!=node){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888680679
GPR[SPVAP]-1659888680679
GPR[EPVAP]-1659888682478
GPR[EPVS]-1659888682478
========
if(defaultValueNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888682479
GPR[SPVAP]-1659888682479
GPR[EPVAP]-1659888684325
GPR[EPVS]-1659888684325
========
Preconditions.checkState(isRegistered());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888684326
GPR[SPVAP]-1659888684326
GPR[EPVAP]-1659888686118
GPR[EPVS]-1659888686118
========
if(registerCall.valueNode!=null){
return registerCall.valueNode;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888686119
GPR[SPVAP]-1659888686119
GPR[EPVAP]-1659888688023
GPR[EPVS]-1659888688023
========
if(cArg!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888688025
GPR[SPVAP]-1659888688025
GPR[EPVAP]-1659888689934
GPR[EPVS]-1659888689934
========
name.addChildToFront(createNamespaceLiteral());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888689935
GPR[SPVAP]-1659888689935
GPR[EPVAP]-1659888691788
GPR[EPVS]-1659888691788
========
IR.var(name).putBooleanProp(Node.IS_NAMESPACE,true);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888691789
GPR[SPVAP]-1659888691789
GPR[EPVAP]-1659888693590
GPR[EPVS]-1659888693590
========
if(compiler.getCodingConvention().isConstant(newName)){
name.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888693591
GPR[SPVAP]-1659888693591
GPR[EPVAP]-1659888695571
GPR[EPVS]-1659888695571
========
Preconditions.checkState(isNamespacePlaceholder(IR.var(name)));
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888695573
GPR[SPVAP]-1659888695573
GPR[EPVAP]-1659888697430
GPR[EPVS]-1659888697430
========
setSourceInfo(IR.var(name));
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888697431
GPR[SPVAP]-1659888697431
GPR[EPVAP]-1659888699368
GPR[EPVS]-1659888699368
========
if(candidateDefinition==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888699370
GPR[SPVAP]-1659888699370
GPR[EPVAP]-1659888701280
GPR[EPVS]-1659888701280
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(node));
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888701282
GPR[SPVAP]-1659888701282
GPR[EPVAP]-1659888705012
GPR[SPVATF]-1659888705012
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888708881
GPR[EPVS]-1659888708881
========
if(isExpressionTreeUnsafe(node,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888708883
GPR[SPVAP]-1659888708883
GPR[EPVAP]-1659888710716
GPR[EPVS]-1659888710716
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(node));
if(n!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888710717
GPR[SPVAP]-1659888710717
GPR[EPVAP]-1659888712736
GPR[EPVS]-1659888712736
========
if(nameNode!=null){
mapping.end=new FilePosition(li,newName);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888712737
GPR[SPVAP]-1659888712737
GPR[EPVAP]-1659888714586
GPR[EPVS]-1659888714586
========
if(nameNode!=null&&nameNode.isBreak()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888714588
GPR[SPVAP]-1659888714588
GPR[EPVAP]-1659888718414
GPR[SPVATF]-1659888718414
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888722513
GPR[EPVS]-1659888722513
========
if(lastStm!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888722514
GPR[SPVAP]-1659888722514
GPR[EPVAP]-1659888724943
GPR[EPVS]-1659888724943
========
if(nameNode!=null){
sb=null;
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888724945
GPR[SPVAP]-1659888724945
GPR[EPVAP]-1659888726920
GPR[EPVS]-1659888726920
========
if(name==null){
return ;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888726923
GPR[SPVAP]-1659888726923
GPR[EPVAP]-1659888728809
GPR[EPVS]-1659888728809
========
Preconditions.checkState(name.isExtern(),"Not an extern input: %s",input.getName());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888728810
GPR[SPVAP]-1659888728810
GPR[EPVAP]-1659888730604
GPR[EPVS]-1659888730604
========
if(nameNode!=null&&NodeUtil.isFunctionObjectCall(node)){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888730606
GPR[SPVAP]-1659888730606
GPR[EPVAP]-1659888734418
GPR[SPVATF]-1659888734418
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888738013
GPR[EPVS]-1659888738013
========
if(nameNode!=null){
cArg=nameNode.getNext();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888738015
GPR[SPVAP]-1659888738015
GPR[EPVAP]-1659888739944
GPR[EPVS]-1659888739944
========
if(iifeArgumentNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888739946
GPR[SPVAP]-1659888739946
GPR[EPVAP]-1659888741730
GPR[EPVS]-1659888741730
========
if(lastTrue!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888741732
GPR[SPVAP]-1659888741732
GPR[EPVAP]-1659888743581
GPR[EPVS]-1659888743581
========
if(lastFalse!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888743582
GPR[SPVAP]-1659888743582
GPR[EPVAP]-1659888745404
GPR[EPVS]-1659888745404
========
if(nameNode!=TernaryValue.UNKNOWN){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888745407
GPR[SPVAP]-1659888745407
GPR[EPVAP]-1659888747307
GPR[EPVS]-1659888747307
========
node.detachChildren();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888747308
GPR[SPVAP]-1659888747308
GPR[EPVAP]-1659888751030
GPR[SPVATF]-1659888751030
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888754963
GPR[EPVS]-1659888754963
========
if(mayHaveSideEffects(newName)){
node=IR.comma(cond,node).srcref(node);
}else {
replacement=branchToKeep;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888754964
GPR[SPVAP]-1659888754964
GPR[EPVAP]-1659888756877
GPR[EPVS]-1659888756877
========
node.replaceChild(node,node);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888756878
GPR[SPVAP]-1659888756878
GPR[EPVAP]-1659888761032
GPR[SPVATF]-1659888761032
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888765169
GPR[EPVS]-1659888765169
========
node.detachChildren();
if(nameNode==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888765170
GPR[SPVAP]-1659888765170
GPR[EPVAP]-1659888768982
GPR[SPVATF]-1659888768982
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888772926
GPR[EPVS]-1659888772926
========
node.replaceChild(node,node);
if(nameNode==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888772927
GPR[SPVAP]-1659888772927
GPR[EPVAP]-1659888776778
GPR[SPVATF]-1659888776778
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888780333
GPR[EPVS]-1659888780333
========
reportCodeChange();
if(nameNode==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888780335
GPR[SPVAP]-1659888780335
GPR[EPVAP]-1659888782255
GPR[EPVS]-1659888782255
========
node.detachChildren();
node.replaceChild(node,node);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888782256
GPR[SPVAP]-1659888782256
GPR[EPVAP]-1659888786006
GPR[SPVATF]-1659888786007
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888789834
GPR[EPVS]-1659888789834
========
node.detachChildren();
reportCodeChange();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888789835
GPR[SPVAP]-1659888789835
GPR[EPVAP]-1659888791772
GPR[EPVS]-1659888791772
========
node.replaceChild(node,node);
reportCodeChange();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888791782
GPR[SPVAP]-1659888791782
GPR[EPVAP]-1659888793766
GPR[EPVS]-1659888793766
========
node.detachChildren();
node.replaceChild(node,node);
if(nameNode==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888793767
GPR[SPVAP]-1659888793767
GPR[EPVAP]-1659888797631
GPR[SPVATF]-1659888797631
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888801564
GPR[EPVS]-1659888801564
========
node.detachChildren();
reportCodeChange();
if(nameNode==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888801566
GPR[SPVAP]-1659888801566
GPR[EPVAP]-1659888803427
GPR[EPVS]-1659888803427
========
node.replaceChild(node,node);
reportCodeChange();
if(nameNode==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888803428
GPR[SPVAP]-1659888803428
GPR[EPVAP]-1659888805237
GPR[EPVS]-1659888805237
========
node.detachChildren();
node.replaceChild(node,node);
reportCodeChange();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888805238
GPR[SPVAP]-1659888805238
GPR[EPVAP]-1659888807137
GPR[EPVS]-1659888807137
========
node.detachChildren();
node.replaceChild(node,node);
reportCodeChange();
if(nameNode==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888807138
GPR[SPVAP]-1659888807138
GPR[EPVAP]-1659888809093
GPR[EPVS]-1659888809093
========
declareArguments(nameNode);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888809094
GPR[SPVAP]-1659888809094
GPR[EPVAP]-1659888810902
GPR[EPVS]-1659888810902
========
if(lhs!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888810903
GPR[SPVAP]-1659888810903
GPR[EPVAP]-1659888812755
GPR[EPVS]-1659888812755
========
if(node.isExprResult()&&nameNode!=null&&isFusableControlStatement(nameNode)){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888812757
GPR[SPVAP]-1659888812757
GPR[EPVAP]-1659888814751
GPR[EPVS]-1659888814751
========
if(cur!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888814752
GPR[SPVAP]-1659888814752
GPR[EPVAP]-1659888816552
GPR[EPVS]-1659888816552
========
if(next!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888816553
GPR[SPVAP]-1659888816553
GPR[EPVAP]-1659888818345
GPR[EPVS]-1659888818345
========
if(nameNode!=null&&nameNode.isExprResult()&&nameNode.getFirstChild().isCall()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888818346
GPR[SPVAP]-1659888818346
GPR[EPVAP]-1659888822369
GPR[SPVATF]-1659888822369
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888826005
GPR[EPVS]-1659888826005
========
if(maybeInheritsExpr!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888826006
GPR[SPVAP]-1659888826006
GPR[EPVAP]-1659888828000
GPR[EPVS]-1659888828000
========
node.replaceChild(newName,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.call",null.getQualifiedName()),callee,"goog.base"));
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888828001
GPR[SPVAP]-1659888828001
GPR[EPVAP]-1659888829796
GPR[EPVS]-1659888829796
========
compiler.reportCodeChange();
if(nameNode!=null&&nameNode.isExprResult()&&nameNode.getFirstChild().isCall()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888829797
GPR[SPVAP]-1659888829797
GPR[EPVAP]-1659888833715
GPR[SPVATF]-1659888833715
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888837297
GPR[EPVS]-1659888837297
========
Preconditions.checkState(nameNode!=null);
if(value!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888837299
GPR[SPVAP]-1659888837299
GPR[EPVAP]-1659888839544
GPR[EPVS]-1659888839544
========
if(newNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888839546
GPR[SPVAP]-1659888839546
GPR[EPVAP]-1659888841394
GPR[EPVS]-1659888841394
========
if(nameNode!=null){
String name=nameNode.getString();
nameNode.getParent().addChildAfter(newName,newNode);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888841395
GPR[SPVAP]-1659888841395
GPR[EPVAP]-1659888843329
GPR[EPVS]-1659888843329
========
if(nameNode==li){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888843330
GPR[SPVAP]-1659888843331
GPR[EPVAP]-1659888845132
GPR[EPVS]-1659888845132
========
if(nameNode!=li){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888845133
GPR[SPVAP]-1659888845133
GPR[EPVAP]-1659888847239
GPR[EPVS]-1659888847239
========
if(refNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888847240
GPR[SPVAP]-1659888847240
GPR[EPVAP]-1659888849196
GPR[EPVS]-1659888849196
========
if(nameNode.isFunction()&&NodeUtil.referencesThis(value)){
return node;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888849198
GPR[SPVAP]-1659888849198
GPR[EPVAP]-1659888851067
GPR[EPVS]-1659888851067
========
if(node.isGetterDef()){
newName=IR.call(replacement);
replacement.putBooleanProp(Node.FREE_CALL,true);
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888851068
GPR[SPVAP]-1659888851068
GPR[EPVAP]-1659888852877
GPR[EPVS]-1659888852877
========
node.getParent().replaceChild(n,newName);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888852878
GPR[SPVAP]-1659888852878
GPR[EPVAP]-1659888854789
GPR[EPVS]-1659888854789
========
if(value==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888854791
GPR[SPVAP]-1659888854791
GPR[EPVAP]-1659888856645
GPR[EPVS]-1659888856645
========
reportCodeChange();
if(value!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888856646
GPR[SPVAP]-1659888856646
GPR[EPVAP]-1659888858456
GPR[EPVS]-1659888858456
========
reportCodeChange();
if(value==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888858457
GPR[SPVAP]-1659888858457
GPR[EPVAP]-1659888860363
GPR[EPVS]-1659888860363
========
if(lhsAssign!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888860364
GPR[SPVAP]-1659888860364
GPR[EPVAP]-1659888862333
GPR[EPVS]-1659888862333
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=TernaryValue.UNKNOWN){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888862334
GPR[SPVAP]-1659888862334
GPR[EPVAP]-1659888864146
GPR[EPVS]-1659888864146
========
NodeUtil.copyNameAnnotations(node.getLastChild(),newName);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888864148
GPR[SPVAP]-1659888864148
GPR[EPVAP]-1659888866033
GPR[EPVS]-1659888866034
========
if(li!=null){
newName.setJSType(type);
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888866035
GPR[SPVAP]-1659888866035
GPR[EPVAP]-1659888867846
GPR[EPVS]-1659888867847
========
nameNode.replaceChild(node,newName);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888867848
GPR[SPVAP]-1659888867848
GPR[EPVAP]-1659888869854
GPR[EPVS]-1659888869854
========
compiler.reportCodeChange();
if(parent!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888869855
GPR[SPVAP]-1659888869855
GPR[EPVAP]-1659888871735
GPR[EPVS]-1659888871735
========
if(argNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888871736
GPR[SPVAP]-1659888871736
GPR[EPVAP]-1659888873765
GPR[EPVS]-1659888873765
========
if(nameNode!=null){
String name=nameNode.getString();
eliminateParamsAfter(node,nameNode.getNext());
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888873766
GPR[SPVAP]-1659888873766
GPR[EPVAP]-1659888875867
GPR[EPVS]-1659888875867
========
if(nameNode!=null){
String name=nameNode.getString();
nameNode.detachFromParent();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888875868
GPR[SPVAP]-1659888875868
GPR[EPVAP]-1659888879671
GPR[SPVATF]-1659888879671
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888883847
GPR[EPVS]-1659888883847
========
if(nameNode!=null){
String name=nameNode.getString();
node.getLastChild().addChildrenToFront(newName);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888883848
GPR[SPVAP]-1659888883848
GPR[EPVAP]-1659888885690
GPR[EPVS]-1659888885690
========
if(nameNode!=null){
String name=nameNode.getString();
eliminateParamsAfter(node,nameNode.getNext());
nameNode.detachFromParent();
node.getLastChild().addChildrenToFront(newName);

Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888885691
GPR[SPVAP]-1659888885691
GPR[EPVAP]-1659888887504
GPR[EPVS]-1659888887504
========
if(callTarget!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888887505
GPR[SPVAP]-1659888887505
GPR[EPVAP]-1659888889345
GPR[EPVS]-1659888889345
========
if(!NodeUtil.isGet(nameNode)){
return node;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888889346
GPR[SPVAP]-1659888889346
GPR[EPVAP]-1659888891228
GPR[EPVS]-1659888891228
========
if((!nameNode.getFirstChild().isString())||(!name.isString())){
return node;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888891229
GPR[SPVAP]-1659888891229
GPR[EPVAP]-1659888893045
GPR[EPVS]-1659888893045
========
if(name==null||objType.getJSDocInfo()!=null){
return ;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888893047
GPR[SPVAP]-1659888893047
GPR[EPVAP]-1659888894960
GPR[EPVS]-1659888894960
========
if(li!=null&&nameNode!=null&&nameNode.isObjectLit()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888894962
GPR[SPVAP]-1659888894962
GPR[EPVAP]-1659888897179
GPR[EPVS]-1659888897179
========
if(rhsValue!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888897181
GPR[SPVAP]-1659888897181
GPR[EPVAP]-1659888899170
GPR[EPVS]-1659888899170
========
if(nameNode!=null&&nameNode.getNext()==null&&NodeUtil.isImmutableValue(nameNode)){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888899172
GPR[SPVAP]-1659888899172
GPR[EPVAP]-1659888902987
GPR[SPVATF]-1659888902987
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888906905
GPR[EPVS]-1659888906905
========
if(nameNode.getNext()!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888906907
GPR[SPVAP]-1659888906907
GPR[EPVAP]-1659888910754
GPR[SPVATF]-1659888910755
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888914566
GPR[EPVS]-1659888914566
========
Preconditions.checkState(nameNode.isFunction());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888914568
GPR[SPVAP]-1659888914568
GPR[EPVAP]-1659888918416
GPR[SPVATF]-1659888918416
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888922433
GPR[EPVS]-1659888922433
========
if(nameNode!=null){
createEdge(node,Branch.ON_FALSE,nameNode);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888922434
GPR[SPVAP]-1659888922434
GPR[EPVAP]-1659888924272
GPR[EPVS]-1659888924272
========
if(methodNameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888924274
GPR[SPVAP]-1659888924274
GPR[EPVAP]-1659888926121
GPR[EPVS]-1659888926121
========
node.replaceChild(node,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.superClass_.%s.call",node.getFirstChild().getFirstChild().getQualifiedName(),name),callee,"goog.base"));
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888926122
GPR[SPVAP]-1659888926122
GPR[EPVAP]-1659888928018
GPR[EPVS]-1659888928018
========
if(firstArg!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888928020
GPR[SPVAP]-1659888928020
GPR[EPVAP]-1659888929903
GPR[EPVS]-1659888929903
========
maybeAddToSymbolTable(node);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888929909
GPR[SPVAP]-1659888929909
GPR[EPVAP]-1659888932334
GPR[EPVS]-1659888932334
========
if(newName==null){
return node;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888932337
GPR[SPVAP]-1659888932337
GPR[EPVAP]-1659888934384
GPR[EPVS]-1659888934384
========
node.getParent().addChildAfter(IR.exprResult(IR.assign(IR.getelem(IR.getprop(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),newName),IR.string("prototype")),node),IR.trueNode())),nodeToInsertAfter);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888934386
GPR[SPVAP]-1659888934386
GPR[EPVAP]-1659888936369
GPR[EPVS]-1659888936369
========
node=IR.exprResult(IR.assign(IR.getelem(IR.getprop(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),newName),IR.string("prototype")),node),IR.trueNode()));
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888936370
GPR[SPVAP]-1659888936370
GPR[EPVAP]-1659888938228
GPR[EPVS]-1659888938228
========
compiler.reportCodeChange();
if(nameNode==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888938229
GPR[SPVAP]-1659888938229
GPR[EPVAP]-1659888942159
GPR[SPVATF]-1659888942159
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888945870
GPR[EPVS]-1659888945870
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.fine(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888945872
GPR[SPVAP]-1659888945872
GPR[EPVAP]-1659888947734
GPR[EPVS]-1659888947734
========
if(nameNode!=null){
inlineConstReturn(node,nameNode,newName);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888947735
GPR[SPVAP]-1659888947735
GPR[EPVAP]-1659888949611
GPR[EPVS]-1659888949611
========
if(functionNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888949613
GPR[SPVAP]-1659888949613
GPR[EPVAP]-1659888951568
GPR[EPVS]-1659888951568
========
Preconditions.checkState(node.isObjectLit());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888951570
GPR[SPVAP]-1659888951570
GPR[EPVAP]-1659888955320
GPR[SPVATF]-1659888955320
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888958904
GPR[EPVS]-1659888958904
========
if(!node.isAssign()){
return false;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888958906
GPR[SPVAP]-1659888958906
GPR[EPVAP]-1659888960912
GPR[EPVS]-1659888960912
========
if(node.getLastChild()!=node){
return false;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888960914
GPR[SPVAP]-1659888960914
GPR[EPVAP]-1659888962872
GPR[EPVS]-1659888962872
========
if(li==null||!greatGramp.isExprResult()){
return false;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888962873
GPR[SPVAP]-1659888962873
GPR[EPVAP]-1659888964699
GPR[EPVS]-1659888964699
========
if(nameNode!=null&&nameNode.getJSType()!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888964701
GPR[SPVAP]-1659888964701
GPR[EPVAP]-1659888968498
GPR[SPVATF]-1659888968498
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888972697
GPR[EPVS]-1659888972697
========
if(oldParameterType!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888972698
GPR[SPVAP]-1659888972698
GPR[EPVAP]-1659888974599
GPR[EPVS]-1659888974599
========
if(nameNode!=null){
inlineEmptyMethod(node,nameNode);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888974601
GPR[SPVAP]-1659888974601
GPR[EPVAP]-1659888976749
GPR[EPVS]-1659888976749
========
if(paramNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888976750
GPR[SPVAP]-1659888976750
GPR[EPVAP]-1659888978554
GPR[EPVS]-1659888978554
========
annotate(IR.exprResult(node));
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888978556
GPR[SPVAP]-1659888978556
GPR[EPVAP]-1659888980352
GPR[EPVS]-1659888980352
========
if(nameNode==null){
String name=nameNode.getString();
Preconditions.report(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888980354
GPR[SPVAP]-1659888980354
GPR[EPVAP]-1659888982194
GPR[EPVS]-1659888982194
========
if(name1!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888982196
GPR[SPVAP]-1659888982196
GPR[EPVAP]-1659888983992
GPR[EPVS]-1659888983992
========
if(name2!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888983994
GPR[SPVAP]-1659888983994
GPR[EPVAP]-1659888985800
GPR[EPVS]-1659888985800
========
if(!NodeUtil.isReferenceName(node)){
return ;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888985801
GPR[SPVAP]-1659888985801
GPR[EPVAP]-1659888989580
GPR[SPVATF]-1659888989580
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659888993490
GPR[EPVS]-1659888993490
========
if(!NodeUtil.isReferenceName(node)){
return ;
}
if(nameNode==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659888993491
GPR[SPVAP]-1659888993491
GPR[EPVAP]-1659888997472
GPR[SPVATF]-1659888997472
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889001678
GPR[EPVS]-1659889001678
========
if(nameNode!=null){
String name=nameNode.getString();
compiler.getTypeRegistry().checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889001680
GPR[SPVAP]-1659889001680
GPR[EPVAP]-1659889003584
GPR[EPVS]-1659889003584
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.getNativeFunctionType(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889003585
GPR[SPVAP]-1659889003585
GPR[EPVAP]-1659889005585
GPR[EPVS]-1659889005585
========
if(nameNode!=null){
className=NodeUtil.getPrototypeClassName(node).getQualifiedName();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889005586
GPR[SPVAP]-1659889005586
GPR[EPVAP]-1659889007400
GPR[EPVS]-1659889007400
========
if(valueParent!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889007401
GPR[SPVAP]-1659889007401
GPR[EPVAP]-1659889009214
GPR[EPVS]-1659889009214
========
Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889009215
GPR[SPVAP]-1659889009215
GPR[EPVAP]-1659889013284
GPR[SPVATF]-1659889013284
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889016959
GPR[EPVS]-1659889016959
========
NodeTraversal.traverse(compiler,node,new ProcessExternedProperties());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889016960
GPR[SPVAP]-1659889016960
GPR[EPVAP]-1659889018820
GPR[EPVS]-1659889018820
========
NodeTraversal.traverse(compiler,node,new ProcessProperties());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889018821
GPR[SPVAP]-1659889018821
GPR[EPVAP]-1659889020942
GPR[EPVS]-1659889020942
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.appendStringPart(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889020949
GPR[SPVAP]-1659889020949
GPR[EPVAP]-1659889023971
GPR[EPVS]-1659889023971
========
if(nameNode!=null){
name.append(')');
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889023972
GPR[SPVAP]-1659889023972
GPR[EPVAP]-1659889025869
GPR[EPVS]-1659889025869
========
if(nameNode!=null){
String name=nameNode.getString();
key=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889025872
GPR[SPVAP]-1659889025872
GPR[EPVAP]-1659889027907
GPR[EPVS]-1659889027907
========
if(nameNode!=null){
String name=nameNode.getString();
replacementString=getReplacement(name);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889027908
GPR[SPVAP]-1659889027908
GPR[EPVAP]-1659889030506
GPR[EPVS]-1659889030506
========
if(nameNode!=null){
String name=nameNode.getString();
key=nameNode.getString();
replacementString=getReplacement(name);

Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889030508
GPR[SPVAP]-1659889030508
GPR[EPVAP]-1659889032312
GPR[EPVS]-1659889032312
========
default :

if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889032313
GPR[SPVAP]-1659889032313
GPR[EPVAP]-1659889034006
GPR[EPVS]-1659889034006
========
case Token.POS :

if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889034008
GPR[SPVAP]-1659889034008
GPR[EPVAP]-1659889035939
GPR[EPVS]-1659889035939
========
if(!name.isString()){
return ;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889035942
GPR[SPVAP]-1659889035942
GPR[EPVAP]-1659889037728
GPR[EPVS]-1659889037728
========
if(!nameNode.getFirstChild().getNext().isQualifiedName()){
return ;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889037730
GPR[SPVAP]-1659889037730
GPR[EPVAP]-1659889041490
GPR[SPVATF]-1659889041490
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889045478
GPR[EPVS]-1659889045478
========
if(!nameNode.getFirstChild().getNext().isQualifiedName()){
return ;
}
if(parent!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889045479
GPR[SPVAP]-1659889045479
GPR[EPVAP]-1659889047316
GPR[EPVS]-1659889047316
========
if(!name.isString()){
return ;
}
if(parent!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889047317
GPR[SPVAP]-1659889047317
GPR[EPVAP]-1659889049110
GPR[EPVS]-1659889049110
========
if(!nameNode.getFirstChild().getNext().isQualifiedName()){
return ;
}
if(!name.isString()){
return ;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889049111
GPR[SPVAP]-1659889049111
GPR[EPVAP]-1659889051456
GPR[EPVS]-1659889051456
========
if(!nameNode.getFirstChild().getNext().isQualifiedName()){
return ;
}
if(!name.isString()){
return ;
}
if(parent!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659889051457
GPR[SPVAP]-1659889051457
GPR[EPVAP]-1659889053266
GPR[EPVS]-1659889053266
GPR[ESUN]-1659889053268
GPR[SSUN]-1659889053268
com.google.javascript.jscomp.RenameLabels,201
========
String name=n.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889056436
GPR[SPVAP]-1659889056436
GPR[EPVAP]-1659889060224
GPR[EPVS]-1659889060224
========
if(isCandidateUsage(nameNode)){
return ;
}
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889060225
GPR[SPVAP]-1659889060225
GPR[EPVAP]-1659889062559
GPR[EPVS]-1659889062559
========
if(nameNode.getString().isEmpty()){
return ;
}
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889062560
GPR[SPVAP]-1659889062560
GPR[EPVAP]-1659889070181
GPR[SPVATF]-1659889070181
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889074253
GPR[EPVS]-1659889074253
========
if(nameNode.getString().isEmpty()){
return ;
}
String name=n.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889074254
GPR[SPVAP]-1659889074254
GPR[EPVAP]-1659889076066
GPR[EPVS]-1659889076066
========
String name=typeNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889076067
GPR[SPVAP]-1659889076067
GPR[EPVAP]-1659889077954
GPR[EPVS]-1659889077954
========
String name=node.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889077955
GPR[SPVAP]-1659889077955
GPR[EPVAP]-1659889081890
GPR[SPVATF]-1659889081890
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889085464
GPR[EPVS]-1659889085464
========
String name=paramNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889085465
GPR[SPVAP]-1659889085465
GPR[EPVAP]-1659889087270
GPR[EPVS]-1659889087270
========
String name=callName.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889087271
GPR[SPVAP]-1659889087272
GPR[EPVAP]-1659889089192
GPR[EPVS]-1659889089192
========
String name=c.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889089193
GPR[SPVAP]-1659889089193
GPR[EPVAP]-1659889091469
GPR[EPVS]-1659889091469
========
String name=nameNode.getFirstChild().getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889091470
GPR[SPVAP]-1659889091470
GPR[EPVAP]-1659889096010
GPR[SPVATF]-1659889096010
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889100095
GPR[EPVS]-1659889100095
========
String name=nameNode.getString();
nameNode.getFirstChild().setString(name);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889100097
GPR[SPVAP]-1659889100097
GPR[EPVAP]-1659889104048
GPR[SPVATF]-1659889104048
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889107889
GPR[EPVS]-1659889107889
========
String name=nameNode.getString();
Preconditions.add(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889107890
GPR[SPVAP]-1659889107890
GPR[EPVAP]-1659889109722
GPR[EPVS]-1659889109722
========
String name=nameNode.getString();
Preconditions.pushContainingFunction(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889109724
GPR[SPVAP]-1659889109724
GPR[EPVAP]-1659889111537
GPR[EPVS]-1659889111537
========
String name=node.getFirstChild().getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889111538
GPR[SPVAP]-1659889111538
GPR[EPVAP]-1659889115405
GPR[SPVATF]-1659889115405
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889119237
GPR[EPVS]-1659889119237
========
String name=propNameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889119239
GPR[SPVAP]-1659889119239
GPR[EPVAP]-1659889121083
GPR[EPVS]-1659889121083
========
li+=name.length();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889121084
GPR[SPVAP]-1659889121084
GPR[EPVAP]-1659889123155
GPR[EPVS]-1659889123155
========
Preconditions.checkState(nameNode.getParent()!=null);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889123157
GPR[SPVAP]-1659889123157
GPR[EPVAP]-1659889127078
GPR[SPVATF]-1659889127078
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889130764
GPR[EPVS]-1659889130764
========
String name=args.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889130765
GPR[SPVAP]-1659889130765
GPR[EPVAP]-1659889132662
GPR[EPVS]-1659889132662
========
String name=node.getLastChild().getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889132663
GPR[SPVAP]-1659889132663
GPR[EPVAP]-1659889136448
GPR[SPVATF]-1659889136448
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889140723
GPR[EPVS]-1659889140723
========
Preconditions.checkState(id>=0,"Column index must be >= 0");
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889140725
GPR[SPVAP]-1659889140725
GPR[EPVAP]-1659889142634
GPR[EPVS]-1659889142634
========
String name=parent.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889142635
GPR[SPVAP]-1659889142635
GPR[EPVAP]-1659889144588
GPR[EPVS]-1659889144588
========
String name=nameNode.isName()?nameNode.getString():node.getFirstChild().getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889144589
GPR[SPVAP]-1659889144589
GPR[EPVAP]-1659889148723
GPR[SPVATF]-1659889148723
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889152756
GPR[EPVS]-1659889152756
========
String name=lhs.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889152757
GPR[SPVAP]-1659889152757
GPR[EPVAP]-1659889154616
GPR[EPVS]-1659889154616
========
String name=nameNode.getString();
Preconditions.report(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889154617
GPR[SPVAP]-1659889154617
GPR[EPVAP]-1659889156462
GPR[EPVS]-1659889156462
========
node.setLength(name.length());
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889156463
GPR[SPVAP]-1659889156463
GPR[EPVAP]-1659889158266
GPR[EPVS]-1659889158266
========
Preconditions.checkState(mayBeExpressionOrEmpty(node));
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889158267
GPR[SPVAP]-1659889158267
GPR[EPVAP]-1659889160124
GPR[EPVS]-1659889160124
========
Preconditions.checkState(nameNode.isBlock());
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889160125
GPR[SPVAP]-1659889160125
GPR[EPVAP]-1659889164064
GPR[SPVATF]-1659889164064
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889167957
GPR[EPVS]-1659889167957
========
Preconditions.checkState(nameNode.getType()==id);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889167958
GPR[SPVAP]-1659889167958
GPR[EPVAP]-1659889169806
GPR[EPVS]-1659889169806
========
info.isAliased=true;
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889169807
GPR[SPVAP]-1659889169807
GPR[EPVAP]-1659889171647
GPR[EPVS]-1659889171647
========
compiler.reportCodeChange();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889171648
GPR[SPVAP]-1659889171648
GPR[EPVAP]-1659889175630
GPR[SPVATF]-1659889175630
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889179593
GPR[EPVS]-1659889179593
========
String name=callTarget.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889179594
GPR[SPVAP]-1659889179594
GPR[EPVAP]-1659889181551
GPR[EPVS]-1659889181551
========
if(!node.isCall()){
return null;
}
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889181552
GPR[SPVAP]-1659889181552
GPR[EPVAP]-1659889183392
GPR[EPVS]-1659889183392
========
String name=nameNode.getString();
Preconditions.checkArgument(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889183393
GPR[SPVAP]-1659889183393
GPR[EPVAP]-1659889187252
GPR[SPVATF]-1659889187252
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889191466
GPR[EPVS]-1659889191466
========
if(removeUnused){
return ;
}
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889191467
GPR[SPVAP]-1659889191467
GPR[EPVAP]-1659889195348
GPR[SPVATF]-1659889195348
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889199042
GPR[EPVS]-1659889199042
========
String name=n.getString();
Preconditions.checkArgument(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889199043
GPR[SPVAP]-1659889199043
GPR[EPVAP]-1659889200885
GPR[EPVS]-1659889200885
========
if(removeUnused){
return ;
}
String name=n.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889200886
GPR[SPVAP]-1659889200886
GPR[EPVAP]-1659889202821
GPR[EPVS]-1659889202821
========
if(removeUnused){
return ;
}
String name=nameNode.getString();
Preconditions.checkArgument(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889202822
GPR[SPVAP]-1659889202822
GPR[EPVAP]-1659889206704
GPR[SPVATF]-1659889206704
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889210325
GPR[EPVS]-1659889210325
========
if(removeUnused){
return ;
}
String name=n.getString();
Preconditions.checkArgument(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889210326
GPR[SPVAP]-1659889210326
GPR[EPVAP]-1659889212325
GPR[EPVS]-1659889212325
========
Preconditions.checkState(report.success,COMPILATION_UNSUCCESSFUL_MSG);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889212326
GPR[SPVAP]-1659889212326
GPR[EPVAP]-1659889214240
GPR[EPVS]-1659889214240
========
String name=dest.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889214241
GPR[SPVAP]-1659889214241
GPR[EPVAP]-1659889216120
GPR[EPVS]-1659889216120
========
Preconditions.checkState(id>=0);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889216122
GPR[SPVAP]-1659889216122
GPR[EPVAP]-1659889217911
GPR[EPVS]-1659889217911
========
li=new FilePosition(id,id);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889217912
GPR[SPVAP]-1659889217912
GPR[EPVAP]-1659889220004
GPR[EPVS]-1659889220004
========
Preconditions.checkState(node.isParamList());
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889220005
GPR[SPVAP]-1659889220005
GPR[EPVAP]-1659889224052
GPR[SPVATF]-1659889224052
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889227994
GPR[EPVS]-1659889227994
========
Preconditions.checkState(node.isBlock());
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889227995
GPR[SPVAP]-1659889227995
GPR[EPVAP]-1659889231764
GPR[SPVATF]-1659889231764
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889235734
GPR[EPVS]-1659889235734
========
Preconditions.checkState(node.isParamList());
Preconditions.checkState(node.isBlock());
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889235735
GPR[SPVAP]-1659889235735
GPR[EPVAP]-1659889239873
GPR[SPVATF]-1659889239873
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889243520
GPR[EPVS]-1659889243520
========
Preconditions.checkState(node.isBlock());
Preconditions.checkState(nameNode.isBlock());
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889243521
GPR[SPVAP]-1659889243521
GPR[EPVAP]-1659889247555
GPR[SPVATF]-1659889247555
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889251138
GPR[EPVS]-1659889251138
========
Preconditions.checkState(mayBeExpression(node));
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889251139
GPR[SPVAP]-1659889251139
GPR[EPVAP]-1659889253077
GPR[EPVS]-1659889253077
========
String name=left.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889253078
GPR[SPVAP]-1659889253078
GPR[EPVAP]-1659889255079
GPR[EPVS]-1659889255079
========
if(Token.NAME!=node.getType()){
return TernaryValue.UNKNOWN;
}
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889255080
GPR[SPVAP]-1659889255080
GPR[EPVAP]-1659889256899
GPR[EPVS]-1659889256899
========
String name=nameNode.getString();
Preconditions.setAliased(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889256900
GPR[SPVAP]-1659889256900
GPR[EPVAP]-1659889258811
GPR[EPVS]-1659889258811
========
String name=child.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889258812
GPR[SPVAP]-1659889258812
GPR[EPVAP]-1659889260611
GPR[EPVS]-1659889260611
========
Preconditions.checkState(!node.hasChildren());
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889260612
GPR[SPVAP]-1659889260612
GPR[EPVAP]-1659889264479
GPR[SPVATF]-1659889264479
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889268442
GPR[EPVS]-1659889268442
========
node.addChildToFront(node);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889268444
GPR[SPVAP]-1659889268444
GPR[EPVAP]-1659889272338
GPR[SPVATF]-1659889272338
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889275965
GPR[EPVS]-1659889275965
========
Preconditions.checkState(!node.hasChildren());
Preconditions.checkState(mayBeExpression(node));
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889275966
GPR[SPVAP]-1659889275966
GPR[EPVAP]-1659889277836
GPR[EPVS]-1659889277836
========
Preconditions.checkState(!node.hasChildren());
node.addChildToFront(node);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889277837
GPR[SPVAP]-1659889277837
GPR[EPVAP]-1659889281724
GPR[SPVATF]-1659889281724
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889285271
GPR[EPVS]-1659889285271
========
Preconditions.checkState(mayBeExpression(node));
node.addChildToFront(node);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889285273
GPR[SPVAP]-1659889285273
GPR[EPVAP]-1659889287108
GPR[EPVS]-1659889287108
========
Preconditions.checkState(!node.hasChildren());
Preconditions.checkState(mayBeExpression(node));
node.addChildToFront(node);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889287109
GPR[SPVAP]-1659889287109
GPR[EPVAP]-1659889289012
GPR[EPVS]-1659889289012
========
li=name;
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889289013
GPR[SPVAP]-1659889289013
GPR[EPVAP]-1659889291000
GPR[EPVS]-1659889291000
========
String name=nameNode.getString();
Preconditions.valueAtColumn(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889291002
GPR[SPVAP]-1659889291002
GPR[EPVAP]-1659889292832
GPR[EPVS]-1659889292832
========
setPosition(node);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889292833
GPR[SPVAP]-1659889292833
GPR[EPVAP]-1659889294656
GPR[EPVS]-1659889294656
========
nameNode.addChildToBack(node);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889294657
GPR[SPVAP]-1659889294657
GPR[EPVAP]-1659889298512
GPR[SPVATF]-1659889298512
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889302429
GPR[EPVS]-1659889302429
========
String name=key.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889302430
GPR[SPVAP]-1659889302430
GPR[EPVAP]-1659889304362
GPR[EPVS]-1659889304362
========
String name=nameNode.getParent().getFirstChild().getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889304371
GPR[SPVAP]-1659889304371
GPR[EPVAP]-1659889308224
GPR[SPVATF]-1659889308224
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889312266
GPR[EPVS]-1659889312266
========
String name=nameNode.getParent().getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889312267
GPR[SPVAP]-1659889312267
GPR[EPVAP]-1659889316474
GPR[SPVATF]-1659889316474
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889320039
GPR[EPVS]-1659889320039
========
String name=nameNode.getParent().isCall()?nameNode.getString():null;
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889320039
GPR[SPVAP]-1659889320039
GPR[EPVAP]-1659889323979
GPR[SPVATF]-1659889323979
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889327664
GPR[EPVS]-1659889327664
========
Preconditions.checkState(mayBeExpression(node));
Preconditions.checkState(nameNode.isBlock());
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889327665
GPR[SPVAP]-1659889327665
GPR[EPVAP]-1659889329660
GPR[EPVS]-1659889329660
========
li=new Tracer("JSCompiler");
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889329661
GPR[SPVAP]-1659889329661
GPR[EPVAP]-1659889331582
GPR[EPVS]-1659889331582
========
String name=stringNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889331584
GPR[SPVAP]-1659889331584
GPR[EPVAP]-1659889333604
GPR[EPVS]-1659889333604
========
Preconditions.checkState(node==node||!executingCase.isDefaultCase());
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889333605
GPR[SPVAP]-1659889333605
GPR[EPVAP]-1659889335616
GPR[EPVS]-1659889335616
========
String name=node.getChildAtIndex(1).getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889335618
GPR[SPVAP]-1659889335618
GPR[EPVAP]-1659889339421
GPR[SPVATF]-1659889339421
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
GPR[EPVATF]-1659889343251
GPR[EPVS]-1659889343251
========
compiler.addToDebugLog("label renamed: "+name);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889343253
GPR[SPVAP]-1659889343253
GPR[EPVAP]-1659889345102
GPR[EPVS]-1659889345102
========
NodeUtil.newQualifiedNameNodeDeclaration(compiler.getCodingConvention(),name,node.getChildAtIndex(2).detachFromParent(),node.getJSDocInfo()).useSourceInfoIfMissingFromForTree(node);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889345104
GPR[SPVAP]-1659889345104
GPR[EPVAP]-1659889348311
GPR[EPVS]-1659889348311
========
node.getParent().replaceChild(parent,NodeUtil.newQualifiedNameNodeDeclaration(compiler.getCodingConvention(),name,node.getChildAtIndex(2).detachFromParent(),node.getJSDocInfo()));
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);

========
GPR[SPVS]-1659889348313
GPR[SPVAP]-1659889348313
GPR[EPVAP]-1659889350624
GPR[EPVS]-1659889350624
Timeout!
GPR[SFL]-1659889351398
GPR[EFL]-1659889351401
GPR[SFP]-1659889351401
TIMEOUT : 3600000
GPR[SSUN]-1659889351407
com.google.javascript.rhino.Node,1430
GPR[ESUN]-1659889353000
GPR[SSUN]-1659889353000
com.google.javascript.rhino.Node,1446
GPR[ESUN]-1659889354681
GPR[SSUN]-1659889354681
com.google.javascript.rhino.Node,1459
GPR[ESUN]-1659889356304
GPR[SSUN]-1659889356304
com.google.javascript.rhino.Node,2194
Find no block!
GPR[SSUN]-1659889356536
com.google.javascript.rhino.Node,2195
GPR[ESUN]-1659889358177
GPR[SSUN]-1659889358177
com.google.javascript.rhino.Node,2196
GPR[ESUN]-1659889358411
GPR[SSUN]-1659889358411
com.google.javascript.rhino.Node,2197
Find no block!
GPR[SSUN]-1659889358622
com.google.javascript.jscomp.FunctionInjector,731
========
if(current.shouldRemove&&NodeUtil.canBeSideEffected(cArg)){
return CanInlineResult.NO;
}

========
GPR[SPVS]-1659889360278
GPR[SPVAP]-1659889360278
GPR[EPVAP]-1659889364021
GPR[EPVS]-1659889364021
========
if(shouldRemove&&NodeUtil.canBeSideEffected(cArg)){
return CanInlineResult.NO;
}

========
GPR[SPVS]-1659889364022
GPR[SPVAP]-1659889364023
GPR[EPVAP]-1659889366567
GPR[EPVS]-1659889366567
========
if(cArg==null&&NodeUtil.canBeSideEffected(cArg)){
return CanInlineResult.NO;
}

========
GPR[SPVS]-1659889366569
GPR[SPVAP]-1659889366569
GPR[EPVAP]-1659889374471
GPR[SPVATF]-1659889374471
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889378148
GPR[SPVATR]-1659889378149
TESTING : closure_115
GPR[EPVATR]-1659889448690
GPR[EPVS]-1659889448690
GPR[PF]-1659889448690
sourceFile  script/workingdir/SimFix/closure/closure_115_buggy/src/com/google/javascript/jscomp/FunctionInjector.java
location   script/workingdir/SimFix/closure/closure_115_buggy
========
if(cArg!=null&&NodeUtil.isFunctionObjectCall(callNode)){
return CanInlineResult.NO;
}

========
GPR[SPVS]-1659889448700
GPR[SPVAP]-1659889448700
GPR[EPVAP]-1659889452644
GPR[SPVATF]-1659889452644
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889456593
GPR[SPVATR]-1659889456593
TESTING : closure_115
GPR[EPVATR]-1659889527150
GPR[EPVS]-1659889527151
========
if(cArg!=null&&NodeUtil.canBeSideEffected(cArg)){
return CanInlineResult.NO;
}

========
GPR[SPVS]-1659889527153
GPR[SPVAP]-1659889527153
GPR[EPVAP]-1659889531244
GPR[SPVATF]-1659889531244
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889535106
GPR[EPVS]-1659889535106
========
if(hasSideEffects&&NodeUtil.isFunctionObjectCall(callNode)){
return CanInlineResult.NO;
}

========
GPR[SPVS]-1659889535107
GPR[SPVAP]-1659889535107
GPR[EPVAP]-1659889539101
GPR[SPVATF]-1659889539101
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889543021
GPR[SPVATR]-1659889543022
TESTING : closure_115
GPR[EPVATR]-1659889614926
GPR[EPVS]-1659889614926
GPR[PF]-1659889614926
sourceFile  script/workingdir/SimFix/closure/closure_115_buggy/src/com/google/javascript/jscomp/FunctionInjector.java
location   script/workingdir/SimFix/closure/closure_115_buggy
GPR[ESUN]-1659889614934
GPR[SSUN]-1659889614934
com.google.javascript.jscomp.FunctionToBlockMutator,201
========
return "JSCompiler_inline_this_"+idSupplier.get();

========
GPR[SPVS]-1659889617172
GPR[SPVAP]-1659889617172
GPR[EPVAP]-1659889626080
GPR[SPVATF]-1659889626080
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889629989
GPR[EPVS]-1659889629989
========
return "JSCompiler_inline_label_"+safeNameIdSupplier.get();

========
GPR[SPVS]-1659889629990
GPR[SPVAP]-1659889629990
GPR[EPVAP]-1659889631829
GPR[EPVS]-1659889631829
========
return "JSCompiler_inline_anon_param_"+idSupplier.get();

========
GPR[SPVS]-1659889631830
GPR[SPVAP]-1659889631830
GPR[EPVAP]-1659889635920
GPR[SPVATF]-1659889635920
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889639820
GPR[EPVS]-1659889639820
GPR[ESUN]-1659889639822
GPR[SSUN]-1659889639822
com.google.javascript.jscomp.FunctionToBlockMutator,192
Find no block!
GPR[SSUN]-1659889640354
com.google.javascript.jscomp.InlineFunctions,503
UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

========
if(!referenceAdded&&mode==InliningMode.DIRECT&&DIRECT){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889642348
GPR[SPVAP]-1659889642348
GPR[EPVAP]-1659889646096
GPR[EPVS]-1659889646096
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&ns.onlyAffectsClassDef){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889646098
GPR[SPVAP]-1659889646098
GPR[EPVAP]-1659889648648
GPR[EPVS]-1659889648648
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&ns){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889648650
GPR[SPVAP]-1659889648650
GPR[EPVAP]-1659889651157
GPR[EPVS]-1659889651157
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&onlyAffectsClassDef){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889651158
GPR[SPVAP]-1659889651158
GPR[EPVAP]-1659889653618
GPR[EPVS]-1659889653618
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&!t.inGlobalScope()){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889653620
GPR[SPVAP]-1659889653620
GPR[EPVAP]-1659889661573
GPR[SPVATF]-1659889661573
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889665320
GPR[EPVS]-1659889665320
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&t){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889665321
GPR[SPVAP]-1659889665321
GPR[EPVAP]-1659889667256
GPR[EPVS]-1659889667256
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&!callNode.isExprResult()){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889667258
GPR[SPVAP]-1659889667258
GPR[EPVAP]-1659889671214
GPR[SPVATF]-1659889671215
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889674895
GPR[EPVS]-1659889674895
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&node){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889674896
GPR[SPVAP]-1659889674896
GPR[EPVAP]-1659889677121
GPR[EPVS]-1659889677121
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
updateMinimumModule(module);
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889677122
GPR[SPVAP]-1659889677122
GPR[EPVAP]-1659889679035
GPR[EPVS]-1659889679035
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
mode=module;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889679037
GPR[SPVAP]-1659889679037
GPR[EPVAP]-1659889680972
GPR[EPVS]-1659889680972
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&n){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889680974
GPR[SPVAP]-1659889680974
GPR[EPVAP]-1659889682905
GPR[EPVS]-1659889682905
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&externsRoot){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889682906
GPR[SPVAP]-1659889682906
GPR[EPVAP]-1659889684954
GPR[EPVS]-1659889684954
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
mode=t;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889684957
GPR[SPVAP]-1659889684957
GPR[EPVAP]-1659889686800
GPR[EPVS]-1659889686800
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
mode=compiler;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889686802
GPR[SPVAP]-1659889686802
GPR[EPVAP]-1659889688643
GPR[EPVS]-1659889688643
========
info.moduleToContainDecl=module;
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889688644
GPR[SPVAP]-1659889688644
GPR[EPVAP]-1659889690745
GPR[EPVS]-1659889690745
========
info.parentForNewVarDecl=var;
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889690747
GPR[SPVAP]-1659889690747
GPR[EPVAP]-1659889692736
GPR[EPVS]-1659889692737
========
if(relationship.type==SubclassType.INHERITS){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889692738
GPR[SPVAP]-1659889692738
GPR[EPVAP]-1659889694774
GPR[EPVS]-1659889694774
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&subClass){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889694775
GPR[SPVAP]-1659889694775
GPR[EPVAP]-1659889696640
GPR[EPVS]-1659889696640
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
actualReturnType=getNativeType(VOID_TYPE);
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889696641
GPR[SPVAP]-1659889696641
GPR[EPVAP]-1659889698533
GPR[EPVS]-1659889698533
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&parent){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889698534
GPR[SPVAP]-1659889698534
GPR[EPVAP]-1659889700424
GPR[EPVS]-1659889700424
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&!NodeUtil.isFunctionObjectCall(callNode)){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889700426
GPR[SPVAP]-1659889700426
GPR[EPVAP]-1659889704480
GPR[SPVATF]-1659889704480
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889708146
GPR[EPVS]-1659889708146
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&NodeUtil.isFunctionObjectCall(callNode)){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889708148
GPR[SPVAP]-1659889708148
GPR[EPVAP]-1659889712130
GPR[SPVATF]-1659889712130
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889716137
GPR[EPVS]-1659889716137
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&depModule){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889716139
GPR[SPVAP]-1659889716139
GPR[EPVAP]-1659889717993
GPR[EPVS]-1659889717993
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&inlineLocalFunctions){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889717995
GPR[SPVAP]-1659889717995
GPR[EPVAP]-1659889722111
GPR[SPVATF]-1659889722111
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889725864
GPR[EPVS]-1659889725864
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&notProvidedByRequires){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889725865
GPR[SPVAP]-1659889725865
GPR[EPVAP]-1659889727699
GPR[EPVS]-1659889727699
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&di){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889727701
GPR[SPVAP]-1659889727701
GPR[EPVAP]-1659889729640
GPR[EPVS]-1659889729640
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&PRIVATE){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889729642
GPR[SPVAP]-1659889729642
GPR[EPVAP]-1659889731533
GPR[EPVS]-1659889731533
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&var.getScope()){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889731535
GPR[SPVAP]-1659889731535
GPR[EPVAP]-1659889733499
GPR[EPVS]-1659889733499
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&var){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889733500
GPR[SPVAP]-1659889733500
GPR[EPVAP]-1659889735369
GPR[EPVS]-1659889735369
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&callsSeen<callsSeen){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889735370
GPR[SPVAP]-1659889735370
GPR[EPVAP]-1659889737214
GPR[EPVS]-1659889737214
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&maxArgs){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889737215
GPR[SPVAP]-1659889737215
GPR[EPVAP]-1659889739085
GPR[EPVS]-1659889739085
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&numArgs){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889739087
GPR[SPVAP]-1659889739087
GPR[EPVAP]-1659889741018
GPR[EPVS]-1659889741018
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&callNode.getString().endsWith("__")){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889741019
GPR[SPVAP]-1659889741019
GPR[EPVAP]-1659889745021
GPR[SPVATF]-1659889745021
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889748989
GPR[EPVS]-1659889748989
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&callNode){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889748991
GPR[SPVAP]-1659889748991
GPR[EPVAP]-1659889750849
GPR[EPVS]-1659889750849
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&NAME){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889750851
GPR[SPVAP]-1659889750851
GPR[EPVAP]-1659889752805
GPR[EPVS]-1659889752805
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&!referenceAdded){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889752807
GPR[SPVAP]-1659889752807
GPR[EPVAP]-1659889757895
GPR[SPVATF]-1659889757895
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889761507
GPR[EPVS]-1659889761507
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&declaredOverride){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889761508
GPR[SPVAP]-1659889761508
GPR[EPVAP]-1659889763420
GPR[EPVS]-1659889763420
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
if(var!=null){
JSType var.getType()=var.getType();
if(var.getType()!=null){
type=var.getType();
}
}
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889763422
GPR[SPVAP]-1659889763422
GPR[EPVAP]-1659889765619
GPR[EPVS]-1659889765619
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&!t.getInput().isExtern()){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889765621
GPR[SPVAP]-1659889765621
GPR[EPVAP]-1659889769554
GPR[SPVATF]-1659889769554
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889773165
GPR[EPVS]-1659889773165
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&(!t.inGlobalScope()&&blockFunctionInliningEnabled)){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889773167
GPR[SPVAP]-1659889773167
GPR[EPVAP]-1659889777064
GPR[SPVATF]-1659889777064
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889780743
GPR[EPVS]-1659889780743
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&pair.distance*4<fakeName.length()){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889780745
GPR[SPVAP]-1659889780745
GPR[EPVAP]-1659889782600
GPR[EPVS]-1659889782600
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&pair){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889782601
GPR[SPVAP]-1659889782601
GPR[EPVAP]-1659889784463
GPR[EPVS]-1659889784463
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&distance){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889784464
GPR[SPVAP]-1659889784464
GPR[EPVAP]-1659889786336
GPR[EPVS]-1659889786336
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&fakeName.length()){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889786338
GPR[SPVAP]-1659889786338
GPR[EPVAP]-1659889788246
GPR[EPVS]-1659889788246
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&fakeName){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889788248
GPR[SPVAP]-1659889788248
GPR[EPVAP]-1659889790260
GPR[EPVS]-1659889790260
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&superClassHasProperty){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889790263
GPR[SPVAP]-1659889790263
GPR[EPVAP]-1659889792127
GPR[EPVS]-1659889792127
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&sameInput){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889792130
GPR[SPVAP]-1659889792130
GPR[EPVAP]-1659889793993
GPR[EPVS]-1659889793993
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&desiredType){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889793995
GPR[SPVAP]-1659889793995
GPR[EPVAP]-1659889795969
GPR[EPVS]-1659889795969
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&(fakeName!=null&&referencesThis?null:callNode.getString().equals(valueName))){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889795971
GPR[SPVAP]-1659889795971
GPR[EPVAP]-1659889797825
GPR[EPVS]-1659889797825
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&valueName){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889797826
GPR[SPVAP]-1659889797826
GPR[EPVAP]-1659889799934
GPR[EPVS]-1659889799934
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&referencesThis?null:callNode.getString().equals(fakeName)){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889799936
GPR[SPVAP]-1659889799936
GPR[EPVAP]-1659889801782
GPR[EPVS]-1659889801782
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&referencesThis?null:callNode.getString()){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889801783
GPR[SPVAP]-1659889801783
GPR[EPVAP]-1659889803755
GPR[EPVS]-1659889803755
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&GET_COMPILER_OVERRIDES){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889803757
GPR[SPVAP]-1659889803757
GPR[EPVAP]-1659889805807
GPR[EPVS]-1659889805807
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&(inlineLocalFunctions||!NodeUtil.mayHaveSideEffects(var,t.getCompiler()))){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889805809
GPR[SPVAP]-1659889805809
GPR[EPVAP]-1659889807808
GPR[EPVS]-1659889807808
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&isSimpleOp){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889807810
GPR[SPVAP]-1659889807810
GPR[EPVAP]-1659889809680
GPR[EPVS]-1659889809680
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&NodeUtil.mayHaveSideEffects(var,t.getCompiler())){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889809682
GPR[SPVAP]-1659889809682
GPR[EPVAP]-1659889811538
GPR[EPVS]-1659889811538
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&isExtern){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889811540
GPR[SPVAP]-1659889811540
GPR[EPVAP]-1659889813489
GPR[EPVS]-1659889813489
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&ownerType){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889813490
GPR[SPVAP]-1659889813490
GPR[EPVAP]-1659889815332
GPR[EPVS]-1659889815332
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&inExterns){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889815334
GPR[SPVAP]-1659889815334
GPR[EPVAP]-1659889817166
GPR[EPVS]-1659889817166
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&var.getString().equals(relationship.subclassName)){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889817169
GPR[SPVAP]-1659889817169
GPR[EPVAP]-1659889819411
GPR[EPVS]-1659889819411
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&callNode.getFirstChild()==callNode){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889819413
GPR[SPVAP]-1659889819413
GPR[EPVAP]-1659889823696
GPR[SPVATF]-1659889823696
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889827306
GPR[EPVS]-1659889827306
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&(classifyCallSite(callNode)==CallSiteType.DECOMPOSABLE_EXPRESSION||callSiteType==CallSiteType.EXPRESSION)){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889827309
GPR[SPVAP]-1659889827309
GPR[EPVAP]-1659889829176
GPR[EPVS]-1659889829176
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&callSiteType){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889829177
GPR[SPVAP]-1659889829177
GPR[EPVAP]-1659889831171
GPR[EPVS]-1659889831171
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&DECOMPOSABLE_EXPRESSION){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889831172
GPR[SPVAP]-1659889831172
GPR[EPVAP]-1659889833087
GPR[EPVS]-1659889833087
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&EXPRESSION){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889833089
GPR[SPVAP]-1659889833089
GPR[EPVAP]-1659889835109
GPR[EPVS]-1659889835109
========
if(classifyCallSite(callNode)==CallSiteType.UNSUPPORTED){
return CanInlineResult.NO;
}
if(!referenceAdded&&mode==InliningMode.DIRECT&&blockFunctionInliningEnabled){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889835110
GPR[SPVAP]-1659889835110
GPR[EPVAP]-1659889837038
GPR[EPVS]-1659889837038
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&var!=null&&isGlobalFunctionDeclaration(t,firstChild)){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889837041
GPR[SPVAP]-1659889837041
GPR[EPVAP]-1659889839046
GPR[EPVS]-1659889839046
========
if(!referenceAdded&&mode==InliningMode.DIRECT&&firstChild){
mode=InliningMode.BLOCK;
referenceAdded=maybeAddReferenceUsingMode(t,fs,callNode,module,mode);
}

========
GPR[SPVS]-1659889839047
GPR[SPVAP]-1659889839047
GPR[EPVAP]-1659889841100
GPR[EPVS]-1659889841100
GPR[ESUN]-1659889841104
GPR[SSUN]-1659889841104
com.google.javascript.jscomp.InlineFunctions,504
GPR[ESUN]-1659889841740
GPR[SSUN]-1659889841740
com.google.javascript.jscomp.InlineFunctions,541
========
if(result!=CanInlineResult.NO){
boolean decompose=(result==CanInlineResult.AFTER_PREPARATION);
fs.addReference(new Reference(callNode,module,mode,decompose));
return true;
}
return true;

========
GPR[SPVS]-1659889843437
GPR[SPVAP]-1659889843437
GPR[EPVAP]-1659889852315
GPR[SPVATF]-1659889852315
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889856382
GPR[EPVS]-1659889856382
========
if(fs.getCodingConvention().getSingletonGetterClassName(callNode)!=null){
return true;
}
if(result!=CanInlineResult.NO){
boolean decompose=(result==CanInlineResult.AFTER_PREPARATION);
fs.addReference(new Reference(callNode,module,mode,decompose));
return true;
}
return false;

========
GPR[SPVS]-1659889856384
GPR[SPVAP]-1659889856384
GPR[EPVAP]-1659889858265
GPR[EPVS]-1659889858265
========
if(callNode.isOnlyModifiesArgumentsCall()&&allArgsUnescapedLocal(callNode)){
return false;
}
if(result!=CanInlineResult.NO){
boolean decompose=(result==CanInlineResult.AFTER_PREPARATION);
fs.addReference(new Reference(callNode,module,mode,decompose));
return true;
}
return false;

========
GPR[SPVS]-1659889858269
GPR[SPVAP]-1659889858269
GPR[EPVAP]-1659889860126
GPR[EPVS]-1659889860127
========
if(callNode.getFirstChild().isName()&&CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())){
return false;
}
if(result!=CanInlineResult.NO){
boolean decompose=(result==CanInlineResult.AFTER_PREPARATION);
fs.addReference(new Reference(callNode,module,mode,decompose));
return true;
}
return false;

========
GPR[SPVS]-1659889860128
GPR[SPVAP]-1659889860128
GPR[EPVAP]-1659889862016
GPR[EPVS]-1659889862016
========
if(result!=CanInlineResult.NO){
boolean decompose=(result==CanInlineResult.AFTER_PREPARATION);
fs.addReference(new Reference(callNode,module,mode,decompose));
return true;
}
if(!callNode.isCall()){
throw new IllegalStateException("Expected CALL node, got "+Token.name(callNode.getType()));
}
return false;

========
GPR[SPVS]-1659889862018
GPR[SPVAP]-1659889862018
GPR[EPVAP]-1659889866068
GPR[SPVATF]-1659889866068
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889870288
GPR[EPVS]-1659889870288
========
if(callNode.isOnlyModifiesArgumentsCall()&&allArgsUnescapedLocal(callNode)){
return false;
}
if(result!=CanInlineResult.NO){
boolean decompose=(result==CanInlineResult.AFTER_PREPARATION);
fs.addReference(new Reference(callNode,module,mode,decompose));
return true;
}
if(!callNode.isCall()){
throw new IllegalStateException("Expected CALL node, got "+Token.name(callNode.getType()));
}
return false;

========
GPR[SPVS]-1659889870289
GPR[SPVAP]-1659889870289
GPR[EPVAP]-1659889872220
GPR[EPVS]-1659889872220
GPR[ESUN]-1659889872221
GPR[SSUN]-1659889872222
com.google.javascript.jscomp.RenameLabels,188
========
case Token.THIS :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889874791
GPR[SPVAP]-1659889874791
GPR[EPVAP]-1659889883831
GPR[SPVATF]-1659889883831
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889887791
GPR[EPVS]-1659889887791
========
case Token.FUNCTION :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889887792
GPR[SPVAP]-1659889887792
GPR[EPVAP]-1659889891728
GPR[SPVATF]-1659889891728
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889895302
GPR[EPVS]-1659889895302
========
default :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889895303
GPR[SPVAP]-1659889895303
GPR[EPVAP]-1659889899116
GPR[SPVATF]-1659889899116
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889902796
GPR[EPVS]-1659889902796
========
case Token.COMMA :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889902797
GPR[SPVAP]-1659889902797
GPR[EPVAP]-1659889906958
GPR[SPVATF]-1659889906958
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889912358
GPR[EPVS]-1659889912358
========
case Token.ARRAYLIT :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889912359
GPR[SPVAP]-1659889912359
GPR[EPVAP]-1659889916164
GPR[SPVATF]-1659889916165
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889919725
GPR[EPVS]-1659889919725
========
case Token.HOOK :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889919726
GPR[SPVAP]-1659889919726
GPR[EPVAP]-1659889923501
GPR[SPVATF]-1659889923501
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889927390
GPR[EPVS]-1659889927390
========
case Token.DELPROP :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889927391
GPR[SPVAP]-1659889927391
GPR[EPVAP]-1659889931154
GPR[SPVATF]-1659889931154
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889934728
GPR[EPVS]-1659889934728
========
case Token.GETPROP :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889934729
GPR[SPVAP]-1659889934729
GPR[EPVAP]-1659889938452
GPR[SPVATF]-1659889938452
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889942085
GPR[EPVS]-1659889942085
========
case Token.DEFAULT_CASE :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889942086
GPR[SPVAP]-1659889942086
GPR[EPVAP]-1659889946168
GPR[SPVATF]-1659889946168
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889950334
GPR[EPVS]-1659889950334
========
case Token.DO :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889950335
GPR[SPVAP]-1659889950335
GPR[EPVAP]-1659889954211
GPR[SPVATF]-1659889954211
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889958193
GPR[EPVS]-1659889958193
========
case Token.CONTINUE :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889958194
GPR[SPVAP]-1659889958194
GPR[EPVAP]-1659889960144
GPR[EPVS]-1659889960144
========
case NUMBER :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889960146
GPR[SPVAP]-1659889960146
GPR[EPVAP]-1659889962398
GPR[EPVS]-1659889962398
========
case Token.BITAND :
return tryRotateAssociativeOperator(node);

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889962401
GPR[SPVAP]-1659889962401
GPR[EPVAP]-1659889964536
GPR[EPVS]-1659889964536
========
case Token.NE :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889964537
GPR[SPVAP]-1659889964537
GPR[EPVAP]-1659889968464
GPR[SPVATF]-1659889968464
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889972272
GPR[EPVS]-1659889972272
========
case Token.SCRIPT :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889972274
GPR[SPVAP]-1659889972274
GPR[EPVAP]-1659889976313
GPR[SPVATF]-1659889976313
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889980153
GPR[EPVS]-1659889980153
========
case Token.BITOR :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889980154
GPR[SPVAP]-1659889980154
GPR[EPVAP]-1659889985388
GPR[SPVATF]-1659889985388
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889989288
GPR[EPVS]-1659889989288
========
case Token.NAME :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889989288
GPR[SPVAP]-1659889989288
GPR[EPVAP]-1659889993269
GPR[SPVATF]-1659889993269
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659889997010
GPR[EPVS]-1659889997010
========
case Token.SHEQ :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659889997011
GPR[SPVAP]-1659889997011
GPR[EPVAP]-1659890000815
GPR[SPVATF]-1659890000815
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890004498
GPR[EPVS]-1659890004498
========
case Token.THROW :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890004499
GPR[SPVAP]-1659890004499
GPR[EPVAP]-1659890008394
GPR[SPVATF]-1659890008394
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890012065
GPR[EPVS]-1659890012065
========
case Token.OBJECTLIT :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890012067
GPR[SPVAP]-1659890012067
GPR[EPVAP]-1659890015830
GPR[SPVATF]-1659890015830
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890019402
GPR[EPVS]-1659890019402
========
case Token.OR :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890019403
GPR[SPVAP]-1659890019403
GPR[EPVAP]-1659890023313
GPR[SPVATF]-1659890023313
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890027221
GPR[EPVS]-1659890027221
========
case Token.IF :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890027222
GPR[SPVAP]-1659890027222
GPR[EPVAP]-1659890031121
GPR[SPVATF]-1659890031121
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890034775
GPR[EPVS]-1659890034775
========
case Token.WITH :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890034777
GPR[SPVAP]-1659890034777
GPR[EPVAP]-1659890038671
GPR[SPVATF]-1659890038671
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890042314
GPR[EPVS]-1659890042314
========
case Token.VOID :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890042315
GPR[SPVAP]-1659890042315
GPR[EPVAP]-1659890046198
GPR[SPVATF]-1659890046198
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890050412
GPR[EPVS]-1659890050412
========
case Token.BLOCK :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890050414
GPR[SPVAP]-1659890050414
GPR[EPVAP]-1659890054166
GPR[SPVATF]-1659890054166
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890057748
GPR[EPVS]-1659890057748
========
case Token.EXPR_RESULT :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890057749
GPR[SPVAP]-1659890057749
GPR[EPVAP]-1659890061700
GPR[SPVATF]-1659890061700
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890065642
GPR[EPVS]-1659890065642
========
case Token.LABEL :
Preconditions.checkArgument(parent.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890065644
GPR[SPVAP]-1659890065644
GPR[EPVAP]-1659890069477
GPR[SPVATF]-1659890069477
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890073337
GPR[EPVS]-1659890073337
========
default :

case Token.LABEL :
Preconditions.checkArgument(parent.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890073338
GPR[SPVAP]-1659890073338
GPR[EPVAP]-1659890077159
GPR[SPVATF]-1659890077159
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890080917
GPR[EPVS]-1659890080917
========
case Token.DO :
tryMinimizeCondition(NodeUtil.getConditionExpression(node));
return node;

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890080919
GPR[SPVAP]-1659890080919
GPR[EPVAP]-1659890082808
GPR[EPVS]-1659890082808
========
case Token.FOR :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890082809
GPR[SPVAP]-1659890082809
GPR[EPVAP]-1659890086628
GPR[SPVATF]-1659890086628
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890090289
GPR[EPVS]-1659890090289
========
case Token.WHILE :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890090290
GPR[SPVAP]-1659890090290
GPR[EPVAP]-1659890094276
GPR[SPVATF]-1659890094276
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890097841
GPR[EPVS]-1659890097841
========
case Token.SWITCH :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890097842
GPR[SPVAP]-1659890097842
GPR[EPVAP]-1659890101676
GPR[SPVATF]-1659890101676
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890105374
GPR[EPVS]-1659890105374
========
case Token.OR :
return node!=parent.getFirstChild();

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890105375
GPR[SPVAP]-1659890105375
GPR[EPVAP]-1659890107238
GPR[EPVS]-1659890107238
========
case AssignExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890107239
GPR[SPVAP]-1659890107239
GPR[EPVAP]-1659890109234
GPR[EPVS]-1659890109234
========
case BlockStmt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890109235
GPR[SPVAP]-1659890109236
GPR[EPVAP]-1659890111077
GPR[EPVS]-1659890111077
========
case CallExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890111078
GPR[SPVAP]-1659890111078
GPR[EPVAP]-1659890113310
GPR[EPVS]-1659890113310
========
case CatchClause :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890113313
GPR[SPVAP]-1659890113313
GPR[EPVAP]-1659890115120
GPR[EPVS]-1659890115120
========
case ContinueStmt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890115121
GPR[SPVAP]-1659890115121
GPR[EPVAP]-1659890116976
GPR[EPVS]-1659890116976
========
case DataProp :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890116977
GPR[SPVAP]-1659890116977
GPR[EPVAP]-1659890118820
GPR[EPVS]-1659890118820
========
case SetterProp :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890118821
GPR[SPVAP]-1659890118821
GPR[EPVAP]-1659890120668
GPR[EPVS]-1659890120668
========
case DeleteExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890120669
GPR[SPVAP]-1659890120669
GPR[EPVAP]-1659890122516
GPR[EPVS]-1659890122516
========
case Empty :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890122517
GPR[SPVAP]-1659890122517
GPR[EPVAP]-1659890124512
GPR[EPVS]-1659890124512
========
case EvalExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890124513
GPR[SPVAP]-1659890124513
GPR[EPVAP]-1659890126356
GPR[EPVS]-1659890126356
========
case ForStmt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890126357
GPR[SPVAP]-1659890126357
GPR[EPVAP]-1659890128187
GPR[EPVS]-1659890128187
========
case FunctionExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890128188
GPR[SPVAP]-1659890128188
GPR[EPVAP]-1659890130066
GPR[EPVS]-1659890130066
========
case IdPatt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890130067
GPR[SPVAP]-1659890130067
GPR[EPVAP]-1659890132018
GPR[EPVS]-1659890132018
========
case InitPatt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890132019
GPR[SPVAP]-1659890132019
GPR[EPVAP]-1659890133948
GPR[EPVS]-1659890133948
========
case LabelledStmt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890133950
GPR[SPVAP]-1659890133950
GPR[EPVAP]-1659890136254
GPR[EPVS]-1659890136254
========
case LogicalAndExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890136256
GPR[SPVAP]-1659890136256
GPR[EPVAP]-1659890138101
GPR[EPVS]-1659890138101
========
case MemberExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890138103
GPR[SPVAP]-1659890138103
GPR[EPVAP]-1659890139906
GPR[EPVS]-1659890139907
========
case ObjectExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890139908
GPR[SPVAP]-1659890139908
GPR[EPVAP]-1659890141725
GPR[EPVS]-1659890141725
========
case Program :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890141726
GPR[SPVAP]-1659890141726
GPR[EPVAP]-1659890143518
GPR[EPVS]-1659890143518
========
case RegExpExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890143519
GPR[SPVAP]-1659890143519
GPR[EPVAP]-1659890145354
GPR[EPVS]-1659890145354
========
case SwitchStmt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890145355
GPR[SPVAP]-1659890145355
GPR[EPVAP]-1659890147207
GPR[EPVS]-1659890147207
========
case ThrowStmt :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890147208
GPR[SPVAP]-1659890147208
GPR[EPVAP]-1659890149143
GPR[EPVS]-1659890149143
========
case TypeofExpr :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890149144
GPR[SPVAP]-1659890149144
GPR[EPVAP]-1659890151068
GPR[EPVS]-1659890151068
========
case VarDecl :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890151070
GPR[SPVAP]-1659890151070
GPR[EPVAP]-1659890153175
GPR[EPVS]-1659890153175
========
case Token.IF :
return NodeUtil.getConditionExpression(parent)!=node;

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890153176
GPR[SPVAP]-1659890153176
GPR[EPVAP]-1659890155339
GPR[EPVS]-1659890155339
========
case Token.FOR :
return NodeUtil.getConditionExpression(parent)==node;

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890155340
GPR[SPVAP]-1659890155340
GPR[EPVAP]-1659890157197
GPR[EPVS]-1659890157197
========
case Token.INSTANCEOF :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890157198
GPR[SPVAP]-1659890157198
GPR[EPVAP]-1659890161106
GPR[SPVATF]-1659890161106
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890164722
GPR[EPVS]-1659890164722
========
case Token.LABEL :
resultName=parent.getFirstChild().getString();
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890164724
GPR[SPVAP]-1659890164724
GPR[EPVAP]-1659890166670
GPR[EPVS]-1659890166670
========
case VAR_DECL_SIMPLE_ASSIGNMENT :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890166671
GPR[SPVAP]-1659890166671
GPR[EPVAP]-1659890168583
GPR[EPVS]-1659890168583
========
case Token.BITAND :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890168584
GPR[SPVAP]-1659890168584
GPR[EPVAP]-1659890172337
GPR[SPVATF]-1659890172337
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890176269
GPR[EPVS]-1659890176269
========
case Token.LE :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890176270
GPR[SPVAP]-1659890176270
GPR[EPVAP]-1659890180032
GPR[SPVATF]-1659890180032
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890183810
GPR[EPVS]-1659890183810
========
case Token.GE :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890183813
GPR[SPVAP]-1659890183813
GPR[EPVAP]-1659890188260
GPR[SPVATF]-1659890188260
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890192283
GPR[EPVS]-1659890192283
========
case Token.RSH :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890192284
GPR[SPVAP]-1659890192284
GPR[EPVAP]-1659890196103
GPR[SPVATF]-1659890196103
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890200248
GPR[EPVS]-1659890200248
========
case Token.ADD :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890200249
GPR[SPVAP]-1659890200249
GPR[EPVAP]-1659890204043
GPR[SPVATF]-1659890204043
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890207665
GPR[EPVS]-1659890207665
========
case Token.MUL :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890207666
GPR[SPVAP]-1659890207666
GPR[EPVAP]-1659890211432
GPR[SPVATF]-1659890211432
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890215006
GPR[EPVS]-1659890215006
========
case Token.MOD :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890215007
GPR[SPVAP]-1659890215007
GPR[EPVAP]-1659890218810
GPR[SPVATF]-1659890218810
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890222618
GPR[EPVS]-1659890222618
========
case Token.BITNOT :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890222620
GPR[SPVAP]-1659890222620
GPR[EPVAP]-1659890226496
GPR[SPVATF]-1659890226496
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890230643
GPR[EPVS]-1659890230643
========
case Token.NEG :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890230644
GPR[SPVAP]-1659890230644
GPR[EPVAP]-1659890234623
GPR[SPVATF]-1659890234623
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890238631
GPR[EPVS]-1659890238631
========
case Token.ASSIGN_BITOR :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890238633
GPR[SPVAP]-1659890238633
GPR[EPVAP]-1659890242954
GPR[SPVATF]-1659890242954
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890246506
GPR[EPVS]-1659890246506
========
case Token.ASSIGN_BITAND :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890246507
GPR[SPVAP]-1659890246507
GPR[EPVAP]-1659890250688
GPR[SPVATF]-1659890250688
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890254553
GPR[EPVS]-1659890254553
========
case Token.ASSIGN_RSH :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890254555
GPR[SPVAP]-1659890254555
GPR[EPVAP]-1659890258420
GPR[SPVATF]-1659890258420
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890261997
GPR[EPVS]-1659890261997
========
case Token.ASSIGN_ADD :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890261998
GPR[SPVAP]-1659890261998
GPR[EPVAP]-1659890265910
GPR[SPVATF]-1659890265910
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890269924
GPR[EPVS]-1659890269924
========
case Token.ASSIGN_MUL :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890269925
GPR[SPVAP]-1659890269925
GPR[EPVAP]-1659890273708
GPR[SPVATF]-1659890273708
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890277529
GPR[EPVS]-1659890277529
========
case Token.ASSIGN_MOD :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890277530
GPR[SPVAP]-1659890277530
GPR[EPVAP]-1659890281460
GPR[SPVATF]-1659890281460
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890285029
GPR[EPVS]-1659890285030
========
case Token.INC :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890285030
GPR[SPVAP]-1659890285031
GPR[EPVAP]-1659890288853
GPR[SPVATF]-1659890288853
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890292517
GPR[EPVS]-1659890292517
========
Preconditions.checkState(parent!=null);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890292519
GPR[SPVAP]-1659890292519
GPR[EPVAP]-1659890294185
GPR[EPVS]-1659890294185
========
case Token.AND :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890294186
GPR[SPVAP]-1659890294186
GPR[EPVAP]-1659890297963
GPR[SPVATF]-1659890297963
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890301846
GPR[EPVS]-1659890301846
========
case Token.RETURN :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890301847
GPR[SPVAP]-1659890301847
GPR[EPVAP]-1659890305861
GPR[SPVATF]-1659890305861
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890310181
GPR[EPVS]-1659890310181
========
case Token.CASE :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890310182
GPR[SPVAP]-1659890310182
GPR[EPVAP]-1659890313992
GPR[SPVATF]-1659890313993
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890317976
GPR[EPVS]-1659890317976
========
case Token.LABEL :
Preconditions.checkState(parent.hasOneChild());
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890317977
GPR[SPVAP]-1659890317977
GPR[EPVAP]-1659890321846
GPR[SPVATF]-1659890321846
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890325797
GPR[EPVS]-1659890325797
========
case Token.LABEL :
replaceWithRhs(node,parent);
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890325798
GPR[SPVAP]-1659890325798
GPR[EPVAP]-1659890327654
GPR[EPVS]-1659890327654
========
case Token.LABEL :
Preconditions.checkState(parent.hasOneChild());
replaceWithRhs(node,parent);

visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890327655
GPR[SPVAP]-1659890327655
GPR[EPVAP]-1659890329623
GPR[EPVS]-1659890329623
========
case Token.FUNCTION :

case Token.LABEL :
Preconditions.checkState(parent.hasOneChild());
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890329625
GPR[SPVAP]-1659890329625
GPR[EPVAP]-1659890333510
GPR[SPVATF]-1659890333510
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890337111
GPR[EPVS]-1659890337111
========
case Token.WITH :
return node!=parent.getFirstChild();

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890337112
GPR[SPVAP]-1659890337112
GPR[EPVAP]-1659890338929
GPR[EPVS]-1659890338929
========
case Token.LABEL :
NodeUtil.maybeAddFinally(node);
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890338930
GPR[SPVAP]-1659890338930
GPR[EPVAP]-1659890342916
GPR[SPVATF]-1659890342916
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890346566
GPR[EPVS]-1659890346566
========
case Token.VAR :
Preconditions.checkState(node==parent.getFirstChild());
return parent;

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890346567
GPR[SPVAP]-1659890346567
GPR[EPVAP]-1659890348556
GPR[EPVS]-1659890348556
========
case Token.ASSIGN_MOD :
maybeEliminateAssignmentByLvalueName(nodeTraversal,node,parent);
break;

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890348558
GPR[SPVAP]-1659890348558
GPR[EPVAP]-1659890350384
GPR[EPVS]-1659890350384
========
case Token.CALL :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890350385
GPR[SPVAP]-1659890350385
GPR[EPVAP]-1659890354182
GPR[SPVATF]-1659890354182
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890357715
GPR[EPVS]-1659890357715
========
case Token.NAME :
handleCandidateProvideDefinition(nodeTraversal,node,parent);
break;

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890357716
GPR[SPVAP]-1659890357716
GPR[EPVAP]-1659890359730
GPR[EPVS]-1659890359730
========
case Token.LABEL :
typeable=visitName(nodeTraversal,node,parent);
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890359731
GPR[SPVAP]-1659890359731
GPR[EPVAP]-1659890361724
GPR[EPVS]-1659890361724
========
case Token.PARAM_LIST :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890361725
GPR[SPVAP]-1659890361725
GPR[EPVAP]-1659890365517
GPR[SPVATF]-1659890365517
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890369466
GPR[EPVS]-1659890369466
========
case Token.LABEL :
typeable=!parent.isExprResult();
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890369467
GPR[SPVAP]-1659890369467
GPR[EPVAP]-1659890371282
GPR[EPVS]-1659890371283
========
NodeUtil.redeclareVarsInsideBranch(node);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890371284
GPR[SPVAP]-1659890371284
GPR[EPVAP]-1659890373170
GPR[EPVS]-1659890373170
========
NodeUtil.removeChild(parent,node);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890373171
GPR[SPVAP]-1659890373171
GPR[EPVAP]-1659890374824
GPR[EPVS]-1659890374824
========
case Token.OR :
return (node==parent.getFirstChild())?true:isExpressionResultUsed(parent);

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890374825
GPR[SPVAP]-1659890374825
GPR[EPVAP]-1659890376781
GPR[EPVS]-1659890376781
========
parent.replaceChild(node,parent);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890376782
GPR[SPVAP]-1659890376782
GPR[EPVAP]-1659890378654
GPR[EPVS]-1659890378654
========
if(parent.isBlock()){
NodeUtil.tryMergeBlock(newChild);
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890378655
GPR[SPVAP]-1659890378655
GPR[EPVAP]-1659890380323
GPR[EPVS]-1659890380323
========
case Token.STRING :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890380324
GPR[SPVAP]-1659890380324
GPR[EPVAP]-1659890384199
GPR[SPVATF]-1659890384199
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890388157
GPR[EPVS]-1659890388157
========
case Token.LABEL :
if((parent!=null)&&(parent.isVar())){
messageKey=node.getString();
isVar=true;
}else {
return ;
}
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890388159
GPR[SPVAP]-1659890388159
GPR[EPVAP]-1659890390115
GPR[EPVS]-1659890390115
========
case Token.LABEL :
msgNode=node.getFirstChild();
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890390116
GPR[SPVAP]-1659890390116
GPR[EPVAP]-1659890392105
GPR[EPVS]-1659890392105
========
case Token.LABEL :
msgNodeParent=node;
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890392106
GPR[SPVAP]-1659890392106
GPR[EPVAP]-1659890394332
GPR[EPVS]-1659890394332
========
case Token.LABEL :
if((parent!=null)&&(parent.isVar())){
messageKey=node.getString();
isVar=true;
}else {
return ;
}
msgNode=node.getFirstChild();
msgNodeParent=node;

visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890394333
GPR[SPVAP]-1659890394333
GPR[EPVAP]-1659890396266
GPR[EPVS]-1659890396266
========
case Token.EXPR_RESULT :
parent=node;
next=next.getFirstChild();
break;

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890396268
GPR[SPVAP]-1659890396268
GPR[EPVAP]-1659890398112
GPR[EPVS]-1659890398112
========
case Token.LABEL :
Preconditions.checkState(parent.isExprResult());
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890398113
GPR[SPVAP]-1659890398113
GPR[EPVAP]-1659890401886
GPR[SPVATF]-1659890401886
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890405789
GPR[EPVS]-1659890405789
========
default :

case Token.LABEL :
Preconditions.checkState(parent.isExprResult());
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890405791
GPR[SPVAP]-1659890405791
GPR[EPVAP]-1659890409597
GPR[SPVATF]-1659890409597
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890413300
GPR[EPVS]-1659890413300
========
Preconditions.checkState(removeUnused==true);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890413301
GPR[SPVAP]-1659890413302
GPR[EPVAP]-1659890414999
GPR[EPVS]-1659890414999
========
case Token.LABEL :
checkNameVisibility(nodeTraversal,node,parent);
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890415000
GPR[SPVAP]-1659890415000
GPR[EPVAP]-1659890416947
GPR[EPVS]-1659890416947
========
case Token.LABEL :
checkStringExprNode(node.getNext());
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890416949
GPR[SPVAP]-1659890416949
GPR[EPVAP]-1659890418992
GPR[EPVS]-1659890418992
========
if(node.getFirstChild().getType()!=Token.GETPROP&&first.getType()!=Token.GETELEM){
node.putBooleanProp(Node.FREE_CALL,true);
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890418995
GPR[SPVAP]-1659890418995
GPR[EPVAP]-1659890421316
GPR[EPVS]-1659890421316
========
case Token.LABEL :
typeable=!(parent.isAssign()&&parent.getFirstChild()==parent);
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890421318
GPR[SPVAP]-1659890421318
GPR[EPVAP]-1659890423250
GPR[EPVS]-1659890423250
========
case Token.GETELEM :

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890423251
GPR[SPVAP]-1659890423251
GPR[EPVAP]-1659890427180
GPR[SPVATF]-1659890427181
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890431020
GPR[EPVS]-1659890431020
========
case Token.LABEL :
Preconditions.checkState(parent.getFirstChild()==null);
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890431021
GPR[SPVAP]-1659890431021
GPR[EPVAP]-1659890434851
GPR[SPVATF]-1659890434851
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659890438822
GPR[EPVS]-1659890438822
========
case Token.LABEL :
recordConsumers(nodeTraversal,parent,node);
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890438823
GPR[SPVAP]-1659890438823
GPR[EPVAP]-1659890440877
GPR[EPVS]-1659890440877
========
super.visit(nodeTraversal,node,parent);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890440879
GPR[SPVAP]-1659890440879
GPR[EPVAP]-1659890442525
GPR[EPVS]-1659890442525
========
compiler.reportCodeChange();
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890442526
GPR[SPVAP]-1659890442526
GPR[EPVAP]-1659890444472
GPR[EPVS]-1659890444472
========
parseDirectives(node);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890444473
GPR[SPVAP]-1659890444473
GPR[EPVAP]-1659890446311
GPR[EPVS]-1659890446311
========
reportCodeChange();
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890446313
GPR[SPVAP]-1659890446313
GPR[EPVAP]-1659890447984
GPR[EPVS]-1659890447984
========
if(!parent.isBlock()){
Preconditions.checkState(config.isIdeMode);
bodyNode=IR.block();
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890447986
GPR[SPVAP]-1659890447986
GPR[EPVAP]-1659890449980
GPR[EPVS]-1659890449980
========
node.addChildToBack(parent);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890449981
GPR[SPVAP]-1659890449981
GPR[EPVAP]-1659890451876
GPR[EPVS]-1659890451876
========
case Token.LABEL :
reportCodeChange();
visitLabel(node,parent);
break;



========
GPR[SPVS]-1659890451878
GPR[SPVAP]-1659890451878
GPR[EPVAP]-1659890453707
GPR[EPVS]-1659890453707
========
parent.addChildToFront(node);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890453709
GPR[SPVAP]-1659890453709
GPR[EPVAP]-1659890455356
GPR[EPVS]-1659890455356
========
NodeUtil.redeclareVarsInsideBranch(node);
reportCodeChange();
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890455357
GPR[SPVAP]-1659890455357
GPR[EPVAP]-1659890457160
GPR[EPVS]-1659890457160
========
case ALIASING_GET :
Node node=alias.node.cloneTree();
Node node=ref.node;
node.getParent().replaceChild(node,newNode);

case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890457161
GPR[SPVAP]-1659890457161
GPR[EPVAP]-1659890458969
GPR[EPVS]-1659890458969
========
Preconditions.checkState(node.getChildCount()==2);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890458970
GPR[SPVAP]-1659890458970
GPR[EPVAP]-1659890461184
GPR[EPVS]-1659890461184
========
parent.replaceChild(parent,parent.removeFirstChild());
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890461185
GPR[SPVAP]-1659890461185
GPR[EPVAP]-1659890463091
GPR[EPVS]-1659890463091
========
if(node.isCall()&&parent==gramps.getFirstChild()){
if(node==parent.getFirstChild()&&parent.getChildCount()==2&&expr.getNext().isName()&&"eval".equals(expr.getNext().getString())){
return true;
}
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890463092
GPR[SPVAP]-1659890463092
GPR[EPVAP]-1659890464948
GPR[EPVS]-1659890464949
========
parent.replaceChild(parent,NodeUtil.newExpr(node));
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890464950
GPR[SPVAP]-1659890464950
GPR[EPVAP]-1659890466960
GPR[EPVS]-1659890466960
========
if(node.getDirectives()==null){
return ;
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890466961
GPR[SPVAP]-1659890466961
GPR[EPVAP]-1659890468963
GPR[EPVS]-1659890468963
========
parent.replaceChild(node,node.getFirstChild().getNext());
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890468965
GPR[SPVAP]-1659890468965
GPR[EPVAP]-1659890470636
GPR[EPVS]-1659890470636
========
id+=estimateCostOneLevel(parent);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890470638
GPR[SPVAP]-1659890470638
GPR[EPVAP]-1659890472273
GPR[EPVS]-1659890472273
========
for(Node parent : node.children()){
processNode(child,new JsonML(TagType.BlockStmt));
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890472275
GPR[SPVAP]-1659890472275
GPR[EPVAP]-1659890474182
GPR[EPVS]-1659890474182
========
if(!nodeTraversal.inGlobalScope()&&NodeUtil.isHoistedFunctionDeclaration(parent)){
parent.addChildToFront(value.detachFromParent());
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890474183
GPR[SPVAP]-1659890474183
GPR[EPVAP]-1659890476068
GPR[EPVS]-1659890476068
========
parent.detachFromParent();
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890476070
GPR[SPVAP]-1659890476070
GPR[EPVAP]-1659890477958
GPR[EPVS]-1659890477958
========
parent.detachFromParent();
reportCodeChange();
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890477959
GPR[SPVAP]-1659890477959
GPR[EPVAP]-1659890479909
GPR[EPVS]-1659890479909
========
node.addChildToBack(node);
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890479910
GPR[SPVAP]-1659890479910
GPR[EPVAP]-1659890481616
GPR[EPVS]-1659890481616
========
if(node.isName()){
Preconditions.checkArgument(parent.isFunction()||parent.isVar());
}else {
Preconditions.checkArgument(n.isGetProp()&&(parent.isAssign()||parent.isExprResult()));
}
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890481619
GPR[SPVAP]-1659890481619
GPR[EPVAP]-1659890483562
GPR[EPVS]-1659890483562
========
node.setLineno(node.getFirstChild().getLineno());
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890483564
GPR[SPVAP]-1659890483564
GPR[EPVAP]-1659890485226
GPR[EPVS]-1659890485226
========
node.setCharno(node.getFirstChild().getCharno());
case Token.LABEL :
visitLabel(node,parent);
break;


========
GPR[SPVS]-1659890485227
GPR[SPVAP]-1659890485227
GPR[EPVAP]-1659890486894
GPR[EPVS]-1659890486894
========
swtich (node.getType()){
default :
return new CodePrinter.Builder(node).build();

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890490844
GPR[SPVAP]-1659890490844
GPR[EPVAP]-1659890492754
GPR[EPVS]-1659890492754
========
swtich (node.getType()){
default :
if(node.isBlock()&&node.isSyntheticBlock()){
createEdge(node,Branch.SYN_BLOCK,computeFollowNode(node,this));
}
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890492756
GPR[SPVAP]-1659890492756
GPR[EPVAP]-1659890494413
GPR[EPVS]-1659890494413
========
swtich (node.getType()){
case Token.SHNE :
node.setType(Token.SHEQ);
return this;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890494415
GPR[SPVAP]-1659890494415
GPR[EPVAP]-1659890496064
GPR[EPVS]-1659890496064
========
swtich (node.getType()){
default :
return this.addNot();

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890496065
GPR[SPVAP]-1659890496065
GPR[EPVAP]-1659890497764
GPR[EPVS]-1659890497764
========
swtich (node.getType()){
case Token.SHNE :
node.setType(Token.SHEQ);
return this;

default :
return this.addNot();


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890497765
GPR[SPVAP]-1659890497765
GPR[EPVAP]-1659890499708
GPR[EPVS]-1659890499708
========
swtich (node.getType()){
case Token.LABEL :
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890499710
GPR[SPVAP]-1659890499710
GPR[EPVAP]-1659890501484
GPR[EPVS]-1659890501484
========
swtich (node.getType()){
default :
throw new IllegalArgumentException("Unsupported parent node type in replaceWithRhs "+Token.name(parent.getType()));

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890501485
GPR[SPVAP]-1659890501485
GPR[EPVAP]-1659890503462
GPR[EPVS]-1659890503462
========
swtich (node.getType()){
case Token.LABEL :
break;

default :
throw new IllegalArgumentException("Unsupported parent node type in replaceWithRhs "+Token.name(parent.getType()));


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890503463
GPR[SPVAP]-1659890503463
GPR[EPVAP]-1659890505634
GPR[EPVS]-1659890505634
========
swtich (node.getType()){
case Token.ASSIGN :
Preconditions.checkArgument(parent.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890505636
GPR[SPVAP]-1659890505636
GPR[EPVAP]-1659890507337
GPR[EPVS]-1659890507337
========
swtich (node.getType()){
default :
throw new IllegalArgumentException("Unsupported node type in replaceWithRhs "+Token.name(node.getType()));

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890507338
GPR[SPVAP]-1659890507338
GPR[EPVAP]-1659890508983
GPR[EPVS]-1659890508983
========
swtich (node.getType()){
case Token.ASSIGN :
Preconditions.checkArgument(parent.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
break;

default :
throw new IllegalArgumentException("Unsupported node type in replaceWithRhs "+Token.name(node.getType()));


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890508984
GPR[SPVAP]-1659890508984
GPR[EPVAP]-1659890510632
GPR[EPVS]-1659890510632
========
if(node==null){
throw new IllegalArgumentException("Expected a string; found: null");
}
swtich (node.getType()){
case Token.ASSIGN :
Preconditions.checkArgument(parent.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
break;

default :
throw new IllegalArgumentException("Unsupported node type in replaceWithRhs "+Token.name(node.getType()));


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890510633
GPR[SPVAP]-1659890510633
GPR[EPVAP]-1659890512303
GPR[EPVS]-1659890512303
========
case Token.THIS :

swtich (node.getType()){
case Token.ASSIGN :
Preconditions.checkArgument(parent.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
break;

default :
throw new IllegalArgumentException("Unsupported node type in replaceWithRhs "+Token.name(node.getType()));


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890512305
GPR[SPVAP]-1659890512305
GPR[EPVAP]-1659890513952
GPR[EPVS]-1659890513952
========
swtich (node.getType()){
case Token.CATCH :
return !NodeUtil.hasFinally(getTryForCatch(node));

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890513953
GPR[SPVAP]-1659890513953
GPR[EPVAP]-1659890515603
GPR[EPVS]-1659890515603
========
swtich (node.getType()){
case Token.IF :
return parent==node.getLastChild();

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890515604
GPR[SPVAP]-1659890515604
GPR[EPVAP]-1659890517492
GPR[EPVS]-1659890517492
========
swtich (node.getType()){
case Token.CATCH :
return !NodeUtil.hasFinally(getTryForCatch(node));

case Token.IF :
return parent==node.getLastChild();


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890517493
GPR[SPVAP]-1659890517493
GPR[EPVAP]-1659890519658
GPR[EPVS]-1659890519658
========
default :

swtich (node.getType()){
case Token.CATCH :
return !NodeUtil.hasFinally(getTryForCatch(node));

case Token.IF :
return parent==node.getLastChild();


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890519659
GPR[SPVAP]-1659890519659
GPR[EPVAP]-1659890521720
GPR[EPVS]-1659890521720
========
case Token.COMMA :

swtich (node.getType()){
case Token.CATCH :
return !NodeUtil.hasFinally(getTryForCatch(node));

case Token.IF :
return parent==node.getLastChild();


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890521721
GPR[SPVAP]-1659890521721
GPR[EPVAP]-1659890523671
GPR[EPVS]-1659890523671
========
case Token.ARRAYLIT :

swtich (node.getType()){
case Token.CATCH :
return !NodeUtil.hasFinally(getTryForCatch(node));

case Token.IF :
return parent==node.getLastChild();


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890523672
GPR[SPVAP]-1659890523672
GPR[EPVAP]-1659890525692
GPR[EPVS]-1659890525692
========
swtich (node.getType()){
case Token.CALL :
visitCallNode(node,parent);
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890525693
GPR[SPVAP]-1659890525693
GPR[EPVAP]-1659890527381
GPR[EPVS]-1659890527381
========
swtich (node.getType()){
case Token.SCRIPT :
visitScriptNode(nodeTraversal);
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890527382
GPR[SPVAP]-1659890527382
GPR[EPVAP]-1659890529244
GPR[EPVS]-1659890529244
========
swtich (node.getType()){
case Token.NEW :
visitNewNode(nodeTraversal,node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890529246
GPR[SPVAP]-1659890529246
GPR[EPVAP]-1659890530887
GPR[EPVS]-1659890530887
========
swtich (node.getType()){
case Token.CALL :
visitCallNode(node,parent);
break;

case Token.SCRIPT :
visitScriptNode(nodeTraversal);
break;

case Token.NEW :
visitNewNode(nodeTraversal,node);


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890530888
GPR[SPVAP]-1659890530888
GPR[EPVAP]-1659890532562
GPR[EPVS]-1659890532562
========
case Token.BITAND :
return tryRotateAssociativeOperator(parent);

swtich (node.getType()){
case Token.CALL :
visitCallNode(node,parent);
break;

case Token.SCRIPT :
visitScriptNode(nodeTraversal);
break;

case Token.NEW :
visitNewNode(nodeTraversal,node);


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890532563
GPR[SPVAP]-1659890532563
GPR[EPVAP]-1659890534232
GPR[EPVS]-1659890534232
========
default :

swtich (node.getType()){
case Token.CALL :
visitCallNode(node,parent);
break;

case Token.SCRIPT :
visitScriptNode(nodeTraversal);
break;

case Token.NEW :
visitNewNode(nodeTraversal,node);


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890534233
GPR[SPVAP]-1659890534233
GPR[EPVAP]-1659890536208
GPR[EPVS]-1659890536208
========
swtich (node.getType()){
default :
throw new AssertionError("Bad LHS for assignment: "+parent.toStringTree());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890536210
GPR[SPVAP]-1659890536210
GPR[EPVAP]-1659890537848
GPR[EPVS]-1659890537848
========
swtich (node.getType()){
case Token.BITNOT :
tryReduceOperandsForOp(node);
return tryFoldUnaryOperator(node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890537849
GPR[SPVAP]-1659890537849
GPR[EPVAP]-1659890539572
GPR[EPVS]-1659890539572
========
swtich (node.getType()){
case Token.VOID :
return tryReduceVoid(node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890539573
GPR[SPVAP]-1659890539573
GPR[EPVAP]-1659890541393
GPR[EPVS]-1659890541393
========
swtich (node.getType()){
default :
tryReduceOperandsForOp(node);
return tryFoldBinaryOperator(node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890541394
GPR[SPVAP]-1659890541394
GPR[EPVAP]-1659890543278
GPR[EPVS]-1659890543278
========
swtich (node.getType()){
case Token.BITNOT :
tryReduceOperandsForOp(node);
return tryFoldUnaryOperator(node);

case Token.VOID :
return tryReduceVoid(node);

default :
tryReduceOperandsForOp(node);
return tryFoldBinaryOperator(node);


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890543279
GPR[SPVAP]-1659890543279
GPR[EPVAP]-1659890544920
GPR[EPVS]-1659890544920
========
case Token.NAME :

swtich (node.getType()){
case Token.BITNOT :
tryReduceOperandsForOp(node);
return tryFoldUnaryOperator(node);

case Token.VOID :
return tryReduceVoid(node);

default :
tryReduceOperandsForOp(node);
return tryFoldBinaryOperator(node);


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890544921
GPR[SPVAP]-1659890544921
GPR[EPVAP]-1659890546894
GPR[EPVS]-1659890546895
========
swtich (node.getType()){
case Token.COMMA :
Node parent=swapWithPlaceholderNode(node);
return computeMinimizedCondition(node).setPlaceholder(parent);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890546896
GPR[SPVAP]-1659890546896
GPR[EPVAP]-1659890548852
GPR[EPVS]-1659890548852
========
swtich (node.getType()){
default :
return unoptimized(node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890548854
GPR[SPVAP]-1659890548854
GPR[EPVAP]-1659890550500
GPR[EPVS]-1659890550500
========
swtich (node.getType()){
case Token.COMMA :
Node parent=swapWithPlaceholderNode(node);
return computeMinimizedCondition(node).setPlaceholder(parent);

default :
return unoptimized(node);


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890550502
GPR[SPVAP]-1659890550502
GPR[EPVAP]-1659890552470
GPR[EPVS]-1659890552470
========
swtich (node.getType()){
case Token.GETELEM :
Node node=parent.getFirstChild();
Node node.getNext()=node.getNext();
if(node.getNext().isString()&&NodeUtil.isValidPropertyName(node.getNext().getString())){
parent.removeChild(node);
parent.removeChild(node.getNext());
parent.replaceChild(parent,IR.getprop(node,node.getNext()));
compiler.reportCodeChange();
}
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890552471
GPR[SPVAP]-1659890552471
GPR[EPVAP]-1659890554370
GPR[EPVS]-1659890554370
========
swtich (node.getType()){
case Token.DO :
return ;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890554371
GPR[SPVAP]-1659890554371
GPR[EPVAP]-1659890556064
GPR[EPVS]-1659890556064
========
swtich (node.getType()){
default :
Node IR.block()=IR.block();
IR.block().copyInformationFrom(node);
parent.replaceChild(node,IR.block());
IR.block().addChildToFront(node);
reportCodeChange("LABEL normalization");
return ;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890556065
GPR[SPVAP]-1659890556065
GPR[EPVAP]-1659890557712
GPR[EPVS]-1659890557712
========
swtich (node.getType()){
case Token.DO :
return ;

default :
Node IR.block()=IR.block();
IR.block().copyInformationFrom(node);
parent.replaceChild(node,IR.block());
IR.block().addChildToFront(node);
reportCodeChange("LABEL normalization");
return ;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890557713
GPR[SPVAP]-1659890557713
GPR[EPVAP]-1659890559365
GPR[EPVS]-1659890559365
========
case Token.DO :
tryMinimizeCondition(NodeUtil.getConditionExpression(parent));
return node;

swtich (node.getType()){
case Token.DO :
return ;

default :
Node IR.block()=IR.block();
IR.block().copyInformationFrom(node);
parent.replaceChild(node,IR.block());
IR.block().addChildToFront(node);
reportCodeChange("LABEL normalization");
return ;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890559366
GPR[SPVAP]-1659890559366
GPR[EPVAP]-1659890561332
GPR[EPVS]-1659890561332
========
case Token.FOR :

swtich (node.getType()){
case Token.DO :
return ;

default :
Node IR.block()=IR.block();
IR.block().copyInformationFrom(node);
parent.replaceChild(node,IR.block());
IR.block().addChildToFront(node);
reportCodeChange("LABEL normalization");
return ;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890561333
GPR[SPVAP]-1659890561333
GPR[EPVAP]-1659890563286
GPR[EPVS]-1659890563286
========
swtich (node.getType()){
default :
throw new IllegalStateException("unexpected");

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890563288
GPR[SPVAP]-1659890563288
GPR[EPVAP]-1659890564936
GPR[EPVS]-1659890564936
========
swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890564937
GPR[SPVAP]-1659890564937
GPR[EPVAP]-1659890566908
GPR[EPVS]-1659890566908
========
swtich (node.getType()){
case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890566909
GPR[SPVAP]-1659890566909
GPR[EPVAP]-1659890568725
GPR[EPVS]-1659890568725
========
swtich (node.getType()){
case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890568726
GPR[SPVAP]-1659890568726
GPR[EPVAP]-1659890570371
GPR[EPVS]-1659890570371
========
swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890570372
GPR[SPVAP]-1659890570372
GPR[EPVAP]-1659890572055
GPR[EPVS]-1659890572055
========
case Token.BITOR :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890572055
GPR[SPVAP]-1659890572055
GPR[EPVAP]-1659890573708
GPR[EPVS]-1659890573708
========
case Token.NAME :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890573709
GPR[SPVAP]-1659890573709
GPR[EPVAP]-1659890575379
GPR[EPVS]-1659890575379
========
case Token.SHEQ :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890575380
GPR[SPVAP]-1659890575380
GPR[EPVAP]-1659890577036
GPR[EPVS]-1659890577036
========
case Token.THROW :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890577037
GPR[SPVAP]-1659890577037
GPR[EPVAP]-1659890578812
GPR[EPVS]-1659890578812
========
case Token.OBJECTLIT :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890578813
GPR[SPVAP]-1659890578813
GPR[EPVAP]-1659890580468
GPR[EPVS]-1659890580468
========
case Token.COMMA :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890580469
GPR[SPVAP]-1659890580469
GPR[EPVAP]-1659890582311
GPR[EPVS]-1659890582311
========
case Token.OR :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890582312
GPR[SPVAP]-1659890582312
GPR[EPVAP]-1659890584153
GPR[EPVS]-1659890584153
========
case Token.IF :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890584155
GPR[SPVAP]-1659890584155
GPR[EPVAP]-1659890585796
GPR[EPVS]-1659890585796
========
case Token.CASE :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890585797
GPR[SPVAP]-1659890585797
GPR[EPVAP]-1659890587458
GPR[EPVS]-1659890587458
========
case Token.BREAK :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890587459
GPR[SPVAP]-1659890587459
GPR[EPVAP]-1659890589271
GPR[EPVS]-1659890589271
========
case Token.WITH :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890589272
GPR[SPVAP]-1659890589272
GPR[EPVAP]-1659890591080
GPR[EPVS]-1659890591081
========
case Token.VOID :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890591082
GPR[SPVAP]-1659890591082
GPR[EPVAP]-1659890592775
GPR[EPVS]-1659890592775
========
case Token.BLOCK :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890592776
GPR[SPVAP]-1659890592776
GPR[EPVAP]-1659890594690
GPR[EPVS]-1659890594690
========
case Token.EXPR_RESULT :

swtich (node.getType()){
case Token.COMMA :
tryConvertToNumber(node.getLastChild());
return ;

case Token.HOOK :
tryConvertToNumber(node.getChildAtIndex(1));
tryConvertToNumber(node.getLastChild());
return ;

case Token.NAME :
if(!NodeUtil.isUndefined(node)){
return ;
}
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890594691
GPR[SPVAP]-1659890594691
GPR[EPVAP]-1659890596321
GPR[EPVS]-1659890596321
========
swtich (node.getType()){
default :
violation("Expected object literal key expression but was "+Token.name(node.getType()),n);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890596322
GPR[SPVAP]-1659890596322
GPR[EPVAP]-1659890598302
GPR[EPVS]-1659890598302
========
swtich (node.getType()){
case Token.FOR :
continue;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890598304
GPR[SPVAP]-1659890598304
GPR[EPVAP]-1659890599954
GPR[EPVS]-1659890599954
========
swtich (node.getType()){
case Token.RETURN :
continue;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890599955
GPR[SPVAP]-1659890599955
GPR[EPVAP]-1659890601686
GPR[EPVS]-1659890601686
========
swtich (node.getType()){
case Token.FOR :
continue;

case Token.RETURN :
continue;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890601688
GPR[SPVAP]-1659890601688
GPR[EPVAP]-1659890603556
GPR[EPVS]-1659890603556
========
swtich (node.getType()){
case Token.SETTER_DEF :
maybeRename(node);
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890603557
GPR[SPVAP]-1659890603557
GPR[EPVAP]-1659890605555
GPR[EPVS]-1659890605555
========
swtich (node.getType()){
default :
violation("Expected assignment target expression but was "+Token.name(node.getType()),n);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890605556
GPR[SPVAP]-1659890605556
GPR[EPVAP]-1659890607177
GPR[EPVS]-1659890607177
========
swtich (node.getType()){
case Token.THROW :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890607178
GPR[SPVAP]-1659890607178
GPR[EPVAP]-1659890609136
GPR[EPVS]-1659890609136
========
swtich (node.getType()){
case Token.CALL :
return NodeUtil.functionCallHasSideEffects(node,compiler);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890609137
GPR[SPVAP]-1659890609137
GPR[EPVAP]-1659890610787
GPR[EPVS]-1659890610787
========
swtich (node.getType()){
case Token.NEW :
return NodeUtil.constructorCallHasSideEffects(node,compiler);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890610788
GPR[SPVAP]-1659890610788
GPR[EPVAP]-1659890612773
GPR[EPVS]-1659890612773
========
swtich (node.getType()){
case Token.NAME :
return node.hasChildren();

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890612774
GPR[SPVAP]-1659890612774
GPR[EPVAP]-1659890614519
GPR[EPVS]-1659890614519
========
swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890614520
GPR[SPVAP]-1659890614520
GPR[EPVAP]-1659890616301
GPR[EPVS]-1659890616301
========
swtich (node.getType()){
case Token.THROW :
return true;

case Token.CALL :
return NodeUtil.functionCallHasSideEffects(node,compiler);

case Token.NEW :
return NodeUtil.constructorCallHasSideEffects(node,compiler);

case Token.NAME :
return node.hasChildren();

default :
return false;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890616302
GPR[SPVAP]-1659890616302
GPR[EPVAP]-1659890618188
GPR[EPVS]-1659890618188
========
swtich (node.getType()){
default :
return null;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890618189
GPR[SPVAP]-1659890618189
GPR[EPVAP]-1659890619820
GPR[EPVS]-1659890619820
========
swtich (node.getType()){
case Token.EXPR_RESULT :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890619821
GPR[SPVAP]-1659890619821
GPR[EPVAP]-1659890621474
GPR[EPVS]-1659890621474
========
swtich (node.getType()){
case Token.RETURN :
return node.hasChildren();

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890621475
GPR[SPVAP]-1659890621475
GPR[EPVAP]-1659890623120
GPR[EPVS]-1659890623120
========
swtich (node.getType()){
case Token.FOR :
if(NodeUtil.isForIn(node)){
return !mayHaveSideEffects(node.getFirstChild());
}else {
return !node.getFirstChild().isVar();
}

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890623121
GPR[SPVAP]-1659890623121
GPR[EPVAP]-1659890625105
GPR[EPVS]-1659890625105
========
swtich (node.getType()){
case Token.LABEL :
return isFusableControlStatement(node.getLastChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890625106
GPR[SPVAP]-1659890625106
GPR[EPVAP]-1659890627000
GPR[EPVS]-1659890627000
========
swtich (node.getType()){
case Token.BLOCK :
return !node.isSyntheticBlock()&&isFusableControlStatement(node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890627002
GPR[SPVAP]-1659890627002
GPR[EPVAP]-1659890628948
GPR[EPVS]-1659890628948
========
swtich (node.getType()){
case Token.EXPR_RESULT :
return true;

case Token.RETURN :
return node.hasChildren();

case Token.FOR :
if(NodeUtil.isForIn(node)){
return !mayHaveSideEffects(node.getFirstChild());
}else {
return !node.getFirstChild().isVar();
}

case Token.LABEL :
return isFusableControlStatement(node.getLastChild());

case Token.BLOCK :
return !node.isSyntheticBlock()&&isFusableControlStatement(node.getFirstChild());


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890628949
GPR[SPVAP]-1659890628949
GPR[EPVAP]-1659890630670
GPR[EPVS]-1659890630670
========
case Token.IF :

swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890630671
GPR[SPVAP]-1659890630671
GPR[EPVAP]-1659890632551
GPR[EPVS]-1659890632551
========
case Token.HOOK :

swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890632552
GPR[SPVAP]-1659890632552
GPR[EPVAP]-1659890634439
GPR[EPVS]-1659890634439
========
swtich (node.getType()){
default :
throw new IllegalStateException();

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890634440
GPR[SPVAP]-1659890634440
GPR[EPVAP]-1659890636423
GPR[EPVS]-1659890636423
========
swtich (node.getType()){
default :
return null;

case Token.LABEL :
definition=node.getLastChild();
visitLabel(node,parent);
break;


case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890636424
GPR[SPVAP]-1659890636424
GPR[EPVAP]-1659890638319
GPR[EPVS]-1659890638319
========
swtich (node.getType()){
default :
return null;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
if(NodeUtil.isFunctionDeclaration(node)){
definition=node;
}else {
return null;
}
visitBreakOrContinue(node);
break;



}

========
GPR[SPVS]-1659890638320
GPR[SPVAP]-1659890638320
GPR[EPVAP]-1659890639999
GPR[EPVS]-1659890639999
========
swtich (node.getType()){
default :
return null;

case Token.LABEL :
definition=node.getLastChild();
visitLabel(node,parent);
break;


case Token.BREAK :

case Token.CONTINUE :
if(NodeUtil.isFunctionDeclaration(node)){
definition=node;
}else {
return null;
}
visitBreakOrContinue(node);
break;



}

========
GPR[SPVS]-1659890639999
GPR[SPVAP]-1659890639999
GPR[EPVAP]-1659890641954
GPR[EPVS]-1659890641954
========
swtich (node.getType()){
case Token.FOR :
swtich (node.getChildCount()){
case 3 :
return null;

case 4 :
return node.getFirstChild().getNext();

}
throw new IllegalArgumentException("malformed \'for\' statement "+node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890641955
GPR[SPVAP]-1659890641955
GPR[EPVAP]-1659890643595
GPR[EPVS]-1659890643595
========
swtich (node.getType()){
case Token.CASE :
return null;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890643596
GPR[SPVAP]-1659890643596
GPR[EPVAP]-1659890645233
GPR[EPVS]-1659890645233
========
swtich (node.getType()){
case Token.FOR :
swtich (node.getChildCount()){
case 3 :
return null;

case 4 :
return node.getFirstChild().getNext();

}
throw new IllegalArgumentException("malformed \'for\' statement "+node);

case Token.CASE :
return null;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890645234
GPR[SPVAP]-1659890645234
GPR[EPVAP]-1659890646920
GPR[EPVS]-1659890646920
========
swtich (node.getType()){
case Token.GETELEM :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890646921
GPR[SPVAP]-1659890646921
GPR[EPVAP]-1659890648732
GPR[EPVS]-1659890648732
========
swtich (node.getType()){
case Token.FUNCTION :
Preconditions.checkState(isFunctionExpression(node));
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890648733
GPR[SPVAP]-1659890648733
GPR[EPVAP]-1659890650516
GPR[EPVS]-1659890650516
========
swtich (node.getType()){
case Token.GETELEM :
return true;

case Token.FUNCTION :
Preconditions.checkState(isFunctionExpression(node));
return false;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890650517
GPR[SPVAP]-1659890650517
GPR[EPVAP]-1659890652230
GPR[EPVS]-1659890652230
========
swtich (node.getType()){
case Token.DO :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(node),Token.CONTINUE,null);
Node parent=NodeUtil.getConditionExpression(node);
if(NodeUtil.getImpureBooleanValue(parent)==TernaryValue.FALSE){
tryMinimizeExits(node.getFirstChild(),Token.BREAK,null);
}
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890652231
GPR[SPVAP]-1659890652231
GPR[EPVAP]-1659890654564
GPR[EPVS]-1659890654564
========
swtich (node.getType()){
case Token.FUNCTION :
tryMinimizeExits(node.getLastChild(),Token.RETURN,null);
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890654565
GPR[SPVAP]-1659890654565
GPR[EPVAP]-1659890656311
GPR[EPVS]-1659890656311
========
swtich (node.getType()){
case Token.DO :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(node),Token.CONTINUE,null);
Node parent=NodeUtil.getConditionExpression(node);
if(NodeUtil.getImpureBooleanValue(parent)==TernaryValue.FALSE){
tryMinimizeExits(node.getFirstChild(),Token.BREAK,null);
}
break;

case Token.FUNCTION :
tryMinimizeExits(node.getLastChild(),Token.RETURN,null);
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890656312
GPR[SPVAP]-1659890656312
GPR[EPVAP]-1659890658065
GPR[EPVS]-1659890658065
========
case Token.DELPROP :

swtich (node.getType()){
case Token.DO :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(node),Token.CONTINUE,null);
Node parent=NodeUtil.getConditionExpression(node);
if(NodeUtil.getImpureBooleanValue(parent)==TernaryValue.FALSE){
tryMinimizeExits(node.getFirstChild(),Token.BREAK,null);
}
break;

case Token.FUNCTION :
tryMinimizeExits(node.getLastChild(),Token.RETURN,null);
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890658066
GPR[SPVAP]-1659890658066
GPR[EPVAP]-1659890660247
GPR[EPVS]-1659890660247
========
case Token.GETPROP :

swtich (node.getType()){
case Token.DO :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(node),Token.CONTINUE,null);
Node parent=NodeUtil.getConditionExpression(node);
if(NodeUtil.getImpureBooleanValue(parent)==TernaryValue.FALSE){
tryMinimizeExits(node.getFirstChild(),Token.BREAK,null);
}
break;

case Token.FUNCTION :
tryMinimizeExits(node.getLastChild(),Token.RETURN,null);
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890660249
GPR[SPVAP]-1659890660249
GPR[EPVAP]-1659890661974
GPR[EPVS]-1659890661974
========
case Token.WHILE :

swtich (node.getType()){
case Token.DO :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(node),Token.CONTINUE,null);
Node parent=NodeUtil.getConditionExpression(node);
if(NodeUtil.getImpureBooleanValue(parent)==TernaryValue.FALSE){
tryMinimizeExits(node.getFirstChild(),Token.BREAK,null);
}
break;

case Token.FUNCTION :
tryMinimizeExits(node.getLastChild(),Token.RETURN,null);
break;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890661975
GPR[SPVAP]-1659890661975
GPR[EPVAP]-1659890663640
GPR[EPVS]-1659890663640
========
swtich (node.getType()){
case Token.FALSE :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890663641
GPR[SPVAP]-1659890663641
GPR[EPVAP]-1659890665292
GPR[EPVS]-1659890665292
========
swtich (node.getType()){
case Token.NOT :
return isImmutableValue(node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890665293
GPR[SPVAP]-1659890665293
GPR[EPVAP]-1659890667298
GPR[EPVS]-1659890667299
========
swtich (node.getType()){
case Token.NEG :
return isImmutableValue(node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890667300
GPR[SPVAP]-1659890667300
GPR[EPVAP]-1659890669254
GPR[EPVS]-1659890669254
========
swtich (node.getType()){
case Token.NAME :
String node.getString()=node.getString();
return "undefined".equals(node.getString())||"Infinity".equals(node.getString());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890669255
GPR[SPVAP]-1659890669255
GPR[EPVAP]-1659890670925
GPR[EPVS]-1659890670925
========
swtich (node.getType()){
case Token.FALSE :
return true;

case Token.NOT :
return isImmutableValue(node.getFirstChild());

case Token.NEG :
return isImmutableValue(node.getFirstChild());

case Token.NAME :
String node.getString()=node.getString();
return "undefined".equals(node.getString())||"Infinity".equals(node.getString());


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890670926
GPR[SPVAP]-1659890670926
GPR[EPVAP]-1659890672840
GPR[EPVS]-1659890672840
========
swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890672841
GPR[SPVAP]-1659890672841
GPR[EPVAP]-1659890674684
GPR[EPVS]-1659890674684
========
case Token.BITAND :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890674685
GPR[SPVAP]-1659890674685
GPR[EPVAP]-1659890676556
GPR[EPVS]-1659890676556
========
case Token.NE :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890676558
GPR[SPVAP]-1659890676558
GPR[EPVAP]-1659890678531
GPR[EPVS]-1659890678531
========
case Token.LE :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890678532
GPR[SPVAP]-1659890678532
GPR[EPVAP]-1659890680178
GPR[EPVS]-1659890680178
========
case Token.GE :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890680179
GPR[SPVAP]-1659890680179
GPR[EPVAP]-1659890681836
GPR[EPVS]-1659890681836
========
case Token.RSH :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890681837
GPR[SPVAP]-1659890681837
GPR[EPVAP]-1659890683489
GPR[EPVS]-1659890683489
========
case Token.ADD :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890683490
GPR[SPVAP]-1659890683490
GPR[EPVAP]-1659890685320
GPR[EPVS]-1659890685320
========
case Token.MUL :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890685321
GPR[SPVAP]-1659890685321
GPR[EPVAP]-1659890687296
GPR[EPVS]-1659890687296
========
case Token.MOD :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890687297
GPR[SPVAP]-1659890687297
GPR[EPVAP]-1659890688947
GPR[EPVS]-1659890688947
========
case Token.BITNOT :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890688950
GPR[SPVAP]-1659890688950
GPR[EPVAP]-1659890690915
GPR[EPVS]-1659890690915
========
case Token.NEG :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890690917
GPR[SPVAP]-1659890690917
GPR[EPVAP]-1659890692809
GPR[EPVS]-1659890692809
========
case Token.INSTANCEOF :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890692810
GPR[SPVAP]-1659890692810
GPR[EPVAP]-1659890694602
GPR[EPVS]-1659890694602
========
case Token.ASSIGN_BITOR :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890694604
GPR[SPVAP]-1659890694604
GPR[EPVAP]-1659890696536
GPR[EPVS]-1659890696536
========
case Token.ASSIGN_BITAND :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890696537
GPR[SPVAP]-1659890696537
GPR[EPVAP]-1659890698196
GPR[EPVS]-1659890698196
========
case Token.ASSIGN_RSH :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890698197
GPR[SPVAP]-1659890698197
GPR[EPVAP]-1659890700192
GPR[EPVS]-1659890700192
========
case Token.ASSIGN_ADD :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890700193
GPR[SPVAP]-1659890700193
GPR[EPVAP]-1659890701843
GPR[EPVS]-1659890701843
========
case Token.ASSIGN_MUL :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890701844
GPR[SPVAP]-1659890701844
GPR[EPVAP]-1659890703524
GPR[EPVS]-1659890703524
========
case Token.ASSIGN_MOD :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890703525
GPR[SPVAP]-1659890703525
GPR[EPVAP]-1659890705207
GPR[EPVS]-1659890705207
========
case Token.INC :

swtich (node.getType()){
default :
return node;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890705208
GPR[SPVAP]-1659890705208
GPR[EPVAP]-1659890707098
GPR[EPVS]-1659890707098
========
swtich (node.getType()){
case Token.ASSIGN :
JSDocInfo node.getJSDocInfo()=node.getJSDocInfo();
if(node.getJSDocInfo()!=null&&node.getJSDocInfo().isNoTypeCheck()){
if(removeUnused){
id++;
}else {
id--;
}
}
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890707099
GPR[SPVAP]-1659890707099
GPR[EPVAP]-1659890709088
GPR[EPVS]-1659890709088
========
case NUMBER :

swtich (node.getType()){
case Token.ASSIGN :
JSDocInfo node.getJSDocInfo()=node.getJSDocInfo();
if(node.getJSDocInfo()!=null&&node.getJSDocInfo().isNoTypeCheck()){
if(removeUnused){
id++;
}else {
id--;
}
}
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890709089
GPR[SPVAP]-1659890709089
GPR[EPVAP]-1659890710924
GPR[EPVS]-1659890710924
========
swtich (node.getType()){
default :
throw new MalformedException("Expected FUNCTION, STRING, or ADD node; found: "+node.getType(),origValueNode);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890710926
GPR[SPVAP]-1659890710926
GPR[EPVAP]-1659890712868
GPR[EPVS]-1659890712868
========
swtich (node.getType()){
case Token.CALL :
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890712869
GPR[SPVAP]-1659890712869
GPR[EPVAP]-1659890714575
GPR[EPVS]-1659890714575
========
case Token.DELPROP :

swtich (node.getType()){
case Token.CALL :
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890714576
GPR[SPVAP]-1659890714576
GPR[EPVAP]-1659890716504
GPR[EPVS]-1659890716504
========
swtich (node.getType()){
default :
safe=NodeUtil.isImmutableValue(node);
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890716506
GPR[SPVAP]-1659890716506
GPR[EPVAP]-1659890718406
GPR[EPVS]-1659890718406
========
swtich (node.getType()){
default :
throw new IllegalStateException("unexpected:"+node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890718407
GPR[SPVAP]-1659890718407
GPR[EPVAP]-1659890720213
GPR[EPVS]-1659890720213
========
swtich (node.getType()){
case Token.SHNE :
reportIfNaN(nodeTraversal,parent.getFirstChild());
reportIfNaN(nodeTraversal,parent.getLastChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890720214
GPR[SPVAP]-1659890720214
GPR[EPVAP]-1659890722012
GPR[EPVS]-1659890722012
========
Preconditions.checkState(parent!=null);
swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890722014
GPR[SPVAP]-1659890722014
GPR[EPVAP]-1659890724054
GPR[EPVS]-1659890724054
========
swtich (node.getType()){
case Token.HOOK :
Node node.getFirstChild().getNext()=node.getFirstChild().getNext();
Name.Type getValueType(node.getFirstChild().getNext())=getValueType(node.getFirstChild().getNext());
if(getValueType(node.getFirstChild().getNext())!=Name.Type.OTHER){
return getValueType(node.getFirstChild().getNext());
}
Node parent=node.getFirstChild().getNext().getNext();
return getValueType(parent);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890724056
GPR[SPVAP]-1659890724056
GPR[EPVAP]-1659890726005
GPR[EPVS]-1659890726005
========
if(node.getFirstChild().getType()!=Token.GETPROP&&first.getType()!=Token.GETELEM){
node.putBooleanProp(Node.FREE_CALL,true);
}
swtich (node.getType()){
case Token.HOOK :
Node node.getFirstChild().getNext()=node.getFirstChild().getNext();
Name.Type getValueType(node.getFirstChild().getNext())=getValueType(node.getFirstChild().getNext());
if(getValueType(node.getFirstChild().getNext())!=Name.Type.OTHER){
return getValueType(node.getFirstChild().getNext());
}
Node parent=node.getFirstChild().getNext().getNext();
return getValueType(parent);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890726006
GPR[SPVAP]-1659890726006
GPR[EPVAP]-1659890727857
GPR[EPVS]-1659890727857
========
swtich (node.getType()){
case Token.WHILE :
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890727858
GPR[SPVAP]-1659890727858
GPR[EPVAP]-1659890729787
GPR[EPVS]-1659890729787
========
swtich (node.getType()){
default :
throw new IllegalArgumentException("Illegal type of node.");

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890729788
GPR[SPVAP]-1659890729788
GPR[EPVAP]-1659890731430
GPR[EPVS]-1659890731430
========
swtich (node.getType()){
case Token.SHNE :
complementOperator=Token.SHEQ;
break;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890731432
GPR[SPVAP]-1659890731432
GPR[EPVAP]-1659890733097
GPR[EPVS]-1659890733097
========
swtich (node.getType()){
default :
return parent;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890733098
GPR[SPVAP]-1659890733098
GPR[EPVAP]-1659890734755
GPR[EPVS]-1659890734755
========
swtich (node.getType()){
case Token.SHNE :
complementOperator=Token.SHEQ;
break;

default :
return parent;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890734756
GPR[SPVAP]-1659890734756
GPR[EPVAP]-1659890736429
GPR[EPVS]-1659890736429
========
case Token.GETPROP :

swtich (node.getType()){
case Token.SHNE :
complementOperator=Token.SHEQ;
break;

default :
return parent;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890736430
GPR[SPVAP]-1659890736430
GPR[EPVAP]-1659890738419
GPR[EPVS]-1659890738419
========
swtich (node.getType()){
case Token.NUMBER :
return getStringValue(node);

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890738420
GPR[SPVAP]-1659890738420
GPR[EPVAP]-1659890740200
GPR[EPVS]-1659890740200
========
swtich (node.getType()){
default :
throw new IllegalStateException("Unexpected.");

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890740202
GPR[SPVAP]-1659890740202
GPR[EPVAP]-1659890742068
GPR[EPVS]-1659890742068
========
swtich (node.getType()){
case Token.SWITCH :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890742070
GPR[SPVAP]-1659890742070
GPR[EPVAP]-1659890743770
GPR[EPVS]-1659890743770
========
swtich (node.getType()){
case Token.TRY :
return removeUnused;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890743771
GPR[SPVAP]-1659890743771
GPR[EPVAP]-1659890745668
GPR[EPVS]-1659890745668
========
swtich (node.getType()){
case Token.SWITCH :
return true;

case Token.TRY :
return removeUnused;

default :
return false;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890745669
GPR[SPVAP]-1659890745669
GPR[EPVAP]-1659890747584
GPR[EPVS]-1659890747584
========
swtich (node.getType()){
case Token.LE :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890747585
GPR[SPVAP]-1659890747585
GPR[EPVAP]-1659890749241
GPR[EPVS]-1659890749241
========
swtich (node.getType()){
case Token.THROW :
return true;

default :
return false;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890749242
GPR[SPVAP]-1659890749242
GPR[EPVAP]-1659890751128
GPR[EPVS]-1659890751128
========
case Token.STRING :

swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890751130
GPR[SPVAP]-1659890751130
GPR[EPVAP]-1659890752992
GPR[EPVS]-1659890752992
========
swtich (node.getType()){
case Token.MUL :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890752994
GPR[SPVAP]-1659890752994
GPR[EPVAP]-1659890754659
GPR[EPVS]-1659890754659
========
case Token.NAME :

swtich (node.getType()){
case Token.MUL :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890754661
GPR[SPVAP]-1659890754661
GPR[EPVAP]-1659890756527
GPR[EPVS]-1659890756527
========
case Token.CALL :

swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890756529
GPR[SPVAP]-1659890756529
GPR[EPVAP]-1659890758491
GPR[EPVS]-1659890758491
========
default :

swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890758503
GPR[SPVAP]-1659890758503
GPR[EPVAP]-1659890760245
GPR[EPVS]-1659890760245
========
swtich (node.getType()){
case Token.SHNE :
return !(Token.NULL==parent.getType());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890760246
GPR[SPVAP]-1659890760246
GPR[EPVAP]-1659890762174
GPR[EPVS]-1659890762174
========
swtich (node.getType()){
default :
throw new IllegalStateException("unexpected.");

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890762175
GPR[SPVAP]-1659890762175
GPR[EPVAP]-1659890763824
GPR[EPVS]-1659890763824
========
swtich (node.getType()){
case Token.SHNE :
return !(Token.NULL==parent.getType());

default :
throw new IllegalStateException("unexpected.");


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890763825
GPR[SPVAP]-1659890763825
GPR[EPVAP]-1659890765491
GPR[EPVS]-1659890765491
========
swtich (node.getType()){
case Token.PARAM_LIST :
return node.getParent().getParent().isFunction();

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890765492
GPR[SPVAP]-1659890765492
GPR[EPVAP]-1659890767499
GPR[EPVS]-1659890767499
========
swtich (node.getType()){
case Token.PARAM_LIST :
return node.getParent().getParent().isFunction();

default :
return false;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890767500
GPR[SPVAP]-1659890767500
GPR[EPVAP]-1659890769378
GPR[EPVS]-1659890769378
========
swtich (node.getType()){
case Token.FUNCTION :
 final Scope nodeTraversal.getScope()=nodeTraversal.getScope();
 final String node.getFirstChild().getString()=n.getFirstChild().getString();
if(functionPrivateName!=null&&functionPrivateName.length()>0&&outerScope.isDeclared(functionPrivateName,false)&&!(outerScope.getVar(functionPrivateName).getType() instanceof FunctionType)){
report(t,n,FUNCTION_MASKS_VARIABLE,functionPrivateName);
}
break;

}
swtich (node.getType()){
case Token.PARAM_LIST :
return node.getParent().getParent().isFunction();

default :
return false;


case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890769380
GPR[SPVAP]-1659890769380
GPR[EPVAP]-1659890771371
GPR[EPVS]-1659890771371
========
swtich (node.getType()){
case Token.FUNCTION :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890771372
GPR[SPVAP]-1659890771372
GPR[EPVAP]-1659890773079
GPR[EPVS]-1659890773079
========
case Token.ASSIGN :

swtich (node.getType()){
case Token.FUNCTION :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890773080
GPR[SPVAP]-1659890773080
GPR[EPVAP]-1659890774741
GPR[EPVS]-1659890774742
========
Preconditions.checkState(removeUnused==true);
swtich (node.getType()){
case Token.FUNCTION :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890774743
GPR[SPVAP]-1659890774743
GPR[EPVAP]-1659890776760
GPR[EPVS]-1659890776760
========
removeUnused=false;
swtich (node.getType()){
case Token.FUNCTION :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890776761
GPR[SPVAP]-1659890776761
GPR[EPVAP]-1659890778407
GPR[EPVS]-1659890778407
========
Preconditions.checkState(node.isFunction());
swtich (node.getType()){
case Token.FUNCTION :
return true;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890778409
GPR[SPVAP]-1659890778409
GPR[EPVAP]-1659890780266
GPR[EPVS]-1659890780266
========
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890780268
GPR[SPVAP]-1659890780268
GPR[EPVAP]-1659890782484
GPR[EPVS]-1659890782484
========
parent.addChildToBack(node);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890782487
GPR[SPVAP]-1659890782487
GPR[EPVAP]-1659890784392
GPR[EPVS]-1659890784392
========
case Token.GETPROP :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890784394
GPR[SPVAP]-1659890784394
GPR[EPVAP]-1659890786033
GPR[EPVS]-1659890786033
========
if(node.isCall()&&!NodeUtil.functionCallHasSideEffects(node,parent)){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890786035
GPR[SPVAP]-1659890786035
GPR[EPVAP]-1659890787910
GPR[EPVS]-1659890787911
========
if(node.isNew()&&!NodeUtil.constructorCallHasSideEffects(node)){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890787912
GPR[SPVAP]-1659890787912
GPR[EPVAP]-1659890789551
GPR[EPVS]-1659890789551
========
parseDirectives(node);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890789552
GPR[SPVAP]-1659890789552
GPR[EPVAP]-1659890791266
GPR[EPVS]-1659890791266
========
default :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890791268
GPR[SPVAP]-1659890791268
GPR[EPVAP]-1659890793197
GPR[EPVS]-1659890793197
========
case Token.HOOK :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890793198
GPR[SPVAP]-1659890793198
GPR[EPVAP]-1659890794886
GPR[EPVS]-1659890794886
========
case Token.IF :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890794887
GPR[SPVAP]-1659890794887
GPR[EPVAP]-1659890797052
GPR[EPVS]-1659890797052
========
case Token.WHILE :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890797053
GPR[SPVAP]-1659890797053
GPR[EPVAP]-1659890798917
GPR[EPVS]-1659890798917
========
case Token.SWITCH :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890798919
GPR[SPVAP]-1659890798919
GPR[EPVAP]-1659890800586
GPR[EPVS]-1659890800586
========
if(node.getIntProp(Node.INCRDECR_PROP)==1){
new JsonML(TagType.CountExpr).setAttribute(TagAttr.IS_PREFIX,false);
}else {
element.setAttribute(TagAttr.IS_PREFIX,true);
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890800588
GPR[SPVAP]-1659890800588
GPR[EPVAP]-1659890802240
GPR[EPVS]-1659890802240
========
processNode(node.getFirstChild(),new JsonML(TagType.CountExpr));
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890802242
GPR[SPVAP]-1659890802242
GPR[EPVAP]-1659890804236
GPR[EPVS]-1659890804236
========
if(s.propertyScope!=null){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890804237
GPR[SPVAP]-1659890804237
GPR[EPVAP]-1659890806422
GPR[EPVS]-1659890806422
========
case Token.CONTINUE :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890806426
GPR[SPVAP]-1659890806426
GPR[EPVAP]-1659890808098
GPR[EPVS]-1659890808098
========
case Token.OR :
return parent!=node.getFirstChild();

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890808100
GPR[SPVAP]-1659890808100
GPR[EPVAP]-1659890809758
GPR[EPVS]-1659890809758
========
if(!node.isCall()){
throw new MalformedException("Message must be initialized using "+MSG_FUNCTION_NAME,node);
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890809760
GPR[SPVAP]-1659890809760
GPR[EPVAP]-1659890811645
GPR[EPVS]-1659890811645
========
if(!MSG_FUNCTION_NAME.equals(node.getFirstChild().getQualifiedName())){
throw new MalformedException("Message initialized using unrecognized function. "+"Please use "+MSG_FUNCTION_NAME,fnNameNode);
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890811647
GPR[SPVAP]-1659890811647
GPR[EPVAP]-1659890813362
GPR[EPVS]-1659890813362
========
if(node.getFirstChild().getNext()==null){
throw new MalformedException("Message string literal expected",stringLiteralNode);
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890813363
GPR[SPVAP]-1659890813363
GPR[EPVAP]-1659890815014
GPR[EPVS]-1659890815014
========
case Token.IF :
return NodeUtil.getConditionExpression(parent)!=node;

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890815015
GPR[SPVAP]-1659890815015
GPR[EPVAP]-1659890816652
GPR[EPVS]-1659890816652
========
case Token.FOR :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890816654
GPR[SPVAP]-1659890816654
GPR[EPVAP]-1659890818361
GPR[EPVS]-1659890818361
========
case Token.FOR :
return NodeUtil.getConditionExpression(parent)==node;

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890818362
GPR[SPVAP]-1659890818362
GPR[EPVAP]-1659890820382
GPR[EPVS]-1659890820382
========
case Token.INSTANCEOF :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890820383
GPR[SPVAP]-1659890820383
GPR[EPVAP]-1659890822033
GPR[EPVS]-1659890822033
========
case Token.FUNCTION :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890822034
GPR[SPVAP]-1659890822034
GPR[EPVAP]-1659890823688
GPR[EPVS]-1659890823688
========
case Token.AND :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890823690
GPR[SPVAP]-1659890823690
GPR[EPVAP]-1659890825347
GPR[EPVS]-1659890825347
========
case Token.NAME :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890825348
GPR[SPVAP]-1659890825348
GPR[EPVAP]-1659890827010
GPR[EPVS]-1659890827010
========
case Token.RETURN :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890827011
GPR[SPVAP]-1659890827011
GPR[EPVAP]-1659890828893
GPR[EPVS]-1659890828893
========
case Token.CASE :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890828894
GPR[SPVAP]-1659890828894
GPR[EPVAP]-1659890830556
GPR[EPVS]-1659890830556
========
case Token.VAR :
Preconditions.checkState(node==parent.getFirstChild());
return parent;

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890830558
GPR[SPVAP]-1659890830558
GPR[EPVAP]-1659890832435
GPR[EPVS]-1659890832435
========
case Token.SCRIPT :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890832436
GPR[SPVAP]-1659890832436
GPR[EPVAP]-1659890834336
GPR[EPVS]-1659890834336
========
case Token.WITH :
return parent!=node.getFirstChild();

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890834338
GPR[SPVAP]-1659890834338
GPR[EPVAP]-1659890836347
GPR[EPVS]-1659890836347
========
case Token.ASSIGN_MOD :
maybeEliminateAssignmentByLvalueName(nodeTraversal,node,parent);
break;

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890836348
GPR[SPVAP]-1659890836348
GPR[EPVAP]-1659890838370
GPR[EPVS]-1659890838370
========
case Token.CALL :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890838371
GPR[SPVAP]-1659890838371
GPR[EPVAP]-1659890840242
GPR[EPVS]-1659890840242
========
case Token.NAME :
handleCandidateProvideDefinition(nodeTraversal,node,parent);
break;

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890840244
GPR[SPVAP]-1659890840244
GPR[EPVAP]-1659890842211
GPR[EPVS]-1659890842211
========
case Token.EXPR_RESULT :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890842212
GPR[SPVAP]-1659890842212
GPR[EPVAP]-1659890843880
GPR[EPVS]-1659890843880
========
case Token.OR :
return (node==parent.getFirstChild())?true:isExpressionResultUsed(parent);

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890843881
GPR[SPVAP]-1659890843881
GPR[EPVAP]-1659890845566
GPR[EPVS]-1659890845567
========
case Token.COMMA :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890845568
GPR[SPVAP]-1659890845568
GPR[EPVAP]-1659890847225
GPR[EPVS]-1659890847225
========
processDirectives(parent,new JsonML(TagType.BlockStmt));
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890847232
GPR[SPVAP]-1659890847232
GPR[EPVAP]-1659890849152
GPR[EPVS]-1659890849152
========
for(Node node : parent.children()){
processNode(child,new JsonML(TagType.BlockStmt));
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890849153
GPR[SPVAP]-1659890849153
GPR[EPVAP]-1659890851073
GPR[EPVS]-1659890851073
========
case VAR_DECL_SIMPLE_ASSIGNMENT :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890851074
GPR[SPVAP]-1659890851074
GPR[EPVAP]-1659890852740
GPR[EPVS]-1659890852740
========
node.setLineno(node.getFirstChild().getLineno());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890852741
GPR[SPVAP]-1659890852741
GPR[EPVAP]-1659890854678
GPR[EPVS]-1659890854678
========
node.setCharno(node.getFirstChild().getCharno());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890854679
GPR[SPVAP]-1659890854679
GPR[EPVAP]-1659890856335
GPR[EPVS]-1659890856335
========
if(node.getDirectives()==null){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890856336
GPR[SPVAP]-1659890856336
GPR[EPVAP]-1659890858152
GPR[EPVS]-1659890858152
========
Preconditions.checkArgument(node!=null&&node.parent==this,"The existing child node of the parent should not be null.");
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890858154
GPR[SPVAP]-1659890858154
GPR[EPVAP]-1659890860077
GPR[EPVS]-1659890860077
========
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890860078
GPR[SPVAP]-1659890860078
GPR[EPVAP]-1659890861793
GPR[EPVS]-1659890861793
========
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890861794
GPR[SPVAP]-1659890861794
GPR[EPVAP]-1659890863431
GPR[EPVS]-1659890863431
========
case Token.PARAM_LIST :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890863432
GPR[SPVAP]-1659890863432
GPR[EPVAP]-1659890865242
GPR[EPVS]-1659890865243
========
case AssignExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890865244
GPR[SPVAP]-1659890865244
GPR[EPVAP]-1659890867008
GPR[EPVS]-1659890867008
========
case BlockStmt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890867009
GPR[SPVAP]-1659890867009
GPR[EPVAP]-1659890868908
GPR[EPVS]-1659890868908
========
case CallExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890868909
GPR[SPVAP]-1659890868909
GPR[EPVAP]-1659890870559
GPR[EPVS]-1659890870559
========
case CatchClause :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890870560
GPR[SPVAP]-1659890870560
GPR[EPVAP]-1659890872185
GPR[EPVS]-1659890872185
========
case ContinueStmt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890872186
GPR[SPVAP]-1659890872186
GPR[EPVAP]-1659890874164
GPR[EPVS]-1659890874164
========
case DataProp :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890874166
GPR[SPVAP]-1659890874166
GPR[EPVAP]-1659890876135
GPR[EPVS]-1659890876135
========
case SetterProp :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890876136
GPR[SPVAP]-1659890876136
GPR[EPVAP]-1659890878032
GPR[EPVS]-1659890878032
========
case DeleteExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890878033
GPR[SPVAP]-1659890878033
GPR[EPVAP]-1659890880009
GPR[EPVS]-1659890880009
========
case Empty :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890880010
GPR[SPVAP]-1659890880010
GPR[EPVAP]-1659890881884
GPR[EPVS]-1659890881884
========
case EvalExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890881885
GPR[SPVAP]-1659890881885
GPR[EPVAP]-1659890883533
GPR[EPVS]-1659890883533
========
case ForStmt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890883535
GPR[SPVAP]-1659890883535
GPR[EPVAP]-1659890885188
GPR[EPVS]-1659890885188
========
case FunctionExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890885189
GPR[SPVAP]-1659890885189
GPR[EPVAP]-1659890888560
GPR[EPVS]-1659890888561
========
case IdPatt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890888562
GPR[SPVAP]-1659890888562
GPR[EPVAP]-1659890890328
GPR[EPVS]-1659890890328
========
case InitPatt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890890329
GPR[SPVAP]-1659890890329
GPR[EPVAP]-1659890892366
GPR[EPVS]-1659890892366
========
case LabelledStmt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890892367
GPR[SPVAP]-1659890892367
GPR[EPVAP]-1659890894335
GPR[EPVS]-1659890894335
========
case LogicalAndExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890894336
GPR[SPVAP]-1659890894336
GPR[EPVAP]-1659890896207
GPR[EPVS]-1659890896207
========
case MemberExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890896208
GPR[SPVAP]-1659890896208
GPR[EPVAP]-1659890898164
GPR[EPVS]-1659890898164
========
case ObjectExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890898165
GPR[SPVAP]-1659890898165
GPR[EPVAP]-1659890899808
GPR[EPVS]-1659890899808
========
case Program :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890899809
GPR[SPVAP]-1659890899809
GPR[EPVAP]-1659890902006
GPR[EPVS]-1659890902006
========
case RegExpExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890902007
GPR[SPVAP]-1659890902007
GPR[EPVAP]-1659890903656
GPR[EPVS]-1659890903656
========
case SwitchStmt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890903657
GPR[SPVAP]-1659890903657
GPR[EPVAP]-1659890905645
GPR[EPVS]-1659890905645
========
case ThrowStmt :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890905646
GPR[SPVAP]-1659890905646
GPR[EPVAP]-1659890907303
GPR[EPVS]-1659890907303
========
case TypeofExpr :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890907304
GPR[SPVAP]-1659890907304
GPR[EPVAP]-1659890909196
GPR[EPVS]-1659890909196
========
case VarDecl :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890909198
GPR[SPVAP]-1659890909198
GPR[EPVAP]-1659890910860
GPR[EPVS]-1659890910860
========
Preconditions.checkState(parent!=null);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890910861
GPR[SPVAP]-1659890910861
GPR[EPVAP]-1659890912709
GPR[EPVS]-1659890912709
========
Preconditions.checkNotNull(node.getFirstChild());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890912710
GPR[SPVAP]-1659890912710
GPR[EPVAP]-1659890914387
GPR[EPVS]-1659890914387
========
Preconditions.checkState(node.getFirstChild().getType()==Token.BLOCK);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890914388
GPR[SPVAP]-1659890914388
GPR[EPVAP]-1659890916032
GPR[EPVS]-1659890916032
========
parent=child.getFirstChild();
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890916033
GPR[SPVAP]-1659890916033
GPR[EPVAP]-1659890917882
GPR[EPVS]-1659890917882
========
case Token.EXPR_RESULT :
parent=node;
next=next.getFirstChild();
break;

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890917883
GPR[SPVAP]-1659890917883
GPR[EPVAP]-1659890919794
GPR[EPVS]-1659890919794
========
case Token.VAR :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890919795
GPR[SPVAP]-1659890919795
GPR[EPVAP]-1659890921452
GPR[EPVS]-1659890921452
========
Preconditions.checkArgument(node.getType()==Token.GETPROP);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890921453
GPR[SPVAP]-1659890921453
GPR[EPVAP]-1659890923449
GPR[EPVS]-1659890923449
========
parent.addChildToFront(node);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890923451
GPR[SPVAP]-1659890923451
GPR[EPVAP]-1659890925438
GPR[EPVS]-1659890925438
========
node.addChildToBack(parent);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890925439
GPR[SPVAP]-1659890925439
GPR[EPVAP]-1659890927332
GPR[EPVS]-1659890927332
========
Preconditions.checkState(node.getChildCount()==2);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890927334
GPR[SPVAP]-1659890927334
GPR[EPVAP]-1659890928967
GPR[EPVS]-1659890928967
========
Preconditions.checkState(node.getChildCount()>=2);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890928968
GPR[SPVAP]-1659890928968
GPR[EPVAP]-1659890930828
GPR[EPVS]-1659890930828
========
if(node.getChildCount()<3){
new JsonML(TagType.IfStmt).appendChild(new JsonML(TagType.EmptyStmt));
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890930829
GPR[SPVAP]-1659890930829
GPR[EPVAP]-1659890932508
GPR[EPVS]-1659890932508
========
compiler.reportCodeChange();
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890932510
GPR[SPVAP]-1659890932510
GPR[EPVAP]-1659890934393
GPR[EPVS]-1659890934393
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.BODY,node.getFirstChild().getString());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890934395
GPR[SPVAP]-1659890934395
GPR[EPVAP]-1659890936652
GPR[EPVS]-1659890936652
========
parent=child.getNext();
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890936653
GPR[SPVAP]-1659890936653
GPR[EPVAP]-1659890938644
GPR[EPVS]-1659890938644
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.FLAGS,"");
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890938645
GPR[SPVAP]-1659890938645
GPR[EPVAP]-1659890940296
GPR[EPVS]-1659890940296
========
if(compiler==null){
return null;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890940298
GPR[SPVAP]-1659890940298
GPR[EPVAP]-1659890942106
GPR[EPVS]-1659890942106
========
id=-1;
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890942107
GPR[SPVAP]-1659890942107
GPR[EPVAP]-1659890944077
GPR[EPVS]-1659890944077
========
parent.removeChild(node);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890944079
GPR[SPVAP]-1659890944079
GPR[EPVAP]-1659890945766
GPR[EPVS]-1659890945766
========
parent.getParent().getParent().getParent().addChildAfter(parent,parent.getParent().getParent());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890945767
GPR[SPVAP]-1659890945767
GPR[EPVAP]-1659890947710
GPR[EPVS]-1659890947710
========
Preconditions.checkArgument(node.getType()==Token.NAME);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890947711
GPR[SPVAP]-1659890947711
GPR[EPVAP]-1659890949618
GPR[EPVS]-1659890949618
========
if(removeUnused){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890949619
GPR[SPVAP]-1659890949619
GPR[EPVAP]-1659890951668
GPR[EPVS]-1659890951668
========
reportCodeChange();
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890951670
GPR[SPVAP]-1659890951670
GPR[EPVAP]-1659890953334
GPR[EPVS]-1659890953334
========
case Token.CATCH :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890953335
GPR[SPVAP]-1659890953335
GPR[EPVAP]-1659890955154
GPR[EPVS]-1659890955155
========
case Token.GETELEM :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890955157
GPR[SPVAP]-1659890955157
GPR[EPVAP]-1659890956984
GPR[EPVS]-1659890956984
========
case SIMPLE_ASSIGNMENT :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890956986
GPR[SPVAP]-1659890956986
GPR[EPVAP]-1659890958626
GPR[EPVS]-1659890958626
========
notifyOfRemoval(node);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890958627
GPR[SPVAP]-1659890958627
GPR[EPVAP]-1659890960537
GPR[EPVS]-1659890960537
========
if(parent.isCall()&&gramps.getFirstChild()==node){
return false;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890960538
GPR[SPVAP]-1659890960538
GPR[EPVAP]-1659890962179
GPR[EPVS]-1659890962179
========
if(parent.isDelProp()){
return false;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890962180
GPR[SPVAP]-1659890962180
GPR[EPVAP]-1659890963835
GPR[EPVS]-1659890963835
========
processNode(node.getFirstChild(),new JsonML(TagType.TryStmt));
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890963837
GPR[SPVAP]-1659890963837
GPR[EPVAP]-1659890965714
GPR[EPVS]-1659890965714
========
if(node.getFirstChild().hasChildren()){
processNode(child.getFirstChild(),new JsonML(TagType.TryStmt));
}else {
element.appendChild(new JsonML(TagType.Empty));
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890965715
GPR[SPVAP]-1659890965715
GPR[EPVAP]-1659890967467
GPR[EPVS]-1659890967467
========
if(node.getFirstChild()!=null){
processNode(child,new JsonML(TagType.TryStmt));
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890967468
GPR[SPVAP]-1659890967468
GPR[EPVAP]-1659890969127
GPR[EPVS]-1659890969127
========
Preconditions.checkNotNull(parent);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890969128
GPR[SPVAP]-1659890969128
GPR[EPVAP]-1659890971108
GPR[EPVS]-1659890971108
========
case Token.WITH :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890971109
GPR[SPVAP]-1659890971109
GPR[EPVAP]-1659890972770
GPR[EPVS]-1659890972770
========
if(nodeTraversal.getScopeDepth()<2){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890972772
GPR[SPVAP]-1659890972772
GPR[EPVAP]-1659890974424
GPR[EPVS]-1659890974424
========
case Token.POS :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890974426
GPR[SPVAP]-1659890974426
GPR[EPVAP]-1659890976111
GPR[EPVS]-1659890976111
========
node.addChildToBack(node);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890976113
GPR[SPVAP]-1659890976114
GPR[EPVAP]-1659890977764
GPR[EPVS]-1659890977764
========
if(!parent.isBlock()){
Preconditions.checkState(config.isIdeMode);
bodyNode=IR.block();
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890977765
GPR[SPVAP]-1659890977765
GPR[EPVAP]-1659890979408
GPR[EPVS]-1659890979408
========
parseDirectives(parent);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890979409
GPR[SPVAP]-1659890979409
GPR[EPVAP]-1659890981269
GPR[EPVS]-1659890981270
========
result.liveSet.andNot(new BitSet(input.liveSet.size()));
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890981271
GPR[SPVAP]-1659890981271
GPR[EPVAP]-1659890982983
GPR[EPVS]-1659890982983
========
result.liveSet.or(new BitSet(input.liveSet.size()));
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890982984
GPR[SPVAP]-1659890982984
GPR[EPVAP]-1659890984653
GPR[EPVS]-1659890984653
========
Preconditions.checkState(NodeUtil.isObjectLitKey(node)||node.getType()==Token.NAME||nType==Token.GETPROP);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890984656
GPR[SPVAP]-1659890984656
GPR[EPVAP]-1659890986372
GPR[EPVS]-1659890986373
========
case Token.MUL :
visitBinaryOperator(node.getType(),nodeTraversal,n);
break;

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890986374
GPR[SPVAP]-1659890986374
GPR[EPVAP]-1659890988202
GPR[EPVS]-1659890988202
========
case Token.DELPROP :

swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890988203
GPR[SPVAP]-1659890988203
GPR[EPVAP]-1659890989854
GPR[EPVS]-1659890989854
========
if(!node.isCall()){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890989857
GPR[SPVAP]-1659890989857
GPR[EPVAP]-1659890991514
GPR[EPVS]-1659890991514
========
if(!node.getFirstChild().isGetProp()){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890991515
GPR[SPVAP]-1659890991515
GPR[EPVAP]-1659890993375
GPR[EPVS]-1659890993375
========
if(!node.getFirstChild().getFirstChild().getNext().isString()){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890993377
GPR[SPVAP]-1659890993377
GPR[EPVAP]-1659890995083
GPR[EPVS]-1659890995083
========
if(nodeTraversal.getScope().getVar(node.getFirstChild().getString())!=null&&!define.isGlobal()){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890995084
GPR[SPVAP]-1659890995084
GPR[EPVAP]-1659890996868
GPR[EPVS]-1659890996868
========
if(!removeUnused){
ensureLibraryInjected("base");
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890996980
GPR[SPVAP]-1659890996980
GPR[EPVAP]-1659890998618
GPR[EPVS]-1659890998618
========
Preconditions.checkState(parent.getChildCount()==3);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659890998625
GPR[SPVAP]-1659890998625
GPR[EPVAP]-1659891000281
GPR[EPVS]-1659891000281
========
Preconditions.checkState(parent.isFunction());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891000283
GPR[SPVAP]-1659891000283
GPR[EPVAP]-1659891002166
GPR[EPVS]-1659891002166
========
parent=parent;
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891002167
GPR[SPVAP]-1659891002167
GPR[EPVAP]-1659891004175
GPR[EPVS]-1659891004175
========
pushScope(parent);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891004177
GPR[SPVAP]-1659891004177
GPR[EPVAP]-1659891006026
GPR[EPVS]-1659891006026
========
if((parent!=null)&&NodeUtil.isFunctionExpression(parent)){
traverseBranch(node,parent);
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891006027
GPR[SPVAP]-1659891006027
GPR[EPVAP]-1659891007843
GPR[EPVS]-1659891007843
========
removeUnused=true;
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891007850
GPR[SPVAP]-1659891007850
GPR[EPVAP]-1659891009487
GPR[EPVS]-1659891009487
========
if(node.isName()){
Preconditions.checkArgument(parent.isFunction()||parent.isVar());
}else {
Preconditions.checkArgument(n.isGetProp()&&(parent.isAssign()||parent.isExprResult()));
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891009489
GPR[SPVAP]-1659891009489
GPR[EPVAP]-1659891011427
GPR[EPVS]-1659891011427
========
getCurrentScriptNode(parent).addChildToFront(IR.exprResult(IR.call(IR.getprop(IR.name("goog"),IR.string("require")),IR.string(toModuleName(node.getChildAtIndex(1).getString(),normalizeSourceName(nodeTraversal.getSourceName()))))).copyInformationFromForTree(node));
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891011428
GPR[SPVAP]-1659891011428
GPR[EPVAP]-1659891013118
GPR[EPVS]-1659891013118
========
if(getVarsDeclaredInBranch(node).isEmpty()){
return ;
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891013119
GPR[SPVAP]-1659891013119
GPR[EPVAP]-1659891015001
GPR[EPVS]-1659891015001
========
parent.replaceChild(node,NodeUtil.newExpr(parent));
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891015002
GPR[SPVAP]-1659891015002
GPR[EPVAP]-1659891016685
GPR[EPVS]-1659891016685
========
Preconditions.checkState(parent.isAssign());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891016686
GPR[SPVAP]-1659891016686
GPR[EPVAP]-1659891018365
GPR[EPVS]-1659891018365
========
node.getParent().replaceChild(node,parent);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891018366
GPR[SPVAP]-1659891018366
GPR[EPVAP]-1659891020276
GPR[EPVS]-1659891020276
========
if(parent.isVar()){
parent=n;
}else {
Preconditions.checkState(n.hasOneChild());
newInitializer=n.getFirstChild();
n.removeChild(newInitializer);
}
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891020278
GPR[SPVAP]-1659891020278
GPR[EPVAP]-1659891022228
GPR[EPVS]-1659891022228
========
NodeUtil.redeclareVarsInsideBranch(parent);
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891022231
GPR[SPVAP]-1659891022231
GPR[EPVAP]-1659891023872
GPR[EPVS]-1659891023872
========
parent.replaceChild(node,removeUnused?node.getFirstChild().getNext():node.getFirstChild().getNext().getNext());
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891023873
GPR[SPVAP]-1659891023873
GPR[EPVAP]-1659891025691
GPR[EPVS]-1659891025691
========
this.parent=parent;
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891025698
GPR[SPVAP]-1659891025698
GPR[EPVAP]-1659891027352
GPR[EPVS]-1659891027352
========
id=pattern.perExtractionOverhead+pattern.perMemberOverhead;
swtich (node.getType()){
default :
throw new IllegalStateException("unexpect OBJECTLIT key: "+node.getFirstChild());

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891027353
GPR[SPVAP]-1659891027353
GPR[EPVAP]-1659891029382
GPR[EPVS]-1659891029382
========
case Token.OR :
{
int node.getType()=node.getType();
int node.getType()==Token.AND?Token.OR:Token.AND=opType==Token.AND?Token.OR:Token.AND;
MinimizedCondition computeMinimizedCondition(node.getFirstChild().detachFromParent())=computeMinimizedCondition(n.getFirstChild().detachFromParent());
MinimizedCondition computeMinimizedCondition(node.getLastChild().detachFromParent())=computeMinimizedCondition(n.getLastChild().detachFromParent());
ImmutableList<MeasuredNode> ImmutableList.of(MeasuredNode.addNode(new Node(node.getType()).srcref(node),leftSubtree.positive.cloneTree(),rightSubtree.positive.cloneTree()),MeasuredNode.addNode(new Node(node.getType()==Token.AND?Token.OR:Token.AND).srcref(n),leftSubtree.negative.cloneTree(),rightSubtree.negative.cloneTree()).negate())=ImmutableList.of(MeasuredNode.addNode(new Node(opType).srcref(n),leftSubtree.positive.cloneTree(),rightSubtree.positive.cloneTree()),MeasuredNode.addNode(new Node(complementType).srcref(n),leftSubtree.negative.cloneTree(),rightSubtree.negative.cloneTree()).negate());
ImmutableList<MeasuredNode> ImmutableList.of(MeasuredNode.addNode(new Node(node.getType()).srcref(node),leftSubtree.positive,rightSubtree.positive).negate(),MeasuredNode.addNode(new Node(node.getType()==Token.AND?Token.OR:Token.AND).srcref(n),leftSubtree.negative,rightSubtree.negative))=ImmutableList.of(MeasuredNode.addNode(new Node(opType).srcref(n),leftSubtree.positive,rightSubtree.positive).negate(),MeasuredNode.addNode(new Node(complementType).srcref(n),leftSubtree.negative,rightSubtree.negative));
return new MinimizedCondition(Collections.min(positiveAsts,AST_LENGTH_COMPARATOR),Collections.min(negativeAsts,AST_LENGTH_COMPARATOR));
}

swtich (node.getType()){
default :
return false;

case Token.LABEL :
visitLabel(node,parent);
break;

case Token.BREAK :

case Token.CONTINUE :
visitBreakOrContinue(node);
break;


}

========
GPR[SPVS]-1659891029383
GPR[SPVAP]-1659891029383
GPR[EPVAP]-1659891031220
GPR[EPVS]-1659891031220
GPR[ESUN]-1659891031221
GPR[SSUN]-1659891031221
com.google.javascript.jscomp.RenameLabels,198
========
if(!name.equals(newName)){
n.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891034176
GPR[SPVAP]-1659891034176
GPR[EPVAP]-1659891038258
GPR[EPVS]-1659891038258
========
if(!name.equals(newName)){
nameNode.setString(name);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891038259
GPR[SPVAP]-1659891038259
GPR[EPVAP]-1659891045881
GPR[SPVATF]-1659891045881
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891049715
GPR[EPVS]-1659891049715
========
if(!name.equals(newName)){
nameNode.setString(p.newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891049716
GPR[SPVAP]-1659891049716
GPR[EPVAP]-1659891051578
GPR[EPVS]-1659891051578
========
if(!name.equals(newName)){
origValueNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891051587
GPR[SPVAP]-1659891051587
GPR[EPVAP]-1659891053837
GPR[EPVS]-1659891053837
========
if(!name.equals(newName)){
node.getFirstChild().setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891053838
GPR[SPVAP]-1659891053839
GPR[EPVAP]-1659891057728
GPR[SPVATF]-1659891057728
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891061329
GPR[EPVS]-1659891061329
========
if(!name.equals(newName)){
node.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891061330
GPR[SPVAP]-1659891061330
GPR[EPVAP]-1659891065119
GPR[SPVATF]-1659891065119
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891069329
GPR[EPVS]-1659891069329
========
if(!name.equals(newName)){
if(!"".equals(newName)){
node.getLastChild().setString(newName);
}else if(node.getChildCount()==2){
node.getLastChild().detachFromParent();
}
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891069330
GPR[SPVAP]-1659891069330
GPR[EPVAP]-1659891073107
GPR[SPVATF]-1659891073107
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891076937
GPR[EPVS]-1659891076937
========
if(!name.equals(newName)){
reportCodeChange();
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891076938
GPR[SPVAP]-1659891076938
GPR[EPVAP]-1659891078801
GPR[EPVS]-1659891078801
========
if(!name.equals(newName)){
if(!"".equals(newName)){
node.getLastChild().setString(newName);
}else if(node.getChildCount()==2){
node.getLastChild().detachFromParent();
}
reportCodeChange();

nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891078802
GPR[SPVAP]-1659891078802
GPR[EPVAP]-1659891080648
GPR[EPVS]-1659891080648
========
if(!name.equals(newName)){
node.getFirstChild().setString(name);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891080650
GPR[SPVAP]-1659891080650
GPR[EPVAP]-1659891084679
GPR[SPVATF]-1659891084679
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891088818
GPR[EPVS]-1659891088818
========
if(!name.equals(newName)){
if(!"".equals(newName)){
node.getLastChild().setString(newName);
}else if(node.getChildCount()==2){
node.getLastChild().detachFromParent();
}
node.getFirstChild().setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891088819
GPR[SPVAP]-1659891088819
GPR[EPVAP]-1659891092783
GPR[SPVATF]-1659891092783
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891096642
GPR[EPVS]-1659891096642
========
if(!name.equals(newName)){
node.setString(name);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891096643
GPR[SPVAP]-1659891096643
GPR[EPVAP]-1659891100453
GPR[SPVATF]-1659891100453
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891104402
GPR[EPVS]-1659891104402
========
if(!name.equals(newName)){
if(!"".equals(newName)){
node.getLastChild().setString(newName);
}else if(node.getChildCount()==2){
node.getLastChild().detachFromParent();
}
node.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891104403
GPR[SPVAP]-1659891104403
GPR[EPVAP]-1659891108304
GPR[SPVATF]-1659891108304
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891112581
GPR[EPVS]-1659891112581
========
if(!name.equals(newName)){
if(!"".equals(newName)){
node.getLastChild().setString(newName);
}else if(node.getChildCount()==2){
node.getLastChild().detachFromParent();
}
nameNode.setString(name);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891112583
GPR[SPVAP]-1659891112583
GPR[EPVAP]-1659891116587
GPR[SPVATF]-1659891116587
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891120837
GPR[EPVS]-1659891120837
========
if(!name.equals(newName)){
if(!"".equals(newName)){
node.getLastChild().setString(newName);
}else if(node.getChildCount()==2){
node.getLastChild().detachFromParent();
}
node.getFirstChild().setString(name);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891120839
GPR[SPVAP]-1659891120839
GPR[EPVAP]-1659891125648
GPR[SPVATF]-1659891125649
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891129621
GPR[EPVS]-1659891129621
========
if(!name.equals(newName)){
if(!"".equals(newName)){
node.getLastChild().setString(newName);
}else if(node.getChildCount()==2){
node.getLastChild().detachFromParent();
}
node.setString(name);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891129622
GPR[SPVAP]-1659891129622
GPR[EPVAP]-1659891133550
GPR[SPVATF]-1659891133550
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891137413
GPR[EPVS]-1659891137413
========
node.setString(newName);
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891137414
GPR[SPVAP]-1659891137414
GPR[EPVAP]-1659891141368
GPR[SPVATF]-1659891141369
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891145333
GPR[EPVS]-1659891145333
========
compiler.reportCodeChange();
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891145334
GPR[SPVAP]-1659891145334
GPR[EPVAP]-1659891149177
GPR[SPVATF]-1659891149177
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891152878
GPR[EPVS]-1659891152878
========
node.setString(newName);
compiler.reportCodeChange();
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891152879
GPR[SPVAP]-1659891152879
GPR[EPVAP]-1659891156731
GPR[SPVATF]-1659891156731
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891160351
GPR[EPVS]-1659891160351
========
if(!name.equals(ARGUMENTS)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891160353
GPR[SPVAP]-1659891160353
GPR[EPVAP]-1659891162241
GPR[EPVS]-1659891162241
========
if(!name.equals(newName)){
nameNode.setString(newName);
referencedNames.reportCodeChange();
}

========
GPR[SPVS]-1659891162242
GPR[SPVAP]-1659891162242
GPR[EPVAP]-1659891164151
GPR[EPVS]-1659891164151
========
if(!name.equals(newName)){
compiler.reportCodeChange();
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891164152
GPR[SPVAP]-1659891164152
GPR[EPVAP]-1659891168029
GPR[SPVATF]-1659891168030
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891171901
GPR[EPVS]-1659891171901
========
if(!name.equals(newName)){
compiler.reportCodeChange();
n.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891171902
GPR[SPVAP]-1659891171902
GPR[EPVAP]-1659891174133
GPR[EPVS]-1659891174133
========
if(!name.equals(jsError.description)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891174135
GPR[SPVAP]-1659891174135
GPR[EPVAP]-1659891176160
GPR[EPVS]-1659891176161
========
if(!name.equals(newName)){
nameNode.setString(newName);
symbolGraph.reportCodeChange();
}

========
GPR[SPVS]-1659891176162
GPR[SPVAP]-1659891176162
GPR[EPVAP]-1659891178115
GPR[EPVS]-1659891178115
========
if(!name.equals(JSDocInfo.Visibility.PRIVATE)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891178116
GPR[SPVAP]-1659891178116
GPR[EPVAP]-1659891179957
GPR[EPVS]-1659891179957
========
if(!name.equals(newName)){
nameNode.setString(newName);
ctors.reportCodeChange();
}

========
GPR[SPVS]-1659891179958
GPR[SPVAP]-1659891179958
GPR[EPVAP]-1659891181863
GPR[EPVS]-1659891181863
========
if(!name.equals(newName)){
nameNode.setString(newName);
dstFragments.reportCodeChange();
}

========
GPR[SPVS]-1659891181864
GPR[SPVAP]-1659891181864
GPR[EPVAP]-1659891183668
GPR[EPVS]-1659891183668
========
if(!name.equals(newName)){
nameNode.setString(newName);
requires.reportCodeChange();
}

========
GPR[SPVS]-1659891183669
GPR[SPVAP]-1659891183669
GPR[EPVAP]-1659891185491
GPR[EPVS]-1659891185491
========
if(!name.equals(newName)){
nameNode.addChildToBack(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891185493
GPR[SPVAP]-1659891185493
GPR[EPVAP]-1659891187485
GPR[EPVS]-1659891187485
========
if(!name.equals(jsError.sourceName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891187486
GPR[SPVAP]-1659891187486
GPR[EPVAP]-1659891189508
GPR[EPVS]-1659891189508
========
if(!name.equals(newName)){
call.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891189511
GPR[SPVAP]-1659891189511
GPR[EPVAP]-1659891191329
GPR[EPVS]-1659891191329
========
if(!name.equals(newName)){
nameNode.setString(newName);
nameNode.getFirstChild().getNext().getNext().addChildToFront(IR.exprResult(node));
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891191330
GPR[SPVAP]-1659891191330
GPR[EPVAP]-1659891193151
GPR[EPVS]-1659891193151
========
if(!name.equals(newName)){
cur.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891193153
GPR[SPVAP]-1659891193153
GPR[EPVAP]-1659891194950
GPR[EPVS]-1659891194950
========
if(!name.equals(newName)){
node.getParent().replaceChild(n,node);
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891194951
GPR[SPVAP]-1659891194951
GPR[EPVAP]-1659891196988
GPR[EPVS]-1659891196988
========
if(!name.equals(newName)){
node.getParent().replaceChild(n,node);
reportCodeChange();

nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891196989
GPR[SPVAP]-1659891196989
GPR[EPVAP]-1659891198796
GPR[EPVS]-1659891198796
========
if(!name.getString().equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891198798
GPR[SPVAP]-1659891198798
GPR[EPVAP]-1659891200655
GPR[EPVS]-1659891200655
========
if(!name.equals(newName)){
nameNode.setString(newName);
declarations.reportCodeChange();
}

========
GPR[SPVS]-1659891200657
GPR[SPVAP]-1659891200657
GPR[EPVAP]-1659891202611
GPR[EPVS]-1659891202611
========
if(!name.equals(newName)){
nameNode.setString(newName);
properties.reportCodeChange();
}

========
GPR[SPVS]-1659891202612
GPR[SPVAP]-1659891202612
GPR[EPVAP]-1659891204553
GPR[EPVS]-1659891204553
========
if(!name.equals(newName)){
nameNode.setString(newName);
stringNodesToRename.reportCodeChange();
}

========
GPR[SPVS]-1659891204554
GPR[SPVAP]-1659891204554
GPR[EPVAP]-1659891206367
GPR[EPVS]-1659891206367
========
if(!name.equals(newName)){
nameNode.setString(newName);
vars.reportCodeChange();
}

========
GPR[SPVS]-1659891206369
GPR[SPVAP]-1659891206369
GPR[EPVAP]-1659891208164
GPR[EPVS]-1659891208164
========
if(!name.equals(newName)){
nameNode.setString(newName);
parser.reportCodeChange();
}

========
GPR[SPVS]-1659891208166
GPR[SPVAP]-1659891208166
GPR[EPVAP]-1659891210076
GPR[EPVS]-1659891210076
========
if(!name.equals(newName)){
nameNode.setString(newName);
msgBuilder.reportCodeChange();
}

========
GPR[SPVS]-1659891210077
GPR[SPVAP]-1659891210077
GPR[EPVAP]-1659891211908
GPR[EPVS]-1659891211908
========
if(!name.equals(newName)){
nameNode.setString(newName);
logger.reportCodeChange();
}

========
GPR[SPVS]-1659891211910
GPR[SPVAP]-1659891211910
GPR[EPVAP]-1659891213932
GPR[EPVS]-1659891213932
========
if(!name.equals(newName)){
inlineEmptyMethod(node,nameNode);
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891213933
GPR[SPVAP]-1659891213933
GPR[EPVAP]-1659891215789
GPR[EPVS]-1659891215789
========
if(!name.equals(newName)){
if(compiler.contains(newName)){
return ;
}
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891215791
GPR[SPVAP]-1659891215791
GPR[EPVAP]-1659891217590
GPR[EPVS]-1659891217590
========
if(!name.equals(newName)){
nameNode.setString(newName);
nameNode.addChildrenToFront(IR.exprResult(IR.call(IR.name(name),IR.string(newName))));
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891217591
GPR[SPVAP]-1659891217591
GPR[EPVAP]-1659891219508
GPR[EPVS]-1659891219508
========
if(!name.equals(newName)){
if(removeUnused){
throw new IllegalStateException("Unexpected variable "+newName);
}else {
createSynthesizedExternVar(newName);
}
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891219510
GPR[SPVAP]-1659891219510
GPR[EPVAP]-1659891221375
GPR[EPVS]-1659891221375
========
if(!name.equals(newName)){
nameNode.setString(newName);
errors.reportCodeChange();
}

========
GPR[SPVS]-1659891221377
GPR[SPVAP]-1659891221377
GPR[EPVAP]-1659891223204
GPR[EPVS]-1659891223204
========
if(!name.equals(newName)){
nameNode.setString(newName);
err.reportCodeChange();
}

========
GPR[SPVS]-1659891223205
GPR[SPVAP]-1659891223205
GPR[EPVAP]-1659891225022
GPR[EPVS]-1659891225022
========
if(!name.equals(newName)){
isConfigValid=false;
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891225023
GPR[SPVAP]-1659891225023
GPR[EPVAP]-1659891226880
GPR[EPVS]-1659891226880
========
if(!name.equals(ARGUMENT_ARRAY_ALIAS)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891226882
GPR[SPVAP]-1659891226882
GPR[EPVAP]-1659891228931
GPR[EPVS]-1659891228931
========
if(!name.equals(newName)){
inlineConstReturn(node,nameNode,newName);
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891228932
GPR[SPVAP]-1659891228932
GPR[EPVAP]-1659891230734
GPR[EPVS]-1659891230734
========
if(!name.equals(newName)){
nameNode.setString(newName);
if(isValidPrivateConstructorAccess(node)){
return ;
}
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891230735
GPR[SPVAP]-1659891230735
GPR[EPVAP]-1659891232529
GPR[EPVS]-1659891232529
========
if(!name.equals(newName)){
nameNode.setString(newName);
globals.reportCodeChange();
}

========
GPR[SPVS]-1659891232531
GPR[SPVAP]-1659891232531
GPR[EPVAP]-1659891234353
GPR[EPVS]-1659891234353
========
if(!name.equals(newName)){
nameNode.setString(newName);
set.reportCodeChange();
}

========
GPR[SPVS]-1659891234355
GPR[SPVAP]-1659891234355
GPR[EPVAP]-1659891236348
GPR[EPVS]-1659891236348
========
Preconditions.checkState(nameNode.isName());
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891236349
GPR[SPVAP]-1659891236349
GPR[EPVAP]-1659891240573
GPR[SPVATF]-1659891240573
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891244157
GPR[EPVS]-1659891244157
========
if(!name.equals(newName)){
nameNode.setString(newName);
symbols.reportCodeChange();
}

========
GPR[SPVS]-1659891244163
GPR[SPVAP]-1659891244163
GPR[EPVAP]-1659891245971
GPR[EPVS]-1659891245971
========
Preconditions.checkNotNull(newName);
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891245972
GPR[SPVAP]-1659891245972
GPR[EPVAP]-1659891250185
GPR[SPVATF]-1659891250185
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891254283
GPR[EPVS]-1659891254283
========
if(!name.equals(newName)){
node.addChildAfter(bind.thisValue.cloneTree(),newName);
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891254284
GPR[SPVAP]-1659891254284
GPR[EPVAP]-1659891256286
GPR[EPVS]-1659891256286
========
if(!name.equals(newName)){
node.putBooleanProp(Node.FREE_CALL,false);
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891256287
GPR[SPVAP]-1659891256287
GPR[EPVAP]-1659891260080
GPR[SPVATF]-1659891260080
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891263813
GPR[EPVS]-1659891263813
========
if(!name.equals(newName)){
node.addChildAfter(bind.thisValue.cloneTree(),newName);
node.putBooleanProp(Node.FREE_CALL,false);

nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891263815
GPR[SPVAP]-1659891263815
GPR[EPVAP]-1659891265638
GPR[EPVS]-1659891265638
========
reportCodeChange();
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891265639
GPR[SPVAP]-1659891265639
GPR[EPVAP]-1659891267454
GPR[EPVS]-1659891267454
========
if(!name.equals(newName)){
node.putBooleanProp(Node.FREE_CALL,false);
n.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891267455
GPR[SPVAP]-1659891267455
GPR[EPVAP]-1659891269318
GPR[EPVS]-1659891269318
========
if(!name.equals(newName)){
nameNode.setString(newName);
renamer.reportCodeChange();
}

========
GPR[SPVS]-1659891269320
GPR[SPVAP]-1659891269320
GPR[EPVAP]-1659891271168
GPR[EPVS]-1659891271168
========
if(!name.equals(newName)){
nameNode.setString(newName);
mappingsBuilder.reportCodeChange();
}

========
GPR[SPVS]-1659891271170
GPR[SPVAP]-1659891271170
GPR[EPVAP]-1659891273276
GPR[EPVS]-1659891273276
========
if(!name.equals(newName)){
startLine=id;
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891273277
GPR[SPVAP]-1659891273277
GPR[EPVAP]-1659891275148
GPR[EPVS]-1659891275148
========
if(!name.equals(newName)){
lastLine=id;
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891275164
GPR[SPVAP]-1659891275164
GPR[EPVAP]-1659891277085
GPR[EPVS]-1659891277085
========
if(!name.equals(newName)){
startMapId=id;
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891277087
GPR[SPVAP]-1659891277087
GPR[EPVAP]-1659891278919
GPR[EPVS]-1659891278919
========
if(!name.equals(newName)){
names.clear();
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891278920
GPR[SPVAP]-1659891278920
GPR[EPVAP]-1659891282764
GPR[SPVATF]-1659891282764
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891286427
GPR[EPVS]-1659891286427
========
if(!name.equals(newName)){
startLine=id;
lastLine=id;
startMapId=id;
names.clear();

nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891286428
GPR[SPVAP]-1659891286428
GPR[EPVAP]-1659891288314
GPR[EPVS]-1659891288315
========
if(!name.equals(newName)){
nameNode.setString(newName);
use.reportCodeChange();
}

========
GPR[SPVS]-1659891288316
GPR[SPVAP]-1659891288316
GPR[EPVAP]-1659891290163
GPR[EPVS]-1659891290163
========
if(!name.equals(newName)){
nameNode.setString(newName);
mayUseMap.reportCodeChange();
}

========
GPR[SPVS]-1659891290165
GPR[SPVAP]-1659891290165
GPR[EPVAP]-1659891292105
GPR[EPVS]-1659891292105
========
if(!name.equals(newName)){
nameNode.setString(newName);
sb.reportCodeChange();
}

========
GPR[SPVS]-1659891292106
GPR[SPVAP]-1659891292106
GPR[EPVAP]-1659891293947
GPR[EPVS]-1659891293947
========
if(!name.equals(newName)){
nameNode.setString(newName);
forbiddenLocals.reportCodeChange();
}

========
GPR[SPVS]-1659891293949
GPR[SPVAP]-1659891293949
GPR[EPVAP]-1659891295781
GPR[EPVS]-1659891295781
========
if(!name.equals(newName)){
globalRegExpPropertiesUsed=true;
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891295782
GPR[SPVAP]-1659891295782
GPR[EPVAP]-1659891297576
GPR[EPVS]-1659891297576
========
if(!name.equals(newName)){
nameNode.setString(newName);
candidate.reportCodeChange();
}

========
GPR[SPVS]-1659891297578
GPR[SPVAP]-1659891297578
GPR[EPVAP]-1659891299389
GPR[EPVS]-1659891299389
========
if(!name.equals(newName)){
nameNode.setString(newName);
refInfo.reportCodeChange();
}

========
GPR[SPVS]-1659891299390
GPR[SPVAP]-1659891299390
GPR[EPVAP]-1659891301243
GPR[EPVS]-1659891301243
========
if(!name.equals(newName)){
Preconditions.checkNotNull(newName);
nameNode.setString(newName);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891301244
GPR[SPVAP]-1659891301244
GPR[EPVAP]-1659891305138
GPR[SPVATF]-1659891305138
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891308705
GPR[EPVS]-1659891308705
========
if(!name.equals(newName)){
n.setString(name);
compiler.reportCodeChange();
}

========
GPR[SPVS]-1659891308707
GPR[SPVAP]-1659891308707
GPR[EPVAP]-1659891310664
GPR[EPVS]-1659891310665
========
if(li!=null&&p.newName!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891312960
GPR[SPVAP]-1659891312960
GPR[EPVAP]-1659891314796
GPR[EPVS]-1659891314796
========
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
n.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891314797
GPR[SPVAP]-1659891314797
GPR[EPVAP]-1659891316692
GPR[EPVS]-1659891316692
========
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(p.newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891316693
GPR[SPVAP]-1659891316693
GPR[EPVAP]-1659891318710
GPR[EPVS]-1659891318710
========
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
Preconditions.checkState(newName.equals(p.oldName));
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891318711
GPR[SPVAP]-1659891318711
GPR[EPVAP]-1659891320595
GPR[EPVS]-1659891320595
========
if(li!=null&&a.newName!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891320597
GPR[SPVAP]-1659891320597
GPR[EPVAP]-1659891322411
GPR[EPVS]-1659891322411
========
if(li==null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891322417
GPR[SPVAP]-1659891322417
GPR[EPVAP]-1659891326204
GPR[SPVATF]-1659891326204
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891330211
GPR[EPVS]-1659891330211
========
nameNode.detachChildren();
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891330213
GPR[SPVAP]-1659891330213
GPR[EPVAP]-1659891334304
GPR[SPVATF]-1659891334304
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891338811
GPR[EPVS]-1659891338811
========
reportCodeChange();
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891338813
GPR[SPVAP]-1659891338813
GPR[EPVAP]-1659891340829
GPR[EPVS]-1659891340829
========
if(li!=null||name.isOn()){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891340831
GPR[SPVAP]-1659891340831
GPR[EPVAP]-1659891342669
GPR[EPVS]-1659891342669
========
if(li!=null&&nameNode.getString().equals(relationship.subclassName)){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891342671
GPR[SPVAP]-1659891342671
GPR[EPVAP]-1659891344515
GPR[EPVS]-1659891344515
========
if(nameNode!=null){
explicitNode.detachFromParent();
}
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891344517
GPR[SPVAP]-1659891344517
GPR[EPVAP]-1659891346300
GPR[EPVS]-1659891346300
========
compiler.reportCodeChange();
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891346301
GPR[SPVAP]-1659891346301
GPR[EPVAP]-1659891350124
GPR[SPVATF]-1659891350124
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891353689
GPR[EPVS]-1659891353689
========
compiler.reportCodeChange();
if(li==null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891353691
GPR[SPVAP]-1659891353691
GPR[EPVAP]-1659891357590
GPR[SPVATF]-1659891357590
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891361140
GPR[EPVS]-1659891361140
========
if(li!=null){
compiler.setProgress(referenced,newName);
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891361142
GPR[SPVAP]-1659891361142
GPR[EPVAP]-1659891362998
GPR[EPVS]-1659891362998
========
maybePrintAstHashcodes(newName,node);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891362999
GPR[SPVAP]-1659891362999
GPR[EPVAP]-1659891364933
GPR[EPVS]-1659891364933
========
maybeSanityCheck(node,node);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891364934
GPR[SPVAP]-1659891364934
GPR[EPVAP]-1659891366710
GPR[EPVS]-1659891366710
========
if(li!=null){
String newName=getSimplifiedName(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891366718
GPR[SPVAP]-1659891366718
GPR[EPVAP]-1659891368636
GPR[EPVS]-1659891368636
========
if(li!=null){
if(newName!=null){
this.name.remove(newName,node);
}
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891368637
GPR[SPVAP]-1659891368637
GPR[EPVAP]-1659891370533
GPR[EPVS]-1659891370533
========
if(!name.contains(newName)){
use.mayUseMap.removeAll(var);
}
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891370536
GPR[SPVAP]-1659891370536
GPR[EPVAP]-1659891372499
GPR[EPVS]-1659891372499
========
if(li!=v.scope){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891372501
GPR[SPVAP]-1659891372501
GPR[EPVAP]-1659891374331
GPR[EPVS]-1659891374331
========
if(li!=Token.NAME){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891374333
GPR[SPVAP]-1659891374333
GPR[EPVAP]-1659891376164
GPR[EPVS]-1659891376164
========
if(!name.contains(newName)){
use.mayUseMap.put(var,node);
}
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891376166
GPR[SPVAP]-1659891376166
GPR[EPVAP]-1659891378127
GPR[EPVS]-1659891378127
========
if(li!=null){
p.getDeclaration().node=nameNode;
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891378130
GPR[SPVAP]-1659891378130
GPR[EPVAP]-1659891379943
GPR[EPVS]-1659891379943
========
if(newName.length()==0){
return ;
}
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891379945
GPR[SPVAP]-1659891379945
GPR[EPVAP]-1659891381908
GPR[EPVS]-1659891381909
========
if(li!=null){
String newName=getNameForId(li.id);
nameInfo.name=classes.subclassName;
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891381910
GPR[SPVAP]-1659891381910
GPR[EPVAP]-1659891383734
GPR[EPVS]-1659891383734
========
if(li!=null){
String newName=getNameForId(li.id);
nameInfo.onlyAffectsClassDef=true;
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891383735
GPR[SPVAP]-1659891383735
GPR[EPVAP]-1659891385735
GPR[EPVS]-1659891385735
========
if(li!=null){
String newName=getNameForId(li.id);
nameInfo.name=classes.subclassName;
nameInfo.onlyAffectsClassDef=true;

li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891385737
GPR[SPVAP]-1659891385737
GPR[EPVAP]-1659891387956
GPR[EPVS]-1659891387956
========
if(newName!=null&&!newName.isEmpty()&&li!=null&&!NodeUtil.isFunctionDeclaration(nameNode)){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891387960
GPR[SPVAP]-1659891387960
GPR[EPVAP]-1659891389816
GPR[EPVS]-1659891389816
========
case Token.PARAM_LIST :

if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891389818
GPR[SPVAP]-1659891389818
GPR[EPVAP]-1659891391720
GPR[EPVS]-1659891391720
========
Preconditions.checkState(nameNode!=null);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891391722
GPR[SPVAP]-1659891391722
GPR[EPVAP]-1659891396005
GPR[SPVATF]-1659891396005
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891400189
GPR[EPVS]-1659891400189
========
IR.exprResult(IR.assign(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),newName,nameNode,namespace),createNamespaceLiteral())).putBooleanProp(Node.IS_NAMESPACE,true);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891400193
GPR[SPVAP]-1659891400193
GPR[EPVAP]-1659891401996
GPR[EPVS]-1659891401996
========
Preconditions.checkState(isNamespacePlaceholder(IR.exprResult(IR.assign(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),newName,nameNode,namespace),createNamespaceLiteral()))));
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891401998
GPR[SPVAP]-1659891401998
GPR[EPVAP]-1659891403894
GPR[EPVS]-1659891403895
========
setSourceInfo(IR.exprResult(IR.assign(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),newName,nameNode,namespace),createNamespaceLiteral())));
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891403895
GPR[SPVAP]-1659891403895
GPR[EPVAP]-1659891405696
GPR[EPVS]-1659891405696
========
if(li!=Token.GETTER_DEF){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891405700
GPR[SPVAP]-1659891405700
GPR[EPVAP]-1659891407727
GPR[EPVS]-1659891407727
========
if(context.scope!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891407729
GPR[SPVAP]-1659891407729
GPR[EPVAP]-1659891409628
GPR[EPVS]-1659891409628
========
case Token.POS :

if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891409630
GPR[SPVAP]-1659891409630
GPR[EPVAP]-1659891411281
GPR[EPVS]-1659891411281
========
if(li!=RenameStrategy.INCONSISTENT){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}

========
GPR[SPVS]-1659891411283
GPR[SPVAP]-1659891411283
GPR[EPVAP]-1659891413128
GPR[EPVS]-1659891413128
========
{
Node nameNode=candidateDefinition.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891417706
GPR[SPVAP]-1659891417706
GPR[EPVAP]-1659891419626
GPR[EPVS]-1659891419626
========
{
Node nameNode=assignNode.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891419627
GPR[SPVAP]-1659891419627
GPR[EPVAP]-1659891421591
GPR[EPVS]-1659891421591
========
{
Node nameNode=nameNode.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891421592
GPR[SPVAP]-1659891421592
GPR[EPVAP]-1659891423398
GPR[EPVS]-1659891423398
========
{
node.detachFromParent();
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891423399
GPR[SPVAP]-1659891423399
GPR[EPVAP]-1659891425424
GPR[EPVS]-1659891425424
========
{
compiler.reportCodeChange();
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891425425
GPR[SPVAP]-1659891425425
GPR[EPVAP]-1659891427339
GPR[EPVS]-1659891427339
========
{
node.detachFromParent();
compiler.reportCodeChange();

Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891427340
GPR[SPVAP]-1659891427340
GPR[EPVAP]-1659891429151
GPR[EPVS]-1659891429152
========
{
Node nameNode=constructorNameNode.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891429155
GPR[SPVAP]-1659891429155
GPR[EPVAP]-1659891430950
GPR[EPVS]-1659891430951
========
{
Node nameNode=node.getFirstChild();
if(nameNode==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891430954
GPR[SPVAP]-1659891430954
GPR[EPVAP]-1659891432927
GPR[EPVS]-1659891432927
========
{
Node nameNode=node.getFirstChild();
if(parent!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891432928
GPR[SPVAP]-1659891432928
GPR[EPVAP]-1659891434852
GPR[EPVS]-1659891434852
========
{
Node nameNode=node.getFirstChild();
Preconditions.checkState(!newName.isExtern());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891434854
GPR[SPVAP]-1659891434854
GPR[EPVAP]-1659891436838
GPR[EPVS]-1659891436838
========
{
swtich (nameNode.getType()){
case Token.ADD :
break;

case Token.FUNCTION :
break;

case Token.CALL :
break;

}
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891436840
GPR[SPVAP]-1659891436840
GPR[EPVAP]-1659891438644
GPR[EPVS]-1659891438644
========
{
Node nameNode=functionBody.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891438658
GPR[SPVAP]-1659891438658
GPR[EPVAP]-1659891440491
GPR[EPVS]-1659891440491
========
{
Preconditions.checkState(node.getParent().isFunction());
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891440492
GPR[SPVAP]-1659891440492
GPR[EPVAP]-1659891442336
GPR[EPVS]-1659891442336
========
{
Node nameNode=n.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891442338
GPR[SPVAP]-1659891442338
GPR[EPVAP]-1659891444254
GPR[EPVS]-1659891444254
========
{
Preconditions.checkArgument(node.isGetProp());
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891444258
GPR[SPVAP]-1659891444258
GPR[EPVAP]-1659891446068
GPR[EPVS]-1659891446068
========
{
instanceType=li!=null?li:getType(node.getFirstChild());
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891446069
GPR[SPVAP]-1659891446069
GPR[EPVAP]-1659891447923
GPR[EPVS]-1659891447923
========
{
Preconditions.checkState(getType(node.getFirstChild()).toObjectType()!=null);
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891447924
GPR[SPVAP]-1659891447924
GPR[EPVAP]-1659891451036
GPR[EPVS]-1659891451036
========
{
if(!removeUnused){
Reference new Reference(node,node)=new Reference(node,node);
FunctionType getType(node.getFirstChild()).toObjectType().getConstructor()=getType(node.getFirstChild()).toObjectType().getConstructor();
if(getType(node.getFirstChild()).toObjectType().getConstructor()!=null){
String newName=node.getLastChild().getString();
if(!getType(node.getFirstChild()).toObjectType().getConstructor().getPrototype().hasOwnProperty(newName)){
recordSuperClassPrototypePropUse(getType(node.getFirstChild()).toObjectType().getConstructor(),newName,new Reference(node,node));
}
recordSubclassPrototypePropUse(getType(node.getFirstChild()).toObjectType().getConstructor(),newName,new Reference(node,node));
}else {
recordUnknownUse(node,node);
}
}
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891451037
GPR[SPVAP]-1659891451037
GPR[EPVAP]-1659891452898
GPR[EPVS]-1659891452898
========
{
Preconditions.checkArgument(node.isGetProp());
instanceType=li!=null?li:getType(node.getFirstChild());
Preconditions.checkState(getType(node.getFirstChild()).toObjectType()!=null);
if(!removeUnused){
Reference new Reference(node,node)=new Reference(node,node);
FunctionType getType(node.getFirstChild()).toObjectType().getConstructor()=getType(node.getFirstChild()).toObjectType().getConstructor();
if(getType(node.getFirstChild()).toObjectType().getConstructor()!=null){
String newName=node.getLastChild().getString();
if(!getType(node.getFirstChild()).toObjectType().getConstructor().getPrototype().hasOwnProperty(newName)){
recordSuperClassPrototypePropUse(getType(node.getFirstChild()).toObjectType().getConstructor(),newName,new Reference(node,node));
}
recordSubclassPrototypePropUse(getType(node.getFirstChild()).toObjectType().getConstructor(),newName,new Reference(node,node));
}else {
recordUnknownUse(node,node);
}
}

Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891452899
GPR[SPVAP]-1659891452899
GPR[EPVAP]-1659891454585
GPR[EPVS]-1659891454585
========
{
Node nameNode=node.getFirstChild();
if(nameNode!=nameNode.getNext()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891454586
GPR[SPVAP]-1659891454586
GPR[EPVAP]-1659891456535
GPR[EPVS]-1659891456535
========
{
Node nameNode=node.getFirstChild();
if(nameNode.getNext()!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891456536
GPR[SPVAP]-1659891456536
GPR[EPVAP]-1659891458344
GPR[EPVS]-1659891458344
========
{
Node nameNode=node.getFirstChild();
if(cur!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891458345
GPR[SPVAP]-1659891458345
GPR[EPVAP]-1659891460296
GPR[EPVS]-1659891460297
========
{
Node nameNode=node.getFirstChild();
if(next!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891460297
GPR[SPVAP]-1659891460297
GPR[EPVAP]-1659891462202
GPR[EPVS]-1659891462202
========
{
if(!NodeUtil.isStatementBlock(node)){
return node;
}
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891462203
GPR[SPVAP]-1659891462203
GPR[EPVAP]-1659891464114
GPR[EPVS]-1659891464115
========
{
Node nameNode=ancestor.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891464116
GPR[SPVAP]-1659891464116
GPR[EPVAP]-1659891465932
GPR[EPVS]-1659891465932
========
{
Node nameNode=node.getFirstChild();
if(tracker!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891465934
GPR[SPVAP]-1659891465934
GPR[EPVAP]-1659891467778
GPR[EPVS]-1659891467778
========
{
tracer=new Tracer("JSCompiler");
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891467780
GPR[SPVAP]-1659891467780
GPR[EPVAP]-1659891469591
GPR[EPVS]-1659891469591
========
{
try{
maybeSanityCheck(newName,node);
}catch (IllegalStateException e) {
  throw new RuntimeException("Sanity check failed for " + name,e);
}

Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891469592
GPR[SPVAP]-1659891469592
GPR[EPVAP]-1659891471601
GPR[EPVS]-1659891471601
========
{
tracer=new Tracer("JSCompiler");
try{
maybeSanityCheck(newName,node);
}catch (IllegalStateException e) {
  throw new RuntimeException("Sanity check failed for " + name,e);
}


Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891471602
GPR[SPVAP]-1659891471602
GPR[EPVAP]-1659891473523
GPR[EPVS]-1659891473523
========
{
if(!NodeUtil.isStatementBlock(name)){
return ;
}
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891473525
GPR[SPVAP]-1659891473525
GPR[EPVAP]-1659891475544
GPR[EPVS]-1659891475544
========
{
Preconditions.checkNotNull(nameNode);
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891475545
GPR[SPVAP]-1659891475545
GPR[EPVAP]-1659891477478
GPR[EPVS]-1659891477478
========
{
Preconditions.checkNotNull(nameNode.getNext());
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891477479
GPR[SPVAP]-1659891477479
GPR[EPVAP]-1659891479300
GPR[EPVS]-1659891479300
========
{
if(!NodeUtil.isStatementBlock(name)){
return ;
}
Preconditions.checkNotNull(nameNode);
Preconditions.checkNotNull(nameNode.getNext());

Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891479301
GPR[SPVAP]-1659891479301
GPR[EPVAP]-1659891481156
GPR[EPVS]-1659891481156
========
{
Node nameNode=nameNode.getFirstChild().getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891481157
GPR[SPVAP]-1659891481157
GPR[EPVAP]-1659891483090
GPR[EPVS]-1659891483090
========
{
NodeUtil.redeclareVarsInsideBranch(removeUnused?nameNode.getFirstChild().getNext().getNext():nameNode.getFirstChild().getNext());
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891483091
GPR[SPVAP]-1659891483091
GPR[EPVAP]-1659891484890
GPR[EPVS]-1659891484890
========
{
nameNode.removeChild(newName);
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891484891
GPR[SPVAP]-1659891484891
GPR[EPVAP]-1659891486755
GPR[EPVS]-1659891486755
========
{
node.replaceChild(nameNode,newName);
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891486756
GPR[SPVAP]-1659891486756
GPR[EPVAP]-1659891488608
GPR[EPVS]-1659891488608
========
{
reportCodeChange();
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891488610
GPR[SPVAP]-1659891488610
GPR[EPVAP]-1659891490544
GPR[EPVS]-1659891490544
========
{
NodeUtil.redeclareVarsInsideBranch(removeUnused?nameNode.getFirstChild().getNext().getNext():nameNode.getFirstChild().getNext());
nameNode.removeChild(newName);
node.replaceChild(nameNode,newName);
reportCodeChange();

Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891490545
GPR[SPVAP]-1659891490545
GPR[EPVAP]-1659891492384
GPR[EPVS]-1659891492384
========
{
Node nameNode=parameterTypes.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891492390
GPR[SPVAP]-1659891492390
GPR[EPVAP]-1659891494207
GPR[EPVS]-1659891494207
========
{
Node nameNode=node.getFirstChild();
if(parameterTypeNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891494208
GPR[SPVAP]-1659891494208
GPR[EPVAP]-1659891496041
GPR[EPVS]-1659891496041
========
{
Node nameNode=parameters.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891496042
GPR[SPVAP]-1659891496042
GPR[EPVAP]-1659891498304
GPR[EPVS]-1659891498305
========
{
Node nameNode=node.getFirstChild();
if(thisParam!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891498306
GPR[SPVAP]-1659891498306
GPR[EPVAP]-1659891500420
GPR[EPVS]-1659891500420
========
{
Node nameNode=maybeIf.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891500429
GPR[SPVAP]-1659891500429
GPR[EPVAP]-1659891502405
GPR[EPVS]-1659891502405
========
{
Node nameNode=node.getFirstChild();
if(nameNode!=null&&nameNode.isBreak()&&!nameNode.hasChildren()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891502406
GPR[SPVAP]-1659891502406
GPR[EPVAP]-1659891504266
GPR[EPVS]-1659891504267
========
{
Node nameNode=node.getFirstChild();
if(maybeBreak!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891504268
GPR[SPVAP]-1659891504268
GPR[EPVAP]-1659891506198
GPR[EPVS]-1659891506198
========
{
if(newName!=null){
symbol=addSymbol(GLOBAL_THIS,compiler.getNativeType(JSTypeNative.GLOBAL_THIS),false,id,newName);
name.setDeclaration(new Reference(symbol,newName));
}
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891506201
GPR[SPVAP]-1659891506201
GPR[EPVAP]-1659891508056
GPR[EPVS]-1659891508056
========
{
Node nameNode=node.getFirstChild();
if(node.isBlock()&&nameNode!=null&&nameNode.isTry()&&NodeUtil.getCatchBlock(nameNode)==node&&!NodeUtil.hasCatchHandler(node)){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891508059
GPR[SPVAP]-1659891508059
GPR[EPVAP]-1659891510002
GPR[EPVS]-1659891510002
========
{
Node nameNode=node.getFirstChild();
if(node!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891510003
GPR[SPVAP]-1659891510003
GPR[EPVAP]-1659891511851
GPR[EPVS]-1659891511851
========
{
if(node.getFirstChild()!=null){
createEdge(node,Branch.UNCOND,computeFallThrough(node.getFirstChild()));
}else {
createEdge(node,Branch.UNCOND,computeFollowNode(node,this));
}
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891511852
GPR[SPVAP]-1659891511852
GPR[EPVAP]-1659891513666
GPR[EPVS]-1659891513666
========
{
if(nameNode!=null){
swtich (nameNode.getType()){
case Token.TRY :
break;

default :
if(node.isBlock()&&node.isSyntheticBlock()){
createEdge(node,Branch.SYN_BLOCK,computeFollowNode(node,this));
}
break;

}
}
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891513667
GPR[SPVAP]-1659891513667
GPR[EPVAP]-1659891515795
GPR[EPVS]-1659891515795
========
{
if(node.getFirstChild()!=null){
createEdge(node,Branch.UNCOND,computeFallThrough(node.getFirstChild()));
}else {
createEdge(node,Branch.UNCOND,computeFollowNode(node,this));
}
if(nameNode!=null){
swtich (nameNode.getType()){
case Token.TRY :
break;

default :
if(node.isBlock()&&node.isSyntheticBlock()){
createEdge(node,Branch.SYN_BLOCK,computeFollowNode(node,this));
}
break;

}
}

Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891515797
GPR[SPVAP]-1659891515797
GPR[EPVAP]-1659891517462
GPR[EPVS]-1659891517462
========
{
Node nameNode=parent.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891517464
GPR[SPVAP]-1659891517464
GPR[EPVAP]-1659891519423
GPR[EPVS]-1659891519423
========
{
node.addChildToFront(newName);
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891519424
GPR[SPVAP]-1659891519424
GPR[EPVAP]-1659891521340
GPR[EPVS]-1659891521340
========
{
Node nameNode=hook.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891521350
GPR[SPVAP]-1659891521350
GPR[EPVAP]-1659891523224
GPR[EPVS]-1659891523224
========
{
Preconditions.checkArgument(node.isHook(),"Expected: HOOK, Got: %s",Token.name(hook.getType()));
Node nameNode=node.getFirstChild();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891523226
GPR[SPVAP]-1659891523226
GPR[EPVAP]-1659891525065
GPR[EPVS]-1659891525065
========
{
Node nameNode=node.getFirstChild();
if(!getJSType(newName).restrictByNotNullOrUndefined().canBeCalled()){
return ;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}
}

========
GPR[SPVS]-1659891525069
GPR[SPVAP]-1659891525069
GPR[EPVAP]-1659891526864
GPR[EPVS]-1659891526864
GPR[ESUN]-1659891526870
GPR[SSUN]-1659891526870
com.google.javascript.jscomp.RenameLabels,199
========
if(nameNode!=null&&nameNode.isName()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891531056
GPR[SPVAP]-1659891531056
GPR[EPVAP]-1659891540083
GPR[SPVATF]-1659891540083
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891544444
GPR[EPVS]-1659891544444
========
if(nameNode!=null){
if(name.equals(NodeUtil.JSC_PROPERTY_NAME_FN)||name.equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)){
return false;
}
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891544448
GPR[SPVAP]-1659891544448
GPR[EPVAP]-1659891546490
GPR[EPVS]-1659891546490
========
if(NodeUtil.isFunctionDeclaration(node)){
return true;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891546491
GPR[SPVAP]-1659891546491
GPR[EPVAP]-1659891548457
GPR[EPVS]-1659891548457
========
if(node.getFirstChild().getString().isEmpty()&&(NodeUtil.isExprAssign(newName)||node.getParent().isName())){
return true;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891548458
GPR[SPVAP]-1659891548458
GPR[EPVAP]-1659891550515
GPR[EPVS]-1659891550515
========
if(nameNode!=null){
nameNode.removeChild(nameNode);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891550517
GPR[SPVAP]-1659891550517
GPR[EPVAP]-1659891554474
GPR[SPVATF]-1659891554474
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891558070
GPR[EPVS]-1659891558070
========
if(nameNode!=null){
compiler.reportCodeChange();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891558071
GPR[SPVAP]-1659891558071
GPR[EPVAP]-1659891561873
GPR[SPVATF]-1659891561873
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891565691
GPR[EPVS]-1659891565691
========
if(nameNode!=null){
nameNode.removeChild(nameNode);
compiler.reportCodeChange();

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891565692
GPR[SPVAP]-1659891565692
GPR[EPVAP]-1659891569555
GPR[SPVATF]-1659891569555
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891573787
GPR[EPVS]-1659891573787
========
if(nameNode!=null){
nameNode.removeChild(nameNode);
compiler.reportCodeChange();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891573788
GPR[SPVAP]-1659891573788
GPR[EPVAP]-1659891577530
GPR[SPVATF]-1659891577530
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891581629
GPR[EPVS]-1659891581629
========
if(nameNode!=null){
nameNode.removeChild(nameNode);
nameNode.removeChild(nameNode);
compiler.reportCodeChange();

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891581630
GPR[SPVAP]-1659891581630
GPR[EPVAP]-1659891585703
GPR[SPVATF]-1659891585703
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891589269
GPR[EPVS]-1659891589269
========
if(nameNode!=null){
compiler.reportCodeChange();
nameNode.removeChild(nameNode);
compiler.reportCodeChange();

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891589270
GPR[SPVAP]-1659891589270
GPR[EPVAP]-1659891593394
GPR[SPVATF]-1659891593394
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891597067
GPR[EPVS]-1659891597067
========
if(nameNode!=null){
nameNode.removeChild(nameNode);
compiler.reportCodeChange();
nameNode.removeChild(nameNode);
compiler.reportCodeChange();

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891597068
GPR[SPVAP]-1659891597068
GPR[EPVAP]-1659891601040
GPR[SPVATF]-1659891601040
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891604777
GPR[EPVS]-1659891604777
========
if((nameNode!=null)&&(nameNode.isVar())){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891604779
GPR[SPVAP]-1659891604779
GPR[EPVAP]-1659891608664
GPR[SPVATF]-1659891608665
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891612248
GPR[EPVS]-1659891612248
========
if(sibling!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891612249
GPR[SPVAP]-1659891612249
GPR[EPVAP]-1659891614092
GPR[EPVS]-1659891614092
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.setDesc(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891614093
GPR[SPVAP]-1659891614093
GPR[EPVAP]-1659891615942
GPR[EPVS]-1659891615942
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.setIsHidden(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891615943
GPR[SPVAP]-1659891615943
GPR[EPVAP]-1659891617803
GPR[EPVS]-1659891617803
========
if(nameNode!=null){
node.replaceChild(newName,IR.getprop(IR.name(WINDOW),IR.string(name)).srcrefTree(n));
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891617804
GPR[SPVAP]-1659891617804
GPR[EPVAP]-1659891619628
GPR[EPVS]-1659891619628
========
if(nameNode!=null&&nameNode.isName()&&nameNode.getString().equals(var.name)&&node.isAssign()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891619629
GPR[SPVAP]-1659891619629
GPR[EPVAP]-1659891621498
GPR[EPVS]-1659891621498
========
if(rhs!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891621499
GPR[SPVAP]-1659891621499
GPR[EPVAP]-1659891623342
GPR[EPVS]-1659891623342
========
if(nameNode!=null){
String name=nameNode.getString();
node.removeChild(nameNode);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891623343
GPR[SPVAP]-1659891623343
GPR[EPVAP]-1659891627339
GPR[SPVATF]-1659891627339
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891631113
GPR[EPVS]-1659891631113
========
if(nameNode!=null){
String name=nameNode.getString();
node.getParent().replaceChild(n,nameNode);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891631114
GPR[SPVAP]-1659891631114
GPR[EPVAP]-1659891632976
GPR[EPVS]-1659891632976
========
if(nameNode!=null){
String name=nameNode.getString();
node.removeChild(nameNode);
node.getParent().replaceChild(n,nameNode);

Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891632977
GPR[SPVAP]-1659891632977
GPR[EPVAP]-1659891635046
GPR[EPVS]-1659891635046
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.substring(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891635048
GPR[SPVAP]-1659891635048
GPR[EPVAP]-1659891636890
GPR[EPVS]-1659891636890
========
if(target!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891636892
GPR[SPVAP]-1659891636892
GPR[EPVAP]-1659891638884
GPR[EPVS]-1659891638884
========
Preconditions.checkState(node.isName());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891638888
GPR[SPVAP]-1659891638888
GPR[EPVAP]-1659891642805
GPR[SPVATF]-1659891642805
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891646519
GPR[EPVS]-1659891646519
========
if(isCandidateUsage(node)){
return ;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891646520
GPR[SPVAP]-1659891646520
GPR[EPVAP]-1659891648464
GPR[EPVS]-1659891648464
========
if(compiler.get(name)==null){
return ;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891648465
GPR[SPVAP]-1659891648465
GPR[EPVAP]-1659891650269
GPR[EPVS]-1659891650269
========
if(node.isAssign()&&parent.getFirstChild()==node){
compiler.get(name).setInline(false);
}else {
fs.setRemove(false);
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891650270
GPR[SPVAP]-1659891650270
GPR[EPVAP]-1659891652093
GPR[EPVS]-1659891652093
========
if(nameNode==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891652095
GPR[SPVAP]-1659891652095
GPR[EPVAP]-1659891655975
GPR[SPVATF]-1659891655975
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891659610
GPR[EPVS]-1659891659610
========
if(param!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891659612
GPR[SPVAP]-1659891659612
GPR[EPVAP]-1659891661472
GPR[EPVS]-1659891661472
========
if(nameNode!=null){
keyString=nameNode.getString();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891661473
GPR[SPVAP]-1659891661473
GPR[EPVAP]-1659891663288
GPR[EPVS]-1659891663288
========
if(nameNode!=null){
param=nameNode.getNext();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891663289
GPR[SPVAP]-1659891663289
GPR[EPVAP]-1659891665547
GPR[EPVS]-1659891665547
========
if(nameNode!=null){
if(nameNode!=null){
Preconditions.checkState(nameNode.isName());
valueString=nameNode.getString();
}
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891665548
GPR[SPVAP]-1659891665548
GPR[EPVAP]-1659891667365
GPR[EPVS]-1659891667365
========
if(nameNode!=null){
keyString=nameNode.getString();
param=nameNode.getNext();
if(nameNode!=null){
Preconditions.checkState(nameNode.isName());
valueString=nameNode.getString();
}

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891667366
GPR[SPVAP]-1659891667366
GPR[EPVAP]-1659891669151
GPR[EPVS]-1659891669151
========
Preconditions.checkState(node.isFunction());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891669152
GPR[SPVAP]-1659891669152
GPR[EPVAP]-1659891673288
GPR[SPVATF]-1659891673288
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891677261
GPR[EPVS]-1659891677261
========
id--;
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891677263
GPR[SPVAP]-1659891677263
GPR[EPVAP]-1659891679073
GPR[EPVS]-1659891679073
========
Preconditions.checkState(id>=0,"Line number must be >= 0");
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891679074
GPR[SPVAP]-1659891679074
GPR[EPVAP]-1659891681008
GPR[EPVS]-1659891681008
========
Preconditions.checkState(id>=0,"Column index must be >= 0");
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891681009
GPR[SPVAP]-1659891681009
GPR[EPVAP]-1659891682836
GPR[EPVS]-1659891682837
========
if(nameNode!=null&&nameNode.isVar()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891682838
GPR[SPVAP]-1659891682838
GPR[EPVAP]-1659891687194
GPR[SPVATF]-1659891687194
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891691074
GPR[EPVS]-1659891691074
========
if(parent!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891691075
GPR[SPVAP]-1659891691075
GPR[EPVAP]-1659891692940
GPR[EPVS]-1659891692941
========
if(nameNode!=null){
String name=n.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891692942
GPR[SPVAP]-1659891692942
GPR[EPVAP]-1659891694748
GPR[EPVS]-1659891694748
========
if(name!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891694750
GPR[SPVAP]-1659891694750
GPR[EPVAP]-1659891696583
GPR[EPVS]-1659891696583
========
if(nameNode!=null){
String name=nameNode.getString();
node.removeChild(newName);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891696584
GPR[SPVAP]-1659891696584
GPR[EPVAP]-1659891698625
GPR[EPVS]-1659891698625
========
if(nameNode!=null){
String name=nameNode.getString();
node.replaceChild(node,newName);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891698626
GPR[SPVAP]-1659891698626
GPR[EPVAP]-1659891700427
GPR[EPVS]-1659891700427
========
if(nameNode!=null){
String name=nameNode.getString();
node.removeChild(newName);
node.replaceChild(node,newName);

Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891700428
GPR[SPVAP]-1659891700428
GPR[EPVAP]-1659891702230
GPR[EPVS]-1659891702230
========
if(nameNode!=null){
String name=removeUnused?null:nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891702233
GPR[SPVAP]-1659891702233
GPR[EPVAP]-1659891706065
GPR[SPVATF]-1659891706065
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891709728
GPR[EPVS]-1659891709728
========
if(right!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891709729
GPR[SPVAP]-1659891709729
GPR[EPVAP]-1659891711656
GPR[EPVS]-1659891711656
========
if(nameNode!=null){
Preconditions.checkState(-1!=-1);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891711657
GPR[SPVAP]-1659891711657
GPR[EPVAP]-1659891715633
GPR[SPVATF]-1659891715633
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891719474
GPR[EPVS]-1659891719474
========
if(nameNode!=null){
node.getParent().replaceChild(n,IR.number(-1));
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891719475
GPR[SPVAP]-1659891719475
GPR[EPVAP]-1659891721315
GPR[EPVS]-1659891721315
========
if(nameNode!=null){
reportCodeChange();
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891721316
GPR[SPVAP]-1659891721316
GPR[EPVAP]-1659891723413
GPR[EPVS]-1659891723413
========
if(nameNode!=null){
Preconditions.checkState(-1!=-1);
node.getParent().replaceChild(n,IR.number(-1));
reportCodeChange();

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891723414
GPR[SPVAP]-1659891723414
GPR[EPVAP]-1659891725276
GPR[EPVS]-1659891725276
========
if(flags!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891725277
GPR[SPVAP]-1659891725277
GPR[EPVAP]-1659891727276
GPR[EPVS]-1659891727276
========
if(nameNode!=null){
String name=nameNode.getString();
if(!areValidRegexpFlags(nameNode.getString())){
report(INVALID_REGULAR_EXPRESSION_FLAGS,nameNode);
return node;
}
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891727277
GPR[SPVAP]-1659891727277
GPR[EPVAP]-1659891729282
GPR[EPVS]-1659891729283
========
if(nameNode!=null){
String name=nameNode.getString();
if(!areSafeFlagsToFold(nameNode.getString())){
return node;
}
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891729284
GPR[SPVAP]-1659891729284
GPR[EPVAP]-1659891731091
GPR[EPVS]-1659891731091
========
if(nameNode!=null){
String name=nameNode.getString();
if(!areValidRegexpFlags(nameNode.getString())){
report(INVALID_REGULAR_EXPRESSION_FLAGS,nameNode);
return node;
}
if(!areSafeFlagsToFold(nameNode.getString())){
return node;
}
node.removeChild(nameNode);

Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891731092
GPR[SPVAP]-1659891731092
GPR[EPVAP]-1659891732889
GPR[EPVS]-1659891732889
========
if(n!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891732890
GPR[SPVAP]-1659891732890
GPR[EPVAP]-1659891734791
GPR[EPVS]-1659891734791
========
if(nameNode!=null){
node.setLength(name.length());
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891734793
GPR[SPVAP]-1659891734793
GPR[EPVAP]-1659891736668
GPR[EPVS]-1659891736668
========
if(nameNode!=null){
new JSDocInfo.NamePosition().setItem(node);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891736669
GPR[SPVAP]-1659891736669
GPR[EPVAP]-1659891738544
GPR[EPVS]-1659891738544
========
if(nameNode!=null){
node.setLength(name.length());
new JSDocInfo.NamePosition().setItem(node);

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891738545
GPR[SPVAP]-1659891738545
GPR[EPVAP]-1659891740356
GPR[EPVS]-1659891740356
========
if(value!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891740357
GPR[SPVAP]-1659891740357
GPR[EPVAP]-1659891742265
GPR[EPVS]-1659891742265
========
if(nameNode!=null){
newName.addChildToBack(nameNode);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891742266
GPR[SPVAP]-1659891742266
GPR[EPVAP]-1659891744088
GPR[EPVS]-1659891744088
========
if(nameNode!=null){
newName.srcref(nameNode);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891744089
GPR[SPVAP]-1659891744089
GPR[EPVAP]-1659891745970
GPR[EPVS]-1659891745970
========
if(nameNode!=null){
newName.addChildToBack(nameNode);
newName.srcref(nameNode);

String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891745971
GPR[SPVAP]-1659891745971
GPR[EPVAP]-1659891747771
GPR[EPVS]-1659891747771
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.getString(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891747772
GPR[SPVAP]-1659891747772
GPR[EPVAP]-1659891749573
GPR[EPVS]-1659891749573
========
if(left!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891749574
GPR[SPVAP]-1659891749574
GPR[EPVAP]-1659891751393
GPR[EPVS]-1659891751393
========
if(arg2!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891751394
GPR[SPVAP]-1659891751394
GPR[EPVAP]-1659891753244
GPR[EPVS]-1659891753244
========
if((id>name.length())||(id>stringAsString.length())){
return node;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891753245
GPR[SPVAP]-1659891753245
GPR[EPVAP]-1659891755635
GPR[EPVS]-1659891755635
========
node.getParent().replaceChild(node,IR.string(newName));
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891755636
GPR[SPVAP]-1659891755636
GPR[EPVAP]-1659891757535
GPR[EPVS]-1659891757535
========
reportCodeChange();
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891757536
GPR[SPVAP]-1659891757536
GPR[EPVAP]-1659891759523
GPR[EPVS]-1659891759523
========
if(dest!=null){
String name=dest.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891759525
GPR[SPVAP]-1659891759525
GPR[EPVAP]-1659891761335
GPR[EPVS]-1659891761335
========
if(dest!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891761337
GPR[SPVAP]-1659891761337
GPR[EPVAP]-1659891763241
GPR[EPVS]-1659891763241
========
if(nameNode!=null){
String name=dest.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891763242
GPR[SPVAP]-1659891763242
GPR[EPVAP]-1659891765262
GPR[EPVS]-1659891765262
========
if(nameNode!=null&&nameNode.isObjectLit()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891765264
GPR[SPVAP]-1659891765264
GPR[EPVAP]-1659891769257
GPR[SPVATF]-1659891769257
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891772850
GPR[EPVS]-1659891772850
========
if(NodeUtil.isFunctionObjectApply(nameNode)){
return false;
}
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891772851
GPR[SPVAP]-1659891772851
GPR[EPVAP]-1659891774648
GPR[EPVS]-1659891774648
========
Preconditions.checkState(name.size()==1);
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891774650
GPR[SPVAP]-1659891774650
GPR[EPVAP]-1659891776663
GPR[EPVS]-1659891776664
========
if(nameNode!=null){
node.putBooleanProp(Node.IS_CONSTANT_NAME,true);
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891776665
GPR[SPVAP]-1659891776665
GPR[EPVAP]-1659891780588
GPR[SPVATF]-1659891780588
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891784660
GPR[EPVS]-1659891784660
========
Preconditions.checkState(node.isName()||n.isString());
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891784661
GPR[SPVAP]-1659891784661
GPR[EPVAP]-1659891786630
GPR[EPVS]-1659891786630
========
if(nameNode!=null){
node.putBooleanProp(Node.IS_CONSTANT_NAME,true);
String name=n.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891786631
GPR[SPVAP]-1659891786631
GPR[EPVAP]-1659891788444
GPR[EPVS]-1659891788444
========
if(nameNode!=null&&nameNode.isVar()&&node.hasChildren()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891788446
GPR[SPVAP]-1659891788446
GPR[EPVAP]-1659891792405
GPR[SPVATF]-1659891792405
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891795971
GPR[EPVS]-1659891795971
========
if(nameNode!=null&&nameNode.isVar()&&node.hasChildren()){
String name=n.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891795972
GPR[SPVAP]-1659891795972
GPR[EPVAP]-1659891797908
GPR[EPVS]-1659891797908
========
if(parent!=null){
String name=n.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891797909
GPR[SPVAP]-1659891797909
GPR[EPVAP]-1659891799711
GPR[EPVS]-1659891799711
========
if(OFF!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891799712
GPR[SPVAP]-1659891799712
GPR[EPVAP]-1659891801534
GPR[EPVS]-1659891801534
========
if(nameNode!=null){
String name=nameNode.getString();
Preconditions.add(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891801535
GPR[SPVAP]-1659891801535
GPR[EPVAP]-1659891803337
GPR[EPVS]-1659891803337
========
if(n!=null){
String name=n.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891803338
GPR[SPVAP]-1659891803338
GPR[EPVAP]-1659891805290
GPR[EPVS]-1659891805290
========
if(nameNode!=null){
if(name!=null){
defineAndAlias(name);
return ;
}
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891805291
GPR[SPVAP]-1659891805291
GPR[EPVAP]-1659891807252
GPR[EPVS]-1659891807252
========
if(last!=null){
String name=last.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891807253
GPR[SPVAP]-1659891807253
GPR[EPVAP]-1659891809123
GPR[EPVS]-1659891809123
========
if(nameNode!=null&&nameNode.isString()){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891809124
GPR[SPVAP]-1659891809124
GPR[EPVAP]-1659891813060
GPR[SPVATF]-1659891813060
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891816616
GPR[EPVS]-1659891816616
========
if(last!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891816617
GPR[SPVAP]-1659891816617
GPR[EPVAP]-1659891818545
GPR[EPVS]-1659891818545
========
if(nameNode!=null){
String name=last.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891818546
GPR[SPVAP]-1659891818546
GPR[EPVAP]-1659891820470
GPR[EPVS]-1659891820470
========
if(node.getFirstChild()!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891820474
GPR[SPVAP]-1659891820474
GPR[EPVAP]-1659891824420
GPR[SPVATF]-1659891824420
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891828332
GPR[EPVS]-1659891828332
========
if(node!=null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891828333
GPR[SPVAP]-1659891828333
GPR[EPVAP]-1659891832353
GPR[SPVATF]-1659891832353
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891836169
GPR[EPVS]-1659891836169
========
if(nameNode!=null){
String name=nameNode.getString();
replaceWithNull(nameNode,node);
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891836170
GPR[SPVAP]-1659891836170
GPR[EPVAP]-1659891838139
GPR[EPVS]-1659891838139
========
if(node.getFirstChild()==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891838140
GPR[SPVAP]-1659891838140
GPR[EPVAP]-1659891842111
GPR[SPVATF]-1659891842111
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891846211
GPR[EPVS]-1659891846211
========
if(node==null){
String name=nameNode.getString();
Preconditions.checkState(name.length()!=0);
LabelInfo li=getLabelInfo(name);
if(li!=null){
String newName=getNameForId(li.id);
li.referenced=true;
if(!name.equals(newName)){
nameNode.setString(newName);
compiler.reportCodeChange();
}
}
}

========
GPR[SPVS]-1659891846212
GPR[SPVAP]-1659891846212
GPR[EPVAP]-1659891850012
GPR[SPVATF]-1659891850012
TESTING : com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
GPR[EPVATF]-1659891854032
GPR[EPVS]-1659891854032
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007faf2e316a00, pid=1690407, tid=140390687143680
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 5935 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007faf2e316a00 [0x00007faf2e316140+0x8c0]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/closure/closure_115_buggy/hs_err_pid1690407.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Closure/115 results at /experiment_home///results/SimFix/Closure/115/seed_261/
\n\nNode: host-46\n
\n\nDate: Sun 07 Aug 2022 10:04:14 AM PDT\n
Removing checked out dir script/workingdir/SimFix/closure/closure_115_buggy
GPR[SSLE]-1659891854068
GPR[ESLE]-1659891914074
