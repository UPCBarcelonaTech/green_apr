Sleep 1m start
GPR[SSLI]-1659873986574
GPR[ESLI]-1659874046579
Running SimFix Chart 22b
Timezone: America/Los_Angeles
Seed 260
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Chart/22/seed_260/
Project lc: chart
New out script/workingdir/SimFix/chart/chart_22_buggy
The file script/workingdir/SimFix/chart/chart_22_buggy does not exist!
script/workingdir/SimFix/chart/chart_22_buggy
Current directory: script/workingdir/SimFix/chart/chart_22_buggy
classpath:  script/workingdir/SimFix/chart/chart_22_buggy/lib/servlet.jar:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/SimFix/chart/chart_22_buggy/build:script/workingdir/SimFix/chart/chart_22_buggy/build-tests
Src java:  /source
Classes Java:  /build
Src Test:  /tests
Classes Test:  /build-tests
GPR[SSLB]-1659874064940
GPR[ESLB]-1659874124945
Calling SimFix: at script/workingdir/SimFix/chart/chart_22_buggy
ant
build
build-tests
ChangeLog
checkstyle
d4j-info
defects4j.build.properties
experimental
lib
licence-LGPL.txt
maven-jfreechart-project.xml
NEWS
README.txt
source
swt
tests
content current dir: ant build build-tests ChangeLog checkstyle d4j-info defects4j.build.properties experimental lib licence-LGPL.txt maven-jfreechart-project.xml NEWS README.txt source swt tests
Node: host-43
Date init: Sun 07 Aug 2022 05:08:47 AM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659874127204
=================================================
Project : chart_22	start : 22/08/07 05:08

TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_2
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_3
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_4
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey_purify_1
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey_purify_2
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey_purify_3
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey_purify_4
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey_purify_5
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey_purify_6
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey_purify_7
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey_purify_8
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testSetObject_purify_1
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testSetObject_purify_2
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testSetObject_purify_3
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testSetObject_purify_4
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testSetObject_purify_5
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testSetObject_purify_6
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testSetObject_purify_7
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey_purify_1
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey_purify_2
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey_purify_3
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey_purify_4
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue_purify_1
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue_purify_2
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue_purify_3
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey_purify_1
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey_purify_2
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey_purify_3
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey_purify_4
GPR[ESUP]-1659874165513
GPR[SFL]-1659874166195
GPR[EFL]-1659874166199
GPR[SFP]-1659874166199
TIMEOUT : 1200000
GPR[SSUN]-1659874166208
org.jfree.data.UnknownKeyException,56
GPR[ESUN]-1659874168151
GPR[SSUN]-1659874168151
org.jfree.data.UnknownKeyException,57
Find no block!
GPR[SSUN]-1659874168471
org.jfree.data.KeyedObjects2D,370
========
if(index<0){
throw new UnknownKeyException("Key not found: "+columnKey);
}

========
GPR[SPVS]-1659874170484
GPR[SPVAP]-1659874170484
GPR[EPVAP]-1659874174759
GPR[SPVATF]-1659874174759
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874175847
GPR[EPVS]-1659874175847
========
if(index<0){
throw new UnknownKeyException("The key ("+columnKey);
}

========
GPR[SPVS]-1659874175849
GPR[SPVAP]-1659874175849
GPR[EPVAP]-1659874177094
GPR[SPVATF]-1659874177094
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874178231
GPR[EPVS]-1659874178232
========
if(column<0){
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874178233
GPR[SPVAP]-1659874178233
GPR[EPVAP]-1659874178947
GPR[EPVS]-1659874178947
========
if(index<0){
throw new UnknownKeyException("The key ("+columnKey.toString());
}

========
GPR[SPVS]-1659874178948
GPR[SPVAP]-1659874178948
GPR[EPVAP]-1659874180149
GPR[SPVATF]-1659874180149
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874181234
GPR[EPVS]-1659874181234
========
if(index<0){
throw new IllegalArgumentException("Requires index >= 0.");
}

========
GPR[SPVS]-1659874181236
GPR[SPVAP]-1659874181236
GPR[EPVAP]-1659874182452
GPR[SPVATF]-1659874182452
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874183568
GPR[EPVS]-1659874183568
========
if(index<0){
throw new SeriesException("X-value already exists.");
}

========
GPR[SPVS]-1659874183570
GPR[SPVAP]-1659874183570
GPR[EPVAP]-1659874184254
GPR[EPVS]-1659874184254
========
if(row<0){
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874184257
GPR[SPVAP]-1659874184257
GPR[EPVAP]-1659874184971
GPR[EPVS]-1659874184971
========
if(index<0){
throw new UnknownKeyException("Unrecognised rowKey: "+columnKey);
}

========
GPR[SPVS]-1659874184973
GPR[SPVAP]-1659874184973
GPR[EPVAP]-1659874186269
GPR[SPVATF]-1659874186269
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874187378
GPR[EPVS]-1659874187378
========
if(index<0){
if(index>=0){
DefaultKeyedValues (DefaultKeyedValues)this.rows.get(index)=(DefaultKeyedValues)this.rows.get(row);
int (DefaultKeyedValues)this.rows.get(index).getIndex(columnKey)=rowData.getIndex(columnKey);
return (col>=0?rowData.getValue(col):null);
}else {
throw new UnknownKeyException("Unrecognised rowKey: "+columnKey);
}
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874187379
GPR[SPVAP]-1659874187379
GPR[EPVAP]-1659874187980
GPR[EPVS]-1659874187980
========
if(index<0){
if(index>=0){
return getValue(index);
}else {
return null;
}
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874187982
GPR[SPVAP]-1659874187982
GPR[EPVAP]-1659874188669
GPR[EPVS]-1659874188669
========
if(index<0){
if(index>=getDatasetCount()){
return ;
}
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874188670
GPR[SPVAP]-1659874188670
GPR[EPVAP]-1659874189358
GPR[EPVS]-1659874189358
========
if(index<0){
throw new IllegalArgumentException("Null \'location\' for index 0 not permitted.");
}

========
GPR[SPVS]-1659874189360
GPR[SPVAP]-1659874189360
GPR[EPVAP]-1659874190578
GPR[SPVATF]-1659874190579
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874191670
GPR[EPVS]-1659874191670
========
if((index<0)||(index>=getSubtitleCount())){
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874191672
GPR[SPVAP]-1659874191672
GPR[EPVAP]-1659874192385
GPR[EPVS]-1659874192385
========
if(index<0){
throw new IllegalArgumentException("Index out of range.");
}

========
GPR[SPVS]-1659874192386
GPR[SPVAP]-1659874192386
GPR[EPVAP]-1659874193603
GPR[SPVATF]-1659874193603
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874194706
GPR[EPVS]-1659874194706
========
if(index<0||index>getSubtitleCount()){
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874194708
GPR[SPVAP]-1659874194708
GPR[EPVAP]-1659874195406
GPR[EPVS]-1659874195406
========
if(index<0){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}

========
GPR[SPVS]-1659874195407
GPR[SPVAP]-1659874195407
GPR[EPVAP]-1659874196652
GPR[SPVATF]-1659874196653
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874197760
GPR[EPVS]-1659874197760
========
if(index<0||index>3){
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874197762
GPR[SPVAP]-1659874197762
GPR[EPVAP]-1659874198995
GPR[SPVATF]-1659874198995
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874200076
GPR[EPVS]-1659874200076
========
if(index<0){
throw new IllegalArgumentException("The index value ("+index);
}

========
GPR[SPVS]-1659874200078
GPR[SPVAP]-1659874200078
GPR[EPVAP]-1659874201318
GPR[SPVATF]-1659874201318
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874202421
GPR[EPVS]-1659874202421
========
if(index<0||index>3){
throw new IllegalArgumentException("The index value ("+index);
}

========
GPR[SPVS]-1659874202422
GPR[SPVAP]-1659874202422
GPR[EPVAP]-1659874203667
GPR[SPVATF]-1659874203667
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874204779
GPR[EPVS]-1659874204779
========
if(index<0||index>=getDatasetCount()){
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874204781
GPR[SPVAP]-1659874204781
GPR[EPVAP]-1659874205475
GPR[EPVS]-1659874205475
========
if(index<0){
throw new IllegalArgumentException("Index "+index);
}

========
GPR[SPVS]-1659874205476
GPR[SPVAP]-1659874205476
GPR[EPVAP]-1659874206704
GPR[SPVATF]-1659874206704
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874207803
GPR[EPVS]-1659874207803
========
if(index<0||index>=getItemCount()){
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874207805
GPR[SPVAP]-1659874207805
GPR[EPVAP]-1659874208522
GPR[EPVS]-1659874208522
========
if(index<0){
throw new IndexOutOfBoundsException("Invalid \'index\': "+index);
}

========
GPR[SPVS]-1659874208523
GPR[SPVAP]-1659874208523
GPR[EPVAP]-1659874209751
GPR[SPVATF]-1659874209751
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874210862
GPR[EPVS]-1659874210862
========
if(index<0){
if(index>=0){
return (TimeSeriesDataItem)this.columnKeys.get(index);
}else {
return null;
}
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874210863
GPR[SPVAP]-1659874210863
GPR[EPVAP]-1659874211563
GPR[EPVS]-1659874211563
========
if(columnIndex<0){
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874211566
GPR[SPVAP]-1659874211566
GPR[EPVAP]-1659874212281
GPR[EPVS]-1659874212281
========
if(index<0){
if(index>=0){
KeyedObjects (KeyedObjects)this.rows.get(index)=(KeyedObjects)this.rows.get(row);
return rowData.getObject(columnKey);
}else {
return null;
}
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874212284
GPR[SPVAP]-1659874212284
GPR[EPVAP]-1659874212899
GPR[EPVS]-1659874212899
========
if(index<0){
throw new SeriesException("No observation for x = "+columnKey);
}

========
GPR[SPVS]-1659874212900
GPR[SPVAP]-1659874212900
GPR[EPVAP]-1659874213594
GPR[EPVS]-1659874213594
========
if(index<0){
throw new SeriesException("TimeSeries.update(TimePeriod, Number):  period does not exist.");
}

========
GPR[SPVS]-1659874213596
GPR[SPVAP]-1659874213596
GPR[EPVAP]-1659874214283
GPR[EPVS]-1659874214284
========
if(index<0){
if(index>=0){
return (TickUnit)this.columnKeys.get(index);
}else {
index=-(index+1);
return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));
}
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874214285
GPR[SPVAP]-1659874214285
GPR[EPVAP]-1659874214969
GPR[EPVS]-1659874214969
========
if(index<0){
index=-(index+1);
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874214971
GPR[SPVAP]-1659874214971
GPR[EPVAP]-1659874216205
GPR[SPVATF]-1659874216205
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874217291
GPR[EPVS]-1659874217291
========
if(index<ORIENTATION_VERTICAL){
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874217293
GPR[SPVAP]-1659874217293
GPR[EPVAP]-1659874217980
GPR[EPVS]-1659874217980
========
if(seen<0){
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874217982
GPR[SPVAP]-1659874217982
GPR[EPVAP]-1659874218679
GPR[EPVS]-1659874218679
========
if(middle<0){
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874218682
GPR[SPVAP]-1659874218682
GPR[EPVAP]-1659874219378
GPR[EPVS]-1659874219378
========
if(index<0||index>=getDatasetCount()){
throw new IllegalArgumentException("Index "+index);
}

========
GPR[SPVS]-1659874219381
GPR[SPVAP]-1659874219381
GPR[EPVAP]-1659874220067
GPR[EPVS]-1659874220067
========
if(start<0){
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874220068
GPR[SPVAP]-1659874220068
GPR[EPVAP]-1659874220809
GPR[EPVS]-1659874220809
========
if(end<0){
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874220811
GPR[SPVAP]-1659874220811
GPR[EPVAP]-1659874221507
GPR[EPVS]-1659874221507
========
if(r<0){
throw new UnknownKeyException("Column key ("+columnKey);
}

========
GPR[SPVS]-1659874221511
GPR[SPVAP]-1659874221511
GPR[EPVAP]-1659874222207
GPR[EPVS]-1659874222207
========
while(iterator.hasNext()){
subplot=(XYPlot)iterator.next();
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874224016
GPR[SPVAP]-1659874224016
GPR[EPVAP]-1659874224703
GPR[EPVS]-1659874224703
========
while(iterator.hasNext()){
subplot=(CategoryPlot)iterator.next();
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874224704
GPR[SPVAP]-1659874224704
GPR[EPVAP]-1659874225395
GPR[EPVS]-1659874225395
========
while(iterator.hasNext()){
clone.data.add(rowData.clone());
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874225397
GPR[SPVAP]-1659874225397
GPR[EPVAP]-1659874226086
GPR[EPVS]-1659874226086
========
while(iterator.hasNext()){
clone.rows.add(rowData.clone());
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874226088
GPR[SPVAP]-1659874226088
GPR[EPVAP]-1659874226779
GPR[EPVS]-1659874226779
========
clearSubtitles();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874226782
GPR[SPVAP]-1659874226782
GPR[EPVAP]-1659874227465
GPR[EPVS]-1659874227465
========
while(iterator.hasNext()){
if(rowData.getKey()!=null){
result=rowData;
}
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874227467
GPR[SPVAP]-1659874227467
GPR[EPVAP]-1659874228166
GPR[EPVS]-1659874228166
========
while(iterator.hasNext()){
totalXCoords+=rowData.getX();
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874228168
GPR[SPVAP]-1659874228168
GPR[EPVAP]-1659874228874
GPR[EPVS]-1659874228874
========
while(iterator.hasNext()){
totalYCoords+=rowData.getY();
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874228876
GPR[SPVAP]-1659874228876
GPR[EPVAP]-1659874229581
GPR[EPVS]-1659874229581
========
while(iterator.hasNext()){
totalXCoords+=rowData.getX();
totalYCoords+=rowData.getY();

KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874229583
GPR[SPVAP]-1659874229583
GPR[EPVAP]-1659874230298
GPR[EPVS]-1659874230298
========
while(iterator.hasNext()){
if(rowData.getKey().equals(columnKey)){
return index;
}
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874230300
GPR[SPVAP]-1659874230300
GPR[EPVAP]-1659874230986
GPR[EPVS]-1659874230986
========
while(iterator.hasNext()){
index++;
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874230987
GPR[SPVAP]-1659874230987
GPR[EPVAP]-1659874232236
GPR[SPVATF]-1659874232236
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874234062
GPR[EPVS]-1659874234062
========
while(iterator.hasNext()){
if(rowData.getKey().equals(columnKey)){
return index;
}
index++;

KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874234063
GPR[SPVAP]-1659874234063
GPR[EPVAP]-1659874234760
GPR[EPVS]-1659874234760
========
while(iterator.hasNext()){
if(rowData.getKey().equals(columnKey)){
return index;
}
index++;
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874234769
GPR[SPVAP]-1659874234769
GPR[EPVAP]-1659874235501
GPR[EPVS]-1659874235501
========
while(iterator.hasNext()){
if(rowData.getKey().equals(columnKey)){
return index;
}
if(rowData.getKey().equals(columnKey)){
return index;
}
index++;

KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874235503
GPR[SPVAP]-1659874235503
GPR[EPVAP]-1659874236238
GPR[EPVS]-1659874236238
========
while(iterator.hasNext()){
index++;
if(rowData.getKey().equals(columnKey)){
return index;
}
index++;

KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874236239
GPR[SPVAP]-1659874236239
GPR[EPVAP]-1659874236957
GPR[EPVS]-1659874236957
========
while(iterator.hasNext()){
if(rowData.getKey().equals(columnKey)){
return index;
}
index++;
if(rowData.getKey().equals(columnKey)){
return index;
}
index++;

KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874236958
GPR[SPVAP]-1659874236958
GPR[EPVAP]-1659874237660
GPR[EPVS]-1659874237660
========
while(iterator.hasNext()){
new java.util.ArrayList().add(rowData.getKey());
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874237662
GPR[SPVAP]-1659874237662
GPR[EPVAP]-1659874238361
GPR[EPVS]-1659874238361
========
while(iterator.hasNext()){
if(!columnKeys.contains((Comparable)iterator.next())){
columnKeys.add((Comparable)iterator.next());
}
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874238363
GPR[SPVAP]-1659874238363
GPR[EPVAP]-1659874239609
GPR[SPVATF]-1659874239609
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874240733
GPR[EPVS]-1659874240733
========
columnKeys.add(this.columnKey);
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874240734
GPR[SPVAP]-1659874240734
GPR[EPVAP]-1659874241429
GPR[EPVS]-1659874241429
========
while(iterator.hasNext()){
previous=rowData.getValue();
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874241431
GPR[SPVAP]-1659874241431
GPR[EPVAP]-1659874242122
GPR[EPVS]-1659874242122
========
while(iterator.hasNext()){
if(columnKey!=null){
if(rowData!=null){
v=rowData.doubleValue();
}
}
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874242124
GPR[SPVAP]-1659874242124
GPR[EPVAP]-1659874242815
GPR[EPVS]-1659874242815
========
Collections.sort(this.columnKeys);
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874242817
GPR[SPVAP]-1659874242817
GPR[EPVAP]-1659874244030
GPR[SPVATF]-1659874244030
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874245107
GPR[EPVS]-1659874245107
========
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.clearDomainMarkers(columnKey);
}

========
GPR[SPVS]-1659874245108
GPR[SPVAP]-1659874245108
GPR[EPVAP]-1659874245822
GPR[EPVS]-1659874245822
========
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.clearRangeMarkers(columnKey);
}

========
GPR[SPVS]-1659874245823
GPR[SPVAP]-1659874245823
GPR[EPVAP]-1659874246508
GPR[EPVS]-1659874246508
========
while(iterator.hasNext()){
if(rowData!=null){
double rowData.doubleValue()=rowData.doubleValue();
}
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874246511
GPR[SPVAP]-1659874246511
GPR[EPVAP]-1659874247106
GPR[EPVS]-1659874247106
========
iterator=columnKeys.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874247108
GPR[SPVAP]-1659874247108
GPR[EPVAP]-1659874248327
GPR[SPVATF]-1659874248327
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874249424
GPR[EPVS]-1659874249424
========
while(iterator.hasNext()){
if(index<0){
this.columnKeys.add(rowData.getDescription());
}
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874249426
GPR[SPVAP]-1659874249426
GPR[EPVAP]-1659874250119
GPR[EPVS]-1659874250119
========
while(iterator.hasNext()){
if(rowData.exists()){
rowData.delete();
}
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874250121
GPR[SPVAP]-1659874250121
GPR[EPVAP]-1659874250822
GPR[EPVS]-1659874250822
========
rowData.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874250824
GPR[SPVAP]-1659874250824
GPR[EPVAP]-1659874251553
GPR[EPVS]-1659874251553
========
while(iterator.hasNext()){
if((TimeSeries)iterator.next().getItemCount()>0){
RegularTimePeriod rowData=(TimeSeries)iterator.next().getTimePeriod(0);
RegularTimePeriod (TimeSeries)iterator.next().getTimePeriod((TimeSeries)iterator.next().getItemCount()-1)=(TimeSeries)iterator.next().getTimePeriod((TimeSeries)iterator.next().getItemCount()-1);
}
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874251555
GPR[SPVAP]-1659874251555
GPR[EPVAP]-1659874252141
GPR[EPVS]-1659874252141
========
iterator.next();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874252142
GPR[SPVAP]-1659874252142
GPR[EPVAP]-1659874253355
GPR[SPVATF]-1659874253355
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874254467
GPR[EPVS]-1659874254467
========
while(iterator.hasNext()){
if((Axis)iterator.next()!=null){
cursor=rowData.getCursor();
}
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874254468
GPR[SPVAP]-1659874254468
GPR[EPVAP]-1659874255153
GPR[EPVS]-1659874255153
========
while(iterator.hasNext()){
y+=rowData.getHeight();
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874255155
GPR[SPVAP]-1659874255155
GPR[EPVAP]-1659874255863
GPR[EPVS]-1659874255863
========
while(iterator.hasNext()){
categoryIndex=index+1;
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874255864
GPR[SPVAP]-1659874255864
GPR[EPVAP]-1659874256568
GPR[EPVS]-1659874256568
========
while(iterator.hasNext()){
height+=rowData.getHeight();
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874256571
GPR[SPVAP]-1659874256571
GPR[EPVAP]-1659874257291
GPR[EPVS]-1659874257291
========
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(rowData.getIndex(columnKey));
}

========
GPR[SPVS]-1659874257293
GPR[SPVAP]-1659874257293
GPR[EPVAP]-1659874258567
GPR[SPVATF]-1659874258567
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874259656
GPR[EPVS]-1659874259656
========
removeValue(index);
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874259658
GPR[SPVAP]-1659874259658
GPR[EPVAP]-1659874260346
GPR[EPVS]-1659874260346
========
iterator=tminor.next();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874260348
GPR[SPVAP]-1659874260348
GPR[EPVAP]-1659874261065
GPR[EPVS]-1659874261065
========
this.columnKey=columnKey;
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874261068
GPR[SPVAP]-1659874261068
GPR[EPVAP]-1659874261756
GPR[EPVS]-1659874261756
========
if(this.columnKeys.indexOf(columnKey)<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874261758
GPR[SPVAP]-1659874261758
GPR[EPVAP]-1659874262967
GPR[SPVATF]-1659874262967
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874264077
GPR[EPVS]-1659874264077
========
index++;
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}

========
GPR[SPVS]-1659874264079
GPR[SPVAP]-1659874264079
GPR[EPVAP]-1659874265296
GPR[SPVATF]-1659874265296
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874266384
GPR[EPVS]-1659874266384
========
int index=getColumnIndex(columnKey);
if(seen<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874268560
GPR[SPVAP]-1659874268560
GPR[EPVAP]-1659874269273
GPR[EPVS]-1659874269273
========
int index=getColumnIndex(columnKey);
if(column<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874269275
GPR[SPVAP]-1659874269275
GPR[EPVAP]-1659874270001
GPR[EPVS]-1659874270001
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
rows.add(rowData.getKey());
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874270004
GPR[SPVAP]-1659874270004
GPR[EPVAP]-1659874270708
GPR[EPVS]-1659874270708
========
int index=getColumnIndex(columnKey);
if(index<0){
if(getRenderer(index)==null){
return ;
}
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874270710
GPR[SPVAP]-1659874270710
GPR[EPVAP]-1659874271405
GPR[EPVS]-1659874271405
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
clone.rows.add(rowData.clone());
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874271407
GPR[SPVAP]-1659874271407
GPR[EPVAP]-1659874272107
GPR[EPVS]-1659874272107
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874272109
GPR[SPVAP]-1659874272109
GPR[EPVAP]-1659874272817
GPR[EPVS]-1659874272817
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874272818
GPR[SPVAP]-1659874272818
GPR[EPVAP]-1659874273541
GPR[EPVS]-1659874273541
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
clone.rows=new java.util.ArrayList(this.rows.size());
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874273542
GPR[SPVAP]-1659874273542
GPR[EPVAP]-1659874274226
GPR[EPVS]-1659874274226
========
Collections.sort(this.columnKeys);
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874274228
GPR[SPVAP]-1659874274228
GPR[EPVAP]-1659874275468
GPR[SPVATF]-1659874275468
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874276574
GPR[EPVS]-1659874276574
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
clone.data.add(rowData.clone());
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874276576
GPR[SPVAP]-1659874276576
GPR[EPVAP]-1659874277280
GPR[EPVS]-1659874277280
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
clone.data=new java.util.ArrayList();
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874277282
GPR[SPVAP]-1659874277282
GPR[EPVAP]-1659874277969
GPR[EPVS]-1659874277969
========
fireDatasetChanged();
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874277971
GPR[SPVAP]-1659874277971
GPR[EPVAP]-1659874278685
GPR[EPVS]-1659874278685
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
if(columnKey!=null){
if(rowData!=null){
v=rowData.doubleValue();
}
}
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874278687
GPR[SPVAP]-1659874278687
GPR[EPVAP]-1659874279374
GPR[EPVS]-1659874279374
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
if(!new ArrayList().contains(columnKey)){
new ArrayList().add(columnKey);
}
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874279375
GPR[SPVAP]-1659874279375
GPR[EPVAP]-1659874280063
GPR[EPVS]-1659874280063
========
int index=getColumnIndex(columnKey);
if(value<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874280064
GPR[SPVAP]-1659874280064
GPR[EPVAP]-1659874280749
GPR[EPVS]-1659874280749
========
int index=getColumnIndex(columnKey);
if(total<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874280750
GPR[SPVAP]-1659874280750
GPR[EPVAP]-1659874281443
GPR[EPVS]-1659874281443
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("The key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874281444
GPR[SPVAP]-1659874281445
GPR[EPVAP]-1659874282690
GPR[SPVATF]-1659874282690
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874283786
GPR[EPVS]-1659874283786
========
removeValue(index);
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874283787
GPR[SPVAP]-1659874283787
GPR[EPVAP]-1659874284482
GPR[EPVS]-1659874284482
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
previous=rowData.getValue();
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874284483
GPR[SPVAP]-1659874284483
GPR[EPVAP]-1659874285174
GPR[EPVS]-1659874285174
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("The key ("+columnKey.toString());
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874285176
GPR[SPVAP]-1659874285176
GPR[EPVAP]-1659874286401
GPR[SPVATF]-1659874286401
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874287511
GPR[EPVS]-1659874287511
========
removeValue(index);
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("The key ("+columnKey.toString());
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874287513
GPR[SPVAP]-1659874287513
GPR[EPVAP]-1659874288200
GPR[EPVS]-1659874288201
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(getRowIndex(columnKey));

========
GPR[SPVS]-1659874288203
GPR[SPVAP]-1659874288203
GPR[EPVAP]-1659874289414
GPR[SPVATF]-1659874289414
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874290503
GPR[EPVS]-1659874290503
========
setValue(null,columnKey,columnKey);
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874290505
GPR[SPVAP]-1659874290505
GPR[EPVAP]-1659874291187
GPR[EPVS]-1659874291187
========
setObject(null,columnKey,columnKey);
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874291188
GPR[SPVAP]-1659874291188
GPR[EPVAP]-1659874292421
GPR[SPVATF]-1659874292421
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874293539
GPR[EPVS]-1659874293539
========
setObject(null,columnKey,columnKey);
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(getRowIndex(columnKey));

========
GPR[SPVS]-1659874293541
GPR[SPVAP]-1659874293541
GPR[EPVAP]-1659874294765
GPR[SPVATF]-1659874294765
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874295851
GPR[EPVS]-1659874295851
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
if((MeterInterval)iterator.next().getBackgroundPaint()==null){
color=(MeterInterval)iterator.next().getOutlinePaint();
}
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874295852
GPR[SPVAP]-1659874295852
GPR[EPVAP]-1659874296549
GPR[EPVS]-1659874296549
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
rowData.add(new LegendItem((MeterInterval)iterator.next().getLabel(),mi.getLabel(),null,null,new Rectangle2D.Double(-4.0,-4.0,8.0,8.0),(MeterInterval)iterator.next().getBackgroundPaint()));
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874296550
GPR[SPVAP]-1659874296550
GPR[EPVAP]-1659874297247
GPR[EPVS]-1659874297247
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
if((MeterInterval)iterator.next().getBackgroundPaint()==null){
color=(MeterInterval)iterator.next().getOutlinePaint();
}
rowData.add(new LegendItem((MeterInterval)iterator.next().getLabel(),mi.getLabel(),null,null,new Rectangle2D.Double(-4.0,-4.0,8.0,8.0),(MeterInterval)iterator.next().getBackgroundPaint()));

KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874297248
GPR[SPVAP]-1659874297248
GPR[EPVAP]-1659874297939
GPR[EPVS]-1659874297939
========
int index=getColumnIndex(columnKey);
if(count<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874297942
GPR[SPVAP]-1659874297942
GPR[EPVAP]-1659874298639
GPR[EPVS]-1659874298639
========
int index=getColumnIndex(columnKey);
if(valuesPerColor<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874298640
GPR[SPVAP]-1659874298640
GPR[EPVAP]-1659874299353
GPR[EPVS]-1659874299353
========
int index=getColumnIndex(columnKey);
if(depth<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874299355
GPR[SPVAP]-1659874299355
GPR[EPVAP]-1659874300072
GPR[EPVS]-1659874300072
========
int index=getColumnIndex(columnKey);
if(index<0){
if(index<0){
return ;
}
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874300073
GPR[SPVAP]-1659874300073
GPR[EPVAP]-1659874301349
GPR[SPVATF]-1659874301349
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874302440
GPR[EPVS]-1659874302440
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
categoryIndex=index+1;
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874302442
GPR[SPVAP]-1659874302442
GPR[EPVAP]-1659874303132
GPR[EPVS]-1659874303132
========
fireSeriesChanged();
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874303134
GPR[SPVAP]-1659874303134
GPR[EPVAP]-1659874303825
GPR[EPVS]-1659874303825
========
int index=getColumnIndex(columnKey);
if(paint<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874303826
GPR[SPVAP]-1659874303826
GPR[EPVAP]-1659874304516
GPR[EPVS]-1659874304517
========
int index=getColumnIndex(columnKey);
if(itemIndex<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874304518
GPR[SPVAP]-1659874304518
GPR[EPVAP]-1659874305207
GPR[EPVS]-1659874305207
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Unknown \'category\' key.");
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874305208
GPR[SPVAP]-1659874305208
GPR[EPVAP]-1659874306454
GPR[SPVATF]-1659874306454
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874307557
GPR[EPVS]-1659874307557
========
int index=getColumnIndex(columnKey);
if(itemIndex<0){
throw new UnknownKeyException("Unknown \'category\' key.");
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874307559
GPR[SPVAP]-1659874307559
GPR[EPVAP]-1659874308270
GPR[EPVS]-1659874308270
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Key not found: "+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874308273
GPR[SPVAP]-1659874308273
GPR[EPVAP]-1659874309507
GPR[SPVATF]-1659874309507
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874310638
GPR[EPVS]-1659874310638
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.setCompressionMode(columnKey);

========
GPR[SPVS]-1659874310640
GPR[SPVAP]-1659874310640
GPR[EPVAP]-1659874311325
GPR[EPVS]-1659874311325
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
this.columnKeys.remove(index);
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874311327
GPR[SPVAP]-1659874311327
GPR[EPVAP]-1659874312577
GPR[SPVATF]-1659874312578
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874313667
GPR[EPVS]-1659874313667
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
this.rows.remove(index);
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874313668
GPR[SPVAP]-1659874313668
GPR[EPVAP]-1659874314899
GPR[SPVATF]-1659874314899
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874316005
GPR[SPVATR]-1659874316006
TESTING : chart_22
GPR[EPVATR]-1659874325937
GPR[EPVS]-1659874325937
GPR[PF]-1659874325937
sourceFile  script/workingdir/SimFix/chart/chart_22_buggy/source/org/jfree/data/KeyedObjects2D.java
location   script/workingdir/SimFix/chart/chart_22_buggy
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
this.columnKeys.remove(index);
this.rows.remove(index);

rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874325947
GPR[SPVAP]-1659874325947
GPR[EPVAP]-1659874327173
GPR[SPVATF]-1659874327173
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874328266
GPR[SPVATR]-1659874328267
TESTING : chart_22
GPR[EPVATR]-1659874338116
GPR[EPVS]-1659874338116
GPR[PF]-1659874338116
sourceFile  script/workingdir/SimFix/chart/chart_22_buggy/source/org/jfree/data/KeyedObjects2D.java
location   script/workingdir/SimFix/chart/chart_22_buggy
========
int index=getColumnIndex(columnKey);
if(columnIndex<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874338125
GPR[SPVAP]-1659874338125
GPR[EPVAP]-1659874338814
GPR[EPVS]-1659874338814
========
notifyListeners(new RendererChangeEvent(this));
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874338815
GPR[SPVAP]-1659874338815
GPR[EPVAP]-1659874339510
GPR[EPVS]-1659874339510
========
int index=getColumnIndex(columnKey);
if(domainIndex<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874339511
GPR[SPVAP]-1659874339511
GPR[EPVAP]-1659874340214
GPR[EPVS]-1659874340214
========
int index=getColumnIndex(columnKey);
if(v<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874340216
GPR[SPVAP]-1659874340216
GPR[EPVAP]-1659874340901
GPR[EPVS]-1659874340901
========
int index=getColumnIndex(columnKey);
if(r<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874340904
GPR[SPVAP]-1659874340904
GPR[EPVAP]-1659874341596
GPR[EPVS]-1659874341596
========
this.columnKey=rowKey;
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874341599
GPR[SPVAP]-1659874341599
GPR[EPVAP]-1659874342281
GPR[EPVS]-1659874342281
========
this.columnKey=columnKey;
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874342282
GPR[SPVAP]-1659874342282
GPR[EPVAP]-1659874342981
GPR[EPVS]-1659874342981
========
int index=getColumnIndex(columnKey);
if(seg1<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874342983
GPR[SPVAP]-1659874342983
GPR[EPVAP]-1659874343670
GPR[EPVS]-1659874343670
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new SeriesException("No observation for x = "+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874343672
GPR[SPVAP]-1659874343672
GPR[EPVAP]-1659874344374
GPR[EPVS]-1659874344374
========
case 1 :

int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874344377
GPR[SPVAP]-1659874344377
GPR[EPVAP]-1659874344966
GPR[EPVS]-1659874344966
========
int index=getColumnIndex(columnKey);
if(pos<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874344967
GPR[SPVAP]-1659874344967
GPR[EPVAP]-1659874345669
GPR[EPVS]-1659874345669
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new SeriesException("TimeSeries.update(TimePeriod, Number):  period does not exist.");
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874345670
GPR[SPVAP]-1659874345670
GPR[EPVAP]-1659874346351
GPR[EPVS]-1659874346351
========
int index=getColumnIndex(columnKey);
if(index<0){
if(index>=0){
return (TimeSeriesDataItem)this.columnKeys.get(index);
}else {
return null;
}
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874346353
GPR[SPVAP]-1659874346353
GPR[EPVAP]-1659874347069
GPR[EPVS]-1659874347069
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
fireDatasetChanged();
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874347070
GPR[SPVAP]-1659874347070
GPR[EPVAP]-1659874347771
GPR[EPVS]-1659874347771
========
int index=getColumnIndex(columnKey);
if(start<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874347773
GPR[SPVAP]-1659874347773
GPR[EPVAP]-1659874348459
GPR[EPVS]-1659874348459
========
int index=getColumnIndex(columnKey);
if(end<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874348460
GPR[SPVAP]-1659874348460
GPR[EPVAP]-1659874349150
GPR[EPVS]-1659874349150
========
configureDomainAxes();
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874349152
GPR[SPVAP]-1659874349152
GPR[EPVAP]-1659874349852
GPR[EPVS]-1659874349852
========
configureRangeAxes();
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874349853
GPR[SPVAP]-1659874349853
GPR[EPVAP]-1659874350533
GPR[EPVS]-1659874350533
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874350534
GPR[SPVAP]-1659874350534
GPR[EPVAP]-1659874351228
GPR[EPVS]-1659874351228
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874351229
GPR[SPVAP]-1659874351229
GPR[EPVAP]-1659874351925
GPR[EPVS]-1659874351925
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new IllegalArgumentException("Null \'location\' for index 0 not permitted.");
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874351926
GPR[SPVAP]-1659874351926
GPR[EPVAP]-1659874353159
GPR[SPVATF]-1659874353159
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874354278
GPR[EPVS]-1659874354278
========
int index=getColumnIndex(columnKey);
if(index<0){
if(index>=0){
return getValue(index);
}else {
return null;
}
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874354280
GPR[SPVAP]-1659874354280
GPR[EPVAP]-1659874354971
GPR[EPVS]-1659874354971
========
configureDomainAxes();
configureRangeAxes();
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874354972
GPR[SPVAP]-1659874354972
GPR[EPVAP]-1659874355659
GPR[EPVS]-1659874355659
========
int index=getColumnIndex(columnKey);
if(colIndex<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874355660
GPR[SPVAP]-1659874355660
GPR[EPVAP]-1659874356351
GPR[EPVS]-1659874356351
========
int index=getColumnIndex(columnKey);
if(index<0){
if(index<0){
return null;
}
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874356352
GPR[SPVAP]-1659874356352
GPR[EPVAP]-1659874357040
GPR[EPVS]-1659874357040
========
int index=getColumnIndex(columnKey);
if(index<0){
if(index>=0){
return (TickUnit)this.columnKeys.get(index);
}else {
index=-(index+1);
return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));
}
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874357042
GPR[SPVAP]-1659874357042
GPR[EPVAP]-1659874357736
GPR[EPVS]-1659874357736
========
int index=getColumnIndex(columnKey);
if(index<0){
index=-(index+1);
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874357737
GPR[SPVAP]-1659874357737
GPR[EPVAP]-1659874358981
GPR[SPVATF]-1659874358981
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874360088
GPR[EPVS]-1659874360088
========
int index=getColumnIndex(columnKey);
if(middle<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874360090
GPR[SPVAP]-1659874360090
GPR[EPVAP]-1659874360779
GPR[EPVS]-1659874360779
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(index);

========
GPR[SPVS]-1659874360780
GPR[SPVAP]-1659874360780
GPR[EPVAP]-1659874361998
GPR[SPVATF]-1659874361998
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874363127
GPR[EPVS]-1659874363127
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
rowData.removeChangeListener(this);
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874363128
GPR[SPVAP]-1659874363128
GPR[EPVAP]-1659874363817
GPR[EPVS]-1659874363817
========
fireDatasetChanged();
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(index);

========
GPR[SPVS]-1659874363818
GPR[SPVAP]-1659874363818
GPR[EPVAP]-1659874364525
GPR[EPVS]-1659874364525
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
rowData.removeChangeListener(this);
this.columnKeys.remove(index);

========
GPR[SPVS]-1659874364527
GPR[SPVAP]-1659874364527
GPR[EPVAP]-1659874365229
GPR[EPVS]-1659874365229
========
fireDatasetChanged();
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
rowData.removeChangeListener(this);
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874365230
GPR[SPVAP]-1659874365231
GPR[EPVAP]-1659874365939
GPR[EPVS]-1659874365939
========
fireDatasetChanged();
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
rowData.removeChangeListener(this);
this.columnKeys.remove(index);

========
GPR[SPVS]-1659874365940
GPR[SPVAP]-1659874365940
GPR[EPVAP]-1659874366655
GPR[EPVS]-1659874366655
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
result=rowData.getDomainAxis(index);
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874366657
GPR[SPVAP]-1659874366657
GPR[EPVAP]-1659874367345
GPR[EPVS]-1659874367345
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
result=rowData.getRangeAxis(index);
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874367347
GPR[SPVAP]-1659874367347
GPR[EPVAP]-1659874368037
GPR[EPVS]-1659874368038
========
int index=getColumnIndex(columnKey);
if(index<0||index>3){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874368039
GPR[SPVAP]-1659874368039
GPR[EPVAP]-1659874369270
GPR[SPVATF]-1659874369270
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874370364
GPR[EPVS]-1659874370364
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new IllegalArgumentException("The index value ("+index);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874370365
GPR[SPVAP]-1659874370365
GPR[EPVAP]-1659874371620
GPR[SPVATF]-1659874371620
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874372722
GPR[EPVS]-1659874372722
========
notifyListeners(new PlotChangeEvent(this));
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874372723
GPR[SPVAP]-1659874372723
GPR[EPVAP]-1659874373419
GPR[EPVS]-1659874373419
========
int index=getColumnIndex(columnKey);
if(index<0||index>3){
throw new IllegalArgumentException("The index value ("+index);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874373420
GPR[SPVAP]-1659874373420
GPR[EPVAP]-1659874374642
GPR[SPVATF]-1659874374642
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874375749
GPR[EPVS]-1659874375749
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.setComposite(columnKey);

========
GPR[SPVS]-1659874375752
GPR[SPVAP]-1659874375752
GPR[EPVAP]-1659874377181
GPR[EPVS]-1659874377181
========
int index=getColumnIndex(columnKey);
if(columnIndex<0){
if(index<0){
return ;
}
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874377182
GPR[SPVAP]-1659874377182
GPR[EPVAP]-1659874377905
GPR[EPVS]-1659874377905
========
int index=getColumnIndex(columnKey);
if(index<0||index>=getDatasetCount()){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874377913
GPR[SPVAP]-1659874377913
GPR[EPVAP]-1659874379831
GPR[EPVS]-1659874379831
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new IllegalArgumentException("Index "+index);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874379832
GPR[SPVAP]-1659874379832
GPR[EPVAP]-1659874381038
GPR[SPVATF]-1659874381039
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874382177
GPR[EPVS]-1659874382177
========
int index=getColumnIndex(columnKey);
if(index<0||index>=getDatasetCount()){
throw new IllegalArgumentException("Index "+index);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874382179
GPR[SPVAP]-1659874382179
GPR[EPVAP]-1659874382930
GPR[EPVS]-1659874382930
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
invalidateRangeInfo();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874382931
GPR[SPVAP]-1659874382932
GPR[EPVAP]-1659874383647
GPR[EPVS]-1659874383647
========
int index=getColumnIndex(columnKey);
if((index<0)||(index>=getSubtitleCount())){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874383648
GPR[SPVAP]-1659874383648
GPR[EPVAP]-1659874384330
GPR[EPVS]-1659874384330
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new IllegalArgumentException("Index out of range.");
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874384331
GPR[SPVAP]-1659874384331
GPR[EPVAP]-1659874385567
GPR[SPVATF]-1659874385567
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874386688
GPR[EPVS]-1659874386688
========
int index=getColumnIndex(columnKey);
if(index<ORIENTATION_VERTICAL){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874386689
GPR[SPVAP]-1659874386689
GPR[EPVAP]-1659874387381
GPR[EPVS]-1659874387381
========
int index=getColumnIndex(columnKey);
if(index<0||index>getSubtitleCount()){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874387384
GPR[SPVAP]-1659874387384
GPR[EPVAP]-1659874388093
GPR[EPVS]-1659874388093
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874388094
GPR[SPVAP]-1659874388094
GPR[EPVAP]-1659874389317
GPR[SPVATF]-1659874389317
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874390415
GPR[EPVS]-1659874390415
========
fireChartChanged();
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874390416
GPR[SPVAP]-1659874390416
GPR[EPVAP]-1659874391123
GPR[EPVS]-1659874391123
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new SeriesException(new StringBuffer().toString());
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874391132
GPR[SPVAP]-1659874391132
GPR[EPVAP]-1659874392361
GPR[EPVS]-1659874392361
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874392370
GPR[SPVAP]-1659874392370
GPR[EPVAP]-1659874393678
GPR[SPVATF]-1659874393678
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874394919
GPR[EPVS]-1659874394919
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874394921
GPR[SPVAP]-1659874394921
GPR[EPVAP]-1659874396161
GPR[SPVATF]-1659874396161
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874397262
GPR[EPVS]-1659874397262
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874397263
GPR[SPVAP]-1659874397263
GPR[EPVAP]-1659874398492
GPR[SPVATF]-1659874398492
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874399601
GPR[EPVS]-1659874399601
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874399602
GPR[SPVAP]-1659874399602
GPR[EPVAP]-1659874400823
GPR[SPVATF]-1659874400823
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874401941
GPR[EPVS]-1659874401941
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874401942
GPR[SPVAP]-1659874401942
GPR[EPVAP]-1659874403165
GPR[SPVATF]-1659874403165
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874404259
GPR[EPVS]-1659874404259
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874404260
GPR[SPVAP]-1659874404260
GPR[EPVAP]-1659874405471
GPR[SPVATF]-1659874405471
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874406565
GPR[EPVS]-1659874406565
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874406567
GPR[SPVAP]-1659874406567
GPR[EPVAP]-1659874407808
GPR[SPVATF]-1659874407808
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874408931
GPR[EPVS]-1659874408931
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874408933
GPR[SPVAP]-1659874408933
GPR[EPVAP]-1659874410137
GPR[SPVATF]-1659874410137
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874411204
GPR[EPVS]-1659874411204
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874411205
GPR[SPVAP]-1659874411205
GPR[EPVAP]-1659874412421
GPR[SPVATF]-1659874412421
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874413548
GPR[EPVS]-1659874413548
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874413549
GPR[SPVAP]-1659874413549
GPR[EPVAP]-1659874414783
GPR[SPVATF]-1659874414783
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874415863
GPR[EPVS]-1659874415863
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874415864
GPR[SPVAP]-1659874415864
GPR[EPVAP]-1659874417080
GPR[SPVATF]-1659874417080
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874418222
GPR[EPVS]-1659874418222
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874418223
GPR[SPVAP]-1659874418223
GPR[EPVAP]-1659874419467
GPR[SPVATF]-1659874419467
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874420544
GPR[EPVS]-1659874420544
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874420545
GPR[SPVAP]-1659874420545
GPR[EPVAP]-1659874421755
GPR[SPVATF]-1659874421755
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874422847
GPR[EPVS]-1659874422847
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874422848
GPR[SPVAP]-1659874422848
GPR[EPVAP]-1659874424095
GPR[SPVATF]-1659874424095
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874425215
GPR[EPVS]-1659874425215
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874425217
GPR[SPVAP]-1659874425217
GPR[EPVAP]-1659874426453
GPR[SPVATF]-1659874426453
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874427558
GPR[EPVS]-1659874427558
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874427559
GPR[SPVAP]-1659874427559
GPR[EPVAP]-1659874428794
GPR[SPVATF]-1659874428794
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874429890
GPR[EPVS]-1659874429890
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874429892
GPR[SPVAP]-1659874429892
GPR[EPVAP]-1659874431119
GPR[SPVATF]-1659874431119
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874432220
GPR[EPVS]-1659874432220
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874432221
GPR[SPVAP]-1659874432221
GPR[EPVAP]-1659874433439
GPR[SPVATF]-1659874433439
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874434570
GPR[EPVS]-1659874434570
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874434571
GPR[SPVAP]-1659874434571
GPR[EPVAP]-1659874435798
GPR[SPVATF]-1659874435798
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874436892
GPR[EPVS]-1659874436892
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874436893
GPR[SPVAP]-1659874436893
GPR[EPVAP]-1659874438140
GPR[SPVATF]-1659874438140
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874439235
GPR[EPVS]-1659874439235
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874439237
GPR[SPVAP]-1659874439237
GPR[EPVAP]-1659874440455
GPR[SPVATF]-1659874440455
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874441554
GPR[EPVS]-1659874441554
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874441555
GPR[SPVAP]-1659874441555
GPR[EPVAP]-1659874442800
GPR[SPVATF]-1659874442800
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874443902
GPR[EPVS]-1659874443903
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874443904
GPR[SPVAP]-1659874443904
GPR[EPVAP]-1659874445136
GPR[SPVATF]-1659874445136
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874446263
GPR[EPVS]-1659874446263
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874446264
GPR[SPVAP]-1659874446264
GPR[EPVAP]-1659874447509
GPR[SPVATF]-1659874447509
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874448590
GPR[EPVS]-1659874448590
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874448591
GPR[SPVAP]-1659874448591
GPR[EPVAP]-1659874449833
GPR[SPVATF]-1659874449833
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874450924
GPR[EPVS]-1659874450924
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874450925
GPR[SPVAP]-1659874450925
GPR[EPVAP]-1659874452144
GPR[SPVATF]-1659874452144
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874453243
GPR[EPVS]-1659874453243
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874453244
GPR[SPVAP]-1659874453244
GPR[EPVAP]-1659874454491
GPR[SPVATF]-1659874454491
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874455574
GPR[EPVS]-1659874455574
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874455575
GPR[SPVAP]-1659874455575
GPR[EPVAP]-1659874456793
GPR[SPVATF]-1659874456793
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874457887
GPR[EPVS]-1659874457887
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874457889
GPR[SPVAP]-1659874457889
GPR[EPVAP]-1659874459142
GPR[SPVATF]-1659874459142
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874460231
GPR[EPVS]-1659874460231
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874460233
GPR[SPVAP]-1659874460233
GPR[EPVAP]-1659874461498
GPR[SPVATF]-1659874461498
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874462622
GPR[EPVS]-1659874462622
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874462623
GPR[SPVAP]-1659874462623
GPR[EPVAP]-1659874463876
GPR[SPVATF]-1659874463876
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874464983
GPR[EPVS]-1659874464983
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874464985
GPR[SPVAP]-1659874464985
GPR[EPVAP]-1659874466197
GPR[SPVATF]-1659874466197
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874467274
GPR[EPVS]-1659874467274
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874467275
GPR[SPVAP]-1659874467275
GPR[EPVAP]-1659874468515
GPR[SPVATF]-1659874468515
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874469637
GPR[EPVS]-1659874469637
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874469639
GPR[SPVAP]-1659874469639
GPR[EPVAP]-1659874470861
GPR[SPVATF]-1659874470861
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874471959
GPR[EPVS]-1659874471959
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874471960
GPR[SPVAP]-1659874471960
GPR[EPVAP]-1659874473191
GPR[SPVATF]-1659874473191
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874474285
GPR[EPVS]-1659874474285
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874474286
GPR[SPVAP]-1659874474286
GPR[EPVAP]-1659874475495
GPR[SPVATF]-1659874475495
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874476581
GPR[EPVS]-1659874476581
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874476582
GPR[SPVAP]-1659874476582
GPR[EPVAP]-1659874477806
GPR[SPVATF]-1659874477806
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874478945
GPR[EPVS]-1659874478945
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874478946
GPR[SPVAP]-1659874478946
GPR[EPVAP]-1659874480189
GPR[SPVATF]-1659874480189
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874481284
GPR[EPVS]-1659874481284
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874481285
GPR[SPVAP]-1659874481285
GPR[EPVAP]-1659874482543
GPR[SPVATF]-1659874482543
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874483628
GPR[EPVS]-1659874483628
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874483629
GPR[SPVAP]-1659874483629
GPR[EPVAP]-1659874484853
GPR[SPVATF]-1659874484853
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874485948
GPR[EPVS]-1659874485948
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874485949
GPR[SPVAP]-1659874485949
GPR[EPVAP]-1659874487189
GPR[SPVATF]-1659874487189
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874488295
GPR[EPVS]-1659874488295
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874488296
GPR[SPVAP]-1659874488296
GPR[EPVAP]-1659874489526
GPR[SPVATF]-1659874489526
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874490609
GPR[EPVS]-1659874490609
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874490610
GPR[SPVAP]-1659874490610
GPR[EPVAP]-1659874491844
GPR[SPVATF]-1659874491844
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874492970
GPR[EPVS]-1659874492970
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874492972
GPR[SPVAP]-1659874492972
GPR[EPVAP]-1659874494205
GPR[SPVATF]-1659874494205
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874495276
GPR[EPVS]-1659874495276
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874495277
GPR[SPVAP]-1659874495277
GPR[EPVAP]-1659874496518
GPR[SPVATF]-1659874496518
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874497619
GPR[EPVS]-1659874497619
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874497621
GPR[SPVAP]-1659874497621
GPR[EPVAP]-1659874498841
GPR[SPVATF]-1659874498841
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874499964
GPR[EPVS]-1659874499964
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874499965
GPR[SPVAP]-1659874499965
GPR[EPVAP]-1659874501196
GPR[SPVATF]-1659874501196
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874502281
GPR[EPVS]-1659874502281
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874502282
GPR[SPVAP]-1659874502282
GPR[EPVAP]-1659874503501
GPR[SPVATF]-1659874503501
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874504605
GPR[EPVS]-1659874504605
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874504606
GPR[SPVAP]-1659874504606
GPR[EPVAP]-1659874505835
GPR[SPVATF]-1659874505835
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874506932
GPR[EPVS]-1659874506932
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874506933
GPR[SPVAP]-1659874506933
GPR[EPVAP]-1659874508174
GPR[SPVATF]-1659874508174
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874509282
GPR[EPVS]-1659874509282
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874509283
GPR[SPVAP]-1659874509283
GPR[EPVAP]-1659874510535
GPR[SPVATF]-1659874510535
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874511657
GPR[EPVS]-1659874511657
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874511658
GPR[SPVAP]-1659874511658
GPR[EPVAP]-1659874512908
GPR[SPVATF]-1659874512908
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874513996
GPR[EPVS]-1659874513996
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874513997
GPR[SPVAP]-1659874513997
GPR[EPVAP]-1659874515220
GPR[SPVATF]-1659874515220
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874516302
GPR[EPVS]-1659874516302
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874516303
GPR[SPVAP]-1659874516303
GPR[EPVAP]-1659874517531
GPR[SPVATF]-1659874517531
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874518621
GPR[EPVS]-1659874518621
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874518622
GPR[SPVAP]-1659874518622
GPR[EPVAP]-1659874519851
GPR[SPVATF]-1659874519851
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874520959
GPR[EPVS]-1659874520959
========
int index=getColumnIndex(columnKey);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874520960
GPR[SPVAP]-1659874520960
GPR[EPVAP]-1659874522177
GPR[SPVATF]-1659874522177
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874523269
GPR[EPVS]-1659874523269
========
int index=getColumnIndex(columnKey);
if(x<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874523271
GPR[SPVAP]-1659874523271
GPR[EPVAP]-1659874523974
GPR[EPVS]-1659874523974
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new SeriesException("X-value already exists.");
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874523977
GPR[SPVAP]-1659874523977
GPR[EPVAP]-1659874524669
GPR[EPVS]-1659874524669
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.setParent(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874524670
GPR[SPVAP]-1659874524670
GPR[EPVAP]-1659874525372
GPR[EPVS]-1659874525372
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
configureRangeAxes();
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874525374
GPR[SPVAP]-1659874525374
GPR[EPVAP]-1659874526058
GPR[EPVS]-1659874526058
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
notifyListeners(new PlotChangeEvent(this));
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874526060
GPR[SPVAP]-1659874526060
GPR[EPVAP]-1659874526743
GPR[EPVS]-1659874526743
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
configureRangeAxes();
notifyListeners(new PlotChangeEvent(this));

KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874526745
GPR[SPVAP]-1659874526745
GPR[EPVAP]-1659874527444
GPR[EPVS]-1659874527444
========
index=29*result+this.columnKeys.hashCode();
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874527446
GPR[SPVAP]-1659874527446
GPR[EPVAP]-1659874528157
GPR[EPVS]-1659874528157
========
index=29*result+this.rows.hashCode();
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874528158
GPR[SPVAP]-1659874528158
GPR[EPVAP]-1659874528865
GPR[EPVS]-1659874528865
========
int index=getColumnIndex(columnKey);
if(index<0||index>=getItemCount()){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874528866
GPR[SPVAP]-1659874528866
GPR[EPVAP]-1659874529561
GPR[EPVS]-1659874529561
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new IndexOutOfBoundsException("Invalid \'index\': "+index);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874529562
GPR[SPVAP]-1659874529562
GPR[EPVAP]-1659874530777
GPR[SPVATF]-1659874530777
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874531875
GPR[EPVS]-1659874531875
========
this.index=index;
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874531877
GPR[SPVAP]-1659874531877
GPR[EPVAP]-1659874532597
GPR[EPVS]-1659874532597
========
iterator=tminor.next();
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874532599
GPR[SPVAP]-1659874532599
GPR[EPVAP]-1659874533307
GPR[EPVS]-1659874533307
========
int index=getColumnIndex(columnKey);
if(fieldIndex<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874533309
GPR[SPVAP]-1659874533309
GPR[EPVAP]-1659874534006
GPR[EPVS]-1659874534006
========
notifyListeners(new AxisChangeEvent(this));
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874534008
GPR[SPVAP]-1659874534008
GPR[EPVAP]-1659874534711
GPR[EPVS]-1659874534711
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new IllegalArgumentException("Requires index >= 0.");
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874534712
GPR[SPVAP]-1659874534712
GPR[EPVAP]-1659874535949
GPR[SPVATF]-1659874535949
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874537050
GPR[EPVS]-1659874537050
========
int index=getColumnIndex(columnKey);
if(lineIndex<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874537052
GPR[SPVAP]-1659874537052
GPR[EPVAP]-1659874537746
GPR[EPVS]-1659874537746
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
this.columnKeys.remove(index);
this.rows.remove(index);
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874537748
GPR[SPVAP]-1659874537748
GPR[EPVAP]-1659874538997
GPR[SPVATF]-1659874538997
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874540149
GPR[SPVATR]-1659874540150
TESTING : chart_22
GPR[EPVATR]-1659874549976
GPR[EPVS]-1659874549976
GPR[PF]-1659874549976
sourceFile  script/workingdir/SimFix/chart/chart_22_buggy/source/org/jfree/data/KeyedObjects2D.java
location   script/workingdir/SimFix/chart/chart_22_buggy
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
this.columnKeys.remove(index);
this.columnKeys.remove(index);
this.rows.remove(index);

rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874549985
GPR[SPVAP]-1659874549985
GPR[EPVAP]-1659874551309
GPR[SPVATF]-1659874551309
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874553144
GPR[EPVS]-1659874553144
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
this.rows.remove(index);
this.columnKeys.remove(index);
this.rows.remove(index);

rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874553145
GPR[SPVAP]-1659874553145
GPR[EPVAP]-1659874554506
GPR[SPVATF]-1659874554506
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874555771
GPR[EPVS]-1659874555771
========
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
this.columnKeys.remove(index);
this.rows.remove(index);
this.columnKeys.remove(index);
this.rows.remove(index);

rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874555772
GPR[SPVAP]-1659874555772
GPR[EPVAP]-1659874557028
GPR[SPVATF]-1659874557028
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874558123
GPR[EPVS]-1659874558123
========
int index=getColumnIndex(columnKey);
if(next<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874558125
GPR[SPVAP]-1659874558125
GPR[EPVAP]-1659874558827
GPR[EPVS]-1659874558827
========
index=29*result+this.columnKeys.hashCode();
index=29*result+this.rows.hashCode();
int index=getColumnIndex(columnKey);
if(index<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects rowData=(KeyedObjects)iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);

========
GPR[SPVS]-1659874558829
GPR[SPVAP]-1659874558829
GPR[EPVAP]-1659874559542
GPR[EPVS]-1659874559542
GPR[ESUN]-1659874559542
GPR[SSUN]-1659874559542
org.jfree.data.KeyedObjects2D,371
GPR[ESUN]-1659874560016
GPR[SSUN]-1659874560016
org.jfree.data.KeyedObjects2D,375
GPR[ESUN]-1659874560331
GPR[SSUN]-1659874560331
org.jfree.data.KeyedObjects2D,376
GPR[ESUN]-1659874560621
GPR[SSUN]-1659874560621
org.jfree.data.KeyedObjects2D,377
GPR[ESUN]-1659874560923
GPR[SSUN]-1659874560923
org.jfree.data.KeyedObjects2D,378
GPR[ESUN]-1659874561221
GPR[SSUN]-1659874561221
org.jfree.data.KeyedObjects,171
UNKNOWN ASTNode type : catch (UnsupportedEncodingException e) {
  encodedKey=key.toString();
}

========
if(index<0){
throw new UnknownKeyException("Key not found: "+key);
}

========
GPR[SPVS]-1659874563157
GPR[SPVAP]-1659874563157
GPR[EPVAP]-1659874567545
GPR[SPVATF]-1659874567545
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874568664
GPR[EPVS]-1659874568664
========
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874568665
GPR[SPVAP]-1659874568665
GPR[EPVAP]-1659874569933
GPR[SPVATF]-1659874569933
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874571053
GPR[EPVS]-1659874571053
========
if(index<0){
throw new UnknownKeyException("Column key ("+key);
}

========
GPR[SPVS]-1659874571054
GPR[SPVAP]-1659874571054
GPR[EPVAP]-1659874572865
GPR[SPVATF]-1659874572865
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874575459
GPR[EPVS]-1659874575459
========
if(index<0){
throw new IllegalArgumentException("Requires index >= 0.");
}

========
GPR[SPVS]-1659874575460
GPR[SPVAP]-1659874575460
GPR[EPVAP]-1659874576738
GPR[SPVATF]-1659874576738
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874577819
GPR[EPVS]-1659874577819
========
if(index<0){
throw new SeriesException("X-value already exists.");
}

========
GPR[SPVS]-1659874577820
GPR[SPVAP]-1659874577820
GPR[EPVAP]-1659874578514
GPR[EPVS]-1659874578514
========
if(index<0){
if(index>=0){
return getValue(index);
}else {
return null;
}
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874578515
GPR[SPVAP]-1659874578515
GPR[EPVAP]-1659874579215
GPR[EPVS]-1659874579215
========
if(index<0){
if(index>=getDatasetCount()){
return ;
}
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874579216
GPR[SPVAP]-1659874579216
GPR[EPVAP]-1659874579939
GPR[EPVS]-1659874579939
========
if(index<0){
throw new IllegalArgumentException("Null \'location\' for index 0 not permitted.");
}

========
GPR[SPVS]-1659874579940
GPR[SPVAP]-1659874579940
GPR[EPVAP]-1659874581173
GPR[SPVATF]-1659874581173
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874582269
GPR[EPVS]-1659874582269
========
if((index<0)||(index>=getSubtitleCount())){
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874582270
GPR[SPVAP]-1659874582270
GPR[EPVAP]-1659874582970
GPR[EPVS]-1659874582970
========
if(index<0){
throw new IllegalArgumentException("Index out of range.");
}

========
GPR[SPVS]-1659874582971
GPR[SPVAP]-1659874582971
GPR[EPVAP]-1659874584205
GPR[SPVATF]-1659874584205
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874585289
GPR[EPVS]-1659874585289
========
if(index<0||index>getSubtitleCount()){
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874585290
GPR[SPVAP]-1659874585290
GPR[EPVAP]-1659874585986
GPR[EPVS]-1659874585986
========
if(index<0){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}

========
GPR[SPVS]-1659874585987
GPR[SPVAP]-1659874585987
GPR[EPVAP]-1659874587209
GPR[SPVATF]-1659874587209
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874588310
GPR[EPVS]-1659874588310
========
if(index<0||index>3){
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874588312
GPR[SPVAP]-1659874588312
GPR[EPVAP]-1659874589575
GPR[SPVATF]-1659874589575
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874590646
GPR[EPVS]-1659874590646
========
if(index<0){
throw new IllegalArgumentException("The index value ("+index);
}

========
GPR[SPVS]-1659874590648
GPR[SPVAP]-1659874590648
GPR[EPVAP]-1659874591864
GPR[SPVATF]-1659874591864
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874592946
GPR[EPVS]-1659874592946
========
if(index<0||index>3){
throw new IllegalArgumentException("The index value ("+index);
}

========
GPR[SPVS]-1659874592947
GPR[SPVAP]-1659874592947
GPR[EPVAP]-1659874594183
GPR[SPVATF]-1659874594183
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874595283
GPR[EPVS]-1659874595283
========
if(index<0||index>=getDatasetCount()){
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874595284
GPR[SPVAP]-1659874595284
GPR[EPVAP]-1659874596019
GPR[EPVS]-1659874596019
========
if(index<0){
throw new IllegalArgumentException("Index "+index);
}

========
GPR[SPVS]-1659874596020
GPR[SPVAP]-1659874596020
GPR[EPVAP]-1659874597254
GPR[SPVATF]-1659874597254
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874598340
GPR[EPVS]-1659874598340
========
if(index<0||index>=getItemCount()){
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874598341
GPR[SPVAP]-1659874598341
GPR[EPVAP]-1659874599737
GPR[SPVATF]-1659874599737
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874600851
GPR[EPVS]-1659874600851
========
if(index<0){
throw new IndexOutOfBoundsException("Invalid \'index\': "+index);
}

========
GPR[SPVS]-1659874600852
GPR[SPVAP]-1659874600852
GPR[EPVAP]-1659874602069
GPR[SPVATF]-1659874602069
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874603153
GPR[EPVS]-1659874603153
========
if(index<0||index>=getItemCount()){
throw new IndexOutOfBoundsException("Invalid \'index\': "+index);
}

========
GPR[SPVS]-1659874603154
GPR[SPVAP]-1659874603154
GPR[EPVAP]-1659874604395
GPR[SPVATF]-1659874604395
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874605495
GPR[EPVS]-1659874605495
========
if(index<0){
if(index>=0){
return (TimeSeriesDataItem)this.data.get(index);
}else {
return null;
}
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874605496
GPR[SPVAP]-1659874605496
GPR[EPVAP]-1659874606195
GPR[EPVS]-1659874606195
========
if(index<0){
throw new SeriesException("No observation for x = "+key);
}

========
GPR[SPVS]-1659874606196
GPR[SPVAP]-1659874606196
GPR[EPVAP]-1659874606895
GPR[EPVS]-1659874606895
========
if(index<0){
throw new SeriesException("TimeSeries.update(TimePeriod, Number):  period does not exist.");
}

========
GPR[SPVS]-1659874606896
GPR[SPVAP]-1659874606896
GPR[EPVAP]-1659874607617
GPR[EPVS]-1659874607617
========
if(index<0){
if(index>=0){
return (TickUnit)this.data.get(index);
}else {
index=-(index+1);
return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));
}
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874607618
GPR[SPVAP]-1659874607618
GPR[EPVAP]-1659874608321
GPR[EPVS]-1659874608321
========
if(index<0){
index=-(index+1);
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874608323
GPR[SPVAP]-1659874608323
GPR[EPVAP]-1659874609551
GPR[SPVATF]-1659874609551
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874610642
GPR[EPVS]-1659874610642
========
if(index<ORIENTATION_VERTICAL){
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874610644
GPR[SPVAP]-1659874610644
GPR[EPVAP]-1659874611331
GPR[EPVS]-1659874611331
========
if(seen<0){
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874611332
GPR[SPVAP]-1659874611332
GPR[EPVAP]-1659874612041
GPR[EPVS]-1659874612041
========
if(middle<0){
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874612044
GPR[SPVAP]-1659874612044
GPR[EPVAP]-1659874612762
GPR[EPVS]-1659874612762
========
if(index<0||index>=getDatasetCount()){
throw new IllegalArgumentException("Index "+index);
}

========
GPR[SPVS]-1659874612764
GPR[SPVAP]-1659874612764
GPR[EPVAP]-1659874613468
GPR[EPVS]-1659874613468
========
if(start<0){
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874613470
GPR[SPVAP]-1659874613470
GPR[EPVAP]-1659874614205
GPR[EPVS]-1659874614205
========
if(end<0){
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874614206
GPR[SPVAP]-1659874614206
GPR[EPVAP]-1659874614907
GPR[EPVS]-1659874614907
========
if(keyIndex<0){
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874614908
GPR[SPVAP]-1659874614908
GPR[EPVAP]-1659874615603
GPR[EPVS]-1659874615603
========
if(pos<0){
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874615604
GPR[SPVAP]-1659874615604
GPR[EPVAP]-1659874616300
GPR[EPVS]-1659874616300
GPR[ESUN]-1659874616301
GPR[SSUN]-1659874616301
org.jfree.data.KeyedObjects,266
========
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key);
}
removeValue(index);

========
GPR[SPVS]-1659874618362
GPR[SPVAP]-1659874618362
GPR[EPVAP]-1659874622641
GPR[SPVATF]-1659874622641
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874623723
GPR[EPVS]-1659874623723
========
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("Key not found: "+key);
}
removeValue(index);

========
GPR[SPVS]-1659874623724
GPR[SPVAP]-1659874623724
GPR[EPVAP]-1659874624967
GPR[SPVATF]-1659874624967
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874626092
GPR[EPVS]-1659874626092
========
int index=getIndex(key);
if(index<0){
if(index>=0){
return getValue(index);
}else {
return null;
}
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874626093
GPR[SPVAP]-1659874626093
GPR[EPVAP]-1659874626814
GPR[EPVS]-1659874626814
========
int index=getIndex(key);
if(index<0){
if(index>=0){
return (TimeSeriesDataItem)this.data.get(index);
}else {
return null;
}
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874626815
GPR[SPVAP]-1659874626815
GPR[EPVAP]-1659874627511
GPR[EPVS]-1659874627511
========
default :

int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874627512
GPR[SPVAP]-1659874627512
GPR[EPVAP]-1659874628104
GPR[EPVS]-1659874628104
========
case 5 :

int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874628105
GPR[SPVAP]-1659874628105
GPR[EPVAP]-1659874628700
GPR[EPVS]-1659874628700
========
int index=getIndex(key);
if(keyIndex<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874628701
GPR[SPVAP]-1659874628701
GPR[EPVAP]-1659874629399
GPR[EPVS]-1659874629399
========
case 8 :

int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874629400
GPR[SPVAP]-1659874629400
GPR[EPVAP]-1659874629997
GPR[EPVS]-1659874629997
========
if(key==null){
throw new NullPointerException("Null \'key\' argument.");
}
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874629998
GPR[SPVAP]-1659874629998
GPR[EPVAP]-1659874631240
GPR[SPVATF]-1659874631240
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874632356
GPR[EPVS]-1659874632356
========
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("Column key ("+key);
}
removeValue(index);

========
GPR[SPVS]-1659874632357
GPR[SPVAP]-1659874632357
GPR[EPVAP]-1659874633566
GPR[SPVATF]-1659874633566
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874634672
GPR[EPVS]-1659874634672
========
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(key);

========
GPR[SPVS]-1659874634673
GPR[SPVAP]-1659874634673
GPR[EPVAP]-1659874635922
GPR[SPVATF]-1659874635922
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874637046
GPR[EPVS]-1659874637046
========
this.data.remove(key);
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874637047
GPR[SPVAP]-1659874637047
GPR[EPVAP]-1659874638316
GPR[SPVATF]-1659874638316
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874639409
GPR[EPVS]-1659874639409
========
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("Column key ("+key);
}
removeValue(key);

========
GPR[SPVS]-1659874639410
GPR[SPVAP]-1659874639410
GPR[EPVAP]-1659874640649
GPR[SPVATF]-1659874640649
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874641752
GPR[EPVS]-1659874641752
========
this.data.remove(key);
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("Column key ("+key);
}
removeValue(index);

========
GPR[SPVS]-1659874641753
GPR[SPVAP]-1659874641754
GPR[EPVAP]-1659874642989
GPR[SPVATF]-1659874642989
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874644130
GPR[EPVS]-1659874644130
========
this.data.remove(key);
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(key);

========
GPR[SPVS]-1659874644132
GPR[SPVAP]-1659874644132
GPR[EPVAP]-1659874645353
GPR[SPVATF]-1659874645353
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874646470
GPR[EPVS]-1659874646470
========
this.data.remove(key);
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("Column key ("+key);
}
removeValue(key);

========
GPR[SPVS]-1659874646472
GPR[SPVAP]-1659874646472
GPR[EPVAP]-1659874647705
GPR[SPVATF]-1659874647705
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874648791
GPR[EPVS]-1659874648791
========
int index=getIndex(key);
if(index<0||index>=getDatasetCount()){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874648793
GPR[SPVAP]-1659874648793
GPR[EPVAP]-1659874649519
GPR[EPVS]-1659874649519
========
int index=getIndex(key);
if(index<0){
throw new IllegalArgumentException("Index "+index);
}
removeValue(index);

========
GPR[SPVS]-1659874649520
GPR[SPVAP]-1659874649520
GPR[EPVAP]-1659874650757
GPR[SPVATF]-1659874650757
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874651860
GPR[EPVS]-1659874651860
========
int index=getIndex(key);
if(index<0||index>=getItemCount()){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874651862
GPR[SPVAP]-1659874651862
GPR[EPVAP]-1659874653097
GPR[SPVATF]-1659874653097
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874654188
GPR[EPVS]-1659874654188
========
int index=getIndex(key);
if(index<0){
throw new IndexOutOfBoundsException("Invalid \'index\': "+index);
}
removeValue(index);

========
GPR[SPVS]-1659874654189
GPR[SPVAP]-1659874654189
GPR[EPVAP]-1659874655417
GPR[SPVATF]-1659874655417
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874656531
GPR[EPVS]-1659874656531
========
int index=getIndex(key);
if(index<0||index>=getItemCount()){
throw new IndexOutOfBoundsException("Invalid \'index\': "+index);
}
removeValue(index);

========
GPR[SPVS]-1659874656532
GPR[SPVAP]-1659874656532
GPR[EPVAP]-1659874657743
GPR[SPVATF]-1659874657743
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874658847
GPR[EPVS]-1659874658847
========
int index=getIndex(key);
if(pos<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874658848
GPR[SPVAP]-1659874658848
GPR[EPVAP]-1659874659542
GPR[EPVS]-1659874659542
========
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874659543
GPR[SPVAP]-1659874659543
GPR[EPVAP]-1659874660773
GPR[SPVATF]-1659874660773
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874661865
GPR[EPVS]-1659874661865
========
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
setRotateY(index);

========
GPR[SPVS]-1659874661866
GPR[SPVAP]-1659874661866
GPR[EPVAP]-1659874662569
GPR[EPVS]-1659874662569
========
case 3 :

int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874662570
GPR[SPVAP]-1659874662570
GPR[EPVAP]-1659874663161
GPR[EPVS]-1659874663161
========
int index=getIndex(key);
if((index<0)||(index>=getSubtitleCount())){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874663162
GPR[SPVAP]-1659874663162
GPR[EPVAP]-1659874663865
GPR[EPVS]-1659874663865
========
int index=getIndex(key);
if(index<0){
throw new IllegalArgumentException("Index out of range.");
}
removeValue(index);

========
GPR[SPVS]-1659874663867
GPR[SPVAP]-1659874663867
GPR[EPVAP]-1659874665088
GPR[SPVATF]-1659874665088
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874666169
GPR[EPVS]-1659874666169
========
int index=getIndex(key);
if(index<0){
throw new SeriesException("No observation for x = "+key);
}
removeValue(index);

========
GPR[SPVS]-1659874666170
GPR[SPVAP]-1659874666170
GPR[EPVAP]-1659874666876
GPR[EPVS]-1659874666876
========
int index=getIndex(key);
if(index<0){
throw new SeriesException("TimeSeries.update(TimePeriod, Number):  period does not exist.");
}
removeValue(index);

========
GPR[SPVS]-1659874666877
GPR[SPVAP]-1659874666877
GPR[EPVAP]-1659874667576
GPR[EPVS]-1659874667576
========
int index=getIndex(key);
if(index<0){
throw new IllegalArgumentException("Null \'location\' for index 0 not permitted.");
}
removeValue(index);

========
GPR[SPVS]-1659874667577
GPR[SPVAP]-1659874667577
GPR[EPVAP]-1659874668843
GPR[SPVATF]-1659874668843
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874669932
GPR[EPVS]-1659874669932
========
case 1 :

int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874669933
GPR[SPVAP]-1659874669933
GPR[EPVAP]-1659874670517
GPR[EPVS]-1659874670517
========
int index=getIndex(key);
if(index<0||index>3){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874670518
GPR[SPVAP]-1659874670518
GPR[EPVAP]-1659874671752
GPR[SPVATF]-1659874671752
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874672835
GPR[EPVS]-1659874672835
========
int index=getIndex(key);
if(index<0){
throw new IllegalArgumentException("The index value ("+index);
}
removeValue(index);

========
GPR[SPVS]-1659874672836
GPR[SPVAP]-1659874672836
GPR[EPVAP]-1659874674053
GPR[SPVATF]-1659874674053
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874675139
GPR[EPVS]-1659874675139
========
int index=getIndex(key);
if(index<0||index>3){
throw new IllegalArgumentException("The index value ("+index);
}
removeValue(index);

========
GPR[SPVS]-1659874675140
GPR[SPVAP]-1659874675140
GPR[EPVAP]-1659874676371
GPR[SPVATF]-1659874676371
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874677480
GPR[EPVS]-1659874677480
========
int index=getIndex(key);
if(index<0||index>getSubtitleCount()){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874677481
GPR[SPVAP]-1659874677481
GPR[EPVAP]-1659874678186
GPR[EPVS]-1659874678186
========
int index=getIndex(key);
if(index<0){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}
removeValue(index);

========
GPR[SPVS]-1659874678187
GPR[SPVAP]-1659874678187
GPR[EPVAP]-1659874679409
GPR[SPVATF]-1659874679409
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874680498
GPR[EPVS]-1659874680499
========
fireChartChanged();
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874680500
GPR[SPVAP]-1659874680500
GPR[EPVAP]-1659874681195
GPR[EPVS]-1659874681195
========
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
removeValue(index);

========
GPR[SPVS]-1659874681196
GPR[SPVAP]-1659874681196
GPR[EPVAP]-1659874682421
GPR[SPVATF]-1659874682421
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874683519
GPR[EPVS]-1659874683519
========
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
this.key=key;
removeValue(index);

========
GPR[SPVS]-1659874683521
GPR[SPVAP]-1659874683521
GPR[EPVAP]-1659874684219
GPR[EPVS]-1659874684219
========
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
removeValue(index);

========
GPR[SPVS]-1659874684220
GPR[SPVAP]-1659874684220
GPR[EPVAP]-1659874684933
GPR[EPVS]-1659874684933
========
int index=getIndex(key);
if(index<ORIENTATION_VERTICAL){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874684934
GPR[SPVAP]-1659874684934
GPR[EPVAP]-1659874685678
GPR[EPVS]-1659874685678
========
int index=getIndex(key);
if(index<0){
if(index>=getDatasetCount()){
return ;
}
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874685679
GPR[SPVAP]-1659874685679
GPR[EPVAP]-1659874686407
GPR[EPVS]-1659874686407
========
int index=getIndex(key);
if(columnIndex<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874686409
GPR[SPVAP]-1659874686409
GPR[EPVAP]-1659874687111
GPR[EPVS]-1659874687111
========
int index=getIndex(key);
if(seen<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874687113
GPR[SPVAP]-1659874687113
GPR[EPVAP]-1659874687805
GPR[EPVS]-1659874687805
========
int index=getIndex(key);
if(index<0){
if(index>=0){
return (TickUnit)this.data.get(index);
}else {
index=-(index+1);
return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));
}
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874687807
GPR[SPVAP]-1659874687807
GPR[EPVAP]-1659874688506
GPR[EPVS]-1659874688506
========
int index=getIndex(key);
if(index<0){
index=-(index+1);
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874688507
GPR[SPVAP]-1659874688507
GPR[EPVAP]-1659874689764
GPR[SPVATF]-1659874689764
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874690865
GPR[EPVS]-1659874690865
========
int index=getIndex(key);
if(index<0){
if(getRenderer(index)==null){
return ;
}
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874690866
GPR[SPVAP]-1659874690866
GPR[EPVAP]-1659874691560
GPR[EPVS]-1659874691560
========
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
int index=getIndex(key);
if(keyIndex<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874691562
GPR[SPVAP]-1659874691562
GPR[EPVAP]-1659874692255
GPR[EPVS]-1659874692255
========
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
if(getDataset(index)!=null){
existing.removeChangeListener(this);
}
removeValue(index);

========
GPR[SPVS]-1659874692257
GPR[SPVAP]-1659874692257
GPR[EPVAP]-1659874692963
GPR[EPVS]-1659874692963
========
int index=getIndex(key);
if(startIndex<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874692964
GPR[SPVAP]-1659874692964
GPR[EPVAP]-1659874693676
GPR[EPVS]-1659874693676
========
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
case Types.DECIMAL :

removeValue(index);

========
GPR[SPVS]-1659874693678
GPR[SPVAP]-1659874693678
GPR[EPVAP]-1659874694266
GPR[EPVS]-1659874694266
========
case Types.DATE :

int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874694267
GPR[SPVAP]-1659874694267
GPR[EPVAP]-1659874694867
GPR[EPVS]-1659874694867
========
int index=getIndex(key);
if(index<0){
throw new SeriesException(new StringBuffer().toString());
}
removeValue(index);

========
GPR[SPVS]-1659874694868
GPR[SPVAP]-1659874694868
GPR[EPVAP]-1659874695577
GPR[EPVS]-1659874695577
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874695578
GPR[SPVAP]-1659874695578
GPR[EPVAP]-1659874696817
GPR[SPVATF]-1659874696817
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874697910
GPR[EPVS]-1659874697910
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874697912
GPR[SPVAP]-1659874697912
GPR[EPVAP]-1659874699124
GPR[SPVATF]-1659874699124
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874700215
GPR[EPVS]-1659874700215
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874700216
GPR[SPVAP]-1659874700216
GPR[EPVAP]-1659874701449
GPR[SPVATF]-1659874701449
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874702529
GPR[EPVS]-1659874702529
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874702530
GPR[SPVAP]-1659874702530
GPR[EPVAP]-1659874703757
GPR[SPVATF]-1659874703757
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874704887
GPR[EPVS]-1659874704887
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874704889
GPR[SPVAP]-1659874704889
GPR[EPVAP]-1659874706104
GPR[SPVATF]-1659874706104
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874707194
GPR[EPVS]-1659874707194
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874707195
GPR[SPVAP]-1659874707195
GPR[EPVAP]-1659874708409
GPR[SPVATF]-1659874708409
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874709514
GPR[EPVS]-1659874709514
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874709515
GPR[SPVAP]-1659874709515
GPR[EPVAP]-1659874710728
GPR[SPVATF]-1659874710728
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874711829
GPR[EPVS]-1659874711829
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874711830
GPR[SPVAP]-1659874711830
GPR[EPVAP]-1659874713890
GPR[SPVATF]-1659874713890
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874715178
GPR[EPVS]-1659874715178
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874715179
GPR[SPVAP]-1659874715179
GPR[EPVAP]-1659874716548
GPR[SPVATF]-1659874716548
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874717739
GPR[EPVS]-1659874717739
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874717740
GPR[SPVAP]-1659874717740
GPR[EPVAP]-1659874718956
GPR[SPVATF]-1659874718956
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874720048
GPR[EPVS]-1659874720048
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874720049
GPR[SPVAP]-1659874720049
GPR[EPVAP]-1659874721277
GPR[SPVATF]-1659874721277
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874722364
GPR[EPVS]-1659874722364
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874722365
GPR[SPVAP]-1659874722365
GPR[EPVAP]-1659874723577
GPR[SPVATF]-1659874723577
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874724670
GPR[EPVS]-1659874724670
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874724671
GPR[SPVAP]-1659874724671
GPR[EPVAP]-1659874725887
GPR[SPVATF]-1659874725887
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874726982
GPR[EPVS]-1659874726982
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874726983
GPR[SPVAP]-1659874726983
GPR[EPVAP]-1659874728214
GPR[SPVATF]-1659874728214
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874729292
GPR[EPVS]-1659874729292
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874729293
GPR[SPVAP]-1659874729293
GPR[EPVAP]-1659874730549
GPR[SPVATF]-1659874730549
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874731632
GPR[EPVS]-1659874731632
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874731633
GPR[SPVAP]-1659874731633
GPR[EPVAP]-1659874732865
GPR[SPVATF]-1659874732865
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874733979
GPR[EPVS]-1659874733979
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874733980
GPR[SPVAP]-1659874733980
GPR[EPVAP]-1659874735191
GPR[SPVATF]-1659874735191
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874736296
GPR[EPVS]-1659874736296
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874736297
GPR[SPVAP]-1659874736297
GPR[EPVAP]-1659874737512
GPR[SPVATF]-1659874737512
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874738612
GPR[EPVS]-1659874738612
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874738613
GPR[SPVAP]-1659874738613
GPR[EPVAP]-1659874739826
GPR[SPVATF]-1659874739826
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874740895
GPR[EPVS]-1659874740895
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874740896
GPR[SPVAP]-1659874740896
GPR[EPVAP]-1659874742134
GPR[SPVATF]-1659874742134
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874743213
GPR[EPVS]-1659874743213
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874743214
GPR[SPVAP]-1659874743214
GPR[EPVAP]-1659874744449
GPR[SPVATF]-1659874744449
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874745523
GPR[EPVS]-1659874745523
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874745524
GPR[SPVAP]-1659874745524
GPR[EPVAP]-1659874746755
GPR[SPVATF]-1659874746755
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874747865
GPR[EPVS]-1659874747865
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874747866
GPR[SPVAP]-1659874747866
GPR[EPVAP]-1659874749091
GPR[SPVATF]-1659874749091
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874750179
GPR[EPVS]-1659874750179
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874750180
GPR[SPVAP]-1659874750180
GPR[EPVAP]-1659874751395
GPR[SPVATF]-1659874751395
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874752497
GPR[EPVS]-1659874752497
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874752498
GPR[SPVAP]-1659874752498
GPR[EPVAP]-1659874753709
GPR[SPVATF]-1659874753709
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874754792
GPR[EPVS]-1659874754792
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874754793
GPR[SPVAP]-1659874754793
GPR[EPVAP]-1659874756029
GPR[SPVATF]-1659874756029
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874757134
GPR[EPVS]-1659874757134
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874757135
GPR[SPVAP]-1659874757135
GPR[EPVAP]-1659874758356
GPR[SPVATF]-1659874758356
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874759436
GPR[EPVS]-1659874759436
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874759437
GPR[SPVAP]-1659874759437
GPR[EPVAP]-1659874760667
GPR[SPVATF]-1659874760667
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874761752
GPR[EPVS]-1659874761752
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874761752
GPR[SPVAP]-1659874761752
GPR[EPVAP]-1659874762965
GPR[SPVATF]-1659874762965
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874764053
GPR[EPVS]-1659874764053
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874764054
GPR[SPVAP]-1659874764054
GPR[EPVAP]-1659874765270
GPR[SPVATF]-1659874765270
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874766384
GPR[EPVS]-1659874766384
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874766385
GPR[SPVAP]-1659874766385
GPR[EPVAP]-1659874767607
GPR[SPVATF]-1659874767607
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874768716
GPR[EPVS]-1659874768716
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874768717
GPR[SPVAP]-1659874768717
GPR[EPVAP]-1659874769952
GPR[SPVATF]-1659874769952
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874771076
GPR[EPVS]-1659874771076
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874771077
GPR[SPVAP]-1659874771077
GPR[EPVAP]-1659874772321
GPR[SPVATF]-1659874772321
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874773408
GPR[EPVS]-1659874773408
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874773409
GPR[SPVAP]-1659874773409
GPR[EPVAP]-1659874774641
GPR[SPVATF]-1659874774641
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874775737
GPR[EPVS]-1659874775737
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874775738
GPR[SPVAP]-1659874775738
GPR[EPVAP]-1659874777026
GPR[SPVATF]-1659874777026
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874778136
GPR[EPVS]-1659874778136
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874778137
GPR[SPVAP]-1659874778137
GPR[EPVAP]-1659874779345
GPR[SPVATF]-1659874779345
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874780441
GPR[EPVS]-1659874780441
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874780442
GPR[SPVAP]-1659874780442
GPR[EPVAP]-1659874781697
GPR[SPVATF]-1659874781697
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874782785
GPR[EPVS]-1659874782785
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874782786
GPR[SPVAP]-1659874782786
GPR[EPVAP]-1659874784014
GPR[SPVATF]-1659874784014
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874785100
GPR[EPVS]-1659874785100
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874785101
GPR[SPVAP]-1659874785101
GPR[EPVAP]-1659874786315
GPR[SPVATF]-1659874786315
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874787426
GPR[EPVS]-1659874787426
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874787428
GPR[SPVAP]-1659874787428
GPR[EPVAP]-1659874788651
GPR[SPVATF]-1659874788651
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874789755
GPR[EPVS]-1659874789755
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874789756
GPR[SPVAP]-1659874789756
GPR[EPVAP]-1659874790971
GPR[SPVATF]-1659874790971
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874792080
GPR[EPVS]-1659874792080
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874792081
GPR[SPVAP]-1659874792081
GPR[EPVAP]-1659874793318
GPR[SPVATF]-1659874793318
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874794421
GPR[EPVS]-1659874794421
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874794422
GPR[SPVAP]-1659874794422
GPR[EPVAP]-1659874795668
GPR[SPVATF]-1659874795668
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874796793
GPR[EPVS]-1659874796793
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874796794
GPR[SPVAP]-1659874796794
GPR[EPVAP]-1659874798027
GPR[SPVATF]-1659874798027
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874799131
GPR[EPVS]-1659874799131
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874799132
GPR[SPVAP]-1659874799132
GPR[EPVAP]-1659874800359
GPR[SPVATF]-1659874800359
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874801478
GPR[EPVS]-1659874801478
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874801479
GPR[SPVAP]-1659874801479
GPR[EPVAP]-1659874802692
GPR[SPVATF]-1659874802692
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874803796
GPR[EPVS]-1659874803796
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874803797
GPR[SPVAP]-1659874803797
GPR[EPVAP]-1659874805008
GPR[SPVATF]-1659874805008
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874806103
GPR[EPVS]-1659874806103
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874806104
GPR[SPVAP]-1659874806104
GPR[EPVAP]-1659874807318
GPR[SPVATF]-1659874807318
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874808415
GPR[EPVS]-1659874808415
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874808416
GPR[SPVAP]-1659874808417
GPR[EPVAP]-1659874809644
GPR[SPVATF]-1659874809644
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874810765
GPR[EPVS]-1659874810765
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874810766
GPR[SPVAP]-1659874810766
GPR[EPVAP]-1659874811995
GPR[SPVATF]-1659874811995
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874813075
GPR[EPVS]-1659874813075
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874813077
GPR[SPVAP]-1659874813077
GPR[EPVAP]-1659874814297
GPR[SPVATF]-1659874814297
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874815382
GPR[EPVS]-1659874815382
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874815383
GPR[SPVAP]-1659874815383
GPR[EPVAP]-1659874816605
GPR[SPVATF]-1659874816605
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874817688
GPR[EPVS]-1659874817688
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874817689
GPR[SPVAP]-1659874817689
GPR[EPVAP]-1659874818901
GPR[SPVATF]-1659874818901
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874819979
GPR[EPVS]-1659874819979
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874819980
GPR[SPVAP]-1659874819980
GPR[EPVAP]-1659874821191
GPR[SPVATF]-1659874821191
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874822279
GPR[EPVS]-1659874822279
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874822280
GPR[SPVAP]-1659874822280
GPR[EPVAP]-1659874823485
GPR[SPVATF]-1659874823485
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874824562
GPR[EPVS]-1659874824562
========
int index=getIndex(key);
if(index<0){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874824563
GPR[SPVAP]-1659874824563
GPR[EPVAP]-1659874825778
GPR[SPVATF]-1659874825778
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874826869
GPR[EPVS]-1659874826869
========
int index=getIndex(key);
if(middle<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874826870
GPR[SPVAP]-1659874826870
GPR[EPVAP]-1659874827572
GPR[EPVS]-1659874827572
========
fireSeriesChanged();
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874827574
GPR[SPVAP]-1659874827574
GPR[EPVAP]-1659874828283
GPR[EPVS]-1659874828283
========
int index=getIndex(key);
if(index<0){
throw new SeriesException("X-value already exists.");
}
removeValue(index);

========
GPR[SPVS]-1659874828284
GPR[SPVAP]-1659874828284
GPR[EPVAP]-1659874828997
GPR[EPVS]-1659874828997
========
int index=getIndex(key);
if(section<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874828999
GPR[SPVAP]-1659874828999
GPR[EPVAP]-1659874829705
GPR[EPVS]-1659874829705
========
if(key==null){
key=new Integer(index);
}
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874829706
GPR[SPVAP]-1659874829706
GPR[EPVAP]-1659874830405
GPR[EPVS]-1659874830405
========
int index=getIndex(key);
new Object[4][0]=key.toString();
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874830407
GPR[SPVAP]-1659874830407
GPR[EPVAP]-1659874831105
GPR[EPVS]-1659874831105
========
int index=getIndex(key);
if(index<0){
throw new IllegalArgumentException("Requires index >= 0.");
}
removeValue(index);

========
GPR[SPVS]-1659874831106
GPR[SPVAP]-1659874831106
GPR[EPVAP]-1659874832323
GPR[SPVATF]-1659874832323
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874833404
GPR[EPVS]-1659874833404
========
this.index=Math.max(this.size,index+1);
int index=getIndex(key);
if(index<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874833405
GPR[SPVAP]-1659874833405
GPR[EPVAP]-1659874834122
GPR[EPVS]-1659874834122
========
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
int index=getIndex(key);
if(pos<0){
throw new UnknownKeyException("The key ("+key.toString());
}
removeValue(index);

========
GPR[SPVS]-1659874834123
GPR[SPVAP]-1659874834123
GPR[EPVAP]-1659874834823
GPR[EPVS]-1659874834823
========
int index=getIndex(key);
if(index<0||index>=getDatasetCount()){
throw new IllegalArgumentException("Index "+index);
}
removeValue(index);

========
GPR[SPVS]-1659874834824
GPR[SPVAP]-1659874834824
GPR[EPVAP]-1659874835526
GPR[EPVS]-1659874835526
========
this.index=Math.max(this.size,index+1);
int index=getIndex(key);
if(index<0){
throw new IllegalArgumentException("Requires index >= 0.");
}
removeValue(index);

========
GPR[SPVS]-1659874835528
GPR[SPVAP]-1659874835528
GPR[EPVAP]-1659874836222
GPR[EPVS]-1659874836222
GPR[ESUN]-1659874836222
GPR[SSUN]-1659874836222
org.jfree.data.KeyedObjects,267
UNKNOWN ASTNode type : catch (UnsupportedEncodingException e) {
  encodedKey=key.toString();
}

========
if(index<0){
throw new UnknownKeyException("Key not found: "+key);
}

========
GPR[SPVS]-1659874838227
GPR[SPVAP]-1659874838227
GPR[EPVAP]-1659874842566
GPR[SPVATF]-1659874842566
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874843660
GPR[EPVS]-1659874843660
========
if(index<0){
throw new UnknownKeyException("The key ("+key);
}

========
GPR[SPVS]-1659874843661
GPR[SPVAP]-1659874843661
GPR[EPVAP]-1659874844898
GPR[SPVATF]-1659874844898
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874845995
GPR[EPVS]-1659874845995
========
if(index<0){
throw new UnknownKeyException("Column key ("+key);
}

========
GPR[SPVS]-1659874845997
GPR[SPVAP]-1659874845997
GPR[EPVAP]-1659874847210
GPR[SPVATF]-1659874847210
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874848331
GPR[EPVS]-1659874848331
========
if(index<0){
throw new IllegalArgumentException("Null \'key\' argument.");
}

========
GPR[SPVS]-1659874848332
GPR[SPVAP]-1659874848332
GPR[EPVAP]-1659874849577
GPR[SPVATF]-1659874849577
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874850666
GPR[EPVS]-1659874850666
========
if(index<0){
throw new IllegalArgumentException("Requires index >= 0.");
}

========
GPR[SPVS]-1659874850668
GPR[SPVAP]-1659874850668
GPR[EPVAP]-1659874851958
GPR[SPVATF]-1659874851958
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874853040
GPR[EPVS]-1659874853040
========
if(index<0){
throw new NullPointerException("Null \'key\' argument.");
}

========
GPR[SPVS]-1659874853042
GPR[SPVAP]-1659874853042
GPR[EPVAP]-1659874854253
GPR[SPVATF]-1659874854253
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874855356
GPR[EPVS]-1659874855356
========
if(index<0){
if(index>=getDatasetCount()){
return ;
}
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874855357
GPR[SPVAP]-1659874855357
GPR[EPVAP]-1659874856054
GPR[EPVS]-1659874856054
========
if(index<0||index>getSubtitleCount()){
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874856055
GPR[SPVAP]-1659874856055
GPR[EPVAP]-1659874856764
GPR[EPVS]-1659874856764
========
if(index<0){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}

========
GPR[SPVS]-1659874856765
GPR[SPVAP]-1659874856765
GPR[EPVAP]-1659874857988
GPR[SPVATF]-1659874857988
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874859086
GPR[EPVS]-1659874859086
========
if(index<0||index>=getDatasetCount()){
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874859088
GPR[SPVAP]-1659874859088
GPR[EPVAP]-1659874859787
GPR[EPVS]-1659874859787
========
if(index<0){
throw new IllegalArgumentException("Index "+index);
}

========
GPR[SPVS]-1659874859789
GPR[SPVAP]-1659874859789
GPR[EPVAP]-1659874861014
GPR[SPVATF]-1659874861014
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874862105
GPR[EPVS]-1659874862105
========
if(index<0||index>=getItemCount()){
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874862107
GPR[SPVAP]-1659874862107
GPR[EPVAP]-1659874863372
GPR[SPVATF]-1659874863372
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874864495
GPR[EPVS]-1659874864495
========
if(index<0){
throw new IndexOutOfBoundsException("Invalid \'index\': "+index);
}

========
GPR[SPVS]-1659874864496
GPR[SPVAP]-1659874864496
GPR[EPVAP]-1659874865707
GPR[SPVATF]-1659874865707
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874866780
GPR[EPVS]-1659874866780
========
if(index<0||index>=getItemCount()){
throw new IndexOutOfBoundsException("Invalid \'index\': "+index);
}

========
GPR[SPVS]-1659874866781
GPR[SPVAP]-1659874866781
GPR[EPVAP]-1659874867986
GPR[SPVATF]-1659874867986
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874869079
GPR[EPVS]-1659874869079
========
if(index<0||index>3){
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874869080
GPR[SPVAP]-1659874869080
GPR[EPVAP]-1659874870287
GPR[SPVATF]-1659874870287
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874871389
GPR[EPVS]-1659874871389
========
if(index<0){
throw new IllegalArgumentException("The index value ("+index);
}

========
GPR[SPVS]-1659874871390
GPR[SPVAP]-1659874871390
GPR[EPVAP]-1659874872613
GPR[SPVATF]-1659874872613
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874873691
GPR[EPVS]-1659874873691
========
if(index<0||index>3){
throw new IllegalArgumentException("The index value ("+index);
}

========
GPR[SPVS]-1659874873692
GPR[SPVAP]-1659874873692
GPR[EPVAP]-1659874875755
GPR[SPVATF]-1659874875755
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874877007
GPR[EPVS]-1659874877007
========
if(index<0){
if(index>=0){
return (TimeSeriesDataItem)this.data.get(index);
}else {
return null;
}
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874877008
GPR[SPVAP]-1659874877008
GPR[EPVAP]-1659874877755
GPR[EPVS]-1659874877755
========
if((index<0)||(index>=getSubtitleCount())){
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874877756
GPR[SPVAP]-1659874877756
GPR[EPVAP]-1659874878475
GPR[EPVS]-1659874878475
========
if(index<0){
throw new IllegalArgumentException("Index out of range.");
}

========
GPR[SPVS]-1659874878476
GPR[SPVAP]-1659874878477
GPR[EPVAP]-1659874879719
GPR[SPVATF]-1659874879719
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874880810
GPR[EPVS]-1659874880810
========
if(index<0){
throw new SeriesException("X-value already exists.");
}

========
GPR[SPVS]-1659874880811
GPR[SPVAP]-1659874880811
GPR[EPVAP]-1659874881498
GPR[EPVS]-1659874881498
========
if(index<0){
if(index>=0){
return getValue(index);
}else {
return null;
}
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874881499
GPR[SPVAP]-1659874881499
GPR[EPVAP]-1659874882195
GPR[EPVS]-1659874882195
========
if(index<0){
throw new IllegalArgumentException("Null \'location\' for index 0 not permitted.");
}

========
GPR[SPVS]-1659874882196
GPR[SPVAP]-1659874882196
GPR[EPVAP]-1659874883469
GPR[SPVATF]-1659874883469
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874884565
GPR[EPVS]-1659874884565
========
if(index<0){
throw new SeriesException("No observation for x = "+key);
}

========
GPR[SPVS]-1659874884566
GPR[SPVAP]-1659874884566
GPR[EPVAP]-1659874885262
GPR[EPVS]-1659874885262
========
if(index<0){
throw new SeriesException("TimeSeries.update(TimePeriod, Number):  period does not exist.");
}

========
GPR[SPVS]-1659874885263
GPR[SPVAP]-1659874885263
GPR[EPVAP]-1659874885956
GPR[EPVS]-1659874885956
========
if(index<0){
if(index>=0){
return (TickUnit)this.data.get(index);
}else {
index=-(index+1);
return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));
}
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874885957
GPR[SPVAP]-1659874885957
GPR[EPVAP]-1659874886658
GPR[EPVS]-1659874886658
========
if(index<0){
index=-(index+1);
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874886659
GPR[SPVAP]-1659874886659
GPR[EPVAP]-1659874887935
GPR[SPVATF]-1659874887935
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874889022
GPR[EPVS]-1659874889022
========
if(index<ORIENTATION_VERTICAL){
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874889023
GPR[SPVAP]-1659874889023
GPR[EPVAP]-1659874889717
GPR[EPVS]-1659874889717
========
if(index<0||index>=getDatasetCount()){
throw new IllegalArgumentException("Index "+index);
}

========
GPR[SPVS]-1659874889719
GPR[SPVAP]-1659874889719
GPR[EPVAP]-1659874890467
GPR[EPVS]-1659874890467
========
if(start<0){
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874890468
GPR[SPVAP]-1659874890468
GPR[EPVAP]-1659874891167
GPR[EPVS]-1659874891167
========
if(end<0){
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874891168
GPR[SPVAP]-1659874891168
GPR[EPVAP]-1659874891893
GPR[EPVS]-1659874891893
========
if(keyIndex<0){
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874891895
GPR[SPVAP]-1659874891895
GPR[EPVAP]-1659874892584
GPR[EPVS]-1659874892584
========
if(pos<0){
throw new UnknownKeyException("The key ("+key.toString());
}

========
GPR[SPVS]-1659874892586
GPR[SPVAP]-1659874892586
GPR[EPVAP]-1659874893285
GPR[EPVS]-1659874893285
GPR[ESUN]-1659874893287
GPR[SSUN]-1659874893287
org.jfree.data.KeyedObjects,268
GPR[ESUN]-1659874893724
GPR[SSUN]-1659874893724
org.jfree.data.KeyedObject,85
========
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
return this.key;

========
GPR[SPVS]-1659874895445
GPR[SPVAP]-1659874895445
GPR[EPVAP]-1659874899683
GPR[SPVATF]-1659874899683
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659874900779
GPR[EPVS]-1659874900779
GPR[ESUN]-1659874900779
GPR[SSUN]-1659874900779
org.jfree.data.KeyedObjects,134
UNKNOWN ASTNode type : catch (UnsupportedEncodingException e) {
  encodedKey=key.toString();
}

========
if(ko.getKey().equals(axis.subCategories)){
return i;
}

========
GPR[SPVS]-1659874903638
GPR[SPVAP]-1659874903638
GPR[EPVAP]-1659874905780
GPR[EPVS]-1659874905780
========
if(ko.getKey().equals(axis.subLabelFont)){
return i;
}

========
GPR[SPVS]-1659874905782
GPR[SPVAP]-1659874905782
GPR[EPVAP]-1659874906897
GPR[EPVS]-1659874906897
========
if(ko.getKey().equals(axis.subLabelPaint)){
return i;
}

========
GPR[SPVS]-1659874906898
GPR[SPVAP]-1659874906898
GPR[EPVAP]-1659874907980
GPR[EPVS]-1659874907980
========
if(ko.getKey().equals(that.key)){
return i;
}

========
GPR[SPVS]-1659874907982
GPR[SPVAP]-1659874907982
GPR[EPVAP]-1659874909110
GPR[EPVS]-1659874909110
========
if(ko.getKey().equals(that.cornerTextItems)){
return i;
}

========
GPR[SPVS]-1659874909112
GPR[SPVAP]-1659874909112
GPR[EPVAP]-1659874910160
GPR[EPVS]-1659874910160
========
if(ko.getKey().equals(that.groupStroke)){
return i;
}

========
GPR[SPVS]-1659874910161
GPR[SPVAP]-1659874910161
GPR[EPVAP]-1659874911224
GPR[EPVS]-1659874911224
========
if(ko.getKey().equals(that.paintScale)){
return i;
}

========
GPR[SPVS]-1659874911225
GPR[SPVAP]-1659874911225
GPR[EPVAP]-1659874912265
GPR[EPVS]-1659874912265
========
if(ko.getKey().equals(that.sublabels)){
return i;
}

========
GPR[SPVS]-1659874912266
GPR[SPVAP]-1659874912266
GPR[EPVAP]-1659874913301
GPR[EPVS]-1659874913301
========
if(ko.getKey().equals(ZOOM_OUT_DOMAIN_COMMAND)){
return i;
}

========
GPR[SPVS]-1659874913303
GPR[SPVAP]-1659874913303
GPR[EPVAP]-1659874914332
GPR[EPVS]-1659874914332
========
if(this.key!=null?ko.getKey().equals(key):null){
return i;
}

========
GPR[SPVS]-1659874914333
GPR[SPVAP]-1659874914333
GPR[EPVAP]-1659874915372
GPR[EPVS]-1659874915372
========
if(ko.getKey().equals(ZERO)){
return i;
}

========
GPR[SPVS]-1659874915374
GPR[SPVAP]-1659874915374
GPR[EPVAP]-1659874916465
GPR[EPVS]-1659874916465
========
if(ko.getKey().equals(RectangleConstraint.NONE)){
return i;
}

========
GPR[SPVS]-1659874916466
GPR[SPVAP]-1659874916466
GPR[EPVAP]-1659874917519
GPR[EPVS]-1659874917519
========
if(ko.getKey().equals(that.scale)){
return i;
}

========
GPR[SPVS]-1659874917521
GPR[SPVAP]-1659874917521
GPR[EPVAP]-1659874918567
GPR[EPVS]-1659874918567
========
if(ko.getKey().equals(that.stripOutlineStroke)){
return i;
}

========
GPR[SPVS]-1659874918569
GPR[SPVAP]-1659874918569
GPR[EPVAP]-1659874919602
GPR[EPVS]-1659874919602
========
if(ko.getKey().equals(that.itemFont)){
return i;
}

========
GPR[SPVS]-1659874919604
GPR[SPVAP]-1659874919604
GPR[EPVAP]-1659874920669
GPR[EPVS]-1659874920669
========
if(ko.getKey().equals(that.itemPaint)){
return i;
}

========
GPR[SPVS]-1659874920670
GPR[SPVAP]-1659874920670
GPR[EPVAP]-1659874921689
GPR[EPVS]-1659874921689
========
if(ko.getKey().equals(that.hLayout)){
return i;
}

========
GPR[SPVS]-1659874921690
GPR[SPVAP]-1659874921690
GPR[EPVAP]-1659874922732
GPR[EPVS]-1659874922732
========
if(ko.getKey().equals(that.vLayout)){
return i;
}

========
GPR[SPVS]-1659874922733
GPR[SPVAP]-1659874922733
GPR[EPVAP]-1659874923770
GPR[EPVS]-1659874923770
========
if(ko.getKey().equals(that.formatPattern)){
return i;
}

========
GPR[SPVS]-1659874923771
GPR[SPVAP]-1659874923771
GPR[EPVAP]-1659874924790
GPR[EPVS]-1659874924790
========
if(ko.getKey().equals(that.formatString)){
return i;
}

========
GPR[SPVS]-1659874924791
GPR[SPVAP]-1659874924791
GPR[EPVAP]-1659874925808
GPR[EPVS]-1659874925808
========
if(ko.getKey().equals(that.additionalFormatPattern)){
return i;
}

========
GPR[SPVS]-1659874925809
GPR[SPVAP]-1659874925809
GPR[EPVAP]-1659874926829
GPR[EPVS]-1659874926829
========
if(ko.getKey().equals(that.seriesLabelLists)){
return i;
}

========
GPR[SPVS]-1659874926831
GPR[SPVAP]-1659874926831
GPR[EPVAP]-1659874927868
GPR[EPVS]-1659874927868
========
if(ko.getKey().equals(generator.dateFormatter)){
return i;
}

========
GPR[SPVS]-1659874927869
GPR[SPVAP]-1659874927869
GPR[EPVAP]-1659874928947
GPR[EPVS]-1659874928947
========
if(ko.getKey().equals(generator.numberFormatter)){
return i;
}

========
GPR[SPVS]-1659874928949
GPR[SPVAP]-1659874928949
GPR[EPVAP]-1659874929980
GPR[EPVS]-1659874929980
========
if(ko.getKey().equals(that.labelFormat)){
return i;
}

========
GPR[SPVS]-1659874929981
GPR[SPVAP]-1659874929981
GPR[EPVAP]-1659874930999
GPR[EPVS]-1659874930999
========
if(ko.getKey().equals(that.numberFormat)){
return i;
}

========
GPR[SPVS]-1659874931001
GPR[SPVAP]-1659874931001
GPR[EPVAP]-1659874932029
GPR[EPVS]-1659874932029
========
if(ko.getKey().equals(that.percentFormat)){
return i;
}

========
GPR[SPVS]-1659874932030
GPR[SPVAP]-1659874932030
GPR[EPVAP]-1659874933054
GPR[EPVS]-1659874933054
========
if(ko.getKey().equals(layer.name)){
return i;
}

========
GPR[SPVS]-1659874933055
GPR[SPVAP]-1659874933055
GPR[EPVAP]-1659874934091
GPR[EPVS]-1659874934091
========
if(ko.getKey().equals(that.name)){
return i;
}

========
GPR[SPVS]-1659874934092
GPR[SPVAP]-1659874934092
GPR[EPVAP]-1659874935147
GPR[EPVS]-1659874935147
========
if(ko.getKey().equals(t.name)){
return i;
}

========
GPR[SPVS]-1659874935148
GPR[SPVAP]-1659874935148
GPR[EPVAP]-1659874936193
GPR[EPVS]-1659874936193
========
if(ko.getKey().equals(alignment.name)){
return i;
}

========
GPR[SPVS]-1659874936195
GPR[SPVAP]-1659874936195
GPR[EPVAP]-1659874937223
GPR[EPVS]-1659874937223
========
if(ko.getKey().equals(order.name)){
return i;
}

========
GPR[SPVS]-1659874937224
GPR[SPVAP]-1659874937224
GPR[EPVAP]-1659874938264
GPR[EPVS]-1659874938264
========
if(ko.getKey().equals(that.daySuffix)){
return i;
}

========
GPR[SPVS]-1659874938266
GPR[SPVAP]-1659874938266
GPR[EPVAP]-1659874939337
GPR[EPVS]-1659874939337
========
if(ko.getKey().equals(that.hourSuffix)){
return i;
}

========
GPR[SPVS]-1659874939338
GPR[SPVAP]-1659874939338
GPR[EPVAP]-1659874940380
GPR[EPVS]-1659874940380
========
if(ko.getKey().equals(that.minuteSuffix)){
return i;
}

========
GPR[SPVS]-1659874940381
GPR[SPVAP]-1659874940381
GPR[EPVAP]-1659874941417
GPR[EPVS]-1659874941417
========
if(ko.getKey().equals(that.secondSuffix)){
return i;
}

========
GPR[SPVS]-1659874941418
GPR[SPVAP]-1659874941418
GPR[EPVAP]-1659874942492
GPR[EPVS]-1659874942492
========
if(ko.getKey().equals(that.secondFormatter)){
return i;
}

========
GPR[SPVS]-1659874942494
GPR[SPVAP]-1659874942494
GPR[EPVAP]-1659874943529
GPR[EPVS]-1659874943529
========
if(ko.getKey().equals(that.label)){
return i;
}

========
GPR[SPVS]-1659874943531
GPR[SPVAP]-1659874943531
GPR[EPVAP]-1659874944569
GPR[EPVS]-1659874944569
========
if(ko.getKey().equals(that.fillPaint)){
return i;
}

========
GPR[SPVS]-1659874944570
GPR[SPVAP]-1659874944570
GPR[EPVAP]-1659874945586
GPR[EPVS]-1659874945586
========
if(ko.getKey().equals(that.outlineStroke)){
return i;
}

========
GPR[SPVS]-1659874945587
GPR[SPVAP]-1659874945587
GPR[EPVAP]-1659874946631
GPR[EPVS]-1659874946631
========
if(ko.getKey().equals(that.outlinePaint)){
return i;
}

========
GPR[SPVS]-1659874946632
GPR[SPVAP]-1659874946632
GPR[EPVAP]-1659874947674
GPR[EPVS]-1659874947674
========
if(ko.getKey().equals(that.lineStroke)){
return i;
}

========
GPR[SPVS]-1659874947676
GPR[SPVAP]-1659874947676
GPR[EPVAP]-1659874948710
GPR[EPVS]-1659874948710
========
if(ko.getKey().equals(that.linePaint)){
return i;
}

========
GPR[SPVS]-1659874948711
GPR[SPVAP]-1659874948711
GPR[EPVAP]-1659874949754
GPR[EPVS]-1659874949754
========
if(ko.getKey().equals(that.items)){
return i;
}

========
GPR[SPVS]-1659874949755
GPR[SPVAP]-1659874949755
GPR[EPVAP]-1659874950802
GPR[EPVS]-1659874950802
========
if(ko.getKey().equals(that.drawingSupplier)){
return i;
}

========
GPR[SPVS]-1659874950804
GPR[SPVAP]-1659874950804
GPR[EPVAP]-1659874951914
GPR[EPVS]-1659874951914
========
if(ko.getKey().equals(that.aggregatedItemsKey)){
return i;
}

========
GPR[SPVS]-1659874951915
GPR[SPVAP]-1659874951915
GPR[EPVAP]-1659874952964
GPR[EPVS]-1659874952964
========
if(ko.getKey().equals(that.angleLabelFont)){
return i;
}

========
GPR[SPVS]-1659874952966
GPR[SPVAP]-1659874952966
GPR[EPVAP]-1659874954005
GPR[EPVS]-1659874954005
========
if(ko.getKey().equals(that.axisLineStroke)){
return i;
}

========
GPR[SPVS]-1659874954006
GPR[SPVAP]-1659874954006
GPR[EPVAP]-1659874955087
GPR[EPVS]-1659874955087
========
if(ko.getKey().equals(that.baseSeriesOutlineStroke)){
return i;
}

========
GPR[SPVS]-1659874955088
GPR[SPVAP]-1659874955088
GPR[EPVAP]-1659874956103
GPR[EPVS]-1659874956103
========
if(ko.getKey().equals(that.labelFont)){
return i;
}

========
GPR[SPVS]-1659874956104
GPR[SPVAP]-1659874956104
GPR[EPVAP]-1659874957126
GPR[EPVS]-1659874957126
========
if(ko.getKey().equals(that.labelGenerator)){
return i;
}

========
GPR[SPVS]-1659874957128
GPR[SPVAP]-1659874957128
GPR[EPVAP]-1659874958164
GPR[EPVS]-1659874958164
========
if(ko.getKey().equals(that.quadrantOrigin)){
return i;
}

========
GPR[SPVS]-1659874958165
GPR[SPVAP]-1659874958165
GPR[EPVAP]-1659874959192
GPR[EPVS]-1659874959192
========
if(ko.getKey().equals(that.arrowPaint)){
return i;
}

========
GPR[SPVS]-1659874959193
GPR[SPVAP]-1659874959193
GPR[EPVAP]-1659874960206
GPR[EPVS]-1659874960206
========
if(ko.getKey().equals(that.shape)){
return i;
}

========
GPR[SPVS]-1659874960208
GPR[SPVAP]-1659874960208
GPR[EPVAP]-1659874961233
GPR[EPVS]-1659874961233
========
if(ko.getKey().equals(that.text)){
return i;
}

========
GPR[SPVS]-1659874961234
GPR[SPVAP]-1659874961234
GPR[EPVAP]-1659874962287
GPR[EPVS]-1659874962287
========
if(ko.getKey().equals(that.font)){
return i;
}

========
GPR[SPVS]-1659874962288
GPR[SPVAP]-1659874962288
GPR[EPVAP]-1659874963297
GPR[EPVS]-1659874963297
========
if(ko.getKey().equals(that.foregroundAnnotations)){
return i;
}

========
GPR[SPVS]-1659874963298
GPR[SPVAP]-1659874963298
GPR[EPVAP]-1659874964335
GPR[EPVS]-1659874964335
========
if(ko.getKey().equals(that.backgroundAnnotations)){
return i;
}

========
GPR[SPVS]-1659874964336
GPR[SPVAP]-1659874964336
GPR[EPVAP]-1659874965355
GPR[EPVS]-1659874965355
========
if(ko.getKey().equals(that.lookupTable)){
return i;
}

========
GPR[SPVS]-1659874965356
GPR[SPVAP]-1659874965356
GPR[EPVAP]-1659874966384
GPR[EPVS]-1659874966384
========
if(ko.getKey().equals(that.formatter)){
return i;
}

========
GPR[SPVS]-1659874966386
GPR[SPVAP]-1659874966386
GPR[EPVAP]-1659874967418
GPR[EPVS]-1659874967418
========
if(ko.getKey().equals(that.yearFormatter)){
return i;
}

========
GPR[SPVS]-1659874967419
GPR[SPVAP]-1659874967419
GPR[EPVAP]-1659874968435
GPR[EPVS]-1659874968435
========
if(ko.getKey().equals(that.sublabelFont)){
return i;
}

========
GPR[SPVS]-1659874968436
GPR[SPVAP]-1659874968436
GPR[EPVAP]-1659874969471
GPR[EPVS]-1659874969471
========
if(ko.getKey().equals(that.first)){
return i;
}

========
GPR[SPVS]-1659874969472
GPR[SPVAP]-1659874969472
GPR[EPVAP]-1659874970511
GPR[EPVS]-1659874970511
========
if(ko.getKey().equals(that.last)){
return i;
}

========
GPR[SPVS]-1659874970512
GPR[SPVAP]-1659874970512
GPR[EPVAP]-1659874971530
GPR[EPVS]-1659874971530
========
if(ko.getKey().equals(that.timeZone)){
return i;
}

========
GPR[SPVS]-1659874971532
GPR[SPVAP]-1659874971532
GPR[EPVAP]-1659874972565
GPR[EPVS]-1659874972565
========
if(ko.getKey().equals(that.autoRangeTimePeriodClass)){
return i;
}

========
GPR[SPVS]-1659874972566
GPR[SPVAP]-1659874972566
GPR[EPVAP]-1659874973601
GPR[EPVS]-1659874973601
========
if(ko.getKey().equals(that.majorTickTimePeriodClass)){
return i;
}

========
GPR[SPVS]-1659874973602
GPR[SPVAP]-1659874973602
GPR[EPVAP]-1659874974627
GPR[EPVS]-1659874974627
========
if(ko.getKey().equals(that.minorTickTimePeriodClass)){
return i;
}

========
GPR[SPVS]-1659874974628
GPR[SPVAP]-1659874974628
GPR[EPVAP]-1659874975667
GPR[EPVS]-1659874975667
========
if(ko.getKey().equals(that.minorTickMarkPaint)){
return i;
}

========
GPR[SPVS]-1659874975668
GPR[SPVAP]-1659874975668
GPR[EPVAP]-1659874976690
GPR[EPVS]-1659874976690
========
if(ko.getKey().equals(that.minorTickMarkStroke)){
return i;
}

========
GPR[SPVS]-1659874976691
GPR[SPVAP]-1659874976691
GPR[EPVAP]-1659874977708
GPR[EPVS]-1659874977708
========
if(ko.getKey().equals(that.symbols)){
return i;
}

========
GPR[SPVS]-1659874977709
GPR[SPVAP]-1659874977709
GPR[EPVAP]-1659874978744
GPR[EPVS]-1659874978744
========
if(ko.getKey().equals(that.dateFormat)){
return i;
}

========
GPR[SPVS]-1659874978745
GPR[SPVAP]-1659874978745
GPR[EPVAP]-1659874979782
GPR[EPVS]-1659874979783
========
if(ko.getKey().equals(that.itemParameterName)){
return i;
}

========
GPR[SPVS]-1659874979784
GPR[SPVAP]-1659874979784
GPR[EPVAP]-1659874980858
GPR[EPVS]-1659874980858
========
if(ko.getKey().equals(that.prefix)){
return i;
}

========
GPR[SPVS]-1659874980860
GPR[SPVAP]-1659874980860
GPR[EPVAP]-1659874981915
GPR[EPVS]-1659874981915
========
if(ko.getKey().equals(that.seriesParameterName)){
return i;
}

========
GPR[SPVS]-1659874981916
GPR[SPVAP]-1659874981916
GPR[EPVAP]-1659874982935
GPR[EPVS]-1659874982935
========
if(ko.getKey().equals(that.categoryParameterName)){
return i;
}

========
GPR[SPVS]-1659874982936
GPR[SPVAP]-1659874982936
GPR[EPVAP]-1659874983975
GPR[EPVS]-1659874983975
========
if(ko.getKey().equals(that.rowKey)){
return i;
}

========
GPR[SPVS]-1659874983977
GPR[SPVAP]-1659874983977
GPR[EPVAP]-1659874985017
GPR[EPVS]-1659874985017
========
if(ko.getKey().equals(that.columnKey)){
return i;
}

========
GPR[SPVS]-1659874985018
GPR[SPVAP]-1659874985018
GPR[EPVAP]-1659874986024
GPR[EPVS]-1659874986024
========
if(ko.getKey().equals(that.area)){
return i;
}

========
GPR[SPVS]-1659874986025
GPR[SPVAP]-1659874986025
GPR[EPVAP]-1659874987057
GPR[EPVS]-1659874987057
========
if(ko.getKey().equals(that.renderingHints)){
return i;
}

========
GPR[SPVS]-1659874987058
GPR[SPVAP]-1659874987059
GPR[EPVAP]-1659874988116
GPR[EPVS]-1659874988116
========
if(ko.getKey().equals(other.name)){
return i;
}

========
GPR[SPVS]-1659874988117
GPR[SPVAP]-1659874988117
GPR[EPVAP]-1659874989134
GPR[EPVS]-1659874989134
========
if(ko.getKey().equals(tf.text)){
return i;
}

========
GPR[SPVS]-1659874989135
GPR[SPVAP]-1659874989135
GPR[EPVAP]-1659874990175
GPR[EPVS]-1659874990175
========
if(ko.getKey().equals(tf.font)){
return i;
}

========
GPR[SPVS]-1659874990176
GPR[SPVAP]-1659874990176
GPR[EPVAP]-1659874991196
GPR[EPVS]-1659874991196
========
if(ko.getKey().equals(tf.paint)){
return i;
}

========
GPR[SPVS]-1659874991197
GPR[SPVAP]-1659874991197
GPR[EPVAP]-1659874992236
GPR[EPVS]-1659874992236
========
if(ko.getKey().equals(that.frame)){
return i;
}

========
GPR[SPVS]-1659874992237
GPR[SPVAP]-1659874992237
GPR[EPVAP]-1659874993271
GPR[EPVS]-1659874993271
========
if(ko.getKey().equals(that.bounds)){
return i;
}

========
GPR[SPVS]-1659874993272
GPR[SPVAP]-1659874993272
GPR[EPVAP]-1659874994291
GPR[EPVS]-1659874994291
========
if(ko.getKey().equals(that.arrangement)){
return i;
}

========
GPR[SPVS]-1659874994293
GPR[SPVAP]-1659874994293
GPR[EPVAP]-1659874995318
GPR[EPVS]-1659874995318
========
if(ko.getKey().equals(that.blocks)){
return i;
}

========
GPR[SPVS]-1659874995319
GPR[SPVAP]-1659874995319
GPR[EPVAP]-1659874996359
GPR[EPVS]-1659874996359
========
if(ko.getKey().equals(that.keyToGroupMap)){
return i;
}

========
GPR[SPVS]-1659874996361
GPR[SPVAP]-1659874996361
GPR[EPVAP]-1659874997395
GPR[EPVS]-1659874997395
========
if(ko.getKey().equals(that.tasks)){
return i;
}

========
GPR[SPVS]-1659874997396
GPR[SPVAP]-1659874997396
GPR[EPVAP]-1659874998426
GPR[EPVS]-1659874998426
========
if(ko.getKey().equals(that.bins)){
return i;
}

========
GPR[SPVS]-1659874998427
GPR[SPVAP]-1659874998427
GPR[EPVAP]-1659874999471
GPR[EPVS]-1659874999471
========
if(ko.getKey().equals(that.seriesKeys)){
return i;
}

========
GPR[SPVS]-1659874999472
GPR[SPVAP]-1659874999472
GPR[EPVAP]-1659875000501
GPR[EPVS]-1659875000501
========
if(ko.getKey().equals(that.allSeriesData)){
return i;
}

========
GPR[SPVS]-1659875000502
GPR[SPVAP]-1659875000502
GPR[EPVAP]-1659875001541
GPR[EPVS]-1659875001541
========
if(ko.getKey().equals(that.x)){
return i;
}

========
GPR[SPVS]-1659875001542
GPR[SPVAP]-1659875001542
GPR[EPVAP]-1659875002562
GPR[EPVS]-1659875002562
========
if(ko.getKey().equals(that.windDir)){
return i;
}

========
GPR[SPVS]-1659875002563
GPR[SPVAP]-1659875002563
GPR[EPVAP]-1659875003595
GPR[EPVS]-1659875003595
========
if(ko.getKey().equals(that.windForce)){
return i;
}

========
GPR[SPVS]-1659875003596
GPR[SPVAP]-1659875003596
GPR[EPVAP]-1659875004635
GPR[EPVS]-1659875004635
========
if(ko.getKey().equals(that.underlying)){
return i;
}

========
GPR[SPVS]-1659875004636
GPR[SPVAP]-1659875004636
GPR[EPVAP]-1659875005663
GPR[EPVS]-1659875005663
========
if(ko.getKey().equals(that.date)){
return i;
}

========
GPR[SPVS]-1659875005664
GPR[SPVAP]-1659875005664
GPR[EPVAP]-1659875006675
GPR[EPVS]-1659875006675
========
if(ko.getKey().equals(that.high)){
return i;
}

========
GPR[SPVS]-1659875006676
GPR[SPVAP]-1659875006676
GPR[EPVAP]-1659875007702
GPR[EPVS]-1659875007702
========
if(ko.getKey().equals(that.low)){
return i;
}

========
GPR[SPVS]-1659875007703
GPR[SPVAP]-1659875007703
GPR[EPVAP]-1659875008744
GPR[EPVS]-1659875008744
========
if(ko.getKey().equals(that.open)){
return i;
}

========
GPR[SPVS]-1659875008745
GPR[SPVAP]-1659875008745
GPR[EPVAP]-1659875009803
GPR[EPVS]-1659875009803
========
if(ko.getKey().equals(that.close)){
return i;
}

========
GPR[SPVS]-1659875009804
GPR[SPVAP]-1659875009804
GPR[EPVAP]-1659875010857
GPR[EPVS]-1659875010857
========
if(ko.getKey().equals(that.seriesKey)){
return i;
}

========
GPR[SPVS]-1659875010858
GPR[SPVAP]-1659875010858
GPR[EPVAP]-1659875011880
GPR[EPVS]-1659875011880
========
if(ko.getKey().equals(that.id)){
return i;
}

========
GPR[SPVS]-1659875011881
GPR[SPVAP]-1659875011881
GPR[EPVAP]-1659875012894
GPR[EPVS]-1659875012894
========
if(ko.getKey().equals(type.name)){
return i;
}

========
GPR[SPVS]-1659875012896
GPR[SPVAP]-1659875012896
GPR[EPVAP]-1659875013965
GPR[EPVS]-1659875013965
========
if(ko.getKey().equals(timeSeriesDataItem.period)){
return i;
}

========
GPR[SPVS]-1659875013966
GPR[SPVAP]-1659875013966
GPR[EPVAP]-1659875015082
GPR[EPVS]-1659875015082
========
if(ko.getKey().equals(timeSeriesDataItem.value)){
return i;
}

========
GPR[SPVS]-1659875015083
GPR[SPVAP]-1659875015083
GPR[EPVAP]-1659875016109
GPR[EPVS]-1659875016109
========
if(ko.getKey().equals(position.name)){
return i;
}

========
GPR[SPVS]-1659875016110
GPR[SPVAP]-1659875016110
GPR[EPVAP]-1659875017143
GPR[EPVS]-1659875017143
========
if(ko.getKey().equals(item.x)){
return i;
}

========
GPR[SPVS]-1659875017145
GPR[SPVAP]-1659875017145
GPR[EPVAP]-1659875018198
GPR[EPVS]-1659875018198
========
if(ko.getKey().equals(library.name)){
return i;
}

========
GPR[SPVS]-1659875018199
GPR[SPVAP]-1659875018199
GPR[EPVAP]-1659875019251
GPR[EPVS]-1659875019251
========
if(ko.getKey().equals(that.value)){
return i;
}

========
GPR[SPVS]-1659875019252
GPR[SPVAP]-1659875019252
GPR[EPVAP]-1659875020273
GPR[EPVS]-1659875020273
========
if(ko.getKey().equals(timePeriodValue.period)){
return i;
}

========
GPR[SPVS]-1659875020274
GPR[SPVAP]-1659875020274
GPR[EPVAP]-1659875021293
GPR[EPVS]-1659875021294
========
if(ko.getKey().equals(timePeriodValue.value)){
return i;
}

========
GPR[SPVS]-1659875021295
GPR[SPVAP]-1659875021295
GPR[EPVAP]-1659875022322
GPR[EPVS]-1659875022322
========
if(ko.getKey().equals(this.key)){
return i;
}

========
GPR[SPVS]-1659875022324
GPR[SPVAP]-1659875022324
GPR[EPVAP]-1659875023363
GPR[EPVS]-1659875023363
========
if(ko.getKey().equals(ITEM_TAG)){
return i;
}

========
GPR[SPVS]-1659875023364
GPR[SPVAP]-1659875023364
GPR[EPVAP]-1659875024376
GPR[EPVS]-1659875024376
========
if(ko.getKey().equals(PIEDATASET_TAG)){
return i;
}

========
GPR[SPVS]-1659875024378
GPR[SPVAP]-1659875024378
GPR[EPVAP]-1659875025397
GPR[EPVS]-1659875025397
========
if(ko.getKey().equals(CATEGORYDATASET_TAG)){
return i;
}

========
GPR[SPVS]-1659875025399
GPR[SPVAP]-1659875025399
GPR[EPVAP]-1659875026425
GPR[EPVS]-1659875026425
========
if(ko.getKey().equals(VALUE_TAG)){
return i;
}

========
GPR[SPVS]-1659875026427
GPR[SPVAP]-1659875026427
GPR[EPVAP]-1659875027459
GPR[EPVS]-1659875027459
========
if(ko.getKey().equals(KEY_TAG)){
return i;
}

========
GPR[SPVS]-1659875027460
GPR[SPVAP]-1659875027460
GPR[EPVAP]-1659875028474
GPR[EPVS]-1659875028474
========
if(ko.getKey().equals(POLAR_ZOOM_IN_ACTION_COMMAND)){
return i;
}

========
GPR[SPVS]-1659875028475
GPR[SPVAP]-1659875028475
GPR[EPVAP]-1659875029499
GPR[EPVS]-1659875029499
========
if(ko.getKey().equals(SERIES_TAG)){
return i;
}

========
GPR[SPVS]-1659875029500
GPR[SPVAP]-1659875029500
GPR[EPVAP]-1659875030550
GPR[EPVS]-1659875030550
========
if(i>=0){
this.data.remove(pos);
}
if(ko.getKey().equals(key)){
return i;
}

========
GPR[SPVS]-1659875030553
GPR[SPVAP]-1659875030553
GPR[EPVAP]-1659875031773
GPR[EPVS]-1659875031773
========
while(iterator.hasNext()){
new java.util.ArrayList().add(ko.getKey());
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875035322
GPR[SPVAP]-1659875035322
GPR[EPVAP]-1659875036369
GPR[EPVS]-1659875036369
========
while(iterator.hasNext()){
new java.util.ArrayList().add((KeyedValue)iterator.next().getKey());
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875036370
GPR[SPVAP]-1659875036370
GPR[EPVAP]-1659875037389
GPR[EPVS]-1659875037389
========
while(iterator.hasNext()){
clone.data.add(ko.clone());
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875037390
GPR[SPVAP]-1659875037390
GPR[EPVAP]-1659875038430
GPR[EPVS]-1659875038430
========
clone.data=new java.util.ArrayList();
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875038431
GPR[SPVAP]-1659875038431
GPR[EPVAP]-1659875039460
GPR[EPVS]-1659875039460
========
while(iterator.hasNext()){
if((Title)iterator.next()!=null){
addSubtitle((Title)iterator.next());
}
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875039462
GPR[SPVAP]-1659875039462
GPR[EPVAP]-1659875040495
GPR[EPVS]-1659875040495
========
clearSubtitles();
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875040496
GPR[SPVAP]-1659875040496
GPR[EPVAP]-1659875041508
GPR[EPVS]-1659875041508
========
while(iterator.hasNext()){
(Marker)iterator.next().removeChangeListener(this);
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875041510
GPR[SPVAP]-1659875041510
GPR[EPVAP]-1659875042191
GPR[EPVS]-1659875042191
========
while(iterator.hasNext()){
if(this.data.indexOf(key)<0){
this.data.add(key);
}
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875042193
GPR[SPVAP]-1659875042193
GPR[EPVAP]-1659875045412
GPR[SPVATF]-1659875045412
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875046506
GPR[EPVS]-1659875046506
========
while(iterator.hasNext()){
if(canPrune((Number)iterator.next())){
removeAllValuesForX((Number)iterator.next());
}
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875046507
GPR[SPVAP]-1659875046507
GPR[EPVAP]-1659875047207
GPR[EPVS]-1659875047207
========
Collections.sort(this.data);
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875047209
GPR[SPVAP]-1659875047209
GPR[EPVAP]-1659875047906
GPR[EPVS]-1659875047906
========
while(iterator.hasNext()){
clearDomainMarkers(key.intValue());
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875047907
GPR[SPVAP]-1659875047907
GPR[EPVAP]-1659875048616
GPR[EPVS]-1659875048616
========
while(iterator.hasNext()){
clearRangeMarkers(key.intValue());
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875048617
GPR[SPVAP]-1659875048617
GPR[EPVAP]-1659875049327
GPR[EPVS]-1659875049327
========
new ArrayList().add(this.key);
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875049328
GPR[SPVAP]-1659875049328
GPR[EPVAP]-1659875050029
GPR[EPVS]-1659875050029
========
this.data.remove(key);
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875050030
GPR[SPVAP]-1659875050030
GPR[EPVAP]-1659875051264
GPR[SPVATF]-1659875051264
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875052372
GPR[EPVS]-1659875052372
========
data=new ArrayList(data.size());
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875052373
GPR[SPVAP]-1659875052373
GPR[EPVAP]-1659875053079
GPR[EPVS]-1659875053079
========
while(iterator.hasNext()){
if((Arc2D)iterator.next()!=null){
Comparable key=getSectionKey(i);
paint=lookupSectionPaint(key);
outlinePaint=lookupSectionOutlinePaint(key);
outlineStroke=lookupSectionOutlineStroke(key);
}
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875053080
GPR[SPVAP]-1659875053080
GPR[EPVAP]-1659875053803
GPR[EPVS]-1659875053803
========
while(iterator.hasNext()){
if((Arc2D)iterator.next()!=null){
Comparable key=getSectionKey(i);
paint=lookupSectionPaint(key,true);
outlinePaint=lookupSectionOutlinePaint(key);
outlineStroke=lookupSectionOutlineStroke(key);
}
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875053804
GPR[SPVAP]-1659875053804
GPR[EPVAP]-1659875054536
GPR[EPVS]-1659875054536
========
while(moreIterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875054538
GPR[SPVAP]-1659875054538
GPR[EPVAP]-1659875055239
GPR[EPVS]-1659875055239
========
while(iterator.hasNext()){
previous=(ValueTick)iterator.next().getValue();
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875055240
GPR[SPVAP]-1659875055240
GPR[EPVAP]-1659875055944
GPR[EPVS]-1659875055944
========
while(iterator.hasNext()){
clone.rows.add((KeyedObjects)iterator.next().clone());
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875055946
GPR[SPVAP]-1659875055946
GPR[EPVAP]-1659875056643
GPR[EPVS]-1659875056643
========
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875056644
GPR[SPVAP]-1659875056644
GPR[EPVAP]-1659875057339
GPR[EPVS]-1659875057339
========
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875057340
GPR[SPVAP]-1659875057340
GPR[EPVAP]-1659875058061
GPR[EPVS]-1659875058061
========
clone.rows=new java.util.ArrayList(this.rows.size());
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875058062
GPR[SPVAP]-1659875058062
GPR[EPVAP]-1659875058756
GPR[EPVS]-1659875058756
========
while(iterator.hasNext()){
if((TimeSeries)iterator.next().getItemCount()>0){
RegularTimePeriod (TimeSeries)iterator.next().getTimePeriod(0)=(TimeSeries)iterator.next().getTimePeriod(0);
RegularTimePeriod (TimeSeries)iterator.next().getTimePeriod((TimeSeries)iterator.next().getItemCount()-1)=(TimeSeries)iterator.next().getTimePeriod((TimeSeries)iterator.next().getItemCount()-1);
}
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875058758
GPR[SPVAP]-1659875058758
GPR[EPVAP]-1659875059361
GPR[EPVS]-1659875059361
========
if(!this.data.equals(that.cornerTextItems)){
return false;
}
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875059362
GPR[SPVAP]-1659875059362
GPR[EPVAP]-1659875060078
GPR[EPVS]-1659875060078
========
while(iter.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875060080
GPR[SPVAP]-1659875060080
GPR[EPVAP]-1659875060784
GPR[EPVS]-1659875060784
========
(ImageWriter)iterator.next().getDefaultWriteParam().setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875060785
GPR[SPVAP]-1659875060785
GPR[EPVAP]-1659875061383
GPR[EPVS]-1659875061383
========
while(iterator.hasNext()){
if((MeterInterval)iterator.next().getBackgroundPaint()==null){
color=(MeterInterval)iterator.next().getOutlinePaint();
}
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875061385
GPR[SPVAP]-1659875061385
GPR[EPVAP]-1659875062095
GPR[EPVS]-1659875062095
========
while(iterator.hasNext()){
new LegendItem((MeterInterval)iterator.next().getLabel(),mi.getLabel(),null,null,new Rectangle2D.Double(-4.0,-4.0,8.0,8.0),(MeterInterval)iterator.next().getBackgroundPaint()).setDataset(getDataset());
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875062096
GPR[SPVAP]-1659875062096
GPR[EPVAP]-1659875062799
GPR[EPVS]-1659875062799
========
while(iterator.hasNext()){
new LegendItemCollection().add(new LegendItem((MeterInterval)iterator.next().getLabel(),mi.getLabel(),null,null,new Rectangle2D.Double(-4.0,-4.0,8.0,8.0),(MeterInterval)iterator.next().getBackgroundPaint()));
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875062800
GPR[SPVAP]-1659875062800
GPR[EPVAP]-1659875063507
GPR[EPVS]-1659875063507
========
while(iterator.hasNext()){
if((MeterInterval)iterator.next().getBackgroundPaint()==null){
color=(MeterInterval)iterator.next().getOutlinePaint();
}
new LegendItem((MeterInterval)iterator.next().getLabel(),mi.getLabel(),null,null,new Rectangle2D.Double(-4.0,-4.0,8.0,8.0),(MeterInterval)iterator.next().getBackgroundPaint()).setDataset(getDataset());
new LegendItemCollection().add(new LegendItem((MeterInterval)iterator.next().getLabel(),mi.getLabel(),null,null,new Rectangle2D.Double(-4.0,-4.0,8.0,8.0),(MeterInterval)iterator.next().getBackgroundPaint()));

KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875063508
GPR[SPVAP]-1659875063508
GPR[EPVAP]-1659875064218
GPR[EPVS]-1659875064218
========
while(iterator.hasNext()){
if(i>this.i){
paint=this.i;
}
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875064219
GPR[SPVAP]-1659875064219
GPR[EPVAP]-1659875064926
GPR[EPVS]-1659875064926
========
while(iterator.hasNext()){
if((XYDataset)iterator.next()!=null){
XYItemRenderer getRendererForDataset((XYDataset)iterator.next())=getRendererForDataset((XYDataset)iterator.next());
}
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875064927
GPR[SPVAP]-1659875064927
GPR[EPVAP]-1659875065535
GPR[EPVS]-1659875065535
========
while(iterator.hasNext()){
categoryIndex=i+1;
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875065536
GPR[SPVAP]-1659875065536
GPR[EPVAP]-1659875066234
GPR[EPVS]-1659875066234
========
while(iterator.hasNext()){
(PolarPlot)getChart().getPlot().getAxis().setAutoRange(true);
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875066238
GPR[SPVAP]-1659875066238
GPR[EPVAP]-1659875066843
GPR[EPVS]-1659875066843
========
if(this.i!=that.dotHeight){
return false;
}
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875066844
GPR[SPVAP]-1659875066844
GPR[EPVAP]-1659875067543
GPR[EPVS]-1659875067543
========
if(this.i!=that.minorTickCount){
return false;
}
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875067546
GPR[SPVAP]-1659875067546
GPR[EPVAP]-1659875068289
GPR[EPVS]-1659875068289
========
this.i=this.i;
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875068290
GPR[SPVAP]-1659875068290
GPR[EPVAP]-1659875069007
GPR[EPVS]-1659875069007
========
if(this.i!=that.precision){
return false;
}
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875069008
GPR[SPVAP]-1659875069008
GPR[EPVAP]-1659875069713
GPR[EPVS]-1659875069713
========
if(this.i!=that.scaleType){
return false;
}
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875069714
GPR[SPVAP]-1659875069714
GPR[EPVAP]-1659875070406
GPR[EPVS]-1659875070406
========
if(!ObjectUtilities.equal(this.data,that.backgroundAnnotations)){
return false;
}
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875070407
GPR[SPVAP]-1659875070407
GPR[EPVAP]-1659875071138
GPR[EPVS]-1659875071138
========
if(!ObjectUtilities.equal(this.data,that.foregroundAnnotations)){
return false;
}
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875071140
GPR[SPVAP]-1659875071140
GPR[EPVAP]-1659875071827
GPR[EPVS]-1659875071827
========
removeValue(getIndex(key));
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875071833
GPR[SPVAP]-1659875071833
GPR[EPVAP]-1659875073070
GPR[SPVATF]-1659875073070
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875074160
GPR[EPVS]-1659875074160
========
if(i<=this.data.size()){
this.data.add(position,ko);
}else {
this.data.add(item);
}
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875074163
GPR[SPVAP]-1659875074163
GPR[EPVAP]-1659875074884
GPR[EPVS]-1659875074884
========
invalidateRangeInfo();
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875074886
GPR[SPVAP]-1659875074886
GPR[EPVAP]-1659875075571
GPR[EPVS]-1659875075571
========
this.key=key;
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875075573
GPR[SPVAP]-1659875075573
GPR[EPVAP]-1659875076270
GPR[EPVS]-1659875076270
========
notifyListeners(new PlotChangeEvent(this));
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875076271
GPR[SPVAP]-1659875076272
GPR[EPVAP]-1659875076968
GPR[EPVS]-1659875076968
========
notifyListeners(new MarkerChangeEvent(this));
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875076969
GPR[SPVAP]-1659875076969
GPR[EPVAP]-1659875077681
GPR[EPVS]-1659875077681
========
new Object[4][0]=key.toString();
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875077686
GPR[SPVAP]-1659875077686
GPR[EPVAP]-1659875078374
GPR[EPVS]-1659875078374
========
i++;
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875078376
GPR[SPVAP]-1659875078376
GPR[EPVAP]-1659875079637
GPR[SPVATF]-1659875079637
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875080775
GPR[EPVS]-1659875080775
========
this.data=new ArrayList();
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

========
GPR[SPVS]-1659875080777
GPR[SPVAP]-1659875080777
GPR[EPVAP]-1659875081482
GPR[EPVS]-1659875081482
GPR[ESUN]-1659875081485
GPR[SSUN]-1659875081485
org.jfree.data.KeyedObjects,135
GPR[ESUN]-1659875081922
GPR[SSUN]-1659875081922
org.jfree.data.KeyedObjects2D,262
========
if(columnKey==null){
throw new IllegalArgumentException("Null \'rowKey\' argument.");
}

========
GPR[SPVS]-1659875083617
GPR[SPVAP]-1659875083617
GPR[EPVAP]-1659875087932
GPR[SPVATF]-1659875087932
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875089027
GPR[EPVS]-1659875089027
========
if(rowKey==null){
throw new IllegalArgumentException("Null \'columnKey\' argument.");
}

========
GPR[SPVS]-1659875089028
GPR[SPVAP]-1659875089028
GPR[EPVAP]-1659875090317
GPR[SPVATF]-1659875090317
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875091472
GPR[EPVS]-1659875091472
========
if(columnKey==null){
throw new IllegalArgumentException("Null \'columnKey\' argument.");
}

========
GPR[SPVS]-1659875091473
GPR[SPVAP]-1659875091473
GPR[EPVAP]-1659875092723
GPR[SPVATF]-1659875092723
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875093814
GPR[EPVS]-1659875093814
GPR[ESUN]-1659875093815
GPR[SSUN]-1659875093815
org.jfree.data.KeyedObjects2D,265
========
if(columnKey!=null){
throw new IllegalArgumentException("Null \'columnKey\' argument.");
}

========
GPR[SPVS]-1659875095712
GPR[SPVAP]-1659875095712
GPR[EPVAP]-1659875100079
GPR[SPVATF]-1659875100079
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875101212
GPR[EPVS]-1659875101212
GPR[ESUN]-1659875101213
GPR[SSUN]-1659875101213
org.jfree.data.KeyedObjects2D,269
========
row.setObject(columnKey,object);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875105028
GPR[SPVAP]-1659875105028
GPR[EPVAP]-1659875107218
GPR[EPVS]-1659875107218
========
if(this.columnKeys.indexOf(columnKey)<0){
this.columnKeys.add(columnKey);
}
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875107219
GPR[SPVAP]-1659875107219
GPR[EPVAP]-1659875110443
GPR[SPVATF]-1659875110443
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875111543
GPR[EPVS]-1659875111543
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(columnKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875111545
GPR[SPVAP]-1659875111545
GPR[EPVAP]-1659875112817
GPR[SPVATF]-1659875112817
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875113900
GPR[EPVS]-1659875113900
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowIndex,rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875113901
GPR[SPVAP]-1659875113901
GPR[EPVAP]-1659875115113
GPR[SPVATF]-1659875115113
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875116211
GPR[EPVS]-1659875116211
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(row);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875116212
GPR[SPVAP]-1659875116212
GPR[EPVAP]-1659875116897
GPR[EPVS]-1659875116897
========
if(this.rows.indexOf(columnKey)<0){
this.rows.add(columnKey);
}
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875116898
GPR[SPVAP]-1659875116899
GPR[EPVAP]-1659875118140
GPR[SPVATF]-1659875118140
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875119309
GPR[EPVS]-1659875119309
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(columnKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowIndex,rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875119310
GPR[SPVAP]-1659875119310
GPR[EPVAP]-1659875120547
GPR[SPVATF]-1659875120547
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875121664
GPR[EPVS]-1659875121664
========
if(this.rows.indexOf(columnKey)<0){
this.rows.add(columnKey);
}
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(columnKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875121665
GPR[SPVAP]-1659875121665
GPR[EPVAP]-1659875122875
GPR[SPVATF]-1659875122875
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875123962
GPR[EPVS]-1659875123962
========
if(this.rows.indexOf(columnKey)<0){
this.rows.add(columnKey);
}
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowIndex,rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875123963
GPR[SPVAP]-1659875123963
GPR[EPVAP]-1659875125180
GPR[SPVATF]-1659875125180
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875126278
GPR[EPVS]-1659875126278
========
if(this.rows.indexOf(columnKey)<0){
this.rows.add(columnKey);
}
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(columnKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowIndex,rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875126279
GPR[SPVAP]-1659875126279
GPR[EPVAP]-1659875127499
GPR[SPVATF]-1659875127499
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875128586
GPR[EPVS]-1659875128586
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(seriesIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875128588
GPR[SPVAP]-1659875128588
GPR[EPVAP]-1659875129272
GPR[EPVS]-1659875129272
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(position>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875129273
GPR[SPVAP]-1659875129273
GPR[EPVAP]-1659875129967
GPR[EPVS]-1659875129967
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(index>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875129968
GPR[SPVAP]-1659875129968
GPR[EPVAP]-1659875130665
GPR[EPVS]-1659875130665
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.setBorder(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875130668
GPR[SPVAP]-1659875130668
GPR[EPVAP]-1659875131377
GPR[EPVS]-1659875131377
========
KeyedObjects row;
setObject(null,rowKey,columnKey);
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875131379
GPR[SPVAP]-1659875131379
GPR[EPVAP]-1659875132644
GPR[SPVATF]-1659875132644
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875133747
GPR[EPVS]-1659875133747
========
if(true){
this.rowKeys.remove(rowIndex);
this.rows.remove(rowIndex);
}
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875133748
GPR[SPVAP]-1659875133748
GPR[EPVAP]-1659875134444
GPR[EPVS]-1659875134444
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(row>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875134445
GPR[SPVAP]-1659875134445
GPR[EPVAP]-1659875135133
GPR[EPVS]-1659875135133
========
if(this.columnKeys.indexOf(rowKey)<0){
throw new UnknownKeyException("Column key ("+rowKey);
}
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875135134
GPR[SPVAP]-1659875135134
GPR[EPVAP]-1659875136351
GPR[SPVATF]-1659875136351
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875137441
GPR[EPVS]-1659875137441
========
if(rowIndex>=0){
KeyedObjects (KeyedObjects)this.rows.get(rowIndex)=(KeyedObjects)this.rows.get(row);
return rowData.getObject(rowKey);
}else {
return null;
}
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875137442
GPR[SPVAP]-1659875137442
GPR[EPVAP]-1659875138031
GPR[EPVS]-1659875138031
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(autoIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875138032
GPR[SPVAP]-1659875138032
GPR[EPVAP]-1659875138718
GPR[EPVS]-1659875138719
========
KeyedObjects row;
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875138720
GPR[SPVAP]-1659875138720
GPR[EPVAP]-1659875139447
GPR[EPVS]-1659875139447
========
KeyedObjects row;
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875139448
GPR[SPVAP]-1659875139448
GPR[EPVAP]-1659875140162
GPR[EPVS]-1659875140162
========
KeyedObjects row;
clone.rows=new java.util.ArrayList(this.rows.size());
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875140163
GPR[SPVAP]-1659875140163
GPR[EPVAP]-1659875140864
GPR[EPVS]-1659875140864
========
KeyedObjects row;
int rowIndex=this.rowKeys.get(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875140866
GPR[SPVAP]-1659875140866
GPR[EPVAP]-1659875141560
GPR[EPVS]-1659875141560
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(tempWeek>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875141561
GPR[SPVAP]-1659875141561
GPR[EPVAP]-1659875142246
GPR[EPVS]-1659875142246
========
KeyedObjects row;
rowKeys.add(this.columnKey);
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875142248
GPR[SPVAP]-1659875142248
GPR[EPVAP]-1659875142941
GPR[EPVS]-1659875142941
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(object);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875142944
GPR[SPVAP]-1659875142944
GPR[EPVAP]-1659875144168
GPR[SPVATF]-1659875144168
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875145255
GPR[EPVS]-1659875145255
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(i>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875145263
GPR[SPVAP]-1659875145263
GPR[EPVAP]-1659875145955
GPR[EPVS]-1659875145955
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(k>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875145956
GPR[SPVAP]-1659875145956
GPR[EPVAP]-1659875146655
GPR[EPVS]-1659875146655
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=BULB_RADIUS){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875146657
GPR[SPVAP]-1659875146657
GPR[EPVAP]-1659875147338
GPR[EPVS]-1659875147338
========
Collections.sort(this.rows);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875147340
GPR[SPVAP]-1659875147340
GPR[EPVAP]-1659875148542
GPR[SPVATF]-1659875148542
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875149618
GPR[EPVS]-1659875149618
========
KeyedObjects row;
double rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875149620
GPR[SPVAP]-1659875149620
GPR[EPVAP]-1659875150318
GPR[EPVS]-1659875150318
========
KeyedObjects row;
if(!(this.rowKeys.contains(rowKey))){
throw new UnknownKeyException("Unrecognised columnKey: "+columnKey);
}
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875150320
GPR[SPVAP]-1659875150320
GPR[EPVAP]-1659875151580
GPR[SPVATF]-1659875151580
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875152671
GPR[EPVS]-1659875152671
========
new HashMap().put("key",rowKey);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875152673
GPR[SPVAP]-1659875152673
GPR[EPVAP]-1659875153366
GPR[EPVS]-1659875153366
========
new HashMap().put("bins",rowKeys);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875153367
GPR[SPVAP]-1659875153367
GPR[EPVAP]-1659875154058
GPR[EPVS]-1659875154058
========
new HashMap().put("values.length",new Integer(values.length));
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875154058
GPR[SPVAP]-1659875154058
GPR[EPVAP]-1659875154746
GPR[EPVS]-1659875154746
========
this.rows.add(new HashMap());
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875154747
GPR[SPVAP]-1659875154747
GPR[EPVAP]-1659875155451
GPR[EPVS]-1659875155451
========
fireSeriesChanged();
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875155454
GPR[SPVAP]-1659875155454
GPR[EPVAP]-1659875156167
GPR[EPVS]-1659875156167
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(subplotIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875156170
GPR[SPVAP]-1659875156170
GPR[EPVAP]-1659875156857
GPR[EPVS]-1659875156857
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(item>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875156859
GPR[SPVAP]-1659875156859
GPR[EPVAP]-1659875157553
GPR[EPVS]-1659875157553
========
if((KeyedValue)this.rows.get(rowIndex)!=null){
columnKey=item.getKey();
}
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875157555
GPR[SPVAP]-1659875157555
GPR[EPVAP]-1659875158238
GPR[EPVS]-1659875158238
========
if((BoxAndWhiskerItem)this.rows.get(rowIndex)!=null){
columnKeys=stats.getOutliers();
}
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875158239
GPR[SPVAP]-1659875158239
GPR[EPVAP]-1659875158927
GPR[EPVS]-1659875158927
========
if((KeyedObject)this.rows.get(rowIndex)!=null){
object=kobj.getObject();
}
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875158928
GPR[SPVAP]-1659875158928
GPR[EPVAP]-1659875159638
GPR[EPVS]-1659875159638
========
if((KeyedObject)this.rows.get(rowIndex)!=null){
columnKey=item.getKey();
}
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875159639
GPR[SPVAP]-1659875159639
GPR[EPVAP]-1659875160332
GPR[EPVS]-1659875160332
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(result>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875160333
GPR[SPVAP]-1659875160333
GPR[EPVAP]-1659875161082
GPR[EPVS]-1659875161082
========
KeyedObjects row;
if(rows.isEmpty()){
return null;
}
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875161083
GPR[SPVAP]-1659875161083
GPR[EPVAP]-1659875161767
GPR[EPVS]-1659875161767
========
notifyListeners(new PlotChangeEvent(this));
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875161768
GPR[SPVAP]-1659875161768
GPR[EPVAP]-1659875162462
GPR[EPVS]-1659875162462
========
this.notifyListeners(new PlotChangeEvent(this));
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875162463
GPR[SPVAP]-1659875162463
GPR[EPVAP]-1659875163169
GPR[EPVS]-1659875163169
========
if(columnKey!=null){
columnKey=group;
}
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875163171
GPR[SPVAP]-1659875163171
GPR[EPVAP]-1659875163873
GPR[EPVS]-1659875163873
========
fireChartChanged();
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875163876
GPR[SPVAP]-1659875163876
GPR[EPVAP]-1659875164561
GPR[EPVS]-1659875164561
========
KeyedObjects row;
boolean rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875164563
GPR[SPVAP]-1659875164563
GPR[EPVAP]-1659875165255
GPR[EPVS]-1659875165255
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(count>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875165257
GPR[SPVAP]-1659875165257
GPR[EPVAP]-1659875165944
GPR[EPVS]-1659875165944
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
notifyListeners(new DatasetChangeEvent(this,this));
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875165947
GPR[SPVAP]-1659875165947
GPR[EPVAP]-1659875166635
GPR[EPVS]-1659875166635
========
(Block)rowKeys.get(0).setBounds(new Rectangle2D.Double(0.0,0.0,s.width,s.height));
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875166637
GPR[SPVAP]-1659875166637
GPR[EPVAP]-1659875167231
GPR[EPVS]-1659875167231
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(weight>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875167232
GPR[SPVAP]-1659875167232
GPR[EPVAP]-1659875167928
GPR[EPVS]-1659875167928
========
configureRangeAxes();
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875167929
GPR[SPVAP]-1659875167929
GPR[EPVAP]-1659875168620
GPR[EPVS]-1659875168620
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875168622
GPR[SPVAP]-1659875168622
GPR[EPVAP]-1659875169310
GPR[EPVS]-1659875169310
========
this.rowKeys.remove(rowKey);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875169313
GPR[SPVAP]-1659875169313
GPR[EPVAP]-1659875170547
GPR[SPVATF]-1659875170547
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875171644
GPR[EPVS]-1659875171644
========
this.rowKeys.remove(rowKey);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(index>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875171645
GPR[SPVAP]-1659875171645
GPR[EPVAP]-1659875172332
GPR[EPVS]-1659875172332
========
(TaskSeries)this.rows.get(rowIndex).removeChangeListener(this);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875172334
GPR[SPVAP]-1659875172334
GPR[EPVAP]-1659875172929
GPR[EPVS]-1659875172929
========
this.rows.remove(rowIndex);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875172930
GPR[SPVAP]-1659875172930
GPR[EPVAP]-1659875173612
GPR[EPVS]-1659875173612
========
fireDatasetChanged();
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875173614
GPR[SPVAP]-1659875173614
GPR[EPVAP]-1659875174313
GPR[EPVS]-1659875174313
========
(MatrixSeries)this.rows.get(rowIndex).removeChangeListener(this);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875174314
GPR[SPVAP]-1659875174314
GPR[EPVAP]-1659875174897
GPR[EPVS]-1659875174897
========
this.rows.remove(rowIndex);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(seriesIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875174898
GPR[SPVAP]-1659875174898
GPR[EPVAP]-1659875175614
GPR[EPVS]-1659875175614
========
fireDatasetChanged();
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(seriesIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875175615
GPR[SPVAP]-1659875175615
GPR[EPVAP]-1659875176299
GPR[EPVS]-1659875176299
========
this.rows.remove(rowIndex);
fireDatasetChanged();
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875176300
GPR[SPVAP]-1659875176300
GPR[EPVAP]-1659875176982
GPR[EPVS]-1659875176982
========
this.rows.remove(rowIndex);
fireDatasetChanged();
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(seriesIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875176983
GPR[SPVAP]-1659875176983
GPR[EPVAP]-1659875177666
GPR[EPVS]-1659875177666
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875177668
GPR[SPVAP]-1659875177668
GPR[EPVAP]-1659875178253
GPR[EPVS]-1659875178253
========
this.rows.remove(rowIndex);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875178254
GPR[SPVAP]-1659875178254
GPR[EPVAP]-1659875178941
GPR[EPVS]-1659875178941
========
fireDatasetChanged();
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875178942
GPR[SPVAP]-1659875178942
GPR[EPVAP]-1659875179629
GPR[EPVS]-1659875179629
========
this.rows.remove(rowIndex);
fireDatasetChanged();
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875179630
GPR[SPVAP]-1659875179630
GPR[EPVAP]-1659875180318
GPR[EPVS]-1659875180318
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rangeIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875180320
GPR[SPVAP]-1659875180320
GPR[EPVAP]-1659875181009
GPR[EPVS]-1659875181009
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(r>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875181010
GPR[SPVAP]-1659875181010
GPR[EPVAP]-1659875181713
GPR[EPVS]-1659875181713
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875181715
GPR[SPVAP]-1659875181715
GPR[EPVAP]-1659875182301
GPR[EPVS]-1659875182301
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
this.rows.remove(rowIndex);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875182302
GPR[SPVAP]-1659875182302
GPR[EPVAP]-1659875182908
GPR[EPVS]-1659875182908
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
fireDatasetChanged();
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875182909
GPR[SPVAP]-1659875182909
GPR[EPVAP]-1659875183497
GPR[EPVS]-1659875183497
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
this.rows.remove(rowIndex);
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875183498
GPR[SPVAP]-1659875183498
GPR[EPVAP]-1659875184085
GPR[EPVS]-1659875184085
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
fireDatasetChanged();
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875184086
GPR[SPVAP]-1659875184086
GPR[EPVAP]-1659875184680
GPR[EPVS]-1659875184680
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
this.rows.remove(rowIndex);
fireDatasetChanged();
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875184681
GPR[SPVAP]-1659875184681
GPR[EPVAP]-1659875185278
GPR[EPVS]-1659875185278
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
this.rows.remove(rowIndex);
fireDatasetChanged();
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875185279
GPR[SPVAP]-1659875185279
GPR[EPVAP]-1659875186825
GPR[EPVS]-1659875186825
========
fireChartChanged();
KeyedObjects row;
int rowIndex=this.rowKeys.get(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875186826
GPR[SPVAP]-1659875186826
GPR[EPVAP]-1659875187548
GPR[EPVS]-1659875187548
========
KeyedObjects row;
long rowIndex=this.rowKeys.indexOf(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875187550
GPR[SPVAP]-1659875187550
GPR[EPVAP]-1659875188287
GPR[EPVS]-1659875188287
========
KeyedObjects row;
int rowIndex=this.rowKeys.indexOf(rowKey);
if(seriesIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
notifyListeners(new DatasetChangeEvent(this,this));
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875188289
GPR[SPVAP]-1659875188289
GPR[EPVAP]-1659875189007
GPR[EPVS]-1659875189007
GPR[ESUN]-1659875189009
GPR[SSUN]-1659875189009
org.jfree.data.KeyedObjects2D,270
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowIndex,rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875192534
GPR[SPVAP]-1659875192534
GPR[EPVAP]-1659875196809
GPR[SPVATF]-1659875196809
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875197886
GPR[EPVS]-1659875197886
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(row);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875197887
GPR[SPVAP]-1659875197887
GPR[EPVAP]-1659875198595
GPR[EPVS]-1659875198595
========
if(seriesIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875198596
GPR[SPVAP]-1659875198596
GPR[EPVAP]-1659875199306
GPR[EPVS]-1659875199306
========
if(baseIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875199308
GPR[SPVAP]-1659875199308
GPR[EPVAP]-1659875200000
GPR[EPVS]-1659875200000
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
baseIndex=0;
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875200001
GPR[SPVAP]-1659875200001
GPR[EPVAP]-1659875200700
GPR[EPVS]-1659875200700
========
if(rowIndex>0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875200702
GPR[SPVAP]-1659875200702
GPR[EPVAP]-1659875201934
GPR[SPVATF]-1659875201934
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875203006
GPR[EPVS]-1659875203006
========
if(n>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875203007
GPR[SPVAP]-1659875203007
GPR[EPVAP]-1659875203698
GPR[EPVS]-1659875203698
========
if(n>0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875203699
GPR[SPVAP]-1659875203699
GPR[EPVAP]-1659875204414
GPR[EPVS]-1659875204414
========
if(position>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875204416
GPR[SPVAP]-1659875204416
GPR[EPVAP]-1659875205114
GPR[EPVS]-1659875205114
========
if(index>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875205115
GPR[SPVAP]-1659875205115
GPR[EPVAP]-1659875205845
GPR[EPVS]-1659875205845
========
if(autoIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875205847
GPR[SPVAP]-1659875205847
GPR[EPVAP]-1659875206535
GPR[EPVS]-1659875206535
========
if(tempWeek>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875206536
GPR[SPVAP]-1659875206536
GPR[EPVAP]-1659875207217
GPR[EPVS]-1659875207217
========
if(rowIndex>=0){
this.week=1;
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875207218
GPR[SPVAP]-1659875207218
GPR[EPVAP]-1659875207922
GPR[EPVS]-1659875207922
========
if(keyIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875207923
GPR[SPVAP]-1659875207923
GPR[EPVAP]-1659875208619
GPR[EPVS]-1659875208619
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(new KeyedObject(rowKey,object));
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875208620
GPR[SPVAP]-1659875208620
GPR[EPVAP]-1659875209883
GPR[SPVATF]-1659875209883
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875210971
GPR[EPVS]-1659875210971
========
if(keyIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(new KeyedObject(rowKey,object));
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875210972
GPR[SPVAP]-1659875210972
GPR[EPVAP]-1659875211656
GPR[EPVS]-1659875211656
========
if(columnIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875211657
GPR[SPVAP]-1659875211657
GPR[EPVAP]-1659875212338
GPR[EPVS]-1659875212338
========
if(high>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875212340
GPR[SPVAP]-1659875212340
GPR[EPVAP]-1659875213046
GPR[EPVS]-1659875213046
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(object);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875213047
GPR[SPVAP]-1659875213047
GPR[EPVAP]-1659875214253
GPR[SPVATF]-1659875214253
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875215329
GPR[EPVS]-1659875215329
========
if(mapIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875215332
GPR[SPVAP]-1659875215332
GPR[EPVAP]-1659875216066
GPR[EPVS]-1659875216066
========
if(i>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875216068
GPR[SPVAP]-1659875216068
GPR[EPVAP]-1659875216783
GPR[EPVS]-1659875216783
========
if(row>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875216784
GPR[SPVAP]-1659875216784
GPR[EPVAP]-1659875217470
GPR[EPVS]-1659875217470
========
Collections.sort(this.rowKeys);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875217471
GPR[SPVAP]-1659875217471
GPR[EPVAP]-1659875218740
GPR[SPVATF]-1659875218740
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875219826
GPR[EPVS]-1659875219826
========
if(k>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875219828
GPR[SPVAP]-1659875219828
GPR[EPVAP]-1659875220513
GPR[EPVS]-1659875220513
========
if(rowIndex>=BULB_RADIUS){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875220514
GPR[SPVAP]-1659875220514
GPR[EPVAP]-1659875221208
GPR[EPVS]-1659875221208
========
if(count>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875221210
GPR[SPVAP]-1659875221210
GPR[EPVAP]-1659875221906
GPR[EPVS]-1659875221906
========
fireSeriesChanged();
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875221908
GPR[SPVAP]-1659875221908
GPR[EPVAP]-1659875222604
GPR[EPVS]-1659875222604
========
fireChartChanged();
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875222606
GPR[SPVAP]-1659875222606
GPR[EPVAP]-1659875223315
GPR[EPVS]-1659875223315
========
fireDatasetChanged();
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875223316
GPR[SPVAP]-1659875223316
GPR[EPVAP]-1659875223998
GPR[EPVS]-1659875223998
========
if(!(this.rowKeys.contains(columnKey))){
throw new UnknownKeyException("Unrecognised columnKey: "+columnKey);
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875223999
GPR[SPVAP]-1659875223999
GPR[EPVAP]-1659875225231
GPR[SPVATF]-1659875225231
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875226328
GPR[EPVS]-1659875226328
========
if(!(this.rowKeys.contains(columnKey))){
throw new UnknownKeyException("Unrecognised columnKey: "+columnKey);
}
if(row>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875226329
GPR[SPVAP]-1659875226329
GPR[EPVAP]-1659875227023
GPR[EPVS]-1659875227023
========
if(subplotIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875227024
GPR[SPVAP]-1659875227024
GPR[EPVAP]-1659875227726
GPR[EPVS]-1659875227726
========
if(item>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875227729
GPR[SPVAP]-1659875227729
GPR[EPVAP]-1659875228431
GPR[EPVS]-1659875228431
========
notifyListeners(new PlotChangeEvent(this));
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875228433
GPR[SPVAP]-1659875228433
GPR[EPVAP]-1659875229125
GPR[EPVS]-1659875229125
========
this.notifyListeners(new PlotChangeEvent(this));
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875229127
GPR[SPVAP]-1659875229127
GPR[EPVAP]-1659875229812
GPR[EPVS]-1659875229812
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.setBorder(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875229814
GPR[SPVAP]-1659875229814
GPR[EPVAP]-1659875230498
GPR[EPVS]-1659875230498
========
this.rowKeys=new java.util.ArrayList();
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875230499
GPR[SPVAP]-1659875230499
GPR[EPVAP]-1659875231722
GPR[SPVATF]-1659875231722
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875232830
GPR[EPVS]-1659875232830
========
if(rows.isEmpty()){
return null;
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875232832
GPR[SPVAP]-1659875232832
GPR[EPVAP]-1659875234278
GPR[EPVS]-1659875234278
========
if(columnKey!=null){
columnKey=group;
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875234280
GPR[SPVAP]-1659875234280
GPR[EPVAP]-1659875235002
GPR[EPVS]-1659875235002
========
fireChartChanged();
if(index>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875235007
GPR[SPVAP]-1659875235007
GPR[EPVAP]-1659875236912
GPR[EPVS]-1659875236912
========
if(binIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875236913
GPR[SPVAP]-1659875236913
GPR[EPVAP]-1659875237619
GPR[EPVS]-1659875237619
========
(HistogramBin)rowKeys.get(rowIndex).incrementCount();
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875237620
GPR[SPVAP]-1659875237620
GPR[EPVAP]-1659875238205
GPR[EPVS]-1659875238205
========
if(fieldIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875238206
GPR[SPVAP]-1659875238206
GPR[EPVAP]-1659875238901
GPR[EPVS]-1659875238901
========
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875238905
GPR[SPVAP]-1659875238905
GPR[EPVAP]-1659875239596
GPR[EPVS]-1659875239596
========
this.rowKeys.remove(rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875239599
GPR[SPVAP]-1659875239599
GPR[EPVAP]-1659875240844
GPR[SPVATF]-1659875240844
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875241942
GPR[EPVS]-1659875241942
========
this.rowKeys.remove(rowKey);
if(index>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875241943
GPR[SPVAP]-1659875241943
GPR[EPVAP]-1659875242646
GPR[EPVS]-1659875242646
========
(TaskSeries)this.rows.get(rowIndex).removeChangeListener(this);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875242648
GPR[SPVAP]-1659875242648
GPR[EPVAP]-1659875243242
GPR[EPVS]-1659875243242
========
this.rows.remove(rowIndex);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875243244
GPR[SPVAP]-1659875243244
GPR[EPVAP]-1659875244467
GPR[SPVATF]-1659875244467
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875245556
GPR[EPVS]-1659875245556
========
this.rows.remove(rowIndex);
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875245557
GPR[SPVAP]-1659875245557
GPR[EPVAP]-1659875246261
GPR[EPVS]-1659875246261
========
fireDatasetChanged();
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875246262
GPR[SPVAP]-1659875246262
GPR[EPVAP]-1659875246946
GPR[EPVS]-1659875246946
========
this.rows.remove(rowIndex);
fireDatasetChanged();
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875246948
GPR[SPVAP]-1659875246948
GPR[EPVAP]-1659875247647
GPR[EPVS]-1659875247647
========
this.rows.remove(rowIndex);
fireDatasetChanged();
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875247648
GPR[SPVAP]-1659875247648
GPR[EPVAP]-1659875248338
GPR[EPVS]-1659875248338
========
(MatrixSeries)this.rows.get(rowIndex).removeChangeListener(this);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875248339
GPR[SPVAP]-1659875248339
GPR[EPVAP]-1659875248930
GPR[EPVS]-1659875248931
========
this.rows.remove(rowIndex);
if(seriesIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875248932
GPR[SPVAP]-1659875248932
GPR[EPVAP]-1659875249629
GPR[EPVS]-1659875249629
========
fireDatasetChanged();
if(seriesIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875249630
GPR[SPVAP]-1659875249630
GPR[EPVAP]-1659875250323
GPR[EPVS]-1659875250323
========
this.rows.remove(rowIndex);
fireDatasetChanged();
if(seriesIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875250325
GPR[SPVAP]-1659875250325
GPR[EPVAP]-1659875251023
GPR[EPVS]-1659875251023
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875251025
GPR[SPVAP]-1659875251025
GPR[EPVAP]-1659875251617
GPR[EPVS]-1659875251617
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875251619
GPR[SPVAP]-1659875251619
GPR[EPVAP]-1659875252242
GPR[EPVS]-1659875252242
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
this.rows.remove(rowIndex);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875252243
GPR[SPVAP]-1659875252243
GPR[EPVAP]-1659875252831
GPR[EPVS]-1659875252831
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
fireDatasetChanged();
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875252832
GPR[SPVAP]-1659875252832
GPR[EPVAP]-1659875253430
GPR[EPVS]-1659875253430
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
this.rows.remove(rowIndex);
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875253431
GPR[SPVAP]-1659875253431
GPR[EPVAP]-1659875254023
GPR[EPVS]-1659875254023
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
fireDatasetChanged();
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875254024
GPR[SPVAP]-1659875254024
GPR[EPVAP]-1659875254619
GPR[EPVS]-1659875254619
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
this.rows.remove(rowIndex);
fireDatasetChanged();
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875254621
GPR[SPVAP]-1659875254621
GPR[EPVAP]-1659875255209
GPR[EPVS]-1659875255209
========
(XYSeries)this.rows.get(rowIndex).removeChangeListener(this);
this.rows.remove(rowIndex);
fireDatasetChanged();
if(series>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875255210
GPR[SPVAP]-1659875255210
GPR[EPVAP]-1659875255809
GPR[EPVS]-1659875255809
========
if(rowKey==null){
throw new IllegalArgumentException("Null \'rowKey\' argument.");
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875255810
GPR[SPVAP]-1659875255810
GPR[EPVAP]-1659875257051
GPR[SPVATF]-1659875257051
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875258134
GPR[EPVS]-1659875258134
========
if(rowKey==null){
throw new IllegalArgumentException("Null \'columnKey\' argument.");
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875258135
GPR[SPVAP]-1659875258135
GPR[EPVAP]-1659875259344
GPR[SPVATF]-1659875259344
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875260458
GPR[EPVS]-1659875260458
========
if(rowKey==null){
throw new IllegalArgumentException("Null \'rowKey\' argument.");
}
if(row>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875260459
GPR[SPVAP]-1659875260459
GPR[EPVAP]-1659875261145
GPR[EPVS]-1659875261145
========
if(rowKey==null){
throw new IllegalArgumentException("Null \'columnKey\' argument.");
}
if(row>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875261146
GPR[SPVAP]-1659875261146
GPR[EPVAP]-1659875261847
GPR[EPVS]-1659875261847
========
if(rowKey==null){
throw new IllegalArgumentException("Null \'rowKey\' argument.");
}
if(rowKey==null){
throw new IllegalArgumentException("Null \'columnKey\' argument.");
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875261848
GPR[SPVAP]-1659875261848
GPR[EPVAP]-1659875263082
GPR[SPVATF]-1659875263082
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875264158
GPR[EPVS]-1659875264158
========
if(rowKey==null){
throw new IllegalArgumentException("Null \'rowKey\' argument.");
}
if(rowKey==null){
throw new IllegalArgumentException("Null \'columnKey\' argument.");
}
if(row>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875264159
GPR[SPVAP]-1659875264159
GPR[EPVAP]-1659875264861
GPR[EPVS]-1659875264861
========
if(r>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}

========
GPR[SPVS]-1659875264862
GPR[SPVAP]-1659875264862
GPR[EPVAP]-1659875265550
GPR[EPVS]-1659875265550
GPR[ESUN]-1659875265553
GPR[SSUN]-1659875265553
org.jfree.data.KeyedObjects2D,274
GPR[ESUN]-1659875266022
GPR[SSUN]-1659875266022
org.jfree.data.KeyedObjects2D,275
GPR[ESUN]-1659875266306
GPR[SSUN]-1659875266306
org.jfree.data.KeyedObjects2D,276
GPR[ESUN]-1659875266592
GPR[SSUN]-1659875266592
org.jfree.data.KeyedObjects2D,278
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(rowKey);

========
GPR[SPVS]-1659875270129
GPR[SPVAP]-1659875270129
GPR[EPVAP]-1659875274405
GPR[SPVATF]-1659875274405
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875275489
GPR[EPVS]-1659875275489
========
if(columnIndex<0){
this.columnKeys.add(columnKey);
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875275490
GPR[SPVAP]-1659875275490
GPR[EPVAP]-1659875276176
GPR[EPVS]-1659875276176
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowIndex,rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875276178
GPR[SPVAP]-1659875276178
GPR[EPVAP]-1659875277448
GPR[SPVATF]-1659875277448
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875278539
GPR[EPVS]-1659875278539
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(row);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875278540
GPR[SPVAP]-1659875278540
GPR[EPVAP]-1659875279227
GPR[EPVS]-1659875279227
========
if(seriesIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875279229
GPR[SPVAP]-1659875279229
GPR[EPVAP]-1659875279955
GPR[EPVS]-1659875279955
========
if(rowIndex>0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875279957
GPR[SPVAP]-1659875279957
GPR[EPVAP]-1659875281192
GPR[SPVATF]-1659875281192
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875282279
GPR[EPVS]-1659875282279
========
if(n>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875282281
GPR[SPVAP]-1659875282281
GPR[EPVAP]-1659875282984
GPR[EPVS]-1659875282984
========
if(n>0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875282985
GPR[SPVAP]-1659875282985
GPR[EPVAP]-1659875283686
GPR[EPVS]-1659875283686
========
if(columnIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875283687
GPR[SPVAP]-1659875283687
GPR[EPVAP]-1659875284371
GPR[EPVS]-1659875284371
========
if(position>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875284372
GPR[SPVAP]-1659875284372
GPR[EPVAP]-1659875285078
GPR[EPVS]-1659875285078
========
if(index>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875285079
GPR[SPVAP]-1659875285079
GPR[EPVAP]-1659875285767
GPR[EPVS]-1659875285767
========
if(row>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875285768
GPR[SPVAP]-1659875285768
GPR[EPVAP]-1659875286458
GPR[EPVS]-1659875286458
========
if(columnIndex<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875286459
GPR[SPVAP]-1659875286459
GPR[EPVAP]-1659875287157
GPR[EPVS]-1659875287157
========
if(rowIndex>=0){
KeyedObjects row=(KeyedObjects)this.rows.get(row);
return rowData.getObject(columnKey);
}else {
return null;
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875287158
GPR[SPVAP]-1659875287158
GPR[EPVAP]-1659875287846
GPR[EPVS]-1659875287846
========
if(keyIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875287847
GPR[SPVAP]-1659875287847
GPR[EPVAP]-1659875288549
GPR[EPVS]-1659875288549
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(new KeyedObject(rowKey,object));
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875288550
GPR[SPVAP]-1659875288550
GPR[EPVAP]-1659875289809
GPR[SPVATF]-1659875289809
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875290909
GPR[EPVS]-1659875290909
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875290912
GPR[SPVAP]-1659875290912
GPR[EPVAP]-1659875291608
GPR[EPVS]-1659875291608
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875291609
GPR[SPVAP]-1659875291609
GPR[EPVAP]-1659875292313
GPR[EPVS]-1659875292313
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
clone.rows=new java.util.ArrayList(this.rows.size());
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875292314
GPR[SPVAP]-1659875292314
GPR[EPVAP]-1659875293024
GPR[EPVS]-1659875293024
========
if(autoIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875293025
GPR[SPVAP]-1659875293025
GPR[EPVAP]-1659875293720
GPR[EPVS]-1659875293720
========
if(tempWeek>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875293722
GPR[SPVAP]-1659875293722
GPR[EPVAP]-1659875294422
GPR[EPVS]-1659875294422
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.get(columnKey);

========
GPR[SPVS]-1659875294423
GPR[SPVAP]-1659875294423
GPR[EPVAP]-1659875295151
GPR[EPVS]-1659875295151
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
this.rows.add(new NumberTick(new Double(180.0),"180",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875295153
GPR[SPVAP]-1659875295153
GPR[EPVAP]-1659875295887
GPR[EPVS]-1659875295887
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
this.rows.add(new NumberTick(new Double(225.0),"225",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875295888
GPR[SPVAP]-1659875295888
GPR[EPVAP]-1659875296623
GPR[EPVS]-1659875296623
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
this.rows.add(new NumberTick(new Double(270.0),"270",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875296624
GPR[SPVAP]-1659875296624
GPR[EPVAP]-1659875297321
GPR[EPVS]-1659875297321
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
this.rows.add(new NumberTick(new Double(315.0),"315",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875297322
GPR[SPVAP]-1659875297322
GPR[EPVAP]-1659875298017
GPR[EPVS]-1659875298017
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
rows.add(this.rowKey);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875298018
GPR[SPVAP]-1659875298018
GPR[EPVAP]-1659875298709
GPR[EPVS]-1659875298709
========
if((TaskSeries)this.columnKeys.get(rowIndex).get(columnKey.toString())!=null){
columnIndex=task.getSubtaskCount();
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875298711
GPR[SPVAP]-1659875298711
GPR[EPVAP]-1659875299419
GPR[EPVS]-1659875299419
========
if(!(this.columnKeys.contains(columnKey))){
throw new UnknownKeyException("Unrecognised columnKey: "+columnKey);
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875299422
GPR[SPVAP]-1659875299422
GPR[EPVAP]-1659875300633
GPR[SPVATF]-1659875300633
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875301731
GPR[EPVS]-1659875301731
========
if(!(this.columnKeys.contains(columnKey))){
throw new UnknownKeyException("Unrecognised columnKey: "+columnKey);
}
if(row>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875301732
GPR[SPVAP]-1659875301732
GPR[EPVAP]-1659875302412
GPR[EPVS]-1659875302412
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(object);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875302414
GPR[SPVAP]-1659875302414
GPR[EPVAP]-1659875303628
GPR[SPVATF]-1659875303628
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875304707
GPR[EPVS]-1659875304707
========
if(mapIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875304709
GPR[SPVAP]-1659875304709
GPR[EPVAP]-1659875305395
GPR[EPVS]-1659875305395
========
if(k>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875305396
GPR[SPVAP]-1659875305396
GPR[EPVAP]-1659875306087
GPR[EPVS]-1659875306087
========
if(rowIndex>=BULB_RADIUS){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875306088
GPR[SPVAP]-1659875306088
GPR[EPVAP]-1659875306786
GPR[EPVS]-1659875306786
========
if(i>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875306787
GPR[SPVAP]-1659875306788
GPR[EPVAP]-1659875307495
GPR[EPVS]-1659875307495
========
Collections.sort(this.columnKeys);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875307498
GPR[SPVAP]-1659875307498
GPR[EPVAP]-1659875308730
GPR[SPVATF]-1659875308730
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875309814
GPR[EPVS]-1659875309814
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
double columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875309816
GPR[SPVAP]-1659875309816
GPR[EPVAP]-1659875311019
GPR[SPVATF]-1659875311019
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875312101
GPR[EPVS]-1659875312101
========
if(count>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875312102
GPR[SPVAP]-1659875312102
GPR[EPVAP]-1659875312796
GPR[EPVS]-1659875312796
========
if(binIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875312798
GPR[SPVAP]-1659875312798
GPR[EPVAP]-1659875313490
GPR[EPVS]-1659875313490
========
new HashMap().put("key",rowKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875313491
GPR[SPVAP]-1659875313491
GPR[EPVAP]-1659875314192
GPR[EPVS]-1659875314192
========
new HashMap().put("bins",rowKeys);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875314193
GPR[SPVAP]-1659875314193
GPR[EPVAP]-1659875314891
GPR[EPVS]-1659875314891
========
new HashMap().put("values.length",new Integer(values.length));
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875314892
GPR[SPVAP]-1659875314892
GPR[EPVAP]-1659875315587
GPR[EPVS]-1659875315587
========
this.columnKeys.add(new HashMap());
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875315588
GPR[SPVAP]-1659875315588
GPR[EPVAP]-1659875316280
GPR[EPVS]-1659875316280
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
rowData.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875316281
GPR[SPVAP]-1659875316281
GPR[EPVAP]-1659875316962
GPR[EPVS]-1659875316962
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
if(columnIndex<0){
throw new UnknownKeyException("Column key ("+columnKey);
}
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875316963
GPR[SPVAP]-1659875316963
GPR[EPVAP]-1659875317658
GPR[EPVS]-1659875317658
========
this.columnKeys.remove(columnKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875317659
GPR[SPVAP]-1659875317659
GPR[EPVAP]-1659875318905
GPR[SPVATF]-1659875318905
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875320028
GPR[EPVS]-1659875320028
========
Calendar.getInstance().add(getCalendarField(this.rowIndex),this.rowIndex);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875320029
GPR[SPVAP]-1659875320029
GPR[EPVAP]-1659875320720
GPR[EPVS]-1659875320720
========
if(!Arrays.equals((double[][])this.rows.get(rowIndex)[0],(double[][])that.seriesList.get(rowIndex)[0])){
return false;
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875320721
GPR[SPVAP]-1659875320721
GPR[EPVAP]-1659875321407
GPR[EPVS]-1659875321407
========
if(!Arrays.equals((double[][])this.rows.get(rowIndex)[1],(double[][])that.seriesList.get(rowIndex)[1])){
return false;
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875321408
GPR[SPVAP]-1659875321408
GPR[EPVAP]-1659875322116
GPR[EPVS]-1659875322116
========
if(!Arrays.equals((double[][])this.rows.get(rowIndex)[0],(double[][])that.seriesList.get(rowIndex)[0])){
return false;
}
if(!Arrays.equals((double[][])this.rows.get(rowIndex)[1],(double[][])that.seriesList.get(rowIndex)[1])){
return false;
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875322117
GPR[SPVAP]-1659875322117
GPR[EPVAP]-1659875322803
GPR[EPVS]-1659875322803
========
columnIndex=lookupSectionOutlineStroke(columnKey);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875322805
GPR[SPVAP]-1659875322805
GPR[EPVAP]-1659875323511
GPR[EPVS]-1659875323511
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
removeAgedItems(false);
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875323512
GPR[SPVAP]-1659875323512
GPR[EPVAP]-1659875324212
GPR[EPVS]-1659875324212
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
fireSeriesChanged();
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875324213
GPR[SPVAP]-1659875324213
GPR[EPVAP]-1659875324918
GPR[EPVS]-1659875324918
========
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
removeAgedItems(false);
fireSeriesChanged();

this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875324919
GPR[SPVAP]-1659875324919
GPR[EPVAP]-1659875325622
GPR[EPVS]-1659875325622
========
if(fieldIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875325625
GPR[SPVAP]-1659875325625
GPR[EPVAP]-1659875326331
GPR[EPVS]-1659875326331
========
Collections.sort(this.rows);
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875326332
GPR[SPVAP]-1659875326332
GPR[EPVAP]-1659875327581
GPR[SPVATF]-1659875327581
TESTING : org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex_purify_1
GPR[EPVATF]-1659875328709
GPR[EPVS]-1659875328709
========
fireChartChanged();
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875328713
GPR[SPVAP]-1659875328713
GPR[EPVAP]-1659875329403
GPR[EPVS]-1659875329403
========
fireDatasetChanged();
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875329405
GPR[SPVAP]-1659875329405
GPR[EPVAP]-1659875330090
GPR[EPVS]-1659875330090
========
if(item>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875330930
GPR[SPVAP]-1659875330930
GPR[EPVAP]-1659875331645
GPR[EPVS]-1659875331645
========
if(subplotIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875331647
GPR[SPVAP]-1659875331647
GPR[EPVAP]-1659875332333
GPR[EPVS]-1659875332333
========
if(rowKeys!=null){
columnIndex=tooltips.size();
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875332335
GPR[SPVAP]-1659875332335
GPR[EPVAP]-1659875333046
GPR[EPVS]-1659875333046
========
if(rowKeys!=null){
columnIndex=urls.size();
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875333047
GPR[SPVAP]-1659875333047
GPR[EPVAP]-1659875333749
GPR[EPVS]-1659875333749
========
if((KeyedValue)this.columnKeys.get(rowIndex)!=null){
columnKey=item.getKey();
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875333750
GPR[SPVAP]-1659875333750
GPR[EPVAP]-1659875334436
GPR[EPVS]-1659875334436
========
if((BoxAndWhiskerItem)this.columnKeys.get(rowIndex)!=null){
rows=stats.getOutliers();
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875334437
GPR[SPVAP]-1659875334437
GPR[EPVAP]-1659875335127
GPR[EPVS]-1659875335127
========
if((KeyedObject)this.columnKeys.get(rowIndex)!=null){
object=kobj.getObject();
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875335128
GPR[SPVAP]-1659875335128
GPR[EPVAP]-1659875335829
GPR[EPVS]-1659875335829
========
if((KeyedObject)this.columnKeys.get(rowIndex)!=null){
columnKey=item.getKey();
}
if(rowIndex>=0){
row=(KeyedObjects)this.rows.get(rowIndex);
}else {
this.rowKeys.add(rowKey);
row=new KeyedObjects();
this.rows.add(row);
}
row.setObject(columnKey,object);
int columnIndex=this.columnKeys.indexOf(columnKey);

========
GPR[SPVS]-1659875335830
GPR[SPVAP]-1659875335830
GPR[EPVAP]-1659875336527
GPR[EPVS]-1659875336527
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f1a6613a478, pid=3302289, tid=139751687927552
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 5247 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007f1a6613a478 [0x00007f1a6613a2c0+0x1b8]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/chart/chart_22_buggy/hs_err_pid3302289.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Chart/22 results at /experiment_home///results/SimFix/Chart/22/seed_260/
\n\nNode: host-43\n
\n\nDate: Sun 07 Aug 2022 05:28:56 AM PDT\n
Removing checked out dir script/workingdir/SimFix/chart/chart_22_buggy
GPR[SSLE]-1659875336568
GPR[ESLE]-1659875396573
