Sleep 1m start
GPR[SSLI]-1659932087894
GPR[ESLI]-1659932147900
Running SimFix Math 75b
Timezone: America/Los_Angeles
Seed 262
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Math/75/seed_262/
Project lc: math
New out script/workingdir/SimFix/math/math_75_buggy
The file script/workingdir/SimFix/math/math_75_buggy does not exist!
script/workingdir/SimFix/math/math_75_buggy
Current directory: script/workingdir/SimFix/math/math_75_buggy
classpath:  script/workingdir/SimFix/math/math_75_buggy/target/classes:script/workingdir/SimFix/math/math_75_buggy/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/SimFix/math/math_75_buggy/lib/junit-4.4.jar
Src java:  /src/main/java
Classes Java:  /target/classes
Src Test:  /src/test/java
Classes Test:  /target/test-classes
GPR[SSLB]-1659932162680
GPR[ESLB]-1659932222686
Calling SimFix: at script/workingdir/SimFix/math/math_75_buggy
build.xml
checkstyle.xml
d4j-info
defects4j.build.properties
doap_math.rdf
findbugs-exclude-filter.xml
license-header.txt
LICENSE.txt
NOTICE.txt
pom.xml
PROPOSAL.html
RELEASE-NOTES.txt
src
target
test-jar.xml
content current dir: build.xml checkstyle.xml d4j-info defects4j.build.properties doap_math.rdf findbugs-exclude-filter.xml license-header.txt LICENSE.txt NOTICE.txt pom.xml PROPOSAL.html RELEASE-NOTES.txt src target test-jar.xml
Node: host-68
Date init: Sun 07 Aug 2022 09:17:04 PM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659932224893
=================================================
Project : math_75	start : 22/08/07 21:17

GPR[ESUP]-1659932227012
MM Purify? false
GPR[SFL]-1659932227385
GPR[EFL]-1659932227429
GPR[SFP]-1659932227429
TIMEOUT : 18000000
GPR[SSUN]-1659932227437
org.apache.commons.math.stat.Frequency,303
========
return getCumPct(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659932228896
GPR[SPVAP]-1659932228896
GPR[EPVAP]-1659932231263
GPR[EPVS]-1659932231263
========
return getCumPct(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659932231265
GPR[SPVAP]-1659932231265
GPR[EPVAP]-1659932232536
GPR[EPVS]-1659932232536
========
return dotProduct((ArrayRealVector)v);

========
MM Copying to MM
GPR[SPVS]-1659932232539
GPR[SPVAP]-1659932232539
GPR[EPVAP]-1659932233823
GPR[EPVS]-1659932233823
========
return getDistance((ArrayRealVector)v);

========
MM Copying to MM
GPR[SPVS]-1659932233825
GPR[SPVAP]-1659932233825
GPR[EPVAP]-1659932235099
GPR[EPVS]-1659932235099
========
return getL1Distance((ArrayRealVector)v);

========
MM Copying to MM
GPR[SPVS]-1659932235101
GPR[SPVAP]-1659932235101
GPR[EPVAP]-1659932236370
GPR[EPVS]-1659932236370
========
return getLInfDistance((ArrayRealVector)v);

========
MM Copying to MM
GPR[SPVS]-1659932236371
GPR[SPVAP]-1659932236371
GPR[EPVAP]-1659932237610
GPR[EPVS]-1659932237611
========
return getPct(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659932237613
GPR[SPVAP]-1659932237613
GPR[EPVAP]-1659932238861
GPR[EPVS]-1659932238861
========
return getPct((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659932238863
GPR[SPVAP]-1659932238863
GPR[EPVAP]-1659932242832
GPR[SPVATF]-1659932242832
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 0
GPR[EPVATF]-1659932244614
GPR[SPVATR]-1659932244614
TESTING : math_75
MM messageFailing tests: 0
GPR[EPVATR]-1659932252114
GPR[EPVS]-1659932252114
GPR[PF]-1659932252114
sourceFile  script/workingdir/SimFix/math/math_75_buggy/src/main/java/org/apache/commons/math/stat/Frequency.java
location   script/workingdir/SimFix/math/math_75_buggy
MM Out patch at /experiment_home///results/SimFix/Math/75/seed_262/patch/math/75/0/patch_24688_1_ts_1659932252114.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math/stat/Frequency.java --label=/src/main/java/org/apache/commons/math/stat/Frequency.java /tmp/tmpDirMM7816068464208005317/Frequency.java  /experiment_home///results/SimFix/Math/75/seed_262/patch/math/75/0/1_Frequency.java  --unified=3  > /experiment_home///results/SimFix/Math/75/seed_262/patch/math/75/0/patch_24688_1_ts_1659932252114.diff
MMOut command diff: []
========
return getPct(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659932252123
GPR[SPVAP]-1659932252123
GPR[EPVAP]-1659932253186
GPR[EPVS]-1659932253186
========
return dotProduct(new ArrayRealVector(v,false));

========
MM Copying to MM
GPR[SPVS]-1659932253187
GPR[SPVAP]-1659932253187
GPR[EPVAP]-1659932254249
GPR[EPVS]-1659932254249
========
return getDistance(new ArrayRealVector(v,false));

========
MM Copying to MM
GPR[SPVS]-1659932254251
GPR[SPVAP]-1659932254251
GPR[EPVAP]-1659932255315
GPR[EPVS]-1659932255315
========
return dotProduct((OpenMapRealVector)v);

========
MM Copying to MM
GPR[SPVS]-1659932255317
GPR[SPVAP]-1659932255318
GPR[EPVAP]-1659932256372
GPR[EPVS]-1659932256372
========
return getDistance((OpenMapRealVector)v);

========
MM Copying to MM
GPR[SPVS]-1659932256374
GPR[SPVAP]-1659932256374
GPR[EPVAP]-1659932257453
GPR[EPVS]-1659932257453
========
checkVectorDimensions(v.getDimension());
return getCumPct((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659932257454
GPR[SPVAP]-1659932257454
GPR[EPVAP]-1659932258527
GPR[EPVS]-1659932258527
========
return getL1Distance((OpenMapRealVector)v);

========
MM Copying to MM
GPR[SPVS]-1659932258528
GPR[SPVAP]-1659932258528
GPR[EPVAP]-1659932259587
GPR[EPVS]-1659932259587
========
return getLInfDistance((OpenMapRealVector)v);

========
MM Copying to MM
GPR[SPVS]-1659932259588
GPR[SPVAP]-1659932259588
GPR[EPVAP]-1659932260652
GPR[EPVS]-1659932260652
========
return dotProduct(v.data);

========
MM Copying to MM
GPR[SPVS]-1659932260655
GPR[SPVAP]-1659932260655
GPR[EPVAP]-1659932261711
GPR[EPVS]-1659932261711
========
return getDistance(v.data);

========
MM Copying to MM
GPR[SPVS]-1659932261713
GPR[SPVAP]-1659932261713
GPR[EPVAP]-1659932262773
GPR[EPVS]-1659932262773
========
return getL1Distance(v.data);

========
MM Copying to MM
GPR[SPVS]-1659932262774
GPR[SPVAP]-1659932262774
GPR[EPVAP]-1659932263827
GPR[EPVS]-1659932263828
========
return getLInfDistance(v.data);

========
MM Copying to MM
GPR[SPVS]-1659932263829
GPR[SPVAP]-1659932263829
GPR[EPVAP]-1659932264888
GPR[EPVS]-1659932264888
GPR[ESUN]-1659932264891
GPR[SSUN]-1659932264891
org.apache.commons.math.stat.Frequency,342
========
return getPct(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659932266297
GPR[SPVAP]-1659932266297
GPR[EPVAP]-1659932268672
GPR[EPVS]-1659932268673
========
return getCumPct((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659932268674
GPR[SPVAP]-1659932268674
GPR[EPVAP]-1659932272630
GPR[SPVATF]-1659932272630
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932274436
GPR[EPVS]-1659932274436
========
return getCumPct(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659932274438
GPR[SPVAP]-1659932274438
GPR[EPVAP]-1659932276369
GPR[SPVATF]-1659932276369
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932278139
GPR[EPVS]-1659932278139
========
return getCumPct(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659932278141
GPR[SPVAP]-1659932278141
GPR[EPVAP]-1659932279206
GPR[EPVS]-1659932279206
GPR[ESUN]-1659932279207
GPR[SSUN]-1659932279207
org.apache.commons.math.stat.Frequency,331
GPR[ESUN]-1659932279546
GPR[SSUN]-1659932279547
org.apache.commons.math.stat.Frequency,386
UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}

========
if(v instanceof Integer){
return getCount(((Integer)v).longValue());
}

========
MM Copying to MM
GPR[SPVS]-1659932280600
GPR[SPVAP]-1659932280600
GPR[EPVAP]-1659932285565
GPR[SPVATF]-1659932285565
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932287370
GPR[EPVS]-1659932287370
GPR[ESUN]-1659932287371
GPR[SSUN]-1659932287371
org.apache.commons.math.stat.Frequency,444
========
return getCumFreq((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659932288505
GPR[SPVAP]-1659932288505
GPR[EPVAP]-1659932293612
GPR[SPVATF]-1659932293612
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932295404
GPR[EPVS]-1659932295404
========
return getCumFreq(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659932295405
GPR[SPVAP]-1659932295405
GPR[EPVAP]-1659932296499
GPR[EPVS]-1659932296499
========
return getCount((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659932296500
GPR[SPVAP]-1659932296500
GPR[EPVAP]-1659932298423
GPR[SPVATF]-1659932298423
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932300236
GPR[EPVS]-1659932300236
========
return getCount(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659932300238
GPR[SPVAP]-1659932300238
GPR[EPVAP]-1659932302165
GPR[SPVATF]-1659932302165
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932303976
GPR[EPVS]-1659932303976
========
return getCount(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659932303977
GPR[SPVAP]-1659932303977
GPR[EPVAP]-1659932305051
GPR[EPVS]-1659932305051
========
return getCumFreq(((Integer)v).longValue());

========
MM Copying to MM
GPR[SPVS]-1659932305053
GPR[SPVAP]-1659932305053
GPR[EPVAP]-1659932306152
GPR[EPVS]-1659932306152
========
if(getSumFreq()==0){
return Double.NaN;
}
return getCumFreq(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659932306153
GPR[SPVAP]-1659932306153
GPR[EPVAP]-1659932307222
GPR[EPVS]-1659932307223
GPR[ESUN]-1659932307223
GPR[SSUN]-1659932307223
org.apache.commons.math.stat.Frequency,177
GPR[ESUN]-1659932308458
GPR[SSUN]-1659932308458
org.apache.commons.math.stat.Frequency,178
Find no block!
GPR[SSUN]-1659932308720
org.apache.commons.math.stat.Frequency,320
========
 final long sumFreq=getSumFreq();
if(sumFreq==0){
return Double.NaN;
}
return (double)getCumFreq(v)/(double)sumFreq;

========
MM Copying to MM
GPR[SPVS]-1659932309796
GPR[SPVAP]-1659932309796
GPR[EPVAP]-1659932314910
GPR[SPVATF]-1659932314911
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932316692
GPR[EPVS]-1659932316692
GPR[ESUN]-1659932316692
GPR[SSUN]-1659932316692
org.apache.commons.math.stat.Frequency,408
UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}

========
if(c.compare(v,freqTable.lastKey())>0){
return getSumFreq();
}

========
MM Copying to MM
GPR[SPVS]-1659932317882
GPR[SPVAP]-1659932317882
GPR[EPVAP]-1659932323061
GPR[SPVATF]-1659932323061
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932324832
GPR[EPVS]-1659932324832
========
if(v instanceof Integer){
return getCumFreq(((Integer)v).longValue());
}
if(c.compare(v,freqTable.lastKey())>=0){
return getSumFreq();
}

========
MM Copying to MM
GPR[SPVS]-1659932324833
GPR[SPVAP]-1659932324833
GPR[EPVAP]-1659932326814
GPR[SPVATF]-1659932326814
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932328582
GPR[EPVS]-1659932328582
GPR[ESUN]-1659932328583
GPR[SSUN]-1659932328583
org.apache.commons.math.stat.Frequency,541
Find no block!
GPR[SSUN]-1659932328889
org.apache.commons.math.stat.Frequency,561
GPR[ESUN]-1659932329860
GPR[SSUN]-1659932329860
org.apache.commons.math.stat.Frequency,142
========
if(count!=null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}

========
MM Copying to MM
GPR[SPVS]-1659932330941
GPR[SPVAP]-1659932330941
GPR[EPVAP]-1659932336046
GPR[SPVATF]-1659932336046
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932337856
GPR[EPVS]-1659932337856
========
if(value==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}

========
MM Copying to MM
GPR[SPVS]-1659932337858
GPR[SPVAP]-1659932337858
GPR[EPVAP]-1659932338927
GPR[EPVS]-1659932338927
GPR[ESUN]-1659932338929
GPR[SSUN]-1659932338929
org.apache.commons.math.stat.Frequency,218
UNKNOWN ASTNode type : catch (ClassCastException ex) {
  return result;
}

GPR[ESUN]-1659932340163
GPR[SSUN]-1659932340163
org.apache.commons.math.stat.Frequency,251
UNKNOWN ASTNode type : catch (ClassCastException ex) {
  return result;
}

========
if(value!=null){
result=value.longValue();
}

========
MM Copying to MM
GPR[SPVS]-1659932341142
GPR[SPVAP]-1659932341142
GPR[EPVAP]-1659932343500
GPR[EPVS]-1659932343500
========
if(value!=null){
result=count.longValue();
}

========
MM Copying to MM
GPR[SPVS]-1659932343501
GPR[SPVAP]-1659932343501
GPR[EPVAP]-1659932344756
GPR[EPVS]-1659932344756
========
if(count!=null){
result=value.longValue();
}

========
MM Copying to MM
GPR[SPVS]-1659932344758
GPR[SPVAP]-1659932344758
GPR[EPVAP]-1659932346026
GPR[EPVS]-1659932346027
========
if(count==null){
result=count.longValue();
}

========
MM Copying to MM
GPR[SPVS]-1659932346029
GPR[SPVAP]-1659932346029
GPR[EPVAP]-1659932350005
GPR[SPVATF]-1659932350005
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932351795
GPR[EPVS]-1659932351795
GPR[ESUN]-1659932351796
GPR[SSUN]-1659932351796
org.apache.commons.math.stat.Frequency,316
GPR[ESUN]-1659932352131
GPR[SSUN]-1659932352131
org.apache.commons.math.stat.Frequency,317
GPR[ESUN]-1659932353129
GPR[SSUN]-1659932353129
org.apache.commons.math.stat.Frequency,385
GPR[ESUN]-1659932353360
GPR[SSUN]-1659932353360
org.apache.commons.math.stat.Frequency,388
========
if(getSumFreq()==0){
return 0;
}
if(v instanceof Integer){
return getCumFreq(((Integer)v).longValue());
}
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();
if(c==null){
c=new NaturalComparator();
}

========
MM Copying to MM
GPR[SPVS]-1659932355248
GPR[SPVAP]-1659932355248
GPR[EPVAP]-1659932360323
GPR[SPVATF]-1659932360323
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932362109
GPR[EPVS]-1659932362109
========
if(v instanceof Integer){
return getCount(((Integer)v).longValue());
}
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();
if(c==null){
c=new NaturalComparator();
}

========
MM Copying to MM
GPR[SPVS]-1659932362111
GPR[SPVAP]-1659932362111
GPR[EPVAP]-1659932364079
GPR[SPVATF]-1659932364079
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932365884
GPR[EPVS]-1659932365884
========
try{
Long freqTable.get(v)=freqTable.get(v);
if(count!=null){
serialVersionUID=count.longValue();
}
}catch (ClassCastException ex) {
}

if(v instanceof Integer){
return getCumFreq(((Integer)v).longValue());
}
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();
if(c==null){
c=new NaturalComparator();
}

========
MM Copying to MM
GPR[SPVS]-1659932365885
GPR[SPVAP]-1659932365885
GPR[EPVAP]-1659932366811
GPR[EPVS]-1659932366811
GPR[ESUN]-1659932366812
GPR[SSUN]-1659932366812
org.apache.commons.math.stat.Frequency,389
GPR[ESUN]-1659932367118
GPR[SSUN]-1659932367118
org.apache.commons.math.stat.Frequency,390
GPR[ESUN]-1659932367309
GPR[SSUN]-1659932367309
org.apache.commons.math.stat.Frequency,392
UNKNOWN ASTNode type : catch (ClassCastException ex) {
  return result;
}

========
if(value==null){
result=value.longValue();
}

========
MM Copying to MM
GPR[SPVS]-1659932368319
GPR[SPVAP]-1659932368319
GPR[EPVAP]-1659932373366
GPR[SPVATF]-1659932373366
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932375135
GPR[EPVS]-1659932375135
========
if(c.compare(v,freqTable.firstKey())<0){
return 0;
}
if(c==null){
c=new NaturalComparator();
}
long result=0;
try{
Long value=freqTable.get(v);
if(value!=null){
result=value.longValue();
}
}catch (ClassCastException ex) {
  return result;
}


========
MM Copying to MM
GPR[SPVS]-1659932376053
GPR[SPVAP]-1659932376053
GPR[EPVAP]-1659932377980
GPR[SPVATF]-1659932377980
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932379788
GPR[EPVS]-1659932379788
========
if(c==null){
c=new NaturalComparator();
}
long result=0;
if(v instanceof Integer){
v=Long.valueOf(((Integer)v).longValue());
}
try{
Long value=freqTable.get(v);
if(value!=null){
result=value.longValue();
}
}catch (ClassCastException ex) {
  return result;
}


========
MM Copying to MM
GPR[SPVS]-1659932379789
GPR[SPVAP]-1659932379789
GPR[EPVAP]-1659932381674
GPR[SPVATF]-1659932381674
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932383475
GPR[EPVS]-1659932383475
========
if(c==null){
c=new NaturalComparator();
}
int result=0;
try{
Long value=freqTable.get(v);
if(value!=null){
result=value.longValue();
}
}catch (ClassCastException ex) {
  return result;
}


========
MM Copying to MM
GPR[SPVS]-1659932383477
GPR[SPVAP]-1659932383477
GPR[EPVAP]-1659932384534
GPR[EPVS]-1659932384534
========
result=value*result+((freqTable==null)?0:freqTable.hashCode());
if(c==null){
c=new NaturalComparator();
}
long result=0;
try{
Long value=freqTable.get(v);
if(value!=null){
result=value.longValue();
}
}catch (ClassCastException ex) {
  return result;
}


========
MM Copying to MM
GPR[SPVS]-1659932384537
GPR[SPVAP]-1659932384537
GPR[EPVAP]-1659932385589
GPR[EPVS]-1659932385589
========
if(c==null){
c=new NaturalComparator();
}
if(serialVersionUID<0){
throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",serialVersionUID,e);
}
long result=0;
try{
Long value=freqTable.get(v);
if(value!=null){
result=value.longValue();
}
}catch (ClassCastException ex) {
  return result;
}


========
MM Copying to MM
GPR[SPVS]-1659932385591
GPR[SPVAP]-1659932385591
GPR[EPVAP]-1659932386647
GPR[EPVS]-1659932386647
GPR[ESUN]-1659932386648
GPR[SSUN]-1659932386648
org.apache.commons.math.stat.Frequency,395
========
if(c==null){
c=new NaturalComparator();
}
Long value=freqTable.get(v);
if(value!=null){
result=value.longValue();
}

========
MM Copying to MM
GPR[SPVS]-1659932387837
GPR[SPVAP]-1659932387837
GPR[EPVAP]-1659932392931
GPR[SPVATF]-1659932392931
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932394720
GPR[EPVS]-1659932394720
========
Long value=freqTable.get(v);
if(value==null){
result=value.longValue();
}

========
MM Copying to MM
GPR[SPVS]-1659932394722
GPR[SPVAP]-1659932394722
GPR[EPVAP]-1659932396655
GPR[SPVATF]-1659932396655
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932398427
GPR[EPVS]-1659932398427
========
Long value=freqTable.indexOf(v);
if(value!=null){
result=value.longValue();
}

========
MM Copying to MM
GPR[SPVS]-1659932398429
GPR[SPVAP]-1659932398429
GPR[EPVAP]-1659932399503
GPR[EPVS]-1659932399503
========
Long value=freqTable.nextInt(v);
if(value!=null){
result=value.longValue();
}

========
MM Copying to MM
GPR[SPVS]-1659932399506
GPR[SPVAP]-1659932399506
GPR[EPVAP]-1659932400560
GPR[EPVS]-1659932400560
GPR[ESUN]-1659932400561
GPR[SSUN]-1659932400561
org.apache.commons.math.stat.Frequency,396
GPR[ESUN]-1659932400904
GPR[SSUN]-1659932400904
org.apache.commons.math.stat.Frequency,397
GPR[ESUN]-1659932401108
GPR[SSUN]-1659932401108
org.apache.commons.math.stat.Frequency,401
Find no block!
GPR[SSUN]-1659932401304
org.apache.commons.math.stat.Frequency,403
UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}

========
if(v instanceof Integer){
return getCumFreq(((Integer)v).longValue());
}
if(c.compare(v,freqTable.firstKey())<0){
return 0;
}

========
MM Copying to MM
GPR[SPVS]-1659932402296
GPR[SPVAP]-1659932402296
GPR[EPVAP]-1659932407279
GPR[SPVATF]-1659932407279
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932409068
GPR[EPVS]-1659932409068
GPR[ESUN]-1659932409069
GPR[SSUN]-1659932409069
org.apache.commons.math.stat.Frequency,407
GPR[ESUN]-1659932409406
GPR[SSUN]-1659932409406
org.apache.commons.math.stat.Frequency,495
========
 final long sumFreq=getSumFreq();
if(sumFreq==0){
return Double.NaN;
}
return (double)getCount(v)/(double)sumFreq;

========
MM Copying to MM
GPR[SPVS]-1659932410394
GPR[SPVAP]-1659932410394
GPR[EPVAP]-1659932415416
GPR[SPVATF]-1659932415416
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932417230
GPR[EPVS]-1659932417230
GPR[ESUN]-1659932417231
GPR[SSUN]-1659932417231
org.apache.commons.math.stat.Frequency,159
Find no block!
GPR[SSUN]-1659932417626
org.apache.commons.math.stat.Frequency,215
========
double result=0;
Iterator<Long> iterator=freqTable.values().iterator();
while(iterator.hasNext()){
result+=iterator.next().longValue();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659932418854
GPR[SPVAP]-1659932418854
GPR[EPVAP]-1659932421182
GPR[EPVS]-1659932421183
========
checkVectorDimensions(v.length);
long result=0;
Iterator<Long> iterator=freqTable.values().iterator();
while(iterator.hasNext()){
result+=iterator.next().longValue();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659932421184
GPR[SPVAP]-1659932421184
GPR[EPVAP]-1659932422441
GPR[EPVS]-1659932422441
========
checkVectorDimensions(v.length);
double result=0;
Iterator<Long> iterator=freqTable.values().iterator();
while(iterator.hasNext()){
result+=iterator.next().longValue();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659932422443
GPR[SPVAP]-1659932422443
GPR[EPVAP]-1659932423746
GPR[EPVS]-1659932423746
========
long result=0;
Iterator<Long> iterator=freqTable.values().iterator();
while(iterator.hasNext()){
result+=iterator.next().longValue();
}
return high;

========
MM Copying to MM
GPR[SPVS]-1659932423748
GPR[SPVAP]-1659932423748
GPR[EPVAP]-1659932425024
GPR[EPVS]-1659932425024
========
long result=0;
Iterator<Long> iterator=freqTable.values().iterator();
while(iterator.hasNext()){
result+=iterator.next().longValue();
}
return low;

========
MM Copying to MM
GPR[SPVS]-1659932425026
GPR[SPVAP]-1659932425026
GPR[EPVAP]-1659932426394
GPR[EPVS]-1659932426394
========
long result=0;
Iterator<Long> iterator=freqTable.values().iterator();
checkVectorDimensions(v.length);
while(iterator.hasNext()){
result+=iterator.next().longValue();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659932426396
GPR[SPVAP]-1659932426396
GPR[EPVAP]-1659932427673
GPR[EPVS]-1659932427673
========
long result=0;
checkVectorDimensions(v.length);
Iterator<Long> iterator=freqTable.values().iterator();
while(iterator.hasNext()){
result+=iterator.next().longValue();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659932427674
GPR[SPVAP]-1659932427674
GPR[EPVAP]-1659932428981
GPR[EPVS]-1659932428981
========
long result=0;
checkVectorDimensions(iterator.getDimension());
Iterator<Long> iterator=freqTable.values().iterator();
while(iterator.hasNext()){
result+=iterator.next().longValue();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659932428983
GPR[SPVAP]-1659932428983
GPR[EPVAP]-1659932430332
GPR[EPVS]-1659932430332
========
long result=0;
Iterator<Long> iterator=freqTable.values().iterator();
checkVectorDimensions(iterator.getDimension());
while(iterator.hasNext()){
result+=iterator.next().longValue();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659932430334
GPR[SPVAP]-1659932430334
GPR[EPVAP]-1659932431618
GPR[EPVS]-1659932431619
========
int result=0;
Iterator<Long> iterator=freqTable.values().iterator();
while(iterator.hasNext()){
result+=iterator.next().longValue();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659932431624
GPR[SPVAP]-1659932431624
GPR[EPVAP]-1659932435557
GPR[SPVATF]-1659932435557
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932437347
GPR[EPVS]-1659932437347
========
long result=iterator.key();
Iterator<Long> iterator=freqTable.values().iterator();
while(iterator.hasNext()){
result+=iterator.next().longValue();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659932437351
GPR[SPVAP]-1659932437351
GPR[EPVAP]-1659932438417
GPR[EPVS]-1659932438417
========
long result=0;
iterator=new OpenIntToDoubleHashMap(0.0);
Iterator<Long> iterator=freqTable.values().iterator();
while(iterator.hasNext()){
result+=iterator.next().longValue();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659932438419
GPR[SPVAP]-1659932438419
GPR[EPVAP]-1659932439474
GPR[EPVS]-1659932439474
========
long result=0;
Iterator<Long> iterator=freqTable.values().iterator();
iterator=new OpenIntToDoubleHashMap(0.0);
while(iterator.hasNext()){
result+=iterator.next().longValue();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659932439476
GPR[SPVAP]-1659932439476
GPR[EPVAP]-1659932440542
GPR[EPVS]-1659932440542
========
long result=0;
Iterator<Long> iterator=freqTable.values().iterator();
while(iterator.hasNext()){
previous=values[index];
result+=iterator.next().longValue();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659932440546
GPR[SPVAP]-1659932440546
GPR[EPVAP]-1659932441619
GPR[EPVS]-1659932441619
========
long result=0;
Iterator<Long> iterator=freqTable.values().iterator();
while(iterator.hasNext()){
result+=iterator.next().longValue();
}
return previous;

========
MM Copying to MM
GPR[SPVS]-1659932441622
GPR[SPVAP]-1659932441622
GPR[EPVAP]-1659932442677
GPR[EPVS]-1659932442677
GPR[ESUN]-1659932442677
GPR[SSUN]-1659932442677
org.apache.commons.math.stat.Frequency,216
GPR[ESUN]-1659932443020
GPR[SSUN]-1659932443020
org.apache.commons.math.stat.Frequency,217
GPR[ESUN]-1659932443226
GPR[SSUN]-1659932443226
org.apache.commons.math.stat.Frequency,220
GPR[ESUN]-1659932443436
GPR[SSUN]-1659932443436
org.apache.commons.math.stat.Frequency,244
UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}

========
if(v instanceof Integer){
return getCumFreq(((Integer)v).longValue());
}

========
MM Copying to MM
GPR[SPVS]-1659932444463
GPR[SPVAP]-1659932444463
GPR[EPVAP]-1659932449510
GPR[SPVATF]-1659932449510
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932451343
GPR[EPVS]-1659932451343
GPR[ESUN]-1659932451344
GPR[SSUN]-1659932451344
org.apache.commons.math.stat.Frequency,247
========
if(v instanceof Integer){
return getCount(((Integer)v).longValue());
}
if((Comparator<Comparable<?>>)freqTable.comparator()==null){
c=new NaturalComparator();
}
long result=0;
try{
Long count=freqTable.get(v);
if(count!=null){
result=count.longValue();
}
}catch (ClassCastException ex) {
}

return result;

========
MM Copying to MM
GPR[SPVS]-1659932452629
GPR[SPVAP]-1659932452629
GPR[EPVAP]-1659932454987
GPR[EPVS]-1659932454987
========
if((Comparator<Comparable<?>>)freqTable.comparator().compare(v,freqTable.firstKey())<0){
return 0;
}
if(v instanceof Integer){
return getCount(((Integer)v).longValue());
}
long result=0;
try{
Long count=freqTable.get(v);
if(count!=null){
result=count.longValue();
}
}catch (ClassCastException ex) {
}

return result;

========
MM Copying to MM
GPR[SPVS]-1659932454989
GPR[SPVAP]-1659932454989
GPR[EPVAP]-1659932456242
GPR[EPVS]-1659932456242
========
if((Comparator<Comparable<?>>)freqTable.comparator().compare(v,freqTable.lastKey())>=0){
return getSumFreq();
}
if(v instanceof Integer){
return getCount(((Integer)v).longValue());
}
long result=0;
try{
Long count=freqTable.get(v);
if(count!=null){
result=count.longValue();
}
}catch (ClassCastException ex) {
}

return result;

========
MM Copying to MM
GPR[SPVS]-1659932456244
GPR[SPVAP]-1659932456244
GPR[EPVAP]-1659932457484
GPR[EPVS]-1659932457484
========
if(v instanceof Integer){
return getCount(((Integer)v).longValue());
}
int result=0;
try{
Long count=freqTable.get(v);
if(count!=null){
result=count.longValue();
}
}catch (ClassCastException ex) {
}

return result;

========
MM Copying to MM
GPR[SPVS]-1659932457486
GPR[SPVAP]-1659932457486
GPR[EPVAP]-1659932458754
GPR[EPVS]-1659932458754
========
if(v instanceof Integer){
return getCount(((Integer)v).longValue());
}
long result=0;
try{
Long count=freqTable.get(v);
if(count!=null){
result=count.longValue();
}
}catch (ClassCastException ex) {
}

result=count*result+((freqTable==null)?0:freqTable.hashCode());
return result;

========
MM Copying to MM
GPR[SPVS]-1659932458757
GPR[SPVAP]-1659932458757
GPR[EPVAP]-1659932460067
GPR[EPVS]-1659932460067
========
if(v instanceof Integer){
return getCount(((Integer)v).longValue());
}
if(serialVersionUID<0){
throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",serialVersionUID,e);
}
long result=0;
try{
Long count=freqTable.get(v);
if(count!=null){
result=count.longValue();
}
}catch (ClassCastException ex) {
}

return result;

========
MM Copying to MM
GPR[SPVS]-1659932460069
GPR[SPVAP]-1659932460069
GPR[EPVAP]-1659932461307
GPR[EPVS]-1659932461307
GPR[ESUN]-1659932461307
GPR[SSUN]-1659932461307
org.apache.commons.math.stat.Frequency,249
GPR[ESUN]-1659932461580
GPR[SSUN]-1659932461580
org.apache.commons.math.stat.Frequency,250
GPR[ESUN]-1659932461768
GPR[SSUN]-1659932461768
org.apache.commons.math.stat.Frequency,255
Find no block!
GPR[SSUN]-1659932461985
org.apache.commons.math.stat.Frequency,256
GPR[ESUN]-1659932462188
GPR[SSUN]-1659932462188
org.apache.commons.math.stat.Frequency,382
GPR[ESUN]-1659932463219
GPR[SSUN]-1659932463219
org.apache.commons.math.stat.Frequency,491
GPR[ESUN]-1659932463427
GPR[SSUN]-1659932463427
org.apache.commons.math.stat.Frequency,492
GPR[ESUN]-1659932463626
GPR[SSUN]-1659932463626
org.apache.commons.math.stat.Frequency,133
========
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
Comparable<?> obj=v;
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}

========
MM Copying to MM
GPR[SPVS]-1659932464656
GPR[SPVAP]-1659932464657
GPR[EPVAP]-1659932467019
GPR[EPVS]-1659932467019
========
Comparable<?> obj=v;
if(obj==null)return false;
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}

========
MM Copying to MM
GPR[SPVS]-1659932467021
GPR[SPVAP]-1659932467021
GPR[EPVAP]-1659932468270
GPR[EPVS]-1659932468270
========
if(serialVersionUID!=other.n)return false;
Comparable<?> obj=v;
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}

========
MM Copying to MM
GPR[SPVS]-1659932468271
GPR[SPVAP]-1659932468271
GPR[EPVAP]-1659932469539
GPR[EPVS]-1659932469539
========
Comparable<?> obj=v;
if(this==obj)return true;
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}

========
MM Copying to MM
GPR[SPVS]-1659932469541
GPR[SPVAP]-1659932469541
GPR[EPVAP]-1659932470793
GPR[EPVS]-1659932470793
========
Comparable<?> obj=v;
if(this==obj)return true;
if(obj==null)return false;
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}

========
MM Copying to MM
GPR[SPVS]-1659932470795
GPR[SPVAP]-1659932470795
GPR[EPVAP]-1659932472077
GPR[EPVS]-1659932472077
GPR[ESUN]-1659932472077
GPR[SSUN]-1659932472077
org.apache.commons.math.stat.Frequency,134
UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}

========
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}

========
MM Copying to MM
GPR[SPVS]-1659932473188
GPR[SPVAP]-1659932473188
GPR[EPVAP]-1659932475648
GPR[EPVS]-1659932475648
========
if(this==obj)return true;
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}

========
MM Copying to MM
GPR[SPVS]-1659932475650
GPR[SPVAP]-1659932475650
GPR[EPVAP]-1659932476969
GPR[EPVS]-1659932476969
========
if(obj==null)return false;
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}

========
MM Copying to MM
GPR[SPVS]-1659932476970
GPR[SPVAP]-1659932476970
GPR[EPVAP]-1659932478215
GPR[EPVS]-1659932478216
========
if(this==obj)return true;
if(obj==null)return false;
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}

========
MM Copying to MM
GPR[SPVS]-1659932478217
GPR[SPVAP]-1659932478217
GPR[EPVAP]-1659932479466
GPR[EPVS]-1659932479466
GPR[ESUN]-1659932479466
GPR[SSUN]-1659932479466
org.apache.commons.math.stat.Frequency,138
========
if(obj instanceof Integer){
return getCount(((Integer)v).longValue());
}
Long count=freqTable.get(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}

========
MM Copying to MM
GPR[SPVS]-1659932480650
GPR[SPVAP]-1659932480650
GPR[EPVAP]-1659932483013
GPR[EPVS]-1659932483013
========
if(getSumFreq()==0){
return 0;
}
Long count=freqTable.get(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}

========
MM Copying to MM
GPR[SPVS]-1659932483015
GPR[SPVAP]-1659932483015
GPR[EPVAP]-1659932484278
GPR[EPVS]-1659932484278
========
if(v instanceof Integer){
return getCumFreq(((Integer)v).longValue());
}
Long count=freqTable.get(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}

========
MM Copying to MM
GPR[SPVS]-1659932484279
GPR[SPVAP]-1659932484279
GPR[EPVAP]-1659932485537
GPR[EPVS]-1659932485537
========
if((Comparator<Comparable<?>>)freqTable.comparator()==null){
c=new NaturalComparator();
}
Long count=freqTable.get(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}

========
MM Copying to MM
GPR[SPVS]-1659932485539
GPR[SPVAP]-1659932485539
GPR[EPVAP]-1659932486825
GPR[EPVS]-1659932486825
========
Long count=freqTable.indexOf(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}

========
MM Copying to MM
GPR[SPVS]-1659932486827
GPR[SPVAP]-1659932486827
GPR[EPVAP]-1659932488094
GPR[EPVS]-1659932488094
========
Long count=freqTable.nextInt(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}

========
MM Copying to MM
GPR[SPVS]-1659932488096
GPR[SPVAP]-1659932488096
GPR[EPVAP]-1659932489346
GPR[EPVS]-1659932489346
GPR[ESUN]-1659932489347
GPR[SSUN]-1659932489347
org.apache.commons.math.stat.Frequency,139
GPR[ESUN]-1659932489571
GPR[SSUN]-1659932489571
org.apache.commons.math.stat.Frequency,140
GPR[ESUN]-1659932489747
GPR[SSUN]-1659932489747
org.apache.commons.math.stat.Frequency,149
Find no block!
GPR[SSUN]-1659932489919
org.apache.commons.math.stat.Frequency,150
Find no block!
GPR[SSUN]-1659932490094
org.apache.commons.math.stat.Frequency,158
GPR[ESUN]-1659932490280
GPR[SSUN]-1659932490280
org.apache.commons.math.stat.Frequency,59
Find no block!
GPR[SSUN]-1659932490460
org.apache.commons.math.stat.Frequency,60
GPR[ESUN]-1659932491413
GPR[SSUN]-1659932491413
org.apache.commons.math.stat.Frequency,61
Find no block!
GPR[SSUN]-1659932491612
org.apache.commons.math.stat.Frequency,69
Find no block!
GPR[SSUN]-1659932491820
org.apache.commons.math.stat.Frequency,70
GPR[ESUN]-1659932492825
GPR[SSUN]-1659932492825
org.apache.commons.math.stat.Frequency,71
Find no block!
GPR[SSUN]-1659932493004
org.apache.commons.math.stat.Frequency,81
========
outBuffer.append("n: ").append(getN()).append("\n");
NumberFormat nf=NumberFormat.getPercentInstance();
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");

========
MM Copying to MM
GPR[SPVS]-1659932496418
GPR[SPVAP]-1659932496418
GPR[EPVAP]-1659932498800
GPR[EPVS]-1659932498800
========
outBuffer.append("n: "+getN());
NumberFormat nf=NumberFormat.getPercentInstance();
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");

========
MM Copying to MM
GPR[SPVS]-1659932498802
GPR[SPVAP]-1659932498802
GPR[EPVAP]-1659932500050
GPR[EPVS]-1659932500050
========
append(outBuffer,getMin(),"min: ",", ","\n");
NumberFormat nf=NumberFormat.getPercentInstance();
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");

========
MM Copying to MM
GPR[SPVS]-1659932500052
GPR[SPVAP]-1659932500052
GPR[EPVAP]-1659932501339
GPR[EPVS]-1659932501339
========
outBuffer.append('\t');
NumberFormat nf=NumberFormat.getPercentInstance();
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");

========
MM Copying to MM
GPR[SPVS]-1659932501340
GPR[SPVAP]-1659932501340
GPR[EPVAP]-1659932502603
GPR[EPVS]-1659932502603
========
outBuffer.append('\n');
NumberFormat nf=NumberFormat.getPercentInstance();
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");

========
MM Copying to MM
GPR[SPVS]-1659932502604
GPR[SPVAP]-1659932502604
GPR[EPVAP]-1659932503879
GPR[EPVS]-1659932503879
========
outBuffer.append(')');
NumberFormat nf=NumberFormat.getPercentInstance();
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");

========
MM Copying to MM
GPR[SPVS]-1659932503880
GPR[SPVAP]-1659932503880
GPR[EPVAP]-1659932505130
GPR[EPVS]-1659932505130
========
NumberFormat nf=NumberFormat.getPercentInstance();
StringBuffer outBuffer=new StringBuffer();
append(outBuffer,getSumLog(),"sum of logarithms: ",", ","\n");
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");

========
MM Copying to MM
GPR[SPVS]-1659932505132
GPR[SPVAP]-1659932505132
GPR[EPVAP]-1659932506463
GPR[EPVS]-1659932506463
========
NumberFormat nf=NumberFormat.getPercentInstance();
StringBuffer outBuffer=new StringBuffer();
append(outBuffer,getStandardDeviation(),"standard deviation: ",", ","\n");
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");

========
MM Copying to MM
GPR[SPVS]-1659932506465
GPR[SPVAP]-1659932506465
GPR[EPVAP]-1659932507718
GPR[EPVS]-1659932507718
========
nf.setParseIntegerOnly(true);
NumberFormat nf=NumberFormat.getPercentInstance();
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");

========
MM Copying to MM
GPR[SPVS]-1659932507720
GPR[SPVAP]-1659932507720
GPR[EPVAP]-1659932508998
GPR[EPVS]-1659932508998
GPR[ESUN]-1659932508998
GPR[SSUN]-1659932508998
org.apache.commons.math.stat.Frequency,82
GPR[ESUN]-1659932509299
GPR[SSUN]-1659932509299
org.apache.commons.math.stat.Frequency,83
========
outBuffer.append("n: ").append(getN()).append("\n");
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932510516
GPR[SPVAP]-1659932510516
GPR[EPVAP]-1659932512876
GPR[EPVS]-1659932512876
========
outBuffer.append("n: "+getN());
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932512878
GPR[SPVAP]-1659932512878
GPR[EPVAP]-1659932514142
GPR[EPVS]-1659932514142
========
append(outBuffer,getMin(),"min: ",", ","\n");
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932514143
GPR[SPVAP]-1659932514143
GPR[EPVAP]-1659932515389
GPR[EPVS]-1659932515389
========
outBuffer.append('\t');
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932515390
GPR[SPVAP]-1659932515390
GPR[EPVAP]-1659932516650
GPR[EPVS]-1659932516650
========
outBuffer.append('\n');
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932516651
GPR[SPVAP]-1659932516651
GPR[EPVAP]-1659932517989
GPR[EPVS]-1659932517989
========
StringBuffer outBuffer=new StringBuffer();
res.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932517990
GPR[SPVAP]-1659932517990
GPR[EPVAP]-1659932519232
GPR[EPVS]-1659932519232
========
outBuffer.append("}");
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932519233
GPR[SPVAP]-1659932519233
GPR[EPVAP]-1659932520490
GPR[EPVS]-1659932520490
========
StringBuffer outBuffer=new StringBuffer();
sb.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932520492
GPR[SPVAP]-1659932520492
GPR[EPVAP]-1659932521734
GPR[EPVS]-1659932521734
========
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
outBuffer.append(')');
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932521736
GPR[SPVAP]-1659932521736
GPR[EPVAP]-1659932525703
GPR[SPVATF]-1659932525703
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932527483
GPR[EPVS]-1659932527484
========
StringBuffer outBuffer=new StringBuffer();
buffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932527485
GPR[SPVAP]-1659932527485
GPR[EPVAP]-1659932528535
GPR[EPVS]-1659932528535
========
StringBuffer outBuffer=new StringBuffer();
append(outBuffer,getSumLog(),"sum of logarithms: ",", ","\n");
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932528537
GPR[SPVAP]-1659932528537
GPR[EPVAP]-1659932529587
GPR[EPVS]-1659932529587
========
StringBuffer outBuffer=new StringBuffer();
append(outBuffer,getStandardDeviation(),"standard deviation: ",", ","\n");
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932529588
GPR[SPVAP]-1659932529588
GPR[EPVAP]-1659932530662
GPR[EPVS]-1659932530662
========
outBuffer.append("}");
StringBuffer outBuffer=new StringBuffer();
res.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932530663
GPR[SPVAP]-1659932530663
GPR[EPVAP]-1659932531718
GPR[EPVS]-1659932531718
========
StringBuffer outBuffer=new StringBuffer();
buff.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932531720
GPR[SPVAP]-1659932531720
GPR[EPVAP]-1659932532788
GPR[EPVS]-1659932532788
========
outBuffer.append(")");
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932532790
GPR[SPVAP]-1659932532790
GPR[EPVAP]-1659932533856
GPR[EPVS]-1659932533856
========
StringBuffer outBuffer=new StringBuffer();
s.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932533858
GPR[SPVAP]-1659932533858
GPR[EPVAP]-1659932534919
GPR[EPVS]-1659932534919
========
StringBuffer outBuffer=new StringBuffer();
toAppendTo.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932534920
GPR[SPVAP]-1659932534920
GPR[EPVAP]-1659932535967
GPR[EPVS]-1659932535967
========
outBuffer.append(" / ");
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932535969
GPR[SPVAP]-1659932535969
GPR[EPVAP]-1659932537059
GPR[EPVS]-1659932537059
========
outBuffer.append(" / ");
StringBuffer outBuffer=new StringBuffer();
toAppendTo.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932537060
GPR[SPVAP]-1659932537060
GPR[EPVAP]-1659932538119
GPR[EPVS]-1659932538119
========
StringBuffer outBuffer=new StringBuffer();
entries.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932538121
GPR[SPVAP]-1659932538121
GPR[EPVAP]-1659932539167
GPR[EPVS]-1659932539167
========
StringBuffer outBuffer=new StringBuffer();
outBuffer.setValue("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932539169
GPR[SPVAP]-1659932539169
GPR[EPVAP]-1659932540216
GPR[EPVS]-1659932540216
========
StringBuffer outBuffer=new StringBuffer();
if(isDefaultValue(getNorm())){
throw MathRuntimeException.createArithmeticException("cannot normalize a zero norm vector");
}
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932540217
GPR[SPVAP]-1659932540217
GPR[EPVAP]-1659932541321
GPR[EPVS]-1659932541321
========
StringBuffer outBuffer=new StringBuffer();
outBuffer.add("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932541323
GPR[SPVAP]-1659932541323
GPR[EPVAP]-1659932542404
GPR[EPVS]-1659932542404
========
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
checkVectorDimensions(v.length);
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932542406
GPR[SPVAP]-1659932542406
GPR[EPVAP]-1659932543485
GPR[EPVS]-1659932543485
========
StringBuffer outBuffer=new StringBuffer();
checkVectorDimensions(v.length);
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932543487
GPR[SPVAP]-1659932543487
GPR[EPVAP]-1659932544543
GPR[EPVS]-1659932544543
========
if((Comparator<Comparable<?>>)freqTable.comparator()==null){
c=new NaturalComparator();
}
StringBuffer outBuffer=new StringBuffer();
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932544544
GPR[SPVAP]-1659932544544
GPR[EPVAP]-1659932545597
GPR[EPVS]-1659932545597
========
StringBuffer outBuffer=new StringBuffer();
outBuffer.doubleToLongBits("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932545600
GPR[SPVAP]-1659932545600
GPR[EPVAP]-1659932546670
GPR[EPVS]-1659932546670
========
StringBuffer outBuffer=new StringBuffer();
(freqTable==null)?null:outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
Iterator<Comparable<?>> iter=freqTable.keySet().iterator();

========
MM Copying to MM
GPR[SPVS]-1659932546672
GPR[SPVAP]-1659932546672
GPR[EPVAP]-1659932547614
GPR[EPVS]-1659932547614
GPR[ESUN]-1659932547615
GPR[SSUN]-1659932547615
org.apache.commons.math.stat.Frequency,84
GPR[ESUN]-1659932547994
GPR[SSUN]-1659932547995
org.apache.commons.math.stat.Frequency,85
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
res.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932549319
GPR[SPVAP]-1659932549319
GPR[EPVAP]-1659932551695
GPR[EPVS]-1659932551695
========
outBuffer.append("BigMatrixImpl{");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932551697
GPR[SPVAP]-1659932551697
GPR[EPVAP]-1659932555658
GPR[SPVATF]-1659932555658
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932557448
GPR[EPVS]-1659932557448
========
outBuffer.append("}");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932557449
GPR[SPVAP]-1659932557449
GPR[EPVAP]-1659932559399
GPR[SPVATF]-1659932559399
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932561186
GPR[EPVS]-1659932561186
========
outBuffer.append("BigMatrixImpl{");
outBuffer.append("}");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932561188
GPR[SPVAP]-1659932561188
GPR[EPVAP]-1659932563100
GPR[SPVATF]-1659932563100
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932564916
GPR[EPVS]-1659932564916
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
buffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932564918
GPR[SPVAP]-1659932564918
GPR[EPVAP]-1659932565963
GPR[EPVS]-1659932565963
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
toAppendTo.append(value);
toAppendTo.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932565965
GPR[SPVAP]-1659932565965
GPR[EPVAP]-1659932567032
GPR[EPVS]-1659932567032
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
toAppendTo.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932567034
GPR[SPVAP]-1659932567034
GPR[EPVAP]-1659932568091
GPR[EPVS]-1659932568091
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
toAppendTo.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932568092
GPR[SPVAP]-1659932568092
GPR[EPVAP]-1659932569141
GPR[EPVS]-1659932569141
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
toAppendTo.append(value);
toAppendTo.append('\t');
toAppendTo.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932569143
GPR[SPVAP]-1659932569143
GPR[EPVAP]-1659932570211
GPR[EPVS]-1659932570211
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
toAppendTo.append('\t');
toAppendTo.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932570213
GPR[SPVAP]-1659932570213
GPR[EPVAP]-1659932571277
GPR[EPVS]-1659932571277
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
toAppendTo.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932571278
GPR[SPVAP]-1659932571278
GPR[EPVAP]-1659932572322
GPR[EPVS]-1659932572322
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
buff.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932572323
GPR[SPVAP]-1659932572323
GPR[EPVAP]-1659932573384
GPR[EPVS]-1659932573384
========
outBuffer.append(")");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932573385
GPR[SPVAP]-1659932573385
GPR[EPVAP]-1659932575308
GPR[SPVATF]-1659932575308
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932577120
GPR[EPVS]-1659932577120
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.setIndex('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932577122
GPR[SPVAP]-1659932577122
GPR[EPVAP]-1659932578183
GPR[EPVS]-1659932578183
========
outBuffer.append('(');
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932578184
GPR[SPVAP]-1659932578184
GPR[EPVAP]-1659932580114
GPR[SPVATF]-1659932580114
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932581896
GPR[EPVS]-1659932581896
========
outBuffer.append(')');
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932581897
GPR[SPVAP]-1659932581897
GPR[EPVAP]-1659932583786
GPR[SPVATF]-1659932583786
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932585591
GPR[EPVS]-1659932585591
========
outBuffer.append('(');
outBuffer.append(')');
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932585592
GPR[SPVAP]-1659932585592
GPR[EPVAP]-1659932587536
GPR[SPVATF]-1659932587536
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932589315
GPR[EPVS]-1659932589315
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
s.append(value);
s.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932589317
GPR[SPVAP]-1659932589317
GPR[EPVAP]-1659932590363
GPR[EPVS]-1659932590363
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
s.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932590364
GPR[SPVAP]-1659932590364
GPR[EPVAP]-1659932591414
GPR[EPVS]-1659932591414
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
s.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932591415
GPR[SPVAP]-1659932591415
GPR[EPVAP]-1659932592464
GPR[EPVS]-1659932592464
========
outBuffer.append(" / ");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932592466
GPR[SPVAP]-1659932592466
GPR[EPVAP]-1659932594374
GPR[SPVATF]-1659932594374
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932596157
GPR[EPVS]-1659932596157
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.abs(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932596159
GPR[SPVAP]-1659932596159
GPR[EPVAP]-1659932597234
GPR[EPVS]-1659932597234
========
outBuffer.append(" / ");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
toAppendTo.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932597236
GPR[SPVAP]-1659932597236
GPR[EPVAP]-1659932598285
GPR[EPVS]-1659932598285
========
while(values.hasNext()){
Comparable<?> value=values.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932598287
GPR[SPVAP]-1659932598287
GPR[EPVAP]-1659932599334
GPR[EPVS]-1659932599334
========
while(values.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932599335
GPR[SPVAP]-1659932599335
GPR[EPVAP]-1659932600407
GPR[EPVS]-1659932600407
========
while(iter.hasNext()){
Comparable<?> value=values.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932600408
GPR[SPVAP]-1659932600408
GPR[EPVAP]-1659932601478
GPR[EPVS]-1659932601478
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.setValue(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932601479
GPR[SPVAP]-1659932601479
GPR[EPVAP]-1659932602559
GPR[EPVS]-1659932602559
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.getEntry(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932602561
GPR[SPVAP]-1659932602561
GPR[EPVAP]-1659932603615
GPR[EPVS]-1659932603615
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.abs(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932603617
GPR[SPVAP]-1659932603617
GPR[EPVAP]-1659932604674
GPR[EPVS]-1659932604674
========
while(iter.hasNext()){
if(Double.doubleToLongBits(iter.value())!=Double.doubleToLongBits(getEntry(iter.key()))){
return false;
}
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932604676
GPR[SPVAP]-1659932604676
GPR[EPVAP]-1659932605731
GPR[EPVS]-1659932605731
========
while(iter.hasNext()){
if(!iter.value().equals(getEntry(iter.key()))){
return false;
}
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932605733
GPR[SPVAP]-1659932605733
GPR[EPVAP]-1659932606797
GPR[EPVS]-1659932606797
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.add('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932606799
GPR[SPVAP]-1659932606799
GPR[EPVAP]-1659932607855
GPR[EPVS]-1659932607855
========
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return true;
}
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932607857
GPR[SPVAP]-1659932607857
GPR[EPVAP]-1659932608910
GPR[EPVS]-1659932608910
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.abs('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932608912
GPR[SPVAP]-1659932608912
GPR[EPVAP]-1659932609968
GPR[EPVS]-1659932609968
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.add(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932609970
GPR[SPVAP]-1659932609970
GPR[EPVAP]-1659932611060
GPR[EPVS]-1659932611060
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
if(iter.key()<v.length){
value=v[idx];
}
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932611061
GPR[SPVAP]-1659932611061
GPR[EPVAP]-1659932612154
GPR[EPVS]-1659932612154
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.doubleToLongBits('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932612155
GPR[SPVAP]-1659932612155
GPR[EPVAP]-1659932613261
GPR[EPVS]-1659932613261
========
while(iter.hasNext()){
if(Double.isNaN(value)){
return false;
}
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932613262
GPR[SPVAP]-1659932613262
GPR[EPVAP]-1659932614325
GPR[EPVS]-1659932614325
========
while(iter.hasNext()){
if(Double.isInfinite(value)){
infiniteFound=true;
}
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932614326
GPR[SPVAP]-1659932614326
GPR[EPVAP]-1659932615391
GPR[EPVS]-1659932615391
========
while(iter.hasNext()){
if(Double.isNaN(value)){
return false;
}
if(Double.isInfinite(value)){
infiniteFound=true;
}

Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932615392
GPR[SPVAP]-1659932615392
GPR[EPVAP]-1659932616449
GPR[EPVS]-1659932616449
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.setIndex(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932616451
GPR[SPVAP]-1659932616451
GPR[EPVAP]-1659932617518
GPR[EPVS]-1659932617518
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
next=new EntryImpl();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932617519
GPR[SPVAP]-1659932617519
GPR[EPVAP]-1659932618584
GPR[EPVS]-1659932618584
========
while(iter.hasNext()){
bytes[i]=(byte)(next(32)&0xff);
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932618586
GPR[SPVAP]-1659932618586
GPR[EPVAP]-1659932619658
GPR[EPVS]-1659932619658
========
while(iter.hasNext()){
bytes[i+1]=(byte)((next(32)>>8)&0xff);
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932619659
GPR[SPVAP]-1659932619659
GPR[EPVAP]-1659932620718
GPR[EPVS]-1659932620718
========
while(iter.hasNext()){
bytes[i+2]=(byte)((next(32)>>16)&0xff);
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932620719
GPR[SPVAP]-1659932620719
GPR[EPVAP]-1659932621777
GPR[EPVS]-1659932621778
========
while(iter.hasNext()){
bytes[i+3]=(byte)((next(32)>>24)&0xff);
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932621779
GPR[SPVAP]-1659932621779
GPR[EPVAP]-1659932622851
GPR[EPVS]-1659932622851
========
while(iter.hasNext()){
i+=4;
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932622852
GPR[SPVAP]-1659932622852
GPR[EPVAP]-1659932623922
GPR[EPVS]-1659932623922
========
while(iter.hasNext()){
bytes[i]=(byte)(next(32)&0xff);
bytes[i+1]=(byte)((next(32)>>8)&0xff);
bytes[i+2]=(byte)((next(32)>>16)&0xff);
bytes[i+3]=(byte)((next(32)>>24)&0xff);
i+=4;

Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932623925
GPR[SPVAP]-1659932623925
GPR[EPVAP]-1659932625013
GPR[EPVS]-1659932625013
========
this.nf=nf;
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}

========
MM Copying to MM
GPR[SPVS]-1659932625015
GPR[SPVAP]-1659932625015
GPR[EPVAP]-1659932626075
GPR[EPVS]-1659932626075
GPR[ESUN]-1659932626075
GPR[SSUN]-1659932626075
org.apache.commons.math.stat.Frequency,86
UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  next=-2;
  if (current < 0) {
    throw MathRuntimeException.createNoSuchElementException(EXHAUSTED_ITERATOR_MESSAGE);
  }
}

UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  next=-2;
  if (current < 0) {
    throw MathRuntimeException.createNoSuchElementException(EXHAUSTED_ITERATOR_MESSAGE);
  }
}

========
outBuffer.append(getCount(value));
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932627443
GPR[SPVAP]-1659932627443
GPR[EPVAP]-1659932629877
GPR[EPVS]-1659932629877
========
Comparable<?> value=iter.next();
res.append(value);
res.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932629879
GPR[SPVAP]-1659932629879
GPR[EPVAP]-1659932631143
GPR[EPVS]-1659932631143
========
Comparable<?> value=iter.next();
res.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932631144
GPR[SPVAP]-1659932631144
GPR[EPVAP]-1659932632390
GPR[EPVS]-1659932632390
========
Comparable<?> value=iter.next();
outBuffer.append(value);
res.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932632391
GPR[SPVAP]-1659932632391
GPR[EPVAP]-1659932633699
GPR[EPVS]-1659932633699
========
Comparable<?> value=iter.next();
outBuffer.append("\n");
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932633701
GPR[SPVAP]-1659932633701
GPR[EPVAP]-1659932637701
GPR[SPVATF]-1659932637701
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932639471
GPR[EPVS]-1659932639471
========
Comparable<?> value=iter.next();
buffer.append(value);
buffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932639473
GPR[SPVAP]-1659932639473
GPR[EPVAP]-1659932640526
GPR[EPVS]-1659932640526
========
Comparable<?> value=iter.next();
buffer.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932640527
GPR[SPVAP]-1659932640527
GPR[EPVAP]-1659932641591
GPR[EPVS]-1659932641591
========
Comparable<?> value=iter.next();
outBuffer.append(value);
buffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932641592
GPR[SPVAP]-1659932641592
GPR[EPVAP]-1659932642644
GPR[EPVS]-1659932642644
========
outBuffer.append(nf.format(getCumPct(value)));
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932642646
GPR[SPVAP]-1659932642646
GPR[EPVAP]-1659932643762
GPR[EPVS]-1659932643762
========
outBuffer.append('\n');
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932643763
GPR[SPVAP]-1659932643763
GPR[EPVAP]-1659932645669
GPR[SPVATF]-1659932645670
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932647457
GPR[EPVS]-1659932647457
========
Comparable<?> value=iter.next();
buff.append(value);
buff.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932647459
GPR[SPVAP]-1659932647459
GPR[EPVAP]-1659932648530
GPR[EPVS]-1659932648530
========
Comparable<?> value=iter.next();
buff.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932648531
GPR[SPVAP]-1659932648531
GPR[EPVAP]-1659932649602
GPR[EPVS]-1659932649602
========
Comparable<?> value=iter.next();
outBuffer.append(value);
buff.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932649603
GPR[SPVAP]-1659932649603
GPR[EPVAP]-1659932650657
GPR[EPVS]-1659932650657
========
append(outBuffer,getMin(),"min: ",", ","\n");
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932650658
GPR[SPVAP]-1659932650658
GPR[EPVAP]-1659932651727
GPR[EPVS]-1659932651727
========
Comparable<?> value=iter.next();
sb.append(value);
sb.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932651728
GPR[SPVAP]-1659932651728
GPR[EPVAP]-1659932652795
GPR[EPVS]-1659932652795
========
Comparable<?> value=iter.next();
sb.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932652796
GPR[SPVAP]-1659932652796
GPR[EPVAP]-1659932653855
GPR[EPVS]-1659932653855
========
Comparable<?> value=iter.next();
outBuffer.append(value);
sb.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932653856
GPR[SPVAP]-1659932653856
GPR[EPVAP]-1659932654913
GPR[EPVS]-1659932654913
========
outBuffer.append(')');
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932654914
GPR[SPVAP]-1659932654914
GPR[EPVAP]-1659932656834
GPR[SPVATF]-1659932656834
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932658592
GPR[EPVS]-1659932658592
========
Comparable<?> value=iter.next();
s.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932658593
GPR[SPVAP]-1659932658593
GPR[EPVAP]-1659932659661
GPR[EPVS]-1659932659661
========
Comparable<?> value=iter.next();
toAppendTo.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932659662
GPR[SPVAP]-1659932659662
GPR[EPVAP]-1659932660719
GPR[EPVS]-1659932660719
========
Comparable<?> value=iter.next();
append(outBuffer,getSumLog(),"sum of logarithms: ",", ","\n");
outBuffer.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932660720
GPR[SPVAP]-1659932660720
GPR[EPVAP]-1659932661781
GPR[EPVS]-1659932661781
========
Comparable<?> value=iter.next();
append(outBuffer,getStandardDeviation(),"standard deviation: ",", ","\n");
outBuffer.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932661782
GPR[SPVAP]-1659932661782
GPR[EPVAP]-1659932662852
GPR[EPVS]-1659932662852
========
Comparable<?> value=iter.next();
toAppendTo.append(value);
toAppendTo.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932662854
GPR[SPVAP]-1659932662854
GPR[EPVAP]-1659932663968
GPR[EPVS]-1659932663968
========
Comparable<?> value=iter.next();
outBuffer.append(value);
toAppendTo.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932663969
GPR[SPVAP]-1659932663969
GPR[EPVAP]-1659932665019
GPR[EPVS]-1659932665019
========
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.setEndIndex('\t');

========
MM Copying to MM
GPR[SPVS]-1659932665021
GPR[SPVAP]-1659932665021
GPR[EPVAP]-1659932666087
GPR[EPVS]-1659932666087
========
outBuffer.append(" / ");
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932666088
GPR[SPVAP]-1659932666088
GPR[EPVAP]-1659932667976
GPR[SPVATF]-1659932667976
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932669782
GPR[EPVS]-1659932669782
========
outBuffer.append(" / ");
Comparable<?> value=iter.next();
toAppendTo.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932669784
GPR[SPVAP]-1659932669784
GPR[EPVAP]-1659932670826
GPR[EPVS]-1659932670827
========
outBuffer.append(" / ");
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.setEndIndex('\t');

========
MM Copying to MM
GPR[SPVS]-1659932670828
GPR[SPVAP]-1659932670828
GPR[EPVAP]-1659932671882
GPR[EPVS]-1659932671882
========
Comparable<?> value=values.next();
outBuffer.append(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932671883
GPR[SPVAP]-1659932671883
GPR[EPVAP]-1659932673031
GPR[EPVS]-1659932673031
========
Comparable<?> value=iter.next();
outBuffer.abs(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932673033
GPR[SPVAP]-1659932673033
GPR[EPVAP]-1659932674242
GPR[EPVS]-1659932674242
========
Comparable<?> value=iter.next();
outBuffer.setValue(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932674244
GPR[SPVAP]-1659932674244
GPR[EPVAP]-1659932675379
GPR[EPVS]-1659932675379
========
Comparable<?> value=iter.next();
outBuffer.getEntry(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932675381
GPR[SPVAP]-1659932675381
GPR[EPVAP]-1659932676565
GPR[EPVS]-1659932676565
========
Comparable<?> value=iter.next();
outBuffer.setIndex(value);
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932676567
GPR[SPVAP]-1659932676567
GPR[EPVAP]-1659932677699
GPR[EPVS]-1659932677699
GPR[ESUN]-1659932677700
GPR[SSUN]-1659932677700
org.apache.commons.math.stat.Frequency,87
GPR[ESUN]-1659932678549
GPR[SSUN]-1659932678549
org.apache.commons.math.stat.Frequency,88
========
outBuffer.append('\t');
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932679733
GPR[SPVAP]-1659932679733
GPR[EPVAP]-1659932684839
GPR[SPVATF]-1659932684839
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932686620
GPR[EPVS]-1659932686620
========
outBuffer.append(nf.format(getPct(value)));
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932686621
GPR[SPVAP]-1659932686621
GPR[EPVAP]-1659932688562
GPR[SPVATF]-1659932688562
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932690356
GPR[EPVS]-1659932690356
========
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932690357
GPR[SPVAP]-1659932690357
GPR[EPVAP]-1659932692282
GPR[SPVATF]-1659932692282
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932694091
GPR[EPVS]-1659932694091
========
outBuffer.append("\n");
outBuffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932694093
GPR[SPVAP]-1659932694093
GPR[EPVAP]-1659932696007
GPR[SPVATF]-1659932696007
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932697821
GPR[EPVS]-1659932697821
========
res.append(value);
res.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932697823
GPR[SPVAP]-1659932697823
GPR[EPVAP]-1659932698894
GPR[EPVS]-1659932698895
========
res.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932698896
GPR[SPVAP]-1659932698896
GPR[EPVAP]-1659932699980
GPR[EPVS]-1659932699980
========
outBuffer.append(value);
res.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932699981
GPR[SPVAP]-1659932699981
GPR[EPVAP]-1659932701099
GPR[EPVS]-1659932701099
========
buffer.append(value);
buffer.append('\t');
buffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932701102
GPR[SPVAP]-1659932701102
GPR[EPVAP]-1659932702150
GPR[EPVS]-1659932702150
========
outBuffer.append(value);
buffer.append('\t');
buffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932702151
GPR[SPVAP]-1659932702151
GPR[EPVAP]-1659932703210
GPR[EPVS]-1659932703210
========
buffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932703211
GPR[SPVAP]-1659932703211
GPR[EPVAP]-1659932704267
GPR[EPVS]-1659932704267
========
outBuffer.append(value);
buffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932704269
GPR[SPVAP]-1659932704269
GPR[EPVAP]-1659932705324
GPR[EPVS]-1659932705324
========
outBuffer.append(value);
outBuffer.append('\t');
buffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932705325
GPR[SPVAP]-1659932705325
GPR[EPVAP]-1659932706405
GPR[EPVS]-1659932706405
========
append(outBuffer,getMin(),"min: ",", ","\n");
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932706407
GPR[SPVAP]-1659932706407
GPR[EPVAP]-1659932707475
GPR[EPVS]-1659932707475
========
buff.append(value);
buff.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932707477
GPR[SPVAP]-1659932707477
GPR[EPVAP]-1659932708528
GPR[EPVS]-1659932708528
========
buff.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932708529
GPR[SPVAP]-1659932708529
GPR[EPVAP]-1659932709588
GPR[EPVS]-1659932709588
========
outBuffer.append(value);
buff.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932709589
GPR[SPVAP]-1659932709589
GPR[EPVAP]-1659932710651
GPR[EPVS]-1659932710651
========
sb.append(value);
sb.append('\t');
sb.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932710653
GPR[SPVAP]-1659932710653
GPR[EPVAP]-1659932711701
GPR[EPVS]-1659932711701
========
outBuffer.append(value);
sb.append('\t');
sb.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932711702
GPR[SPVAP]-1659932711702
GPR[EPVAP]-1659932712765
GPR[EPVS]-1659932712765
========
sb.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932712767
GPR[SPVAP]-1659932712767
GPR[EPVAP]-1659932713863
GPR[EPVS]-1659932713863
========
outBuffer.append(value);
sb.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932713865
GPR[SPVAP]-1659932713865
GPR[EPVAP]-1659932714915
GPR[EPVS]-1659932714915
========
outBuffer.append(value);
outBuffer.append('\t');
sb.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932714916
GPR[SPVAP]-1659932714916
GPR[EPVAP]-1659932715976
GPR[EPVS]-1659932715976
========
append(outBuffer,getSumLog(),"sum of logarithms: ",", ","\n");
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932715978
GPR[SPVAP]-1659932715978
GPR[EPVAP]-1659932717034
GPR[EPVS]-1659932717034
========
append(outBuffer,getStandardDeviation(),"standard deviation: ",", ","\n");
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932717036
GPR[SPVAP]-1659932717036
GPR[EPVAP]-1659932718101
GPR[EPVS]-1659932718101
========
s.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932718102
GPR[SPVAP]-1659932718102
GPR[EPVAP]-1659932719197
GPR[EPVS]-1659932719197
========
toAppendTo.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932719198
GPR[SPVAP]-1659932719198
GPR[EPVAP]-1659932720258
GPR[EPVS]-1659932720258
========
toAppendTo.append(value);
toAppendTo.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932720260
GPR[SPVAP]-1659932720260
GPR[EPVAP]-1659932721319
GPR[EPVS]-1659932721319
========
outBuffer.append(value);
toAppendTo.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932721320
GPR[SPVAP]-1659932721320
GPR[EPVAP]-1659932722387
GPR[EPVS]-1659932722387
========
outBuffer.append(value);
outBuffer.setEndIndex('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932722389
GPR[SPVAP]-1659932722389
GPR[EPVAP]-1659932723458
GPR[EPVS]-1659932723458
========
outBuffer.append(value);
outBuffer.append('\t');
toAppendTo.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932723459
GPR[SPVAP]-1659932723459
GPR[EPVAP]-1659932724508
GPR[EPVS]-1659932724508
========
outBuffer.append(value);
toAppendTo.append('\t');
toAppendTo.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932724509
GPR[SPVAP]-1659932724509
GPR[EPVAP]-1659932725555
GPR[EPVS]-1659932725555
========
toAppendTo.append(value);
outBuffer.append('\t');
toAppendTo.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932725557
GPR[SPVAP]-1659932725557
GPR[EPVAP]-1659932726635
GPR[EPVS]-1659932726635
========
outBuffer.append(" / ");
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932726637
GPR[SPVAP]-1659932726637
GPR[EPVAP]-1659932728556
GPR[SPVATF]-1659932728556
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932730355
GPR[EPVS]-1659932730355
========
outBuffer.append(" / ");
outBuffer.append(value);
outBuffer.setEndIndex('\t');
outBuffer.append(getCount(value));

========
MM Copying to MM
GPR[SPVS]-1659932730356
GPR[SPVAP]-1659932730356
GPR[EPVAP]-1659932731424
GPR[EPVS]-1659932731425
GPR[ESUN]-1659932731426
GPR[SSUN]-1659932731426
org.apache.commons.math.stat.Frequency,89
========
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932732695
GPR[SPVAP]-1659932732695
GPR[EPVAP]-1659932737771
GPR[SPVATF]-1659932737771
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932739557
GPR[EPVS]-1659932739557
========
outBuffer.append('\t');
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932739558
GPR[SPVAP]-1659932739558
GPR[EPVAP]-1659932741474
GPR[SPVATF]-1659932741474
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932743275
GPR[EPVS]-1659932743275
========
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932743277
GPR[SPVAP]-1659932743277
GPR[EPVAP]-1659932745141
GPR[SPVATF]-1659932745141
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932746973
GPR[EPVS]-1659932746973
========
res.append('\t');
res.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932746975
GPR[SPVAP]-1659932746975
GPR[EPVAP]-1659932748048
GPR[EPVS]-1659932748048
========
res.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932748049
GPR[SPVAP]-1659932748049
GPR[EPVAP]-1659932749131
GPR[EPVS]-1659932749131
========
outBuffer.append('\t');
res.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932749132
GPR[SPVAP]-1659932749132
GPR[EPVAP]-1659932750203
GPR[EPVS]-1659932750203
========
buffer.append('\t');
buffer.append(getCount(value));
buffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932750212
GPR[SPVAP]-1659932750212
GPR[EPVAP]-1659932751265
GPR[EPVS]-1659932751266
========
outBuffer.append('\t');
buffer.append(getCount(value));
buffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932751267
GPR[SPVAP]-1659932751267
GPR[EPVAP]-1659932752324
GPR[EPVS]-1659932752324
========
buffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932752326
GPR[SPVAP]-1659932752326
GPR[EPVAP]-1659932753383
GPR[EPVS]-1659932753383
========
outBuffer.append('\t');
buffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932753384
GPR[SPVAP]-1659932753384
GPR[EPVAP]-1659932754445
GPR[EPVS]-1659932754445
========
outBuffer.append('\t');
outBuffer.append(getCount(value));
buffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932754447
GPR[SPVAP]-1659932754447
GPR[EPVAP]-1659932755495
GPR[EPVS]-1659932755495
========
s.append('\t');
s.append(getCount(value));
s.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932755497
GPR[SPVAP]-1659932755497
GPR[EPVAP]-1659932756558
GPR[EPVS]-1659932756558
========
outBuffer.append('\t');
s.append(getCount(value));
s.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932756559
GPR[SPVAP]-1659932756559
GPR[EPVAP]-1659932757622
GPR[EPVS]-1659932757622
========
s.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932757623
GPR[SPVAP]-1659932757623
GPR[EPVAP]-1659932758675
GPR[EPVS]-1659932758675
========
outBuffer.append('\t');
s.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932758676
GPR[SPVAP]-1659932758676
GPR[EPVAP]-1659932759755
GPR[EPVS]-1659932759755
========
outBuffer.append('\t');
outBuffer.append(getCount(value));
s.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932759756
GPR[SPVAP]-1659932759756
GPR[EPVAP]-1659932760813
GPR[EPVS]-1659932760813
========
s.append('\t');
s.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932760815
GPR[SPVAP]-1659932760815
GPR[EPVAP]-1659932761881
GPR[EPVS]-1659932761881
========
s.append('\t');
outBuffer.append(getCount(value));
s.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932761882
GPR[SPVAP]-1659932761882
GPR[EPVAP]-1659932762941
GPR[EPVS]-1659932762941
========
append(outBuffer,getMin(),"min: ",", ","\n");
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932762942
GPR[SPVAP]-1659932762942
GPR[EPVAP]-1659932763989
GPR[EPVS]-1659932763989
========
sb.append('\t');
sb.append(getCount(value));
sb.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932763995
GPR[SPVAP]-1659932763995
GPR[EPVAP]-1659932765056
GPR[EPVS]-1659932765056
========
outBuffer.append('\t');
sb.append(getCount(value));
sb.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932765058
GPR[SPVAP]-1659932765058
GPR[EPVAP]-1659932766183
GPR[EPVS]-1659932766183
========
sb.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932766185
GPR[SPVAP]-1659932766185
GPR[EPVAP]-1659932767255
GPR[EPVS]-1659932767255
========
outBuffer.append('\t');
sb.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932767257
GPR[SPVAP]-1659932767257
GPR[EPVAP]-1659932768337
GPR[EPVS]-1659932768337
========
outBuffer.append('\t');
outBuffer.append(getCount(value));
sb.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932768339
GPR[SPVAP]-1659932768339
GPR[EPVAP]-1659932769426
GPR[EPVS]-1659932769426
========
append(outBuffer,getSumLog(),"sum of logarithms: ",", ","\n");
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932769428
GPR[SPVAP]-1659932769428
GPR[EPVAP]-1659932770497
GPR[EPVS]-1659932770497
========
append(outBuffer,getStandardDeviation(),"standard deviation: ",", ","\n");
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932770498
GPR[SPVAP]-1659932770498
GPR[EPVAP]-1659932771560
GPR[EPVS]-1659932771560
========
buff.append('\t');
buff.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932771562
GPR[SPVAP]-1659932771562
GPR[EPVAP]-1659932772622
GPR[EPVS]-1659932772622
========
buff.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932772623
GPR[SPVAP]-1659932772623
GPR[EPVAP]-1659932773677
GPR[EPVS]-1659932773677
========
outBuffer.append('\t');
buff.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932773678
GPR[SPVAP]-1659932773678
GPR[EPVAP]-1659932774733
GPR[EPVS]-1659932774733
========
toAppendTo.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932774734
GPR[SPVAP]-1659932774734
GPR[EPVAP]-1659932775837
GPR[EPVS]-1659932775837
========
toAppendTo.append('\t');
toAppendTo.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932775839
GPR[SPVAP]-1659932775839
GPR[EPVAP]-1659932776911
GPR[EPVS]-1659932776911
========
outBuffer.append('\t');
toAppendTo.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932776912
GPR[SPVAP]-1659932776912
GPR[EPVAP]-1659932777972
GPR[EPVS]-1659932777972
========
outBuffer.setBeginIndex('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932777973
GPR[SPVAP]-1659932777973
GPR[EPVAP]-1659932779036
GPR[EPVS]-1659932779036
========
outBuffer.append('\t');
outBuffer.setEndIndex(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932779037
GPR[SPVAP]-1659932779037
GPR[EPVAP]-1659932780086
GPR[EPVS]-1659932780086
========
outBuffer.append('\t');
outBuffer.append(getCount(value));
toAppendTo.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932780087
GPR[SPVAP]-1659932780087
GPR[EPVAP]-1659932781143
GPR[EPVS]-1659932781143
========
outBuffer.append('\t');
toAppendTo.append(getCount(value));
toAppendTo.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932781145
GPR[SPVAP]-1659932781145
GPR[EPVAP]-1659932782191
GPR[EPVS]-1659932782191
========
outBuffer.setEndIndex('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932782192
GPR[SPVAP]-1659932782192
GPR[EPVAP]-1659932783273
GPR[EPVS]-1659932783273
========
toAppendTo.append('\t');
outBuffer.append(getCount(value));
toAppendTo.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932783275
GPR[SPVAP]-1659932783275
GPR[EPVAP]-1659932784349
GPR[EPVS]-1659932784349
========
outBuffer.abs('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932784350
GPR[SPVAP]-1659932784350
GPR[EPVAP]-1659932785408
GPR[EPVS]-1659932785408
========
outBuffer.append(" / ");
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932785409
GPR[SPVAP]-1659932785409
GPR[EPVAP]-1659932787332
GPR[SPVATF]-1659932787332
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932789119
GPR[EPVS]-1659932789119
========
outBuffer.setBeginIndex('\t');
outBuffer.setEndIndex(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932789120
GPR[SPVAP]-1659932789120
GPR[EPVAP]-1659932790195
GPR[EPVS]-1659932790195
========
outBuffer.append(" / ");
outBuffer.setBeginIndex('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932790196
GPR[SPVAP]-1659932790196
GPR[EPVAP]-1659932791274
GPR[EPVS]-1659932791274
========
outBuffer.append(" / ");
outBuffer.append('\t');
outBuffer.setEndIndex(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932791275
GPR[SPVAP]-1659932791275
GPR[EPVAP]-1659932792330
GPR[EPVS]-1659932792330
========
outBuffer.append(" / ");
outBuffer.setBeginIndex('\t');
outBuffer.setEndIndex(getCount(value));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932792332
GPR[SPVAP]-1659932792332
GPR[EPVAP]-1659932793403
GPR[EPVS]-1659932793403
GPR[ESUN]-1659932793408
GPR[SSUN]-1659932793408
org.apache.commons.math.stat.Frequency,90
========
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932794760
GPR[SPVAP]-1659932794760
GPR[EPVAP]-1659932799833
GPR[SPVATF]-1659932799833
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932801624
GPR[EPVS]-1659932801624
========
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932801625
GPR[SPVAP]-1659932801625
GPR[EPVAP]-1659932803574
GPR[SPVATF]-1659932803574
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932805376
GPR[EPVS]-1659932805376
========
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932805377
GPR[SPVAP]-1659932805377
GPR[EPVAP]-1659932807275
GPR[SPVATF]-1659932807275
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932809066
GPR[EPVS]-1659932809066
========
res.append(getCount(value));
res.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932809068
GPR[SPVAP]-1659932809068
GPR[EPVAP]-1659932810167
GPR[EPVS]-1659932810167
========
res.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932810168
GPR[SPVAP]-1659932810168
GPR[EPVAP]-1659932811215
GPR[EPVS]-1659932811215
========
outBuffer.append(getCount(value));
res.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932811216
GPR[SPVAP]-1659932811216
GPR[EPVAP]-1659932812302
GPR[EPVS]-1659932812302
========
buffer.append(getCount(value));
buffer.append('\t');
buffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932812305
GPR[SPVAP]-1659932812305
GPR[EPVAP]-1659932813363
GPR[EPVS]-1659932813363
========
outBuffer.append(getCount(value));
buffer.append('\t');
buffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932813364
GPR[SPVAP]-1659932813364
GPR[EPVAP]-1659932814439
GPR[EPVS]-1659932814439
========
buffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932814440
GPR[SPVAP]-1659932814440
GPR[EPVAP]-1659932815491
GPR[EPVS]-1659932815491
========
outBuffer.append(getCount(value));
buffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932815492
GPR[SPVAP]-1659932815492
GPR[EPVAP]-1659932816546
GPR[EPVS]-1659932816546
========
outBuffer.append(getCount(value));
outBuffer.append('\t');
buffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932816547
GPR[SPVAP]-1659932816547
GPR[EPVAP]-1659932817611
GPR[EPVS]-1659932817611
========
append(outBuffer,getMin(),"min: ",", ","\n");
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932817612
GPR[SPVAP]-1659932817612
GPR[EPVAP]-1659932818669
GPR[EPVS]-1659932818669
========
append(outBuffer,getSumLog(),"sum of logarithms: ",", ","\n");
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932818670
GPR[SPVAP]-1659932818670
GPR[EPVAP]-1659932819782
GPR[EPVS]-1659932819782
========
append(outBuffer,getStandardDeviation(),"standard deviation: ",", ","\n");
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932819783
GPR[SPVAP]-1659932819783
GPR[EPVAP]-1659932820847
GPR[EPVS]-1659932820847
========
buff.append(getCount(value));
buff.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932820849
GPR[SPVAP]-1659932820849
GPR[EPVAP]-1659932821922
GPR[EPVS]-1659932821922
========
buff.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932821924
GPR[SPVAP]-1659932821924
GPR[EPVAP]-1659932822975
GPR[EPVS]-1659932822975
========
outBuffer.append(getCount(value));
buff.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932822976
GPR[SPVAP]-1659932822976
GPR[EPVAP]-1659932824052
GPR[EPVS]-1659932824052
========
sb.append(getCount(value));
sb.append('\t');
sb.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932824054
GPR[SPVAP]-1659932824054
GPR[EPVAP]-1659932825112
GPR[EPVS]-1659932825112
========
outBuffer.append(getCount(value));
sb.append('\t');
sb.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932825113
GPR[SPVAP]-1659932825113
GPR[EPVAP]-1659932826155
GPR[EPVS]-1659932826155
========
sb.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932826156
GPR[SPVAP]-1659932826156
GPR[EPVAP]-1659932827215
GPR[EPVS]-1659932827215
========
outBuffer.append(getCount(value));
sb.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932827216
GPR[SPVAP]-1659932827216
GPR[EPVAP]-1659932828325
GPR[EPVS]-1659932828325
========
outBuffer.append(getCount(value));
outBuffer.append('\t');
sb.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932828326
GPR[SPVAP]-1659932828326
GPR[EPVAP]-1659932829403
GPR[EPVS]-1659932829403
========
toAppendTo.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932829405
GPR[SPVAP]-1659932829405
GPR[EPVAP]-1659932830458
GPR[EPVS]-1659932830458
========
s.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932830459
GPR[SPVAP]-1659932830459
GPR[EPVAP]-1659932831529
GPR[EPVS]-1659932831529
========
outBuffer.setBeginIndex(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932831531
GPR[SPVAP]-1659932831531
GPR[EPVAP]-1659932832590
GPR[EPVS]-1659932832590
========
outBuffer.append(getCount(value));
outBuffer.setEndIndex('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932832591
GPR[SPVAP]-1659932832591
GPR[EPVAP]-1659932833663
GPR[EPVS]-1659932833663
========
outBuffer.append(getCount(value));
outBuffer.append('\t');
toAppendTo.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932833664
GPR[SPVAP]-1659932833664
GPR[EPVAP]-1659932834708
GPR[EPVS]-1659932834708
========
toAppendTo.append(getCount(value));
toAppendTo.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932834710
GPR[SPVAP]-1659932834710
GPR[EPVAP]-1659932835773
GPR[EPVS]-1659932835773
========
outBuffer.append(getCount(value));
toAppendTo.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932835775
GPR[SPVAP]-1659932835775
GPR[EPVAP]-1659932836827
GPR[EPVS]-1659932836827
========
outBuffer.append(getCount(value));
toAppendTo.append('\t');
toAppendTo.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932836828
GPR[SPVAP]-1659932836828
GPR[EPVAP]-1659932837896
GPR[EPVS]-1659932837896
========
outBuffer.setEndIndex(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932837898
GPR[SPVAP]-1659932837898
GPR[EPVAP]-1659932838955
GPR[EPVS]-1659932838955
========
outBuffer.append(" / ");
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932838957
GPR[SPVAP]-1659932838957
GPR[EPVAP]-1659932840866
GPR[SPVATF]-1659932840866
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932842648
GPR[EPVS]-1659932842648
========
outBuffer.setBeginIndex(getCount(value));
outBuffer.setEndIndex('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932842649
GPR[SPVAP]-1659932842649
GPR[EPVAP]-1659932843711
GPR[EPVS]-1659932843711
========
outBuffer.append(" / ");
outBuffer.setBeginIndex(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932843712
GPR[SPVAP]-1659932843712
GPR[EPVAP]-1659932844771
GPR[EPVS]-1659932844771
========
outBuffer.append(" / ");
outBuffer.append(getCount(value));
outBuffer.setEndIndex('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932844772
GPR[SPVAP]-1659932844772
GPR[EPVAP]-1659932845827
GPR[EPVS]-1659932845827
========
outBuffer.append(" / ");
outBuffer.setBeginIndex(getCount(value));
outBuffer.setEndIndex('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932845828
GPR[SPVAP]-1659932845828
GPR[EPVAP]-1659932846908
GPR[EPVS]-1659932846908
========
outBuffer.setMaximumFractionDigits(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932846910
GPR[SPVAP]-1659932846910
GPR[EPVAP]-1659932847977
GPR[EPVS]-1659932847977
========
outBuffer.setIndex(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932847979
GPR[SPVAP]-1659932847979
GPR[EPVAP]-1659932849023
GPR[EPVS]-1659932849023
========
this.nf=format;
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932849025
GPR[SPVAP]-1659932849025
GPR[EPVAP]-1659932850090
GPR[EPVS]-1659932850090
GPR[ESUN]-1659932850090
GPR[SSUN]-1659932850090
org.apache.commons.math.stat.Frequency,91
========
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932851393
GPR[SPVAP]-1659932851393
GPR[EPVAP]-1659932856410
GPR[SPVATF]-1659932856410
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932858248
GPR[EPVS]-1659932858248
========
outBuffer.append('\t');
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932858250
GPR[SPVAP]-1659932858250
GPR[EPVAP]-1659932860201
GPR[SPVATF]-1659932860201
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932861978
GPR[EPVS]-1659932861978
========
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932861979
GPR[SPVAP]-1659932861979
GPR[EPVAP]-1659932863904
GPR[SPVATF]-1659932863905
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932865704
GPR[EPVS]-1659932865704
========
res.append('\t');
res.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932865705
GPR[SPVAP]-1659932865705
GPR[EPVAP]-1659932866777
GPR[EPVS]-1659932866777
========
res.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932866779
GPR[SPVAP]-1659932866779
GPR[EPVAP]-1659932867835
GPR[EPVS]-1659932867835
========
outBuffer.append('\t');
res.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932867836
GPR[SPVAP]-1659932867836
GPR[EPVAP]-1659932868951
GPR[EPVS]-1659932868951
========
buffer.append('\t');
buffer.append(nf.format(getPct(value)));
buffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932868954
GPR[SPVAP]-1659932868954
GPR[EPVAP]-1659932870005
GPR[EPVS]-1659932870005
========
outBuffer.append('\t');
buffer.append(nf.format(getPct(value)));
buffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932870006
GPR[SPVAP]-1659932870006
GPR[EPVAP]-1659932871062
GPR[EPVS]-1659932871062
========
buffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932871063
GPR[SPVAP]-1659932871063
GPR[EPVAP]-1659932872164
GPR[EPVS]-1659932872164
========
outBuffer.append('\t');
buffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932872166
GPR[SPVAP]-1659932872166
GPR[EPVAP]-1659932873226
GPR[EPVS]-1659932873226
========
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
buffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932873227
GPR[SPVAP]-1659932873227
GPR[EPVAP]-1659932874324
GPR[EPVS]-1659932874324
========
append(outBuffer,getMin(),"min: ",", ","\n");
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932874325
GPR[SPVAP]-1659932874325
GPR[EPVAP]-1659932875387
GPR[EPVS]-1659932875387
========
append(outBuffer,getSumLog(),"sum of logarithms: ",", ","\n");
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932875389
GPR[SPVAP]-1659932875389
GPR[EPVAP]-1659932876446
GPR[EPVS]-1659932876446
========
append(outBuffer,getStandardDeviation(),"standard deviation: ",", ","\n");
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932876447
GPR[SPVAP]-1659932876447
GPR[EPVAP]-1659932877519
GPR[EPVS]-1659932877519
========
buff.append('\t');
buff.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932877521
GPR[SPVAP]-1659932877521
GPR[EPVAP]-1659932878610
GPR[EPVS]-1659932878610
========
buff.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932878611
GPR[SPVAP]-1659932878611
GPR[EPVAP]-1659932879681
GPR[EPVS]-1659932879681
========
outBuffer.append('\t');
buff.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932879682
GPR[SPVAP]-1659932879682
GPR[EPVAP]-1659932880731
GPR[EPVS]-1659932880731
========
sb.append('\t');
sb.append(nf.format(getPct(value)));
sb.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932880732
GPR[SPVAP]-1659932880732
GPR[EPVAP]-1659932881795
GPR[EPVS]-1659932881795
========
outBuffer.append('\t');
sb.append(nf.format(getPct(value)));
sb.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932881796
GPR[SPVAP]-1659932881796
GPR[EPVAP]-1659932882884
GPR[EPVS]-1659932882884
========
sb.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932882885
GPR[SPVAP]-1659932882885
GPR[EPVAP]-1659932883937
GPR[EPVS]-1659932883937
========
outBuffer.append('\t');
sb.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932883938
GPR[SPVAP]-1659932883938
GPR[EPVAP]-1659932884986
GPR[EPVS]-1659932884986
========
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
sb.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932884987
GPR[SPVAP]-1659932884987
GPR[EPVAP]-1659932886057
GPR[EPVS]-1659932886057
========
toAppendTo.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932886058
GPR[SPVAP]-1659932886058
GPR[EPVAP]-1659932887116
GPR[EPVS]-1659932887116
========
s.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932887118
GPR[SPVAP]-1659932887118
GPR[EPVAP]-1659932888186
GPR[EPVS]-1659932888186
========
toAppendTo.append('\t');
outBuffer.append(nf.format(getPct(value)));
toAppendTo.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932888188
GPR[SPVAP]-1659932888188
GPR[EPVAP]-1659932889267
GPR[EPVS]-1659932889267
========
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
toAppendTo.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932889268
GPR[SPVAP]-1659932889268
GPR[EPVAP]-1659932890339
GPR[EPVS]-1659932890339
========
outBuffer.setBeginIndex('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932890340
GPR[SPVAP]-1659932890340
GPR[EPVAP]-1659932891396
GPR[EPVS]-1659932891396
========
outBuffer.append('\t');
toAppendTo.append(nf.format(getPct(value)));
toAppendTo.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932891398
GPR[SPVAP]-1659932891398
GPR[EPVAP]-1659932892497
GPR[EPVS]-1659932892497
========
outBuffer.setEndIndex('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932892499
GPR[SPVAP]-1659932892499
GPR[EPVAP]-1659932893538
GPR[EPVS]-1659932893538
========
outBuffer.append('\t');
toAppendTo.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932893539
GPR[SPVAP]-1659932893539
GPR[EPVAP]-1659932894600
GPR[EPVS]-1659932894600
========
toAppendTo.append('\t');
toAppendTo.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932894601
GPR[SPVAP]-1659932894601
GPR[EPVAP]-1659932895705
GPR[EPVS]-1659932895705
========
outBuffer.append(" / ");
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932895707
GPR[SPVAP]-1659932895707
GPR[EPVAP]-1659932897635
GPR[SPVATF]-1659932897635
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932899420
GPR[EPVS]-1659932899420
========
outBuffer.append(" / ");
outBuffer.setBeginIndex('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932899421
GPR[SPVAP]-1659932899421
GPR[EPVAP]-1659932900487
GPR[EPVS]-1659932900487
========
outBuffer.setMaximumFractionDigits('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932900488
GPR[SPVAP]-1659932900488
GPR[EPVAP]-1659932901539
GPR[EPVS]-1659932901539
========
outBuffer.setIndex('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932901541
GPR[SPVAP]-1659932901541
GPR[EPVAP]-1659932902622
GPR[EPVS]-1659932902622
========
this.nf=format;
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');

========
MM Copying to MM
GPR[SPVS]-1659932902623
GPR[SPVAP]-1659932902623
GPR[EPVAP]-1659932903719
GPR[EPVS]-1659932903719
GPR[ESUN]-1659932903719
GPR[SSUN]-1659932903719
org.apache.commons.math.stat.Frequency,92
========
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932904986
GPR[SPVAP]-1659932904986
GPR[EPVAP]-1659932910030
GPR[SPVATF]-1659932910030
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932911866
GPR[EPVS]-1659932911866
========
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932911867
GPR[SPVAP]-1659932911867
GPR[EPVAP]-1659932913821
GPR[SPVATF]-1659932913821
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932915650
GPR[EPVS]-1659932915650
========
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932915651
GPR[SPVAP]-1659932915651
GPR[EPVAP]-1659932917580
GPR[SPVATF]-1659932917580
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932919398
GPR[EPVS]-1659932919398
========
res.append(nf.format(getPct(value)));
res.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932919400
GPR[SPVAP]-1659932919400
GPR[EPVAP]-1659932920463
GPR[EPVS]-1659932920463
========
res.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932920464
GPR[SPVAP]-1659932920464
GPR[EPVAP]-1659932921530
GPR[EPVS]-1659932921530
========
outBuffer.append(nf.format(getPct(value)));
res.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932921532
GPR[SPVAP]-1659932921532
GPR[EPVAP]-1659932922591
GPR[EPVS]-1659932922591
========
buffer.append(nf.format(getPct(value)));
buffer.append('\t');
buffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932922593
GPR[SPVAP]-1659932922593
GPR[EPVAP]-1659932923658
GPR[EPVS]-1659932923658
========
outBuffer.append(nf.format(getPct(value)));
buffer.append('\t');
buffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932923659
GPR[SPVAP]-1659932923659
GPR[EPVAP]-1659932924727
GPR[EPVS]-1659932924727
========
buffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932924729
GPR[SPVAP]-1659932924729
GPR[EPVAP]-1659932925798
GPR[EPVS]-1659932925798
========
outBuffer.append(nf.format(getPct(value)));
buffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932925799
GPR[SPVAP]-1659932925799
GPR[EPVAP]-1659932926871
GPR[EPVS]-1659932926871
========
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
buffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932926872
GPR[SPVAP]-1659932926872
GPR[EPVAP]-1659932927941
GPR[EPVS]-1659932927941
========
append(outBuffer,getMin(),"min: ",", ","\n");
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932927942
GPR[SPVAP]-1659932927942
GPR[EPVAP]-1659932929006
GPR[EPVS]-1659932929006
========
toAppendTo.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932929007
GPR[SPVAP]-1659932929007
GPR[EPVAP]-1659932930070
GPR[EPVS]-1659932930070
========
append(outBuffer,getSumLog(),"sum of logarithms: ",", ","\n");
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932930072
GPR[SPVAP]-1659932930072
GPR[EPVAP]-1659932931135
GPR[EPVS]-1659932931135
========
append(outBuffer,getStandardDeviation(),"standard deviation: ",", ","\n");
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932931136
GPR[SPVAP]-1659932931136
GPR[EPVAP]-1659932932222
GPR[EPVS]-1659932932222
========
buff.append(nf.format(getPct(value)));
buff.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932932225
GPR[SPVAP]-1659932932225
GPR[EPVAP]-1659932933283
GPR[EPVS]-1659932933283
========
buff.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932933284
GPR[SPVAP]-1659932933284
GPR[EPVAP]-1659932934326
GPR[EPVS]-1659932934326
========
outBuffer.append(nf.format(getPct(value)));
buff.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932934327
GPR[SPVAP]-1659932934327
GPR[EPVAP]-1659932935389
GPR[EPVS]-1659932935389
========
sb.append(nf.format(getPct(value)));
sb.append('\t');
sb.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932935391
GPR[SPVAP]-1659932935391
GPR[EPVAP]-1659932936439
GPR[EPVS]-1659932936439
========
outBuffer.append(nf.format(getPct(value)));
sb.append('\t');
sb.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932936440
GPR[SPVAP]-1659932936440
GPR[EPVAP]-1659932937505
GPR[EPVS]-1659932937505
========
sb.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932937506
GPR[SPVAP]-1659932937506
GPR[EPVAP]-1659932938549
GPR[EPVS]-1659932938549
========
outBuffer.append(nf.format(getPct(value)));
sb.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932938550
GPR[SPVAP]-1659932938550
GPR[EPVAP]-1659932939615
GPR[EPVS]-1659932939615
========
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
sb.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932939616
GPR[SPVAP]-1659932939616
GPR[EPVAP]-1659932940693
GPR[EPVS]-1659932940693
========
outBuffer.append(nf.format(getPct(value)));
toAppendTo.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932940695
GPR[SPVAP]-1659932940695
GPR[EPVAP]-1659932941750
GPR[EPVS]-1659932941750
========
s.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932941751
GPR[SPVAP]-1659932941751
GPR[EPVAP]-1659932942815
GPR[EPVS]-1659932942815
========
outBuffer.append(nf.format(getPct(value)));
outBuffer.setEndIndex('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932942817
GPR[SPVAP]-1659932942817
GPR[EPVAP]-1659932943869
GPR[EPVS]-1659932943869
========
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
toAppendTo.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932943870
GPR[SPVAP]-1659932943870
GPR[EPVAP]-1659932944931
GPR[EPVS]-1659932944931
========
outBuffer.append(" / ");
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932944933
GPR[SPVAP]-1659932944933
GPR[EPVAP]-1659932947010
GPR[SPVATF]-1659932947010
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932949064
GPR[EPVS]-1659932949064
========
outBuffer.append(" / ");
outBuffer.append(nf.format(getPct(value)));
outBuffer.setEndIndex('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932949066
GPR[SPVAP]-1659932949066
GPR[EPVAP]-1659932950219
GPR[EPVS]-1659932950219
========
toAppendTo.append(nf.format(getPct(value)));
toAppendTo.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932950221
GPR[SPVAP]-1659932950221
GPR[EPVAP]-1659932951357
GPR[EPVS]-1659932951357
========
outBuffer.append(nf.format(getPct(value)));
toAppendTo.append('\t');
toAppendTo.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932951360
GPR[SPVAP]-1659932951360
GPR[EPVAP]-1659932952434
GPR[EPVS]-1659932952434
========
this.nf=format;
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));

========
MM Copying to MM
GPR[SPVS]-1659932952437
GPR[SPVAP]-1659932952437
GPR[EPVAP]-1659932953495
GPR[EPVS]-1659932953495
GPR[ESUN]-1659932953495
GPR[SSUN]-1659932953495
org.apache.commons.math.stat.Frequency,93
========
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932954748
GPR[SPVAP]-1659932954748
GPR[EPVAP]-1659932959791
GPR[SPVATF]-1659932959791
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932961600
GPR[EPVS]-1659932961600
========
outBuffer.append('\t');
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932961601
GPR[SPVAP]-1659932961601
GPR[EPVAP]-1659932963546
GPR[SPVATF]-1659932963546
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932965340
GPR[EPVS]-1659932965340
========
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932965341
GPR[SPVAP]-1659932965341
GPR[EPVAP]-1659932967251
GPR[SPVATF]-1659932967251
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659932969050
GPR[EPVS]-1659932969050
========
res.append('\t');
res.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932969052
GPR[SPVAP]-1659932969052
GPR[EPVAP]-1659932970119
GPR[EPVS]-1659932970119
========
res.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932970120
GPR[SPVAP]-1659932970120
GPR[EPVAP]-1659932971181
GPR[EPVS]-1659932971181
========
outBuffer.append('\t');
res.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932971182
GPR[SPVAP]-1659932971182
GPR[EPVAP]-1659932972229
GPR[EPVS]-1659932972229
========
buffer.append('\t');
buffer.append(nf.format(getCumPct(value)));
buffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932972232
GPR[SPVAP]-1659932972232
GPR[EPVAP]-1659932973283
GPR[EPVS]-1659932973283
========
outBuffer.append('\t');
buffer.append(nf.format(getCumPct(value)));
buffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932973285
GPR[SPVAP]-1659932973285
GPR[EPVAP]-1659932974346
GPR[EPVS]-1659932974347
========
buffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932974348
GPR[SPVAP]-1659932974348
GPR[EPVAP]-1659932975405
GPR[EPVS]-1659932975405
========
outBuffer.append('\t');
buffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932975407
GPR[SPVAP]-1659932975407
GPR[EPVAP]-1659932976477
GPR[EPVS]-1659932976477
========
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
buffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932976478
GPR[SPVAP]-1659932976478
GPR[EPVAP]-1659932977553
GPR[EPVS]-1659932977553
========
append(outBuffer,getMin(),"min: ",", ","\n");
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932977554
GPR[SPVAP]-1659932977554
GPR[EPVAP]-1659932978615
GPR[EPVS]-1659932978615
========
append(outBuffer,getSumLog(),"sum of logarithms: ",", ","\n");
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932978616
GPR[SPVAP]-1659932978616
GPR[EPVAP]-1659932979680
GPR[EPVS]-1659932979680
========
append(outBuffer,getStandardDeviation(),"standard deviation: ",", ","\n");
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932979682
GPR[SPVAP]-1659932979682
GPR[EPVAP]-1659932980742
GPR[EPVS]-1659932980742
========
buff.append('\t');
buff.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932980745
GPR[SPVAP]-1659932980745
GPR[EPVAP]-1659932981823
GPR[EPVS]-1659932981823
========
buff.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932981824
GPR[SPVAP]-1659932981824
GPR[EPVAP]-1659932982891
GPR[EPVS]-1659932982891
========
outBuffer.append('\t');
buff.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932982892
GPR[SPVAP]-1659932982892
GPR[EPVAP]-1659932983947
GPR[EPVS]-1659932983947
========
sb.append('\t');
sb.append(nf.format(getCumPct(value)));
sb.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932983949
GPR[SPVAP]-1659932983949
GPR[EPVAP]-1659932985046
GPR[EPVS]-1659932985046
========
outBuffer.append('\t');
sb.append(nf.format(getCumPct(value)));
sb.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932985047
GPR[SPVAP]-1659932985048
GPR[EPVAP]-1659932986119
GPR[EPVS]-1659932986119
========
sb.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932986120
GPR[SPVAP]-1659932986120
GPR[EPVAP]-1659932987181
GPR[EPVS]-1659932987181
========
outBuffer.append('\t');
sb.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932987182
GPR[SPVAP]-1659932987182
GPR[EPVAP]-1659932988259
GPR[EPVS]-1659932988259
========
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
sb.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932988260
GPR[SPVAP]-1659932988260
GPR[EPVAP]-1659932989311
GPR[EPVS]-1659932989311
========
toAppendTo.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932989312
GPR[SPVAP]-1659932989312
GPR[EPVAP]-1659932990376
GPR[EPVS]-1659932990376
========
s.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932990378
GPR[SPVAP]-1659932990378
GPR[EPVAP]-1659932991431
GPR[EPVS]-1659932991431
========
toAppendTo.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
toAppendTo.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932991433
GPR[SPVAP]-1659932991433
GPR[EPVAP]-1659932992491
GPR[EPVS]-1659932992491
========
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
toAppendTo.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932992492
GPR[SPVAP]-1659932992492
GPR[EPVAP]-1659932993544
GPR[EPVS]-1659932993544
========
outBuffer.setBeginIndex('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932993545
GPR[SPVAP]-1659932993545
GPR[EPVAP]-1659932994618
GPR[EPVS]-1659932994618
========
outBuffer.append('\t');
toAppendTo.append(nf.format(getCumPct(value)));
toAppendTo.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932994619
GPR[SPVAP]-1659932994619
GPR[EPVAP]-1659932995668
GPR[EPVS]-1659932995668
========
outBuffer.setEndIndex('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932995670
GPR[SPVAP]-1659932995670
GPR[EPVAP]-1659932996713
GPR[EPVS]-1659932996713
========
outBuffer.append('\t');
toAppendTo.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932996715
GPR[SPVAP]-1659932996715
GPR[EPVAP]-1659932997776
GPR[EPVS]-1659932997776
========
toAppendTo.append('\t');
toAppendTo.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932997777
GPR[SPVAP]-1659932997777
GPR[EPVAP]-1659932998825
GPR[EPVS]-1659932998825
========
outBuffer.append(" / ");
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659932998826
GPR[SPVAP]-1659932998826
GPR[EPVAP]-1659933000742
GPR[SPVATF]-1659933000742
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933002556
GPR[EPVS]-1659933002556
========
outBuffer.append(" / ");
outBuffer.setBeginIndex('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659933002557
GPR[SPVAP]-1659933002557
GPR[EPVAP]-1659933003647
GPR[EPVS]-1659933003647
========
outBuffer.setMaximumFractionDigits('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659933003648
GPR[SPVAP]-1659933003648
GPR[EPVAP]-1659933004727
GPR[EPVS]-1659933004727
========
outBuffer.setIndex('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659933004729
GPR[SPVAP]-1659933004729
GPR[EPVAP]-1659933005795
GPR[EPVS]-1659933005795
========
this.nf=format;
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');

========
MM Copying to MM
GPR[SPVS]-1659933005797
GPR[SPVAP]-1659933005797
GPR[EPVAP]-1659933006875
GPR[EPVS]-1659933006875
GPR[ESUN]-1659933006875
GPR[SSUN]-1659933006875
org.apache.commons.math.stat.Frequency,94
GPR[ESUN]-1659933007254
GPR[SSUN]-1659933007254
org.apache.commons.math.stat.Frequency,95
Find no block!
GPR[SSUN]-1659933007470
org.apache.commons.math.stat.Frequency,96
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("SummaryStatistics:").append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933008799
GPR[SPVAP]-1659933008799
GPR[EPVAP]-1659933013775
GPR[SPVATF]-1659933013775
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933015559
GPR[EPVS]-1659933015559
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("n: ").append(getN()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933015560
GPR[SPVAP]-1659933015560
GPR[EPVAP]-1659933016622
GPR[EPVS]-1659933016622
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("min: ").append(getMin()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933016623
GPR[SPVAP]-1659933016623
GPR[EPVAP]-1659933017690
GPR[EPVS]-1659933017690
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("max: ").append(getMax()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933017691
GPR[SPVAP]-1659933017691
GPR[EPVAP]-1659933018741
GPR[EPVS]-1659933018741
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933018742
GPR[SPVAP]-1659933018742
GPR[EPVAP]-1659933019792
GPR[EPVS]-1659933019792
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("geometric mean: ").append(getGeometricMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933019793
GPR[SPVAP]-1659933019793
GPR[EPVAP]-1659933020880
GPR[EPVS]-1659933020880
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("variance: ").append(getVariance()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933020882
GPR[SPVAP]-1659933020882
GPR[EPVAP]-1659933021931
GPR[EPVS]-1659933021931
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("sum of squares: ").append(getSumsq()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933021933
GPR[SPVAP]-1659933021933
GPR[EPVAP]-1659933023001
GPR[EPVS]-1659933023001
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("standard deviation: ").append(getStandardDeviation()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933023003
GPR[SPVAP]-1659933023003
GPR[EPVAP]-1659933024083
GPR[EPVS]-1659933024083
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("sum of logs: ").append(getSumOfLogs()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933024084
GPR[SPVAP]-1659933024084
GPR[EPVAP]-1659933025135
GPR[EPVS]-1659933025135
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933025136
GPR[SPVAP]-1659933025136
GPR[EPVAP]-1659933027052
GPR[SPVATF]-1659933027052
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933028829
GPR[EPVS]-1659933028829
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("std dev: ").append(getStandardDeviation()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933028830
GPR[SPVAP]-1659933028830
GPR[EPVAP]-1659933029899
GPR[EPVS]-1659933029899
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("median: ").append(getPercentile(50)).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933029900
GPR[SPVAP]-1659933029900
GPR[EPVAP]-1659933030962
GPR[EPVS]-1659933030962
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("skewness: ").append(getSkewness()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933030963
GPR[SPVAP]-1659933030963
GPR[EPVAP]-1659933032021
GPR[EPVS]-1659933032021
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("kurtosis: ").append(getKurtosis()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933032022
GPR[SPVAP]-1659933032022
GPR[EPVAP]-1659933033067
GPR[EPVS]-1659933033067
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
outBuffer.append("n: ").append(getN()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933033068
GPR[SPVAP]-1659933033068
GPR[EPVAP]-1659933034149
GPR[EPVS]-1659933034149
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
outBuffer.append("min: ").append(getMin()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933034150
GPR[SPVAP]-1659933034150
GPR[EPVAP]-1659933035225
GPR[EPVS]-1659933035225
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
outBuffer.append("max: ").append(getMax()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933035226
GPR[SPVAP]-1659933035226
GPR[EPVAP]-1659933036315
GPR[EPVS]-1659933036315
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933036316
GPR[SPVAP]-1659933036316
GPR[EPVAP]-1659933037391
GPR[EPVS]-1659933037391
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("n: ").append(getN()).append("\n");
outBuffer.append("min: ").append(getMin()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933037393
GPR[SPVAP]-1659933037393
GPR[EPVAP]-1659933038463
GPR[EPVS]-1659933038463
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("n: ").append(getN()).append("\n");
outBuffer.append("max: ").append(getMax()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933038464
GPR[SPVAP]-1659933038464
GPR[EPVAP]-1659933039511
GPR[EPVS]-1659933039511
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("n: ").append(getN()).append("\n");
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933039512
GPR[SPVAP]-1659933039512
GPR[EPVAP]-1659933040563
GPR[EPVS]-1659933040563
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("min: ").append(getMin()).append("\n");
outBuffer.append("max: ").append(getMax()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933040564
GPR[SPVAP]-1659933040564
GPR[EPVAP]-1659933041610
GPR[EPVS]-1659933041610
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("min: ").append(getMin()).append("\n");
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933041611
GPR[SPVAP]-1659933041611
GPR[EPVAP]-1659933042668
GPR[EPVS]-1659933042668
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("max: ").append(getMax()).append("\n");
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933042670
GPR[SPVAP]-1659933042670
GPR[EPVAP]-1659933043738
GPR[EPVS]-1659933043738
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
outBuffer.append("n: ").append(getN()).append("\n");
outBuffer.append("min: ").append(getMin()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933043740
GPR[SPVAP]-1659933043740
GPR[EPVAP]-1659933044833
GPR[EPVS]-1659933044833
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
outBuffer.append("n: ").append(getN()).append("\n");
outBuffer.append("max: ").append(getMax()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933044834
GPR[SPVAP]-1659933044834
GPR[EPVAP]-1659933045881
GPR[EPVS]-1659933045881
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
outBuffer.append("n: ").append(getN()).append("\n");
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933045882
GPR[SPVAP]-1659933045882
GPR[EPVAP]-1659933046940
GPR[EPVS]-1659933046940
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
outBuffer.append("min: ").append(getMin()).append("\n");
outBuffer.append("max: ").append(getMax()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933046942
GPR[SPVAP]-1659933046942
GPR[EPVAP]-1659933047997
GPR[EPVS]-1659933047997
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
outBuffer.append("min: ").append(getMin()).append("\n");
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933047998
GPR[SPVAP]-1659933047998
GPR[EPVAP]-1659933049059
GPR[EPVS]-1659933049059
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
outBuffer.append("max: ").append(getMax()).append("\n");
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933049060
GPR[SPVAP]-1659933049060
GPR[EPVAP]-1659933050143
GPR[EPVS]-1659933050143
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("n: ").append(getN()).append("\n");
outBuffer.append("min: ").append(getMin()).append("\n");
outBuffer.append("max: ").append(getMax()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933050145
GPR[SPVAP]-1659933050145
GPR[EPVAP]-1659933051192
GPR[EPVS]-1659933051192
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("n: ").append(getN()).append("\n");
outBuffer.append("min: ").append(getMin()).append("\n");
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933051193
GPR[SPVAP]-1659933051193
GPR[EPVAP]-1659933052257
GPR[EPVS]-1659933052257
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("n: ").append(getN()).append("\n");
outBuffer.append("max: ").append(getMax()).append("\n");
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933052259
GPR[SPVAP]-1659933052259
GPR[EPVAP]-1659933053334
GPR[EPVS]-1659933053334
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("min: ").append(getMin()).append("\n");
outBuffer.append("max: ").append(getMax()).append("\n");
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933053336
GPR[SPVAP]-1659933053336
GPR[EPVAP]-1659933054397
GPR[EPVS]-1659933054397
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
outBuffer.append("n: ").append(getN()).append("\n");
outBuffer.append("min: ").append(getMin()).append("\n");
outBuffer.append("max: ").append(getMax()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933054398
GPR[SPVAP]-1659933054398
GPR[EPVAP]-1659933055448
GPR[EPVS]-1659933055449
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
outBuffer.append("n: ").append(getN()).append("\n");
outBuffer.append("min: ").append(getMin()).append("\n");
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933055450
GPR[SPVAP]-1659933055450
GPR[EPVAP]-1659933056501
GPR[EPVS]-1659933056501
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
outBuffer.append("n: ").append(getN()).append("\n");
outBuffer.append("max: ").append(getMax()).append("\n");
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933056503
GPR[SPVAP]-1659933056503
GPR[EPVAP]-1659933057574
GPR[EPVS]-1659933057574
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("DescriptiveStatistics:").append("\n");
outBuffer.append("min: ").append(getMin()).append("\n");
outBuffer.append("max: ").append(getMax()).append("\n");
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933057576
GPR[SPVAP]-1659933057576
GPR[EPVAP]-1659933058630
GPR[EPVS]-1659933058630
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("n: ").append(getN()).append("\n");
outBuffer.append("min: ").append(getMin()).append("\n");
outBuffer.append("max: ").append(getMax()).append("\n");
outBuffer.append("mean: ").append(getMean()).append("\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933058631
GPR[SPVAP]-1659933058631
GPR[EPVAP]-1659933059709
GPR[EPVS]-1659933059709
========
outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933059711
GPR[SPVAP]-1659933059711
GPR[EPVAP]-1659933061650
GPR[SPVATF]-1659933061650
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933063443
GPR[EPVS]-1659933063443
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("MultivariateSummaryStatistics:\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933063445
GPR[SPVAP]-1659933063445
GPR[EPVAP]-1659933065382
GPR[SPVATF]-1659933065382
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933067161
GPR[EPVS]-1659933067161
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("n: "+getN());
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933067163
GPR[SPVAP]-1659933067163
GPR[EPVAP]-1659933068215
GPR[EPVS]-1659933068215
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
append(outBuffer,getMin(),"min: ",", ","\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933068216
GPR[SPVAP]-1659933068216
GPR[EPVAP]-1659933069267
GPR[EPVS]-1659933069267
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
append(outBuffer,getMax(),"max: ",", ","\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933069268
GPR[SPVAP]-1659933069268
GPR[EPVAP]-1659933070325
GPR[EPVS]-1659933070325
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
append(outBuffer,getMean(),"mean: ",", ","\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933070326
GPR[SPVAP]-1659933070326
GPR[EPVAP]-1659933071376
GPR[EPVS]-1659933071376
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
append(outBuffer,getGeometricMean(),"geometric mean: ",", ","\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933071378
GPR[SPVAP]-1659933071378
GPR[EPVAP]-1659933072448
GPR[EPVS]-1659933072449
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
append(outBuffer,getSumSq(),"sum of squares: ",", ","\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933072450
GPR[SPVAP]-1659933072450
GPR[EPVAP]-1659933073519
GPR[EPVS]-1659933073519
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
append(outBuffer,getSumLog(),"sum of logarithms: ",", ","\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933073521
GPR[SPVAP]-1659933073521
GPR[EPVAP]-1659933074581
GPR[EPVS]-1659933074581
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
append(outBuffer,getStandardDeviation(),"standard deviation: ",", ","\n");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933074582
GPR[SPVAP]-1659933074582
GPR[EPVAP]-1659933075664
GPR[EPVS]-1659933075664
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("covariance: "+getCovariance().toString());
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933075665
GPR[SPVAP]-1659933075665
GPR[EPVAP]-1659933076719
GPR[EPVS]-1659933076719
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
res.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return res.toString();

========
MM Copying to MM
GPR[SPVS]-1659933076721
GPR[SPVAP]-1659933076721
GPR[EPVAP]-1659933077774
GPR[EPVS]-1659933077774
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
res.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933077775
GPR[SPVAP]-1659933077775
GPR[EPVAP]-1659933078845
GPR[EPVS]-1659933078845
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return res.toString();

========
MM Copying to MM
GPR[SPVS]-1659933078846
GPR[SPVAP]-1659933078846
GPR[EPVAP]-1659933079911
GPR[EPVS]-1659933079911
========
outBuffer.append("BigMatrixImpl{");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933079913
GPR[SPVAP]-1659933079913
GPR[EPVAP]-1659933081852
GPR[SPVATF]-1659933081852
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933083624
GPR[EPVS]-1659933083624
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("}");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933083625
GPR[SPVAP]-1659933083625
GPR[EPVAP]-1659933085547
GPR[SPVATF]-1659933085547
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933087362
GPR[EPVS]-1659933087362
========
outBuffer.append("BigMatrixImpl{");
while(iter.hasNext()){
Comparable<?> value=iter.next();
res.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933087364
GPR[SPVAP]-1659933087364
GPR[EPVAP]-1659933088416
GPR[EPVS]-1659933088416
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
res.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("}");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933088417
GPR[SPVAP]-1659933088417
GPR[EPVAP]-1659933089462
GPR[EPVS]-1659933089462
========
outBuffer.append("BigMatrixImpl{");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return res.toString();

========
MM Copying to MM
GPR[SPVS]-1659933089463
GPR[SPVAP]-1659933089463
GPR[EPVAP]-1659933090524
GPR[EPVS]-1659933090524
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("}");
return res.toString();

========
MM Copying to MM
GPR[SPVS]-1659933090525
GPR[SPVAP]-1659933090525
GPR[EPVAP]-1659933091606
GPR[EPVS]-1659933091606
========
outBuffer.append("BigMatrixImpl{");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("}");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933091607
GPR[SPVAP]-1659933091607
GPR[EPVAP]-1659933093508
GPR[SPVATF]-1659933093508
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933095323
GPR[EPVS]-1659933095323
========
outBuffer.append("BigMatrixImpl{");
while(iter.hasNext()){
Comparable<?> value=iter.next();
res.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return res.toString();

========
MM Copying to MM
GPR[SPVS]-1659933095324
GPR[SPVAP]-1659933095324
GPR[EPVAP]-1659933096389
GPR[EPVS]-1659933096389
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
res.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("}");
return res.toString();

========
MM Copying to MM
GPR[SPVS]-1659933096390
GPR[SPVAP]-1659933096390
GPR[EPVAP]-1659933097446
GPR[EPVS]-1659933097446
========
outBuffer.append("BigMatrixImpl{");
while(iter.hasNext()){
Comparable<?> value=iter.next();
res.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("}");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933097447
GPR[SPVAP]-1659933097447
GPR[EPVAP]-1659933098503
GPR[EPVS]-1659933098503
========
outBuffer.append("BigMatrixImpl{");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("}");
return res.toString();

========
MM Copying to MM
GPR[SPVS]-1659933098504
GPR[SPVAP]-1659933098504
GPR[EPVAP]-1659933099570
GPR[EPVS]-1659933099570
========
outBuffer.append("BigMatrixImpl{");
while(iter.hasNext()){
Comparable<?> value=iter.next();
res.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append("}");
return res.toString();

========
MM Copying to MM
GPR[SPVS]-1659933099572
GPR[SPVAP]-1659933099572
GPR[EPVAP]-1659933100619
GPR[EPVS]-1659933100619
========
outBuffer.append(getClass().getName().substring(fullClassName.lastIndexOf('.')+1)).append("{");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933100620
GPR[SPVAP]-1659933100620
GPR[EPVAP]-1659933101684
GPR[EPVS]-1659933101684
========
outBuffer.append("}");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933101686
GPR[SPVAP]-1659933101686
GPR[EPVAP]-1659933103588
GPR[SPVATF]-1659933103588
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933105406
GPR[EPVS]-1659933105406
========
outBuffer.append("}");
while(iter.hasNext()){
Comparable<?> value=iter.next();
res.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933105407
GPR[SPVAP]-1659933105407
GPR[EPVAP]-1659933106464
GPR[EPVS]-1659933106464
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
buffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933106465
GPR[SPVAP]-1659933106465
GPR[EPVAP]-1659933107517
GPR[EPVS]-1659933107517
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
toAppendTo.append(value);
toAppendTo.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933107518
GPR[SPVAP]-1659933107518
GPR[EPVAP]-1659933108601
GPR[EPVS]-1659933108601
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
toAppendTo.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933108602
GPR[SPVAP]-1659933108602
GPR[EPVAP]-1659933109656
GPR[EPVS]-1659933109656
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
toAppendTo.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933109657
GPR[SPVAP]-1659933109657
GPR[EPVAP]-1659933110704
GPR[EPVS]-1659933110704
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
toAppendTo.append(value);
toAppendTo.append('\t');
toAppendTo.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933110706
GPR[SPVAP]-1659933110706
GPR[EPVAP]-1659933111799
GPR[EPVS]-1659933111799
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
toAppendTo.append('\t');
toAppendTo.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933111800
GPR[SPVAP]-1659933111800
GPR[EPVAP]-1659933112843
GPR[EPVS]-1659933112843
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
toAppendTo.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933112844
GPR[SPVAP]-1659933112844
GPR[EPVAP]-1659933113923
GPR[EPVS]-1659933113923
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
buff.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return buff.toString();

========
MM Copying to MM
GPR[SPVS]-1659933113925
GPR[SPVAP]-1659933113925
GPR[EPVAP]-1659933114987
GPR[EPVS]-1659933114987
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
buff.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933114988
GPR[SPVAP]-1659933114988
GPR[EPVAP]-1659933116039
GPR[EPVS]-1659933116039
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return buff.toString();

========
MM Copying to MM
GPR[SPVS]-1659933116040
GPR[SPVAP]-1659933116040
GPR[EPVAP]-1659933117103
GPR[EPVS]-1659933117103
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
outBuffer.append(")");
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933117104
GPR[SPVAP]-1659933117104
GPR[EPVAP]-1659933119037
GPR[SPVATF]-1659933119037
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933120824
GPR[EPVS]-1659933120824
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
s.append(value);
s.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933120825
GPR[SPVAP]-1659933120825
GPR[EPVAP]-1659933121892
GPR[EPVS]-1659933121892
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
s.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933121893
GPR[SPVAP]-1659933121893
GPR[EPVAP]-1659933122943
GPR[EPVS]-1659933122943
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
s.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933122944
GPR[SPVAP]-1659933122944
GPR[EPVAP]-1659933124010
GPR[EPVS]-1659933124010
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.abs(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933124011
GPR[SPVAP]-1659933124011
GPR[EPVAP]-1659933125065
GPR[EPVS]-1659933125065
========
outBuffer.append(" / ");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933125066
GPR[SPVAP]-1659933125066
GPR[EPVAP]-1659933126959
GPR[SPVATF]-1659933126959
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933128745
GPR[EPVS]-1659933128745
========
outBuffer.append(" / ");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
toAppendTo.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933128746
GPR[SPVAP]-1659933128746
GPR[EPVAP]-1659933129798
GPR[EPVS]-1659933129798
========
while(values.hasNext()){
Comparable<?> value=values.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933129800
GPR[SPVAP]-1659933129800
GPR[EPVAP]-1659933130841
GPR[EPVS]-1659933130841
========
while(values.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933130843
GPR[SPVAP]-1659933130843
GPR[EPVAP]-1659933131914
GPR[EPVS]-1659933131914
========
while(iter.hasNext()){
Comparable<?> value=values.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933131915
GPR[SPVAP]-1659933131915
GPR[EPVAP]-1659933132959
GPR[EPVS]-1659933132959
========
while(iter.hasNext()){
if(Double.doubleToLongBits(iter.value())!=Double.doubleToLongBits(getEntry(iter.key()))){
return false;
}
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933132960
GPR[SPVAP]-1659933132960
GPR[EPVAP]-1659933134025
GPR[EPVS]-1659933134025
========
while(iter.hasNext()){
if(!iter.value().equals(getEntry(iter.key()))){
return false;
}
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933134026
GPR[SPVAP]-1659933134026
GPR[EPVAP]-1659933135077
GPR[EPVS]-1659933135077
========
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return true;
}
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933135078
GPR[SPVAP]-1659933135078
GPR[EPVAP]-1659933136145
GPR[EPVS]-1659933136145
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.setIndex('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933136147
GPR[SPVAP]-1659933136147
GPR[EPVAP]-1659933137191
GPR[EPVS]-1659933137191
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.abs('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933137193
GPR[SPVAP]-1659933137193
GPR[EPVAP]-1659933138245
GPR[EPVS]-1659933138245
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.add(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933138247
GPR[SPVAP]-1659933138247
GPR[EPVAP]-1659933139303
GPR[EPVS]-1659933139303
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
if(iter.key()<v.length){
value=v[idx];
}
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933139304
GPR[SPVAP]-1659933139304
GPR[EPVAP]-1659933140380
GPR[EPVS]-1659933140380
========
while(iter.hasNext()){
if(Double.isNaN(value)){
return false;
}
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933140382
GPR[SPVAP]-1659933140382
GPR[EPVAP]-1659933141463
GPR[EPVS]-1659933141463
========
while(iter.hasNext()){
if(Double.isInfinite(value)){
infiniteFound=true;
}
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933141464
GPR[SPVAP]-1659933141464
GPR[EPVAP]-1659933142530
GPR[EPVS]-1659933142530
========
while(iter.hasNext()){
if(Double.isNaN(value)){
return false;
}
if(Double.isInfinite(value)){
infiniteFound=true;
}

Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933142531
GPR[SPVAP]-1659933142531
GPR[EPVAP]-1659933143594
GPR[EPVS]-1659933143594
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.setIndex(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933143596
GPR[SPVAP]-1659933143596
GPR[EPVAP]-1659933144682
GPR[EPVS]-1659933144682
========
while(iter.hasNext()){
Comparable<?> value=iter.next();
next=new EntryImpl();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933144684
GPR[SPVAP]-1659933144684
GPR[EPVAP]-1659933145767
GPR[EPVS]-1659933145767
========
outBuffer.append(getClass().getName().substring(fullClassName.lastIndexOf('.')+1)).append("{");
while(iter.hasNext()){
Comparable<?> value=iter.next();
res.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933145769
GPR[SPVAP]-1659933145769
GPR[EPVAP]-1659933146821
GPR[EPVS]-1659933146821
========
outBuffer.append(getClass().getName().substring(fullClassName.lastIndexOf('.')+1)).append("{");
outBuffer.append("}");
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933146822
GPR[SPVAP]-1659933146822
GPR[EPVAP]-1659933147889
GPR[EPVS]-1659933147889
========
outBuffer.append(getClass().getName().substring(fullClassName.lastIndexOf('.')+1)).append("{");
outBuffer.append("}");
while(iter.hasNext()){
Comparable<?> value=iter.next();
res.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933147890
GPR[SPVAP]-1659933147890
GPR[EPVAP]-1659933148963
GPR[EPVS]-1659933148963
========
this.nf=nf;
while(iter.hasNext()){
Comparable<?> value=iter.next();
outBuffer.append(value);
outBuffer.append('\t');
outBuffer.append(getCount(value));
outBuffer.append('\t');
outBuffer.append(nf.format(getPct(value)));
outBuffer.append('\t');
outBuffer.append(nf.format(getCumPct(value)));
outBuffer.append('\n');
}
return outBuffer.toString();

========
MM Copying to MM
GPR[SPVS]-1659933148964
GPR[SPVAP]-1659933148964
GPR[EPVAP]-1659933150040
GPR[EPVS]-1659933150040
GPR[ESUN]-1659933150041
GPR[SSUN]-1659933150041
org.apache.commons.math.stat.Frequency,113
UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
if(v instanceof Integer){
return getCount(((Integer)v).longValue());
}
throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933151620
GPR[SPVAP]-1659933151620
GPR[EPVAP]-1659933153968
GPR[EPVS]-1659933153968
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
if(v instanceof Integer){
return getCumFreq(((Integer)v).longValue());
}
throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933153979
GPR[SPVAP]-1659933153979
GPR[EPVAP]-1659933155227
GPR[EPVS]-1659933155227
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
throw MathRuntimeException.createIllegalArgumentException("input data comes from unsupported datasource: {0}, "+"supported sources: {1}, {2}",v.getClass().getName(),BufferedReader.class.getName(),double[].class.getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933155228
GPR[SPVAP]-1659933155228
GPR[EPVAP]-1659933156492
GPR[EPVS]-1659933156492
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
if(v instanceof SparseFieldVector<?>){
return append((SparseFieldVector<T>)v);
}else {
return append(v.toArray());
}
throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933156494
GPR[SPVAP]-1659933156494
GPR[EPVAP]-1659933157771
GPR[EPVS]-1659933157771
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
if(v instanceof SparseFieldVector<?>){
return add((SparseFieldVector<T>)v);
}else {
return add(v.toArray());
}
throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933157772
GPR[SPVAP]-1659933157772
GPR[EPVAP]-1659933159038
GPR[EPVS]-1659933159038
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
if(v instanceof OpenMapRealVector){
return append((OpenMapRealVector)v);
}
throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933159040
GPR[SPVAP]-1659933159040
GPR[EPVAP]-1659933160299
GPR[EPVS]-1659933160299
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
if(v instanceof OpenMapRealVector){
return dotProduct((OpenMapRealVector)v);
}else {
return super.dotProduct(v);
}
throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933160300
GPR[SPVAP]-1659933160300
GPR[EPVAP]-1659933161547
GPR[EPVS]-1659933161547
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
if(v instanceof OpenMapRealVector){
return add((OpenMapRealVector)v);
}else {
return super.add(v);
}
throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933161548
GPR[SPVAP]-1659933161548
GPR[EPVAP]-1659933162811
GPR[EPVS]-1659933162811
========
checkVectorDimensions(v.getDimension());
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933162812
GPR[SPVAP]-1659933162812
GPR[EPVAP]-1659933164086
GPR[EPVS]-1659933164086
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
if(v instanceof OpenMapRealVector){
return getDistance((OpenMapRealVector)v);
}
throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933164087
GPR[SPVAP]-1659933164087
GPR[EPVAP]-1659933165362
GPR[EPVS]-1659933165362
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
if(v instanceof OpenMapRealVector){
return getL1Distance((OpenMapRealVector)v);
}
throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933165364
GPR[SPVAP]-1659933165364
GPR[EPVAP]-1659933166618
GPR[EPVS]-1659933166618
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
if(v instanceof OpenMapRealVector){
return getLInfDistance((OpenMapRealVector)v);
}
throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933166619
GPR[SPVAP]-1659933166619
GPR[EPVAP]-1659933167865
GPR[EPVS]-1659933167865
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
if(v instanceof OpenMapRealVector){
return subtract((OpenMapRealVector)v);
}
throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933167866
GPR[SPVAP]-1659933167866
GPR[EPVAP]-1659933169165
GPR[EPVS]-1659933169165
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
throw MathRuntimeException.createIllegalArgumentException("cannot format a {0} instance as a complex number",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933169166
GPR[SPVAP]-1659933169166
GPR[EPVAP]-1659933173096
GPR[SPVATF]-1659933173096
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933174878
GPR[EPVS]-1659933174878
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
if(v instanceof ArrayRealVector){
double[] ((ArrayRealVector)v).getDataRef()=((ArrayRealVector)v).getDataRef();
return add(values);
}
throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933174880
GPR[SPVAP]-1659933174880
GPR[EPVAP]-1659933175822
GPR[EPVS]-1659933175822
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
checkVectorDimensions(v);
throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable",v.getClass().getName());
}

========
MM Copying to MM
GPR[SPVS]-1659933175823
GPR[SPVAP]-1659933175823
GPR[EPVAP]-1659933176878
GPR[EPVS]-1659933176878
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
throw MathRuntimeException.createIllegalArgumentException("cannot format given object as a fraction number");
}

========
MM Copying to MM
GPR[SPVS]-1659933176880
GPR[SPVAP]-1659933176880
GPR[EPVAP]-1659933178808
GPR[SPVATF]-1659933178808
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933180604
GPR[EPVS]-1659933180604
========
if(v instanceof Comparable<?>){
addValue((Comparable<?>)v);
}else {
throw MathRuntimeException.createIllegalArgumentException(NON_POLYNOMIAL_FUNCTION_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659933180606
GPR[SPVAP]-1659933180606
GPR[EPVAP]-1659933181661
GPR[EPVS]-1659933181661
GPR[ESUN]-1659933181665
GPR[SSUN]-1659933181665
org.apache.commons.math.stat.Frequency,114
GPR[ESUN]-1659933181991
GPR[SSUN]-1659933181991
org.apache.commons.math.stat.Frequency,116
GPR[ESUN]-1659933182195
GPR[SSUN]-1659933182195
org.apache.commons.math.stat.Frequency,120
Find no block!
GPR[SSUN]-1659933182392
org.apache.commons.math.stat.Frequency,135
GPR[ESUN]-1659933182588
GPR[SSUN]-1659933182588
org.apache.commons.math.stat.Frequency,144
Find no block!
GPR[SSUN]-1659933182788
org.apache.commons.math.stat.Frequency,146
========
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}
if((Comparator<Comparable<?>>)freqTable.comparator()==null){
c=new NaturalComparator();
}
try{
Long count=freqTable.get(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}
}catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}


========
MM Copying to MM
GPR[SPVS]-1659933183923
GPR[SPVAP]-1659933183923
GPR[EPVAP]-1659933186351
GPR[EPVS]-1659933186351
========
if((Comparator<Comparable<?>>)freqTable.comparator().compare(obj,freqTable.firstKey())<0){
return 0;
}
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}
try{
Long count=freqTable.get(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}
}catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}


========
MM Copying to MM
GPR[SPVS]-1659933186352
GPR[SPVAP]-1659933186352
GPR[EPVAP]-1659933187613
GPR[EPVS]-1659933187613
========
if((Comparator<Comparable<?>>)freqTable.comparator().compare(obj,freqTable.lastKey())>=0){
return getSumFreq();
}
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}
try{
Long count=freqTable.get(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}
}catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}


========
MM Copying to MM
GPR[SPVS]-1659933187614
GPR[SPVAP]-1659933187614
GPR[EPVAP]-1659933188885
GPR[EPVS]-1659933188885
========
if(this==obj){
return true;
}
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}
try{
Long count=freqTable.get(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}
}catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}


========
MM Copying to MM
GPR[SPVS]-1659933188887
GPR[SPVAP]-1659933188887
GPR[EPVAP]-1659933190163
GPR[EPVS]-1659933190163
========
if(obj==null){
return false;
}
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}
try{
Long count=freqTable.get(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}
}catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}


========
MM Copying to MM
GPR[SPVS]-1659933190164
GPR[SPVAP]-1659933190164
GPR[EPVAP]-1659933191441
GPR[EPVS]-1659933191441
========
if(this==obj)return true;
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}
try{
Long count=freqTable.get(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}
}catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}


========
MM Copying to MM
GPR[SPVS]-1659933191443
GPR[SPVAP]-1659933191443
GPR[EPVAP]-1659933192706
GPR[EPVS]-1659933192706
========
if(obj==null)return false;
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}
try{
Long count=freqTable.get(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}
}catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}


========
MM Copying to MM
GPR[SPVS]-1659933192707
GPR[SPVAP]-1659933192707
GPR[EPVAP]-1659933193980
GPR[EPVS]-1659933193980
========
if(this==obj)return true;
if(obj==null)return false;
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}
try{
Long count=freqTable.get(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}
}catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}


========
MM Copying to MM
GPR[SPVS]-1659933193982
GPR[SPVAP]-1659933193982
GPR[EPVAP]-1659933195223
GPR[EPVS]-1659933195223
========
if(serialVersionUID!=other.n)return false;
if(v instanceof Integer){
obj=Long.valueOf(((Integer)v).longValue());
}
try{
Long count=freqTable.get(obj);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}
}catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}


========
MM Copying to MM
GPR[SPVS]-1659933195224
GPR[SPVAP]-1659933195224
GPR[EPVAP]-1659933196485
GPR[EPVS]-1659933196485
GPR[ESUN]-1659933196486
GPR[SSUN]-1659933196486
org.apache.commons.math.stat.Frequency,168
GPR[ESUN]-1659933197532
GPR[SSUN]-1659933197532
org.apache.commons.math.stat.Frequency,169
Find no block!
GPR[SSUN]-1659933197742
org.apache.commons.math.stat.Frequency,186
GPR[ESUN]-1659933198758
GPR[SSUN]-1659933198758
org.apache.commons.math.stat.Frequency,187
Find no block!
GPR[SSUN]-1659933198953
org.apache.commons.math.stat.Frequency,191
========
(freqTable==null)?null:freqTable.clear();

========
MM Copying to MM
GPR[SPVS]-1659933199944
GPR[SPVAP]-1659933199944
GPR[EPVAP]-1659933201091
GPR[EPVS]-1659933201091
GPR[ESUN]-1659933201091
GPR[SSUN]-1659933201091
org.apache.commons.math.stat.Frequency,192
Find no block!
GPR[SSUN]-1659933201317
org.apache.commons.math.stat.Frequency,204
GPR[ESUN]-1659933202305
GPR[SSUN]-1659933202305
org.apache.commons.math.stat.Frequency,233
========
return getCount(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933203487
GPR[SPVAP]-1659933203487
GPR[EPVAP]-1659933205959
GPR[EPVS]-1659933205959
========
return getCount(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933205961
GPR[SPVAP]-1659933205961
GPR[EPVAP]-1659933207230
GPR[EPVS]-1659933207230
========
return getCount(((Integer)v).longValue());

========
MM Copying to MM
GPR[SPVS]-1659933207231
GPR[SPVAP]-1659933207231
GPR[EPVAP]-1659933211137
GPR[SPVATF]-1659933211137
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933212912
GPR[EPVS]-1659933212912
========
return getCumFreq((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659933212913
GPR[SPVAP]-1659933212913
GPR[EPVAP]-1659933214845
GPR[SPVATF]-1659933214845
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933216653
GPR[EPVS]-1659933216653
========
return getCumFreq(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933216654
GPR[SPVAP]-1659933216654
GPR[EPVAP]-1659933217735
GPR[EPVS]-1659933217735
========
return getCumFreq(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933217737
GPR[SPVAP]-1659933217737
GPR[EPVAP]-1659933218814
GPR[EPVS]-1659933218814
========
if(getSumFreq()==0){
return Double.NaN;
}
return getCount((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659933218815
GPR[SPVAP]-1659933218815
GPR[EPVAP]-1659933219908
GPR[EPVS]-1659933219908
========
return getCumFreq(((Integer)v).longValue());

========
MM Copying to MM
GPR[SPVS]-1659933219909
GPR[SPVAP]-1659933219909
GPR[EPVAP]-1659933221860
GPR[SPVATF]-1659933221860
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933223647
GPR[EPVS]-1659933223647
========
return getSumFreq();

========
MM Copying to MM
GPR[SPVS]-1659933223649
GPR[SPVAP]-1659933223649
GPR[EPVAP]-1659933225554
GPR[SPVATF]-1659933225554
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933227327
GPR[EPVS]-1659933227327
GPR[ESUN]-1659933227328
GPR[SSUN]-1659933227328
org.apache.commons.math.stat.Frequency,245
GPR[ESUN]-1659933227677
GPR[SSUN]-1659933227677
org.apache.commons.math.stat.Frequency,253
Find no block!
GPR[SSUN]-1659933227873
org.apache.commons.math.stat.Frequency,266
========
return getCount((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659933228881
GPR[SPVAP]-1659933228881
GPR[EPVAP]-1659933233874
GPR[SPVATF]-1659933233874
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933235652
GPR[EPVS]-1659933235652
========
return getCumFreq(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933235653
GPR[SPVAP]-1659933235653
GPR[EPVAP]-1659933237596
GPR[SPVATF]-1659933237596
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933239374
GPR[EPVS]-1659933239374
========
return getCount(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933239375
GPR[SPVAP]-1659933239375
GPR[EPVAP]-1659933240430
GPR[EPVS]-1659933240430
========
return getCumFreq((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659933240431
GPR[SPVAP]-1659933240431
GPR[EPVAP]-1659933242346
GPR[SPVATF]-1659933242346
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933244215
GPR[EPVS]-1659933244215
========
return getCumFreq(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933244217
GPR[SPVAP]-1659933244217
GPR[EPVAP]-1659933245291
GPR[EPVS]-1659933245291
========
return getCount(((Integer)v).longValue());

========
MM Copying to MM
GPR[SPVS]-1659933245292
GPR[SPVAP]-1659933245292
GPR[EPVAP]-1659933247207
GPR[SPVATF]-1659933247207
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933249028
GPR[EPVS]-1659933249028
========
if(getSumFreq()==0){
return Double.NaN;
}
return getCount(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933249029
GPR[SPVAP]-1659933249029
GPR[EPVAP]-1659933250081
GPR[EPVS]-1659933250081
GPR[ESUN]-1659933250081
GPR[SSUN]-1659933250081
org.apache.commons.math.stat.Frequency,276
GPR[ESUN]-1659933250405
GPR[SSUN]-1659933250405
org.apache.commons.math.stat.Frequency,286
========
return getCount((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659933251440
GPR[SPVAP]-1659933251440
GPR[EPVAP]-1659933256443
GPR[SPVATF]-1659933256443
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933258283
GPR[EPVS]-1659933258283
========
return getCumFreq(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933258285
GPR[SPVAP]-1659933258285
GPR[EPVAP]-1659933260239
GPR[SPVATF]-1659933260239
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933262031
GPR[EPVS]-1659933262031
========
return getCount(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933262033
GPR[SPVAP]-1659933262033
GPR[EPVAP]-1659933263966
GPR[SPVATF]-1659933263966
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933265780
GPR[EPVS]-1659933265780
========
return getCumFreq((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659933265782
GPR[SPVAP]-1659933265782
GPR[EPVAP]-1659933267708
GPR[SPVATF]-1659933267708
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933269526
GPR[EPVS]-1659933269526
========
return getCumFreq(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933269527
GPR[SPVAP]-1659933269527
GPR[EPVAP]-1659933271431
GPR[SPVATF]-1659933271431
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933273204
GPR[EPVS]-1659933273204
========
return getCount(((Integer)v).longValue());

========
MM Copying to MM
GPR[SPVS]-1659933273205
GPR[SPVAP]-1659933273205
GPR[EPVAP]-1659933274294
GPR[EPVS]-1659933274294
========
if(getSumFreq()==0){
return Double.NaN;
}
return getCount(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933274295
GPR[SPVAP]-1659933274295
GPR[EPVAP]-1659933275365
GPR[EPVS]-1659933275365
GPR[ESUN]-1659933275366
GPR[SSUN]-1659933275366
org.apache.commons.math.stat.Frequency,318
GPR[ESUN]-1659933275694
GPR[SSUN]-1659933275694
org.apache.commons.math.stat.Frequency,353
========
return getCumPct(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933276737
GPR[SPVAP]-1659933276737
GPR[EPVAP]-1659933281832
GPR[SPVATF]-1659933281832
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933283648
GPR[EPVS]-1659933283648
========
return getPct(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933283649
GPR[SPVAP]-1659933283649
GPR[EPVAP]-1659933285638
GPR[SPVATF]-1659933285638
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933287429
GPR[EPVS]-1659933287429
========
return getCumPct((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659933287431
GPR[SPVAP]-1659933287431
GPR[EPVAP]-1659933289360
GPR[SPVATF]-1659933289360
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933291162
GPR[EPVS]-1659933291162
========
return getCumPct(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933291163
GPR[SPVAP]-1659933291163
GPR[EPVAP]-1659933293072
GPR[SPVATF]-1659933293072
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933294852
GPR[EPVS]-1659933294852
GPR[ESUN]-1659933294852
GPR[SSUN]-1659933294852
org.apache.commons.math.stat.Frequency,369
========
return getCumFreq(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933296167
GPR[SPVAP]-1659933296167
GPR[EPVAP]-1659933298527
GPR[EPVS]-1659933298527
========
return getCumFreq(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933298528
GPR[SPVAP]-1659933298528
GPR[EPVAP]-1659933299783
GPR[EPVS]-1659933299783
========
return getCumFreq(((Integer)v).longValue());

========
MM Copying to MM
GPR[SPVS]-1659933299784
GPR[SPVAP]-1659933299784
GPR[EPVAP]-1659933303725
GPR[SPVATF]-1659933303725
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933305500
GPR[EPVS]-1659933305500
========
return getCount((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659933305501
GPR[SPVAP]-1659933305501
GPR[EPVAP]-1659933307430
GPR[SPVATF]-1659933307430
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933309223
GPR[EPVS]-1659933309223
========
return getCount(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933309224
GPR[SPVAP]-1659933309224
GPR[EPVAP]-1659933310289
GPR[EPVS]-1659933310289
========
return getCount(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933310290
GPR[SPVAP]-1659933310290
GPR[EPVAP]-1659933311351
GPR[EPVS]-1659933311351
========
if(getSumFreq()==0){
return Double.NaN;
}
return getCumFreq((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659933311352
GPR[SPVAP]-1659933311352
GPR[EPVAP]-1659933312420
GPR[EPVS]-1659933312420
========
return getCount(((Integer)v).longValue());

========
MM Copying to MM
GPR[SPVS]-1659933312421
GPR[SPVAP]-1659933312421
GPR[EPVAP]-1659933314378
GPR[SPVATF]-1659933314378
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933316187
GPR[EPVS]-1659933316187
========
return getSumFreq();

========
MM Copying to MM
GPR[SPVS]-1659933316188
GPR[SPVAP]-1659933316188
GPR[EPVAP]-1659933318110
GPR[SPVATF]-1659933318110
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933319927
GPR[EPVS]-1659933319927
GPR[ESUN]-1659933319928
GPR[SSUN]-1659933319928
org.apache.commons.math.stat.Frequency,383
GPR[ESUN]-1659933320250
GPR[SSUN]-1659933320250
org.apache.commons.math.stat.Frequency,399
Find no block!
GPR[SSUN]-1659933320496
org.apache.commons.math.stat.Frequency,400
========
if(c.compare(v,freqTable.firstKey())<0){
return 0;
}
long result=0;
try{
Long value=freqTable.get(v);
if(value!=null){
result=value.longValue();
}
}catch (ClassCastException ex) {
  return result;
}

if(c.compare(v,freqTable.firstKey())<0){
return 0;
}

========
MM Copying to MM
GPR[SPVS]-1659933321589
GPR[SPVAP]-1659933321589
GPR[EPVAP]-1659933326674
GPR[SPVATF]-1659933326674
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933328495
GPR[EPVS]-1659933328495
========
if(v instanceof Integer){
return getCount(((Integer)v).longValue());
}
long result=0;
try{
Long value=freqTable.get(v);
if(value!=null){
result=value.longValue();
}
}catch (ClassCastException ex) {
  return result;
}

if(c.compare(v,freqTable.firstKey())<0){
return 0;
}

========
MM Copying to MM
GPR[SPVS]-1659933328496
GPR[SPVAP]-1659933328496
GPR[EPVAP]-1659933330508
GPR[SPVATF]-1659933330508
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933332332
GPR[EPVS]-1659933332332
========
long result=0;
if(v instanceof Integer){
v=Long.valueOf(((Integer)v).longValue());
}
try{
Long value=freqTable.get(v);
if(value!=null){
result=value.longValue();
}
}catch (ClassCastException ex) {
  return result;
}

if(c.compare(v,freqTable.firstKey())<0){
return 0;
}

========
MM Copying to MM
GPR[SPVS]-1659933332334
GPR[SPVAP]-1659933332334
GPR[EPVAP]-1659933334245
GPR[SPVATF]-1659933334245
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933336173
GPR[EPVS]-1659933336173
========
int result=0;
try{
Long value=freqTable.get(v);
if(value!=null){
result=value.longValue();
}
}catch (ClassCastException ex) {
  return result;
}

if(c.compare(v,freqTable.firstKey())<0){
return 0;
}

========
MM Copying to MM
GPR[SPVS]-1659933336175
GPR[SPVAP]-1659933336175
GPR[EPVAP]-1659933337251
GPR[EPVS]-1659933337251
========
result=value*result+((freqTable==null)?0:freqTable.hashCode());
long result=0;
try{
Long value=freqTable.get(v);
if(value!=null){
result=value.longValue();
}
}catch (ClassCastException ex) {
  return result;
}

if(c.compare(v,freqTable.firstKey())<0){
return 0;
}

========
MM Copying to MM
GPR[SPVS]-1659933337252
GPR[SPVAP]-1659933337252
GPR[EPVAP]-1659933338378
GPR[EPVS]-1659933338378
========
if(serialVersionUID<0){
throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",serialVersionUID,e);
}
long result=0;
try{
Long value=freqTable.get(v);
if(value!=null){
result=value.longValue();
}
}catch (ClassCastException ex) {
  return result;
}

if(c.compare(v,freqTable.firstKey())<0){
return 0;
}

========
MM Copying to MM
GPR[SPVS]-1659933338381
GPR[SPVAP]-1659933338381
GPR[EPVAP]-1659933339447
GPR[EPVS]-1659933339447
GPR[ESUN]-1659933339447
GPR[SSUN]-1659933339447
org.apache.commons.math.stat.Frequency,404
GPR[ESUN]-1659933339781
GPR[SSUN]-1659933339781
org.apache.commons.math.stat.Frequency,411
========
if(c.compare(nextValue,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659933340845
GPR[SPVAP]-1659933340845
GPR[EPVAP]-1659933345942
GPR[SPVATF]-1659933345942
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933347727
GPR[EPVS]-1659933347727
========
if(c.compare(v,nextValue)>=0){
result+=getCount(nextValue);
}else {
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659933347728
GPR[SPVAP]-1659933347728
GPR[EPVAP]-1659933349667
GPR[SPVATF]-1659933349667
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933351458
GPR[EPVS]-1659933351458
========
if(c.compare(v,freqTable.lastKey())>0){
result+=getCount(nextValue);
}else {
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659933351459
GPR[SPVAP]-1659933351459
GPR[EPVAP]-1659933353345
GPR[SPVATF]-1659933353345
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933355175
GPR[EPVS]-1659933355175
========
if(c.compare(v,freqTable.lastKey())>=0){
result+=getCount(nextValue);
}else {
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659933355176
GPR[SPVAP]-1659933355176
GPR[EPVAP]-1659933357086
GPR[SPVATF]-1659933357086
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933358864
GPR[EPVS]-1659933358864
========
try{
Long freqTable.get(v)=freqTable.get(v);
if(count!=null){
result=count.longValue();
}
}catch (ClassCastException ex) {
}

while(values.hasNext()){
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}

========
MM Copying to MM
GPR[SPVS]-1659933359745
GPR[SPVAP]-1659933359745
GPR[EPVAP]-1659933360679
GPR[EPVS]-1659933360679
========
while(values.hasNext()){
if(Double.isNaN(nextValue)){
return false;
}
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}

========
MM Copying to MM
GPR[SPVS]-1659933360681
GPR[SPVAP]-1659933360681
GPR[EPVAP]-1659933361751
GPR[EPVS]-1659933361751
========
while(values.hasNext()){
if(Double.isInfinite(nextValue)){
infiniteFound=true;
}
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}

========
MM Copying to MM
GPR[SPVS]-1659933361752
GPR[SPVAP]-1659933361752
GPR[EPVAP]-1659933362807
GPR[EPVS]-1659933362807
========
while(values.hasNext()){
if(Double.isNaN(nextValue)){
return false;
}
if(Double.isInfinite(nextValue)){
infiniteFound=true;
}

Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}

========
MM Copying to MM
GPR[SPVS]-1659933362808
GPR[SPVAP]-1659933362808
GPR[EPVAP]-1659933363860
GPR[EPVS]-1659933363860
========
try{
Long freqTable.get(nextValue)=freqTable.get(nextValue);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}
}catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}

while(values.hasNext()){
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}

========
MM Copying to MM
GPR[SPVS]-1659933363863
GPR[SPVAP]-1659933363863
GPR[EPVAP]-1659933364802
GPR[EPVS]-1659933364802
========
try{
Long freqTable.get(v)=freqTable.get(v);
if(count!=null){
result=count.longValue();
}
}catch (ClassCastException ex) {
}

if(c.compare(v,freqTable.lastKey())>=0){
return getSumFreq();
}
Iterator<Comparable<?>> values=valuesIterator();
while(values.hasNext()){
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}

========
MM Copying to MM
GPR[SPVS]-1659933365705
GPR[SPVAP]-1659933365705
GPR[EPVAP]-1659933366662
GPR[EPVS]-1659933366662
========
try{
Long freqTable.get(nextValue)=freqTable.get(nextValue);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}
}catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}

if(c.compare(v,freqTable.lastKey())>=0){
return getSumFreq();
}
Iterator<Comparable<?>> values=valuesIterator();
while(values.hasNext()){
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}

========
MM Copying to MM
GPR[SPVS]-1659933366664
GPR[SPVAP]-1659933366664
GPR[EPVAP]-1659933367603
GPR[EPVS]-1659933367603
========
if(c.compare(v,freqTable.lastKey())>=0){
return getSumFreq();
}
Iterator<Comparable<?>> values=valuesIterator();
while(values.hasNext()){
if(Double.isNaN(nextValue)){
return false;
}
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}

========
MM Copying to MM
GPR[SPVS]-1659933367606
GPR[SPVAP]-1659933367606
GPR[EPVAP]-1659933368669
GPR[EPVS]-1659933368669
========
if(c.compare(v,freqTable.lastKey())>=0){
return getSumFreq();
}
Iterator<Comparable<?>> values=valuesIterator();
while(values.hasNext()){
if(Double.isInfinite(nextValue)){
infiniteFound=true;
}
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}

========
MM Copying to MM
GPR[SPVS]-1659933368671
GPR[SPVAP]-1659933368671
GPR[EPVAP]-1659933369717
GPR[EPVS]-1659933369717
========
if(c.compare(v,freqTable.lastKey())>=0){
return getSumFreq();
}
Iterator<Comparable<?>> values=valuesIterator();
while(values.hasNext()){
if(Double.isNaN(nextValue)){
return false;
}
if(Double.isInfinite(nextValue)){
infiniteFound=true;
}

Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}

========
MM Copying to MM
GPR[SPVS]-1659933369718
GPR[SPVAP]-1659933369718
GPR[EPVAP]-1659933370783
GPR[EPVS]-1659933370783
GPR[ESUN]-1659933370785
GPR[SSUN]-1659933370785
org.apache.commons.math.stat.Frequency,412
GPR[ESUN]-1659933371092
GPR[SSUN]-1659933371092
org.apache.commons.math.stat.Frequency,413
GPR[ESUN]-1659933371283
GPR[SSUN]-1659933371283
org.apache.commons.math.stat.Frequency,414
GPR[ESUN]-1659933371473
GPR[SSUN]-1659933371473
org.apache.commons.math.stat.Frequency,415
GPR[ESUN]-1659933371673
GPR[SSUN]-1659933371673
org.apache.commons.math.stat.Frequency,417
GPR[ESUN]-1659933371927
GPR[SSUN]-1659933371927
org.apache.commons.math.stat.Frequency,419
Find no block!
GPR[SSUN]-1659933372142
org.apache.commons.math.stat.Frequency,420
========
while(values.hasNext()){
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}
try{
Long freqTable.get(v)=freqTable.get(v);
if(count!=null){
result=count.longValue();
}
}catch (ClassCastException ex) {
}

return result;

========
MM Copying to MM
GPR[SPVS]-1659933373247
GPR[SPVAP]-1659933373247
GPR[EPVAP]-1659933374407
GPR[EPVS]-1659933374407
========
while(values.hasNext()){
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}
return sumFreq;

========
MM Copying to MM
GPR[SPVS]-1659933374408
GPR[SPVAP]-1659933374408
GPR[EPVAP]-1659933376768
GPR[EPVS]-1659933376768
========
while(values.hasNext()){
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}
return high;

========
MM Copying to MM
GPR[SPVS]-1659933376770
GPR[SPVAP]-1659933376770
GPR[EPVAP]-1659933378050
GPR[EPVS]-1659933378050
========
while(values.hasNext()){
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}
return low;

========
MM Copying to MM
GPR[SPVS]-1659933378051
GPR[SPVAP]-1659933378051
GPR[EPVAP]-1659933379326
GPR[EPVS]-1659933379326
========
while(values.hasNext()){
if(Double.isNaN(nextValue)){
return false;
}
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659933379328
GPR[SPVAP]-1659933379328
GPR[EPVAP]-1659933380707
GPR[EPVS]-1659933380707
========
while(values.hasNext()){
if(Double.isInfinite(nextValue)){
infiniteFound=true;
}
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659933380708
GPR[SPVAP]-1659933380708
GPR[EPVAP]-1659933381973
GPR[EPVS]-1659933381974
========
while(values.hasNext()){
if(Double.isNaN(nextValue)){
return false;
}
if(Double.isInfinite(nextValue)){
infiniteFound=true;
}

Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659933381975
GPR[SPVAP]-1659933381975
GPR[EPVAP]-1659933383237
GPR[EPVS]-1659933383237
========
try{
Long freqTable.get(nextValue)=freqTable.get(nextValue);
if(count==null){
freqTable.put(obj,Long.valueOf(1));
}else {
freqTable.put(obj,Long.valueOf(count.longValue()+1));
}
}catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}

while(values.hasNext()){
Comparable<?> nextValue=values.next();
if(c.compare(v,nextValue)>0){
result+=getCount(nextValue);
}else {
return result;
}
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659933383240
GPR[SPVAP]-1659933383240
GPR[EPVAP]-1659933384231
GPR[EPVS]-1659933384231
GPR[ESUN]-1659933384232
GPR[SSUN]-1659933384232
org.apache.commons.math.stat.Frequency,432
GPR[ESUN]-1659933384552
GPR[SSUN]-1659933384552
org.apache.commons.math.stat.Frequency,456
========
return getCumFreq((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659933385552
GPR[SPVAP]-1659933385552
GPR[EPVAP]-1659933390605
GPR[SPVATF]-1659933390605
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933392403
GPR[EPVS]-1659933392403
========
return getCount(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933392404
GPR[SPVAP]-1659933392404
GPR[EPVAP]-1659933394350
GPR[SPVATF]-1659933394350
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933396161
GPR[EPVS]-1659933396161
========
return getCumFreq(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933396163
GPR[SPVAP]-1659933396163
GPR[EPVAP]-1659933398074
GPR[SPVATF]-1659933398074
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933399901
GPR[EPVS]-1659933399901
========
return getCount((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659933399903
GPR[SPVAP]-1659933399903
GPR[EPVAP]-1659933401859
GPR[SPVATF]-1659933401859
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933403656
GPR[EPVS]-1659933403656
========
return getCount(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933403657
GPR[SPVAP]-1659933403657
GPR[EPVAP]-1659933405592
GPR[SPVATF]-1659933405592
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933407408
GPR[EPVS]-1659933407408
========
return getCumFreq(((Integer)v).longValue());

========
MM Copying to MM
GPR[SPVS]-1659933407409
GPR[SPVAP]-1659933407409
GPR[EPVAP]-1659933408488
GPR[EPVS]-1659933408488
========
if(getSumFreq()==0){
return Double.NaN;
}
return getCumFreq(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933408490
GPR[SPVAP]-1659933408490
GPR[EPVAP]-1659933409553
GPR[EPVS]-1659933409553
GPR[ESUN]-1659933409553
GPR[SSUN]-1659933409553
org.apache.commons.math.stat.Frequency,475
GPR[ESUN]-1659933409873
GPR[SSUN]-1659933409873
org.apache.commons.math.stat.Frequency,493
GPR[ESUN]-1659933410061
GPR[SSUN]-1659933410061
org.apache.commons.math.stat.Frequency,508
========
return getCumPct((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659933411053
GPR[SPVAP]-1659933411053
GPR[EPVAP]-1659933416056
GPR[SPVATF]-1659933416056
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933417839
GPR[EPVS]-1659933417839
========
return getPct(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933417840
GPR[SPVAP]-1659933417840
GPR[EPVAP]-1659933419791
GPR[SPVATF]-1659933419791
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933421573
GPR[EPVS]-1659933421573
========
return getCumPct(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933421574
GPR[SPVAP]-1659933421575
GPR[EPVAP]-1659933422626
GPR[EPVS]-1659933422626
========
return getPct(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933422627
GPR[SPVAP]-1659933422627
GPR[EPVAP]-1659933423684
GPR[EPVS]-1659933423684
GPR[ESUN]-1659933423685
GPR[SSUN]-1659933423685
org.apache.commons.math.stat.Frequency,521
GPR[ESUN]-1659933424019
GPR[SSUN]-1659933424019
org.apache.commons.math.stat.Frequency,534
========
return getCumPct((Comparable<?>)v);

========
MM Copying to MM
GPR[SPVS]-1659933425028
GPR[SPVAP]-1659933425028
GPR[EPVAP]-1659933430141
GPR[SPVATF]-1659933430141
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933431953
GPR[EPVS]-1659933431953
========
return getPct(Character.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933431954
GPR[SPVAP]-1659933431954
GPR[EPVAP]-1659933433897
GPR[SPVATF]-1659933433897
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933435704
GPR[EPVS]-1659933435704
========
return getCumPct(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933435705
GPR[SPVAP]-1659933435705
GPR[EPVAP]-1659933437646
GPR[SPVATF]-1659933437646
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933439488
GPR[EPVS]-1659933439488
========
return getPct(Long.valueOf(v));

========
MM Copying to MM
GPR[SPVS]-1659933439489
GPR[SPVAP]-1659933439489
GPR[EPVAP]-1659933441433
GPR[SPVATF]-1659933441433
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933443262
GPR[EPVS]-1659933443262
GPR[ESUN]-1659933443262
GPR[SSUN]-1659933443262
org.apache.commons.math.stat.Frequency,568
========
 final int prime=31;
int result=1;
result=prime*result+((freqTable==null)?0:freqTable.hashCode());
result=prime*result+(int)(serialVersionUID^(n>>>32));
return result;

========
MM Copying to MM
GPR[SPVS]-1659933444425
GPR[SPVAP]-1659933444425
GPR[EPVAP]-1659933446837
GPR[EPVS]-1659933446837
========
 final int prime=31;
int result=1;
result=hash*result+((freqTable==null)?0:freqTable.hashCode());
return result;

========
MM Copying to MM
GPR[SPVS]-1659933446838
GPR[SPVAP]-1659933446838
GPR[EPVAP]-1659933448099
GPR[EPVS]-1659933448099
========
 final int prime=31;
int result=1;
result=prime*result+((freqTable==null)?0:freqTable.hashCode());
result=result*31+MathUtils.hash(getSumSq());
return result;

========
MM Copying to MM
GPR[SPVS]-1659933448100
GPR[SPVAP]-1659933448100
GPR[EPVAP]-1659933449353
GPR[EPVS]-1659933449353
========
 final int prime=31;
int result=1;
result=prime*result+((freqTable==null)?0:freqTable.hashCode());
result=result*31+MathUtils.hash(getSumLog());
return result;

========
MM Copying to MM
GPR[SPVS]-1659933449354
GPR[SPVAP]-1659933449354
GPR[EPVAP]-1659933450625
GPR[EPVS]-1659933450625
========
 final int prime=31;
int result=1;
result=prime*result+((freqTable==null)?0:freqTable.hashCode());
result=result*31+getCovariance().hashCode();
return result;

========
MM Copying to MM
GPR[SPVS]-1659933450626
GPR[SPVAP]-1659933450626
GPR[EPVAP]-1659933451903
GPR[EPVS]-1659933451903
========
 final int prime=31;
int result=1;
result=prime*result+((freqTable==null)?0:freqTable.hashCode());
result=result*31+MathUtils.hash(getSum());
return result;

========
MM Copying to MM
GPR[SPVS]-1659933451904
GPR[SPVAP]-1659933451904
GPR[EPVAP]-1659933453230
GPR[EPVS]-1659933453230
========
 final int prime=31;
int result=1;
result=prime*result+((freqTable==null)?0:freqTable.hashCode());
result=result*31+MathUtils.hash(getSumsq());
return result;

========
MM Copying to MM
GPR[SPVS]-1659933453231
GPR[SPVAP]-1659933453231
GPR[EPVAP]-1659933454492
GPR[EPVS]-1659933454492
========
 final int prime=31;
int result=1;
result=prime*result+((freqTable==null)?0:freqTable.hashCode());
result=result*31+MathUtils.hash(getVariance());
return result;

========
MM Copying to MM
GPR[SPVS]-1659933454493
GPR[SPVAP]-1659933454493
GPR[EPVAP]-1659933455855
GPR[EPVS]-1659933455855
========
 final int prime=31;
int result=1;
result=prime*result+((freqTable==null)?0:freqTable.hashCode());
result=result*31+MathUtils.hash(getMin());
return result;

========
MM Copying to MM
GPR[SPVS]-1659933455857
GPR[SPVAP]-1659933455857
GPR[EPVAP]-1659933457204
GPR[EPVS]-1659933457204
========
 final int prime=31;
int result=1;
result=prime*result+((freqTable==null)?0:freqTable.hashCode());
result=result*31+MathUtils.hash(getN());
return result;

========
MM Copying to MM
GPR[SPVS]-1659933457205
GPR[SPVAP]-1659933457205
GPR[EPVAP]-1659933458477
GPR[EPVS]-1659933458477
========
 final int prime=31;
int result=1;
result=prime*result+((freqTable==null)?0:freqTable.hashCode());
result=result*31+MathUtils.hash(getSum());
result=result*31+MathUtils.hash(getVariance());
return result;

========
MM Copying to MM
GPR[SPVS]-1659933458479
GPR[SPVAP]-1659933458479
GPR[EPVAP]-1659933459801
GPR[EPVS]-1659933459801
========
 final long prime=31;
int result=1;
result=prime*result+((freqTable==null)?0:freqTable.hashCode());
return result;

========
MM Copying to MM
GPR[SPVS]-1659933459802
GPR[SPVAP]-1659933459802
GPR[EPVAP]-1659933461072
GPR[EPVS]-1659933461072
========
 final int prime=prime;
int result=1;
result=prime*result+((freqTable==null)?0:freqTable.hashCode());
return result;

========
MM Copying to MM
GPR[SPVS]-1659933461073
GPR[SPVAP]-1659933461073
GPR[EPVAP]-1659933462351
GPR[EPVS]-1659933462351
GPR[ESUN]-1659933462351
GPR[SSUN]-1659933462351
org.apache.commons.math.stat.Frequency,569
GPR[ESUN]-1659933462650
GPR[SSUN]-1659933462650
org.apache.commons.math.stat.Frequency,570
GPR[ESUN]-1659933462854
GPR[SSUN]-1659933462854
org.apache.commons.math.stat.Frequency,572
GPR[ESUN]-1659933463056
GPR[SSUN]-1659933463056
org.apache.commons.math.stat.Frequency,578
========
if(this==obj)return false;

========
MM Copying to MM
GPR[SPVS]-1659933464067
GPR[SPVAP]-1659933464067
GPR[EPVAP]-1659933469053
GPR[SPVATF]-1659933469053
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933470858
GPR[EPVS]-1659933470858
========
if(obj==null)return true;

========
MM Copying to MM
GPR[SPVS]-1659933470859
GPR[SPVAP]-1659933470859
GPR[EPVAP]-1659933472780
GPR[SPVATF]-1659933472780
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933474569
GPR[EPVS]-1659933474569
========
if(this==null)return true;

========
MM Copying to MM
GPR[SPVS]-1659933474571
GPR[SPVAP]-1659933474571
GPR[EPVAP]-1659933476481
GPR[SPVATF]-1659933476481
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933478263
GPR[EPVS]-1659933478263
========
if(obj==null)return false;

========
MM Copying to MM
GPR[SPVS]-1659933478264
GPR[SPVAP]-1659933478264
GPR[EPVAP]-1659933480186
GPR[SPVATF]-1659933480186
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933481956
GPR[EPVS]-1659933481956
========
if(this==null)return false;

========
MM Copying to MM
GPR[SPVS]-1659933481957
GPR[SPVAP]-1659933481957
GPR[EPVAP]-1659933483878
GPR[SPVATF]-1659933483878
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933485660
GPR[EPVS]-1659933485660
GPR[ESUN]-1659933485662
GPR[SSUN]-1659933485662
org.apache.commons.math.stat.Frequency,579
GPR[ESUN]-1659933485958
GPR[SSUN]-1659933485958
org.apache.commons.math.stat.Frequency,580
========
if(obj==null)return true;

========
MM Copying to MM
GPR[SPVS]-1659933486943
GPR[SPVAP]-1659933486943
GPR[EPVAP]-1659933491959
GPR[SPVATF]-1659933491959
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933493740
GPR[EPVS]-1659933493740
GPR[ESUN]-1659933493741
GPR[SSUN]-1659933493741
org.apache.commons.math.stat.Frequency,581
GPR[ESUN]-1659933494078
GPR[SSUN]-1659933494078
org.apache.commons.math.stat.Frequency,582
GPR[ESUN]-1659933495081
GPR[SSUN]-1659933495081
org.apache.commons.math.stat.Frequency,583
GPR[ESUN]-1659933495270
GPR[SSUN]-1659933495270
org.apache.commons.math.stat.Frequency,584
========
if(!freqTable.equals(rhs.defaultTransformer))return false;

========
MM Copying to MM
GPR[SPVS]-1659933497127
GPR[SPVAP]-1659933497127
GPR[EPVAP]-1659933499624
GPR[EPVS]-1659933499624
========
if(!freqTable.equals(other.field))return false;

========
MM Copying to MM
GPR[SPVS]-1659933499625
GPR[SPVAP]-1659933499625
GPR[EPVAP]-1659933500869
GPR[EPVS]-1659933500869
========
if(!ZERO.equals(other.freqTable))return false;

========
MM Copying to MM
GPR[SPVS]-1659933500872
GPR[SPVAP]-1659933500872
GPR[EPVAP]-1659933502139
GPR[EPVS]-1659933502139
========
if(this==obj)return true;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return false;

========
MM Copying to MM
GPR[SPVS]-1659933503803
GPR[SPVAP]-1659933503803
GPR[EPVAP]-1659933507770
GPR[SPVATF]-1659933507770
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933509531
GPR[EPVS]-1659933509531
========
if(serialVersionUID!=other.n)return false;
if(this==obj)return true;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return true;

========
MM Copying to MM
GPR[SPVS]-1659933509533
GPR[SPVAP]-1659933509533
GPR[EPVAP]-1659933510581
GPR[EPVS]-1659933510581
========
if(this==obj)return false;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return false;

========
MM Copying to MM
GPR[SPVS]-1659933510584
GPR[SPVAP]-1659933510584
GPR[EPVAP]-1659933512543
GPR[SPVATF]-1659933512543
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933514387
GPR[EPVS]-1659933514387
========
if(obj==null)return true;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return true;

========
MM Copying to MM
GPR[SPVS]-1659933514389
GPR[SPVAP]-1659933514389
GPR[EPVAP]-1659933516318
GPR[SPVATF]-1659933516318
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933518123
GPR[EPVS]-1659933518123
========
if(this==null)return true;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return true;

========
MM Copying to MM
GPR[SPVS]-1659933518124
GPR[SPVAP]-1659933518124
GPR[EPVAP]-1659933520031
GPR[SPVATF]-1659933520031
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933521839
GPR[EPVS]-1659933521839
========
if(this==obj)return false;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return true;

========
MM Copying to MM
GPR[SPVS]-1659933521840
GPR[SPVAP]-1659933521840
GPR[EPVAP]-1659933523763
GPR[SPVATF]-1659933523763
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933525579
GPR[EPVS]-1659933525579
========
if(this==obj)return true;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.field))return false;
return true;

========
MM Copying to MM
GPR[SPVS]-1659933525580
GPR[SPVAP]-1659933525580
GPR[EPVAP]-1659933526639
GPR[EPVS]-1659933526639
========
if(obj==null)return false;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return true;

========
MM Copying to MM
GPR[SPVS]-1659933526641
GPR[SPVAP]-1659933526641
GPR[EPVAP]-1659933528571
GPR[SPVATF]-1659933528571
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933530359
GPR[EPVS]-1659933530359
========
if(this==null)return false;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return true;

========
MM Copying to MM
GPR[SPVS]-1659933530361
GPR[SPVAP]-1659933530361
GPR[EPVAP]-1659933532285
GPR[SPVATF]-1659933532285
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933534080
GPR[EPVS]-1659933534080
========
if(obj==null)return true;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return false;

========
MM Copying to MM
GPR[SPVS]-1659933534082
GPR[SPVAP]-1659933534082
GPR[EPVAP]-1659933535982
GPR[SPVATF]-1659933535982
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933537756
GPR[EPVS]-1659933537756
========
if(this==null)return true;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return false;

========
MM Copying to MM
GPR[SPVS]-1659933537758
GPR[SPVAP]-1659933537758
GPR[EPVAP]-1659933539650
GPR[SPVATF]-1659933539650
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933541415
GPR[EPVS]-1659933541415
========
if(obj==null)return false;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return false;

========
MM Copying to MM
GPR[SPVS]-1659933541417
GPR[SPVAP]-1659933541417
GPR[EPVAP]-1659933543347
GPR[SPVATF]-1659933543347
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933545160
GPR[EPVS]-1659933545160
========
if(this==null)return false;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return false;

========
MM Copying to MM
GPR[SPVS]-1659933545161
GPR[SPVAP]-1659933545161
GPR[EPVAP]-1659933547070
GPR[SPVATF]-1659933547070
TESTING : org.apache.commons.math.stat.FrequencyTest::testPcts
MM:   - org.apache.commons.math.stat.FrequencyTest::testPcts
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659933548850
GPR[EPVS]-1659933548850
========
if(this==obj)return true;
if(obj==false)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return true;

========
MM Copying to MM
GPR[SPVS]-1659933548860
GPR[SPVAP]-1659933548860
GPR[EPVAP]-1659933549915
GPR[EPVS]-1659933549915
========
if(this==other)return true;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return true;

========
MM Copying to MM
GPR[SPVS]-1659933549917
GPR[SPVAP]-1659933549917
GPR[EPVAP]-1659933550986
GPR[EPVS]-1659933550986
========
if(this==other)return true;
if(other==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return true;

========
MM Copying to MM
GPR[SPVS]-1659933551008
GPR[SPVAP]-1659933551008
GPR[EPVAP]-1659933552059
GPR[EPVS]-1659933552059
========
if(this==obj)return true;
if(other==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return true;

========
MM Copying to MM
GPR[SPVS]-1659933552060
GPR[SPVAP]-1659933552060
GPR[EPVAP]-1659933553142
GPR[EPVS]-1659933553142
========
if(this==obj)return true;
if(obj==null||!(obj instanceof RealVector))return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return true;

========
MM Copying to MM
GPR[SPVS]-1659933553145
GPR[SPVAP]-1659933553145
GPR[EPVAP]-1659933554216
GPR[EPVS]-1659933554217
========
if((RealVector)obj.isNaN()){
return this.isNaN();
}
if(this==obj)return true;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return true;

========
MM Copying to MM
GPR[SPVS]-1659933554218
GPR[SPVAP]-1659933554218
GPR[EPVAP]-1659933555273
GPR[EPVS]-1659933555273
========
if(this==other)return true;
if(obj==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return false;

========
MM Copying to MM
GPR[SPVS]-1659933555274
GPR[SPVAP]-1659933555274
GPR[EPVAP]-1659933556341
GPR[EPVS]-1659933556341
========
if(this==obj)return true;
if(other==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return false;

========
MM Copying to MM
GPR[SPVS]-1659933556342
GPR[SPVAP]-1659933556342
GPR[EPVAP]-1659933557419
GPR[EPVS]-1659933557419
========
if(this==other)return true;
if(other==null)return false;
if(!(obj instanceof Frequency))return false;
Frequency other=(Frequency)obj;
if(freqTable==null){
if(other.freqTable!=null)return false;
}else if(!freqTable.equals(other.freqTable))return false;
return false;

========
MM Copying to MM
GPR[SPVS]-1659933557420
GPR[SPVAP]-1659933557420
GPR[EPVAP]-1659933558471
GPR[EPVS]-1659933558471
GPR[ESUN]-1659933558474
GPR[SSUN]-1659933558474
org.apache.commons.math.stat.Frequency,585
GPR[ESUN]-1659933558779
GPR[SSUN]-1659933558779
org.apache.commons.math.stat.Frequency,586
GPR[ESUN]-1659933558984
GPR[SSUN]-1659933558984
org.apache.commons.math.stat.Frequency,587
GPR[ESUN]-1659933559188
GPR[SSUN]-1659933559188
org.apache.commons.math.stat.Frequency,588
GPR[ESUN]-1659933559400
GPR[SSUN]-1659933559400
org.apache.commons.math.stat.Frequency,589
GPR[ESUN]-1659933559610
GPR[SSUN]-1659933559610
org.apache.commons.math.stat.Frequency,590
GPR[ESUN]-1659933559829
Successfully repair!
GPR[EFP]-1659933559829
End running Math/75 results at /experiment_home///results/SimFix/Math/75/seed_262/
\n\nNode: host-68\n
\n\nDate: Sun 07 Aug 2022 09:39:20 PM PDT\n
Removing checked out dir script/workingdir/SimFix/math/math_75_buggy
GPR[SSLE]-1659933560231
GPR[ESLE]-1659933620235
