Sleep 1m start
GPR[SSLI]-1659856988843
GPR[ESLI]-1659857048848
Running SimFix Math 79b
Timezone: America/Los_Angeles
Seed 261
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Math/79/seed_261/
Project lc: math
New out script/workingdir/SimFix/math/math_79_buggy
The file script/workingdir/SimFix/math/math_79_buggy does not exist!
script/workingdir/SimFix/math/math_79_buggy
Current directory: script/workingdir/SimFix/math/math_79_buggy
classpath:  script/workingdir/SimFix/math/math_79_buggy/target/classes:script/workingdir/SimFix/math/math_79_buggy/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/SimFix/math/math_79_buggy/lib/junit-4.4.jar
Src java:  /src/main/java
Classes Java:  /target/classes
Src Test:  /src/test/java
Classes Test:  /target/test-classes
GPR[SSLB]-1659857065190
GPR[ESLB]-1659857125195
Calling SimFix: at script/workingdir/SimFix/math/math_79_buggy
build.xml
checkstyle.xml
d4j-info
defects4j.build.properties
doap_math.rdf
findbugs-exclude-filter.xml
license-header.txt
LICENSE.txt
NOTICE.txt
pom.xml
PROPOSAL.html
RELEASE-NOTES.txt
src
target
test-jar.xml
content current dir: build.xml checkstyle.xml d4j-info defects4j.build.properties doap_math.rdf findbugs-exclude-filter.xml license-header.txt LICENSE.txt NOTICE.txt pom.xml PROPOSAL.html RELEASE-NOTES.txt src target test-jar.xml
Node: host-68
Date init: Sun 07 Aug 2022 12:25:27 AM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659857127489
=================================================
Project : math_79	start : 22/08/07 00:25

GPR[ESUP]-1659857129609
MM Purify? false
GPR[SFL]-1659857129989
GPR[EFL]-1659857130030
GPR[SFP]-1659857130030
TIMEOUT : 18000000
GPR[SSUN]-1659857130040
org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,30
Find no block!
GPR[SSUN]-1659857130253
org.apache.commons.math.stat.clustering.Cluster,45
Find no block!
GPR[SSUN]-1659857130447
org.apache.commons.math.stat.clustering.Cluster,46
GPR[ESUN]-1659857131586
GPR[SSUN]-1659857131586
org.apache.commons.math.stat.clustering.Cluster,47
GPR[ESUN]-1659857131777
GPR[SSUN]-1659857131777
org.apache.commons.math.stat.clustering.Cluster,48
Find no block!
GPR[SSUN]-1659857131975
org.apache.commons.math.stat.clustering.Cluster,71
GPR[ESUN]-1659857132989
GPR[SSUN]-1659857132990
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,40
Find no block!
GPR[SSUN]-1659857133178
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,41
GPR[ESUN]-1659857134272
GPR[SSUN]-1659857134272
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,42
Find no block!
GPR[SSUN]-1659857134462
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,56
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:min;

========
MM Copying to MM
GPR[SPVS]-1659857136122
GPR[SPVAP]-1659857136122
GPR[EPVAP]-1659857138477
GPR[EPVS]-1659857138477
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:max;

========
MM Copying to MM
GPR[SPVS]-1659857138479
GPR[SPVAP]-1659857138479
GPR[EPVAP]-1659857139793
GPR[EPVS]-1659857139793
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final double max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659857139794
GPR[SPVAP]-1659857139794
GPR[EPVAP]-1659857143793
GPR[SPVATF]-1659857143794
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857145612
GPR[EPVS]-1659857145612
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
if(k==0){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) must be positive",k);
}
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659857145614
GPR[SPVAP]-1659857145614
GPR[EPVAP]-1659857146636
GPR[EPVS]-1659857146636
========
if((maxIterations==k)||(k==0)){
return 0;
}
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659857146642
GPR[SPVAP]-1659857146642
GPR[EPVAP]-1659857147658
GPR[EPVS]-1659857147658
========
if((k==1)||(k==maxIterations-1)){
return Math.log(n);
}
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659857147659
GPR[SPVAP]-1659857147659
GPR[EPVAP]-1659857148664
GPR[EPVS]-1659857148664
========
if((maxIterations==k)||(k==0)){
return 1;
}
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659857148668
GPR[SPVAP]-1659857148668
GPR[EPVAP]-1659857149693
GPR[EPVS]-1659857149693
========
if((k==1)||(k==maxIterations-1)){
return n;
}
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659857149694
GPR[SPVAP]-1659857149694
GPR[EPVAP]-1659857150705
GPR[EPVS]-1659857150705
========
if((maxIterations==k)||(k==0)){
return 1.0;
}
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659857150707
GPR[SPVAP]-1659857150707
GPR[EPVAP]-1659857151756
GPR[EPVS]-1659857151756
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(k<0)?Integer.MAX_VALUE:maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659857151760
GPR[SPVAP]-1659857151760
GPR[EPVAP]-1659857153660
GPR[SPVATF]-1659857153660
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857155484
GPR[EPVS]-1659857155484
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:xk;

========
MM Copying to MM
GPR[SPVS]-1659857155485
GPR[SPVAP]-1659857155485
GPR[EPVAP]-1659857156498
GPR[EPVS]-1659857156498
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:x;

========
MM Copying to MM
GPR[SPVS]-1659857156499
GPR[SPVAP]-1659857156499
GPR[EPVAP]-1659857157504
GPR[EPVS]-1659857157504
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final double max=(k<0)?Integer.MAX_VALUE:maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659857157505
GPR[SPVAP]-1659857157505
GPR[EPVAP]-1659857159361
GPR[SPVATF]-1659857159361
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857161163
GPR[EPVS]-1659857161164
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final long max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659857161168
GPR[SPVAP]-1659857161168
GPR[EPVAP]-1659857163050
GPR[SPVATF]-1659857163050
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857164848
GPR[EPVS]-1659857164848
GPR[ESUN]-1659857164851
GPR[SSUN]-1659857164851
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,57
GPR[ESUN]-1659857165185
GPR[SSUN]-1659857165185
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,89
GPR[ESUN]-1659857166189
GPR[SSUN]-1659857166189
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,90
GPR[ESUN]-1659857166379
GPR[SSUN]-1659857166379
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,91
GPR[ESUN]-1659857166571
GPR[SSUN]-1659857166571
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,107
========
resultSet.add(new Cluster<T>(firstPoint));
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));

========
MM Copying to MM
GPR[SPVS]-1659857167736
GPR[SPVAP]-1659857167736
GPR[EPVAP]-1659857170059
GPR[EPVS]-1659857170059
========
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.nextInt(random.nextInt(pointSet.size()));

========
MM Copying to MM
GPR[SPVS]-1659857170061
GPR[SPVAP]-1659857170061
GPR[EPVAP]-1659857172647
GPR[EPVS]-1659857172647
========
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.distanceFrom(random.nextInt(pointSet.size()));

========
MM Copying to MM
GPR[SPVS]-1659857172649
GPR[SPVAP]-1659857172649
GPR[EPVAP]-1659857173893
GPR[EPVS]-1659857173893
========
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
Collections.sort(this.getChromosomes());
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));

========
MM Copying to MM
GPR[SPVS]-1659857173895
GPR[SPVAP]-1659857173895
GPR[EPVAP]-1659857175135
GPR[EPVS]-1659857175135
========
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.floor(random.nextInt(pointSet.size()));

========
MM Copying to MM
GPR[SPVS]-1659857175137
GPR[SPVAP]-1659857175137
GPR[EPVAP]-1659857176388
GPR[EPVS]-1659857176388
========
if(k>k){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));

========
MM Copying to MM
GPR[SPVS]-1659857176390
GPR[SPVAP]-1659857176390
GPR[EPVAP]-1659857177618
GPR[EPVS]-1659857177618
========
if(k<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",k);
}
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));

========
MM Copying to MM
GPR[SPVS]-1659857177619
GPR[SPVAP]-1659857177619
GPR[EPVAP]-1659857178899
GPR[EPVS]-1659857178899
========
if(getNumObjectiveFunctions()==2){
new Array2DRowRealMatrix(k,k+k).setEntry(0,0,-1);
}
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));

========
MM Copying to MM
GPR[SPVS]-1659857178900
GPR[SPVAP]-1659857178900
GPR[EPVAP]-1659857180147
GPR[EPVS]-1659857180147
GPR[ESUN]-1659857180149
GPR[SSUN]-1659857180149
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,108
GPR[ESUN]-1659857180457
GPR[SSUN]-1659857180457
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,111
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.nextInt(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857181714
GPR[SPVAP]-1659857181714
GPR[EPVAP]-1659857184023
GPR[EPVS]-1659857184023
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.distanceFrom(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857184024
GPR[SPVAP]-1659857184024
GPR[EPVAP]-1659857185327
GPR[EPVS]-1659857185327
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.centroidOf(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857185329
GPR[SPVAP]-1659857185329
GPR[EPVAP]-1659857186585
GPR[EPVS]-1659857186585
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.indexOf(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857186588
GPR[SPVAP]-1659857186588
GPR[EPVAP]-1659857187826
GPR[EPVS]-1659857187827
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.floor(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857187829
GPR[SPVAP]-1659857187829
GPR[EPVAP]-1659857189086
GPR[EPVS]-1659857189086
========
if(getNumObjectiveFunctions()==2){
new Array2DRowRealMatrix(k,k+k).setEntry(0,0,-1);
}
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857189088
GPR[SPVAP]-1659857189088
GPR[EPVAP]-1659857190312
GPR[EPVS]-1659857190312
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.multiply(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857190314
GPR[SPVAP]-1659857190314
GPR[EPVAP]-1659857191542
GPR[EPVS]-1659857191542
========
if(k>k){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857191543
GPR[SPVAP]-1659857191543
GPR[EPVAP]-1659857192773
GPR[EPVS]-1659857192773
========
if(k<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",k);
}
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857192775
GPR[SPVAP]-1659857192775
GPR[EPVAP]-1659857194028
GPR[EPVS]-1659857194028
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
this(firstPoint.getField(),k);
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857194030
GPR[SPVAP]-1659857194030
GPR[EPVAP]-1659857195395
GPR[EPVS]-1659857195395
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
if(d.length<k+k){
throw MathRuntimeException.createIllegalArgumentException("position {0} and size {1} don\'t fit to the size of the input array {2}",pos,size,d.length);
}
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857195397
GPR[SPVAP]-1659857195397
GPR[EPVAP]-1659857196675
GPR[EPVS]-1659857196675
========
k=source.size;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857196676
GPR[SPVAP]-1659857196676
GPR[EPVAP]-1659857197943
GPR[EPVS]-1659857197943
========
k=source.mask;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857197944
GPR[SPVAP]-1659857197944
GPR[EPVAP]-1659857199197
GPR[EPVS]-1659857199197
========
k=source.count;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857199198
GPR[SPVAP]-1659857199198
GPR[EPVAP]-1659857200426
GPR[EPVS]-1659857200426
========
firstPoint=source.missingEntries;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857200428
GPR[SPVAP]-1659857200428
GPR[EPVAP]-1659857201655
GPR[EPVS]-1659857201655
========
k=source.size;
k=source.mask;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857201656
GPR[SPVAP]-1659857201656
GPR[EPVAP]-1659857202879
GPR[EPVS]-1659857202879
========
k=source.size;
k=source.count;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857202880
GPR[SPVAP]-1659857202880
GPR[EPVAP]-1659857204103
GPR[EPVS]-1659857204103
========
k=source.mask;
k=source.count;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857204104
GPR[SPVAP]-1659857204104
GPR[EPVAP]-1659857205356
GPR[EPVS]-1659857205356
========
k=source.size;
k=source.mask;
k=source.count;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
MM Copying to MM
GPR[SPVS]-1659857205357
GPR[SPVAP]-1659857205357
GPR[EPVAP]-1659857206663
GPR[EPVS]-1659857206663
GPR[ESUN]-1659857206663
GPR[SSUN]-1659857206663
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,112
========
 final T firstPoint=pointSet.nextInt(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857208022
GPR[SPVAP]-1659857208022
GPR[EPVAP]-1659857210419
GPR[EPVS]-1659857210419
========
 final T firstPoint=pointSet.distanceFrom(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857210420
GPR[SPVAP]-1659857210420
GPR[EPVAP]-1659857211717
GPR[EPVS]-1659857211717
========
 final T firstPoint=pointSet.centroidOf(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857211720
GPR[SPVAP]-1659857211720
GPR[EPVAP]-1659857212979
GPR[EPVS]-1659857212979
========
 final T firstPoint=pointSet.indexOf(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857212984
GPR[SPVAP]-1659857212984
GPR[EPVAP]-1659857214274
GPR[EPVS]-1659857214274
========
 final T firstPoint=pointSet.floor(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857214276
GPR[SPVAP]-1659857214276
GPR[EPVAP]-1659857215514
GPR[EPVS]-1659857215514
========
if(k>k){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857215516
GPR[SPVAP]-1659857215516
GPR[EPVAP]-1659857216772
GPR[EPVS]-1659857216772
========
if(k<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",k);
}
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857216773
GPR[SPVAP]-1659857216773
GPR[EPVAP]-1659857218026
GPR[EPVS]-1659857218026
========
if(getNumObjectiveFunctions()==2){
new Array2DRowRealMatrix(k,k+k).setEntry(0,0,-1);
}
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857218028
GPR[SPVAP]-1659857218028
GPR[EPVAP]-1659857219256
GPR[EPVS]-1659857219256
========
 final T firstPoint=pointSet.multiply(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857219257
GPR[SPVAP]-1659857219257
GPR[EPVAP]-1659857220521
GPR[EPVS]-1659857220521
========
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
this(firstPoint.getField(),k);
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857220522
GPR[SPVAP]-1659857220522
GPR[EPVAP]-1659857221772
GPR[EPVS]-1659857221772
========
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[observations.size()];

========
MM Copying to MM
GPR[SPVS]-1659857221777
GPR[SPVAP]-1659857221777
GPR[EPVAP]-1659857223025
GPR[EPVS]-1659857223025
========
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
if(d.length<k+k){
throw MathRuntimeException.createIllegalArgumentException("position {0} and size {1} don\'t fit to the size of the input array {2}",pos,size,d.length);
}
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857223026
GPR[SPVAP]-1659857223026
GPR[EPVAP]-1659857224262
GPR[EPVS]-1659857224262
========
dx2=new double[k];
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857224264
GPR[SPVAP]-1659857224264
GPR[EPVAP]-1659857225509
GPR[EPVS]-1659857225509
========
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
dx2=new double[k];
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857225510
GPR[SPVAP]-1659857225510
GPR[EPVAP]-1659857226774
GPR[EPVS]-1659857226775
========
k=source.size;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857226776
GPR[SPVAP]-1659857226776
GPR[EPVAP]-1659857228019
GPR[EPVS]-1659857228019
========
k=source.mask;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857228020
GPR[SPVAP]-1659857228020
GPR[EPVAP]-1659857229300
GPR[EPVS]-1659857229300
========
k=source.count;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857229301
GPR[SPVAP]-1659857229301
GPR[EPVAP]-1659857230596
GPR[EPVS]-1659857230596
========
firstPoint=source.missingEntries;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857230598
GPR[SPVAP]-1659857230598
GPR[EPVAP]-1659857231888
GPR[EPVS]-1659857231888
========
k=source.size;
k=source.mask;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857231889
GPR[SPVAP]-1659857231889
GPR[EPVAP]-1659857233166
GPR[EPVS]-1659857233166
========
k=source.size;
k=source.count;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857233167
GPR[SPVAP]-1659857233167
GPR[EPVAP]-1659857234422
GPR[EPVS]-1659857234422
========
k=source.mask;
k=source.count;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857234423
GPR[SPVAP]-1659857234423
GPR[EPVAP]-1659857235671
GPR[EPVS]-1659857235671
========
k=source.size;
k=source.mask;
k=source.count;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
MM Copying to MM
GPR[SPVS]-1659857235673
GPR[SPVAP]-1659857235673
GPR[EPVAP]-1659857236895
GPR[EPVS]-1659857236895
GPR[ESUN]-1659857236896
GPR[SSUN]-1659857236896
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,114
GPR[ESUN]-1659857237173
GPR[SSUN]-1659857237173
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,115
========
for(int i=sum;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857240312
GPR[SPVAP]-1659857240312
GPR[EPVAP]-1659857246832
GPR[SPVATF]-1659857246832
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857248638
GPR[EPVS]-1659857248638
========
for(int i=0;i<getLength();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857248640
GPR[SPVAP]-1659857248640
GPR[EPVAP]-1659857249659
GPR[EPVS]-1659857249659
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.remove(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857249660
GPR[SPVAP]-1659857249660
GPR[EPVAP]-1659857251543
GPR[SPVATF]-1659857251543
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857253356
GPR[EPVS]-1659857253356
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857253358
GPR[SPVAP]-1659857253358
GPR[EPVAP]-1659857254370
GPR[EPVS]-1659857254370
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.nextInt(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857254372
GPR[SPVAP]-1659857254372
GPR[EPVAP]-1659857255378
GPR[EPVS]-1659857255378
========
for(int i=0;i<pointSet.size();i++){
subVector[d]=i;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857255380
GPR[SPVAP]-1659857255380
GPR[EPVAP]-1659857256394
GPR[EPVS]-1659857256394
========
for(int i=0;i<pointSet.size();i++){
 final T p=binStats.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857256396
GPR[SPVAP]-1659857256396
GPR[EPVAP]-1659857257416
GPR[EPVS]-1659857257416
========
for(int i=0;i<pointSet.size();i++){
nearest.addValue(dx2[i]);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857257417
GPR[SPVAP]-1659857257417
GPR[EPVAP]-1659857258431
GPR[EPVS]-1659857258431
========
k+=k;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857258433
GPR[SPVAP]-1659857258433
GPR[EPVAP]-1659857259461
GPR[EPVS]-1659857259461
========
for(int i=0;i<pointSet.size();i++){
nearest.addPoint(p);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857259464
GPR[SPVAP]-1659857259464
GPR[EPVAP]-1659857260514
GPR[EPVS]-1659857260514
========
nearest.computeBinStats();
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857260516
GPR[SPVAP]-1659857260516
GPR[EPVAP]-1659857261519
GPR[EPVS]-1659857261519
========
dx2=new double[d];
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857261520
GPR[SPVAP]-1659857261520
GPR[EPVAP]-1659857262542
GPR[EPVS]-1659857262542
========
dx2[d-1]=1.0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857262543
GPR[SPVAP]-1659857262543
GPR[EPVAP]-1659857263563
GPR[EPVS]-1659857263563
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(k==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857263565
GPR[SPVAP]-1659857263565
GPR[EPVAP]-1659857265453
GPR[SPVATF]-1659857265453
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857267247
GPR[EPVS]-1659857267247
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(k==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857267248
GPR[SPVAP]-1659857267248
GPR[EPVAP]-1659857268267
GPR[EPVS]-1659857268267
========
for(int i=0;i<=pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857268271
GPR[SPVAP]-1659857268271
GPR[EPVAP]-1659857270136
GPR[SPVATF]-1659857270136
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857271937
GPR[EPVS]-1659857271937
========
for(int i=0;i<getRowDimension();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857271945
GPR[SPVAP]-1659857271945
GPR[EPVAP]-1659857272982
GPR[EPVS]-1659857272982
========
for(int i=0;i<pointSet.size();i++){
iterationCount=k;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857272984
GPR[SPVAP]-1659857272984
GPR[EPVAP]-1659857273991
GPR[EPVS]-1659857273991
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.abs(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857274004
GPR[SPVAP]-1659857274004
GPR[EPVAP]-1659857275045
GPR[EPVS]-1659857275045
========
for(int i=0;i<pointSet.size();i++){
max+=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857275046
GPR[SPVAP]-1659857275046
GPR[EPVAP]-1659857276070
GPR[EPVS]-1659857276071
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getEntry(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857276075
GPR[SPVAP]-1659857276075
GPR[EPVAP]-1659857277101
GPR[EPVS]-1659857277102
========
default :

for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857277104
GPR[SPVAP]-1659857277104
GPR[EPVAP]-1659857278023
GPR[EPVS]-1659857278023
========
if((d+i)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857278025
GPR[SPVAP]-1659857278025
GPR[EPVAP]-1659857279083
GPR[EPVS]-1659857279083
========
sum=i;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857279084
GPR[SPVAP]-1659857279084
GPR[EPVAP]-1659857280107
GPR[EPVS]-1659857280107
========
for(int i=sum;i<=pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857280115
GPR[SPVAP]-1659857280115
GPR[EPVAP]-1659857281989
GPR[SPVATF]-1659857281989
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857283783
GPR[EPVS]-1659857283783
========
for(int i=0;i<pointSet.size();i++){
sumObserved+=observed[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857283785
GPR[SPVAP]-1659857283785
GPR[EPVAP]-1659857284809
GPR[EPVS]-1659857284809
========
for(int i=0;i<getArtificialVariableOffset();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857284813
GPR[SPVAP]-1659857284813
GPR[EPVAP]-1659857285820
GPR[EPVS]-1659857285820
========
if(d==0.0){
for(int k=0;k<k;++k){
if((k!=k)&&(dx2[i]==x[k])){
throw MathRuntimeException.createArithmeticException("identical abscissas x[{0}] == x[{1}] == {2} cause division by zero",i,k,x[i]);
}
}
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857285833
GPR[SPVAP]-1659857285833
GPR[EPVAP]-1659857286857
GPR[EPVS]-1659857286857
========
for(int i=0;i<pointSet.size();i++){
random=d>>8;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857286858
GPR[SPVAP]-1659857286858
GPR[EPVAP]-1659857287875
GPR[EPVS]-1659857287875
========
for(int i=0;i<pointSet.size();i++){
index+=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857287877
GPR[SPVAP]-1659857287877
GPR[EPVAP]-1659857288898
GPR[EPVS]-1659857288898
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.valueOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857288901
GPR[SPVAP]-1659857288901
GPR[EPVAP]-1659857289933
GPR[EPVS]-1659857289933
========
for(int i=0;i<pointSet.size();i++){
if(Integer.toHexString(nearest.intValue()+128).length()==1){
hex="0"+Integer.toHexString(nearest.intValue()+128);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857289934
GPR[SPVAP]-1659857289934
GPR[EPVAP]-1659857290952
GPR[EPVS]-1659857290952
========
for(int i=0;i<pointSet.size();i++){
if(Integer.toHexString(nearest.intValue()+128).length()==1){
hex="0"+Integer.toHexString(nearest.intValue()+128);
}
 final T p=pointSet.valueOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857290954
GPR[SPVAP]-1659857290954
GPR[EPVAP]-1659857291974
GPR[EPVS]-1659857291974
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
mt[0]=mt[N-1];
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857291979
GPR[SPVAP]-1659857291979
GPR[EPVAP]-1659857293005
GPR[EPVS]-1659857293006
========
for(int i=0;i<pointSet.size();i++){
numElements-=i;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857293007
GPR[SPVAP]-1659857293007
GPR[EPVAP]-1659857294016
GPR[EPVS]-1659857294016
========
for(int i=0;i<getHeight();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857294020
GPR[SPVAP]-1659857294020
GPR[EPVAP]-1659857295023
GPR[EPVS]-1659857295023
========
i++;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857295027
GPR[SPVAP]-1659857295027
GPR[EPVAP]-1659857296087
GPR[EPVS]-1659857296087
========
for(int i=0;i<pointSet.size();i++){
if(Double.isInfinite(dx2[i])){
throw MathRuntimeException.createArithmeticException("Array contains an infinite element, {0} at index {1}",dx2[i],i);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857296089
GPR[SPVAP]-1659857296089
GPR[EPVAP]-1659857297115
GPR[EPVS]-1659857297115
========
d=dx2[k];
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857297116
GPR[SPVAP]-1659857297116
GPR[EPVAP]-1659857298135
GPR[EPVS]-1659857298135
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sqrt(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857298138
GPR[SPVAP]-1659857298138
GPR[EPVAP]-1659857299161
GPR[EPVS]-1659857299161
========
for(int i=0;i<pointSet.size();i++){
luCol[i]=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857299163
GPR[SPVAP]-1659857299163
GPR[EPVAP]-1659857300206
GPR[EPVS]-1659857300206
========
for(int i=0;i<pointSet.size();i++){
oldDelta=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857300209
GPR[SPVAP]-1659857300209
GPR[EPVAP]-1659857301219
GPR[EPVS]-1659857301219
========
for(int i=0;i<pointSet.size();i++){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857301223
GPR[SPVAP]-1659857301223
GPR[EPVAP]-1659857302252
GPR[EPVS]-1659857302252
========
for(int i=0;i<pointSet.size();i++){
++i;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857302254
GPR[SPVAP]-1659857302254
GPR[EPVAP]-1659857304111
GPR[SPVATF]-1659857304111
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857305926
GPR[EPVS]-1659857305927
========
for(int i=0;i<pointSet.size();i++){
if(k==bytes.length){
return ;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857305929
GPR[SPVAP]-1659857305929
GPR[EPVAP]-1659857306944
GPR[EPVS]-1659857306944
========
for(int i=0;i<pointSet.size();i++){
residuals[i]=d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857306948
GPR[SPVAP]-1659857306948
GPR[EPVAP]-1659857307978
GPR[EPVS]-1659857307978
========
for(int i=0;i<pointSet.size();i++){
cost+=residualsWeights[i]*d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857307979
GPR[SPVAP]-1659857307979
GPR[EPVAP]-1659857309027
GPR[EPVS]-1659857309027
========
for(int i=0;i<pointSet.size();i++){
residuals[i]=d;
cost+=residualsWeights[i]*d;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857309028
GPR[SPVAP]-1659857309028
GPR[EPVAP]-1659857310069
GPR[EPVS]-1659857310069
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final int d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857310071
GPR[SPVAP]-1659857310071
GPR[EPVAP]-1659857311096
GPR[EPVS]-1659857311096
========
for(int i=0;i<pointSet.size();i++){
diff=sample1[i]-sample2[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857311098
GPR[SPVAP]-1659857311098
GPR[EPVAP]-1659857312147
GPR[EPVS]-1659857312147
========
for(int i=0;i<pointSet.size();i++){
yEnd[i]=y0[i]+d*f[0][i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857312150
GPR[SPVAP]-1659857312150
GPR[EPVAP]-1659857313187
GPR[EPVS]-1659857313187
========
for(int i=0;i<pointSet.size();i++){
f[i]=data[ii];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857313190
GPR[SPVAP]-1659857313190
GPR[EPVAP]-1659857314231
GPR[EPVS]-1659857314231
========
for(int i=0;i<pointSet.size();i++){
ii+=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857314232
GPR[SPVAP]-1659857314232
GPR[EPVAP]-1659857316097
GPR[EPVS]-1659857316097
========
for(int i=0;i<pointSet.size();i++){
f[i]=data[ii];
ii+=sum;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857316103
GPR[SPVAP]-1659857316103
GPR[EPVAP]-1659857317306
GPR[EPVS]-1659857317306
========
for(int i=0;i<pointSet.size();i++){
lJ[i]=0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857317309
GPR[SPVAP]-1659857317309
GPR[EPVAP]-1659857318338
GPR[EPVS]-1659857318338
========
for(int i=0;i<pointSet.size();i++){
absDCurrent=Math.abs(dx2[i+1]);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857318340
GPR[SPVAP]-1659857318340
GPR[EPVAP]-1659857319362
GPR[EPVS]-1659857319362
========
for(int i=0;i<pointSet.size();i++){
sumImpl[i]=new Sum();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857319365
GPR[SPVAP]-1659857319365
GPR[EPVAP]-1659857320403
GPR[EPVS]-1659857320403
========
for(int i=0;i<pointSet.size();i++){
minImpl[i]=new Min();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857320404
GPR[SPVAP]-1659857320404
GPR[EPVAP]-1659857321423
GPR[EPVS]-1659857321423
========
for(int i=0;i<pointSet.size();i++){
maxImpl[i]=new Max();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857321424
GPR[SPVAP]-1659857321424
GPR[EPVAP]-1659857322437
GPR[EPVS]-1659857322437
========
for(int i=0;i<pointSet.size();i++){
sumLogImpl[i]=new SumOfLogs();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857322438
GPR[SPVAP]-1659857322438
GPR[EPVAP]-1659857323447
GPR[EPVS]-1659857323447
========
for(int i=0;i<pointSet.size();i++){
geoMeanImpl[i]=new GeometricMean();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857323448
GPR[SPVAP]-1659857323448
GPR[EPVAP]-1659857324462
GPR[EPVS]-1659857324462
========
for(int i=0;i<pointSet.size();i++){
meanImpl[i]=new Mean();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857324463
GPR[SPVAP]-1659857324463
GPR[EPVAP]-1659857325505
GPR[EPVS]-1659857325505
========
for(int i=0;i<pointSet.size();i++){
sumImpl[i]=new Sum();
minImpl[i]=new Min();
maxImpl[i]=new Max();
sumLogImpl[i]=new SumOfLogs();
geoMeanImpl[i]=new GeometricMean();
meanImpl[i]=new Mean();

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857325507
GPR[SPVAP]-1659857325507
GPR[EPVAP]-1659857326519
GPR[EPVS]-1659857326519
========
for(int i=0;i<pointSet.size();i++){
if(Double.isNaN(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("NaN weight at index {0}",i);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857326520
GPR[SPVAP]-1659857326520
GPR[EPVAP]-1659857327541
GPR[EPVS]-1659857327541
========
for(int i=0;i<pointSet.size();i++){
if(Double.isInfinite(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("Infinite weight at index {0}",i);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857327546
GPR[SPVAP]-1659857327546
GPR[EPVAP]-1659857328561
GPR[EPVS]-1659857328561
========
for(int i=0;i<pointSet.size();i++){
if(weights[i]<0){
throw MathRuntimeException.createIllegalArgumentException("negative weight {0} at index {1} ",dx2[i],i);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857328562
GPR[SPVAP]-1659857328562
GPR[EPVAP]-1659857329572
GPR[EPVS]-1659857329572
========
for(int i=0;i<pointSet.size();i++){
if(Double.isNaN(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("NaN weight at index {0}",i);
}
if(Double.isInfinite(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("Infinite weight at index {0}",i);
}
if(weights[i]<0){
throw MathRuntimeException.createIllegalArgumentException("negative weight {0} at index {1} ",dx2[i],i);
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857329573
GPR[SPVAP]-1659857329573
GPR[EPVAP]-1659857330605
GPR[EPVS]-1659857330605
========
for(int i=0;i<pointSet.size();i++){
d[i]=y[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857330607
GPR[SPVAP]-1659857330607
GPR[EPVAP]-1659857331621
GPR[EPVS]-1659857331621
========
if(i<0){
i=-i-2;
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857331624
GPR[SPVAP]-1659857331624
GPR[EPVAP]-1659857332615
GPR[EPVS]-1659857332615
========
if(i>=polynomials.length){
i--;
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857332616
GPR[SPVAP]-1659857332616
GPR[EPVAP]-1659857333649
GPR[EPVS]-1659857333649
========
for(int i=0;i<=pointSet.size();i++){
 final T p=pointSet.abs(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857333651
GPR[SPVAP]-1659857333651
GPR[EPVAP]-1659857334656
GPR[EPVS]-1659857334656
========
k++;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857334659
GPR[SPVAP]-1659857334659
GPR[EPVAP]-1659857335699
GPR[EPVS]-1659857335699
========
for(int i=0;i<pointSet.size();i++){
l[i-1]=d/sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857335700
GPR[SPVAP]-1659857335700
GPR[EPVAP]-1659857336737
GPR[EPVS]-1659857336737
========
for(int i=0;i<pointSet.size();i++){
d[i]=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857336738
GPR[SPVAP]-1659857336738
GPR[EPVAP]-1659857337753
GPR[EPVS]-1659857337753
========
for(int i=0;i<pointSet.size();i++){
l[i-1]=d/sum;
d[i]=sum;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857337754
GPR[SPVAP]-1659857337754
GPR[EPVAP]-1659857338804
GPR[EPVS]-1659857338804
========
if(dx2[i]-xval[k]>xval[sum]-xval[i]){
k=ileft;
}else {
edge=iright;
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857338806
GPR[SPVAP]-1659857338806
GPR[EPVAP]-1659857339843
GPR[EPVS]-1659857339843
========
for(int i=0;i<pointSet.size();i++){
lu[max][i]=lu[col][i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857339844
GPR[SPVAP]-1659857339844
GPR[EPVAP]-1659857340863
GPR[EPVS]-1659857340863
========
for(int i=0;i<pointSet.size();i++){
lu[col][i]=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857340864
GPR[SPVAP]-1659857340864
GPR[EPVAP]-1659857341889
GPR[EPVS]-1659857341889
========
for(int i=0;i<pointSet.size();i++){
lu[max][i]=lu[col][i];
lu[col][i]=sum;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857341891
GPR[SPVAP]-1659857341891
GPR[EPVAP]-1659857342882
GPR[EPVS]-1659857342882
========
for(int i=0;i<pointSet.size();i++){
lu[nonZero][i]=lu[col][i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857342883
GPR[SPVAP]-1659857342883
GPR[EPVAP]-1659857343897
GPR[EPVS]-1659857343897
========
for(int i=0;i<pointSet.size();i++){
lu[nonZero][i]=lu[col][i];
lu[col][i]=sum;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857343898
GPR[SPVAP]-1659857343898
GPR[EPVAP]-1659857344912
GPR[EPVS]-1659857344912
========
MatrixUtils.checkRowIndex(this,k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857344914
GPR[SPVAP]-1659857344914
GPR[EPVAP]-1659857345923
GPR[EPVS]-1659857345923
========
MatrixUtils.checkColumnIndex(this,k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857345924
GPR[SPVAP]-1659857345924
GPR[EPVAP]-1659857346946
GPR[EPVS]-1659857346946
========
MatrixUtils.checkRowIndex(this,k);
MatrixUtils.checkColumnIndex(this,k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857346948
GPR[SPVAP]-1659857346948
GPR[EPVAP]-1659857347959
GPR[EPVS]-1659857347959
========
for(int i=0;i<pointSet.size();i++){
val=Double.parseDouble(p);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857347960
GPR[SPVAP]-1659857347960
GPR[EPVAP]-1659857348985
GPR[EPVS]-1659857348985
========
for(int i=0;i<pointSet.size();i++){
 final T p=(i==0)?null:pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857348986
GPR[SPVAP]-1659857348986
GPR[EPVAP]-1659857350854
GPR[SPVATF]-1659857350854
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857352660
GPR[EPVS]-1659857352660
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=(i==0)?null:p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857352661
GPR[SPVAP]-1659857352661
GPR[EPVAP]-1659857354522
GPR[SPVATF]-1659857354522
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857356339
GPR[EPVS]-1659857356339
========
for(int i=0;i<pointSet.size();i++){
 final T p=(i==0)?null:pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=(i==0)?null:p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857356340
GPR[SPVAP]-1659857356340
GPR[EPVAP]-1659857358216
GPR[SPVATF]-1659857358216
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857360002
GPR[EPVS]-1659857360002
========
for(int i=0;i<pointSet.size();i++){
oldt=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857360005
GPR[SPVAP]-1659857360005
GPR[EPVAP]-1659857361020
GPR[EPVS]-1659857361020
========
if(d<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",k);
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857361024
GPR[SPVAP]-1659857361024
GPR[EPVAP]-1659857362034
GPR[EPVS]-1659857362034
========
for(int i=0;i<pointSet.size();i++){
jacobian[i][pk]=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857362037
GPR[SPVAP]-1659857362037
GPR[EPVAP]-1659857363054
GPR[EPVS]-1659857363054
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sin(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857363057
GPR[SPVAP]-1659857363057
GPR[EPVAP]-1659857364072
GPR[EPVS]-1659857364072
========
for(int i=0;i<pointSet.size();i++){
after[i]+=previous[i]+scaled[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857364075
GPR[SPVAP]-1659857364075
GPR[EPVAP]-1659857365110
GPR[EPVS]-1659857365110
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getOmegaReal(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857365115
GPR[SPVAP]-1659857365115
GPR[EPVAP]-1659857366123
GPR[EPVS]-1659857366123
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getOmegaImaginary(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857366124
GPR[SPVAP]-1659857366124
GPR[EPVAP]-1659857367131
GPR[EPVS]-1659857367131
========
for(int i=0;i<pointSet.size();i++){
diagMax=0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857367133
GPR[SPVAP]-1659857367133
GPR[EPVAP]-1659857368138
GPR[EPVS]-1659857368138
========
for(int i=0;i<pointSet.size();i++){
offDiagMin=work[i+6];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857368140
GPR[SPVAP]-1659857368140
GPR[EPVAP]-1659857369165
GPR[EPVS]-1659857369165
========
for(int i=0;i<pointSet.size();i++){
previousEMin=work[i+7];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857369167
GPR[SPVAP]-1659857369167
GPR[EPVAP]-1659857370211
GPR[EPVS]-1659857370211
========
for(int i=0;i<pointSet.size();i++){
diagMax=0;
offDiagMin=work[i+6];
previousEMin=work[i+7];

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857370212
GPR[SPVAP]-1659857370212
GPR[EPVAP]-1659857371243
GPR[EPVS]-1659857371243
========
for(int i=0;i<pointSet.size();i++){
t1+=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857371245
GPR[SPVAP]-1659857371245
GPR[EPVAP]-1659857372253
GPR[EPVS]-1659857372253
========
checkRowIndex(k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857372257
GPR[SPVAP]-1659857372257
GPR[EPVAP]-1659857373281
GPR[EPVS]-1659857373281
========
checkColumnIndex(k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857373282
GPR[SPVAP]-1659857373282
GPR[EPVAP]-1659857374305
GPR[EPVS]-1659857374305
========
checkRowIndex(k);
checkColumnIndex(k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857374306
GPR[SPVAP]-1659857374306
GPR[EPVAP]-1659857375315
GPR[EPVS]-1659857375315
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.next(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857375316
GPR[SPVAP]-1659857375316
GPR[EPVAP]-1659857376348
GPR[EPVS]-1659857376348
========
for(int i=0;i<pointSet.size();i++){
bytes[i]=(byte)(random&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857376349
GPR[SPVAP]-1659857376349
GPR[EPVAP]-1659857377375
GPR[EPVS]-1659857377375
========
for(int i=0;i<pointSet.size();i++){
bytes[i+1]=(byte)((random>>8)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857377376
GPR[SPVAP]-1659857377376
GPR[EPVAP]-1659857378397
GPR[EPVS]-1659857378397
========
for(int i=0;i<pointSet.size();i++){
bytes[i+2]=(byte)((random>>16)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857378399
GPR[SPVAP]-1659857378399
GPR[EPVAP]-1659857379419
GPR[EPVS]-1659857379419
========
for(int i=0;i<pointSet.size();i++){
bytes[i+3]=(byte)((random>>24)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857379420
GPR[SPVAP]-1659857379420
GPR[EPVAP]-1659857380432
GPR[EPVS]-1659857380432
========
for(int i=0;i<pointSet.size();i++){
i+=4;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857380433
GPR[SPVAP]-1659857380433
GPR[EPVAP]-1659857382271
GPR[SPVATF]-1659857382271
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857384062
GPR[EPVS]-1659857384062
========
for(int i=0;i<pointSet.size();i++){
bytes[i]=(byte)(random&0xff);
bytes[i+1]=(byte)((random>>8)&0xff);
bytes[i+2]=(byte)((random>>16)&0xff);
bytes[i+3]=(byte)((random>>24)&0xff);
i+=4;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857384063
GPR[SPVAP]-1659857384063
GPR[EPVAP]-1659857385125
GPR[EPVS]-1659857385125
========
new ArrayList<Double>(nearest).set(i,GeneticAlgorithm.getRandomGenerator().nextDouble());
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857385127
GPR[SPVAP]-1659857385127
GPR[EPVAP]-1659857386182
GPR[EPVS]-1659857386182
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
m4=0.0;
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857386185
GPR[SPVAP]-1659857386185
GPR[EPVAP]-1659857388515
GPR[EPVS]-1659857388515
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
m3=0.0;
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857388523
GPR[SPVAP]-1659857388523
GPR[EPVAP]-1659857389608
GPR[EPVS]-1659857389608
========
for(int i=0;i<pointSet.size();i++){
m1=0.0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857389609
GPR[SPVAP]-1659857389609
GPR[EPVAP]-1659857390620
GPR[EPVS]-1659857390620
========
for(int i=0;i<pointSet.size();i++){
m4=0.0;
m3=0.0;
m1=0.0;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857390621
GPR[SPVAP]-1659857390621
GPR[EPVAP]-1659857391679
GPR[EPVS]-1659857391679
========
p=buildArray(k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857391680
GPR[SPVAP]-1659857391680
GPR[EPVAP]-1659857392707
GPR[EPVS]-1659857392707
========
p=new double[k];
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857392709
GPR[SPVAP]-1659857392709
GPR[EPVAP]-1659857393712
GPR[EPVS]-1659857393712
========
System.arraycopy(dx2,i,p,0,k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857393714
GPR[SPVAP]-1659857393714
GPR[EPVAP]-1659857394725
GPR[EPVS]-1659857394725
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(i>=mBlock.length){
mBlock=matrix.blocks[++mBlockIndex];
mIndex=0;
}
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857394735
GPR[SPVAP]-1659857394735
GPR[EPVAP]-1659857395755
GPR[EPVS]-1659857395755
========
for(int i=0;i<pointSet.size();i++){
g=2.0*(x[i+1]-x[i-1])-h[i-1]*mu[i-1];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857395757
GPR[SPVAP]-1659857395757
GPR[EPVAP]-1659857396769
GPR[EPVS]-1659857396769
========
for(int i=0;i<pointSet.size();i++){
z[i]=(3.0*(y[i+1]*h[i-1]-y[i]*(x[i+1]-x[i-1])+y[i-1]*h[i])/(h[i-1]*h[i])-h[i-1]*z[i-1])/d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857396770
GPR[SPVAP]-1659857396770
GPR[EPVAP]-1659857397838
GPR[EPVS]-1659857397839
========
for(int i=0;i<pointSet.size();i++){
g=2.0*(x[i+1]-x[i-1])-h[i-1]*mu[i-1];
z[i]=(3.0*(y[i+1]*h[i-1]-y[i]*(x[i+1]-x[i-1])+y[i-1]*h[i])/(h[i-1]*h[i])-h[i-1]*z[i-1])/d;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1659857397840
GPR[SPVAP]-1659857397840
GPR[EPVAP]-1659857398894
GPR[EPVS]-1659857398894
========
if(dx2[i]>=r){
secondary[i]=0;
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857401512
GPR[SPVAP]-1659857401512
GPR[EPVAP]-1659857402535
GPR[EPVS]-1659857402535
========
if(dx2[i]>=r){
squaredSecondary[i]=0;
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857402536
GPR[SPVAP]-1659857402536
GPR[EPVAP]-1659857403554
GPR[EPVS]-1659857403554
========
if(dx2[i]>=r){
secondary[i]=0;
squaredSecondary[i]=0;

 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857403555
GPR[SPVAP]-1659857403555
GPR[EPVAP]-1659857404572
GPR[EPVS]-1659857404572
========
if(dx2[i]>=r){
pos=k+1;
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857404574
GPR[SPVAP]-1659857404574
GPR[EPVAP]-1659857405601
GPR[EPVS]-1659857405601
========
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
tiesTrace=new ArrayList<Integer>();
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857405602
GPR[SPVAP]-1659857405602
GPR[EPVAP]-1659857406614
GPR[EPVS]-1659857406614
========
if(dx2[i]>=r){
pos=k+1;
tiesTrace=new ArrayList<Integer>();

 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857406615
GPR[SPVAP]-1659857406615
GPR[EPVAP]-1659857407639
GPR[EPVS]-1659857407639
========
if(dx2[i]>r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857407644
GPR[SPVAP]-1659857407644
GPR[EPVAP]-1659857409513
GPR[SPVATF]-1659857409514
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857411350
GPR[EPVS]-1659857411350
========
if(dx2[i]>=r){
setResult(p,i);
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857411352
GPR[SPVAP]-1659857411352
GPR[EPVAP]-1659857412359
GPR[EPVS]-1659857412359
========
if((k+k)>internalArray.length){
expandTo(startIndex+i);
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857412361
GPR[SPVAP]-1659857412361
GPR[EPVAP]-1659857413371
GPR[EPVS]-1659857413371
========
k=k;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857413372
GPR[SPVAP]-1659857413372
GPR[EPVAP]-1659857414378
GPR[EPVS]-1659857414378
========
if(dx2[i]>=r){
 final T p=pointSet.get(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857414381
GPR[SPVAP]-1659857414381
GPR[EPVAP]-1659857416245
GPR[SPVATF]-1659857416245
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857418034
GPR[EPVS]-1659857418034
========
if(dx2[k-1]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857418036
GPR[SPVAP]-1659857418036
GPR[EPVAP]-1659857419886
GPR[SPVATF]-1659857419886
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857421678
GPR[EPVS]-1659857421678
========
setSeed(19650218);
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857421680
GPR[SPVAP]-1659857421681
GPR[EPVAP]-1659857422703
GPR[EPVS]-1659857422703
========
if(dx2[i]-xval[k]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857422706
GPR[SPVAP]-1659857422706
GPR[EPVAP]-1659857423715
GPR[EPVS]-1659857423715
========
k++;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857423716
GPR[SPVAP]-1659857423716
GPR[EPVAP]-1659857424725
GPR[EPVS]-1659857424725
========
if(k<0){
i=-i-2;
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857424726
GPR[SPVAP]-1659857424726
GPR[EPVAP]-1659857426582
GPR[SPVATF]-1659857426582
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857428393
GPR[EPVS]-1659857428393
========
if(k>=polynomials.length){
i--;
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857428395
GPR[SPVAP]-1659857428395
GPR[EPVAP]-1659857429418
GPR[EPVS]-1659857429418
========
i++;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857429420
GPR[SPVAP]-1659857429420
GPR[EPVAP]-1659857431302
GPR[SPVATF]-1659857431302
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857433099
GPR[EPVS]-1659857433100
========
p=Math.min(offDiagMin,dx2[k+2]);
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857433105
GPR[SPVAP]-1659857433105
GPR[EPVAP]-1659857434111
GPR[EPVS]-1659857434111
========
k++;
i++;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857434113
GPR[SPVAP]-1659857434113
GPR[EPVAP]-1659857435139
GPR[EPVS]-1659857435139
========
if(dx2[i]>=r){
offDiagMin=Math.min(p,dx2[k+2]);
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1659857435143
GPR[SPVAP]-1659857435143
GPR[EPVAP]-1659857436170
GPR[EPVS]-1659857436170
========
for(int i=0;i<ranks.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857439343
GPR[SPVAP]-1659857439343
GPR[EPVAP]-1659857440363
GPR[EPVS]-1659857440363
========
for(int i=0;i<data.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857440365
GPR[SPVAP]-1659857440365
GPR[EPVAP]-1659857441375
GPR[EPVS]-1659857441375
========
for(int i=0;i<secondary.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857441377
GPR[SPVAP]-1659857441377
GPR[EPVAP]-1659857442434
GPR[EPVS]-1659857442434
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
secondary[i]=0;
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857442436
GPR[SPVAP]-1659857442436
GPR[EPVAP]-1659857443454
GPR[EPVS]-1659857443455
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
squaredSecondary[i]=0;
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857443456
GPR[SPVAP]-1659857443456
GPR[EPVAP]-1659857444476
GPR[EPVS]-1659857444476
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
secondary[i]=0;
squaredSecondary[i]=0;

 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857444477
GPR[SPVAP]-1659857444477
GPR[EPVAP]-1659857445504
GPR[EPVS]-1659857445504
========
for(int i=0;i<dx2.length;i++){
absDCurrent=Math.abs(dx2[i+1]);
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857445506
GPR[SPVAP]-1659857445506
GPR[EPVAP]-1659857446511
GPR[EPVS]-1659857446511
========
checkVectorDimensions(v.length);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857446512
GPR[SPVAP]-1659857446512
GPR[EPVAP]-1659857447525
GPR[EPVS]-1659857447525
========
checkVectorDimensions(v.length);
for(int i=0;i<data.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857447527
GPR[SPVAP]-1659857447527
GPR[EPVAP]-1659857448554
GPR[EPVS]-1659857448554
========
for(int i=0;i<v.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857448556
GPR[SPVAP]-1659857448556
GPR[EPVAP]-1659857449583
GPR[EPVS]-1659857449583
========
checkVectorDimensions(v.length);
for(int i=0;i<v.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857449585
GPR[SPVAP]-1659857449585
GPR[EPVAP]-1659857450601
GPR[EPVS]-1659857450601
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
pos=i+1;
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857450603
GPR[SPVAP]-1659857450603
GPR[EPVAP]-1659857451622
GPR[EPVS]-1659857451622
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
tiesTrace=new ArrayList<Integer>();
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857451623
GPR[SPVAP]-1659857451623
GPR[EPVAP]-1659857452633
GPR[EPVS]-1659857452633
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
pos=i+1;
tiesTrace=new ArrayList<Integer>();

 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857452634
GPR[SPVAP]-1659857452634
GPR[EPVAP]-1659857453690
GPR[EPVS]-1659857453690
========
for(int i=0;i<dx2.length;i++){
out[ranks[i].getPosition()]=k;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857453691
GPR[SPVAP]-1659857453691
GPR[EPVAP]-1659857454730
GPR[EPVS]-1659857454730
========
for(int i=0;i<measurements.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857454732
GPR[SPVAP]-1659857454732
GPR[EPVAP]-1659857455761
GPR[EPVS]-1659857455761
========
for(int i=0;i<x.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857455764
GPR[SPVAP]-1659857455764
GPR[EPVAP]-1659857456806
GPR[EPVS]-1659857456806
========
for(int i=0;i<point.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857456807
GPR[SPVAP]-1659857456807
GPR[EPVAP]-1659857457816
GPR[EPVS]-1659857457816
========
for(int i=0;i<in.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857457818
GPR[SPVAP]-1659857457818
GPR[EPVAP]-1659857458827
GPR[EPVS]-1659857458827
========
if((r+i)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857458829
GPR[SPVAP]-1659857458829
GPR[EPVAP]-1659857459857
GPR[EPVS]-1659857459857
========
k=i;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857459859
GPR[SPVAP]-1659857459859
GPR[EPVAP]-1659857460983
GPR[EPVS]-1659857460983
========
for(int i=0;i<dx2.length;i++){
if(dx2[i-1]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857460991
GPR[SPVAP]-1659857460991
GPR[EPVAP]-1659857464009
GPR[SPVATF]-1659857464009
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857465828
GPR[EPVS]-1659857465828
========
for(int i=0;i<x.length;i++){
if(dx2[i-1]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857465829
GPR[SPVAP]-1659857465829
GPR[EPVAP]-1659857466833
GPR[EPVS]-1659857466833
========
for(int i=0;i<special.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857466835
GPR[SPVAP]-1659857466835
GPR[EPVAP]-1659857467843
GPR[EPVS]-1659857467843
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857467844
GPR[SPVAP]-1659857467844
GPR[EPVAP]-1659857469719
GPR[SPVATF]-1659857469719
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857471511
GPR[EPVS]-1659857471511
========
for(int i=0;i<coordinates.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857471512
GPR[SPVAP]-1659857471512
GPR[EPVAP]-1659857472529
GPR[EPVS]-1659857472529
========
i++;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857472531
GPR[SPVAP]-1659857472531
GPR[EPVAP]-1659857473555
GPR[EPVS]-1659857473555
========
for(int i=0;i<coefficients.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857473556
GPR[SPVAP]-1659857473556
GPR[EPVAP]-1659857474582
GPR[EPVS]-1659857474582
========
for(int i=0;i<bd.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857474590
GPR[SPVAP]-1659857474590
GPR[EPVAP]-1659857475600
GPR[EPVS]-1659857475600
========
for(int i=0;i<results.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857475601
GPR[SPVAP]-1659857475601
GPR[EPVAP]-1659857476618
GPR[EPVS]-1659857476618
========
for(int i=0;i<result.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857476619
GPR[SPVAP]-1659857476619
GPR[EPVAP]-1659857477629
GPR[EPVS]-1659857477629
========
for(int i=0;i<realEigenvalues.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857477632
GPR[SPVAP]-1659857477632
GPR[EPVAP]-1659857478657
GPR[EPVS]-1659857478657
========
for(int i=0;i<singularValues.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857478659
GPR[SPVAP]-1659857478659
GPR[EPVAP]-1659857479683
GPR[EPVS]-1659857479683
========
for(int i=0;i<dx2.length;i++){
w[i]/=r;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857479683
GPR[SPVAP]-1659857479684
GPR[EPVAP]-1659857480701
GPR[EPVS]-1659857480701
========
for(int i=0;i<root.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857480702
GPR[SPVAP]-1659857480702
GPR[EPVAP]-1659857481721
GPR[EPVS]-1659857481721
========
for(int i=0;i<a.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857481723
GPR[SPVAP]-1659857481723
GPR[EPVAP]-1659857482743
GPR[EPVS]-1659857482743
========
for(int i=0;i<values.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857482747
GPR[SPVAP]-1659857482747
GPR[EPVAP]-1659857483753
GPR[EPVS]-1659857483753
========
for(int i=0;i<diagonal.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857483755
GPR[SPVAP]-1659857483755
GPR[EPVAP]-1659857484758
GPR[EPVS]-1659857484758
========
for(int i=0;i<p;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857484760
GPR[SPVAP]-1659857484760
GPR[EPVAP]-1659857485784
GPR[EPVS]-1659857485785
========
for(int i=0;i<parameters.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857485786
GPR[SPVAP]-1659857485786
GPR[EPVAP]-1659857486801
GPR[EPVS]-1659857486801
========
for(int i=0;i<simplex.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857486803
GPR[SPVAP]-1659857486803
GPR[EPVAP]-1659857487825
GPR[EPVS]-1659857487825
========
for(int i=0;i<c.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857487827
GPR[SPVAP]-1659857487827
GPR[EPVAP]-1659857488863
GPR[EPVS]-1659857488863
========
for(int i=0;i<r;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857488864
GPR[SPVAP]-1659857488864
GPR[EPVAP]-1659857490721
GPR[SPVATF]-1659857490721
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857492539
GPR[EPVS]-1659857492539
========
for(int i=0;i<xval.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857492542
GPR[SPVAP]-1659857492542
GPR[EPVAP]-1659857493566
GPR[EPVS]-1659857493566
========
for(int i=0;i<randomBytes.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857493568
GPR[SPVAP]-1659857493568
GPR[EPVAP]-1659857494584
GPR[EPVS]-1659857494584
========
for(int i=0;i<hash.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857494585
GPR[SPVAP]-1659857494585
GPR[EPVAP]-1659857495617
GPR[EPVS]-1659857495617
========
for(int i=0;i<xArray.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857495619
GPR[SPVAP]-1659857495619
GPR[EPVAP]-1659857496635
GPR[EPVS]-1659857496635
========
for(int i=0;i<random.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857496637
GPR[SPVAP]-1659857496637
GPR[EPVAP]-1659857497650
GPR[EPVS]-1659857497650
========
for(int i=0;i<v.length;i++){
if(dx2[i]>r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857497652
GPR[SPVAP]-1659857497652
GPR[EPVAP]-1659857498662
GPR[EPVS]-1659857498662
========
checkVectorDimensions(v.length);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857498663
GPR[SPVAP]-1659857498663
GPR[EPVAP]-1659857499693
GPR[EPVS]-1659857499693
========
checkVectorDimensions(v.length);
for(int i=0;i<v.length;i++){
if(dx2[i]>r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857499694
GPR[SPVAP]-1659857499694
GPR[EPVAP]-1659857500704
GPR[EPVS]-1659857500704
========
for(int i=0;i<pivot.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857500706
GPR[SPVAP]-1659857500706
GPR[EPVAP]-1659857501715
GPR[EPVS]-1659857501715
========
setSeed(19650218);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857501716
GPR[SPVAP]-1659857501716
GPR[EPVAP]-1659857502719
GPR[EPVS]-1659857502719
========
for(int i=0;i<dx2.length;i++){
bytes[bytesOut++]=(byte)nextInt();
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857502721
GPR[SPVAP]-1659857502721
GPR[EPVAP]-1659857503743
GPR[EPVS]-1659857503743
========
for(int i=0;i<dx2.length;i++){
if(r==bytes.length){
return ;
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857503744
GPR[SPVAP]-1659857503744
GPR[EPVAP]-1659857504785
GPR[EPVS]-1659857504785
========
for(int i=0;i<dx2.length;i++){
bytes[bytesOut++]=(byte)nextInt();
if(r==bytes.length){
return ;
}

if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857504786
GPR[SPVAP]-1659857504786
GPR[EPVAP]-1659857505792
GPR[EPVS]-1659857505792
========
for(int i=0;i<wm.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857505795
GPR[SPVAP]-1659857505795
GPR[EPVAP]-1659857506814
GPR[EPVS]-1659857506814
========
for(int i=0;i<rawData.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857506816
GPR[SPVAP]-1659857506816
GPR[EPVAP]-1659857507830
GPR[EPVS]-1659857507830
========
if(r==GoalType.MINIMIZE){
for(int i=0;i<point.length;++i){
dx2[i]=-r[i];
}
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857507833
GPR[SPVAP]-1659857507833
GPR[EPVAP]-1659857508860
GPR[EPVS]-1659857508860
========
for(int i=0;i<dimensionSize.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857508861
GPR[SPVAP]-1659857508861
GPR[EPVAP]-1659857509878
GPR[EPVS]-1659857509878
========
for(int i=0;i<dx2.length;i++){
vector[i]++;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857509879
GPR[SPVAP]-1659857509879
GPR[EPVAP]-1659857510899
GPR[EPVS]-1659857510899
========
for(int i=0;i<k;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857510901
GPR[SPVAP]-1659857510901
GPR[EPVAP]-1659857512754
GPR[SPVATF]-1659857512754
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857514534
GPR[EPVS]-1659857514534
========
for(int i=0;i<newPols.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857514536
GPR[SPVAP]-1659857514536
GPR[EPVAP]-1659857515543
GPR[EPVS]-1659857515543
========
for(int i=0;i<centroid.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857515545
GPR[SPVAP]-1659857515545
GPR[EPVAP]-1659857516551
GPR[EPVS]-1659857516551
========
for(int i=0;i<p.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857516552
GPR[SPVAP]-1659857516552
GPR[EPVAP]-1659857517558
GPR[EPVS]-1659857517558
========
if(coefficients.length==1){
return new double[]{0};
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857517560
GPR[SPVAP]-1659857517560
GPR[EPVAP]-1659857518558
GPR[EPVS]-1659857518558
========
for(int i=c.length;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857518560
GPR[SPVAP]-1659857518560
GPR[EPVAP]-1659857519567
GPR[EPVS]-1659857519567
========
for(int i=0;i<dx2.length;i++){
list[target]=list[i];
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857519569
GPR[SPVAP]-1659857519569
GPR[EPVAP]-1659857520597
GPR[EPVS]-1659857520597
========
for(int i=0;i<dx2.length;i++){
list[i]=k;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857520599
GPR[SPVAP]-1659857520599
GPR[EPVAP]-1659857521609
GPR[EPVS]-1659857521609
========
for(int i=0;i<dx2.length;i++){
list[target]=list[i];
list[i]=k;

if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857521610
GPR[SPVAP]-1659857521610
GPR[EPVAP]-1659857522621
GPR[EPVS]-1659857522621
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.get(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857522624
GPR[SPVAP]-1659857522624
GPR[EPVAP]-1659857524492
GPR[SPVATF]-1659857524492
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857526288
GPR[EPVS]-1659857526288
========
for(int i=0;i<r;i++){
if(dx2[i]>=r){
 final T p=pointSet.get(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857526289
GPR[SPVAP]-1659857526289
GPR[EPVAP]-1659857528181
GPR[SPVATF]-1659857528181
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857529998
GPR[EPVS]-1659857529998
========
for(int i=0;i<k+r;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857530000
GPR[SPVAP]-1659857530000
GPR[EPVAP]-1659857531842
GPR[SPVATF]-1659857531842
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857535269
GPR[EPVS]-1659857535269
========
for(int i=0;i<currentState.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857535271
GPR[SPVAP]-1659857535271
GPR[EPVAP]-1659857536292
GPR[EPVS]-1659857536292
========
if(i<0){
i=-i-2;
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857536294
GPR[SPVAP]-1659857536294
GPR[EPVAP]-1659857537306
GPR[EPVS]-1659857537306
========
if(i>=polynomials.length){
i--;
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857537308
GPR[SPVAP]-1659857537308
GPR[EPVAP]-1659857538369
GPR[EPVS]-1659857538369
========
for(int i=0;i<optima.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857538371
GPR[SPVAP]-1659857538371
GPR[EPVAP]-1659857539410
GPR[EPVS]-1659857539410
========
for(int i=0;i<steps.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857539411
GPR[SPVAP]-1659857539411
GPR[EPVAP]-1659857540430
GPR[EPVS]-1659857540430
========
for(int i=0;i<newCoefficients.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857540431
GPR[SPVAP]-1659857540431
GPR[EPVAP]-1659857541448
GPR[EPVS]-1659857541448
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
allEquals=false;
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857541450
GPR[SPVAP]-1659857541450
GPR[EPVAP]-1659857542461
GPR[EPVS]-1659857542461
========
for(int i=0;i<dx2.length;i++){
if(true){
throw MathRuntimeException.createIllegalArgumentException("equals vertices {0} and {1} in simplex configuration",k,i);
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857542462
GPR[SPVAP]-1659857542462
GPR[EPVAP]-1659857543502
GPR[EPVS]-1659857543502
========
for(int i=0;i<y0.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857543504
GPR[SPVAP]-1659857543504
GPR[EPVAP]-1659857544506
GPR[EPVS]-1659857544506
========
for(int i=0;i<Math.min(coefficients.length,p.coefficients.length);i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857544508
GPR[SPVAP]-1659857544508
GPR[EPVAP]-1659857545504
GPR[EPVS]-1659857545505
========
System.arraycopy((coefficients.length<p.coefficients.length)?p.coefficients:coefficients,Math.min(coefficients.length,p.coefficients.length),new double[p],lowLength,p-lowLength);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857545505
GPR[SPVAP]-1659857545506
GPR[EPVAP]-1659857546519
GPR[EPVS]-1659857546519
========
for(int i=0;i<dx2.length;i++){
if(Double.isNaN(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("NaN weight at index {0}",i);
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857546520
GPR[SPVAP]-1659857546520
GPR[EPVAP]-1659857547533
GPR[EPVS]-1659857547533
========
for(int i=0;i<dx2.length;i++){
if(Double.isInfinite(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("Infinite weight at index {0}",i);
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857547534
GPR[SPVAP]-1659857547534
GPR[EPVAP]-1659857548563
GPR[EPVS]-1659857548563
========
for(int i=0;i<dx2.length;i++){
if(weights[i]>0.0){
containsPositiveWeight=true;
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857548564
GPR[SPVAP]-1659857548564
GPR[EPVAP]-1659857549593
GPR[EPVS]-1659857549593
========
for(int i=0;i<dx2.length;i++){
if(Double.isNaN(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("NaN weight at index {0}",i);
}
if(Double.isInfinite(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("Infinite weight at index {0}",i);
}
if(weights[i]>0.0){
containsPositiveWeight=true;
}

if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857549594
GPR[SPVAP]-1659857549594
GPR[EPVAP]-1659857550618
GPR[EPVS]-1659857550618
========
for(int i=0;i<main.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857550620
GPR[SPVAP]-1659857550620
GPR[EPVAP]-1659857551639
GPR[EPVS]-1659857551639
========
for(int i=0;i<length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857551640
GPR[SPVAP]-1659857551640
GPR[EPVAP]-1659857552662
GPR[EPVS]-1659857552662
========
for(int i=0;i<k;i++){
if(dx2[i]>r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857552663
GPR[SPVAP]-1659857552663
GPR[EPVAP]-1659857554510
GPR[SPVATF]-1659857554510
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857556312
GPR[EPVS]-1659857556312
========
k++;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857556314
GPR[SPVAP]-1659857556314
GPR[EPVAP]-1659857557332
GPR[EPVS]-1659857557332
========
for(int i=0;i<observed1.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857557336
GPR[SPVAP]-1659857557336
GPR[EPVAP]-1659857558351
GPR[EPVS]-1659857558351
========
for(int i=0;i<=dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857558353
GPR[SPVAP]-1659857558353
GPR[EPVAP]-1659857560207
GPR[SPVATF]-1659857560207
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857562003
GPR[EPVS]-1659857562003
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.abs(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857562005
GPR[SPVAP]-1659857562005
GPR[EPVAP]-1659857563039
GPR[EPVS]-1659857563039
========
for(int i=0;i<=k;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857563040
GPR[SPVAP]-1659857563040
GPR[EPVAP]-1659857564945
GPR[SPVATF]-1659857564945
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857566732
GPR[EPVS]-1659857566732
========
for(int i=0;i<observations.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857566734
GPR[SPVAP]-1659857566734
GPR[EPVAP]-1659857567754
GPR[EPVS]-1659857567754
========
for(int i=0;i<dx2.length;i++){
curr=observations[j];
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857567755
GPR[SPVAP]-1659857567755
GPR[EPVAP]-1659857568782
GPR[EPVS]-1659857568782
========
for(int i=0;i<observed.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857568783
GPR[SPVAP]-1659857568783
GPR[EPVAP]-1659857569790
GPR[EPVS]-1659857569790
========
checkRowIndex(k);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857569792
GPR[SPVAP]-1659857569792
GPR[EPVAP]-1659857570846
GPR[EPVS]-1659857570846
========
checkColumnIndex(k);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857570847
GPR[SPVAP]-1659857570847
GPR[EPVAP]-1659857571867
GPR[EPVS]-1659857571867
========
for(int i=0;i<sums.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857571868
GPR[SPVAP]-1659857571868
GPR[EPVAP]-1659857572886
GPR[EPVS]-1659857572886
========
for(int i=0;i<after.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857572888
GPR[SPVAP]-1659857572888
GPR[EPVAP]-1659857573907
GPR[EPVS]-1659857573907
========
if(!isNonSingular()){
throw new SingularMatrixException();
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857573910
GPR[SPVAP]-1659857573910
GPR[EPVAP]-1659857574925
GPR[EPVS]-1659857574925
========
System.arraycopy(dx2,0,p,0,coefficients.length);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857574926
GPR[SPVAP]-1659857574926
GPR[EPVAP]-1659857575936
GPR[EPVS]-1659857575936
========
for(int i=0;i<eigenvectors.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857575939
GPR[SPVAP]-1659857575939
GPR[EPVAP]-1659857576955
GPR[EPVS]-1659857576955
========
resetEvaluations();
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857576956
GPR[SPVAP]-1659857576956
GPR[EPVAP]-1659857577987
GPR[EPVS]-1659857577987
========
verifyDataSet(dx2);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857577989
GPR[SPVAP]-1659857577989
GPR[EPVAP]-1659857579010
GPR[EPVS]-1659857579010
========
System.arraycopy(dx2,0,dx2,0,y0.length);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857579013
GPR[SPVAP]-1659857579013
GPR[EPVAP]-1659857580027
GPR[EPVS]-1659857580027
========
resetTables(k);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857580029
GPR[SPVAP]-1659857580029
GPR[EPVAP]-1659857581047
GPR[EPVS]-1659857581047
========
k=k;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857581048
GPR[SPVAP]-1659857581049
GPR[EPVAP]-1659857582071
GPR[EPVS]-1659857582071
========
setInterpolatedTime(p);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857582072
GPR[SPVAP]-1659857582072
GPR[EPVAP]-1659857583086
GPR[EPVS]-1659857583087
========
System.arraycopy(dx2,0,p,0,internalArray.length);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857583088
GPR[SPVAP]-1659857583088
GPR[EPVAP]-1659857584111
GPR[EPVS]-1659857584111
========
dx2=p;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857584112
GPR[SPVAP]-1659857584112
GPR[EPVAP]-1659857585173
GPR[EPVS]-1659857585173
========
for(int i=0;i<interpolator.yDotK.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857585175
GPR[SPVAP]-1659857585175
GPR[EPVAP]-1659857586179
GPR[EPVS]-1659857586179
========
for(int i=0;i<(r==null)?-1:currentState.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857586181
GPR[SPVAP]-1659857586181
GPR[EPVAP]-1659857587213
GPR[EPVS]-1659857587213
========
if(r>0){
throw MathRuntimeException.createIllegalStateException("first {0} columns are not initialized yet",column);
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857587214
GPR[SPVAP]-1659857587214
GPR[EPVAP]-1659857588235
GPR[EPVS]-1659857588235
========
p=new BigDecimal[k][k];
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857588235
GPR[SPVAP]-1659857588235
GPR[EPVAP]-1659857589245
GPR[EPVS]-1659857589245
========
for(int i=0;i<yMidDots.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857589247
GPR[SPVAP]-1659857589247
GPR[EPVAP]-1659857590269
GPR[EPVS]-1659857590269
========
rescale(dx2,y,p);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857590271
GPR[SPVAP]-1659857590271
GPR[EPVAP]-1659857591290
GPR[EPVS]-1659857591290
========
super();
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857591291
GPR[SPVAP]-1659857591291
GPR[EPVAP]-1659857592313
GPR[EPVS]-1659857592313
========
this.p=new double[i];
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857592314
GPR[SPVAP]-1659857592314
GPR[EPVAP]-1659857593321
GPR[EPVS]-1659857593321
========
System.arraycopy(dx2,0,this.p,0,i);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857593322
GPR[SPVAP]-1659857593322
GPR[EPVAP]-1659857594345
GPR[EPVS]-1659857594345
========
incrementAll(dx2,0,values.length);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857594346
GPR[SPVAP]-1659857594346
GPR[EPVAP]-1659857595369
GPR[EPVS]-1659857595369
========
MatrixUtils.checkSubMatrixIndex(this,k,i,r,p);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857595371
GPR[SPVAP]-1659857595371
GPR[EPVAP]-1659857596390
GPR[EPVS]-1659857596390
========
checkSubMatrixIndex(k,i,r,p);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857596392
GPR[SPVAP]-1659857596392
GPR[EPVAP]-1659857597403
GPR[EPVS]-1659857597403
========
FastFourierTransformer.verifyDataSet(dx2);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857597405
GPR[SPVAP]-1659857597405
GPR[EPVAP]-1659857598414
GPR[EPVS]-1659857598414
========
if(r==1){
new double[f.length][0]=0.0;
return transformed;
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857598415
GPR[SPVAP]-1659857598415
GPR[EPVAP]-1659857599449
GPR[EPVS]-1659857599449
========
Collections.sort(this.getChromosomes());
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857604065
GPR[SPVAP]-1659857604066
GPR[EPVAP]-1659857605242
GPR[EPVS]-1659857605242
========
if(d<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857605250
GPR[SPVAP]-1659857605250
GPR[EPVAP]-1659857607467
GPR[EPVS]-1659857607467
========
checkVectorDimensions(v.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857607469
GPR[SPVAP]-1659857607469
GPR[EPVAP]-1659857608479
GPR[EPVS]-1659857608479
========
new ArrayList<Integer>().add(secondary.length+1);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857608482
GPR[SPVAP]-1659857608482
GPR[EPVAP]-1659857609519
GPR[EPVS]-1659857609519
========
incrementJacobianEvaluationsCounter();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857609523
GPR[SPVAP]-1659857609523
GPR[EPVAP]-1659857610557
GPR[EPVS]-1659857610557
========
dx2=new double[k];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857610561
GPR[SPVAP]-1659857610561
GPR[EPVAP]-1659857611583
GPR[EPVS]-1659857611583
========
dx2[k-1]=1.0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857611584
GPR[SPVAP]-1659857611584
GPR[EPVAP]-1659857613432
GPR[SPVATF]-1659857613432
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857615210
GPR[EPVS]-1659857615210
========
if((d+i)>internalArray.length){
expandTo(startIndex+i);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857615211
GPR[SPVAP]-1659857615211
GPR[EPVAP]-1659857616242
GPR[EPVS]-1659857616242
========
r=i;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857616243
GPR[SPVAP]-1659857616243
GPR[EPVAP]-1659857617260
GPR[EPVS]-1659857617260
========
assignPointsToClusters(chooseInitialCenters(points,k,random),points);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857617265
GPR[SPVAP]-1659857617265
GPR[EPVAP]-1659857619119
GPR[SPVATF]-1659857619119
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857620924
GPR[EPVS]-1659857620924
========
G2=G.multiply(G);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857620928
GPR[SPVAP]-1659857620928
GPR[EPVAP]-1659857621967
GPR[EPVS]-1659857621967
========
nearest=N1.multiply((N.multiply(H)).subtract(G2));
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857621968
GPR[SPVAP]-1659857621968
GPR[EPVAP]-1659857622993
GPR[EPVS]-1659857622993
========
k++;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857622994
GPR[SPVAP]-1659857622994
GPR[EPVAP]-1659857624030
GPR[EPVS]-1659857624030
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857624033
GPR[SPVAP]-1659857624033
GPR[EPVAP]-1659857625038
GPR[EPVS]-1659857625039
========
this.sum=brightnessExponent;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857625039
GPR[SPVAP]-1659857625039
GPR[EPVAP]-1659857626050
GPR[EPVS]-1659857626050
========
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857626051
GPR[SPVAP]-1659857626051
GPR[EPVAP]-1659857627076
GPR[EPVS]-1659857627076
========
default :

while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857627079
GPR[SPVAP]-1659857627079
GPR[EPVAP]-1659857628012
GPR[EPVS]-1659857628012
========
while(resultSet.size()<length){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857628015
GPR[SPVAP]-1659857628015
GPR[EPVAP]-1659857629027
GPR[EPVS]-1659857629027
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
bytes[bytesOut++]=(byte)sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857629028
GPR[SPVAP]-1659857629028
GPR[EPVAP]-1659857630055
GPR[EPVS]-1659857630055
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(k==bytes.length){
return ;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857630056
GPR[SPVAP]-1659857630056
GPR[EPVAP]-1659857631072
GPR[EPVS]-1659857631072
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
bytes[bytesOut++]=(byte)sum;
if(k==bytes.length){
return ;
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857631073
GPR[SPVAP]-1659857631073
GPR[EPVAP]-1659857632091
GPR[EPVS]-1659857632091
========
dx2=new double[d];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857632092
GPR[SPVAP]-1659857632092
GPR[EPVAP]-1659857633121
GPR[EPVS]-1659857633121
========
if(k==0){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) must be positive",k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857633126
GPR[SPVAP]-1659857633126
GPR[EPVAP]-1659857634132
GPR[EPVS]-1659857634132
========
shuffle(getNatural(d),d-k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857634133
GPR[SPVAP]-1659857634133
GPR[EPVAP]-1659857635154
GPR[EPVS]-1659857635154
========
if(d==1){
return new double[]{0};
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857635159
GPR[SPVAP]-1659857635159
GPR[EPVAP]-1659857636179
GPR[EPVS]-1659857636179
========
if(i<0){
i=-i-2;
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857636181
GPR[SPVAP]-1659857636181
GPR[EPVAP]-1659857637241
GPR[EPVS]-1659857637241
========
if(i>=polynomials.length){
i--;
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857637242
GPR[SPVAP]-1659857637242
GPR[EPVAP]-1659857638273
GPR[EPVS]-1659857638273
========
while(resultSet.size()<k){
iterateSimplex(p);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857638276
GPR[SPVAP]-1659857638276
GPR[EPVAP]-1659857639306
GPR[EPVS]-1659857639306
========
r=0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857639307
GPR[SPVAP]-1659857639307
GPR[EPVAP]-1659857640319
GPR[EPVS]-1659857640319
========
d=0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857640320
GPR[SPVAP]-1659857640320
GPR[EPVAP]-1659857641344
GPR[EPVS]-1659857641344
========
evaluateSimplex(p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857641345
GPR[SPVAP]-1659857641345
GPR[EPVAP]-1659857642346
GPR[EPVS]-1659857642346
========
System.arraycopy(new IntDoublePair[ranks.length],0,new IntDoublePair[k],0,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857642347
GPR[SPVAP]-1659857642347
GPR[EPVAP]-1659857643363
GPR[EPVS]-1659857643363
========
System.arraycopy((coefficients.length<p.coefficients.length)?p.coefficients:coefficients,d,new double[r],lowLength,r-lowLength);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857643365
GPR[SPVAP]-1659857643365
GPR[EPVAP]-1659857644391
GPR[EPVS]-1659857644391
========
if(b.length!=d){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",b.length,m);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857644395
GPR[SPVAP]-1659857644395
GPR[EPVAP]-1659857645410
GPR[EPVS]-1659857645410
========
while(resultSet.size()<maximalIterationCount){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857645412
GPR[SPVAP]-1659857645412
GPR[EPVAP]-1659857646429
GPR[EPVS]-1659857646429
========
while(resultSet.size()<k){
++r;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857646430
GPR[SPVAP]-1659857646430
GPR[EPVAP]-1659857647458
GPR[EPVS]-1659857647458
========
dx2=null;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857647460
GPR[SPVAP]-1659857647460
GPR[EPVAP]-1659857648471
GPR[EPVS]-1659857648471
========
if(vector.length!=dimensionSize.length){
throw MathRuntimeException.createIllegalArgumentException("some dimensions don\'t match: {0} != {1}",vector.length,dimensionSize.length);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857648472
GPR[SPVAP]-1659857648472
GPR[EPVAP]-1659857649494
GPR[EPVS]-1659857649494
========
if(length==GoalType.MINIMIZE){
for(int i=0;i<d;++i){
dx2[i]=-r[i];
}
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857649498
GPR[SPVAP]-1659857649498
GPR[EPVAP]-1659857650517
GPR[EPVS]-1659857650517
========
while(resultSet.size()<k){
double sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857650519
GPR[SPVAP]-1659857650519
GPR[EPVAP]-1659857652382
GPR[SPVATF]-1659857652382
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857654176
GPR[EPVS]-1659857654176
========
updateJacobian();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857654178
GPR[SPVAP]-1659857654178
GPR[EPVAP]-1659857655195
GPR[EPVS]-1659857655195
========
try{
RealMatrix nearest=new LUDecompositionImpl(MatrixUtils.createRealMatrix(new double[k][m])).getSolver().getInverse();
return inverse.getData();
}catch (InvalidMatrixException ime) {
  throw new EstimationException("unable to compute covariances: singular problem");
}

while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857655195
GPR[SPVAP]-1659857655195
GPR[EPVAP]-1659857656213
GPR[EPVS]-1659857656213
========
resetEvaluations();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857656215
GPR[SPVAP]-1659857656215
GPR[EPVAP]-1659857657218
GPR[EPVS]-1659857657218
========
while(resultSet.size()<k){
random=d*Math.cos(p);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857657221
GPR[SPVAP]-1659857657221
GPR[EPVAP]-1659857658246
GPR[EPVS]-1659857658246
========
while(resultSet.size()<k){
nextGaussian=d*Math.sin(p);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857658248
GPR[SPVAP]-1659857658248
GPR[EPVAP]-1659857659269
GPR[EPVS]-1659857659269
========
while(resultSet.size()<k){
random=d*Math.cos(p);
nextGaussian=d*Math.sin(p);

int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857659271
GPR[SPVAP]-1659857659271
GPR[EPVAP]-1659857660288
GPR[EPVS]-1659857660288
========
if(coefficients.length<p.coefficients.length){
for(int i=sum;i<d;++i){
new double[d][i]=-p.coefficients[i];
}
}else {
System.arraycopy(coefficients,lowLength,newCoefficients,lowLength,highLength-lowLength);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857660289
GPR[SPVAP]-1659857660289
GPR[EPVAP]-1659857661309
GPR[EPVS]-1659857661309
========
if(r==0){
throw MathRuntimeException.createArithmeticException("Array sums to zero");
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857661311
GPR[SPVAP]-1659857661311
GPR[EPVAP]-1659857662337
GPR[EPVS]-1659857662337
========
checkBinomial(k,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857662339
GPR[SPVAP]-1659857662339
GPR[EPVAP]-1659857663350
GPR[EPVS]-1659857663350
========
if((k==1)||(k==k-1)){
return n;
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857663352
GPR[SPVAP]-1659857663352
GPR[EPVAP]-1659857664372
GPR[EPVS]-1659857664372
========
if(k>k/2){
return binomialCoefficientDouble(n,n-k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857664373
GPR[SPVAP]-1659857664373
GPR[EPVAP]-1659857665389
GPR[EPVS]-1659857665389
========
if(k<67){
return binomialCoefficient(n,k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857665390
GPR[SPVAP]-1659857665390
GPR[EPVAP]-1659857666413
GPR[EPVS]-1659857666413
========
if((k==1)||(k==k-1)){
return Math.log(n);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857666415
GPR[SPVAP]-1659857666415
GPR[EPVAP]-1659857667435
GPR[EPVS]-1659857667435
========
if(k<67){
return Math.log(binomialCoefficient(n,k));
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857667436
GPR[SPVAP]-1659857667436
GPR[EPVAP]-1659857668446
GPR[EPVS]-1659857668446
========
if(k<1030){
return Math.log(binomialCoefficientDouble(n,k));
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857668447
GPR[SPVAP]-1659857668447
GPR[EPVAP]-1659857669486
GPR[EPVS]-1659857669486
========
if(k>k/2){
return binomialCoefficientLog(n,n-k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857669487
GPR[SPVAP]-1659857669487
GPR[EPVAP]-1659857670516
GPR[EPVS]-1659857670516
========
checkColumnIndex(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857670519
GPR[SPVAP]-1659857670519
GPR[EPVAP]-1659857671534
GPR[EPVS]-1659857671534
========
MatrixUtils.checkColumnIndex(this,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857671536
GPR[SPVAP]-1659857671536
GPR[EPVAP]-1659857672557
GPR[EPVS]-1659857672557
========
MatrixUtils.checkRowIndex(this,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857672561
GPR[SPVAP]-1659857672561
GPR[EPVAP]-1659857673627
GPR[EPVS]-1659857673627
========
MatrixUtils.checkRowIndex(this,k);
MatrixUtils.checkColumnIndex(this,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857673628
GPR[SPVAP]-1659857673628
GPR[EPVAP]-1659857674636
GPR[EPVS]-1659857674636
========
checkRowIndex(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857674639
GPR[SPVAP]-1659857674639
GPR[EPVAP]-1659857675682
GPR[EPVS]-1659857675682
========
new double[d][sum]=1;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857675685
GPR[SPVAP]-1659857675685
GPR[EPVAP]-1659857676697
GPR[EPVS]-1659857676697
========
while(resultSet.size()<k){
int sum=0;
r=d*sum;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857676701
GPR[SPVAP]-1659857676701
GPR[EPVAP]-1659857678755
GPR[EPVS]-1659857678755
========
p.set(r,GeneticAlgorithm.getRandomGenerator().nextDouble());
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857678762
GPR[SPVAP]-1659857678762
GPR[EPVAP]-1659857679974
GPR[EPVS]-1659857679974
========
if(f.length==1){
new double[f.length][0]=0.0;
return transformed;
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857679976
GPR[SPVAP]-1659857679976
GPR[EPVAP]-1659857681017
GPR[EPVS]-1659857681017
========
dx2[0]=0.0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857681018
GPR[SPVAP]-1659857681018
GPR[EPVAP]-1659857682892
GPR[SPVATF]-1659857682893
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857684699
GPR[EPVS]-1659857684699
========
while(resultSet.size()<k){
optima[i+1]=dx2[i];
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857684703
GPR[SPVAP]-1659857684703
GPR[EPVAP]-1659857685723
GPR[EPVS]-1659857685723
========
while(resultSet.size()<k){
optimaValues[i+1]=r;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857685725
GPR[SPVAP]-1659857685725
GPR[EPVAP]-1659857686757
GPR[EPVS]-1659857686757
========
while(resultSet.size()<k){
optima[i+1]=dx2[i];
optimaValues[i+1]=r;

int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857686758
GPR[SPVAP]-1659857686758
GPR[EPVAP]-1659857687785
GPR[EPVS]-1659857687785
========
checkRowIndex(k);
checkColumnIndex(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857687790
GPR[SPVAP]-1659857687790
GPR[EPVAP]-1659857688800
GPR[EPVS]-1659857688800
========
while(resultSet.size()<k){
polynoms[j+4][i]=16*(yMidDots[j][i]+d*polynoms[j+2][i]-r*polynoms[j][i]);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857688802
GPR[SPVAP]-1659857688802
GPR[EPVAP]-1659857689820
GPR[EPVS]-1659857689820
========
resetTables(sum);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857689826
GPR[SPVAP]-1659857689826
GPR[EPVAP]-1659857690846
GPR[EPVS]-1659857690846
========
r=sum;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857690847
GPR[SPVAP]-1659857690847
GPR[EPVAP]-1659857691868
GPR[EPVS]-1659857691868
========
if(nearest.divide(BigInteger.valueOf(d)).bitLength()>31){
throw MathRuntimeException.createArithmeticException("overflow, numerator too large after multiply: {0}",w);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857691869
GPR[SPVAP]-1659857691869
GPR[EPVAP]-1659857692891
GPR[EPVS]-1659857692891
========
checkVectorDimensions(v.length);
while(resultSet.size()<k){
double sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857692898
GPR[SPVAP]-1659857692898
GPR[EPVAP]-1659857693914
GPR[EPVS]-1659857693914
========
System.arraycopy(dx2,0,new double[sum],0,internalArray.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857693916
GPR[SPVAP]-1659857693916
GPR[EPVAP]-1659857694934
GPR[EPVS]-1659857694934
========
dx2=new double[sum];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857694935
GPR[SPVAP]-1659857694935
GPR[EPVAP]-1659857695960
GPR[EPVS]-1659857695960
========
System.arraycopy(dx2,0,new double[coefficients.length],0,coefficients.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857695962
GPR[SPVAP]-1659857695962
GPR[EPVAP]-1659857696979
GPR[EPVS]-1659857696979
========
r=values.length;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857696980
GPR[SPVAP]-1659857696980
GPR[EPVAP]-1659857698015
GPR[EPVS]-1659857698015
========
nearest=new OpenIntToDoubleHashMap(0.0);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857698016
GPR[SPVAP]-1659857698016
GPR[EPVAP]-1659857699079
GPR[EPVS]-1659857699079
========
new NordsieckStepInterpolator().reinitialize(dx2,p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857699082
GPR[SPVAP]-1659857699082
GPR[EPVAP]-1659857700098
GPR[EPVS]-1659857700098
========
nearest.reinitialize(new double[y0.length],p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857700099
GPR[SPVAP]-1659857700099
GPR[EPVAP]-1659857701129
GPR[EPVS]-1659857701129
========
resetEvaluations();
new NordsieckStepInterpolator().reinitialize(dx2,p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857701131
GPR[SPVAP]-1659857701131
GPR[EPVAP]-1659857702155
GPR[EPVS]-1659857702155
========
resetEvaluations();
nearest.reinitialize(new double[y0.length],p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857702155
GPR[SPVAP]-1659857702155
GPR[EPVAP]-1659857703183
GPR[EPVS]-1659857703183
========
new NordsieckStepInterpolator().reinitialize(dx2,p);
nearest.reinitialize(new double[y0.length],p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857703184
GPR[SPVAP]-1659857703184
GPR[EPVAP]-1659857704196
GPR[EPVS]-1659857704196
========
resetEvaluations();
new NordsieckStepInterpolator().reinitialize(dx2,p);
nearest.reinitialize(new double[y0.length],p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857704197
GPR[SPVAP]-1659857704197
GPR[EPVAP]-1659857705210
GPR[EPVS]-1659857705210
========
while(resultSet.size()<x1){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857705212
GPR[SPVAP]-1659857705212
GPR[EPVAP]-1659857706247
GPR[EPVS]-1659857706247
========
while(resultSet.size()<k){
ret=Math.exp(r+d-SaddlePointExpansion.logBinomialProbability(k,i,p,(double)(i-k)/(double)m));
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857706249
GPR[SPVAP]-1659857706249
GPR[EPVAP]-1659857707278
GPR[EPVS]-1659857707278
========
if(!isNonSingular()){
throw new SingularMatrixException();
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857707284
GPR[SPVAP]-1659857707284
GPR[EPVAP]-1659857708309
GPR[EPVS]-1659857708309
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
this.sum=brightnessExponent;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857708316
GPR[SPVAP]-1659857708316
GPR[EPVAP]-1659857709338
GPR[EPVS]-1659857709338
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857709339
GPR[SPVAP]-1659857709339
GPR[EPVAP]-1659857710372
GPR[EPVS]-1659857710372
========
this.sum=brightnessExponent;
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857710373
GPR[SPVAP]-1659857710373
GPR[EPVAP]-1659857711387
GPR[EPVS]-1659857711387
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
this.sum=brightnessExponent;
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857711389
GPR[SPVAP]-1659857711389
GPR[EPVAP]-1659857712403
GPR[EPVS]-1659857712403
========
if(k==0){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) must be positive",k);
}
shuffle(getNatural(d),d-k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857712406
GPR[SPVAP]-1659857712406
GPR[EPVAP]-1659857713426
GPR[EPVS]-1659857713426
========
super();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857713428
GPR[SPVAP]-1659857713428
GPR[EPVAP]-1659857714447
GPR[EPVS]-1659857714447
========
if(knots.length-1!=polynomials.length){
throw MathRuntimeException.createIllegalArgumentException("number of polynomial interpolants must match the number of segments ({0} != {1} - 1)",polynomials.length,knots.length);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857714449
GPR[SPVAP]-1659857714449
GPR[EPVAP]-1659857715474
GPR[EPVS]-1659857715474
========
if(!isStrictlyIncreasing(dx2)){
throw MathRuntimeException.createIllegalArgumentException("knot values must be strictly increasing");
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857715475
GPR[SPVAP]-1659857715475
GPR[EPVAP]-1659857716484
GPR[EPVS]-1659857716484
========
this.d=knots.length-1;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857716485
GPR[SPVAP]-1659857716485
GPR[EPVAP]-1659857717507
GPR[EPVS]-1659857717507
========
this.dx2=new double[d+1];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857717508
GPR[SPVAP]-1659857717508
GPR[EPVAP]-1659857718545
GPR[EPVS]-1659857718545
========
System.arraycopy(dx2,0,this.knots,0,d+1);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857718546
GPR[SPVAP]-1659857718546
GPR[EPVAP]-1659857719562
GPR[EPVS]-1659857719562
========
this.p=new PolynomialFunction[d];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857719563
GPR[SPVAP]-1659857719563
GPR[EPVAP]-1659857720622
GPR[EPVS]-1659857720622
========
System.arraycopy(p,0,this.polynomials,0,d);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857720623
GPR[SPVAP]-1659857720623
GPR[EPVAP]-1659857721642
GPR[EPVS]-1659857721642
========
new StringBuffer().append('(');
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857721646
GPR[SPVAP]-1659857721646
GPR[EPVAP]-1659857723490
GPR[SPVATF]-1659857723490
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857725305
GPR[EPVS]-1659857725305
========
new StringBuffer().append(')');
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857725306
GPR[SPVAP]-1659857725306
GPR[EPVAP]-1659857727169
GPR[SPVATF]-1659857727169
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857728945
GPR[EPVS]-1659857728945
========
new StringBuffer().append('(');
new StringBuffer().append(')');
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857728947
GPR[SPVAP]-1659857728947
GPR[EPVAP]-1659857730802
GPR[SPVATF]-1659857730802
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857732595
GPR[EPVS]-1659857732595
========
if((i<0)||(k>=d)){
throw MathRuntimeException.createIllegalArgumentException("out of range root of unity index {0} (must be in [{1};{2}])",k,0,omegaCount-1);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857732606
GPR[SPVAP]-1659857732606
GPR[EPVAP]-1659857733618
GPR[EPVS]-1659857733618
========
incrementAll(dx2,0,values.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857733619
GPR[SPVAP]-1659857733619
GPR[EPVAP]-1659857734638
GPR[EPVS]-1659857734638
========
r=k;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857734641
GPR[SPVAP]-1659857734641
GPR[EPVAP]-1659857735650
GPR[EPVS]-1659857735650
========
while(resultSet.size()<k){
int sum=BLOCK_SIZE;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857735652
GPR[SPVAP]-1659857735652
GPR[EPVAP]-1659857736668
GPR[EPVS]-1659857736668
========
if((k<0)||(k>=d)){
throw MathRuntimeException.createIllegalArgumentException("out of range root of unity index {0} (must be in [{1};{2}])",k,0,omegaCount-1);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659857736670
GPR[SPVAP]-1659857736670
GPR[EPVAP]-1659857737703
GPR[EPVS]-1659857737703
GPR[ESUN]-1659857737707
GPR[SSUN]-1659857737707
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,139
========
Collections.sort(this.getChromosomes());
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857743376
GPR[SPVAP]-1659857743376
GPR[EPVAP]-1659857745770
GPR[EPVS]-1659857745770
========
if(d<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857745773
GPR[SPVAP]-1659857745773
GPR[EPVAP]-1659857747089
GPR[EPVS]-1659857747089
========
checkVectorDimensions(v.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857747090
GPR[SPVAP]-1659857747090
GPR[EPVAP]-1659857748377
GPR[EPVS]-1659857748377
========
new ArrayList<Integer>().add(secondary.length+1);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857748380
GPR[SPVAP]-1659857748380
GPR[EPVAP]-1659857749655
GPR[EPVS]-1659857749655
========
incrementJacobianEvaluationsCounter();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857749659
GPR[SPVAP]-1659857749659
GPR[EPVAP]-1659857750920
GPR[EPVS]-1659857750920
========
dx2=new double[k];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857750922
GPR[SPVAP]-1659857750922
GPR[EPVAP]-1659857753619
GPR[EPVS]-1659857753619
========
dx2[k-1]=1.0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857753626
GPR[SPVAP]-1659857753626
GPR[EPVAP]-1659857757624
GPR[SPVATF]-1659857757624
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857759397
GPR[EPVS]-1659857759397
========
if((d+i)>internalArray.length){
expandTo(startIndex+i);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857759403
GPR[SPVAP]-1659857759403
GPR[EPVAP]-1659857760446
GPR[EPVS]-1659857760446
========
r=i;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857760447
GPR[SPVAP]-1659857760447
GPR[EPVAP]-1659857761493
GPR[EPVS]-1659857761493
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return chooseInitialCenters(points,k,random);

========
MM Copying to MM
GPR[SPVS]-1659857761496
GPR[SPVAP]-1659857761496
GPR[EPVAP]-1659857763377
GPR[SPVATF]-1659857763377
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857765181
GPR[EPVS]-1659857765181
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1659857765183
GPR[SPVAP]-1659857765183
GPR[EPVAP]-1659857766207
GPR[EPVS]-1659857766207
========
assignPointsToClusters(chooseInitialCenters(points,k,random),points);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857766208
GPR[SPVAP]-1659857766208
GPR[EPVAP]-1659857768082
GPR[SPVATF]-1659857768082
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857769904
GPR[EPVS]-1659857769904
========
assignPointsToClusters(chooseInitialCenters(points,k,random),points);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return chooseInitialCenters(points,k,random);

========
MM Copying to MM
GPR[SPVS]-1659857769905
GPR[SPVAP]-1659857769905
GPR[EPVAP]-1659857771764
GPR[SPVATF]-1659857771764
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857773574
GPR[EPVS]-1659857773574
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857773581
GPR[SPVAP]-1659857773581
GPR[EPVAP]-1659857774599
GPR[EPVS]-1659857774599
========
this.sum=brightnessExponent;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857774600
GPR[SPVAP]-1659857774600
GPR[EPVAP]-1659857775609
GPR[EPVS]-1659857775609
========
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857775610
GPR[SPVAP]-1659857775610
GPR[EPVAP]-1659857776615
GPR[EPVS]-1659857776615
========
default :

while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857776617
GPR[SPVAP]-1659857776617
GPR[EPVAP]-1659857777541
GPR[EPVS]-1659857777541
========
G2=G.multiply(G);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857777543
GPR[SPVAP]-1659857777543
GPR[EPVAP]-1659857778550
GPR[EPVS]-1659857778550
========
nearest=N1.multiply((N.multiply(H)).subtract(G2));
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857778551
GPR[SPVAP]-1659857778551
GPR[EPVAP]-1659857779578
GPR[EPVS]-1659857779578
========
p=G.add(nearest.sqrt()).abs()>G.subtract(nearest.sqrt()).abs()?dplus:dminus;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857779579
GPR[SPVAP]-1659857779579
GPR[EPVAP]-1659857780599
GPR[EPVS]-1659857780599
========
k++;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857780600
GPR[SPVAP]-1659857780600
GPR[EPVAP]-1659857781612
GPR[EPVS]-1659857781612
========
dx2=new double[d];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857781615
GPR[SPVAP]-1659857781615
GPR[EPVAP]-1659857782624
GPR[EPVS]-1659857782624
========
while(resultSet.size()<length){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857782625
GPR[SPVAP]-1659857782625
GPR[EPVAP]-1659857783627
GPR[EPVS]-1659857783627
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
bytes[bytesOut++]=(byte)sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857783628
GPR[SPVAP]-1659857783628
GPR[EPVAP]-1659857784663
GPR[EPVS]-1659857784663
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(k==bytes.length){
return ;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857784664
GPR[SPVAP]-1659857784664
GPR[EPVAP]-1659857785686
GPR[EPVS]-1659857785686
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
bytes[bytesOut++]=(byte)sum;
if(k==bytes.length){
return ;
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857785687
GPR[SPVAP]-1659857785687
GPR[EPVAP]-1659857786806
GPR[EPVS]-1659857786806
========
if(k==0){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) must be positive",k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857786810
GPR[SPVAP]-1659857786810
GPR[EPVAP]-1659857787825
GPR[EPVS]-1659857787825
========
shuffle(getNatural(d),d-k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857787826
GPR[SPVAP]-1659857787826
GPR[EPVAP]-1659857788892
GPR[EPVS]-1659857788892
========
if(d==1){
return new double[]{0};
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857788897
GPR[SPVAP]-1659857788897
GPR[EPVAP]-1659857789917
GPR[EPVS]-1659857789917
========
if(i<0){
i=-i-2;
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857789920
GPR[SPVAP]-1659857789920
GPR[EPVAP]-1659857790926
GPR[EPVS]-1659857790926
========
if(i>=polynomials.length){
i--;
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857790927
GPR[SPVAP]-1659857790927
GPR[EPVAP]-1659857791965
GPR[EPVS]-1659857791965
========
while(resultSet.size()<k){
iterateSimplex(p);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857791968
GPR[SPVAP]-1659857791968
GPR[EPVAP]-1659857792978
GPR[EPVS]-1659857792978
========
r=0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857792979
GPR[SPVAP]-1659857792979
GPR[EPVAP]-1659857794003
GPR[EPVS]-1659857794003
========
d=0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857794004
GPR[SPVAP]-1659857794004
GPR[EPVAP]-1659857795033
GPR[EPVS]-1659857795033
========
evaluateSimplex(p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857795035
GPR[SPVAP]-1659857795035
GPR[EPVAP]-1659857796065
GPR[EPVS]-1659857796065
========
System.arraycopy(new IntDoublePair[ranks.length],0,new IntDoublePair[k],0,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857796067
GPR[SPVAP]-1659857796067
GPR[EPVAP]-1659857797104
GPR[EPVS]-1659857797104
========
System.arraycopy((coefficients.length<p.coefficients.length)?p.coefficients:coefficients,d,new double[r],lowLength,r-lowLength);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857797107
GPR[SPVAP]-1659857797107
GPR[EPVAP]-1659857798167
GPR[EPVS]-1659857798167
========
if(b.length!=d){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",b.length,m);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857798171
GPR[SPVAP]-1659857798171
GPR[EPVAP]-1659857799180
GPR[EPVS]-1659857799180
========
while(resultSet.size()<maximalIterationCount){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857799182
GPR[SPVAP]-1659857799182
GPR[EPVAP]-1659857800193
GPR[EPVS]-1659857800193
========
while(resultSet.size()<k){
++r;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857800194
GPR[SPVAP]-1659857800194
GPR[EPVAP]-1659857801220
GPR[EPVS]-1659857801220
========
if(vector.length!=dimensionSize.length){
throw MathRuntimeException.createIllegalArgumentException("some dimensions don\'t match: {0} != {1}",vector.length,dimensionSize.length);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857801222
GPR[SPVAP]-1659857801222
GPR[EPVAP]-1659857802244
GPR[EPVS]-1659857802244
========
dx2=null;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857802246
GPR[SPVAP]-1659857802246
GPR[EPVAP]-1659857803256
GPR[EPVS]-1659857803256
========
updateJacobian();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857803260
GPR[SPVAP]-1659857803260
GPR[EPVAP]-1659857804283
GPR[EPVS]-1659857804283
========
try{
RealMatrix nearest=new LUDecompositionImpl(MatrixUtils.createRealMatrix(new double[k][m])).getSolver().getInverse();
return inverse.getData();
}catch (InvalidMatrixException ime) {
  throw new EstimationException("unable to compute covariances: singular problem");
}

while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857804284
GPR[SPVAP]-1659857804284
GPR[EPVAP]-1659857805311
GPR[EPVS]-1659857805311
========
while(resultSet.size()<k){
double sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857805313
GPR[SPVAP]-1659857805313
GPR[EPVAP]-1659857807191
GPR[SPVATF]-1659857807191
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857808975
GPR[EPVS]-1659857808975
========
resetEvaluations();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857808977
GPR[SPVAP]-1659857808977
GPR[EPVAP]-1659857809989
GPR[EPVS]-1659857809989
========
while(resultSet.size()<k){
random=d*Math.cos(p);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857809991
GPR[SPVAP]-1659857809991
GPR[EPVAP]-1659857811017
GPR[EPVS]-1659857811017
========
while(resultSet.size()<k){
nextGaussian=d*Math.sin(p);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857811018
GPR[SPVAP]-1659857811018
GPR[EPVAP]-1659857812028
GPR[EPVS]-1659857812028
========
while(resultSet.size()<k){
random=d*Math.cos(p);
nextGaussian=d*Math.sin(p);

int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857812030
GPR[SPVAP]-1659857812030
GPR[EPVAP]-1659857813041
GPR[EPVS]-1659857813041
========
if(coefficients.length<p.coefficients.length){
for(int i=sum;i<d;++i){
new double[d][i]=-p.coefficients[i];
}
}else {
System.arraycopy(coefficients,lowLength,newCoefficients,lowLength,highLength-lowLength);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857813044
GPR[SPVAP]-1659857813044
GPR[EPVAP]-1659857814075
GPR[EPVS]-1659857814075
========
if(r==0){
throw MathRuntimeException.createArithmeticException("Array sums to zero");
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857814077
GPR[SPVAP]-1659857814077
GPR[EPVAP]-1659857815092
GPR[EPVS]-1659857815092
========
checkBinomial(k,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857815094
GPR[SPVAP]-1659857815094
GPR[EPVAP]-1659857816104
GPR[EPVS]-1659857816104
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
if((k==1)||(k==k-1)){
return n;
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857816105
GPR[SPVAP]-1659857816105
GPR[EPVAP]-1659857817141
GPR[EPVS]-1659857817141
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
if(k>k/2){
return binomialCoefficientDouble(n,n-k);
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857817142
GPR[SPVAP]-1659857817142
GPR[EPVAP]-1659857818161
GPR[EPVS]-1659857818161
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
if(k<67){
return binomialCoefficient(n,k);
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857818162
GPR[SPVAP]-1659857818162
GPR[EPVAP]-1659857819184
GPR[EPVS]-1659857819184
========
if(k<67){
return Math.log(binomialCoefficient(n,k));
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857819187
GPR[SPVAP]-1659857819187
GPR[EPVAP]-1659857820240
GPR[EPVS]-1659857820241
========
if(k<1030){
return Math.log(binomialCoefficientDouble(n,k));
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857820241
GPR[SPVAP]-1659857820241
GPR[EPVAP]-1659857821262
GPR[EPVS]-1659857821262
========
if(k>k/2){
return binomialCoefficientLog(n,n-k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857821263
GPR[SPVAP]-1659857821263
GPR[EPVAP]-1659857822271
GPR[EPVS]-1659857822271
========
checkColumnIndex(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857822274
GPR[SPVAP]-1659857822274
GPR[EPVAP]-1659857823297
GPR[EPVS]-1659857823297
========
MatrixUtils.checkColumnIndex(this,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857823299
GPR[SPVAP]-1659857823299
GPR[EPVAP]-1659857825333
GPR[EPVS]-1659857825333
========
MatrixUtils.checkRowIndex(this,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857825344
GPR[SPVAP]-1659857825344
GPR[EPVAP]-1659857826629
GPR[EPVS]-1659857826629
========
MatrixUtils.checkRowIndex(this,k);
MatrixUtils.checkColumnIndex(this,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857826631
GPR[SPVAP]-1659857826631
GPR[EPVAP]-1659857827657
GPR[EPVS]-1659857827657
========
checkRowIndex(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857827660
GPR[SPVAP]-1659857827660
GPR[EPVAP]-1659857828675
GPR[EPVS]-1659857828675
========
new double[d][sum]=1;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857828679
GPR[SPVAP]-1659857828679
GPR[EPVAP]-1659857829714
GPR[EPVS]-1659857829714
========
while(resultSet.size()<k){
int sum=0;
r=d*sum;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857829716
GPR[SPVAP]-1659857829716
GPR[EPVAP]-1659857830749
GPR[EPVS]-1659857830749
========
p.set(r,GeneticAlgorithm.getRandomGenerator().nextDouble());
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857830751
GPR[SPVAP]-1659857830751
GPR[EPVAP]-1659857831772
GPR[EPVS]-1659857831772
========
if(f.length==1){
new double[f.length][0]=0.0;
return transformed;
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857831773
GPR[SPVAP]-1659857831773
GPR[EPVAP]-1659857832788
GPR[EPVS]-1659857832788
========
dx2[0]=0.0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857832789
GPR[SPVAP]-1659857832789
GPR[EPVAP]-1659857834671
GPR[SPVATF]-1659857834671
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857836475
GPR[EPVS]-1659857836475
========
while(resultSet.size()<k){
optima[i+1]=dx2[i];
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857836479
GPR[SPVAP]-1659857836479
GPR[EPVAP]-1659857837493
GPR[EPVS]-1659857837493
========
while(resultSet.size()<k){
optimaValues[i+1]=r;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857837494
GPR[SPVAP]-1659857837494
GPR[EPVAP]-1659857838521
GPR[EPVS]-1659857838521
========
while(resultSet.size()<k){
optima[i+1]=dx2[i];
optimaValues[i+1]=r;

int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857838522
GPR[SPVAP]-1659857838522
GPR[EPVAP]-1659857839542
GPR[EPVS]-1659857839542
========
checkRowIndex(k);
checkColumnIndex(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857839545
GPR[SPVAP]-1659857839545
GPR[EPVAP]-1659857840547
GPR[EPVS]-1659857840547
========
while(resultSet.size()<k){
polynoms[j+4][i]=16*(yMidDots[j][i]+d*polynoms[j+2][i]-r*polynoms[j][i]);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857840549
GPR[SPVAP]-1659857840549
GPR[EPVAP]-1659857841586
GPR[EPVS]-1659857841586
========
resetTables(sum);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857841592
GPR[SPVAP]-1659857841592
GPR[EPVAP]-1659857842639
GPR[EPVS]-1659857842639
========
r=sum;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857842640
GPR[SPVAP]-1659857842640
GPR[EPVAP]-1659857843666
GPR[EPVS]-1659857843666
========
if(nearest.divide(BigInteger.valueOf(d)).bitLength()>31){
throw MathRuntimeException.createArithmeticException("overflow, numerator too large after multiply: {0}",w);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857843667
GPR[SPVAP]-1659857843667
GPR[EPVAP]-1659857844679
GPR[EPVS]-1659857844679
========
checkVectorDimensions(v.length);
while(resultSet.size()<k){
double sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857844683
GPR[SPVAP]-1659857844683
GPR[EPVAP]-1659857845695
GPR[EPVS]-1659857845695
========
System.arraycopy(dx2,0,new double[coefficients.length],0,coefficients.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857845698
GPR[SPVAP]-1659857845698
GPR[EPVAP]-1659857846725
GPR[EPVS]-1659857846725
========
System.arraycopy(dx2,0,new double[sum],0,internalArray.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857846727
GPR[SPVAP]-1659857846727
GPR[EPVAP]-1659857847742
GPR[EPVS]-1659857847742
========
dx2=new double[sum];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857847742
GPR[SPVAP]-1659857847742
GPR[EPVAP]-1659857848759
GPR[EPVS]-1659857848759
========
r=values.length;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857848763
GPR[SPVAP]-1659857848763
GPR[EPVAP]-1659857849782
GPR[EPVS]-1659857849782
========
nearest=new OpenIntToDoubleHashMap(0.0);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857849783
GPR[SPVAP]-1659857849783
GPR[EPVAP]-1659857850836
GPR[EPVS]-1659857850836
========
while(resultSet.size()<x1){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857850839
GPR[SPVAP]-1659857850839
GPR[EPVAP]-1659857851928
GPR[EPVS]-1659857851928
========
new NordsieckStepInterpolator().reinitialize(dx2,p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857851930
GPR[SPVAP]-1659857851930
GPR[EPVAP]-1659857852961
GPR[EPVS]-1659857852961
========
nearest.reinitialize(new double[y0.length],p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857852962
GPR[SPVAP]-1659857852962
GPR[EPVAP]-1659857854001
GPR[EPVS]-1659857854001
========
resetEvaluations();
new NordsieckStepInterpolator().reinitialize(dx2,p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857854003
GPR[SPVAP]-1659857854003
GPR[EPVAP]-1659857855024
GPR[EPVS]-1659857855025
========
resetEvaluations();
nearest.reinitialize(new double[y0.length],p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857855025
GPR[SPVAP]-1659857855025
GPR[EPVAP]-1659857856038
GPR[EPVS]-1659857856038
========
new NordsieckStepInterpolator().reinitialize(dx2,p);
nearest.reinitialize(new double[y0.length],p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857856039
GPR[SPVAP]-1659857856039
GPR[EPVAP]-1659857857067
GPR[EPVS]-1659857857067
========
resetEvaluations();
new NordsieckStepInterpolator().reinitialize(dx2,p);
nearest.reinitialize(new double[y0.length],p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857857069
GPR[SPVAP]-1659857857069
GPR[EPVAP]-1659857858095
GPR[EPVS]-1659857858095
========
while(resultSet.size()<k){
ret=Math.exp(r+d-SaddlePointExpansion.logBinomialProbability(k,i,p,(double)(i-k)/(double)m));
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857858097
GPR[SPVAP]-1659857858097
GPR[EPVAP]-1659857859138
GPR[EPVS]-1659857859138
========
if(!isNonSingular()){
throw new SingularMatrixException();
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857859143
GPR[SPVAP]-1659857859143
GPR[EPVAP]-1659857860165
GPR[EPVS]-1659857860165
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
this.sum=brightnessExponent;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857860172
GPR[SPVAP]-1659857860172
GPR[EPVAP]-1659857861198
GPR[EPVS]-1659857861198
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857861199
GPR[SPVAP]-1659857861199
GPR[EPVAP]-1659857862219
GPR[EPVS]-1659857862219
========
this.sum=brightnessExponent;
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857862220
GPR[SPVAP]-1659857862220
GPR[EPVAP]-1659857863225
GPR[EPVS]-1659857863225
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
this.sum=brightnessExponent;
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857863226
GPR[SPVAP]-1659857863226
GPR[EPVAP]-1659857864240
GPR[EPVS]-1659857864240
========
if(k==0){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) must be positive",k);
}
shuffle(getNatural(d),d-k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857864241
GPR[SPVAP]-1659857864241
GPR[EPVAP]-1659857865270
GPR[EPVS]-1659857865270
========
super();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857865274
GPR[SPVAP]-1659857865274
GPR[EPVAP]-1659857866310
GPR[EPVS]-1659857866310
========
if(knots.length-1!=polynomials.length){
throw MathRuntimeException.createIllegalArgumentException("number of polynomial interpolants must match the number of segments ({0} != {1} - 1)",polynomials.length,knots.length);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857866311
GPR[SPVAP]-1659857866311
GPR[EPVAP]-1659857867338
GPR[EPVS]-1659857867338
========
if(!isStrictlyIncreasing(dx2)){
throw MathRuntimeException.createIllegalArgumentException("knot values must be strictly increasing");
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857867339
GPR[SPVAP]-1659857867339
GPR[EPVAP]-1659857868361
GPR[EPVS]-1659857868361
========
this.d=knots.length-1;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857868362
GPR[SPVAP]-1659857868362
GPR[EPVAP]-1659857869390
GPR[EPVS]-1659857869390
========
this.dx2=new double[d+1];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857869391
GPR[SPVAP]-1659857869391
GPR[EPVAP]-1659857870425
GPR[EPVS]-1659857870425
========
System.arraycopy(dx2,0,this.knots,0,d+1);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857870426
GPR[SPVAP]-1659857870426
GPR[EPVAP]-1659857871439
GPR[EPVS]-1659857871439
========
this.p=new PolynomialFunction[d];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857871439
GPR[SPVAP]-1659857871439
GPR[EPVAP]-1659857872469
GPR[EPVS]-1659857872469
========
System.arraycopy(p,0,this.polynomials,0,d);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857872470
GPR[SPVAP]-1659857872470
GPR[EPVAP]-1659857873471
GPR[EPVS]-1659857873471
========
new StringBuffer().append('(');
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857873476
GPR[SPVAP]-1659857873476
GPR[EPVAP]-1659857875343
GPR[SPVATF]-1659857875343
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857877143
GPR[EPVS]-1659857877143
========
new StringBuffer().append(')');
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857877145
GPR[SPVAP]-1659857877145
GPR[EPVAP]-1659857879010
GPR[SPVATF]-1659857879011
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857880809
GPR[EPVS]-1659857880809
========
new StringBuffer().append('(');
new StringBuffer().append(')');
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857880810
GPR[SPVAP]-1659857880810
GPR[EPVAP]-1659857882687
GPR[SPVATF]-1659857882687
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857884479
GPR[EPVS]-1659857884479
========
if((i<0)||(k>=d)){
throw MathRuntimeException.createIllegalArgumentException("out of range root of unity index {0} (must be in [{1};{2}])",k,0,omegaCount-1);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857884489
GPR[SPVAP]-1659857884489
GPR[EPVAP]-1659857885511
GPR[EPVS]-1659857885511
========
incrementAll(dx2,0,values.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857885512
GPR[SPVAP]-1659857885512
GPR[EPVAP]-1659857886531
GPR[EPVS]-1659857886531
========
r=k;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857886533
GPR[SPVAP]-1659857886533
GPR[EPVAP]-1659857887543
GPR[EPVS]-1659857887543
========
while(resultSet.size()<k){
int sum=BLOCK_SIZE;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857887544
GPR[SPVAP]-1659857887544
GPR[EPVAP]-1659857888553
GPR[EPVS]-1659857888553
========
if((k<0)||(k>=d)){
throw MathRuntimeException.createIllegalArgumentException("out of range root of unity index {0} (must be in [{1};{2}])",k,0,omegaCount-1);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1659857888555
GPR[SPVAP]-1659857888555
GPR[EPVAP]-1659857889587
GPR[EPVS]-1659857889587
GPR[ESUN]-1659857889591
GPR[SSUN]-1659857889591
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,153
========
for(Cluster<T> c : clusters){
 final double distance=point.centroidOf(c.getCenter());
if(distance<minDistance){
minDistance=distance;
minCluster=c;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857891473
GPR[SPVAP]-1659857891473
GPR[EPVAP]-1659857893798
GPR[EPVS]-1659857893798
========
for(Cluster<T> c : clusters){
if(!c.getCenter().centroidOf(cluster.getPoints()).equals(c.getCenter())){
clusteringChanged=true;
}
 final double distance=point.distanceFrom(c.getCenter());
if(distance<minDistance){
minDistance=distance;
minCluster=c;
}
}

========
MM Copying to MM
GPR[SPVS]-1659857893799
GPR[SPVAP]-1659857893799
GPR[EPVAP]-1659857895059
GPR[EPVS]-1659857895059
GPR[ESUN]-1659857896038
GPR[SSUN]-1659857896038
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,154
GPR[ESUN]-1659857898242
GPR[SSUN]-1659857898242
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,155
GPR[ESUN]-1659857898427
GPR[SSUN]-1659857898427
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,156
GPR[ESUN]-1659857898617
GPR[SSUN]-1659857898617
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,157
GPR[ESUN]-1659857898803
GPR[SSUN]-1659857898803
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,161
Find no block!
GPR[SSUN]-1659857898985
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,162
GPR[ESUN]-1659857899181
GPR[SSUN]-1659857899181
org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,57
GPR[ESUN]-1659857900177
GPR[SSUN]-1659857900177
org.apache.commons.math.util.MathUtils,1624
========
int sum=0;
for(int i=NAN_GAP;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857903577
GPR[SPVAP]-1659857903577
GPR[EPVAP]-1659857908487
GPR[SPVATF]-1659857908487
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 0
GPR[EPVATF]-1659857910277
GPR[SPVATR]-1659857910278
TESTING : math_79
MM message  - org.apache.commons.math.util.MathUtilsTest::testL2DistanceInt
MM message  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::dimension2
MM message  - org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest::testDistance
MM messageFailing tests: 3
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659857917688
GPR[EPVS]-1659857917688
========
int sum=0;
for(int i=0;i<length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857917690
GPR[SPVAP]-1659857917690
GPR[EPVAP]-1659857918749
GPR[EPVS]-1659857918749
========
int sum=0;
SAFE_MIN=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857918751
GPR[SPVAP]-1659857918751
GPR[EPVAP]-1659857919802
GPR[EPVS]-1659857919802
========
int sum=0;
for(int i=sum;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857919804
GPR[SPVAP]-1659857919804
GPR[EPVAP]-1659857921751
GPR[SPVATF]-1659857921751
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857923560
GPR[EPVS]-1659857923560
========
int sum=0;
for(int i=sum;i<length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857923561
GPR[SPVAP]-1659857923561
GPR[EPVAP]-1659857924601
GPR[EPVS]-1659857924601
========
double sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857924610
GPR[SPVAP]-1659857924610
GPR[EPVAP]-1659857926532
GPR[SPVATF]-1659857926532
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 0
GPR[EPVATF]-1659857928358
GPR[SPVATR]-1659857928359
TESTING : math_79
MM messageFailing tests: 0
GPR[EPVATR]-1659857935670
GPR[EPVS]-1659857935670
GPR[PF]-1659857935670
sourceFile  script/workingdir/SimFix/math/math_79_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java
location   script/workingdir/SimFix/math/math_79_buggy
MM Out patch at /experiment_home///results/SimFix/Math/79/seed_261/patch/math/79/0/patch_805644_1_ts_1659857935670.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math/util/MathUtils.java --label=/src/main/java/org/apache/commons/math/util/MathUtils.java /tmp/tmpDirMM2270499805819088318/MathUtils.java  /experiment_home///results/SimFix/Math/79/seed_261/patch/math/79/0/1_MathUtils.java  --unified=3  > /experiment_home///results/SimFix/Math/79/seed_261/patch/math/79/0/patch_805644_1_ts_1659857935670.diff
MMOut command diff: []
========
double sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857935681
GPR[SPVAP]-1659857935681
GPR[EPVAP]-1659857937627
GPR[SPVATF]-1659857937627
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659857939422
GPR[EPVS]-1659857939422
========
int sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857939423
GPR[SPVAP]-1659857939423
GPR[EPVAP]-1659857941356
GPR[SPVATF]-1659857941356
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 0
GPR[EPVATF]-1659857943177
GPR[SPVATR]-1659857943178
TESTING : math_79
MM messageFailing tests: 0
GPR[EPVATR]-1659857950489
GPR[EPVS]-1659857950489
GPR[PF]-1659857950489
sourceFile  script/workingdir/SimFix/math/math_79_buggy/src/main/java/org/apache/commons/math/util/MathUtils.java
location   script/workingdir/SimFix/math/math_79_buggy
MM Out patch at /experiment_home///results/SimFix/Math/79/seed_261/patch/math/79/0/patch_820461_2_ts_1659857950489.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math/util/MathUtils.java --label=/src/main/java/org/apache/commons/math/util/MathUtils.java /tmp/tmpDirMM4681517842038965236/MathUtils.java  /experiment_home///results/SimFix/Math/79/seed_261/patch/math/79/0/2_MathUtils.java  --unified=3  > /experiment_home///results/SimFix/Math/79/seed_261/patch/math/79/0/patch_820461_2_ts_1659857950489.diff
MMOut command diff: []
========
int sum=0;
for(int i=0;i<dp;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857950498
GPR[SPVAP]-1659857950498
GPR[EPVAP]-1659857951550
GPR[EPVS]-1659857951550
========
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN/dp);

========
MM Copying to MM
GPR[SPVS]-1659857951551
GPR[SPVAP]-1659857951551
GPR[EPVAP]-1659857952601
GPR[EPVS]-1659857952601
========
int sum=0;
for(int i=0;i<currentState.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857952604
GPR[SPVAP]-1659857952604
GPR[EPVAP]-1659857953659
GPR[EPVS]-1659857953659
========
int sum=0;
for(int i=0;i<currentState.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857953661
GPR[SPVAP]-1659857953661
GPR[EPVAP]-1659857954768
GPR[EPVS]-1659857954768
========
double sum=0;
for(int i=NAN_GAP;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857954770
GPR[SPVAP]-1659857954770
GPR[EPVAP]-1659857956741
GPR[SPVATF]-1659857956741
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 0
GPR[EPVATF]-1659857958537
GPR[SPVATR]-1659857958538
TESTING : math_79
MM message  - org.apache.commons.math.util.MathUtilsTest::testL2DistanceInt
MM message  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::dimension2
MM message  - org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest::testDistance
MM messageFailing tests: 3
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659857965829
GPR[EPVS]-1659857965829
========
double sum=0;
for(int i=0;i<length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857965831
GPR[SPVAP]-1659857965831
GPR[EPVAP]-1659857966883
GPR[EPVS]-1659857966883
========
int sum=0;
for(int i=NAN_GAP;i<length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857966885
GPR[SPVAP]-1659857966885
GPR[EPVAP]-1659857968083
GPR[EPVS]-1659857968083
========
double sum=0;
for(int i=NAN_GAP;i<length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857968092
GPR[SPVAP]-1659857968092
GPR[EPVAP]-1659857970292
GPR[EPVS]-1659857970292
========
int sum=0;
SAFE_MIN=0;
for(int i=NAN_GAP;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857970296
GPR[SPVAP]-1659857970296
GPR[EPVAP]-1659857971358
GPR[EPVS]-1659857971358
========
int sum=0;
SAFE_MIN=0;
for(int i=0;i<length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857971359
GPR[SPVAP]-1659857971359
GPR[EPVAP]-1659857972412
GPR[EPVS]-1659857972413
========
int sum=0;
SAFE_MIN=0;
for(int i=NAN_GAP;i<length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857972414
GPR[SPVAP]-1659857972414
GPR[EPVAP]-1659857973463
GPR[EPVS]-1659857973463
========
int sum=sum;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857973465
GPR[SPVAP]-1659857973465
GPR[EPVAP]-1659857974505
GPR[EPVS]-1659857974505
========
int sum=length;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857974507
GPR[SPVAP]-1659857974507
GPR[EPVAP]-1659857975553
GPR[EPVS]-1659857975553
========
p1[sum]=i;
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857975555
GPR[SPVAP]-1659857975555
GPR[EPVAP]-1659857976618
GPR[EPVS]-1659857976618
========
int sum=0;
for(int i=0;i<data.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857976620
GPR[SPVAP]-1659857976620
GPR[EPVAP]-1659857977683
GPR[EPVS]-1659857977683
========
checkVectorDimensions(v.length);
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857977685
GPR[SPVAP]-1659857977685
GPR[EPVAP]-1659857978735
GPR[EPVS]-1659857978735
========
double sum=0;
for(int i=0;i<data.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857978736
GPR[SPVAP]-1659857978736
GPR[EPVAP]-1659857979783
GPR[EPVS]-1659857979783
========
int sum=0;
for(int i=0;i<data.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857979784
GPR[SPVAP]-1659857979784
GPR[EPVAP]-1659857980870
GPR[EPVS]-1659857980870
========
double sum=0;
for(int i=0;i<data.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857980872
GPR[SPVAP]-1659857980872
GPR[EPVAP]-1659857981916
GPR[EPVS]-1659857981916
========
int sum=0;
for(int i=0;i<blocks.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857981918
GPR[SPVAP]-1659857981918
GPR[EPVAP]-1659857982980
GPR[EPVS]-1659857982980
========
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659857982982
GPR[SPVAP]-1659857982982
GPR[EPVAP]-1659857984907
GPR[SPVATF]-1659857984907
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 0
GPR[EPVATF]-1659857986688
GPR[SPVATR]-1659857986688
TESTING : math_79
MM message  - org.apache.commons.math.util.MathUtilsTest::testL2DistanceInt
MM message  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::dimension2
MM message  - org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest::testDistance
MM messageFailing tests: 3
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659857993960
GPR[EPVS]-1659857993960
========
double sum=0;
for(int i=0;i<blocks.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659857993961
GPR[SPVAP]-1659857993961
GPR[EPVAP]-1659857995015
GPR[EPVS]-1659857995015
========
double sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659857995017
GPR[SPVAP]-1659857995017
GPR[EPVAP]-1659857996941
GPR[SPVATF]-1659857996942
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 0
GPR[EPVATF]-1659857998731
GPR[SPVATR]-1659857998731
TESTING : math_79
MM message  - org.apache.commons.math.util.MathUtilsTest::testL2DistanceInt
MM message  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::dimension2
MM message  - org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest::testDistance
MM messageFailing tests: 3
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659858006064
GPR[EPVS]-1659858006064
========
int sum=0;
for(int i=0;i<blocks.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858006066
GPR[SPVAP]-1659858006066
GPR[EPVAP]-1659858007127
GPR[EPVS]-1659858007127
========
double sum=0;
for(int i=0;i<blocks.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858007128
GPR[SPVAP]-1659858007128
GPR[EPVAP]-1659858008183
GPR[EPVS]-1659858008184
========
int sum=0;
for(int i=0;i<y0.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858008186
GPR[SPVAP]-1659858008186
GPR[EPVAP]-1659858009234
GPR[EPVS]-1659858009234
========
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858009236
GPR[SPVAP]-1659858009236
GPR[EPVAP]-1659858010290
GPR[EPVS]-1659858010290
========
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858010292
GPR[SPVAP]-1659858010292
GPR[EPVAP]-1659858011341
GPR[EPVS]-1659858011341
========
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858011343
GPR[SPVAP]-1659858011343
GPR[EPVAP]-1659858012391
GPR[EPVS]-1659858012391
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858012393
GPR[SPVAP]-1659858012393
GPR[EPVAP]-1659858013458
GPR[EPVS]-1659858013458
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858013459
GPR[SPVAP]-1659858013459
GPR[EPVAP]-1659858014513
GPR[EPVS]-1659858014513
========
int sum=0;
for(int i=0;i<length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858014515
GPR[SPVAP]-1659858014515
GPR[EPVAP]-1659858015570
GPR[EPVS]-1659858015570
========
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(dp*dx+v2.y-v1.y*dy+v2.z-v1.z*dz);

========
MM Copying to MM
GPR[SPVS]-1659858015573
GPR[SPVAP]-1659858015573
GPR[EPVAP]-1659858016641
GPR[EPVS]-1659858016641
========
SAFE_MIN=Math.sqrt(SAFE_MIN/SAFE_MIN*length-SAFE_MIN*SAFE_MIN);
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858016644
GPR[SPVAP]-1659858016644
GPR[EPVAP]-1659858017699
GPR[EPVS]-1659858017699
========
SAFE_MIN=Math.sqrt(SAFE_MIN*length-SAFE_MIN*SAFE_MIN/dp);
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858017700
GPR[SPVAP]-1659858017700
GPR[EPVAP]-1659858018743
GPR[EPVS]-1659858018743
========
int sum=0;
for(int i=dp;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858018745
GPR[SPVAP]-1659858018745
GPR[EPVAP]-1659858019807
GPR[EPVS]-1659858019807
========
SAFE_MIN=Math.sqrt(length*b2);
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858019809
GPR[SPVAP]-1659858019809
GPR[EPVAP]-1659858020863
GPR[EPVS]-1659858020863
========
double sum=0;
for(int i=sum;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858020864
GPR[SPVAP]-1659858020864
GPR[EPVAP]-1659858021913
GPR[EPVS]-1659858021913
========
int sum=0;
for(int i=0;i<v.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858021916
GPR[SPVAP]-1659858021916
GPR[EPVAP]-1659858022961
GPR[EPVS]-1659858022961
========
double sum=0;
for(int i=0;i<v.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858022962
GPR[SPVAP]-1659858022962
GPR[EPVAP]-1659858024014
GPR[EPVS]-1659858024014
========
checkVectorDimensions(v.length);
double sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858024015
GPR[SPVAP]-1659858024015
GPR[EPVAP]-1659858025099
GPR[EPVS]-1659858025099
========
int sum=0;
for(int i=0;i<v.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858025100
GPR[SPVAP]-1659858025100
GPR[EPVAP]-1659858026155
GPR[EPVS]-1659858026155
========
int sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858026157
GPR[SPVAP]-1659858026157
GPR[EPVAP]-1659858028115
GPR[SPVATF]-1659858028115
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 0
GPR[EPVATF]-1659858029949
GPR[SPVATR]-1659858029950
TESTING : math_79
MM message  - org.apache.commons.math.util.MathUtilsTest::testL2DistanceInt
MM message  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::dimension2
MM message  - org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest::testDistance
MM messageFailing tests: 3
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659858037295
GPR[EPVS]-1659858037295
========
checkVectorDimensions(v.length);
int sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858037296
GPR[SPVAP]-1659858037296
GPR[EPVAP]-1659858038339
GPR[EPVS]-1659858038339
========
int sum=0;
for(int i=0;i<v.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858038341
GPR[SPVAP]-1659858038341
GPR[EPVAP]-1659858039405
GPR[EPVS]-1659858039405
========
checkVectorDimensions(v.length);
int sum=0;
for(int i=0;i<v.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858039407
GPR[SPVAP]-1659858039407
GPR[EPVAP]-1659858040459
GPR[EPVS]-1659858040459
========
checkVectorDimensions(v.length);
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858040461
GPR[SPVAP]-1659858040461
GPR[EPVAP]-1659858041512
GPR[EPVS]-1659858041512
========
double sum=0;
for(int i=0;i<v.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858041513
GPR[SPVAP]-1659858041513
GPR[EPVAP]-1659858043786
GPR[EPVS]-1659858043786
========
double sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858043794
GPR[SPVAP]-1659858043794
GPR[EPVAP]-1659858045938
GPR[SPVATF]-1659858045938
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 0
GPR[EPVATF]-1659858047728
GPR[SPVATR]-1659858047728
TESTING : math_79
MM message  - org.apache.commons.math.util.MathUtilsTest::testL2DistanceInt
MM message  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::dimension2
MM message  - org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest::testDistance
MM messageFailing tests: 3
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659858054947
GPR[EPVS]-1659858054947
========
checkVectorDimensions(v.length);
double sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858054950
GPR[SPVAP]-1659858054950
GPR[EPVAP]-1659858056015
GPR[EPVS]-1659858056015
========
double sum=0;
for(int i=0;i<v.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858056017
GPR[SPVAP]-1659858056017
GPR[EPVAP]-1659858057059
GPR[EPVS]-1659858057059
========
checkVectorDimensions(v.length);
double sum=0;
for(int i=0;i<v.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858057061
GPR[SPVAP]-1659858057061
GPR[EPVAP]-1659858058107
GPR[EPVS]-1659858058107
========
checkVectorDimensions(v.length);
double sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858058109
GPR[SPVAP]-1659858058109
GPR[EPVAP]-1659858059184
GPR[EPVS]-1659858059184
========
int sum=0;
for(int i=0;i<v.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858059187
GPR[SPVAP]-1659858059187
GPR[EPVAP]-1659858060245
GPR[EPVS]-1659858060245
========
checkVectorDimensions(v.length);
int sum=0;
for(int i=0;i<v.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858060247
GPR[SPVAP]-1659858060247
GPR[EPVAP]-1659858061287
GPR[EPVS]-1659858061287
========
checkVectorDimensions(v.length);
int sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858061288
GPR[SPVAP]-1659858061288
GPR[EPVAP]-1659858062343
GPR[EPVS]-1659858062343
========
checkVectorDimensions(v.length);
int sum=0;
for(int i=0;i<v.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858062345
GPR[SPVAP]-1659858062345
GPR[EPVAP]-1659858063406
GPR[EPVS]-1659858063406
========
double sum=0;
for(int i=0;i<v.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858063408
GPR[SPVAP]-1659858063408
GPR[EPVAP]-1659858064450
GPR[EPVS]-1659858064450
========
checkVectorDimensions(v.length);
double sum=0;
for(int i=0;i<v.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858064452
GPR[SPVAP]-1659858064452
GPR[EPVAP]-1659858065498
GPR[EPVS]-1659858065499
========
checkVectorDimensions(v.length);
double sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858065500
GPR[SPVAP]-1659858065500
GPR[EPVAP]-1659858066571
GPR[EPVS]-1659858066571
========
checkVectorDimensions(v.length);
double sum=0;
for(int i=0;i<v.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858066573
GPR[SPVAP]-1659858066573
GPR[EPVAP]-1659858067611
GPR[EPVS]-1659858067611
========
checkVectorDimensions(v.length);
int sum=0;
for(int i=0;i<v.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN);

========
MM Copying to MM
GPR[SPVS]-1659858067613
GPR[SPVAP]-1659858067613
GPR[EPVAP]-1659858068661
GPR[EPVS]-1659858068661
========
int sum=0;
for(int i=0;i<p1.length;i++){
if(ltI[i]<length){
throw new NotPositiveDefiniteMatrixException();
}
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858068664
GPR[SPVAP]-1659858068664
GPR[EPVAP]-1659858069706
GPR[EPVS]-1659858069706
========
int sum=0;
for(int i=0;i<dp;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858069708
GPR[SPVAP]-1659858069708
GPR[EPVAP]-1659858070759
GPR[EPVS]-1659858070759
========
int sum=0;
for(int i=0;i<wm.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858070761
GPR[SPVAP]-1659858070761
GPR[EPVAP]-1659858071807
GPR[EPVS]-1659858071807
========
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN/wm.length);

========
MM Copying to MM
GPR[SPVS]-1659858071808
GPR[SPVAP]-1659858071808
GPR[EPVAP]-1659858072859
GPR[EPVS]-1659858072859
========
double sum=0;
for(int i=0;i<wm.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858072861
GPR[SPVAP]-1659858072861
GPR[EPVAP]-1659858073924
GPR[EPVS]-1659858073924
========
int sum=0;
for(int i=0;i<p1.length;i++){
sin=1.0/Math.sqrt(1.0+SAFE_MIN*cotan);
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858073926
GPR[SPVAP]-1659858073926
GPR[EPVAP]-1659858074975
GPR[EPVS]-1659858074975
========
int sum=0;
for(int i=0;i<p1.length;i++){
cos=1.0/Math.sqrt(1.0+dp*tan);
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858074977
GPR[SPVAP]-1659858074977
GPR[EPVAP]-1659858076029
GPR[EPVS]-1659858076029
========
int sum=0;
for(int i=0;i<p1.length;i++){
sin=SAFE_MIN*dp;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858076030
GPR[SPVAP]-1659858076030
GPR[EPVAP]-1659858077099
GPR[EPVS]-1659858077099
========
int sum=0;
for(int i=0;i<p1.length;i++){
cos=1.0/Math.sqrt(1.0+dp*tan);
sin=SAFE_MIN*dp;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858077100
GPR[SPVAP]-1659858077100
GPR[EPVAP]-1659858078150
GPR[EPVS]-1659858078150
========
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858078154
GPR[SPVAP]-1659858078154
GPR[EPVAP]-1659858079206
GPR[EPVS]-1659858079206
========
int sum=0;
for(int i=0;i<length;i++){
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858079207
GPR[SPVAP]-1659858079207
GPR[EPVAP]-1659858080246
GPR[EPVS]-1659858080246
========
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858080247
GPR[SPVAP]-1659858080247
GPR[EPVAP]-1659858081289
GPR[EPVS]-1659858081289
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858081290
GPR[SPVAP]-1659858081290
GPR[EPVAP]-1659858082366
GPR[EPVS]-1659858082366
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858082368
GPR[SPVAP]-1659858082368
GPR[EPVAP]-1659858083426
GPR[EPVS]-1659858083426
========
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858083427
GPR[SPVAP]-1659858083427
GPR[EPVAP]-1659858084485
GPR[EPVS]-1659858084485
========
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858084487
GPR[SPVAP]-1659858084487
GPR[EPVAP]-1659858085535
GPR[EPVS]-1659858085535
========
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858085537
GPR[SPVAP]-1659858085537
GPR[EPVAP]-1659858086583
GPR[EPVS]-1659858086583
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858086585
GPR[SPVAP]-1659858086585
GPR[EPVAP]-1659858087646
GPR[EPVS]-1659858087646
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858087648
GPR[SPVAP]-1659858087648
GPR[EPVAP]-1659858088714
GPR[EPVS]-1659858088714
========
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858088716
GPR[SPVAP]-1659858088716
GPR[EPVAP]-1659858089763
GPR[EPVS]-1659858089763
========
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858089765
GPR[SPVAP]-1659858089765
GPR[EPVAP]-1659858090817
GPR[EPVS]-1659858090817
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858090819
GPR[SPVAP]-1659858090819
GPR[EPVAP]-1659858091860
GPR[EPVS]-1659858091860
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858091861
GPR[SPVAP]-1659858091861
GPR[EPVAP]-1659858092899
GPR[EPVS]-1659858092899
========
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858092900
GPR[SPVAP]-1659858092900
GPR[EPVAP]-1659858093959
GPR[EPVS]-1659858093959
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858093961
GPR[SPVAP]-1659858093961
GPR[EPVAP]-1659858095027
GPR[EPVS]-1659858095027
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858095029
GPR[SPVAP]-1659858095029
GPR[EPVAP]-1659858096084
GPR[EPVS]-1659858096084
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858096086
GPR[SPVAP]-1659858096086
GPR[EPVAP]-1659858097141
GPR[EPVS]-1659858097141
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858097142
GPR[SPVAP]-1659858097142
GPR[EPVAP]-1659858098208
GPR[EPVS]-1659858098208
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858098210
GPR[SPVAP]-1659858098210
GPR[EPVAP]-1659858099286
GPR[EPVS]-1659858099286
========
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858099291
GPR[SPVAP]-1659858099291
GPR[EPVAP]-1659858100415
GPR[EPVS]-1659858100415
========
int sum=0;
for(int i=0;i<length;i++){
diag[k]=SAFE_MIN;
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858100417
GPR[SPVAP]-1659858100417
GPR[EPVAP]-1659858101499
GPR[EPVS]-1659858101499
========
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858101501
GPR[SPVAP]-1659858101501
GPR[EPVAP]-1659858102565
GPR[EPVS]-1659858102565
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858102566
GPR[SPVAP]-1659858102566
GPR[EPVAP]-1659858103610
GPR[EPVS]-1659858103610
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858103612
GPR[SPVAP]-1659858103612
GPR[EPVAP]-1659858104657
GPR[EPVS]-1659858104657
========
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858104658
GPR[SPVAP]-1659858104658
GPR[EPVAP]-1659858105726
GPR[EPVS]-1659858105726
========
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858105728
GPR[SPVAP]-1659858105728
GPR[EPVAP]-1659858106775
GPR[EPVS]-1659858106775
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858106777
GPR[SPVAP]-1659858106777
GPR[EPVAP]-1659858107870
GPR[EPVS]-1659858107870
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858107871
GPR[SPVAP]-1659858107871
GPR[EPVAP]-1659858108950
GPR[EPVS]-1659858108950
========
int sum=0;
for(int i=0;i<length;i++){
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858108952
GPR[SPVAP]-1659858108952
GPR[EPVAP]-1659858110001
GPR[EPVS]-1659858110001
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<length;i++){
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858110002
GPR[SPVAP]-1659858110002
GPR[EPVAP]-1659858111064
GPR[EPVS]-1659858111064
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858111065
GPR[SPVAP]-1659858111065
GPR[EPVAP]-1659858112118
GPR[EPVS]-1659858112118
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858112120
GPR[SPVAP]-1659858112120
GPR[EPVAP]-1659858113170
GPR[EPVS]-1659858113170
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858113171
GPR[SPVAP]-1659858113171
GPR[EPVAP]-1659858114219
GPR[EPVS]-1659858114219
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858114220
GPR[SPVAP]-1659858114220
GPR[EPVAP]-1659858115906
GPR[EPVS]-1659858115906
========
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858115915
GPR[SPVAP]-1659858115915
GPR[EPVAP]-1659858117199
GPR[EPVS]-1659858117199
========
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858117201
GPR[SPVAP]-1659858117201
GPR[EPVAP]-1659858118262
GPR[EPVS]-1659858118262
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858118264
GPR[SPVAP]-1659858118264
GPR[EPVAP]-1659858119319
GPR[EPVS]-1659858119319
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858119321
GPR[SPVAP]-1659858119321
GPR[EPVAP]-1659858120408
GPR[EPVS]-1659858120408
========
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858120410
GPR[SPVAP]-1659858120410
GPR[EPVAP]-1659858121453
GPR[EPVS]-1659858121453
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858121455
GPR[SPVAP]-1659858121455
GPR[EPVAP]-1659858122506
GPR[EPVS]-1659858122506
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858122508
GPR[SPVAP]-1659858122508
GPR[EPVAP]-1659858123555
GPR[EPVS]-1659858123555
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858123556
GPR[SPVAP]-1659858123556
GPR[EPVAP]-1659858124607
GPR[EPVS]-1659858124607
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858124609
GPR[SPVAP]-1659858124609
GPR[EPVAP]-1659858125689
GPR[EPVS]-1659858125690
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858125691
GPR[SPVAP]-1659858125691
GPR[EPVAP]-1659858126751
GPR[EPVS]-1659858126751
========
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858126752
GPR[SPVAP]-1659858126752
GPR[EPVAP]-1659858127809
GPR[EPVS]-1659858127809
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858127811
GPR[SPVAP]-1659858127811
GPR[EPVAP]-1659858128878
GPR[EPVS]-1659858128878
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858128880
GPR[SPVAP]-1659858128880
GPR[EPVAP]-1659858129938
GPR[EPVS]-1659858129938
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858129940
GPR[SPVAP]-1659858129940
GPR[EPVAP]-1659858130992
GPR[EPVS]-1659858130992
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858130994
GPR[SPVAP]-1659858130994
GPR[EPVAP]-1659858132042
GPR[EPVS]-1659858132042
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858132044
GPR[SPVAP]-1659858132044
GPR[EPVAP]-1659858133091
GPR[EPVS]-1659858133091
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858133093
GPR[SPVAP]-1659858133093
GPR[EPVAP]-1659858134139
GPR[EPVS]-1659858134139
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858134141
GPR[SPVAP]-1659858134141
GPR[EPVAP]-1659858135195
GPR[EPVS]-1659858135195
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858135196
GPR[SPVAP]-1659858135196
GPR[EPVAP]-1659858136246
GPR[EPVS]-1659858136246
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858136248
GPR[SPVAP]-1659858136248
GPR[EPVAP]-1659858137298
GPR[EPVS]-1659858137298
========
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858137300
GPR[SPVAP]-1659858137300
GPR[EPVAP]-1659858138359
GPR[EPVS]-1659858138359
========
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858138360
GPR[SPVAP]-1659858138360
GPR[EPVAP]-1659858139403
GPR[EPVS]-1659858139403
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858139405
GPR[SPVAP]-1659858139405
GPR[EPVAP]-1659858140445
GPR[EPVS]-1659858140445
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858140447
GPR[SPVAP]-1659858140447
GPR[EPVAP]-1659858141486
GPR[EPVS]-1659858141486
========
int sum=0;
for(int i=0;i<length;i++){
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858141488
GPR[SPVAP]-1659858141488
GPR[EPVAP]-1659858142536
GPR[EPVS]-1659858142536
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<length;i++){
diag[k]=SAFE_MIN;
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858142538
GPR[SPVAP]-1659858142538
GPR[EPVAP]-1659858143587
GPR[EPVS]-1659858143587
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
diag[k]=SAFE_MIN;
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858143588
GPR[SPVAP]-1659858143588
GPR[EPVAP]-1659858144706
GPR[EPVS]-1659858144706
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858144707
GPR[SPVAP]-1659858144707
GPR[EPVAP]-1659858145755
GPR[EPVS]-1659858145755
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858145756
GPR[SPVAP]-1659858145756
GPR[EPVAP]-1659858146850
GPR[EPVS]-1659858146850
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858146852
GPR[SPVAP]-1659858146852
GPR[EPVAP]-1659858147897
GPR[EPVS]-1659858147897
========
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858147899
GPR[SPVAP]-1659858147899
GPR[EPVAP]-1659858148948
GPR[EPVS]-1659858148948
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858148950
GPR[SPVAP]-1659858148950
GPR[EPVAP]-1659858150009
GPR[EPVS]-1659858150009
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858150011
GPR[SPVAP]-1659858150011
GPR[EPVAP]-1659858151088
GPR[EPVS]-1659858151088
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858151090
GPR[SPVAP]-1659858151090
GPR[EPVAP]-1659858152168
GPR[EPVS]-1659858152168
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858152170
GPR[SPVAP]-1659858152170
GPR[EPVAP]-1659858153221
GPR[EPVS]-1659858153221
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858153222
GPR[SPVAP]-1659858153222
GPR[EPVAP]-1659858154280
GPR[EPVS]-1659858154280
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<length;i++){
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858154282
GPR[SPVAP]-1659858154282
GPR[EPVAP]-1659858155353
GPR[EPVS]-1659858155353
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858155355
GPR[SPVAP]-1659858155355
GPR[EPVAP]-1659858156411
GPR[EPVS]-1659858156411
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858156412
GPR[SPVAP]-1659858156412
GPR[EPVAP]-1659858157458
GPR[EPVS]-1659858157458
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858157460
GPR[SPVAP]-1659858157460
GPR[EPVAP]-1659858158504
GPR[EPVS]-1659858158504
========
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858158506
GPR[SPVAP]-1659858158506
GPR[EPVAP]-1659858159597
GPR[EPVS]-1659858159597
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858159599
GPR[SPVAP]-1659858159599
GPR[EPVAP]-1659858160653
GPR[EPVS]-1659858160653
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858160655
GPR[SPVAP]-1659858160655
GPR[EPVAP]-1659858161726
GPR[EPVS]-1659858161726
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858161728
GPR[SPVAP]-1659858161728
GPR[EPVAP]-1659858162814
GPR[EPVS]-1659858162814
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858162816
GPR[SPVAP]-1659858162816
GPR[EPVAP]-1659858163863
GPR[EPVS]-1659858163863
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858163865
GPR[SPVAP]-1659858163865
GPR[EPVAP]-1659858164918
GPR[EPVS]-1659858164918
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858164919
GPR[SPVAP]-1659858164919
GPR[EPVAP]-1659858165974
GPR[EPVS]-1659858165974
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858165975
GPR[SPVAP]-1659858165975
GPR[EPVAP]-1659858167029
GPR[EPVS]-1659858167029
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858167031
GPR[SPVAP]-1659858167031
GPR[EPVAP]-1659858168081
GPR[EPVS]-1659858168081
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858168083
GPR[SPVAP]-1659858168083
GPR[EPVAP]-1659858169163
GPR[EPVS]-1659858169163
========
SAFE_MIN=Math.sqrt(xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858169165
GPR[SPVAP]-1659858169165
GPR[EPVAP]-1659858170214
GPR[EPVS]-1659858170214
========
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858170216
GPR[SPVAP]-1659858170216
GPR[EPVAP]-1659858171277
GPR[EPVS]-1659858171277
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858171278
GPR[SPVAP]-1659858171278
GPR[EPVAP]-1659858172340
GPR[EPVS]-1659858172340
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
if(SAFE_MIN==0){
dk=1.0;
}
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858172341
GPR[SPVAP]-1659858172341
GPR[EPVAP]-1659858173399
GPR[EPVS]-1659858173399
========
SAFE_MIN=Math.sqrt(xNorm);
SAFE_MIN=(SAFE_MIN==0)?SAFE_MIN:(initialStepBoundFactor*xNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
diag[k]=SAFE_MIN;
if(SAFE_MIN==0){
dk=1.0;
}
diag[k]=SAFE_MIN;

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858173401
GPR[SPVAP]-1659858173401
GPR[EPVAP]-1659858174465
GPR[EPVS]-1659858174465
========
int sum=0;
for(int i=0;i<p1.length;i++){
lmDir[pj]=-lmDir[pj];
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858174467
GPR[SPVAP]-1659858174467
GPR[EPVAP]-1659858175529
GPR[EPVS]-1659858175529
========
int sum=0;
for(int i=0;i<p1.length;i++){
point[pj]=oldX[pj]+lmDir[pj];
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858175531
GPR[SPVAP]-1659858175531
GPR[EPVAP]-1659858176601
GPR[EPVS]-1659858176601
========
int sum=0;
for(int i=0;i<p1.length;i++){
lmDir[pj]=-lmDir[pj];
point[pj]=oldX[pj]+lmDir[pj];

 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858176602
GPR[SPVAP]-1659858176602
GPR[EPVAP]-1659858177661
GPR[EPVS]-1659858177661
========
SAFE_MIN=Math.sqrt(lmNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858177663
GPR[SPVAP]-1659858177663
GPR[EPVAP]-1659858178721
GPR[EPVS]-1659858178721
========
int sum=0;
for(int i=0;i<secondary.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858178723
GPR[SPVAP]-1659858178723
GPR[EPVAP]-1659858179796
GPR[EPVS]-1659858179796
========
int sum=0;
for(int i=0;i<after.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858179799
GPR[SPVAP]-1659858179799
GPR[EPVAP]-1659858180857
GPR[EPVS]-1659858180857
========
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN/after.length);

========
MM Copying to MM
GPR[SPVS]-1659858180858
GPR[SPVAP]-1659858180858
GPR[EPVAP]-1659858181902
GPR[EPVS]-1659858181902
========
int sum=0;
for(int i=0;i<p1.length;i++){
after[i]+=previous[i]+scaled[i];
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858181904
GPR[SPVAP]-1659858181904
GPR[EPVAP]-1659858182983
GPR[EPVS]-1659858182983
========
double sum=0;
for(int i=0;i<after.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858182984
GPR[SPVAP]-1659858182984
GPR[EPVAP]-1659858184059
GPR[EPVS]-1659858184059
========
int sum=0;
for(int i=0;i<after.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858184061
GPR[SPVAP]-1659858184061
GPR[EPVAP]-1659858185112
GPR[EPVS]-1659858185112
========
double sum=0;
for(int i=0;i<after.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858185114
GPR[SPVAP]-1659858185114
GPR[EPVAP]-1659858186170
GPR[EPVS]-1659858186171
========
SAFE_MIN=Math.sqrt(length*b2);
int sum=0;
for(int i=NAN_GAP;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858186173
GPR[SPVAP]-1659858186173
GPR[EPVAP]-1659858188455
GPR[EPVS]-1659858188455
========
SAFE_MIN=Math.sqrt(length*b2);
int sum=0;
for(int i=dp;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858188464
GPR[SPVAP]-1659858188464
GPR[EPVAP]-1659858189679
GPR[EPVS]-1659858189679
========
int sum=0;
for(int i=0;i<ranks.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858189681
GPR[SPVAP]-1659858189681
GPR[EPVAP]-1659858190737
GPR[EPVS]-1659858190737
========
int sum=0;
for(int i=0;i<point.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858190739
GPR[SPVAP]-1659858190739
GPR[EPVAP]-1659858191791
GPR[EPVS]-1659858191791
========
int sum=0;
for(int i=0;i<x.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858191793
GPR[SPVAP]-1659858191793
GPR[EPVAP]-1659858192843
GPR[EPVS]-1659858192843
========
int sum=0;
for(int i=0;i<in.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858192846
GPR[SPVAP]-1659858192846
GPR[EPVAP]-1659858193891
GPR[EPVS]-1659858193891
========
int sum=0;
for(int i=0;i<length;i++){
lmDir[pj]=-lmDir[pj];
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858193893
GPR[SPVAP]-1659858193893
GPR[EPVAP]-1659858194967
GPR[EPVS]-1659858194967
========
SAFE_MIN=Math.sqrt(lmNorm);
int sum=0;
for(int i=0;i<length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858194969
GPR[SPVAP]-1659858194969
GPR[EPVAP]-1659858196032
GPR[EPVS]-1659858196032
========
int sum=0;
for(int i=0;i<p1.length;i++){
lmDir[pj]=-lmDir[pj];
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858196034
GPR[SPVAP]-1659858196034
GPR[EPVAP]-1659858197077
GPR[EPVS]-1659858197077
========
SAFE_MIN=Math.sqrt(lmNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858197078
GPR[SPVAP]-1659858197078
GPR[EPVAP]-1659858198123
GPR[EPVS]-1659858198123
========
SAFE_MIN=Math.sqrt(lmNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
lmDir[pj]=-lmDir[pj];
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858198129
GPR[SPVAP]-1659858198129
GPR[EPVAP]-1659858199189
GPR[EPVS]-1659858199189
========
int sum=0;
for(int i=0;i<length;i++){
lmDir[pj]=-lmDir[pj];
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858199191
GPR[SPVAP]-1659858199191
GPR[EPVAP]-1659858200262
GPR[EPVS]-1659858200262
========
SAFE_MIN=Math.sqrt(lmNorm);
int sum=0;
for(int i=0;i<length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858200263
GPR[SPVAP]-1659858200263
GPR[EPVAP]-1659858201344
GPR[EPVS]-1659858201344
========
SAFE_MIN=Math.sqrt(lmNorm);
int sum=0;
for(int i=0;i<length;i++){
lmDir[pj]=-lmDir[pj];
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858201349
GPR[SPVAP]-1659858201349
GPR[EPVAP]-1659858202410
GPR[EPVS]-1659858202410
========
SAFE_MIN=Math.sqrt(lmNorm);
int sum=0;
for(int i=0;i<p1.length;i++){
lmDir[pj]=-lmDir[pj];
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858202412
GPR[SPVAP]-1659858202412
GPR[EPVAP]-1659858203473
GPR[EPVS]-1659858203473
========
SAFE_MIN=Math.sqrt(lmNorm);
int sum=0;
for(int i=0;i<length;i++){
lmDir[pj]=-lmDir[pj];
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858203474
GPR[SPVAP]-1659858203474
GPR[EPVAP]-1659858204535
GPR[EPVS]-1659858204535
========
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
ratio=(yDot1[j]-yDot0[j])/scale[j];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858204537
GPR[SPVAP]-1659858204537
GPR[EPVAP]-1659858205582
GPR[EPVS]-1659858205582
========
SAFE_MIN=Math.sqrt(yDDotOnScale)/SAFE_MIN;
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858205584
GPR[SPVAP]-1659858205584
GPR[EPVAP]-1659858206660
GPR[EPVS]-1659858206660
========
SAFE_MIN=Math.min(100.0*Math.abs(h),(dp<1.0E-15)?Math.max(1.0E-6,0.001*Math.abs(SAFE_MIN)):Math.pow(0.01/maxInv2,1.0/NAN_GAP));
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858206662
GPR[SPVAP]-1659858206662
GPR[EPVAP]-1659858207730
GPR[EPVS]-1659858207730
========
int sum=0;
for(int i=0;i<special.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858207732
GPR[SPVAP]-1659858207732
GPR[EPVAP]-1659858208785
GPR[EPVS]-1659858208785
========
if((dp+NAN_GAP)>internalArray.length){
expandTo(startIndex+i);
}
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858208786
GPR[SPVAP]-1659858208786
GPR[EPVAP]-1659858209873
GPR[EPVS]-1659858209873
========
sum=NAN_GAP;
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858209874
GPR[SPVAP]-1659858209874
GPR[EPVAP]-1659858210932
GPR[EPVS]-1659858210932
========
int sum=0;
for(int i=0;i<coordinates.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858210934
GPR[SPVAP]-1659858210934
GPR[EPVAP]-1659858211980
GPR[EPVS]-1659858211980
========
int sum=0;
for(int i=0;i<coefficients.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858211982
GPR[SPVAP]-1659858211982
GPR[EPVAP]-1659858213047
GPR[EPVS]-1659858213047
========
int sum=0;
for(int i=0;i<results.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858213050
GPR[SPVAP]-1659858213050
GPR[EPVAP]-1659858214126
GPR[EPVS]-1659858214126
========
int sum=0;
for(int i=0;i<result.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858214127
GPR[SPVAP]-1659858214127
GPR[EPVAP]-1659858215176
GPR[EPVS]-1659858215176
========
int sum=0;
for(int i=0;i<realEigenvalues.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858215178
GPR[SPVAP]-1659858215178
GPR[EPVAP]-1659858216238
GPR[EPVS]-1659858216238
========
int sum=0;
for(int i=0;i<singularValues.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858216240
GPR[SPVAP]-1659858216240
GPR[EPVAP]-1659858217290
GPR[EPVS]-1659858217290
========
checkVectorDimensions(v.length);
int sum=0;
for(int i=0;i<data.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858217292
GPR[SPVAP]-1659858217292
GPR[EPVAP]-1659858218334
GPR[EPVS]-1659858218334
========
checkVectorDimensions(v.length);
double sum=0;
for(int i=0;i<data.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858218336
GPR[SPVAP]-1659858218336
GPR[EPVAP]-1659858219392
GPR[EPVS]-1659858219392
========
int sum=0;
for(int i=0;i<bd.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858219399
GPR[SPVAP]-1659858219399
GPR[EPVAP]-1659858220454
GPR[EPVS]-1659858220454
========
int sum=0;
for(int i=0;i<a.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858220457
GPR[SPVAP]-1659858220457
GPR[EPVAP]-1659858221523
GPR[EPVS]-1659858221523
========
int sum=0;
for(int i=0;i<values.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858221525
GPR[SPVAP]-1659858221525
GPR[EPVAP]-1659858222590
GPR[EPVS]-1659858222590
========
int sum=0;
for(int i=0;i<parameters.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858222595
GPR[SPVAP]-1659858222595
GPR[EPVAP]-1659858223644
GPR[EPVS]-1659858223644
========
double sum=0;
for(int i=0;i<parameters.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858223645
GPR[SPVAP]-1659858223645
GPR[EPVAP]-1659858224707
GPR[EPVS]-1659858224707
========
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN/y0.length);

========
MM Copying to MM
GPR[SPVS]-1659858224709
GPR[SPVAP]-1659858224709
GPR[EPVAP]-1659858225785
GPR[EPVS]-1659858225785
========
checkVectorDimensions(v.length);
int sum=0;
for(int i=0;i<data.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858225788
GPR[SPVAP]-1659858225788
GPR[EPVAP]-1659858226836
GPR[EPVS]-1659858226836
========
checkVectorDimensions(v.length);
double sum=0;
for(int i=0;i<data.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858226837
GPR[SPVAP]-1659858226837
GPR[EPVAP]-1659858227895
GPR[EPVS]-1659858227895
========
int sum=0;
for(int i=0;i<p1.length;i++){
ak2=SAFE_MIN;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858227897
GPR[SPVAP]-1659858227897
GPR[EPVAP]-1659858228950
GPR[EPVS]-1659858228950
========
int sum=0;
for(int i=0;i<diagonal.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858228953
GPR[SPVAP]-1659858228953
GPR[EPVAP]-1659858230025
GPR[EPVS]-1659858230025
========
int sum=0;
for(int i=0;i<root.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858230027
GPR[SPVAP]-1659858230027
GPR[EPVAP]-1659858231083
GPR[EPVS]-1659858231083
========
int sum=0;
for(int i=0;i<sum;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858231085
GPR[SPVAP]-1659858231085
GPR[EPVAP]-1659858233026
GPR[SPVATF]-1659858233026
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 0
GPR[EPVATF]-1659858234862
GPR[SPVATR]-1659858234863
TESTING : math_79
MM message  - org.apache.commons.math.util.MathUtilsTest::testL2DistanceInt
MM message  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::dimension2
MM message  - org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest::testDistance
MM messageFailing tests: 3
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659858242077
GPR[EPVS]-1659858242077
========
int sum=0;
for(int i=0;i<p1.length;i++){
iterationCount=NAN_GAP;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858242079
GPR[SPVAP]-1659858242079
GPR[EPVAP]-1659858243152
GPR[EPVS]-1659858243152
========
int sum=0;
for(int i=0;i<dx2.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858243154
GPR[SPVAP]-1659858243154
GPR[EPVAP]-1659858244218
GPR[EPVS]-1659858244218
========
int sum=0;
for(int i=0;i<random.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858244220
GPR[SPVAP]-1659858244220
GPR[EPVAP]-1659858245278
GPR[EPVS]-1659858245278
========
int sum=0;
checkVectorDimensions(v.length);
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858245281
GPR[SPVAP]-1659858245281
GPR[EPVAP]-1659858246347
GPR[EPVS]-1659858246347
========
int sum=0;
checkVectorDimensions(v.length);
for(int i=0;i<data.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858246348
GPR[SPVAP]-1659858246348
GPR[EPVAP]-1659858247399
GPR[EPVS]-1659858247399
========
int sum=SAFE_MIN<Double.MIN_VALUE?0:0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858247411
GPR[SPVAP]-1659858247411
GPR[EPVAP]-1659858249339
GPR[SPVATF]-1659858249339
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659858251151
GPR[EPVS]-1659858251151
========
long sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858251152
GPR[SPVAP]-1659858251152
GPR[EPVAP]-1659858253066
GPR[SPVATF]-1659858253066
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659858254907
GPR[EPVS]-1659858254907
========
long sum=SAFE_MIN<Double.MIN_VALUE?0:0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858254909
GPR[SPVAP]-1659858254909
GPR[EPVAP]-1659858256832
GPR[SPVATF]-1659858256832
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659858258643
GPR[EPVS]-1659858258643
========
int sum=0;
checkVectorDimensions(v.length);
for(int i=0;i<v.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858258646
GPR[SPVAP]-1659858258646
GPR[EPVAP]-1659858261043
GPR[EPVS]-1659858261043
========
double sum=0;
for(int i=0;i<y0.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858261046
GPR[SPVAP]-1659858261046
GPR[EPVAP]-1659858262099
GPR[EPVS]-1659858262099
========
double sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN/y0.length);

========
MM Copying to MM
GPR[SPVS]-1659858262104
GPR[SPVAP]-1659858262104
GPR[EPVAP]-1659858263172
GPR[EPVS]-1659858263172
========
int sum=0;
for(int i=0;i<y0.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858263173
GPR[SPVAP]-1659858263173
GPR[EPVAP]-1659858264216
GPR[EPVS]-1659858264216
========
int sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN/y0.length);

========
MM Copying to MM
GPR[SPVS]-1659858264218
GPR[SPVAP]-1659858264218
GPR[EPVAP]-1659858265271
GPR[EPVS]-1659858265271
========
int sum=0;
for(int i=0;i<y0.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN/y0.length);

========
MM Copying to MM
GPR[SPVS]-1659858265273
GPR[SPVAP]-1659858265273
GPR[EPVAP]-1659858266334
GPR[EPVS]-1659858266334
========
double sum=0;
for(int i=0;i<y0.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858266336
GPR[SPVAP]-1659858266336
GPR[EPVAP]-1659858267382
GPR[EPVS]-1659858267382
========
double sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN/y0.length);

========
MM Copying to MM
GPR[SPVS]-1659858267384
GPR[SPVAP]-1659858267384
GPR[EPVAP]-1659858268489
GPR[EPVS]-1659858268489
========
double sum=0;
for(int i=0;i<y0.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN/y0.length);

========
MM Copying to MM
GPR[SPVS]-1659858268491
GPR[SPVAP]-1659858268491
GPR[EPVAP]-1659858269543
GPR[EPVS]-1659858269543
========
int sum=0;
for(int i=0;i<y0.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN/y0.length);

========
MM Copying to MM
GPR[SPVS]-1659858269545
GPR[SPVAP]-1659858269545
GPR[EPVAP]-1659858270602
GPR[EPVS]-1659858270602
========
double sum=0;
for(int i=0;i<y0.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(SAFE_MIN/y0.length);

========
MM Copying to MM
GPR[SPVS]-1659858270604
GPR[SPVAP]-1659858270604
GPR[EPVAP]-1659858271656
GPR[EPVS]-1659858271656
========
int sum=0;
for(int i=0;i<c.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858271659
GPR[SPVAP]-1659858271659
GPR[EPVAP]-1659858272714
GPR[EPVS]-1659858272714
========
int sum=0;
for(int i=0;i<xArray.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858272716
GPR[SPVAP]-1659858272716
GPR[EPVAP]-1659858273769
GPR[EPVS]-1659858273770
========
int sum=0;
for(int i=0;i<simplex.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858273771
GPR[SPVAP]-1659858273771
GPR[EPVAP]-1659858274841
GPR[EPVS]-1659858274841
========
int sum=0;
for(int i=0;i<xval.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858274843
GPR[SPVAP]-1659858274843
GPR[EPVAP]-1659858275895
GPR[EPVS]-1659858275895
========
int sum=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
i--;
sum+=dp*dp;
}
return Math.sqrt(sum);

========
MM Copying to MM
GPR[SPVS]-1659858275897
GPR[SPVAP]-1659858275897
GPR[EPVAP]-1659858277815
GPR[SPVATF]-1659858277815
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
MM: Running ant (run.dev.tests)................................................ 
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875127419
GPR[EPVS]-1659875127419
========
int sum=0;
for(int i=0;i<p1.length;i++){
bytes[bytesOut++]=(byte)sum;
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
End running Math/79 results at /experiment_home///results/SimFix/Math/79/seed_261/
\n\nNode: host-68\n
\n\nDate: Sun 07 Aug 2022 05:25:27 AM PDT\n
Removing checked out dir script/workingdir/SimFix/math/math_79_buggy
GPR[SSLE]-1659875127499
GPR[ESLE]-1659875187505
