Sleep 1m start
GPR[SSLI]-1661102881398
GPR[ESLI]-1661102941401
Running Nopol Math 82b with approach: dynamoth
Timezone: America/Los_Angeles
Seed 214
OS: linux
Creating out dir /experiment_home///results/dynamoth/Math/82/seed_214/
The file script/workingdir/dynamoth/Math_82 does not exist!
script/workingdir/dynamoth/Math_82
script/workingdir/dynamoth/Math_82
classpath:  script/workingdir/dynamoth/Math_82/target/classes:script/workingdir/dynamoth/Math_82/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/dynamoth/Math_82/lib/junit-4.4.jar
Src java:  /src/main/java
Classes Java:  /target/classes
Src Test:  /src/test/java
Classes Test:  /target/test-classes
GPR[SSLB]-1661102956304
GPR[ESLB]-1661103016307
Calling Nopol:
Classpath to pass script/workingdir/dynamoth/Math_82//target/classes:script/workingdir/dynamoth/Math_82//target/test-classes:script/workingdir/dynamoth/Math_82/target/classes:script/workingdir/dynamoth/Math_82/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/dynamoth/Math_82/lib/junit-4.4.jar
Node: host-69
Date init: Sun 21 Aug 2022 10:30:16 AM PDT
OAR_JOB_ID: 3736472
[0] INFO NoPol - Source files: [script/workingdir/dynamoth/Math_82/src/main/java]
[0] INFO NoPol - Classpath: [file:script/workingdir/dynamoth/Math_82/target/classes/, file:script/workingdir/dynamoth/Math_82/target/test-classes/, file:script/workingdir/dynamoth/Math_82/target/classes/, file:script/workingdir/dynamoth/Math_82/target/test-classes/, file:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BrentMinimizerTest, org.apache.commons.math.optimization.univariate.BrentMinimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/dynamoth/Math_82/src/main/java], projectClasspath='[Ljava.net.URL;@bebdb06', projectTests=[org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BrentMinimizerTest, org.apache.commons.math.optimization.univariate.BrentMinimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest], complianceLevel=7, outputFolder=/experiment_home///results/dynamoth/Math/82/seed_214/, json=true}
[2] INFO NoPol - Available processors (cores): 36
[6] INFO NoPol - Free memory: 1 GB
[6] INFO NoPol - Maximum memory: 7 GB
[6] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[8] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[8] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1661103019528
GPR[ESUP]-1661103019528
GPR[SFL]-1661103019528
GPR[EFL]-1661103026686
GPR[SFP]-1661103026686
GPR[SSUN]-1661103026723
-1081517891
GPR[SPVATF]-1661103027012
GPR[EPVATF]-1661103027145
GPR[SPS]-1661103027145
GPR[EPS]-1661103027882
GPR[ESUN]-1661103027883
GPR[SSUN]-1661103027883
-1435753318
GPR[SPVATF]-1661103027997
GPR[EPVATF]-1661103028037
GPR[SPS]-1661103028037
GPR[EPS]-1661103028203
GPR[ESUN]-1661103028203
GPR[SSUN]-1661103028203
-1435753318
GPR[SPVATF]-1661103028312
GPR[EPVATF]-1661103028352
GPR[SPS]-1661103028352
GPR[EPS]-1661103099751
GPR[ESUN]-1661103099751
GPR[SSUN]-1661103099752
-1435753318
GPR[SPVATF]-1661103099908
GPR[EPVATF]-1661103099948
GPR[SPS]-1661103099948
GPR[EPS]-1661103100113
GPR[ESUN]-1661103100113
GPR[SSUN]-1661103100113
-1081517891
GPR[SPVATF]-1661103100248
GPR[EPVATF]-1661103100286
GPR[SPS]-1661103100286
GPR[EPS]-1661103100503
GPR[ESUN]-1661103100504
GPR[SSUN]-1661103100504
1078222701
GPR[ESUN]-1661103100623
GPR[SSUN]-1661103100623
-1081517891
GPR[ESUN]-1661103100752
GPR[SSUN]-1661103100752
-1081517891
GPR[ESUN]-1661103100881
GPR[SSUN]-1661103100881
-1081517891
GPR[ESUN]-1661103101009
GPR[SSUN]-1661103101009
-1081517891
GPR[SPVATF]-1661103101134
GPR[EPVATF]-1661103101171
GPR[SPS]-1661103101171
GPR[EPS]-1661103101372
GPR[ESUN]-1661103101372
GPR[SSUN]-1661103101372
-1081517891
GPR[SPVATF]-1661103101495
GPR[EPVATF]-1661103101530
GPR[SPS]-1661103101531
GPR[EPS]-1661103101725
GPR[ESUN]-1661103101725
GPR[SSUN]-1661103101725
-1081517891
GPR[SPVATF]-1661103101849
GPR[EPVATF]-1661103101885
GPR[SPS]-1661103101885
GPR[EPS]-1661103102079
GPR[SPVATF]-1661103102079
GPR[EPVATF]-1661103102116
GPR[SPS]-1661103102116
GPR[EPS]-1661103102308
GPR[ESUN]-1661103102308
GPR[SSUN]-1661103102308
-1081517891
GPR[ESUN]-1661103102438
GPR[SSUN]-1661103102439
-1081517891
GPR[SPVATF]-1661103102568
GPR[EPVATF]-1661103102603
GPR[SPS]-1661103102603
GPR[EPS]-1661103102788
GPR[ESUN]-1661103102788
GPR[SSUN]-1661103102788
-1081517891
GPR[ESUN]-1661103102930
GPR[SSUN]-1661103102930
-1081517891
GPR[ESUN]-1661103103051
GPR[SSUN]-1661103103051
-1081517891
GPR[ESUN]-1661103103173
GPR[SSUN]-1661103103173
-1081517891
GPR[ESUN]-1661103103293
GPR[SSUN]-1661103103293
-1081517891
GPR[ESUN]-1661103103413
GPR[SSUN]-1661103103413
-1435753318
GPR[ESUN]-1661103103510
GPR[SSUN]-1661103103510
-1435753318
GPR[ESUN]-1661103103614
GPR[SSUN]-1661103103615
-1081517891
GPR[SPVATF]-1661103103733
GPR[EPVATF]-1661103103769
GPR[SPS]-1661103103769
GPR[EPS]-1661103103951
GPR[ESUN]-1661103103951
GPR[SSUN]-1661103103951
-1435753318
GPR[SPVATF]-1661103104049
GPR[EPVATF]-1661103104085
GPR[SPS]-1661103104085
GPR[EPS]-1661103104225
GPR[ESUN]-1661103104225
GPR[SSUN]-1661103104225
-1435753318
GPR[SPVATF]-1661103104331
GPR[EPVATF]-1661103104367
GPR[SPS]-1661103104367
GPR[EPS]-1661103104507
GPR[ESUN]-1661103104507
GPR[SSUN]-1661103104507
-1435753318
GPR[SPVATF]-1661103104606
GPR[EPVATF]-1661103104641
GPR[SPS]-1661103104642
GPR[EPS]-1661103104780
GPR[SPVATF]-1661103104780
GPR[EPVATF]-1661103104817
GPR[SPS]-1661103104817
GPR[EPS]-1661103104954
GPR[ESUN]-1661103104954
GPR[SSUN]-1661103104954
-1435753318
GPR[SPVATF]-1661103105051
GPR[EPVATF]-1661103105086
GPR[SPS]-1661103105086
GPR[EPS]-1661103105223
GPR[ESUN]-1661103105223
GPR[SSUN]-1661103105223
-1435753318
GPR[SPVATF]-1661103105319
GPR[EPVATF]-1661103105355
GPR[SPS]-1661103105355
GPR[EPS]-1661103105491
GPR[SPVATF]-1661103105491
GPR[EPVATF]-1661103105526
GPR[SPS]-1661103105527
GPR[EPS]-1661103105667
GPR[ESUN]-1661103105668
GPR[SSUN]-1661103105668
-1081517891
GPR[ESUN]-1661103105789
GPR[SSUN]-1661103105789
-1081517891
GPR[ESUN]-1661103105907
GPR[SSUN]-1661103105907
-1081517891
GPR[SPVATF]-1661103106026
GPR[EPVATF]-1661103106725
GPR[SPS]-1661103106725
GPR[EPS]-1661103106910
GPR[ESUN]-1661103106910
GPR[SSUN]-1661103106910
-1081517891
GPR[SPVATF]-1661103107030
GPR[EPVATF]-1661103107064
GPR[SPS]-1661103107064
GPR[EPS]-1661103107234
GPR[ESUN]-1661103107235
GPR[SSUN]-1661103107235
-1081517891
GPR[SPVATF]-1661103107358
GPR[EPVATF]-1661103107394
GPR[SPS]-1661103107394
GPR[EPS]-1661103107564
GPR[SPVATF]-1661103107565
GPR[EPVATF]-1661103107600
GPR[SPS]-1661103107600
GPR[EPS]-1661103107771
GPR[ESUN]-1661103107771
GPR[SSUN]-1661103107771
-1435753318
GPR[SPVATF]-1661103107871
GPR[EPVATF]-1661103107907
GPR[SPS]-1661103107907
GPR[EPS]-1661103108040
GPR[ESUN]-1661103108040
GPR[SSUN]-1661103108040
-1435753318
GPR[ESUN]-1661103108143
GPR[SSUN]-1661103108143
-1435753318
GPR[SPVATF]-1661103108242
GPR[EPVATF]-1661103108277
GPR[SPS]-1661103108277
GPR[EPS]-1661103108405
GPR[SPVATF]-1661103108406
GPR[EPVATF]-1661103108443
GPR[SPS]-1661103108443
GPR[EPS]-1661103108576
GPR[ESUN]-1661103108576
GPR[SSUN]-1661103108576
-1435753318
GPR[ESUN]-1661103108672
GPR[SSUN]-1661103108672
-1435753318
GPR[SPVATF]-1661103108767
GPR[EPVATF]-1661103108801
GPR[SPS]-1661103108801
GPR[EPS]-1661103108930
GPR[ESUN]-1661103108930
GPR[SSUN]-1661103108930
-1435753318
GPR[ESUN]-1661103109028
GPR[SSUN]-1661103109028
-1435753318
GPR[SPVATF]-1661103109125
GPR[EPVATF]-1661103110053
GPR[SPS]-1661103110053
GPR[EPS]-1661103110199
GPR[SPVATF]-1661103110200
GPR[EPVATF]-1661103110234
GPR[SPS]-1661103110234
GPR[EPS]-1661103110367
GPR[ESUN]-1661103110367
GPR[SSUN]-1661103110367
-1435753318
GPR[SPVATF]-1661103110467
GPR[EPVATF]-1661103110503
GPR[SPS]-1661103110503
GPR[EPS]-1661103110635
GPR[ESUN]-1661103110635
GPR[SSUN]-1661103110635
-1435753318
GPR[SPVATF]-1661103110731
GPR[EPVATF]-1661103110766
GPR[SPS]-1661103110766
GPR[EPS]-1661103110904
GPR[ESUN]-1661103110905
GPR[SSUN]-1661103110905
-1435753318
GPR[ESUN]-1661103111000
GPR[SSUN]-1661103111000
-1435753318
GPR[SPVATF]-1661103111095
GPR[EPVATF]-1661103111129
GPR[SPS]-1661103111129
GPR[EPS]-1661103111259
GPR[SPVATF]-1661103111259
GPR[EPVATF]-1661103111293
GPR[SPS]-1661103111293
GPR[EPS]-1661103111421
GPR[ESUN]-1661103111421
GPR[SSUN]-1661103111421
-1435753318
GPR[ESUN]-1661103111520
GPR[SSUN]-1661103111520
-1435753318
GPR[ESUN]-1661103111614
GPR[SSUN]-1661103111614
-1435753318
GPR[SPVATF]-1661103111708
GPR[EPVATF]-1661103111745
GPR[SPS]-1661103111745
GPR[EPS]-1661103111871
GPR[ESUN]-1661103111871
GPR[SSUN]-1661103111872
-1435753318
GPR[ESUN]-1661103111967
GPR[SSUN]-1661103111967
-1435753318
GPR[SPVATF]-1661103112060
GPR[EPVATF]-1661103112094
GPR[SPS]-1661103112094
GPR[EPS]-1661103112225
GPR[ESUN]-1661103112225
GPR[SSUN]-1661103112225
-1435753318
GPR[SPVATF]-1661103112325
GPR[EPVATF]-1661103112360
GPR[SPS]-1661103112360
java -cp script/workingdir/dynamoth/Math_82/target/classes:script/workingdir/dynamoth/Math_82/target/test-classes:script/workingdir/dynamoth/Math_82/target/classes:script/workingdir/dynamoth/Math_82/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/../tools/nopol.jar:/experiment_home/jdk1.8.0_45/bin/../lib/tools.jar: fr.inria.lille.repair.MethodTestRunner org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272 org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288 org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel org.apache.commons.math.optimization.linear.SimplexSolverTest#testInfeasibleSolution 
[96306] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272 iteration 0
[96351] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272 iteration 1
[96372] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272 iteration 2
[96392] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272 iteration 3
[96417] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 0
[96438] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 1
[96461] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 2
[96482] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 3
[96502] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 4
[96523] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 5
[96543] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 6
[96561] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 7
[96581] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 8
[96599] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 9
[96616] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 10
[96633] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 11
[96655] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 12
[96674] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 13
[96695] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative iteration 14
[96715] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288 iteration 0
[96730] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288 iteration 1
[96745] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288 iteration 2
[96760] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288 iteration 3
[96778] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288 iteration 4
[96792] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288 iteration 5
[96824] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel iteration 0
[96849] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel iteration 1
[96860] ERROR DynamothDataCollector - Unable to invoke the method org.apache.commons.math.optimization.linear.SimplexSolver.doOptimize() []
com.sun.jdi.InvocationException: Exception occurred in target VM
	at com.sun.tools.jdi.ObjectReferenceImpl.invokeMethod(ObjectReferenceImpl.java:434)
	at fr.inria.lille.repair.synthesis.collect.DynamothDataCollector$2.call(DynamothDataCollector.java:436)
	at fr.inria.lille.repair.synthesis.collect.DynamothDataCollector$2.call(DynamothDataCollector.java:1)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[96872] INFO DynamothCodeGenesisImpl - [test] org.apache.commons.math.optimization.linear.SimplexSolverTest#testInfeasibleSolution iteration 0
[96880] ERROR DynamothDataCollector - Unable to invoke the method org.apache.commons.math.optimization.linear.SimplexSolver.doOptimize() []
com.sun.jdi.InvocationException: Exception occurred in target VM
	at com.sun.tools.jdi.ObjectReferenceImpl.invokeMethod(ObjectReferenceImpl.java:434)
	at fr.inria.lille.repair.synthesis.collect.DynamothDataCollector$2.call(DynamothDataCollector.java:436)
	at fr.inria.lille.repair.synthesis.collect.DynamothDataCollector$2.call(DynamothDataCollector.java:1)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)


========= Info ==========
Nb constants             12
Nb method invocations    4
Nb field access          4
Nb variables             9
Total                    29
Nb evaluated expressions 7208956
Init Execution time      598 ms
Collect Execution time   593 ms
Combine Execution time   32632.0 ms
Nb Combination par sec   220917 combinations/sec
Total Execution time     33823 ms
Nb line execution        28
Nb results               300

Results:
1. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 <= ratio)
2. (1 <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
3. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS <= ratio)
4. (this.DEFAULT_MAX_ITERATIONS <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
5. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col <= ratio)
6. (col <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
7. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i <= ratio)
8. (i <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
9. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry <= ratio)
10. (entry <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
11. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() <= ratio)
12. (tableau.getNumVariables() <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
13. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 < ratio)
14. (1 < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
15. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS < ratio)
16. (this.DEFAULT_MAX_ITERATIONS < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
17. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col < ratio)
18. (col < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
19. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i < ratio)
20. (i < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
21. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry < ratio)
22. (entry < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
23. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() < ratio)
24. (tableau.getNumVariables() < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
25. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this)) || (1 <= ratio)
26. (1 <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this))
27. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this)) || (this.DEFAULT_MAX_ITERATIONS <= ratio)
28. (this.DEFAULT_MAX_ITERATIONS <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this))
29. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this)) || (col <= ratio)
30. (col <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this))
31. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this)) || (i <= ratio)
32. (i <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this))
33. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this)) || (entry <= ratio)
34. (entry <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this))
35. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this)) || (tableau.getNumVariables() <= ratio)
36. (tableau.getNumVariables() <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this))
37. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this)) || (1 < ratio)
38. (1 < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this))
39. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this)) || (this.DEFAULT_MAX_ITERATIONS < ratio)
40. (this.DEFAULT_MAX_ITERATIONS < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this))
41. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this)) || (col < ratio)
42. (col < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this))
43. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this)) || (i < ratio)
44. (i < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this))
45. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this)) || (entry < ratio)
46. (entry < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this))
47. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this)) || (tableau.getNumVariables() < ratio)
48. (tableau.getNumVariables() < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this))
49. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f)) || (1 <= ratio)
50. (1 <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f))
51. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f)) || (this.DEFAULT_MAX_ITERATIONS <= ratio)
52. (this.DEFAULT_MAX_ITERATIONS <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f))
53. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f)) || (col <= ratio)
54. (col <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f))
55. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f)) || (i <= ratio)
56. (i <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f))
57. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f)) || (entry <= ratio)
58. (entry <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f))
59. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f)) || (tableau.getNumVariables() <= ratio)
60. (tableau.getNumVariables() <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f))
61. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f)) || (1 < ratio)
62. (1 < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f))
63. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f)) || (this.DEFAULT_MAX_ITERATIONS < ratio)
64. (this.DEFAULT_MAX_ITERATIONS < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f))
65. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f)) || (col < ratio)
66. (col < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f))
67. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f)) || (i < ratio)
68. (i < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f))
69. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f)) || (entry < ratio)
70. (entry < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f))
71. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f)) || (tableau.getNumVariables() < ratio)
72. (tableau.getNumVariables() < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.f))
73. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints)) || (1 <= ratio)
74. (1 <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints))
75. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints)) || (this.DEFAULT_MAX_ITERATIONS <= ratio)
76. (this.DEFAULT_MAX_ITERATIONS <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints))
77. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints)) || (col <= ratio)
78. (col <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints))
79. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints)) || (i <= ratio)
80. (i <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints))
81. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints)) || (entry <= ratio)
82. (entry <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints))
83. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints)) || (tableau.getNumVariables() <= ratio)
84. (tableau.getNumVariables() <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints))
85. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints)) || (1 < ratio)
86. (1 < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints))
87. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints)) || (this.DEFAULT_MAX_ITERATIONS < ratio)
88. (this.DEFAULT_MAX_ITERATIONS < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints))
89. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints)) || (col < ratio)
90. (col < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints))
91. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints)) || (i < ratio)
92. (i < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints))
93. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints)) || (entry < ratio)
94. (entry < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints))
95. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints)) || (tableau.getNumVariables() < ratio)
96. (tableau.getNumVariables() < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.constraints))
97. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType)) || (1 <= ratio)
98. (1 <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType))
99. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType)) || (this.DEFAULT_MAX_ITERATIONS <= ratio)
100. (this.DEFAULT_MAX_ITERATIONS <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType))
101. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType)) || (col <= ratio)
102. (col <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType))
103. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType)) || (i <= ratio)
104. (i <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType))
105. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType)) || (entry <= ratio)
106. (entry <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType))
107. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType)) || (tableau.getNumVariables() <= ratio)
108. (tableau.getNumVariables() <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType))
109. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType)) || (1 < ratio)
110. (1 < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType))
111. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType)) || (this.DEFAULT_MAX_ITERATIONS < ratio)
112. (this.DEFAULT_MAX_ITERATIONS < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType))
113. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType)) || (col < ratio)
114. (col < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType))
115. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType)) || (i < ratio)
116. (i < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType))
117. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType)) || (entry < ratio)
118. (entry < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType))
119. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType)) || (tableau.getNumVariables() < ratio)
120. (tableau.getNumVariables() < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == tableau.equals((java.lang.Object) this.goalType))
121. (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 <= ratio)
122. (1 <= ratio) || (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
123. (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS <= ratio)
124. (this.DEFAULT_MAX_ITERATIONS <= ratio) || (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
125. (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col <= ratio)
126. (col <= ratio) || (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
127. (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i <= ratio)
128. (i <= ratio) || (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
129. (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry <= ratio)
130. (entry <= ratio) || (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
131. (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() <= ratio)
132. (tableau.getNumVariables() <= ratio) || (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
133. (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 < ratio)
134. (1 < ratio) || (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
135. (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS < ratio)
136. (this.DEFAULT_MAX_ITERATIONS < ratio) || (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
137. (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col < ratio)
138. (col < ratio) || (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
139. (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i < ratio)
140. (i < ratio) || (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
141. (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry < ratio)
142. (entry < ratio) || (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
143. (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() < ratio)
144. (tableau.getNumVariables() < ratio) || (this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
145. (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 <= ratio)
146. (1 <= ratio) || (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
147. (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS <= ratio)
148. (this.DEFAULT_MAX_ITERATIONS <= ratio) || (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
149. (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col <= ratio)
150. (col <= ratio) || (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
151. (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i <= ratio)
152. (i <= ratio) || (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
153. (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry <= ratio)
154. (entry <= ratio) || (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
155. (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() <= ratio)
156. (tableau.getNumVariables() <= ratio) || (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
157. (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 < ratio)
158. (1 < ratio) || (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
159. (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS < ratio)
160. (this.DEFAULT_MAX_ITERATIONS < ratio) || (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
161. (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col < ratio)
162. (col < ratio) || (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
163. (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i < ratio)
164. (i < ratio) || (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
165. (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry < ratio)
166. (entry < ratio) || (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
167. (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() < ratio)
168. (tableau.getNumVariables() < ratio) || (tableau.equals((java.lang.Object) this) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
169. (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 <= ratio)
170. (1 <= ratio) || (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
171. (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS <= ratio)
172. (this.DEFAULT_MAX_ITERATIONS <= ratio) || (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
173. (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col <= ratio)
174. (col <= ratio) || (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
175. (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i <= ratio)
176. (i <= ratio) || (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
177. (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry <= ratio)
178. (entry <= ratio) || (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
179. (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() <= ratio)
180. (tableau.getNumVariables() <= ratio) || (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
181. (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 < ratio)
182. (1 < ratio) || (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
183. (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS < ratio)
184. (this.DEFAULT_MAX_ITERATIONS < ratio) || (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
185. (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col < ratio)
186. (col < ratio) || (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
187. (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i < ratio)
188. (i < ratio) || (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
189. (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry < ratio)
190. (entry < ratio) || (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
191. (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() < ratio)
192. (tableau.getNumVariables() < ratio) || (tableau.equals((java.lang.Object) this.f) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
193. (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 <= ratio)
194. (1 <= ratio) || (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
195. (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS <= ratio)
196. (this.DEFAULT_MAX_ITERATIONS <= ratio) || (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
197. (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col <= ratio)
198. (col <= ratio) || (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
199. (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i <= ratio)
200. (i <= ratio) || (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
201. (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry <= ratio)
202. (entry <= ratio) || (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
203. (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() <= ratio)
204. (tableau.getNumVariables() <= ratio) || (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
205. (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 < ratio)
206. (1 < ratio) || (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
207. (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS < ratio)
208. (this.DEFAULT_MAX_ITERATIONS < ratio) || (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
209. (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col < ratio)
210. (col < ratio) || (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
211. (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i < ratio)
212. (i < ratio) || (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
213. (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry < ratio)
214. (entry < ratio) || (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
215. (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() < ratio)
216. (tableau.getNumVariables() < ratio) || (tableau.equals((java.lang.Object) this.constraints) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
217. (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 <= ratio)
218. (1 <= ratio) || (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
219. (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS <= ratio)
220. (this.DEFAULT_MAX_ITERATIONS <= ratio) || (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
221. (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col <= ratio)
222. (col <= ratio) || (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
223. (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i <= ratio)
224. (i <= ratio) || (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
225. (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry <= ratio)
226. (entry <= ratio) || (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
227. (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() <= ratio)
228. (tableau.getNumVariables() <= ratio) || (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
229. (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 < ratio)
230. (1 < ratio) || (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
231. (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS < ratio)
232. (this.DEFAULT_MAX_ITERATIONS < ratio) || (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
233. (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col < ratio)
234. (col < ratio) || (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
235. (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i < ratio)
236. (i < ratio) || (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
237. (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry < ratio)
238. (entry < ratio) || (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
239. (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() < ratio)
240. (tableau.getNumVariables() < ratio) || (tableau.equals((java.lang.Object) this.goalType) == this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
241. (this.restrictToNonNegative != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 <= ratio)
242. (1 <= ratio) || (this.restrictToNonNegative != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
243. (this.restrictToNonNegative != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry <= ratio)
244. (entry <= ratio) || (this.restrictToNonNegative != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
245. (this.restrictToNonNegative != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() <= ratio)
246. (tableau.getNumVariables() <= ratio) || (this.restrictToNonNegative != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
247. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != this.restrictToNonNegative) || (1 <= ratio)
248. (1 <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != this.restrictToNonNegative)
249. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != this.restrictToNonNegative) || (entry <= ratio)
250. (entry <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != this.restrictToNonNegative)
251. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != this.restrictToNonNegative) || (tableau.getNumVariables() <= ratio)
252. (tableau.getNumVariables() <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != this.restrictToNonNegative)
253. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau)) || (1 <= ratio)
254. (1 <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau))
255. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau)) || (this.DEFAULT_MAX_ITERATIONS <= ratio)
256. (this.DEFAULT_MAX_ITERATIONS <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau))
257. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau)) || (col <= ratio)
258. (col <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau))
259. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau)) || (i <= ratio)
260. (i <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau))
261. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau)) || (entry <= ratio)
262. (entry <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau))
263. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau)) || (tableau.getNumVariables() <= ratio)
264. (tableau.getNumVariables() <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau))
265. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau)) || (1 < ratio)
266. (1 < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau))
267. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau)) || (this.DEFAULT_MAX_ITERATIONS < ratio)
268. (this.DEFAULT_MAX_ITERATIONS < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau))
269. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau)) || (col < ratio)
270. (col < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau))
271. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau)) || (i < ratio)
272. (i < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau))
273. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau)) || (entry < ratio)
274. (entry < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau))
275. (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau)) || (tableau.getNumVariables() < ratio)
276. (tableau.getNumVariables() < ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) != tableau.equals((java.lang.Object) tableau))
277. (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 <= ratio)
278. (1 <= ratio) || (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
279. (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS <= ratio)
280. (this.DEFAULT_MAX_ITERATIONS <= ratio) || (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
281. (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col <= ratio)
282. (col <= ratio) || (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
283. (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i <= ratio)
284. (i <= ratio) || (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
285. (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry <= ratio)
286. (entry <= ratio) || (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
287. (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() <= ratio)
288. (tableau.getNumVariables() <= ratio) || (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
289. (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 < ratio)
290. (1 < ratio) || (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
291. (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS < ratio)
292. (this.DEFAULT_MAX_ITERATIONS < ratio) || (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
293. (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col < ratio)
294. (col < ratio) || (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
295. (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i < ratio)
296. (i < ratio) || (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
297. (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry < ratio)
298. (entry < ratio) || (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
299. (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (tableau.getNumVariables() < ratio)
300. (tableau.getNumVariables() < ratio) || (tableau.equals((java.lang.Object) tableau) != this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))


========================
         Stat
========================
Operators: 
LT 2
MINUS 1
DIV 1
GE 1
Methods: 
getEntry(int,int) 2
getHeight() 1
getNumObjectiveFunctions() 1
getWidth() 1
compareTo(double,double,double) 1
Variable: 
tableau 5
i 5
entry 2
epsilon 2
ratio 2
java.lang.Double.MAX_VALUE 2
minRatioPos 2
minRatio 2
col 1
rhs 1

 & 12 & 4 & 4 & 9 & 29 & 7208956 & 33826 ms & 28 &
GPR[EPS]-1661103146358
GPR[SPVATR]-1661103146358
[129524] INFO TestPatch - Applying patch: org.apache.commons.math.optimization.linear.SimplexSolver:85: PRECONDITION (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 <= ratio)
[129689] INFO TestPatch - Running test suite to check the patch "(this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (1 <= ratio)" is working
[129829] INFO TestPatch - Failing tests [testEpsilon(org.apache.commons.math.optimization.linear.SimplexSolverTest): expected:<1.0> but was:<1.0000000000000002>]
GPR[EPVATR]-1661103146664
GPR[SPVATR]-1661103146664
[129829] INFO TestPatch - Applying patch: org.apache.commons.math.optimization.linear.SimplexSolver:85: PRECONDITION (1 <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
[129955] INFO TestPatch - Running test suite to check the patch "(1 <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))" is working
[129998] INFO TestPatch - Failing tests [testEpsilon(org.apache.commons.math.optimization.linear.SimplexSolverTest): expected:<1.0> but was:<1.0000000000000002>]
GPR[EPVATR]-1661103146834
GPR[SPVATR]-1661103146834
[129999] INFO TestPatch - Applying patch: org.apache.commons.math.optimization.linear.SimplexSolver:85: PRECONDITION (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS <= ratio)
[130117] INFO TestPatch - Running test suite to check the patch "(this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (this.DEFAULT_MAX_ITERATIONS <= ratio)" is working
[130158] INFO TestPatch - Failing tests [testEpsilon(org.apache.commons.math.optimization.linear.SimplexSolverTest): expected:<1.0> but was:<1.0000000000000002>]
GPR[EPVATR]-1661103146993
GPR[SPVATR]-1661103146993
[130158] INFO TestPatch - Applying patch: org.apache.commons.math.optimization.linear.SimplexSolver:85: PRECONDITION (this.DEFAULT_MAX_ITERATIONS <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
[130276] INFO TestPatch - Running test suite to check the patch "(this.DEFAULT_MAX_ITERATIONS <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))" is working
[130372] INFO TestPatch - Failing tests [testEpsilon(org.apache.commons.math.optimization.linear.SimplexSolverTest): expected:<1.0> but was:<1.0000000000000002>]
GPR[EPVATR]-1661103147207
GPR[SPVATR]-1661103147207
[130372] INFO TestPatch - Applying patch: org.apache.commons.math.optimization.linear.SimplexSolver:85: PRECONDITION (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col <= ratio)
[130490] INFO TestPatch - Running test suite to check the patch "(this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (col <= ratio)" is working
[130528] INFO TestPatch - Failing tests [testEpsilon(org.apache.commons.math.optimization.linear.SimplexSolverTest): expected:<1.0> but was:<1.0000000000000002>]
GPR[EPVATR]-1661103147363
GPR[SPVATR]-1661103147363
[130528] INFO TestPatch - Applying patch: org.apache.commons.math.optimization.linear.SimplexSolver:85: PRECONDITION (col <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
[130640] INFO TestPatch - Running test suite to check the patch "(col <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))" is working
[130680] INFO TestPatch - Failing tests [testEpsilon(org.apache.commons.math.optimization.linear.SimplexSolverTest): expected:<1.0> but was:<1.0000000000000002>]
GPR[EPVATR]-1661103147515
GPR[SPVATR]-1661103147515
[130680] INFO TestPatch - Applying patch: org.apache.commons.math.optimization.linear.SimplexSolver:85: PRECONDITION (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i <= ratio)
[130793] INFO TestPatch - Running test suite to check the patch "(this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (i <= ratio)" is working
[130831] INFO TestPatch - Failing tests [testEpsilon(org.apache.commons.math.optimization.linear.SimplexSolverTest): expected:<1.0> but was:<1.0000000000000002>]
GPR[EPVATR]-1661103147666
GPR[SPVATR]-1661103147666
[130831] INFO TestPatch - Applying patch: org.apache.commons.math.optimization.linear.SimplexSolver:85: PRECONDITION (i <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
[130943] INFO TestPatch - Running test suite to check the patch "(i <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))" is working
[130986] INFO TestPatch - Failing tests [testEpsilon(org.apache.commons.math.optimization.linear.SimplexSolverTest): expected:<1.0> but was:<1.0000000000000002>]
GPR[EPVATR]-1661103147821
GPR[SPVATR]-1661103147821
[130986] INFO TestPatch - Applying patch: org.apache.commons.math.optimization.linear.SimplexSolver:85: PRECONDITION (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry <= ratio)
[131101] INFO TestPatch - Running test suite to check the patch "(this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau)) || (entry <= ratio)" is working
[131140] INFO TestPatch - Failing tests [testEpsilon(org.apache.commons.math.optimization.linear.SimplexSolverTest): expected:<1.0> but was:<1.0000000000000002>]
GPR[EPVATR]-1661103147975
GPR[SPVATR]-1661103147975
[131140] INFO TestPatch - Applying patch: org.apache.commons.math.optimization.linear.SimplexSolver:85: PRECONDITION (entry <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))
[131318] INFO TestPatch - Running test suite to check the patch "(entry <= ratio) || (this.isPhase1Solved((org.apache.commons.math.optimization.linear.SimplexTableau) tableau) == this.isOptimal((org.apache.commons.math.optimization.linear.SimplexTableau) tableau))" is working
[131358] INFO TestPatch - Failing tests [testEpsilon(org.apache.commons.math.optimization.linear.SimplexSolverTest): expected:<1.0> but was:<1.0000000000000002>]
GPR[EPVATR]-1661103148193
GPR[ESUN]-1661103148193
GPR[SSUN]-1661103148193
-1435753318
GPR[SPVATF]-1661103148287
GPR[EPVATF]-1661103148320
GPR[SPS]-1661103148320
GPR[EPS]-1661103148446
GPR[SPVATF]-1661103148447
GPR[EPVATF]-1661103148482
GPR[SPS]-1661103148482
GPR[EPS]-1661103148607
GPR[ESUN]-1661103148607
GPR[SSUN]-1661103148607
-1435753318
GPR[ESUN]-1661103148704
GPR[SSUN]-1661103148704
-1435753318
GPR[SPVATF]-1661103148798
GPR[EPVATF]-1661103148832
GPR[SPS]-1661103148832
GPR[EPS]-1661103148960
GPR[SPVATF]-1661103148961
GPR[EPVATF]-1661103148995
GPR[SPS]-1661103148995
GPR[EPS]-1661103149127
GPR[ESUN]-1661103149127
GPR[SSUN]-1661103149127
-1435753318
GPR[ESUN]-1661103149223
GPR[SSUN]-1661103149223
-1435753318
GPR[ESUN]-1661103149317
GPR[SSUN]-1661103149317
-1435753318
GPR[SPVATF]-1661103149409
GPR[EPVATF]-1661103149442
GPR[SPS]-1661103149442
GPR[EPS]-1661103149567
GPR[ESUN]-1661103149567
GPR[SSUN]-1661103149567
-1435753318
GPR[ESUN]-1661103149660
GPR[SSUN]-1661103149660
-1435753318
GPR[ESUN]-1661103149753
GPR[SSUN]-1661103149753
-1435753318
GPR[ESUN]-1661103149846
GPR[SSUN]-1661103149846
-1435753318
GPR[SPVATF]-1661103149939
GPR[EPVATF]-1661103149973
GPR[SPS]-1661103149973
GPR[EPS]-1661103150097
GPR[ESUN]-1661103150097
GPR[SSUN]-1661103150098
-1435753318
GPR[SPVATF]-1661103150196
GPR[EPVATF]-1661103150229
GPR[SPS]-1661103150229
GPR[EPS]-1661103150463
GPR[SPVATR]-1661103150463
[133628] INFO TestPatch - Applying patch: org.apache.commons.math.optimization.linear.SimplexSolver:63: PRECONDITION false
[133744] INFO TestPatch - Running test suite to check the patch "false" is working
GPR[EPVATR]-1661103150617
[133782] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1661103150617
[133789] INFO NoPol - --- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -62,3 +62,5 @@
             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
-                minValue = tableau.getEntry(0, i);
+                if (false) {
+                    minValue = tableau.getEntry(0, i);
+                }
                 minPos = i;

Saving patch at /experiment_home///results/dynamoth/Math/82/seed_214/patch_131096_1ts_1661103150624.diff
GPR[ESUN]-1661103150624
GPR[SSUN]-1661103150624
-1435753318
GPR[SPVATF]-1661103150722
GPR[EPVATF]-1661103150756
GPR[SPS]-1661103150756
GPR[EPS]-1661103150887
GPR[SPVATF]-1661103150887
GPR[EPVATF]-1661103150921
GPR[SPS]-1661103150921
GPR[EPS]-1661103151052
GPR[ESUN]-1661103151053
GPR[SSUN]-1661103151053
-1435753318
GPR[SPVATF]-1661103151154
GPR[EPVATF]-1661103151187
GPR[SPS]-1661103151187
GPR[EPS]-1661103151310
GPR[ESUN]-1661103151310
GPR[SSUN]-1661103151310
-1435753318
GPR[ESUN]-1661103151405
GPR[SSUN]-1661103151405
-1435753318
GPR[ESUN]-1661103151496
GPR[SSUN]-1661103151496
1542580975
GPR[ESUN]-1661103151586
GPR[SSUN]-1661103151586
1542580975
GPR[SPVATF]-1661103151676
GPR[EPVATF]-1661103151712
GPR[SPS]-1661103151712
GPR[EPS]-1661103151830
GPR[ESUN]-1661103151830
GPR[SSUN]-1661103151830
1542580975
GPR[SPVATF]-1661103151924
GPR[EPVATF]-1661103151957
GPR[SPS]-1661103151957
GPR[EPS]-1661103152081
GPR[ESUN]-1661103152081
GPR[SSUN]-1661103152081
1542580975
GPR[SPVATF]-1661103152175
GPR[EPVATF]-1661103152208
GPR[SPS]-1661103152208
GPR[EPS]-1661103152326
GPR[ESUN]-1661103152326
GPR[SSUN]-1661103152326
1542580975
GPR[SPVATF]-1661103152418
GPR[EPVATF]-1661103152450
GPR[SPS]-1661103152450
GPR[EPS]-1661103152570
GPR[ESUN]-1661103152570
GPR[SSUN]-1661103152570
1542580975
GPR[SPVATF]-1661103152662
GPR[EPVATF]-1661103152695
GPR[SPS]-1661103152695
GPR[EPS]-1661103152817
GPR[ESUN]-1661103152817
GPR[SSUN]-1661103152817
1542580975
GPR[ESUN]-1661103152911
GPR[SSUN]-1661103152911
1542580975
GPR[SPVATF]-1661103153069
GPR[EPVATF]-1661103153103
GPR[SPS]-1661103153103
GPR[EPS]-1661103153222
GPR[SPVATF]-1661103153222
GPR[EPVATF]-1661103153255
GPR[SPS]-1661103153255
GPR[EPS]-1661103153392
GPR[ESUN]-1661103153392
GPR[SSUN]-1661103153392
1542580975
GPR[ESUN]-1661103153484
GPR[SSUN]-1661103153484
1542580975
GPR[SPVATF]-1661103153575
GPR[EPVATF]-1661103153608
GPR[SPS]-1661103153608
GPR[EPS]-1661103153725
GPR[ESUN]-1661103153725
GPR[SSUN]-1661103153725
-1081517891
GPR[ESUN]-1661103153843
GPR[SSUN]-1661103153843
-1550426518
GPR[ESUN]-1661103153965
GPR[SSUN]-1661103153965
-1550426518
GPR[SPVATF]-1661103154085
GPR[EPVATF]-1661103154119
GPR[SPS]-1661103154119
GPR[EPS]-1661103154294
GPR[ESUN]-1661103154294
GPR[SSUN]-1661103154294
-1550426518
GPR[SPVATF]-1661103154414
GPR[EPVATF]-1661103154447
GPR[SPS]-1661103154448
GPR[EPS]-1661103154615
GPR[SPVATF]-1661103154616
GPR[EPVATF]-1661103154651
GPR[SPS]-1661103154651
GPR[EPS]-1661103154813
GPR[ESUN]-1661103154813
GPR[SSUN]-1661103154813
-1550426518
GPR[SPVATF]-1661103154935
GPR[EPVATF]-1661103154969
GPR[SPS]-1661103154969
GPR[EPS]-1661103155130
GPR[ESUN]-1661103155130
GPR[SSUN]-1661103155130
-1550426518
GPR[SPVATF]-1661103155248
GPR[EPVATF]-1661103155282
GPR[SPS]-1661103155282
GPR[EPS]-1661103155506
GPR[SPVATF]-1661103155507
GPR[EPVATF]-1661103155543
GPR[SPS]-1661103155543
GPR[EPS]-1661103155704
GPR[ESUN]-1661103155704
GPR[SSUN]-1661103155704
-1081517891
GPR[ESUN]-1661103155827
GPR[SSUN]-1661103155827
-1081517891
GPR[SPVATF]-1661103155945
GPR[EPVATF]-1661103155979
GPR[SPS]-1661103155979
GPR[EPS]-1661103156140
GPR[SPVATF]-1661103156141
GPR[EPVATF]-1661103156175
GPR[SPS]-1661103156175
GPR[EPS]-1661103156341
GPR[ESUN]-1661103156341
GPR[SSUN]-1661103156341
-357391461
GPR[ESUN]-1661103156501
GPR[SSUN]-1661103156501
-357391461
GPR[SPVATF]-1661103156622
GPR[EPVATF]-1661103156656
GPR[SPS]-1661103156656
GPR[EPS]-1661103156843
GPR[ESUN]-1661103156843
GPR[SSUN]-1661103156843
-357391461
GPR[SPVATF]-1661103156965
GPR[EPVATF]-1661103156998
GPR[SPS]-1661103156998
GPR[EPS]-1661103157173
GPR[ESUN]-1661103157173
GPR[SSUN]-1661103157173
-357391461
GPR[ESUN]-1661103157291
GPR[SSUN]-1661103157291
-357391461
GPR[SPVATF]-1661103157410
GPR[EPVATF]-1661103157444
GPR[SPS]-1661103157444
GPR[EPS]-1661103157616
GPR[ESUN]-1661103157616
GPR[SSUN]-1661103157616
-1081517891
GPR[ESUN]-1661103157742
GPR[SSUN]-1661103157742
-1081517891
GPR[ESUN]-1661103157863
GPR[SSUN]-1661103157863
-1081517891
GPR[ESUN]-1661103158043
GPR[SSUN]-1661103158043
-1081517891
GPR[ESUN]-1661103158169
GPR[SSUN]-1661103158169
-1081517891
GPR[SPVATF]-1661103158286
GPR[EPVATF]-1661103158321
GPR[SPS]-1661103158321
GPR[EPS]-1661103158486
GPR[ESUN]-1661103158486
GPR[SSUN]-1661103158486
-1081517891
GPR[SPVATF]-1661103158605
GPR[EPVATF]-1661103158640
GPR[SPS]-1661103158640
GPR[EPS]-1661103158803
GPR[ESUN]-1661103158803
GPR[SSUN]-1661103158803
-1081517891
GPR[ESUN]-1661103158919
GPR[SSUN]-1661103158919
-1081517891
GPR[SPVATF]-1661103159035
GPR[EPVATF]-1661103159069
GPR[SPS]-1661103159069
GPR[EPS]-1661103159229
GPR[ESUN]-1661103159229
GPR[SSUN]-1661103159229
-1081517891
GPR[SPVATF]-1661103159345
GPR[EPVATF]-1661103159379
GPR[SPS]-1661103159379
GPR[EPS]-1661103159542
GPR[SPVATF]-1661103159542
GPR[EPVATF]-1661103159578
GPR[SPS]-1661103159578
GPR[EPS]-1661103159739
GPR[ESUN]-1661103159739
GPR[SSUN]-1661103159739
-1081517891
GPR[SPVATF]-1661103159857
GPR[EPVATF]-1661103159892
GPR[SPS]-1661103159892
GPR[EPS]-1661103160054
GPR[ESUN]-1661103160054
GPR[SSUN]-1661103160054
-1081517891
GPR[ESUN]-1661103160170
GPR[SSUN]-1661103160170
-1081517891
GPR[ESUN]-1661103160282
GPR[SSUN]-1661103160282
-357391461
GPR[ESUN]-1661103160396
GPR[SSUN]-1661103160396
-357391461
GPR[SPVATF]-1661103160510
GPR[EPVATF]-1661103160609
GPR[SPS]-1661103160609
GPR[EPS]-1661103160786
GPR[ESUN]-1661103160786
GPR[SSUN]-1661103160786
-357391461
GPR[SPVATF]-1661103160935
GPR[EPVATF]-1661103160969
GPR[SPS]-1661103160970
GPR[EPS]-1661103161143
GPR[ESUN]-1661103161143
GPR[SSUN]-1661103161143
-357391461
GPR[ESUN]-1661103161261
GPR[SSUN]-1661103161261
-1662330109
GPR[ESUN]-1661103161369
GPR[SSUN]-1661103161369
-1662330109
GPR[ESUN]-1661103161476
GPR[SSUN]-1661103161476
-1662330109
GPR[ESUN]-1661103161581
GPR[SSUN]-1661103161581
1078222701
GPR[ESUN]-1661103161690
GPR[SSUN]-1661103161690
1078222701
GPR[ESUN]-1661103161796
GPR[SSUN]-1661103161796
-1081517891
GPR[ESUN]-1661103161911
GPR[SSUN]-1661103161911
-1081517891
GPR[SPVATF]-1661103162026
GPR[EPVATF]-1661103162060
GPR[SPS]-1661103162060
GPR[EPS]-1661103162218
GPR[ESUN]-1661103162218
GPR[SSUN]-1661103162218
-1081517891
GPR[ESUN]-1661103162331
GPR[SSUN]-1661103162331
-1081517891
GPR[SPVATF]-1661103162453
GPR[EPVATF]-1661103162488
GPR[SPS]-1661103162488
GPR[EPS]-1661103162647
GPR[ESUN]-1661103162647
GPR[SSUN]-1661103162647
-1081517891
GPR[ESUN]-1661103162761
GPR[SSUN]-1661103162761
-1081517891
GPR[ESUN]-1661103162877
GPR[SSUN]-1661103162877
-1081517891
GPR[SPVATF]-1661103162993
GPR[EPVATF]-1661103163028
GPR[SPS]-1661103163028
GPR[EPS]-1661103163258
GPR[ESUN]-1661103163258
GPR[SSUN]-1661103163258
-1081517891
GPR[SPVATF]-1661103163385
GPR[EPVATF]-1661103163420
GPR[SPS]-1661103163420
GPR[EPS]-1661103163585
GPR[SPVATF]-1661103163585
GPR[EPVATF]-1661103163620
GPR[SPS]-1661103163620
GPR[EPS]-1661103163782
GPR[ESUN]-1661103163782
GPR[SSUN]-1661103163782
-1081517891
GPR[SPVATF]-1661103163898
GPR[EPVATF]-1661103163933
GPR[SPS]-1661103163933
GPR[EPS]-1661103164092
GPR[ESUN]-1661103164092
GPR[SSUN]-1661103164092
-1081517891
GPR[ESUN]-1661103164208
GPR[SSUN]-1661103164209
-1081517891
GPR[ESUN]-1661103164326
GPR[SSUN]-1661103164326
-1081517891
GPR[ESUN]-1661103164440
GPR[SSUN]-1661103164440
-1081517891
GPR[SPVATF]-1661103164555
GPR[EPVATF]-1661103164590
GPR[SPS]-1661103164590
GPR[EPS]-1661103164746
GPR[SPVATF]-1661103164746
GPR[EPVATF]-1661103164781
GPR[SPS]-1661103164781
GPR[EPS]-1661103164939
GPR[ESUN]-1661103164939
GPR[SSUN]-1661103164939
-1081517891
GPR[ESUN]-1661103165055
GPR[SSUN]-1661103165055
-1081517891
GPR[ESUN]-1661103165170
GPR[SSUN]-1661103165170
-1081517891
GPR[SPVATF]-1661103165283
GPR[EPVATF]-1661103165317
GPR[SPS]-1661103165317
GPR[EPS]-1661103165707
GPR[ESUN]-1661103165707
GPR[SSUN]-1661103165707
-1081517891
GPR[SPVATF]-1661103165828
GPR[EPVATF]-1661103165862
GPR[SPS]-1661103165862
GPR[EPS]-1661103166021
GPR[ESUN]-1661103166021
GPR[SSUN]-1661103166021
-1081517891
GPR[ESUN]-1661103166140
GPR[SSUN]-1661103166140
-1081517891
GPR[ESUN]-1661103166254
GPR[SSUN]-1661103166254
-1081517891
GPR[ESUN]-1661103166369
GPR[SSUN]-1661103166369
-1081517891
GPR[SPVATF]-1661103166488
GPR[EPVATF]-1661103166522
GPR[SPS]-1661103166522
GPR[EPS]-1661103166685
GPR[SPVATF]-1661103166686
GPR[EPVATF]-1661103166719
GPR[SPS]-1661103166719
GPR[EPS]-1661103166876
GPR[ESUN]-1661103166876
GPR[SSUN]-1661103166876
-1081517891
GPR[SPVATF]-1661103166992
GPR[EPVATF]-1661103167027
GPR[SPS]-1661103167027
GPR[EPS]-1661103167186
GPR[SPVATF]-1661103167187
GPR[EPVATF]-1661103167220
GPR[SPS]-1661103167220
GPR[EPS]-1661103167374
GPR[ESUN]-1661103167374
GPR[SSUN]-1661103167374
-1081517891
GPR[SPVATF]-1661103167494
GPR[EPVATF]-1661103167528
GPR[SPS]-1661103167528
GPR[EPS]-1661103167692
GPR[ESUN]-1661103167692
GPR[SSUN]-1661103167692
-1081517891
GPR[SPVATF]-1661103167810
GPR[EPVATF]-1661103167843
GPR[SPS]-1661103167843
GPR[EPS]-1661103168001
GPR[SPVATF]-1661103168001
GPR[EPVATF]-1661103168037
GPR[SPS]-1661103168037
GPR[EPS]-1661103168199
GPR[ESUN]-1661103168199
GPR[SSUN]-1661103168199
-1081517891
GPR[SPVATF]-1661103168326
GPR[EPVATF]-1661103168360
GPR[SPS]-1661103168360
GPR[EPS]-1661103168513
GPR[ESUN]-1661103168513
GPR[SSUN]-1661103168513
-1081517891
GPR[ESUN]-1661103168628
GPR[SSUN]-1661103168628
-1081517891
GPR[ESUN]-1661103168745
GPR[SSUN]-1661103168745
-1081517891
GPR[SPVATF]-1661103168864
GPR[EPVATF]-1661103168897
GPR[SPS]-1661103168897
GPR[EPS]-1661103169058
GPR[ESUN]-1661103169058
GPR[SSUN]-1661103169058
-1081517891
GPR[ESUN]-1661103169176
GPR[SSUN]-1661103169176
-1081517891
GPR[ESUN]-1661103169295
GPR[SSUN]-1661103169295
-1081517891
GPR[SPVATF]-1661103169415
GPR[EPVATF]-1661103169449
GPR[SPS]-1661103169449
GPR[EPS]-1661103169608
GPR[SPVATF]-1661103169608
GPR[EPVATF]-1661103169642
GPR[SPS]-1661103169642
GPR[EPS]-1661103169799
GPR[ESUN]-1661103169799
GPR[SSUN]-1661103169799
-1081517891
GPR[SPVATF]-1661103169912
GPR[EPVATF]-1661103169947
GPR[SPS]-1661103169947
GPR[EPS]-1661103170107
GPR[ESUN]-1661103170107
GPR[SSUN]-1661103170107
-1081517891
GPR[SPVATF]-1661103170222
GPR[EPVATF]-1661103170256
GPR[SPS]-1661103170256
GPR[EPS]-1661103170410
GPR[ESUN]-1661103170410
GPR[SSUN]-1661103170410
-1081517891
GPR[ESUN]-1661103170523
GPR[SSUN]-1661103170523
-1081517891
GPR[SPVATF]-1661103170633
GPR[EPVATF]-1661103170667
GPR[SPS]-1661103170667
GPR[EPS]-1661103170820
GPR[ESUN]-1661103170821
GPR[SSUN]-1661103170821
-1081517891
GPR[ESUN]-1661103170944
GPR[SSUN]-1661103170944
-1081517891
GPR[SPVATF]-1661103171062
GPR[EPVATF]-1661103171096
GPR[SPS]-1661103171096
GPR[EPS]-1661103171256
GPR[SPVATF]-1661103171256
GPR[EPVATF]-1661103171290
GPR[SPS]-1661103171290
GPR[EPS]-1661103171448
GPR[ESUN]-1661103171448
GPR[SSUN]-1661103171448
-1081517891
GPR[ESUN]-1661103171569
GPR[SSUN]-1661103171569
-1081517891
GPR[ESUN]-1661103171681
GPR[SSUN]-1661103171681
-1081517891
GPR[ESUN]-1661103171796
GPR[SSUN]-1661103171796
-1081517891
GPR[ESUN]-1661103171911
GPR[SSUN]-1661103171911
-1550426518
GPR[ESUN]-1661103172027
GPR[SSUN]-1661103172027
-357391461
GPR[ESUN]-1661103172142
GPR[SSUN]-1661103172142
1206454682
GPR[ESUN]-1661103172230
GPR[SSUN]-1661103172230
-357391461
GPR[ESUN]-1661103172343
GPR[SSUN]-1661103172343
-357391461
GPR[SPVATF]-1661103172456
GPR[EPVATF]-1661103172491
GPR[SPS]-1661103172491
GPR[EPS]-1661103172654
GPR[SPVATF]-1661103172654
GPR[EPVATF]-1661103172689
GPR[SPS]-1661103172689
GPR[EPS]-1661103172854
GPR[ESUN]-1661103172854
GPR[SSUN]-1661103172854
-1550426518
GPR[ESUN]-1661103172970
GPR[SSUN]-1661103172970
-357391461
GPR[ESUN]-1661103173084
GPR[SSUN]-1661103173084
-1875222545
GPR[ESUN]-1661103173182
GPR[SSUN]-1661103173182
-1875222545
GPR[ESUN]-1661103173276
GPR[SSUN]-1661103173276
-1875222545
GPR[ESUN]-1661103173371
GPR[SSUN]-1661103173371
-1875222545
GPR[SPVATF]-1661103173475
GPR[EPVATF]-1661103173510
GPR[SPS]-1661103173510
GPR[EPS]-1661103173650
GPR[ESUN]-1661103173650
GPR[SSUN]-1661103173650
-1875222545
GPR[ESUN]-1661103173748
GPR[SSUN]-1661103173748
-1875222545
GPR[SPVATF]-1661103173844
GPR[EPVATF]-1661103173878
GPR[SPS]-1661103173878
GPR[EPS]-1661103174014
GPR[ESUN]-1661103174014
GPR[SSUN]-1661103174014
-1875222545
GPR[ESUN]-1661103174114
GPR[SSUN]-1661103174114
-1875222545
GPR[ESUN]-1661103174210
GPR[SSUN]-1661103174210
-1875222545
GPR[SPVATF]-1661103174307
GPR[EPVATF]-1661103174340
GPR[SPS]-1661103174340
GPR[EPS]-1661103174471
GPR[ESUN]-1661103174471
GPR[SSUN]-1661103174471
-1875222545
GPR[SPVATF]-1661103174570
GPR[EPVATF]-1661103174604
GPR[SPS]-1661103174604
GPR[EPS]-1661103174739
GPR[SPVATF]-1661103174740
GPR[EPVATF]-1661103174773
GPR[SPS]-1661103174774
GPR[EPS]-1661103174913
GPR[ESUN]-1661103174913
GPR[SSUN]-1661103174914
-1875222545
GPR[SPVATF]-1661103175014
GPR[EPVATF]-1661103175048
GPR[SPS]-1661103175048
GPR[EPS]-1661103175184
GPR[ESUN]-1661103175184
GPR[SSUN]-1661103175184
-1875222545
GPR[SPVATF]-1661103175285
GPR[EPVATF]-1661103175319
GPR[SPS]-1661103175319
GPR[EPS]-1661103175450
GPR[ESUN]-1661103175450
GPR[SSUN]-1661103175450
-1875222545
GPR[SPVATF]-1661103175546
GPR[EPVATF]-1661103175580
GPR[SPS]-1661103175580
GPR[EPS]-1661103175711
GPR[SPVATF]-1661103175711
GPR[EPVATF]-1661103175746
GPR[SPS]-1661103175746
GPR[EPS]-1661103175878
GPR[ESUN]-1661103175878
GPR[SSUN]-1661103175878
-1875222545
GPR[ESUN]-1661103175977
GPR[SSUN]-1661103175977
-1875222545
GPR[SPVATF]-1661103176072
GPR[EPVATF]-1661103176106
GPR[SPS]-1661103176106
GPR[EPS]-1661103176235
GPR[SPVATF]-1661103176235
GPR[EPVATF]-1661103176270
GPR[SPS]-1661103176270
GPR[EPS]-1661103176412
GPR[ESUN]-1661103176412
GPR[SSUN]-1661103176412
-1875222545
GPR[ESUN]-1661103176509
GPR[SSUN]-1661103176509
-1875222545
GPR[SPVATF]-1661103176606
GPR[EPVATF]-1661103176640
GPR[SPS]-1661103176640
GPR[EPS]-1661103176772
GPR[SPVATF]-1661103176772
GPR[EPVATF]-1661103176807
GPR[SPS]-1661103176807
GPR[EPS]-1661103176942
GPR[ESUN]-1661103176942
GPR[SSUN]-1661103176942
-1875222545
GPR[SPVATF]-1661103177043
GPR[EPVATF]-1661103177078
GPR[SPS]-1661103177078
GPR[EPS]-1661103177210
GPR[SPVATF]-1661103177210
GPR[EPVATF]-1661103177246
GPR[SPS]-1661103177246
GPR[EPS]-1661103177388
GPR[ESUN]-1661103177388
GPR[SSUN]-1661103177388
-1875222545
GPR[SPVATF]-1661103177487
GPR[EPVATF]-1661103177520
GPR[SPS]-1661103177520
GPR[EPS]-1661103177656
GPR[SPVATF]-1661103177657
GPR[EPVATF]-1661103177690
GPR[SPS]-1661103177690
GPR[EPS]-1661103177828
GPR[ESUN]-1661103177828
GPR[SSUN]-1661103177828
-1875222545
GPR[ESUN]-1661103177927
GPR[SSUN]-1661103177927
-1875222545
GPR[ESUN]-1661103178026
[161196] INFO NoPol - ----INFORMATION----
[161257] INFO NoPol - Nb classes : 388
[161257] INFO NoPol - Nb methods : 2885
[161257] INFO NoPol - Nb Statements Analyzed : 117
[161257] INFO NoPol - Nb Statements with Angelic Value Found : 2
[161257] INFO NoPol - NoPol Execution time : 161197ms
[161257] INFO NoPol - 
[161257] INFO NoPol - ----PATCH FOUND----
[161257] INFO NoPol - false
[161277] INFO NoPol - Nb test that executes the patch: 14
[161277] INFO NoPol - org.apache.commons.math.optimization.linear.SimplexSolver:63: PRECONDITION
[161279] INFO NoPol - --- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -62,3 +62,5 @@
             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
-                minValue = tableau.getEntry(0, i);
+                if (false) {
+                    minValue = tableau.getEntry(0, i);
+                }
                 minPos = i;

GPR[EFP]-1661103178140
PATCH
\n\nNode: host-69\n
\n\nDate: Sun 21 Aug 2022 10:32:58 AM PDT\n
End running Nopol Math/82 results at /experiment_home///results/dynamoth/Math/82/seed_214/
Removing checked out dir script/workingdir/dynamoth/Math_82
GPR[SSLE]-1661103178716
GPR[ESLE]-1661103238719
