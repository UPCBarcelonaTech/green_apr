Sleep 1m start
GPR[SSLI]-1659891353921
GPR[ESLI]-1659891413927
Running Nopol Closure 45b with approach: smt
Timezone: America/Los_Angeles
Seed 261
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/45/seed_261/
The file script/workingdir/Nopol/Closure_45 does not exist!
script/workingdir/Nopol/Closure_45
script/workingdir/Nopol/Closure_45
classpath:  script/workingdir/Nopol/Closure_45/build/classes:script/workingdir/Nopol/Closure_45/lib/args4j.jar:script/workingdir/Nopol/Closure_45/lib/guava.jar:script/workingdir/Nopol/Closure_45/lib/json.jar:script/workingdir/Nopol/Closure_45/lib/jsr305.jar:script/workingdir/Nopol/Closure_45/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_45/build/lib/rhino.jar:script/workingdir/Nopol/Closure_45/lib/ant.jar:script/workingdir/Nopol/Closure_45/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_45/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_45/lib/jarjar.jar:script/workingdir/Nopol/Closure_45/lib/junit.jar:script/workingdir/Nopol/Closure_45/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659891432789
GPR[ESLB]-1659891492795
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_45//build/classes:script/workingdir/Nopol/Closure_45//build/test:script/workingdir/Nopol/Closure_45/build/classes:script/workingdir/Nopol/Closure_45/lib/args4j.jar:script/workingdir/Nopol/Closure_45/lib/guava.jar:script/workingdir/Nopol/Closure_45/lib/json.jar:script/workingdir/Nopol/Closure_45/lib/jsr305.jar:script/workingdir/Nopol/Closure_45/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_45/build/lib/rhino.jar:script/workingdir/Nopol/Closure_45/lib/ant.jar:script/workingdir/Nopol/Closure_45/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_45/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_45/lib/jarjar.jar:script/workingdir/Nopol/Closure_45/lib/junit.jar:script/workingdir/Nopol/Closure_45/build/test
Node: host-52
Date init: Sun 07 Aug 2022 09:58:12 AM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_45/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_45/build/classes/, file:script/workingdir/Nopol/Closure_45/build/test/, file:script/workingdir/Nopol/Closure_45/build/classes/, file:script/workingdir/Nopol/Closure_45/lib/args4j.jar, file:script/workingdir/Nopol/Closure_45/lib/guava.jar, file:script/workingdir/Nopol/Closure_45/lib/json.jar, file:script/workingdir/Nopol/Closure_45/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_45/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_45/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_45/lib/ant.jar, file:script/workingdir/Nopol/Closure_45/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_45/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_45/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_45/lib/junit.jar, file:script/workingdir/Nopol/Closure_45/build/test/]
[1] INFO NoPol - Statement type: PRE_THEN_COND
[1] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[3] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_45/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/45/seed_261/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659891497980
GPR[ESUP]-1659891497980
GPR[SFL]-1659891497980
GPR[EFL]-1659891533778
GPR[SFP]-1659891533778
GPR[SSUN]-1659891538261
-283827935
GPR[SPVATF]-1659891538747
GPR[EPVATF]-1659891538782
[45211] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891538782
GPR[SSUN]-1659891538782
-1966087783
GPR[ESUN]-1659891538976
GPR[SSUN]-1659891538976
-1966087783
GPR[SPVATF]-1659891539171
GPR[EPVATF]-1659891539201
[45630] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891539201
GPR[SSUN]-1659891539201
80988634
GPR[ESUN]-1659891539374
GPR[SSUN]-1659891539374
-1966087783
GPR[SPVATF]-1659891539562
GPR[EPVATF]-1659891539584
[46013] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891539584
GPR[SSUN]-1659891539584
-1966087783
GPR[SPVATF]-1659891539768
GPR[EPVATF]-1659891539789
[46219] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891539790
GPR[SSUN]-1659891539790
-1659631726
GPR[ESUN]-1659891539972
GPR[SSUN]-1659891539972
130004992
GPR[ESUN]-1659891540153
GPR[SSUN]-1659891540153
130004992
GPR[SPVATF]-1659891540330
GPR[EPVATF]-1659891540355
[46784] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891540355
GPR[SSUN]-1659891540355
130004992
GPR[ESUN]-1659891540530
GPR[SSUN]-1659891540530
2433571
GPR[SPVATF]-1659891540791
GPR[EPVATF]-1659891541161
GPR[SPS]-1659891541161
[49292] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1433.
GPR[EPS]-1659891542863
GPR[ESUN]-1659891542863
GPR[SSUN]-1659891542863
2433571
GPR[SPVATF]-1659891543104
GPR[EPVATF]-1659891543458
GPR[SPS]-1659891543458
GPR[EPS]-1659891546606
GPR[SPVATR]-1659891546606
[53035] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1404: PRECONDITION node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP
[53470] INFO TestPatch - Running test suite to check the patch "node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP" is working
GPR[EPVATR]-1659891547202
[53631] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659891547202
[53662] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1403,7 +1403,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_49253_1ts_1659891547233.diff
GPR[ESUN]-1659891547234
GPR[SSUN]-1659891547234
890942016
GPR[ESUN]-1659891547423
GPR[SSUN]-1659891547423
890942016
GPR[SPVATF]-1659891547604
GPR[EPVATF]-1659891547624
[54053] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891547625
GPR[SSUN]-1659891547625
890942016
GPR[SPVATF]-1659891547812
GPR[EPVATF]-1659891547832
[54261] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891547832
GPR[EPVATF]-1659891547851
[54281] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891547852
GPR[SSUN]-1659891547852
890942016
GPR[ESUN]-1659891548046
GPR[SSUN]-1659891548046
890942016
GPR[ESUN]-1659891548241
GPR[SSUN]-1659891548241
-1966087783
GPR[ESUN]-1659891548437
GPR[SSUN]-1659891548437
-1966087783
GPR[SPVATF]-1659891548631
GPR[EPVATF]-1659891548652
[55081] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891548653
GPR[EPVATF]-1659891548673
[55102] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891548673
GPR[SSUN]-1659891548673
-1966087783
GPR[ESUN]-1659891548863
GPR[SSUN]-1659891548863
-1966087783
GPR[SPVATF]-1659891549063
GPR[EPVATF]-1659891549083
[55512] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891549083
GPR[EPVATF]-1659891549101
[55530] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891549102
GPR[SSUN]-1659891549102
-1966087783
GPR[ESUN]-1659891549290
GPR[SSUN]-1659891549290
-1966087783
GPR[ESUN]-1659891549478
GPR[SSUN]-1659891549479
-1966087783
GPR[ESUN]-1659891549669
GPR[SSUN]-1659891549669
80988634
GPR[ESUN]-1659891549841
GPR[SSUN]-1659891549841
80988634
GPR[ESUN]-1659891550008
GPR[SSUN]-1659891550008
-1966087783
GPR[SPVATF]-1659891550191
GPR[EPVATF]-1659891550213
[56642] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891550213
GPR[EPVATF]-1659891550235
[56664] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891550235
GPR[SSUN]-1659891550235
-1966087783
GPR[SPVATF]-1659891550416
GPR[EPVATF]-1659891550439
[56868] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891550439
GPR[EPVATF]-1659891550460
[56889] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891550460
GPR[SSUN]-1659891550460
-1966087783
GPR[SPVATF]-1659891550642
GPR[EPVATF]-1659891550665
[57094] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891550665
GPR[EPVATF]-1659891550685
[57114] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891550685
GPR[SSUN]-1659891550685
-1966087783
GPR[ESUN]-1659891550887
GPR[SSUN]-1659891550887
-1966087783
GPR[ESUN]-1659891551066
GPR[SSUN]-1659891551066
-1966087783
GPR[SPVATF]-1659891551246
GPR[EPVATF]-1659891551267
[57696] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891551267
GPR[EPVATF]-1659891551286
[57715] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891551287
GPR[SSUN]-1659891551287
-1966087783
GPR[SPVATF]-1659891551469
GPR[EPVATF]-1659891551492
[57921] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891551493
GPR[EPVATF]-1659891551514
[57943] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891551514
GPR[SSUN]-1659891551514
-1966087783
GPR[ESUN]-1659891551695
GPR[SSUN]-1659891551695
-1966087783
GPR[SPVATF]-1659891551887
GPR[EPVATF]-1659891551908
[58337] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891551908
GPR[SSUN]-1659891551908
-1966087783
GPR[SPVATF]-1659891552104
GPR[EPVATF]-1659891552126
[58555] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891552126
GPR[SSUN]-1659891552126
-1966087783
GPR[ESUN]-1659891552307
GPR[SSUN]-1659891552307
-1966087783
GPR[SPVATF]-1659891552488
GPR[EPVATF]-1659891552510
[58939] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891552510
GPR[SSUN]-1659891552510
-1966087783
GPR[ESUN]-1659891552694
GPR[SSUN]-1659891552694
-1966087783
GPR[ESUN]-1659891552878
GPR[SSUN]-1659891552878
-1966087783
GPR[SPVATF]-1659891553058
GPR[EPVATF]-1659891553079
[59508] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891553079
GPR[SSUN]-1659891553079
-1966087783
GPR[SPVATF]-1659891553262
GPR[EPVATF]-1659891553282
[59711] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891553283
GPR[SSUN]-1659891553283
234947553
GPR[ESUN]-1659891553465
GPR[SSUN]-1659891553465
234947553
GPR[SPVATF]-1659891553643
GPR[EPVATF]-1659891553659
[60088] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891553659
GPR[EPVATF]-1659891553673
[60102] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891553673
GPR[SSUN]-1659891553673
234947553
GPR[ESUN]-1659891553854
GPR[SSUN]-1659891553854
234947553
GPR[SPVATF]-1659891554032
GPR[EPVATF]-1659891554048
[60477] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891554048
GPR[EPVATF]-1659891554063
[60492] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891554063
GPR[SSUN]-1659891554063
234947553
GPR[SPVATF]-1659891554247
GPR[EPVATF]-1659891554261
[60690] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891554261
GPR[SSUN]-1659891554261
234947553
GPR[ESUN]-1659891554440
GPR[SSUN]-1659891554440
234947553
GPR[ESUN]-1659891554630
GPR[SSUN]-1659891554630
234947553
GPR[SPVATF]-1659891554814
GPR[EPVATF]-1659891554830
[61259] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891554830
GPR[SSUN]-1659891554830
234947553
GPR[SPVATF]-1659891555011
GPR[EPVATF]-1659891555026
[61455] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891555026
GPR[SSUN]-1659891555026
234947553
GPR[SPVATF]-1659891555208
GPR[EPVATF]-1659891555225
[61654] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891555225
GPR[SSUN]-1659891555225
234947553
GPR[ESUN]-1659891555403
GPR[SSUN]-1659891555403
234947553
GPR[ESUN]-1659891555580
GPR[SSUN]-1659891555580
234947553
GPR[SPVATF]-1659891555760
GPR[EPVATF]-1659891555776
[62205] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891555776
GPR[SSUN]-1659891555776
234947553
GPR[SPVATF]-1659891555958
GPR[EPVATF]-1659891555973
[62402] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891555973
GPR[SSUN]-1659891555973
234947553
GPR[ESUN]-1659891556154
GPR[SSUN]-1659891556154
234947553
GPR[SPVATF]-1659891556334
GPR[EPVATF]-1659891556349
[62778] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891556349
GPR[SSUN]-1659891556349
234947553
GPR[SPVATF]-1659891556529
GPR[EPVATF]-1659891556544
[62973] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891556544
GPR[SSUN]-1659891556544
234947553
GPR[ESUN]-1659891556723
GPR[SSUN]-1659891556723
890942016
GPR[SPVATF]-1659891556910
GPR[EPVATF]-1659891556928
[63357] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891556929
GPR[EPVATF]-1659891556948
[63377] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891556948
GPR[SSUN]-1659891556948
890942016
GPR[SPVATF]-1659891557139
GPR[EPVATF]-1659891557157
[63586] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891557157
GPR[SSUN]-1659891557157
890942016
GPR[ESUN]-1659891557341
GPR[SSUN]-1659891557341
890942016
GPR[SPVATF]-1659891557521
GPR[EPVATF]-1659891557541
[63970] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891557541
GPR[SSUN]-1659891557541
890942016
GPR[SPVATF]-1659891557722
GPR[EPVATF]-1659891557741
[64170] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891557741
GPR[EPVATF]-1659891557758
[64187] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891557758
GPR[SSUN]-1659891557758
890942016
GPR[SPVATF]-1659891557939
GPR[EPVATF]-1659891557958
[64387] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891557958
GPR[SSUN]-1659891557958
890942016
GPR[SPVATF]-1659891558142
GPR[EPVATF]-1659891558160
[64589] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891558160
GPR[EPVATF]-1659891558178
[64607] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891558178
GPR[SSUN]-1659891558178
890942016
GPR[ESUN]-1659891558360
GPR[SSUN]-1659891558360
890942016
GPR[SPVATF]-1659891558541
GPR[EPVATF]-1659891558559
[64988] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891558559
GPR[SSUN]-1659891558559
890942016
GPR[SPVATF]-1659891558743
GPR[EPVATF]-1659891558760
[65189] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891558760
GPR[SSUN]-1659891558760
890942016
GPR[SPVATF]-1659891558942
GPR[EPVATF]-1659891558960
[65389] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891558960
GPR[SSUN]-1659891558960
890942016
GPR[ESUN]-1659891559140
GPR[SSUN]-1659891559140
80988634
GPR[ESUN]-1659891559306
GPR[SSUN]-1659891559306
2433571
GPR[SPVATF]-1659891559543
GPR[EPVATF]-1659891559892
GPR[SPS]-1659891559892
[66953] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1420.
GPR[EPS]-1659891560525
GPR[ESUN]-1659891560525
GPR[SSUN]-1659891560525
1187751237
GPR[ESUN]-1659891560796
GPR[SSUN]-1659891560796
1439236327
GPR[ESUN]-1659891561020
GPR[SSUN]-1659891561020
1439236327
GPR[SPVATF]-1659891561267
GPR[EPVATF]-1659891561616
GPR[SPS]-1659891561616
[68637] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Assign:962.
GPR[EPS]-1659891562208
GPR[ESUN]-1659891562208
GPR[SSUN]-1659891562208
1439236327
GPR[ESUN]-1659891562454
GPR[SSUN]-1659891562454
1439236327
GPR[SPVATF]-1659891562767
GPR[EPVATF]-1659891563745
GPR[SPS]-1659891563745
[70714] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Assign:952.
GPR[EPS]-1659891564285
GPR[ESUN]-1659891564285
GPR[SSUN]-1659891564285
1439236327
GPR[ESUN]-1659891564508
GPR[SSUN]-1659891564508
1187751237
GPR[SPVATF]-1659891564776
GPR[EPVATF]-1659891565122
GPR[SPS]-1659891565122
[72247] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:588.
GPR[EPS]-1659891565818
GPR[ESUN]-1659891565818
GPR[SSUN]-1659891565818
1439236327
GPR[SPVATF]-1659891566060
GPR[EPVATF]-1659891566429
GPR[SPS]-1659891566429
[73389] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:734.
GPR[EPS]-1659891566960
GPR[ESUN]-1659891566960
GPR[SSUN]-1659891566960
1439236327
GPR[SPVATF]-1659891567182
GPR[EPVATF]-1659891567545
GPR[SPS]-1659891567545
[74538] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Assign:966.
GPR[EPS]-1659891568109
GPR[ESUN]-1659891568109
GPR[SSUN]-1659891568109
1439236327
GPR[SPVATF]-1659891568337
GPR[EPVATF]-1659891568693
GPR[SPS]-1659891568694
[75651] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Assign:965.
GPR[EPS]-1659891569222
GPR[SPVATF]-1659891569223
GPR[EPVATF]-1659891569605
GPR[SPS]-1659891569606
[76565] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Assign:965.
GPR[EPS]-1659891570136
GPR[ESUN]-1659891570136
GPR[SSUN]-1659891570136
1439236327
GPR[ESUN]-1659891570360
GPR[SSUN]-1659891570360
80988634
GPR[ESUN]-1659891570526
GPR[SSUN]-1659891570526
1439236327
GPR[SPVATF]-1659891570746
GPR[EPVATF]-1659891571095
GPR[SPS]-1659891571095
[78096] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:735.
GPR[EPS]-1659891571667
GPR[SPVATF]-1659891571667
GPR[EPVATF]-1659891572052
GPR[SPS]-1659891572052
GPR[EPS]-1659891573036
GPR[SPVATR]-1659891573036
[79466] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:735: CONDITIONAL com.google.javascript.jscomp.RemoveUnusedVars.this.allFunctionScopes!=null
[79827] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.RemoveUnusedVars.this.allFunctionScopes!=null" is working
GPR[EPVATR]-1659891575141
[81570] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659891575141
[81576] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -734,4 +734,3 @@
               hasPropertyAssign = true;
-            } else if (!NodeUtil.isLiteralValue(
-                assign.assignNode.getLastChild(), true)) {
+            } else if (com.google.javascript.jscomp.RemoveUnusedVars.this.allFunctionScopes!=null) {
               assignedToUnknownValue = true;

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_77167_2ts_1659891575147.diff
GPR[ESUN]-1659891575148
GPR[SSUN]-1659891575148
2433571
GPR[SPVATF]-1659891575383
GPR[EPVATF]-1659891575803
GPR[SPS]-1659891575803
[82833] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:944.
GPR[EPS]-1659891576404
GPR[ESUN]-1659891576404
GPR[SSUN]-1659891576404
2433571
GPR[SPVATF]-1659891576634
GPR[EPVATF]-1659891576985
GPR[SPS]-1659891576985
[83990] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:941.
GPR[EPS]-1659891577561
GPR[SPVATF]-1659891577561
GPR[EPVATF]-1659891577905
GPR[SPS]-1659891577905
[84921] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:941.
GPR[EPS]-1659891578492
GPR[ESUN]-1659891578492
GPR[SSUN]-1659891578492
2433571
GPR[SPVATF]-1659891578725
GPR[EPVATF]-1659891579065
GPR[SPS]-1659891579065
[86061] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:937.
GPR[EPS]-1659891579632
GPR[ESUN]-1659891579632
GPR[SSUN]-1659891579632
-132053243
GPR[ESUN]-1659891579816
GPR[SSUN]-1659891579816
-132053243
GPR[SPVATF]-1659891579993
GPR[EPVATF]-1659891580011
[86440] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891580011
GPR[EPVATF]-1659891580027
[86456] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891580027
GPR[SSUN]-1659891580027
-132053243
GPR[ESUN]-1659891580205
GPR[SSUN]-1659891580205
-132053243
GPR[SPVATF]-1659891580380
GPR[EPVATF]-1659891580396
[86826] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891580397
GPR[SSUN]-1659891580397
-132053243
GPR[SPVATF]-1659891580593
GPR[EPVATF]-1659891580609
[87038] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891580609
GPR[SSUN]-1659891580609
-132053243
GPR[SPVATF]-1659891580806
GPR[EPVATF]-1659891580823
[87252] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891580823
GPR[SSUN]-1659891580823
-132053243
GPR[SPVATF]-1659891581002
GPR[EPVATF]-1659891581019
[87448] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891581019
GPR[SSUN]-1659891581019
-132053243
GPR[ESUN]-1659891581197
GPR[SSUN]-1659891581198
80988634
GPR[ESUN]-1659891581362
GPR[SSUN]-1659891581362
2433571
GPR[ESUN]-1659891581578
GPR[SSUN]-1659891581578
2433571
GPR[ESUN]-1659891581796
GPR[SSUN]-1659891581796
-675467674
GPR[ESUN]-1659891581957
GPR[SSUN]-1659891581957
2433571
GPR[SPVATF]-1659891582171
GPR[EPVATF]-1659891582523
GPR[SPS]-1659891582523
[89519] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:948.
GPR[EPS]-1659891583090
GPR[ESUN]-1659891583090
GPR[SSUN]-1659891583090
2433571
GPR[SPVATF]-1659891583328
GPR[EPVATF]-1659891583715
GPR[SPS]-1659891583715
[90716] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:947.
GPR[EPS]-1659891584287
GPR[ESUN]-1659891584287
GPR[SSUN]-1659891584287
-1966087783
GPR[ESUN]-1659891584468
GPR[SSUN]-1659891584468
-1966087783
GPR[SPVATF]-1659891584647
GPR[EPVATF]-1659891584666
[91095] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891584666
GPR[EPVATF]-1659891584684
[91113] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891584684
GPR[SSUN]-1659891584684
-1966087783
GPR[SPVATF]-1659891584866
GPR[EPVATF]-1659891584885
[91314] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891584885
GPR[SSUN]-1659891584885
1439236327
GPR[ESUN]-1659891585112
GPR[SSUN]-1659891585112
1439236327
GPR[SPVATF]-1659891585337
GPR[EPVATF]-1659891585733
GPR[SPS]-1659891585733
[92666] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Assign:948.
GPR[EPS]-1659891586237
GPR[SPVATF]-1659891586237
GPR[EPVATF]-1659891586654
GPR[SPS]-1659891586654
[93610] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Assign:948.
GPR[EPS]-1659891587181
GPR[ESUN]-1659891587181
GPR[SSUN]-1659891587181
1439236327
GPR[ESUN]-1659891587405
GPR[SSUN]-1659891587405
1439236327
GPR[ESUN]-1659891587624
GPR[SSUN]-1659891587624
1439236327
GPR[SPVATF]-1659891587844
GPR[EPVATF]-1659891588204
GPR[SPS]-1659891588204
[95141] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:757.
GPR[EPS]-1659891588712
GPR[ESUN]-1659891588712
GPR[SSUN]-1659891588712
1439236327
GPR[SPVATF]-1659891588933
GPR[EPVATF]-1659891589320
GPR[SPS]-1659891589320
[96278] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:756.
GPR[EPS]-1659891589849
GPR[ESUN]-1659891589849
GPR[SSUN]-1659891589849
1187751237
GPR[SPVATF]-1659891590107
GPR[EPVATF]-1659891590460
GPR[SPS]-1659891590460
[97520] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:827.
GPR[EPS]-1659891591091
GPR[SPVATF]-1659891591092
GPR[EPVATF]-1659891592048
GPR[SPS]-1659891592048
[99135] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:827.
GPR[EPS]-1659891592706
GPR[ESUN]-1659891592706
GPR[SSUN]-1659891592706
1439236327
GPR[SPVATF]-1659891592927
GPR[EPVATF]-1659891593283
GPR[SPS]-1659891593283
[100227] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:226.
GPR[EPS]-1659891593798
GPR[ESUN]-1659891593798
GPR[SSUN]-1659891593798
1439236327
GPR[SPVATF]-1659891594027
GPR[EPVATF]-1659891594375
GPR[SPS]-1659891594375
[101333] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:225.
GPR[EPS]-1659891594904
GPR[ESUN]-1659891594904
GPR[SSUN]-1659891594904
80988634
GPR[ESUN]-1659891595073
GPR[SSUN]-1659891595073
1439236327
GPR[ESUN]-1659891595292
GPR[SSUN]-1659891595292
1439236327
GPR[SPVATF]-1659891595513
GPR[EPVATF]-1659891595887
GPR[SPS]-1659891595887
[102832] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:733.
GPR[EPS]-1659891596403
GPR[SPVATF]-1659891596403
GPR[EPVATF]-1659891596754
GPR[SPS]-1659891596754
[103690] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:733.
GPR[EPS]-1659891597261
GPR[ESUN]-1659891597261
GPR[SSUN]-1659891597261
2433571
GPR[SPVATF]-1659891597488
GPR[EPVATF]-1659891597837
GPR[SPS]-1659891597837
[104800] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1017.
GPR[EPS]-1659891598371
GPR[ESUN]-1659891598371
GPR[SSUN]-1659891598371
2433571
GPR[SPVATF]-1659891598599
GPR[EPVATF]-1659891598977
GPR[SPS]-1659891598977
[105944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1010.
GPR[EPS]-1659891599515
GPR[ESUN]-1659891599515
GPR[SSUN]-1659891599515
2433571
GPR[ESUN]-1659891599734
GPR[SSUN]-1659891599734
-1966087783
GPR[ESUN]-1659891599912
GPR[SSUN]-1659891599912
2433571
GPR[ESUN]-1659891600134
GPR[SSUN]-1659891600135
2433571
GPR[ESUN]-1659891600363
GPR[SSUN]-1659891600363
2433571
GPR[SPVATF]-1659891600586
GPR[EPVATF]-1659891600946
GPR[SPS]-1659891600946
[107918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1014.
GPR[EPS]-1659891601489
GPR[ESUN]-1659891601489
GPR[SSUN]-1659891601489
2433571
GPR[SPVATF]-1659891601710
GPR[EPVATF]-1659891602101
GPR[SPS]-1659891602101
[109058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1013.
GPR[EPS]-1659891602629
GPR[ESUN]-1659891602629
GPR[SSUN]-1659891602629
2433571
GPR[SPVATF]-1659891602850
GPR[EPVATF]-1659891603201
GPR[SPS]-1659891603201
[110149] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1012.
GPR[EPS]-1659891603721
GPR[ESUN]-1659891603721
GPR[SSUN]-1659891603721
2433571
GPR[SPVATF]-1659891603954
GPR[EPVATF]-1659891604305
GPR[SPS]-1659891604305
[111281] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1009.
GPR[EPS]-1659891604852
GPR[ESUN]-1659891604852
GPR[SSUN]-1659891604852
2433571
GPR[ESUN]-1659891605078
GPR[SSUN]-1659891605078
2433571
GPR[SPVATF]-1659891605299
GPR[EPVATF]-1659891605654
GPR[SPS]-1659891605654
[112637] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1004.
GPR[EPS]-1659891606208
GPR[ESUN]-1659891606208
GPR[SSUN]-1659891606208
2433571
GPR[ESUN]-1659891606431
GPR[SSUN]-1659891606431
2433571
GPR[SPVATF]-1659891606649
GPR[EPVATF]-1659891607000
GPR[SPS]-1659891607000
[114020] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:996.
GPR[EPS]-1659891607591
GPR[ESUN]-1659891607591
GPR[SSUN]-1659891607591
2433571
GPR[ESUN]-1659891607816
GPR[SSUN]-1659891607816
2433571
GPR[ESUN]-1659891608048
GPR[SSUN]-1659891608048
80988634
GPR[ESUN]-1659891608212
GPR[SSUN]-1659891608212
-1966087783
GPR[SPVATF]-1659891608389
GPR[EPVATF]-1659891608408
[114837] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659891608408
GPR[EPVATF]-1659891608428
[114857] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659891608428
GPR[SSUN]-1659891608428
1439236327
GPR[SPVATF]-1659891608648
GPR[EPVATF]-1659891609008
GPR[SPS]-1659891609008
[115949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Assign:929.
GPR[EPS]-1659891609520
GPR[SPVATF]-1659891609520
GPR[EPVATF]-1659891609887
GPR[SPS]-1659891609887
[116820] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Assign:929.
GPR[EPS]-1659891610391
GPR[ESUN]-1659891610391
GPR[SSUN]-1659891610391
1439236327
GPR[SPVATF]-1659891610742
GPR[EPVATF]-1659891611141
GPR[SPS]-1659891611141
[118719] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Assign:927.
GPR[EPS]-1659891612290
GPR[ESUN]-1659891612291
GPR[SSUN]-1659891612291
1439236327
GPR[SPVATF]-1659891612520
GPR[EPVATF]-1659891612942
GPR[SPS]-1659891612942
GPR[EPS]-1659891618252
GPR[ESUN]-1659891618252
GPR[SSUN]-1659891618252
1439236327
GPR[ESUN]-1659891618477
GPR[SSUN]-1659891618477
80988634
GPR[ESUN]-1659891618642
GPR[SSUN]-1659891618642
1439236327
GPR[ESUN]-1659891618861
GPR[SSUN]-1659891618861
1439236327
GPR[SPVATF]-1659891619077
GPR[EPVATF]-1659891619429
GPR[SPS]-1659891619429
[126377] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:724.
GPR[EPS]-1659891619948
GPR[ESUN]-1659891619948
GPR[SSUN]-1659891619948
1439236327
GPR[ESUN]-1659891620173
GPR[SSUN]-1659891620173
2433571
GPR[ESUN]-1659891620410
GPR[SSUN]-1659891620410
881600600
GPR[ESUN]-1659891620584
GPR[SSUN]-1659891620584
2433571
GPR[SPVATF]-1659891620819
GPR[EPVATF]-1659891621176
GPR[SPS]-1659891621176
[128173] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659891621744
GPR[ESUN]-1659891621744
GPR[SSUN]-1659891621744
2433571
GPR[SPVATF]-1659891621959
GPR[EPVATF]-1659891622311
GPR[SPS]-1659891622311
[129301] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:972.
GPR[EPS]-1659891622872
GPR[ESUN]-1659891622872
GPR[SSUN]-1659891622872
2433571
GPR[SPVATF]-1659891623091
GPR[EPVATF]-1659891623441
GPR[SPS]-1659891623441
[130473] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && (getDouble() == ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble());
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(43).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            if (com.google.javascript.rhino.Node.this.last!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.parent!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.next!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.first!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            value = x.toString();

                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        int lineOffset = (file == null) ? java.lang.Integer.MIN_VALUE : file.getLineOffset(getLineno());
        return lineOffset + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[130473] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659891624044
GPR[SSUN]-1659891624044
2433571
GPR[SPVATF]-1659891624264
GPR[EPVATF]-1659891624641
GPR[SPS]-1659891624641
[131663] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && (getDouble() == ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble());
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(44).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectionEnds();
                }
                if (runtimeAngelicValue)
                    switch (type) {
                        default :
                            value = x.toString();
                            break;
                    }

                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        int lineOffset = (file == null) ? java.lang.Integer.MIN_VALUE : file.getLineOffset(getLineno());
        return lineOffset + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[131663] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659891625234
GPR[SSUN]-1659891625234
2433571
GPR[SPVATF]-1659891625453
GPR[EPVATF]-1659891625805
GPR[SPS]-1659891625805
[132806] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:965.
GPR[EPS]-1659891626377
GPR[ESUN]-1659891626377
GPR[SSUN]-1659891626377
2433571
GPR[SPVATF]-1659891626601
GPR[EPVATF]-1659891626967
GPR[SPS]-1659891626967
[133983] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:964.
GPR[EPS]-1659891627554
GPR[ESUN]-1659891627554
GPR[SSUN]-1659891627554
2433571
GPR[SPVATF]-1659891627781
GPR[EPVATF]-1659891628131
GPR[SPS]-1659891628131
[135128] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:963.
GPR[EPS]-1659891628699
GPR[ESUN]-1659891628699
GPR[SSUN]-1659891628699
2433571
GPR[ESUN]-1659891628924
GPR[SSUN]-1659891628924
2433571
GPR[ESUN]-1659891629144
GPR[SSUN]-1659891629144
2433571
GPR[SPVATF]-1659891629364
GPR[EPVATF]-1659891629718
GPR[SPS]-1659891629718
[136749] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659891630320
GPR[ESUN]-1659891630320
GPR[SSUN]-1659891630320
2433571
GPR[SPVATF]-1659891630541
GPR[EPVATF]-1659891630933
GPR[SPS]-1659891630933
[137921] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:953.
GPR[EPS]-1659891631492
GPR[ESUN]-1659891631492
GPR[SSUN]-1659891631492
2433571
GPR[SPVATF]-1659891631714
GPR[EPVATF]-1659891632072
GPR[SPS]-1659891632072
[139079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:866.
GPR[EPS]-1659891632650
GPR[ESUN]-1659891632650
GPR[SSUN]-1659891632650
2433571
GPR[SPVATF]-1659891632877
GPR[EPVATF]-1659891633241
GPR[SPS]-1659891633241
[140224] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:865.
GPR[EPS]-1659891633795
GPR[ESUN]-1659891633795
GPR[SSUN]-1659891633795
2433571
GPR[SPVATF]-1659891634055
GPR[EPVATF]-1659891634417
GPR[SPS]-1659891634417
[141401] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:860.
GPR[EPS]-1659891634972
GPR[ESUN]-1659891634973
GPR[SSUN]-1659891634973
2433571
GPR[ESUN]-1659891635194
GPR[SSUN]-1659891635194
2433571
GPR[ESUN]-1659891635416
GPR[SSUN]-1659891635416
1439236327
GPR[SPVATF]-1659891635649
GPR[EPVATF]-1659891636011
GPR[SPS]-1659891636011
[142963] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:843.
GPR[EPS]-1659891636534
GPR[ESUN]-1659891636534
GPR[SSUN]-1659891636534
1439236327
GPR[SPVATF]-1659891636777
GPR[EPVATF]-1659891637177
GPR[SPS]-1659891637177
[144165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:842.
GPR[EPS]-1659891637736
GPR[ESUN]-1659891637736
GPR[SSUN]-1659891637736
1439236327
GPR[SPVATF]-1659891637960
GPR[EPVATF]-1659891638346
GPR[SPS]-1659891638347
[145984] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:841.
GPR[EPS]-1659891639555
GPR[SPVATF]-1659891639556
GPR[EPVATF]-1659891639931
GPR[SPS]-1659891639931
[147119] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:841.
GPR[EPS]-1659891640690
GPR[ESUN]-1659891640690
GPR[SSUN]-1659891640690
1439236327
GPR[SPVATF]-1659891640913
GPR[EPVATF]-1659891641343
GPR[SPS]-1659891641344
[148286] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:835.
GPR[EPS]-1659891641857
GPR[SPVATF]-1659891641857
GPR[EPVATF]-1659891642242
GPR[SPS]-1659891642242
[149179] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:835.
GPR[EPS]-1659891642750
GPR[ESUN]-1659891642750
GPR[SSUN]-1659891642750
80988634
GPR[ESUN]-1659891642915
GPR[SSUN]-1659891642915
1439236327
GPR[SPVATF]-1659891643130
GPR[EPVATF]-1659891643491
GPR[SPS]-1659891643491
[150465] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:824.
GPR[EPS]-1659891644036
GPR[SPVATF]-1659891644036
GPR[EPVATF]-1659891644389
GPR[SPS]-1659891644389
[151337] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:824.
GPR[EPS]-1659891644908
GPR[ESUN]-1659891644908
GPR[SSUN]-1659891644908
1439236327
GPR[SPVATF]-1659891645127
GPR[EPVATF]-1659891645483
GPR[SPS]-1659891645483
[152463] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:820.
GPR[EPS]-1659891646034
GPR[SPVATF]-1659891646034
GPR[EPVATF]-1659891646373
GPR[SPS]-1659891646373
[153345] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:820.
GPR[EPS]-1659891646916
GPR[ESUN]-1659891646916
GPR[SSUN]-1659891646916
2433571
GPR[SPVATF]-1659891647147
GPR[EPVATF]-1659891647498
GPR[SPS]-1659891647498
[154511] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:978.
GPR[EPS]-1659891648082
GPR[SPVATF]-1659891648082
GPR[EPVATF]-1659891648443
GPR[SPS]-1659891648443
[155427] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:978.
GPR[EPS]-1659891648999
GPR[ESUN]-1659891648999
GPR[SSUN]-1659891648999
2433571
GPR[SPVATF]-1659891649222
GPR[EPVATF]-1659891649585
GPR[SPS]-1659891649585
[156579] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659891650151
GPR[ESUN]-1659891650151
GPR[SSUN]-1659891650151
2433571
GPR[ESUN]-1659891650373
GPR[SSUN]-1659891650373
2433571
GPR[SPVATF]-1659891650590
GPR[EPVATF]-1659891650949
GPR[SPS]-1659891650949
[157942] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:952.
GPR[EPS]-1659891651513
GPR[SPVATF]-1659891651513
GPR[EPVATF]-1659891651875
GPR[SPS]-1659891651875
[158901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:952.
GPR[EPS]-1659891652472
GPR[ESUN]-1659891652472
GPR[SSUN]-1659891652472
2433571
GPR[ESUN]-1659891652697
GPR[SSUN]-1659891652697
2433571
GPR[ESUN]-1659891652918
GPR[SSUN]-1659891652918
2433571
GPR[ESUN]-1659891653136
GPR[SSUN]-1659891653136
2433571
GPR[SPVATF]-1659891653357
GPR[EPVATF]-1659891653722
GPR[SPS]-1659891653722
[160712] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:869.
GPR[EPS]-1659891654283
GPR[ESUN]-1659891654283
GPR[SSUN]-1659891654283
2433571
GPR[SPVATF]-1659891654504
GPR[EPVATF]-1659891654872
GPR[SPS]-1659891654872
[161866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:864.
GPR[EPS]-1659891655437
GPR[ESUN]-1659891655437
GPR[SSUN]-1659891655438
2433571
GPR[ESUN]-1659891655707
GPR[SSUN]-1659891655707
2433571
GPR[SPVATF]-1659891655935
GPR[EPVATF]-1659891656326
GPR[SPS]-1659891656326
[163317] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:859.
GPR[EPS]-1659891656888
GPR[ESUN]-1659891656888
GPR[SSUN]-1659891656888
2433571
GPR[ESUN]-1659891657125
GPR[SSUN]-1659891657125
1439236327
GPR[SPVATF]-1659891657368
GPR[EPVATF]-1659891657741
GPR[SPS]-1659891657741
[164683] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Continuation:868.
GPR[EPS]-1659891658254
GPR[ESUN]-1659891658254
GPR[SSUN]-1659891658254
1439236327
GPR[ESUN]-1659891658477
GPR[SSUN]-1659891658477
1439236327
GPR[SPVATF]-1659891658696
GPR[EPVATF]-1659891659086
GPR[SPS]-1659891659086
[166079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Continuation:866.
GPR[EPS]-1659891659650
GPR[ESUN]-1659891659650
GPR[SSUN]-1659891659650
1439236327
GPR[ESUN]-1659891659918
GPR[SSUN]-1659891659918
2433571
GPR[SPVATF]-1659891660143
GPR[EPVATF]-1659891660532
GPR[SPS]-1659891660532
[167555] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:935.
GPR[EPS]-1659891661126
GPR[ESUN]-1659891661126
GPR[SSUN]-1659891661126
2433571
GPR[SPVATF]-1659891661352
GPR[EPVATF]-1659891662492
GPR[SPS]-1659891662492
[169545] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:934.
GPR[EPS]-1659891663116
GPR[ESUN]-1659891663116
GPR[SSUN]-1659891663116
2433571
GPR[SPVATF]-1659891663340
GPR[EPVATF]-1659891663723
GPR[SPS]-1659891663723
[170729] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:946.
GPR[EPS]-1659891664300
GPR[SPVATF]-1659891664301
GPR[EPVATF]-1659891664663
GPR[SPS]-1659891664663
[171693] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:946.
GPR[EPS]-1659891665264
GPR[ESUN]-1659891665265
GPR[SSUN]-1659891665265
1439236327
GPR[SPVATF]-1659891665509
GPR[EPVATF]-1659891665867
GPR[SPS]-1659891665867
[172821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:814.
GPR[EPS]-1659891666392
GPR[SPVATF]-1659891666392
GPR[EPVATF]-1659891666782
GPR[SPS]-1659891666782
[173799] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:814.
GPR[EPS]-1659891667370
GPR[ESUN]-1659891667371
GPR[SSUN]-1659891667371
1439236327
GPR[SPVATF]-1659891667589
GPR[EPVATF]-1659891667952
GPR[SPS]-1659891667952
[174889] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:286.
GPR[EPS]-1659891668460
GPR[ESUN]-1659891668460
GPR[SSUN]-1659891668460
1439236327
GPR[SPVATF]-1659891668682
GPR[EPVATF]-1659891669034
GPR[SPS]-1659891669034
[175967] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:262.
GPR[EPS]-1659891669539
GPR[ESUN]-1659891669539
GPR[SSUN]-1659891669539
1439236327
GPR[SPVATF]-1659891669756
GPR[EPVATF]-1659891670126
GPR[SPS]-1659891670126
[177070] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:261.
GPR[EPS]-1659891670641
GPR[ESUN]-1659891670641
GPR[SSUN]-1659891670641
1439236327
GPR[SPVATF]-1659891670956
GPR[EPVATF]-1659891671346
GPR[SPS]-1659891671346
[178314] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:220.
GPR[EPS]-1659891671885
GPR[SPVATF]-1659891671885
GPR[EPVATF]-1659891672246
GPR[SPS]-1659891672246
[179194] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:220.
GPR[EPS]-1659891672765
GPR[ESUN]-1659891672765
GPR[SSUN]-1659891672765
1439236327
GPR[SPVATF]-1659891672986
GPR[EPVATF]-1659891673341
GPR[SPS]-1659891673341
GPR[EPS]-1659891674783
GPR[SPVATR]-1659891674783
[181213] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:218: PRECONDITION com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals
[181560] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals" is working
GPR[EPVATR]-1659891675698
[182127] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659891675698
[182131] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -217,3 +217,5 @@
             assignsByVar.put(var, maybeAssign);
-            assignsByNode.put(maybeAssign.nameNode, maybeAssign);
+            if (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) {
+              assignsByNode.put(maybeAssign.nameNode, maybeAssign);
+            }
 

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_177722_3ts_1659891675702.diff
GPR[ESUN]-1659891675703
GPR[SSUN]-1659891675703
1439236327
GPR[SPVATF]-1659891675936
GPR[EPVATF]-1659891676305
GPR[SPS]-1659891676305
[183251] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:217.
GPR[EPS]-1659891676822
GPR[ESUN]-1659891676822
GPR[SSUN]-1659891676822
1439236327
GPR[SPVATF]-1659891677047
GPR[EPVATF]-1659891677406
GPR[SPS]-1659891677406
[184393] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:200.
GPR[EPS]-1659891677964
GPR[ESUN]-1659891677964
GPR[SSUN]-1659891677965
2433571
GPR[SPVATF]-1659891678188
GPR[EPVATF]-1659891678551
GPR[SPS]-1659891678551
[185536] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:936.
GPR[EPS]-1659891679107
GPR[SPVATF]-1659891679107
GPR[EPVATF]-1659891679470
GPR[SPS]-1659891679470
[186465] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:936.
GPR[EPS]-1659891680036
GPR[ESUN]-1659891680036
GPR[SSUN]-1659891680036
80988634
GPR[ESUN]-1659891680203
GPR[SSUN]-1659891680203
1439236327
GPR[ESUN]-1659891680424
GPR[SSUN]-1659891680424
1439236327
GPR[SPVATF]-1659891680653
GPR[EPVATF]-1659891681018
GPR[SPS]-1659891681018
[187993] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Continuation:863.
GPR[EPS]-1659891681564
GPR[SPVATF]-1659891681564
GPR[EPVATF]-1659891681960
GPR[SPS]-1659891681960
[188955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Continuation:863.
GPR[EPS]-1659891682526
GPR[ESUN]-1659891682526
GPR[SSUN]-1659891682526
1439236327
GPR[ESUN]-1659891682750
GPR[SSUN]-1659891682750
1439236327
GPR[SPVATF]-1659891682974
GPR[EPVATF]-1659891683341
GPR[SPS]-1659891683341
[190280] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:769.
GPR[EPS]-1659891683851
GPR[ESUN]-1659891683851
GPR[SSUN]-1659891683851
2433571
GPR[ESUN]-1659891684075
GPR[SSUN]-1659891684075
2433571
GPR[SPVATF]-1659891684291
GPR[EPVATF]-1659891685377
GPR[SPS]-1659891685377
[192551] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:977.
GPR[EPS]-1659891686122
GPR[SPVATF]-1659891686123
GPR[EPVATF]-1659891686583
GPR[SPS]-1659891686583
[193566] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:977.
GPR[EPS]-1659891687137
GPR[ESUN]-1659891687137
GPR[SSUN]-1659891687137
2433571
GPR[SPVATF]-1659891687357
GPR[EPVATF]-1659891687729
GPR[SPS]-1659891687729
[194709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:958.
GPR[EPS]-1659891688280
GPR[SPVATF]-1659891688281
GPR[EPVATF]-1659891688653
GPR[SPS]-1659891688653
[195627] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:958.
GPR[EPS]-1659891689198
GPR[ESUN]-1659891689198
GPR[SSUN]-1659891689198
2433571
GPR[SPVATF]-1659891689415
GPR[EPVATF]-1659891689782
GPR[SPS]-1659891689782
[196783] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:950.
GPR[EPS]-1659891690354
GPR[SPVATF]-1659891690354
GPR[EPVATF]-1659891690716
GPR[SPS]-1659891690716
[197695] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:950.
GPR[EPS]-1659891691266
GPR[ESUN]-1659891691266
GPR[SSUN]-1659891691266
2433571
GPR[SPVATF]-1659891691488
GPR[EPVATF]-1659891691851
GPR[SPS]-1659891691851
[198836] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:933.
GPR[EPS]-1659891692407
GPR[SPVATF]-1659891692407
GPR[EPVATF]-1659891692767
GPR[SPS]-1659891692767
[199801] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:933.
GPR[EPS]-1659891693372
GPR[ESUN]-1659891693372
GPR[SSUN]-1659891693372
2433571
GPR[SPVATF]-1659891693596
GPR[EPVATF]-1659891693963
GPR[SPS]-1659891693963
[200971] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:932.
GPR[EPS]-1659891694542
GPR[ESUN]-1659891694542
GPR[SSUN]-1659891694542
2433571
GPR[ESUN]-1659891694767
GPR[SSUN]-1659891694767
2433571
GPR[SPVATF]-1659891694989
GPR[EPVATF]-1659891695344
GPR[SPS]-1659891695344
[202334] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:923.
GPR[EPS]-1659891695905
GPR[ESUN]-1659891695905
GPR[SSUN]-1659891695905
2433571
GPR[ESUN]-1659891696131
GPR[SSUN]-1659891696131
1439236327
GPR[SPVATF]-1659891696351
GPR[EPVATF]-1659891696708
GPR[SPS]-1659891696708
GPR[EPS]-1659891706682
GPR[ESUN]-1659891706682
GPR[SSUN]-1659891706682
1439236327
GPR[SPVATF]-1659891706917
GPR[EPVATF]-1659891707274
GPR[SPS]-1659891707274
GPR[EPS]-1659891714051
GPR[ESUN]-1659891714051
GPR[SSUN]-1659891714051
1439236327
GPR[SPVATF]-1659891714275
GPR[EPVATF]-1659891714651
GPR[SPS]-1659891714651
GPR[EPS]-1659891716187
GPR[SPVATR]-1659891716187
[222616] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:216: PRECONDITION com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals
[222964] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals" is working
GPR[EPVATR]-1659891717200
[223630] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659891717201
[223635] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -215,13 +215,15 @@
           var = scope.getVar(maybeAssign.nameNode.getString());
-          if (var != null) {
-            assignsByVar.put(var, maybeAssign);
-            assignsByNode.put(maybeAssign.nameNode, maybeAssign);
-
-            if (isRemovableVar(var) &&
-                !maybeAssign.mayHaveSecondarySideEffects) {
-              // If the var is unreferenced and performing this assign has
-              // no secondary side effects, then we can create a continuation
-              // for it instead of traversing immediately.
-              continuations.put(var, new Continuation(n, scope));
-              return;
+          if (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) {
+            if (var != null) {
+              assignsByVar.put(var, maybeAssign);
+              assignsByNode.put(maybeAssign.nameNode, maybeAssign);
+              
+              if (isRemovableVar(var) &&
+              !maybeAssign.mayHaveSecondarySideEffects) {
+                // If the var is unreferenced and performing this assign has
+                // no secondary side effects, then we can create a continuation
+                // for it instead of traversing immediately.
+                continuations.put(var, new Continuation(n, scope));
+                return;
+              }
             }

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_219226_4ts_1659891717206.diff
GPR[SPVATF]-1659891717207
GPR[EPVATF]-1659891717599
GPR[SPS]-1659891717599
GPR[EPS]-1659891719318
GPR[SPVATR]-1659891719318
[225747] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:216: CONDITIONAL (var != null) && ((com.google.javascript.jscomp.RemoveUnusedVars.this.preserveFunctionExpressionNames) || (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals))
[226103] INFO TestPatch - Running test suite to check the patch "(var != null) && ((com.google.javascript.jscomp.RemoveUnusedVars.this.preserveFunctionExpressionNames) || (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals))" is working
GPR[EPVATR]-1659891720369
[226798] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659891720369
[226803] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -215,8 +215,8 @@
           var = scope.getVar(maybeAssign.nameNode.getString());
-          if (var != null) {
+          if ((var != null) && ((com.google.javascript.jscomp.RemoveUnusedVars.this.preserveFunctionExpressionNames) || (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals))) {
             assignsByVar.put(var, maybeAssign);
             assignsByNode.put(maybeAssign.nameNode, maybeAssign);
-
+            
             if (isRemovableVar(var) &&
-                !maybeAssign.mayHaveSecondarySideEffects) {
+            !maybeAssign.mayHaveSecondarySideEffects) {
               // If the var is unreferenced and performing this assign has

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_222394_5ts_1659891720374.diff
GPR[ESUN]-1659891720374
GPR[SSUN]-1659891720374
1439236327
GPR[SPVATF]-1659891720605
GPR[EPVATF]-1659891721019
GPR[SPS]-1659891721019
GPR[EPS]-1659891722623
GPR[SPVATR]-1659891722623
[229052] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:215: PRECONDITION com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals
[229396] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals" is working
GPR[EPVATR]-1659891723614
[230043] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659891723614
[230047] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -214,3 +214,5 @@
           // but we won't know that until we have an index of all assigns.
-          var = scope.getVar(maybeAssign.nameNode.getString());
+          if (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) {
+            var = scope.getVar(maybeAssign.nameNode.getString());
+          }
           if (var != null) {

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_225638_6ts_1659891723618.diff
GPR[ESUN]-1659891723618
GPR[SSUN]-1659891723618
1439236327
GPR[SPVATF]-1659891723849
GPR[EPVATF]-1659891724312
GPR[SPS]-1659891724313
GPR[EPS]-1659891745816
GPR[ESUN]-1659891745817
GPR[SSUN]-1659891745817
1439236327
GPR[SPVATF]-1659891746149
GPR[EPVATF]-1659891746696
GPR[SPS]-1659891746696
GPR[EPS]-1659891753834
GPR[SPVATF]-1659891753834
GPR[EPVATF]-1659891754382
GPR[SPS]-1659891754382
GPR[EPS]-1659891761659
GPR[ESUN]-1659891761659
GPR[SSUN]-1659891761659
1439236327
GPR[SPVATF]-1659891761885
GPR[EPVATF]-1659891762242
GPR[SPS]-1659891762242
GPR[EPS]-1659891767783
GPR[SPVATF]-1659891767783
GPR[EPVATF]-1659891768174
GPR[SPS]-1659891768174
GPR[EPS]-1659891773718
GPR[ESUN]-1659891773718
GPR[SSUN]-1659891773718
1439236327
GPR[ESUN]-1659891773943
GPR[SSUN]-1659891773943
1439236327
GPR[ESUN]-1659891774158
GPR[SSUN]-1659891774158
1439236327
GPR[SPVATF]-1659891774374
GPR[EPVATF]-1659891774737
GPR[SPS]-1659891774737
[281677] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars$Assign:916.
GPR[EPS]-1659891775248
GPR[ESUN]-1659891775248
GPR[SSUN]-1659891775248
1439236327
GPR[SPVATF]-1659891775472
GPR[EPVATF]-1659891775884
GPR[SPS]-1659891775884
GPR[EPS]-1659891777504
GPR[SPVATR]-1659891777504
[283933] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:212: PRECONDITION com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals
[284280] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals" is working
GPR[EPVATR]-1659891778552
[284981] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659891778552
[284985] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -211,17 +211,19 @@
         Assign maybeAssign = Assign.maybeCreateAssign(n);
-        if (maybeAssign != null) {
-          // Put this in the assign map. It might count as a reference,
-          // but we won't know that until we have an index of all assigns.
-          var = scope.getVar(maybeAssign.nameNode.getString());
-          if (var != null) {
-            assignsByVar.put(var, maybeAssign);
-            assignsByNode.put(maybeAssign.nameNode, maybeAssign);
-
-            if (isRemovableVar(var) &&
-                !maybeAssign.mayHaveSecondarySideEffects) {
-              // If the var is unreferenced and performing this assign has
-              // no secondary side effects, then we can create a continuation
-              // for it instead of traversing immediately.
-              continuations.put(var, new Continuation(n, scope));
-              return;
+        if (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) {
+          if (maybeAssign != null) {
+            // Put this in the assign map. It might count as a reference,
+            // but we won't know that until we have an index of all assigns.
+            var = scope.getVar(maybeAssign.nameNode.getString());
+            if (var != null) {
+              assignsByVar.put(var, maybeAssign);
+              assignsByNode.put(maybeAssign.nameNode, maybeAssign);
+              
+              if (isRemovableVar(var) &&
+              !maybeAssign.mayHaveSecondarySideEffects) {
+                // If the var is unreferenced and performing this assign has
+                // no secondary side effects, then we can create a continuation
+                // for it instead of traversing immediately.
+                continuations.put(var, new Continuation(n, scope));
+                return;
+              }
             }

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_280576_7ts_1659891778556.diff
GPR[SPVATF]-1659891778557
GPR[EPVATF]-1659891778966
GPR[SPS]-1659891778966
GPR[EPS]-1659891780722
GPR[SPVATR]-1659891780722
[287151] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:212: CONDITIONAL (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) && (maybeAssign!=null)
[287490] INFO TestPatch - Running test suite to check the patch "(com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) && (maybeAssign!=null)" is working
GPR[EPVATR]-1659891781735
[288164] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659891781735
[288169] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -211,3 +211,3 @@
         Assign maybeAssign = Assign.maybeCreateAssign(n);
-        if (maybeAssign != null) {
+        if ((com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) && (maybeAssign!=null)) {
           // Put this in the assign map. It might count as a reference,
@@ -218,5 +218,5 @@
             assignsByNode.put(maybeAssign.nameNode, maybeAssign);
-
+            
             if (isRemovableVar(var) &&
-                !maybeAssign.mayHaveSecondarySideEffects) {
+            !maybeAssign.mayHaveSecondarySideEffects) {
               // If the var is unreferenced and performing this assign has

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_283760_8ts_1659891781740.diff
GPR[ESUN]-1659891781741
GPR[SSUN]-1659891781741
1439236327
GPR[ESUN]-1659891781996
GPR[SSUN]-1659891781996
1439236327
GPR[ESUN]-1659891782267
GPR[SSUN]-1659891782267
1439236327
GPR[ESUN]-1659891782485
GPR[SSUN]-1659891782485
1439236327
GPR[SPVATF]-1659891782703
GPR[EPVATF]-1659891783082
GPR[SPS]-1659891783082
[290023] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:810.
GPR[EPS]-1659891783595
GPR[SPVATF]-1659891783595
GPR[EPVATF]-1659891783991
GPR[SPS]-1659891783991
[290926] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:810.
GPR[EPS]-1659891784497
GPR[ESUN]-1659891784497
GPR[SSUN]-1659891784497
1439236327
GPR[SPVATF]-1659891784720
GPR[EPVATF]-1659891785106
GPR[SPS]-1659891785106
[292048] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:803.
GPR[EPS]-1659891785619
GPR[ESUN]-1659891785620
GPR[SSUN]-1659891785620
1439236327
GPR[ESUN]-1659891785846
GPR[SSUN]-1659891785846
1439236327
GPR[ESUN]-1659891786067
GPR[SSUN]-1659891786067
1439236327
GPR[ESUN]-1659891786284
GPR[SSUN]-1659891786284
1439236327
GPR[SPVATF]-1659891786502
GPR[EPVATF]-1659891786918
GPR[SPS]-1659891786918
[293875] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:798.
GPR[EPS]-1659891787446
GPR[ESUN]-1659891787446
GPR[SSUN]-1659891787446
1439236327
GPR[SPVATF]-1659891787671
GPR[EPVATF]-1659891788056
GPR[SPS]-1659891788056
[295010] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:796.
GPR[EPS]-1659891788581
GPR[ESUN]-1659891788581
GPR[SSUN]-1659891788581
1439236327
GPR[SPVATF]-1659891788803
GPR[EPVATF]-1659891789197
GPR[SPS]-1659891789197
[296223] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:788.
GPR[EPS]-1659891789795
GPR[ESUN]-1659891789795
GPR[SSUN]-1659891789795
1439236327
GPR[ESUN]-1659891790015
GPR[SSUN]-1659891790015
1439236327
GPR[ESUN]-1659891790233
GPR[SSUN]-1659891790233
1439236327
GPR[SPVATF]-1659891790451
GPR[EPVATF]-1659891790851
GPR[SPS]-1659891790851
[297781] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:755.
GPR[EPS]-1659891791352
GPR[ESUN]-1659891791353
GPR[SSUN]-1659891791353
1439236327
GPR[SPVATF]-1659891791572
GPR[EPVATF]-1659891791974
GPR[SPS]-1659891791974
[298912] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:283.
GPR[EPS]-1659891792483
GPR[ESUN]-1659891792483
GPR[SSUN]-1659891792483
1439236327
GPR[SPVATF]-1659891792700
GPR[EPVATF]-1659891793100
GPR[SPS]-1659891793100
[300038] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:306.
GPR[EPS]-1659891793609
GPR[ESUN]-1659891793609
GPR[SSUN]-1659891793609
1439236327
GPR[SPVATF]-1659891793828
GPR[EPVATF]-1659891794229
GPR[SPS]-1659891794229
[301166] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:282.
GPR[EPS]-1659891794737
GPR[SPVATF]-1659891794737
GPR[EPVATF]-1659891795161
GPR[SPS]-1659891795161
GPR[EPS]-1659891834552
GPR[ESUN]-1659891834552
GPR[SSUN]-1659891834552
1439236327
GPR[SPVATF]-1659891834895
GPR[EPVATF]-1659891835309
GPR[SPS]-1659891835309
[342248] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:741.
GPR[EPS]-1659891835819
GPR[SPVATF]-1659891835819
GPR[EPVATF]-1659891836190
GPR[SPS]-1659891836190
GPR[EPS]-1659891839899
GPR[SPVATR]-1659891839899
[346328] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:741: CONDITIONAL (assignedToUnknownValue && hasPropertyAssign) || (((0) != (com.google.javascript.jscomp.RemoveUnusedVars.this.allFunctionScopes.size())) && (com.google.javascript.jscomp.RemoveUnusedVars.this.maybeUnreferenced.size() < com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.size()))
[346669] INFO TestPatch - Running test suite to check the patch "(assignedToUnknownValue && hasPropertyAssign) || (((0) != (com.google.javascript.jscomp.RemoveUnusedVars.this.allFunctionScopes.size())) && (com.google.javascript.jscomp.RemoveUnusedVars.this.maybeUnreferenced.size() < com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.size()))" is working
GPR[EPVATR]-1659891840924
[347353] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659891840924
[347357] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -740,3 +740,3 @@
 
-          if (assignedToUnknownValue && hasPropertyAssign) {
+          if ((assignedToUnknownValue && hasPropertyAssign) || (((0) != (com.google.javascript.jscomp.RemoveUnusedVars.this.allFunctionScopes.size())) && (com.google.javascript.jscomp.RemoveUnusedVars.this.maybeUnreferenced.size() < com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.size()))) {
             changes = markReferencedVar(var) || changes;

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_342948_9ts_1659891840928.diff
GPR[ESUN]-1659891840929
GPR[SSUN]-1659891840929
1439236327
GPR[SPVATF]-1659891841153
GPR[EPVATF]-1659891841535
GPR[SPS]-1659891841535
[348478] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:732.
GPR[EPS]-1659891842049
GPR[ESUN]-1659891842049
GPR[SSUN]-1659891842049
1439236327
GPR[SPVATF]-1659891842268
GPR[EPVATF]-1659891842661
GPR[SPS]-1659891842661
[349637] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:721.
GPR[EPS]-1659891843208
GPR[SPVATF]-1659891843208
GPR[EPVATF]-1659891843597
GPR[SPS]-1659891843597
GPR[EPS]-1659891865259
GPR[ESUN]-1659891865259
GPR[SSUN]-1659891865259
1439236327
GPR[ESUN]-1659891865482
GPR[SSUN]-1659891865482
1439236327
GPR[ESUN]-1659891865701
GPR[SSUN]-1659891865701
1439236327
GPR[SPVATF]-1659891865921
GPR[EPVATF]-1659891866291
GPR[SPS]-1659891866291
[373219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:714.
GPR[EPS]-1659891866790
GPR[SPVATF]-1659891866790
GPR[EPVATF]-1659891867168
GPR[SPS]-1659891867168
GPR[EPS]-1659891871935
GPR[SPVATR]-1659891871935
[378364] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:714: CONDITIONAL (changes) || (((com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.size()) != (0)) && (!(com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals)))
[378710] INFO TestPatch - Running test suite to check the patch "(changes) || (((com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.size()) != (0)) && (!(com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals)))" is working
GPR[EPVATR]-1659891872973
[379402] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659891872973
[379406] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -713,3 +713,3 @@
         Var var = maybeUnreferenced.get(current);
-        if (referenced.contains(var)) {
+        if ((changes) || (((com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.size()) != (0)) && (!(com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals)))) {
           maybeUnreferenced.remove(current);
@@ -719,8 +719,8 @@
           boolean hasPropertyAssign = false;
-
+          
           if (var.getParentNode().isVar() &&
-              !NodeUtil.isForIn(var.getParentNode().getParent())) {
+          !NodeUtil.isForIn(var.getParentNode().getParent())) {
             Node value = var.getInitialValue();
             assignedToUnknownValue = value != null &&
-                !NodeUtil.isLiteralValue(value, true);
+            !NodeUtil.isLiteralValue(value, true);
           } else {
@@ -730,3 +730,3 @@
           }
-
+          
           for (Assign assign : assignsByVar.get(var)) {
@@ -735,3 +735,3 @@
             } else if (!NodeUtil.isLiteralValue(
-                assign.assignNode.getLastChild(), true)) {
+            assign.assignNode.getLastChild(), true)) {
               assignedToUnknownValue = true;
@@ -739,3 +739,3 @@
           }
-
+          
           if (assignedToUnknownValue && hasPropertyAssign) {

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_374997_10ts_1659891872977.diff
GPR[ESUN]-1659891872978
GPR[SSUN]-1659891872978
1439236327
GPR[ESUN]-1659891873203
GPR[SSUN]-1659891873203
1439236327
GPR[SPVATF]-1659891873421
GPR[EPVATF]-1659891873795
GPR[SPS]-1659891873795
GPR[EPS]-1659891876015
GPR[SPVATR]-1659891876015
[382444] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:349: PRECONDITION (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) || (com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty())
[382795] INFO TestPatch - Running test suite to check the patch "(com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) || (com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty())" is working
GPR[EPVATR]-1659891877056
[383485] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659891877056
[383488] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -348,3 +348,5 @@
       if (isRemovableVar(var)) {
-        maybeUnreferenced.add(var);
+        if ((com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) || (com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty())) {
+          maybeUnreferenced.add(var);
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_379079_11ts_1659891877059.diff
GPR[ESUN]-1659891877060
GPR[SSUN]-1659891877060
1439236327
GPR[ESUN]-1659891877326
GPR[SSUN]-1659891877326
1439236327
GPR[SPVATF]-1659891877548
GPR[EPVATF]-1659891877967
GPR[SPS]-1659891877968
[384896] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:377.
GPR[EPS]-1659891878467
GPR[ESUN]-1659891878467
GPR[SSUN]-1659891878467
80988634
GPR[ESUN]-1659891878628
GPR[SSUN]-1659891878628
1439236327
GPR[ESUN]-1659891878839
GPR[SSUN]-1659891878839
1439236327
GPR[ESUN]-1659891879050
GPR[SSUN]-1659891879050
1439236327
GPR[SPVATF]-1659891879269
GPR[EPVATF]-1659891879659
GPR[SPS]-1659891879659
[386598] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:374.
GPR[EPS]-1659891880169
GPR[SPVATF]-1659891880169
GPR[EPVATF]-1659891880561
GPR[SPS]-1659891880561
[387499] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:374.
GPR[EPS]-1659891881070
GPR[ESUN]-1659891881070
GPR[SSUN]-1659891881070
1439236327
GPR[ESUN]-1659891881292
GPR[SSUN]-1659891881292
1439236327
GPR[ESUN]-1659891881515
GPR[SSUN]-1659891881515
1439236327
GPR[SPVATF]-1659891881732
GPR[EPVATF]-1659891882137
GPR[SPS]-1659891882137
[389074] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:366.
GPR[EPS]-1659891882645
GPR[SPVATF]-1659891882645
GPR[EPVATF]-1659891883040
GPR[SPS]-1659891883040
[389976] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:366.
GPR[EPS]-1659891883547
GPR[ESUN]-1659891883547
GPR[SSUN]-1659891883547
1439236327
GPR[SPVATF]-1659891883764
GPR[EPVATF]-1659891884191
GPR[SPS]-1659891884191
[391197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:365.
GPR[EPS]-1659891884768
GPR[ESUN]-1659891884768
GPR[SSUN]-1659891884768
1439236327
GPR[ESUN]-1659891884984
GPR[SSUN]-1659891884984
1439236327
GPR[ESUN]-1659891885198
GPR[SSUN]-1659891885198
1439236327
GPR[SPVATF]-1659891885416
GPR[EPVATF]-1659891885821
GPR[SPS]-1659891885821
[392762] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:338.
GPR[EPS]-1659891886333
GPR[ESUN]-1659891886333
GPR[SSUN]-1659891886333
1439236327
GPR[SPVATF]-1659891886553
GPR[EPVATF]-1659891886976
GPR[SPS]-1659891886976
GPR[EPS]-1659891889111
GPR[SPVATR]-1659891889111
[395540] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:337: PRECONDITION com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.size() <= 1
[395888] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.size() <= 1" is working
GPR[EPVATR]-1659891890421
[396850] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659891890421
[396853] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -336,3 +336,5 @@
 
-    collectMaybeUnreferencedVars(fnScope);
+    if (com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.size() <= 1) {
+      collectMaybeUnreferencedVars(fnScope);
+    }
     allFunctionScopes.add(fnScope);

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_392444_12ts_1659891890424.diff
GPR[ESUN]-1659891890425
GPR[SSUN]-1659891890425
1439236327
GPR[SPVATF]-1659891890660
GPR[EPVATF]-1659891891093
GPR[SPS]-1659891891093
[398035] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:335.
GPR[EPS]-1659891891606
GPR[ESUN]-1659891891606
GPR[SSUN]-1659891891606
1439236327
GPR[ESUN]-1659891891831
GPR[SSUN]-1659891891831
1439236327
GPR[SPVATF]-1659891892053
GPR[EPVATF]-1659891892531
GPR[SPS]-1659891892531
[399478] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:330.
GPR[EPS]-1659891893049
GPR[ESUN]-1659891893050
GPR[SSUN]-1659891893050
1439236327
GPR[ESUN]-1659891894082
GPR[SSUN]-1659891894082
1439236327
GPR[SPVATF]-1659891894308
GPR[EPVATF]-1659891894745
GPR[SPS]-1659891894745
[401785] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:327.
GPR[EPS]-1659891895356
GPR[ESUN]-1659891895357
GPR[SSUN]-1659891895357
1439236327
GPR[SPVATF]-1659891895583
GPR[EPVATF]-1659891896619
GPR[SPS]-1659891896619
[403585] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:326.
GPR[EPS]-1659891897156
GPR[ESUN]-1659891897156
GPR[SSUN]-1659891897156
1439236327
GPR[ESUN]-1659891897376
GPR[SSUN]-1659891897376
1439236327
GPR[SPVATF]-1659891897592
GPR[EPVATF]-1659891897983
GPR[SPS]-1659891897983
[404916] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:179.
GPR[EPS]-1659891898487
GPR[ESUN]-1659891898487
GPR[SSUN]-1659891898487
1439236327
GPR[ESUN]-1659891898705
GPR[SSUN]-1659891898705
1439236327
GPR[SPVATF]-1659891898924
GPR[EPVATF]-1659891899305
GPR[SPS]-1659891899305
GPR[EPS]-1659891916574
GPR[SPVATF]-1659891916574
GPR[EPVATF]-1659891916949
GPR[SPS]-1659891916949
GPR[EPS]-1659891961102
GPR[ESUN]-1659891961102
GPR[SSUN]-1659891961102
1439236327
GPR[SPVATF]-1659891961424
GPR[EPVATF]-1659891961801
GPR[SPS]-1659891961801
[468738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:199.
GPR[EPS]-1659891962309
GPR[SPVATF]-1659891962309
GPR[EPVATF]-1659891962690
GPR[SPS]-1659891962690
[469941] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:199.
GPR[EPS]-1659891963512
GPR[ESUN]-1659891963512
GPR[SSUN]-1659891963512
1439236327
GPR[SPVATF]-1659891963881
GPR[EPVATF]-1659891964476
GPR[SPS]-1659891964476
[471423] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:771.
GPR[EPS]-1659891964994
GPR[ESUN]-1659891964994
GPR[SSUN]-1659891964994
1439236327
GPR[SPVATF]-1659891965221
GPR[EPVATF]-1659891965617
GPR[SPS]-1659891965617
[472607] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:768.
GPR[EPS]-1659891966178
GPR[ESUN]-1659891966178
GPR[SSUN]-1659891966178
1439236327
GPR[SPVATF]-1659891966465
GPR[EPVATF]-1659891966841
GPR[SPS]-1659891966842
[473833] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:767.
GPR[EPS]-1659891967404
GPR[SPVATF]-1659891967404
GPR[EPVATF]-1659891967796
GPR[SPS]-1659891967796
[474745] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:767.
GPR[EPS]-1659891968317
GPR[ESUN]-1659891968317
GPR[SSUN]-1659891968317
1439236327
GPR[SPVATF]-1659891968534
GPR[EPVATF]-1659891968912
GPR[SPS]-1659891968912
[475873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:281.
GPR[EPS]-1659891969444
GPR[SPVATF]-1659891969444
GPR[EPVATF]-1659891969831
GPR[SPS]-1659891969831
GPR[EPS]-1659891980860
GPR[ESUN]-1659891980860
GPR[SSUN]-1659891980860
1439236327
GPR[SPVATF]-1659891981080
GPR[EPVATF]-1659891981500
GPR[SPS]-1659891981500
[488440] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:236.
GPR[EPS]-1659891982011
GPR[SPVATF]-1659891982011
GPR[EPVATF]-1659891982397
GPR[SPS]-1659891982397
[489341] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:236.
GPR[EPS]-1659891982912
GPR[ESUN]-1659891982912
GPR[SSUN]-1659891982912
1439236327
GPR[ESUN]-1659891983133
GPR[SSUN]-1659891983133
1187751237
GPR[ESUN]-1659891983395
GPR[SSUN]-1659891983395
1187751237
GPR[SPVATF]-1659891983690
GPR[EPVATF]-1659891984083
GPR[SPS]-1659891984083
[491133] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2111.
GPR[EPS]-1659891984704
GPR[ESUN]-1659891984704
GPR[SSUN]-1659891984704
1439236327
GPR[SPVATF]-1659891984926
GPR[EPVATF]-1659891985298
GPR[SPS]-1659891985298
[492240] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:256.
GPR[EPS]-1659891985811
GPR[SPVATF]-1659891985811
GPR[EPVATF]-1659891986221
GPR[SPS]-1659891986221
[493158] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:256.
GPR[EPS]-1659891986729
GPR[ESUN]-1659891986729
GPR[SSUN]-1659891986729
1439236327
GPR[ESUN]-1659891986953
GPR[SSUN]-1659891986953
1439236327
GPR[ESUN]-1659891987167
GPR[SSUN]-1659891987167
1439236327
GPR[SPVATF]-1659891987382
GPR[EPVATF]-1659891987780
GPR[SPS]-1659891987780
GPR[EPS]-1659891990226
GPR[SPVATR]-1659891990226
[496655] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:348: PRECONDITION (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) || (com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty())
[497045] INFO TestPatch - Running test suite to check the patch "(com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) || (com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty())" is working
GPR[EPVATR]-1659891991451
[497880] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659891991451
[497883] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -347,4 +347,6 @@
       Var var = it.next();
-      if (isRemovableVar(var)) {
-        maybeUnreferenced.add(var);
+      if ((com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) || (com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty())) {
+        if (isRemovableVar(var)) {
+          maybeUnreferenced.add(var);
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_493474_13ts_1659891991454.diff
GPR[SPVATF]-1659891991455
GPR[EPVATF]-1659891991886
GPR[SPS]-1659891991886
GPR[EPS]-1659892029020
GPR[ESUN]-1659892029020
GPR[SSUN]-1659892029020
1439236327
GPR[ESUN]-1659892029351
GPR[SSUN]-1659892029351
1439236327
GPR[ESUN]-1659892029570
GPR[SSUN]-1659892029570
1439236327
GPR[SPVATF]-1659892029786
GPR[EPVATF]-1659892030195
GPR[SPS]-1659892030195
[537136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:310.
GPR[EPS]-1659892030707
GPR[SPVATF]-1659892030707
GPR[EPVATF]-1659892031117
GPR[SPS]-1659892031117
GPR[EPS]-1659892197064
GPR[ESUN]-1659892197064
GPR[SSUN]-1659892197064
1439236327
GPR[SPVATF]-1659892197423
GPR[EPVATF]-1659892197865
GPR[SPS]-1659892197865
[704798] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:305.
GPR[EPS]-1659892198370
GPR[SPVATF]-1659892198370
GPR[EPVATF]-1659892198799
GPR[SPS]-1659892198799
GPR[EPS]-1659892265158
GPR[ESUN]-1659892265158
GPR[SSUN]-1659892265159
1439236327
GPR[SPVATF]-1659892265527
GPR[EPVATF]-1659892265969
GPR[SPS]-1659892265969
[772917] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:277.
GPR[EPS]-1659892266488
GPR[SPVATF]-1659892266488
GPR[EPVATF]-1659892267793
GPR[SPS]-1659892267793
[774733] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:277.
GPR[EPS]-1659892268304
GPR[ESUN]-1659892268305
GPR[SSUN]-1659892268305
1439236327
GPR[SPVATF]-1659892268524
GPR[EPVATF]-1659892268930
GPR[SPS]-1659892268930
[775873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:268.
GPR[EPS]-1659892269444
GPR[SPVATF]-1659892269444
GPR[EPVATF]-1659892269836
GPR[SPS]-1659892269836
[776771] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:268.
GPR[EPS]-1659892270342
GPR[ESUN]-1659892270342
GPR[SSUN]-1659892270342
1439236327
GPR[ESUN]-1659892270562
GPR[SSUN]-1659892270562
1439236327
GPR[SPVATF]-1659892270778
GPR[EPVATF]-1659892271167
GPR[SPS]-1659892271167
GPR[EPS]-1659892273566
GPR[SPVATR]-1659892273566
[779995] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:346: PRECONDITION (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) || ((com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByVar!=null) && (com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty()))
[780338] INFO TestPatch - Running test suite to check the patch "(com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) || ((com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByVar!=null) && (com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty()))" is working
GPR[EPVATR]-1659892274821
[781250] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659892274821
[781255] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -345,6 +345,8 @@
   private void collectMaybeUnreferencedVars(Scope scope) {
-    for (Iterator<Var> it = scope.getVars(); it.hasNext(); ) {
-      Var var = it.next();
-      if (isRemovableVar(var)) {
-        maybeUnreferenced.add(var);
+    if ((com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) || ((com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByVar!=null) && (com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty()))) {
+      for (Iterator<Var> it = scope.getVars(); it.hasNext(); ) {
+        Var var = it.next();
+        if (isRemovableVar(var)) {
+          maybeUnreferenced.add(var);
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_776846_14ts_1659892274826.diff
GPR[ESUN]-1659892274827
GPR[SSUN]-1659892274827
1439236327
GPR[SPVATF]-1659892275067
GPR[EPVATF]-1659892275439
GPR[SPS]-1659892275439
[782380] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:254.
GPR[EPS]-1659892275951
GPR[SPVATF]-1659892275951
GPR[EPVATF]-1659892276319
GPR[SPS]-1659892276319
[2582383] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659894075958
GPR[SSUN]-1659894075958
1439236327
GPR[SPVATF]-1659894076341
GPR[EPVATF]-1659894076726
GPR[SPS]-1659894076726
[2583670] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:253.
GPR[EPS]-1659894077241
GPR[ESUN]-1659894077241
GPR[SSUN]-1659894077241
1439236327
GPR[SPVATF]-1659894077503
GPR[EPVATF]-1659894077882
GPR[SPS]-1659894077882
GPR[EPS]-1659894085911
GPR[SPVATF]-1659894085912
GPR[EPVATF]-1659894086320
GPR[SPS]-1659894086320
GPR[EPS]-1659894280339
GPR[ESUN]-1659894280339
GPR[SSUN]-1659894280339
-718432441
GPR[ESUN]-1659894280711
GPR[SSUN]-1659894280711
-718432441
GPR[SPVATF]-1659894280918
GPR[EPVATF]-1659894281307
GPR[SPS]-1659894281307
[2788367] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:922.
GPR[EPS]-1659894281938
GPR[SPVATF]-1659894281939
GPR[EPVATF]-1659894282334
GPR[SPS]-1659894282334
[2789356] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:922.
GPR[EPS]-1659894282927
GPR[ESUN]-1659894282927
GPR[SSUN]-1659894282927
-718432441
GPR[SPVATF]-1659894283137
GPR[EPVATF]-1659894283529
GPR[SPS]-1659894283529
[2790551] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:914.
GPR[EPS]-1659894284122
GPR[ESUN]-1659894284122
GPR[SSUN]-1659894284122
-718432441
GPR[ESUN]-1659894284329
GPR[SSUN]-1659894284329
-718432441
GPR[SPVATF]-1659894284533
GPR[EPVATF]-1659894284930
GPR[SPS]-1659894284930
[2791966] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:211.
GPR[EPS]-1659894285537
GPR[ESUN]-1659894285537
GPR[SSUN]-1659894285537
-718432441
GPR[SPVATF]-1659894285744
GPR[EPVATF]-1659894286142
GPR[SPS]-1659894286142
[2793167] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:210.
GPR[EPS]-1659894286738
GPR[ESUN]-1659894286738
GPR[SSUN]-1659894286738
-718432441
GPR[SPVATF]-1659894286944
GPR[EPVATF]-1659894287343
GPR[SPS]-1659894287343
[2794365] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:209.
GPR[EPS]-1659894287936
GPR[ESUN]-1659894287936
GPR[SSUN]-1659894287937
-718432441
GPR[SPVATF]-1659894288145
GPR[EPVATF]-1659894288561
GPR[SPS]-1659894288561
[2795610] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:208.
GPR[EPS]-1659894289181
GPR[ESUN]-1659894289181
GPR[SSUN]-1659894289181
1439236327
GPR[ESUN]-1659894289404
GPR[SSUN]-1659894289404
1439236327
GPR[SPVATF]-1659894289627
GPR[EPVATF]-1659894290042
GPR[SPS]-1659894290042
GPR[EPS]-1659894302476
GPR[ESUN]-1659894302476
GPR[SSUN]-1659894302476
1439236327
GPR[SPVATF]-1659894302701
GPR[EPVATF]-1659894303126
GPR[SPS]-1659894303126
[2810105] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:144.
GPR[EPS]-1659894303676
GPR[SPVATF]-1659894303676
GPR[EPVATF]-1659894304093
GPR[SPS]-1659894304093
[2811045] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:144.
GPR[EPS]-1659894304616
GPR[ESUN]-1659894304616
GPR[SSUN]-1659894304616
1439236327
GPR[ESUN]-1659894304838
GPR[SSUN]-1659894304838
1439236327
GPR[SPVATF]-1659894305059
GPR[EPVATF]-1659894305511
GPR[SPS]-1659894305511
[2812461] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:141.
GPR[EPS]-1659894306032
GPR[ESUN]-1659894306032
GPR[SSUN]-1659894306032
1439236327
GPR[ESUN]-1659894306257
GPR[SSUN]-1659894306257
1439236327
GPR[SPVATF]-1659894306500
GPR[EPVATF]-1659894306945
GPR[SPS]-1659894306945
GPR[EPS]-1659894309775
GPR[SPVATR]-1659894309775
[2816204] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:783: PRECONDITION (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) || (com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty())
[2816556] INFO TestPatch - Running test suite to check the patch "(com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) || (com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty())" is working
GPR[EPVATR]-1659894311396
[2817825] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659894311396
[2817829] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -782,63 +782,65 @@
 
-    for (Iterator<Var> it = maybeUnreferenced.iterator(); it.hasNext(); ) {
-      Var var = it.next();
-
-      // Remove calls to inheritance-defining functions where the unreferenced
-      // class is the subclass.
-      for (Node exprCallNode : inheritsCalls.get(var)) {
-        NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode);
-        compiler.reportCodeChange();
-      }
-
-      // Regardless of what happens to the original declaration,
-      // we need to remove all assigns, because they may contain references
-      // to other unreferenced variables.
-      removeAllAssigns(var);
-
-      compiler.addToDebugLog("Unreferenced var: " + var.name);
-      Node nameNode = var.nameNode;
-      Node toRemove = nameNode.getParent();
-      Node parent = toRemove.getParent();
-
-      Preconditions.checkState(
-          toRemove.isVar() ||
-          toRemove.isFunction() ||
-          toRemove.isParamList() &&
-          parent.isFunction(),
-          "We should only declare vars and functions and function args");
-
-      if (toRemove.isParamList() &&
-          parent.isFunction()) {
-        // Don't remove function arguments here. That's a special case
-        // that's taken care of in removeUnreferencedFunctionArgs.
-      } else if (NodeUtil.isFunctionExpression(toRemove)) {
-        if (!preserveFunctionExpressionNames) {
-          toRemove.getFirstChild().setString("");
+    if ((com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals) || (com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty())) {
+      for (Iterator<Var> it = maybeUnreferenced.iterator(); it.hasNext(); ) {
+        Var var = it.next();
+        
+        // Remove calls to inheritance-defining functions where the unreferenced
+        // class is the subclass.
+        for (Node exprCallNode : inheritsCalls.get(var)) {
+          NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode);
           compiler.reportCodeChange();
         }
-        // Don't remove bleeding functions.
-      } else if (parent != null &&
-          parent.isFor() &&
-          parent.getChildCount() < 4) {
-        // foreach iterations have 3 children. Leave them alone.
-      } else if (toRemove.isVar() &&
-          nameNode.hasChildren() &&
-          NodeUtil.mayHaveSideEffects(nameNode.getFirstChild())) {
-        // If this is a single var declaration, we can at least remove the
-        // declaration itself and just leave the value, e.g.,
-        // var a = foo(); => foo();
-        if (toRemove.getChildCount() == 1) {
-          parent.replaceChild(toRemove,
-              IR.exprResult(nameNode.removeFirstChild()));
+        
+        // Regardless of what happens to the original declaration,
+        // we need to remove all assigns, because they may contain references
+        // to other unreferenced variables.
+        removeAllAssigns(var);
+        
+        compiler.addToDebugLog("Unreferenced var: " + var.name);
+        Node nameNode = var.nameNode;
+        Node toRemove = nameNode.getParent();
+        Node parent = toRemove.getParent();
+        
+        Preconditions.checkState(
+        toRemove.isVar() ||
+        toRemove.isFunction() ||
+        toRemove.isParamList() &&
+        parent.isFunction(),
+        "We should only declare vars and functions and function args");
+        
+        if (toRemove.isParamList() &&
+        parent.isFunction()) {
+          // Don't remove function arguments here. That's a special case
+          // that's taken care of in removeUnreferencedFunctionArgs.
+        } else if (NodeUtil.isFunctionExpression(toRemove)) {
+          if (!preserveFunctionExpressionNames) {
+            toRemove.getFirstChild().setString("");
+            compiler.reportCodeChange();
+          }
+          // Don't remove bleeding functions.
+        } else if (parent != null &&
+        parent.isFor() &&
+        parent.getChildCount() < 4) {
+          // foreach iterations have 3 children. Leave them alone.
+        } else if (toRemove.isVar() &&
+        nameNode.hasChildren() &&
+        NodeUtil.mayHaveSideEffects(nameNode.getFirstChild())) {
+          // If this is a single var declaration, we can at least remove the
+          // declaration itself and just leave the value, e.g.,
+          // var a = foo(); => foo();
+          if (toRemove.getChildCount() == 1) {
+            parent.replaceChild(toRemove,
+            IR.exprResult(nameNode.removeFirstChild()));
+            compiler.reportCodeChange();
+          }
+        } else if (toRemove.isVar() &&
+        toRemove.getChildCount() > 1) {
+          // For var declarations with multiple names (i.e. var a, b, c),
+          // only remove the unreferenced name
+          toRemove.removeChild(nameNode);
           compiler.reportCodeChange();
+        } else if (parent != null) {
+          NodeUtil.removeChild(parent, toRemove);
+          compiler.reportCodeChange();
         }
-      } else if (toRemove.isVar() &&
-          toRemove.getChildCount() > 1) {
-        // For var declarations with multiple names (i.e. var a, b, c),
-        // only remove the unreferenced name
-        toRemove.removeChild(nameNode);
-        compiler.reportCodeChange();
-      } else if (parent != null) {
-        NodeUtil.removeChild(parent, toRemove);
-        compiler.reportCodeChange();
       }

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_2813420_15ts_1659894311400.diff
GPR[ESUN]-1659894311401
GPR[SSUN]-1659894311401
1439236327
GPR[ESUN]-1659894311627
GPR[SSUN]-1659894311627
1439236327
GPR[ESUN]-1659894311850
GPR[SSUN]-1659894311850
1439236327
GPR[ESUN]-1659894312073
GPR[SSUN]-1659894312073
1439236327
GPR[SPVATF]-1659894312297
GPR[EPVATF]-1659894312732
GPR[SPS]-1659894312732
[2819710] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:712.
GPR[EPS]-1659894313281
GPR[ESUN]-1659894313281
GPR[SSUN]-1659894313281
1439236327
GPR[SPVATF]-1659894313506
GPR[EPVATF]-1659894313948
GPR[SPS]-1659894313948
[2820901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:707.
GPR[EPS]-1659894314472
GPR[ESUN]-1659894314472
GPR[SSUN]-1659894314472
1439236327
GPR[ESUN]-1659894314695
GPR[SSUN]-1659894314695
1439236327
GPR[ESUN]-1659894314917
GPR[SSUN]-1659894314917
1439236327
GPR[SPVATF]-1659894315138
GPR[EPVATF]-1659894315598
GPR[SPS]-1659894315598
GPR[EPS]-1659894628845
GPR[ESUN]-1659894628845
GPR[SSUN]-1659894628845
1439236327
GPR[SPVATF]-1659894629212
GPR[EPVATF]-1659894630482
GPR[SPS]-1659894630482
[4935641] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659896429212
GPR[SSUN]-1659896429212
1439236327
GPR[SPVATF]-1659896429598
GPR[EPVATF]-1659896430023
GPR[SPS]-1659896430023
GPR[EPS]-1659896844979
GPR[EPS]-1659897400822
[6736028] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659898229599
GPR[SSUN]-1659898229599
1439236327
GPR[ESUN]-1659898230027
GPR[SSUN]-1659898230027
1439236327
GPR[ESUN]-1659898230247
GPR[SSUN]-1659898230247
1439236327
GPR[ESUN]-1659898230468
GPR[SSUN]-1659898230468
1439236327
GPR[SPVATF]-1659898230688
GPR[EPVATF]-1659898231047
GPR[SPS]-1659898231047
[6738013] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:178.
GPR[EPS]-1659898231584
GPR[ESUN]-1659898231584
GPR[SSUN]-1659898231584
1439236327
GPR[SPVATF]-1659898231805
GPR[EPVATF]-1659898232188
GPR[SPS]-1659898232188
GPR[EPS]-1659898234895
GPR[SPVATR]-1659898234895
[6741324] INFO TestPatch - Applying patch: com.google.javascript.jscomp.RemoveUnusedVars:177: PRECONDITION (com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty()) || (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals)
[6741701] INFO TestPatch - Running test suite to check the patch "(com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty()) || (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals)" is working
GPR[EPVATR]-1659898236368
[6742797] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659898236368
[6742800] INFO NoPol - --- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -176,3 +176,5 @@
     interpretAssigns();
-    removeUnreferencedVars();
+    if ((com.google.javascript.jscomp.RemoveUnusedVars.this.assignsByNode.isEmpty()) || (com.google.javascript.jscomp.RemoveUnusedVars.this.removeGlobals)) {
+      removeUnreferencedVars();
+    }
     for (Scope fnScope : allFunctionScopes) {

Saving patch at /experiment_home///results/Nopol/Closure/45/seed_261/patch_6738391_16ts_1659898236371.diff
GPR[ESUN]-1659898236372
GPR[SSUN]-1659898236372
1439236327
GPR[SPVATF]-1659898236603
GPR[EPVATF]-1659898236964
GPR[SPS]-1659898236964
[6743934] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:176.
GPR[EPS]-1659898237505
GPR[ESUN]-1659898237505
GPR[SSUN]-1659898237505
1439236327
GPR[SPVATF]-1659898237735
GPR[EPVATF]-1659898238130
GPR[SPS]-1659898238130
[6745111] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:172.
GPR[EPS]-1659898238682
GPR[SPVATF]-1659898238682
GPR[EPVATF]-1659898239040
GPR[SPS]-1659898239040
[6746011] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:172.
GPR[EPS]-1659898239582
GPR[ESUN]-1659898239582
GPR[SSUN]-1659898239582
1439236327
GPR[SPVATF]-1659898239803
GPR[EPVATF]-1659898240176
GPR[SPS]-1659898240176
GPR[EPS]-1659898251059
GPR[ESUN]-1659898251059
GPR[SSUN]-1659898251059
1439236327
GPR[ESUN]-1659898251281
GPR[SSUN]-1659898251281
1439236327
GPR[ESUN]-1659898251502
GPR[SSUN]-1659898251502
1439236327
GPR[SPVATF]-1659898251724
GPR[EPVATF]-1659898252099
GPR[SPS]-1659898252099
[6759074] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:160.
GPR[EPS]-1659898252645
GPR[SPVATF]-1659898252646
GPR[EPVATF]-1659898253032
GPR[SPS]-1659898253032
[6760006] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:160.
GPR[EPS]-1659898253577
GPR[ESUN]-1659898253577
GPR[SSUN]-1659898253577
1439236327
GPR[SPVATF]-1659898253799
GPR[EPVATF]-1659898254213
GPR[SPS]-1659898254213
GPR[EPS]-1659898260719
GPR[ESUN]-1659898260719
GPR[SSUN]-1659898260719
1439236327
GPR[SPVATF]-1659898260942
GPR[EPVATF]-1659898261331
GPR[SPS]-1659898261331
[6768342] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:155.
GPR[EPS]-1659898261913
GPR[SPVATF]-1659898261913
GPR[EPVATF]-1659898262301
GPR[SPS]-1659898262301
[6769280] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedVars:155.
GPR[EPS]-1659898262851
GPR[ESUN]-1659898262851
GPR[SSUN]-1659898262851
-1117079791
GPR[ESUN]-1659898263048
GPR[SSUN]-1659898263048
-1117079791
GPR[SPVATF]-1659898263241
GPR[EPVATF]-1659898263637
GPR[SPS]-1659898263637
[6770501] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:661.
GPR[EPS]-1659898264072
GPR[ESUN]-1659898264072
GPR[SSUN]-1659898264072
-1117079791
GPR[SPVATF]-1659898264266
GPR[EPVATF]-1659898264680
GPR[SPS]-1659898264680
[6771540] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:660.
GPR[EPS]-1659898265111
GPR[ESUN]-1659898265111
GPR[SSUN]-1659898265111
-1117079791
GPR[ESUN]-1659898265304
GPR[SSUN]-1659898265304
-1117079791
GPR[SPVATF]-1659898265496
GPR[EPVATF]-1659898265908
GPR[SPS]-1659898265908
[6772767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:248.
GPR[EPS]-1659898266338
GPR[ESUN]-1659898266338
GPR[SSUN]-1659898266338
-718432441
GPR[SPVATF]-1659898266550
GPR[EPVATF]-1659898266975
GPR[SPS]-1659898266975
[6774127] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:470.
GPR[EPS]-1659898267698
GPR[ESUN]-1659898267699
GPR[SSUN]-1659898267699
-718432441
GPR[SPVATF]-1659898267906
GPR[EPVATF]-1659898268342
GPR[SPS]-1659898268342
[6775489] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:469.
GPR[EPS]-1659898269060
GPR[ESUN]-1659898269060
GPR[SSUN]-1659898269060
-718432441
GPR[SPVATF]-1659898269268
GPR[EPVATF]-1659898269707
GPR[SPS]-1659898269707
[6776881] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:468.
GPR[EPS]-1659898270452
GPR[ESUN]-1659898270452
GPR[SSUN]-1659898270452
-718432441
GPR[SPVATF]-1659898270660
GPR[EPVATF]-1659898271091
GPR[SPS]-1659898271091
[6778266] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:467.
GPR[EPS]-1659898271837
GPR[ESUN]-1659898271837
GPR[SSUN]-1659898271838
-718432441
GPR[SPVATF]-1659898272046
GPR[EPVATF]-1659898272487
GPR[SPS]-1659898272487
[6779632] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:466.
GPR[EPS]-1659898273203
GPR[ESUN]-1659898273203
GPR[SSUN]-1659898273203
-718432441
GPR[SPVATF]-1659898273410
GPR[EPVATF]-1659898273863
GPR[SPS]-1659898273863
[6781001] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:463.
GPR[EPS]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274572
GPR[SSUN]-1659898274572
GPR[ESUN]-1659898274573
GPR[SSUN]-1659898274573
GPR[ESUN]-1659898274573
GPR[SSUN]-1659898274573
1537627151
GPR[ESUN]-1659898274773
GPR[SSUN]-1659898274773
-1345859678
GPR[ESUN]-1659898275014
GPR[SSUN]-1659898275014
-1345859678
GPR[ESUN]-1659898275254
GPR[SSUN]-1659898275254
-1345859678
GPR[SPVATF]-1659898275493
GPR[EPVATF]-1659898275951
GPR[SPS]-1659898275951
[6782960] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:420.
GPR[EPS]-1659898276531
GPR[ESUN]-1659898276531
GPR[SSUN]-1659898276531
-1345859678
GPR[ESUN]-1659898276769
GPR[SSUN]-1659898276769
-1345859678
GPR[SPVATF]-1659898277005
GPR[EPVATF]-1659898278278
GPR[SPS]-1659898278278
[6785302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:415.
GPR[EPS]-1659898278873
GPR[SPVATF]-1659898278873
GPR[EPVATF]-1659898279442
GPR[SPS]-1659898279442
[6786411] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:415.
GPR[EPS]-1659898279982
GPR[ESUN]-1659898279982
GPR[SSUN]-1659898279982
1187751237
GPR[ESUN]-1659898280253
GPR[SSUN]-1659898280253
-1117079791
GPR[ESUN]-1659898280442
GPR[SSUN]-1659898280442
-1117079791
GPR[SPVATF]-1659898280630
GPR[EPVATF]-1659898281044
GPR[SPS]-1659898281044
[6787922] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:240.
GPR[EPS]-1659898281493
GPR[ESUN]-1659898281493
GPR[SSUN]-1659898281493
-2054390034
GPR[ESUN]-1659898281728
GPR[SSUN]-1659898281728
-2054390034
GPR[SPVATF]-1659898281961
GPR[EPVATF]-1659898282357
GPR[SPS]-1659898282357
[6789285] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$NormalizeStatements:565.
GPR[EPS]-1659898282856
GPR[ESUN]-1659898282856
GPR[SSUN]-1659898282856
-2054390034
GPR[SPVATF]-1659898283092
GPR[EPVATF]-1659898283452
GPR[SPS]-1659898283452
[6790383] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$NormalizeStatements:564.
GPR[EPS]-1659898283954
GPR[ESUN]-1659898283954
GPR[SSUN]-1659898283954
-2054390034
GPR[ESUN]-1659898284187
GPR[SSUN]-1659898284187
-2054390034
GPR[SPVATF]-1659898284436
GPR[EPVATF]-1659898284805
GPR[SPS]-1659898284805
[6791727] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$NormalizeStatements:562.
GPR[EPS]-1659898285298
GPR[ESUN]-1659898285298
GPR[SSUN]-1659898285298
-2054390034
GPR[ESUN]-1659898285532
GPR[SSUN]-1659898285532
1187751237
GPR[SPVATF]-1659898285820
GPR[EPVATF]-1659898286215
GPR[SPS]-1659898286215
[6793362] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:869.
GPR[EPS]-1659898286933
GPR[ESUN]-1659898286933
GPR[SSUN]-1659898286933
1187751237
GPR[SPVATF]-1659898287197
GPR[EPVATF]-1659898287590
GPR[SPS]-1659898287590
[6794721] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:834.
GPR[EPS]-1659898288292
GPR[SPVATF]-1659898288293
GPR[EPVATF]-1659898288653
GPR[SPS]-1659898288653
[6795792] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:834.
GPR[EPS]-1659898289363
GPR[ESUN]-1659898289363
GPR[SSUN]-1659898289363
1187751237
GPR[ESUN]-1659898289626
GPR[SSUN]-1659898289626
1187751237
GPR[SPVATF]-1659898290001
GPR[EPVATF]-1659898290379
GPR[SPS]-1659898290379
[6797504] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1779.
GPR[EPS]-1659898291075
GPR[ESUN]-1659898291075
GPR[SSUN]-1659898291075
1187751237
GPR[SPVATF]-1659898291339
GPR[EPVATF]-1659898291706
GPR[SPS]-1659898291706
[6798906] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1776.
GPR[EPS]-1659898292477
GPR[SPVATF]-1659898292478
GPR[EPVATF]-1659898292849
GPR[SPS]-1659898292849
[6799980] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1776.
GPR[EPS]-1659898293551
GPR[ESUN]-1659898293551
GPR[SSUN]-1659898293551
711965926
GPR[ESUN]-1659898293724
GPR[SSUN]-1659898293724
711965926
GPR[SPVATF]-1659898293896
GPR[EPVATF]-1659898294332
GPR[SPS]-1659898294332
[6801170] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:37.
GPR[EPS]-1659898294741
GPR[ESUN]-1659898294741
GPR[SSUN]-1659898294741
1187751237
GPR[ESUN]-1659898295006
GPR[SSUN]-1659898295006
1187751237
GPR[ESUN]-1659898295269
GPR[SSUN]-1659898295269
1187751237
GPR[SPVATF]-1659898295534
GPR[EPVATF]-1659898295921
GPR[SPS]-1659898295921
[6803051] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1761.
GPR[EPS]-1659898296622
GPR[SPVATF]-1659898296622
GPR[EPVATF]-1659898297036
GPR[SPS]-1659898297036
[6804161] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1761.
GPR[EPS]-1659898297732
GPR[ESUN]-1659898297732
GPR[SSUN]-1659898297732
1187751237
GPR[ESUN]-1659898298003
GPR[SSUN]-1659898298004
1187751237
GPR[SPVATF]-1659898298272
GPR[EPVATF]-1659898298678
GPR[SPS]-1659898298678
[6805829] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1753.
GPR[EPS]-1659898299400
GPR[SPVATF]-1659898299400
GPR[EPVATF]-1659898299792
GPR[SPS]-1659898299792
[6806948] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1753.
GPR[EPS]-1659898300519
GPR[ESUN]-1659898300519
GPR[SSUN]-1659898300519
80988634
GPR[ESUN]-1659898300688
GPR[SSUN]-1659898300688
1187751237
GPR[ESUN]-1659898300951
GPR[SSUN]-1659898300951
-2054390034
GPR[ESUN]-1659898301186
GPR[SSUN]-1659898301186
-2054390034
GPR[SPVATF]-1659898301421
GPR[EPVATF]-1659898301821
GPR[SPS]-1659898301822
[6808756] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$NormalizeStatements:307.
GPR[EPS]-1659898302327
GPR[ESUN]-1659898302327
GPR[SSUN]-1659898302327
-2054390034
GPR[SPVATF]-1659898302562
GPR[EPVATF]-1659898302957
GPR[SPS]-1659898302957
[6809887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$NormalizeStatements:303.
GPR[EPS]-1659898303459
GPR[SPVATF]-1659898303459
GPR[EPVATF]-1659898303863
GPR[SPS]-1659898303863
[6810792] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$NormalizeStatements:303.
GPR[EPS]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
GPR[ESUN]-1659898304363
GPR[SSUN]-1659898304363
1537627151
GPR[ESUN]-1659898304561
GPR[SSUN]-1659898304561
-1345859678
GPR[ESUN]-1659898304800
GPR[SSUN]-1659898304800
79711797
GPR[SPVATF]-1659898305030
GPR[EPVATF]-1659898305430
GPR[SPS]-1659898305430
[6812220] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.Scope.Var> {
    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();

    private final com.google.javascript.jscomp.Scope parent;

    private final int depth;

    private final com.google.javascript.rhino.Node rootNode;

    private final com.google.javascript.rhino.jstype.ObjectType thisType;

    private final boolean isBottom;

    private com.google.javascript.jscomp.Scope.Var arguments;

    private static final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES = new com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.getParentNode() != null) && (var.getType() == null)) && var.getParentNode().isVar()) && (!var.isExtern());
        }
    };

    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        final java.lang.String name;

        final com.google.javascript.rhino.Node nameNode;

        private com.google.javascript.rhino.jstype.JSType type;

        private final com.google.javascript.rhino.JSDocInfo info;

        private final boolean typeInferred;

        final com.google.javascript.jscomp.CompilerInput input;

        final boolean isDefine;

        final int index;

        final com.google.javascript.jscomp.Scope scope;

        private boolean markedEscaped = false;

        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input, boolean isDefine, com.google.javascript.rhino.JSDocInfo info) {
            this.name = name;
            this.nameNode = nameNode;
            this.type = type;
            this.scope = scope;
            this.index = index;
            this.input = input;
            this.isDefine = isDefine;
            this.info = info;
            this.typeInferred = inferred;
        }

        @java.lang.Override
        public java.lang.String getName() {
            return name;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        com.google.javascript.jscomp.CompilerInput getInput() {
            return input;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return nameNode.getStaticSourceFile();
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return this;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getDeclaration() {
            return nameNode == null ? null : this;
        }

        public com.google.javascript.rhino.Node getParentNode() {
            return nameNode == null ? null : nameNode.getParent();
        }

        public boolean isBleedingFunction() {
            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }

        public boolean isGlobal() {
            return scope.isGlobal();
        }

        public boolean isLocal() {
            return scope.isLocal();
        }

        boolean isExtern() {
            return (input == null) || input.isExtern();
        }

        public boolean isConst() {
            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);
        }

        public boolean isDefine() {
            return isDefine;
        }

        public com.google.javascript.rhino.Node getInitialValue() {
            com.google.javascript.rhino.Node parent = getParentNode();
            int pType = parent.getType();
            if (pType == com.google.javascript.rhino.Token.FUNCTION) {
                return parent;
            } else if (pType == com.google.javascript.rhino.Token.ASSIGN) {
                return parent.getLastChild();
            } else if (pType == com.google.javascript.rhino.Token.VAR) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(236).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(236).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(236).collectInput("pType",pType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(236).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(236).collectInput("com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(236).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(236).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return nameNode.getFirstChild();

            } else {
                return null;
            }
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType getType() {
            return type;
        }

        public com.google.javascript.rhino.Node getNameNode() {
            return nameNode;
        }

        @java.lang.Override
        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return info;
        }

        void setType(com.google.javascript.rhino.jstype.JSType type) {
            com.google.common.base.Preconditions.checkState(isTypeInferred());
            this.type = type;
        }

        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {
            if (type != null) {
                type = type.resolve(errorReporter, scope);
            }
        }

        @java.lang.Override
        public boolean isTypeInferred() {
            return typeInferred;
        }

        public java.lang.String getInputName() {
            if (input == null) {
                return "<non-file>";
            } else {
                return input.getName();
            }
        }

        public boolean isNoShadow() {
            if ((info != null) && info.isNoShadow()) {
                return true;
            } else {
                return false;
            }
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));
            return otherVar.nameNode == nameNode;
        }

        @java.lang.Override
        public int hashCode() {
            return nameNode.hashCode();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("Scope.Var " + name) + "{") + type) + "}";
        }

        void markEscaped() {
            markedEscaped = true;
        }

        boolean isMarkedEscaped() {
            return markedEscaped;
        }
    }

    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {
        Arguments(com.google.javascript.jscomp.Scope scope) {
            super(false, "arguments", null, null, scope, -1, null, false, null);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));
            return otherVar.scope.getRootNode() == scope.getRootNode();
        }

        @java.lang.Override
        public int hashCode() {
            return java.lang.System.identityHashCode(this);
        }
    }

    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);
        this.parent = parent;
        this.rootNode = rootNode;
        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();
        if ((nodeType != null) && nodeType.isFunctionType()) {
            thisType = nodeType.toMaybeFunctionType().getTypeOfThis();
        } else {
            thisType = parent.thisType;
        }
        this.isBottom = false;
        this.depth = parent.depth + 1;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.parent = null;
        this.rootNode = rootNode;
        thisType = compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS);
        this.isBottom = false;
        this.depth = 0;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.rhino.jstype.ObjectType thisType) {
        this.parent = null;
        this.rootNode = rootNode;
        this.thisType = thisType;
        this.isBottom = true;
        this.depth = 0;
    }

    int getDepth() {
        return depth;
    }

    boolean isBottom() {
        return isBottom;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return rootNode;
    }

    public com.google.javascript.jscomp.Scope getParent() {
        return parent;
    }

    com.google.javascript.jscomp.Scope getGlobalScope() {
        com.google.javascript.jscomp.Scope result = this;
        while (result.getParent() != null) {
            result = result.getParent();
        } 
        return result;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return parent;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType getTypeOfThis() {
        return thisType;
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {
        return declare(name, nameNode, type, input, true);
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {
        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));
        com.google.common.base.Preconditions.checkState(vars.get(name) == null);
        com.google.javascript.rhino.JSDocInfo info = (nameNode == null) ? null : com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(nameNode);
        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input, (info != null) && info.isDefine(), info);
        vars.put(name, var);
        return var;
    }

    void undeclare(com.google.javascript.jscomp.Scope.Var var) {
        com.google.common.base.Preconditions.checkState(var.scope == this);
        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);
        vars.remove(var.name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {
        return getVar(name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String name) {
        return vars.get(name);
    }

    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {
        com.google.javascript.jscomp.Scope.Var var = vars.get(name);
        if (var != null) {
            return var;
        } else if (parent != null) {
            return parent.getVar(name);
        } else {
            return null;
        }
    }

    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {
        if (arguments == null) {
            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);
        }
        return arguments;
    }

    public boolean isDeclared(java.lang.String name, boolean recurse) {
        com.google.javascript.jscomp.Scope scope = this;
        if (scope.vars.containsKey(name)) {
            return true;
        }
        if ((scope.parent != null) && recurse) {
            return scope.parent.isDeclared(name, recurse);
        }
        return false;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {
        return vars.values().iterator();
    }

    java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getVarIterable() {
        return vars.values();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getReferences(com.google.javascript.jscomp.Scope.Var var) {
        return com.google.common.collect.ImmutableList.of(var);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return java.util.Collections.unmodifiableCollection(vars.values());
    }

    public int getVarCount() {
        return vars.size();
    }

    public boolean isGlobal() {
        return parent == null;
    }

    public boolean isLocal() {
        return !isGlobal();
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getDeclarativelyUnboundVarsWithoutTypes() {
        return com.google.common.collect.Iterators.filter(getVars(), com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);
    }
}
[6812221] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659898305792
GPR[SSUN]-1659898305792
79711797
GPR[SPVATF]-1659898306046
GPR[EPVATF]-1659898306502
GPR[SPS]-1659898306502
[6813289] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.Scope.Var> {
    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();

    private final com.google.javascript.jscomp.Scope parent;

    private final int depth;

    private final com.google.javascript.rhino.Node rootNode;

    private final com.google.javascript.rhino.jstype.ObjectType thisType;

    private final boolean isBottom;

    private com.google.javascript.jscomp.Scope.Var arguments;

    private static final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES = new com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.getParentNode() != null) && (var.getType() == null)) && var.getParentNode().isVar()) && (!var.isExtern());
        }
    };

    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        final java.lang.String name;

        final com.google.javascript.rhino.Node nameNode;

        private com.google.javascript.rhino.jstype.JSType type;

        private final com.google.javascript.rhino.JSDocInfo info;

        private final boolean typeInferred;

        final com.google.javascript.jscomp.CompilerInput input;

        final boolean isDefine;

        final int index;

        final com.google.javascript.jscomp.Scope scope;

        private boolean markedEscaped = false;

        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input, boolean isDefine, com.google.javascript.rhino.JSDocInfo info) {
            this.name = name;
            this.nameNode = nameNode;
            this.type = type;
            this.scope = scope;
            this.index = index;
            this.input = input;
            this.isDefine = isDefine;
            this.info = info;
            this.typeInferred = inferred;
        }

        @java.lang.Override
        public java.lang.String getName() {
            return name;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        com.google.javascript.jscomp.CompilerInput getInput() {
            return input;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return nameNode.getStaticSourceFile();
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return this;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getDeclaration() {
            return nameNode == null ? null : this;
        }

        public com.google.javascript.rhino.Node getParentNode() {
            return nameNode == null ? null : nameNode.getParent();
        }

        public boolean isBleedingFunction() {
            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }

        public boolean isGlobal() {
            return scope.isGlobal();
        }

        public boolean isLocal() {
            return scope.isLocal();
        }

        boolean isExtern() {
            return (input == null) || input.isExtern();
        }

        public boolean isConst() {
            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);
        }

        public boolean isDefine() {
            return isDefine;
        }

        public com.google.javascript.rhino.Node getInitialValue() {
            com.google.javascript.rhino.Node parent = getParentNode();
            int pType = parent.getType();
            if (pType == com.google.javascript.rhino.Token.FUNCTION) {
                return parent;
            } else if (pType == com.google.javascript.rhino.Token.ASSIGN) {
                return parent.getLastChild();
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(237).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("pType",pType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("pType == com.google.javascript.rhino.Token.VAR",pType == com.google.javascript.rhino.Token.VAR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectionEnds();
                }
                if (runtimeAngelicValue) if (pType == com.google.javascript.rhino.Token.VAR) {
                    return nameNode.getFirstChild();
                } else {
                    return null;
                }
            }
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType getType() {
            return type;
        }

        public com.google.javascript.rhino.Node getNameNode() {
            return nameNode;
        }

        @java.lang.Override
        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return info;
        }

        void setType(com.google.javascript.rhino.jstype.JSType type) {
            com.google.common.base.Preconditions.checkState(isTypeInferred());
            this.type = type;
        }

        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {
            if (type != null) {
                type = type.resolve(errorReporter, scope);
            }
        }

        @java.lang.Override
        public boolean isTypeInferred() {
            return typeInferred;
        }

        public java.lang.String getInputName() {
            if (input == null) {
                return "<non-file>";
            } else {
                return input.getName();
            }
        }

        public boolean isNoShadow() {
            if ((info != null) && info.isNoShadow()) {
                return true;
            } else {
                return false;
            }
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));
            return otherVar.nameNode == nameNode;
        }

        @java.lang.Override
        public int hashCode() {
            return nameNode.hashCode();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("Scope.Var " + name) + "{") + type) + "}";
        }

        void markEscaped() {
            markedEscaped = true;
        }

        boolean isMarkedEscaped() {
            return markedEscaped;
        }
    }

    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {
        Arguments(com.google.javascript.jscomp.Scope scope) {
            super(false, "arguments", null, null, scope, -1, null, false, null);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));
            return otherVar.scope.getRootNode() == scope.getRootNode();
        }

        @java.lang.Override
        public int hashCode() {
            return java.lang.System.identityHashCode(this);
        }
    }

    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);
        this.parent = parent;
        this.rootNode = rootNode;
        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();
        if ((nodeType != null) && nodeType.isFunctionType()) {
            thisType = nodeType.toMaybeFunctionType().getTypeOfThis();
        } else {
            thisType = parent.thisType;
        }
        this.isBottom = false;
        this.depth = parent.depth + 1;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.parent = null;
        this.rootNode = rootNode;
        thisType = compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS);
        this.isBottom = false;
        this.depth = 0;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.rhino.jstype.ObjectType thisType) {
        this.parent = null;
        this.rootNode = rootNode;
        this.thisType = thisType;
        this.isBottom = true;
        this.depth = 0;
    }

    int getDepth() {
        return depth;
    }

    boolean isBottom() {
        return isBottom;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return rootNode;
    }

    public com.google.javascript.jscomp.Scope getParent() {
        return parent;
    }

    com.google.javascript.jscomp.Scope getGlobalScope() {
        com.google.javascript.jscomp.Scope result = this;
        while (result.getParent() != null) {
            result = result.getParent();
        } 
        return result;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return parent;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType getTypeOfThis() {
        return thisType;
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {
        return declare(name, nameNode, type, input, true);
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {
        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));
        com.google.common.base.Preconditions.checkState(vars.get(name) == null);
        com.google.javascript.rhino.JSDocInfo info = (nameNode == null) ? null : com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(nameNode);
        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input, (info != null) && info.isDefine(), info);
        vars.put(name, var);
        return var;
    }

    void undeclare(com.google.javascript.jscomp.Scope.Var var) {
        com.google.common.base.Preconditions.checkState(var.scope == this);
        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);
        vars.remove(var.name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {
        return getVar(name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String name) {
        return vars.get(name);
    }

    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {
        com.google.javascript.jscomp.Scope.Var var = vars.get(name);
        if (var != null) {
            return var;
        } else if (parent != null) {
            return parent.getVar(name);
        } else {
            return null;
        }
    }

    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {
        if (arguments == null) {
            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);
        }
        return arguments;
    }

    public boolean isDeclared(java.lang.String name, boolean recurse) {
        com.google.javascript.jscomp.Scope scope = this;
        if (scope.vars.containsKey(name)) {
            return true;
        }
        if ((scope.parent != null) && recurse) {
            return scope.parent.isDeclared(name, recurse);
        }
        return false;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {
        return vars.values().iterator();
    }

    java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getVarIterable() {
        return vars.values();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getReferences(com.google.javascript.jscomp.Scope.Var var) {
        return com.google.common.collect.ImmutableList.of(var);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return java.util.Collections.unmodifiableCollection(vars.values());
    }

    public int getVarCount() {
        return vars.size();
    }

    public boolean isGlobal() {
        return parent == null;
    }

    public boolean isLocal() {
        return !isGlobal();
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getDeclarativelyUnboundVarsWithoutTypes() {
        return com.google.common.collect.Iterators.filter(getVars(), com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);
    }
}
[6813290] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659898306861
GPR[EPVATF]-1659898307283
GPR[SPS]-1659898307283
[6814201] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope$Var:245.
GPR[EPS]-1659898307772
GPR[ESUN]-1659898307772
GPR[SSUN]-1659898307772
1051872951
GPR[SPVATF]-1659898307983
GPR[EPVATF]-1659898308433
GPR[SPS]-1659898308433
[6815325] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:152.
GPR[EPS]-1659898308896
GPR[SPVATF]-1659898308896
GPR[EPVATF]-1659898309326
GPR[SPS]-1659898309326
[6816213] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:152.
GPR[EPS]-1659898309784
GPR[ESUN]-1659898309784
GPR[SSUN]-1659898309784
1187751237
GPR[SPVATF]-1659898310049
GPR[EPVATF]-1659898310468
GPR[SPS]-1659898310468
[6817603] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:921.
GPR[EPS]-1659898311174
GPR[SPVATF]-1659898311174
GPR[EPVATF]-1659898311606
GPR[SPS]-1659898311606
[6818741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:921.
GPR[EPS]-1659898312312
GPR[ESUN]-1659898312312
GPR[SSUN]-1659898312312
GPR[ESUN]-1659898312312
GPR[SSUN]-1659898312312
1051872951
GPR[SPVATF]-1659898312521
GPR[EPVATF]-1659898312953
GPR[SPS]-1659898312953
[6819845] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:140.
GPR[EPS]-1659898313416
GPR[ESUN]-1659898313416
GPR[SSUN]-1659898313416
1051872951
GPR[SPVATF]-1659898313672
GPR[EPVATF]-1659898314119
GPR[SPS]-1659898314119
[6821005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:150.
GPR[EPS]-1659898314576
GPR[SPVATF]-1659898314577
GPR[EPVATF]-1659898315050
GPR[SPS]-1659898315050
[6822818] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:150.
GPR[EPS]-1659898316389
GPR[ESUN]-1659898316389
GPR[SSUN]-1659898316389
80988634
GPR[ESUN]-1659898316571
GPR[SSUN]-1659898316571
-534884160
GPR[ESUN]-1659898316873
GPR[SSUN]-1659898316874
-534884160
GPR[SPVATF]-1659898317168
GPR[EPVATF]-1659898317619
GPR[SPS]-1659898317619
[6824909] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1889.
GPR[EPS]-1659898318480
GPR[ESUN]-1659898318480
GPR[SSUN]-1659898318480
-534884160
GPR[SPVATF]-1659898318785
GPR[EPVATF]-1659898319447
GPR[SPS]-1659898319447
[6826626] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1888.
GPR[EPS]-1659898320197
GPR[ESUN]-1659898320197
GPR[SSUN]-1659898320197
-534884160
GPR[SPVATF]-1659898320498
GPR[EPVATF]-1659898320870
GPR[SPS]-1659898320870
[6828021] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1887.
GPR[EPS]-1659898321592
GPR[ESUN]-1659898321593
GPR[SSUN]-1659898321593
1187751237
GPR[SPVATF]-1659898321854
GPR[EPVATF]-1659898322224
GPR[SPS]-1659898322224
[6829370] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:868.
GPR[EPS]-1659898322941
GPR[SPVATF]-1659898322960
GPR[EPVATF]-1659898323325
GPR[SPS]-1659898323325
[6830467] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:868.
GPR[EPS]-1659898324038
GPR[ESUN]-1659898324038
GPR[SSUN]-1659898324038
-718432441
GPR[SPVATF]-1659898324247
GPR[EPVATF]-1659898324609
GPR[SPS]-1659898324609
[6831749] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:171.
GPR[EPS]-1659898325320
GPR[ESUN]-1659898325320
GPR[SSUN]-1659898325320
GPR[ESUN]-1659898325320
GPR[SSUN]-1659898325320
GPR[ESUN]-1659898325320
GPR[SSUN]-1659898325320
2433571
GPR[SPVATF]-1659898325552
GPR[EPVATF]-1659898325938
GPR[SPS]-1659898325938
[6833014] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:653.
GPR[EPS]-1659898326585
GPR[ESUN]-1659898326585
GPR[SSUN]-1659898326585
2433571
GPR[SPVATF]-1659898326813
GPR[EPVATF]-1659898327176
GPR[SPS]-1659898327176
[6834254] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:652.
GPR[EPS]-1659898327825
GPR[ESUN]-1659898327825
GPR[SSUN]-1659898327825
2433571
GPR[SPVATF]-1659898328052
GPR[EPVATF]-1659898328415
GPR[SPS]-1659898328415
[6835479] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:651.
GPR[EPS]-1659898329050
GPR[ESUN]-1659898329050
GPR[SSUN]-1659898329050
2433571
GPR[SPVATF]-1659898329275
GPR[EPVATF]-1659898329636
GPR[SPS]-1659898329636
[6836747] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:650.
GPR[EPS]-1659898330318
GPR[ESUN]-1659898330318
GPR[SSUN]-1659898330318
-718432441
GPR[SPVATF]-1659898330525
GPR[EPVATF]-1659898330889
GPR[SPS]-1659898330889
[6838029] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:176.
GPR[EPS]-1659898331600
GPR[ESUN]-1659898331600
GPR[SSUN]-1659898331600
-718432441
GPR[SPVATF]-1659898331807
GPR[EPVATF]-1659898332168
GPR[SPS]-1659898332168
[6839303] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:175.
GPR[EPS]-1659898332874
GPR[ESUN]-1659898332874
GPR[SSUN]-1659898332874
-718432441
GPR[SPVATF]-1659898333082
GPR[EPVATF]-1659898333443
GPR[SPS]-1659898333443
[6840567] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:170.
GPR[EPS]-1659898334138
GPR[SPVATF]-1659898334138
GPR[EPVATF]-1659898334534
GPR[SPS]-1659898334534
[6841661] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:170.
GPR[EPS]-1659898335232
GPR[ESUN]-1659898335232
GPR[SSUN]-1659898335233
-718432441
GPR[SPVATF]-1659898335439
GPR[EPVATF]-1659898335829
GPR[SPS]-1659898335829
[6842965] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:169.
GPR[EPS]-1659898336536
GPR[ESUN]-1659898336537
GPR[SSUN]-1659898336537
79711797
GPR[SPVATF]-1659898336765
GPR[EPVATF]-1659898337127
GPR[SPS]-1659898337127
[6843952] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.Scope.Var> {
    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();

    private final com.google.javascript.jscomp.Scope parent;

    private final int depth;

    private final com.google.javascript.rhino.Node rootNode;

    private final com.google.javascript.rhino.jstype.ObjectType thisType;

    private final boolean isBottom;

    private com.google.javascript.jscomp.Scope.Var arguments;

    private static final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES = new com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.getParentNode() != null) && (var.getType() == null)) && var.getParentNode().isVar()) && (!var.isExtern());
        }
    };

    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        final java.lang.String name;

        final com.google.javascript.rhino.Node nameNode;

        private com.google.javascript.rhino.jstype.JSType type;

        private final com.google.javascript.rhino.JSDocInfo info;

        private final boolean typeInferred;

        final com.google.javascript.jscomp.CompilerInput input;

        final boolean isDefine;

        final int index;

        final com.google.javascript.jscomp.Scope scope;

        private boolean markedEscaped = false;

        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input, boolean isDefine, com.google.javascript.rhino.JSDocInfo info) {
            this.name = name;
            this.nameNode = nameNode;
            this.type = type;
            this.scope = scope;
            this.index = index;
            this.input = input;
            this.isDefine = isDefine;
            this.info = info;
            this.typeInferred = inferred;
        }

        @java.lang.Override
        public java.lang.String getName() {
            return name;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        com.google.javascript.jscomp.CompilerInput getInput() {
            return input;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return nameNode.getStaticSourceFile();
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return this;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getDeclaration() {
            return nameNode == null ? null : this;
        }

        public com.google.javascript.rhino.Node getParentNode() {
            return nameNode == null ? null : nameNode.getParent();
        }

        public boolean isBleedingFunction() {
            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }

        public boolean isGlobal() {
            return scope.isGlobal();
        }

        public boolean isLocal() {
            return scope.isLocal();
        }

        boolean isExtern() {
            return (input == null) || input.isExtern();
        }

        public boolean isConst() {
            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);
        }

        public boolean isDefine() {
            return isDefine;
        }

        public com.google.javascript.rhino.Node getInitialValue() {
            com.google.javascript.rhino.Node parent = getParentNode();
            int pType = parent.getType();
            if (pType == com.google.javascript.rhino.Token.FUNCTION) {
                return parent;
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(261).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(261).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(261).collectInput("pType",pType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(261).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(261).collectInput("pType == com.google.javascript.rhino.Token.ASSIGN",pType == com.google.javascript.rhino.Token.ASSIGN);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(261).collectInput("com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(261).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(261).collectionEnds();
                }
                if (runtimeAngelicValue) if (pType == com.google.javascript.rhino.Token.ASSIGN) {
                    return parent.getLastChild();
                } else if (pType == com.google.javascript.rhino.Token.VAR) {
                    return nameNode.getFirstChild();
                } else {
                    return null;
                }
            }
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType getType() {
            return type;
        }

        public com.google.javascript.rhino.Node getNameNode() {
            return nameNode;
        }

        @java.lang.Override
        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return info;
        }

        void setType(com.google.javascript.rhino.jstype.JSType type) {
            com.google.common.base.Preconditions.checkState(isTypeInferred());
            this.type = type;
        }

        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {
            if (type != null) {
                type = type.resolve(errorReporter, scope);
            }
        }

        @java.lang.Override
        public boolean isTypeInferred() {
            return typeInferred;
        }

        public java.lang.String getInputName() {
            if (input == null) {
                return "<non-file>";
            } else {
                return input.getName();
            }
        }

        public boolean isNoShadow() {
            if ((info != null) && info.isNoShadow()) {
                return true;
            } else {
                return false;
            }
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));
            return otherVar.nameNode == nameNode;
        }

        @java.lang.Override
        public int hashCode() {
            return nameNode.hashCode();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("Scope.Var " + name) + "{") + type) + "}";
        }

        void markEscaped() {
            markedEscaped = true;
        }

        boolean isMarkedEscaped() {
            return markedEscaped;
        }
    }

    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {
        Arguments(com.google.javascript.jscomp.Scope scope) {
            super(false, "arguments", null, null, scope, -1, null, false, null);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));
            return otherVar.scope.getRootNode() == scope.getRootNode();
        }

        @java.lang.Override
        public int hashCode() {
            return java.lang.System.identityHashCode(this);
        }
    }

    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);
        this.parent = parent;
        this.rootNode = rootNode;
        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();
        if ((nodeType != null) && nodeType.isFunctionType()) {
            thisType = nodeType.toMaybeFunctionType().getTypeOfThis();
        } else {
            thisType = parent.thisType;
        }
        this.isBottom = false;
        this.depth = parent.depth + 1;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.parent = null;
        this.rootNode = rootNode;
        thisType = compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS);
        this.isBottom = false;
        this.depth = 0;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.rhino.jstype.ObjectType thisType) {
        this.parent = null;
        this.rootNode = rootNode;
        this.thisType = thisType;
        this.isBottom = true;
        this.depth = 0;
    }

    int getDepth() {
        return depth;
    }

    boolean isBottom() {
        return isBottom;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return rootNode;
    }

    public com.google.javascript.jscomp.Scope getParent() {
        return parent;
    }

    com.google.javascript.jscomp.Scope getGlobalScope() {
        com.google.javascript.jscomp.Scope result = this;
        while (result.getParent() != null) {
            result = result.getParent();
        } 
        return result;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return parent;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType getTypeOfThis() {
        return thisType;
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {
        return declare(name, nameNode, type, input, true);
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {
        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));
        com.google.common.base.Preconditions.checkState(vars.get(name) == null);
        com.google.javascript.rhino.JSDocInfo info = (nameNode == null) ? null : com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(nameNode);
        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input, (info != null) && info.isDefine(), info);
        vars.put(name, var);
        return var;
    }

    void undeclare(com.google.javascript.jscomp.Scope.Var var) {
        com.google.common.base.Preconditions.checkState(var.scope == this);
        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);
        vars.remove(var.name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {
        return getVar(name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String name) {
        return vars.get(name);
    }

    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {
        com.google.javascript.jscomp.Scope.Var var = vars.get(name);
        if (var != null) {
            return var;
        } else if (parent != null) {
            return parent.getVar(name);
        } else {
            return null;
        }
    }

    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {
        if (arguments == null) {
            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);
        }
        return arguments;
    }

    public boolean isDeclared(java.lang.String name, boolean recurse) {
        com.google.javascript.jscomp.Scope scope = this;
        if (scope.vars.containsKey(name)) {
            return true;
        }
        if ((scope.parent != null) && recurse) {
            return scope.parent.isDeclared(name, recurse);
        }
        return false;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {
        return vars.values().iterator();
    }

    java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getVarIterable() {
        return vars.values();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getReferences(com.google.javascript.jscomp.Scope.Var var) {
        return com.google.common.collect.ImmutableList.of(var);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return java.util.Collections.unmodifiableCollection(vars.values());
    }

    public int getVarCount() {
        return vars.size();
    }

    public boolean isGlobal() {
        return parent == null;
    }

    public boolean isLocal() {
        return !isGlobal();
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getDeclarativelyUnboundVarsWithoutTypes() {
        return com.google.common.collect.Iterators.filter(getVars(), com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);
    }
}
[6843952] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659898337523
GPR[EPVATF]-1659898337899
GPR[SPS]-1659898337899
GPR[EPS]-1659898363871
GPR[ESUN]-1659898363871
GPR[SSUN]-1659898363871
-1117079791
GPR[SPVATF]-1659898364156
GPR[EPVATF]-1659898364534
GPR[SPS]-1659898364534
[6871400] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:483.
GPR[EPS]-1659898364971
GPR[ESUN]-1659898364972
GPR[SSUN]-1659898364972
2433571
GPR[SPVATF]-1659898365197
GPR[EPVATF]-1659898365573
GPR[SPS]-1659898365573
[6872658] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:550.
GPR[EPS]-1659898366229
GPR[SPVATF]-1659898366230
GPR[EPVATF]-1659898366588
GPR[SPS]-1659898366588
[6873656] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:550.
GPR[EPS]-1659898367227
GPR[ESUN]-1659898367227
GPR[SSUN]-1659898367227
2433571
GPR[SPVATF]-1659898367453
GPR[EPVATF]-1659898367826
GPR[SPS]-1659898367826
[7142954] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659898646545
GPR[SSUN]-1659898650161
\n\nNode: host-52\n
\n\nDate: Sun 07 Aug 2022 12:55:24 PM PDT\n
End running Nopol Closure/45 results at /experiment_home///results/Nopol/Closure/45/seed_261/
Removing checked out dir script/workingdir/Nopol/Closure_45
GPR[SSLE]-1659902124768
GPR[ESLE]-1659902184774
