Sleep 1m start
GPR[SSLI]-1661315465567
GPR[ESLI]-1661315525571
Running SimFix Lang 44b
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
Timezone: America/Los_Angeles
Seed 284
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Killing all java process
Creating out dir /experiment_home///results/SimFix/Lang/44/seed_284/
Project lc: lang
New out script/workingdir/SimFix/lang/lang_44_buggy
The file script/workingdir/SimFix/lang/lang_44_buggy does not exist!
script/workingdir/SimFix/lang/lang_44_buggy
Current directory: script/workingdir/SimFix/lang/lang_44_buggy
classpath:  script/workingdir/SimFix/lang/lang_44_buggy/target/classes:script/workingdir/SimFix/lang/lang_44_buggy/target/tests:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:/experiment_home/defects4j/framework/projects/Lang/lib/cglib.jar:/experiment_home/defects4j/framework/projects/Lang/lib/asm.jar:/experiment_home/defects4j/framework/projects/Lang/lib/easymock.jar:/experiment_home/defects4j/framework/projects/Lang/lib/commons-io.jar
Src java:  /src/java
Classes Java:  /target/classes
Src Test:  /src/test
Classes Test:  /target/tests
GPR[SSLB]-1661315537008
GPR[ESLB]-1661315597012
Calling SimFix: at script/workingdir/SimFix/lang/lang_44_buggy
build.xml
checkstyle.xml
d4j-info
default.properties
defects4j.build.properties
doap_lang.rdf
LICENSE.txt
NOTICE.txt
pom.xml
PROPOSAL.html
RELEASE-NOTES.txt
src
target
xdocs
content current dir: build.xml checkstyle.xml d4j-info default.properties defects4j.build.properties doap_lang.rdf LICENSE.txt NOTICE.txt pom.xml PROPOSAL.html RELEASE-NOTES.txt src target xdocs
Node: host-57
Date init: Tue 23 Aug 2022 09:33:19 PM PDT
OAR_JOB_ID: 3743711
script/workingdir/SimFix/
GPR[SSUP]-1661315599236
=================================================
Project : lang_44	start : 22/08/23 21:33

GPR[ESUP]-1661315600535
MM Purify? false
GPR[SFL]-1661315600687
GPR[EFL]-1661315600732
GPR[SFP]-1661315600732
TIMEOUT : 18000000
GPR[SSUN]-1661315600741
org.apache.commons.lang.NumberUtils,139
GPR[ESUN]-1661315601268
GPR[SSUN]-1661315601268
org.apache.commons.lang.NumberUtils,142
========
if(searchStr.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315602127
GPR[SPVAP]-1661315602127
GPR[EPVAP]-1661315603271
GPR[EPVS]-1661315603271
========
if(prefix.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315603273
GPR[SPVAP]-1661315603273
GPR[EPVAP]-1661315604242
GPR[EPVS]-1661315604242
========
if(suffix.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315604244
GPR[SPVAP]-1661315604244
GPR[EPVAP]-1661315605204
GPR[EPVS]-1661315605204
========
if(val.length()==0){
if(val==null){
return null;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315605206
GPR[SPVAP]-1661315605206
GPR[EPVAP]-1661315608279
GPR[SPVATF]-1661315608279
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315609212
GPR[EPVS]-1661315609212
========
if(className.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315609214
GPR[SPVAP]-1661315609214
GPR[EPVAP]-1661315609841
GPR[EPVS]-1661315609841
========
if(val.length()==0){
if(val.length()==0){
return StringUtils.EMPTY;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315609842
GPR[SPVAP]-1661315609842
GPR[EPVAP]-1661315610488
GPR[EPVS]-1661315610488
========
if(val.length()==0){
if(val.length()==0){
return 0;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315610490
GPR[SPVAP]-1661315610490
GPR[EPVAP]-1661315611126
GPR[EPVS]-1661315611126
========
if(str.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315611127
GPR[SPVAP]-1661315611127
GPR[EPVAP]-1661315611753
GPR[EPVS]-1661315611753
========
if(val.length()==0){
if(val.length()==0){
return true;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315611754
GPR[SPVAP]-1661315611754
GPR[EPVAP]-1661315612386
GPR[EPVS]-1661315612386
========
if(val.length()==0){
if(val.length()==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315612388
GPR[SPVAP]-1661315612388
GPR[EPVAP]-1661315613012
GPR[EPVS]-1661315613012
========
if(str.length()==0){
if(val.length()==0){
return StringUtils.EMPTY;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315613013
GPR[SPVAP]-1661315613013
GPR[EPVAP]-1661315613646
GPR[EPVS]-1661315613646
========
if(str2.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315613648
GPR[SPVAP]-1661315613648
GPR[EPVAP]-1661315614280
GPR[EPVS]-1661315614280
========
if(val.length()==0){
throw new IllegalArgumentException("Strings must not be null");
}

========
MM Copying to MM
GPR[SPVS]-1661315614282
GPR[SPVAP]-1661315614282
GPR[EPVAP]-1661315615379
GPR[SPVATF]-1661315615379
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315616318
GPR[EPVS]-1661315616318
========
if(val.length()!=0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315616320
GPR[SPVAP]-1661315616320
GPR[EPVAP]-1661315617414
GPR[SPVATF]-1661315617414
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 0
GPR[EPVATF]-1661315618356
GPR[SPVATR]-1661315618357
TESTING : lang_44
MM message  - org.apache.commons.lang.NumberUtilsTest::testIsNumber
MM message  - org.apache.commons.lang.NumberUtilsTest::testCreateNumber
MM messageFailing tests: 2
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661315628821
GPR[EPVS]-1661315628821
========
if(tmp.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315628823
GPR[SPVAP]-1661315628823
GPR[EPVAP]-1661315629470
GPR[EPVS]-1661315629470
========
if(tmp.length()!=0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315629472
GPR[SPVAP]-1661315629472
GPR[EPVAP]-1661315630103
GPR[EPVS]-1661315630103
========
if((val==null)||(val.length()==0)){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315630104
GPR[SPVAP]-1661315630104
GPR[EPVAP]-1661315631196
GPR[SPVATF]-1661315631196
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315632115
GPR[EPVS]-1661315632115
========
if(val.length()==0){
if((val==null)||(str.length()==0)){
return false;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315632117
GPR[SPVAP]-1661315632117
GPR[EPVAP]-1661315632753
GPR[EPVS]-1661315632753
========
if(separator.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315632754
GPR[SPVAP]-1661315632754
GPR[EPVAP]-1661315633382
GPR[EPVS]-1661315633382
========
if(val.length()==0){
if(val.length()==0){
return EMPTY;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315633383
GPR[SPVAP]-1661315633383
GPR[EPVAP]-1661315634015
GPR[EPVS]-1661315634015
========
if(val.length()==0){
if(val.length()==0){
return str;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315634017
GPR[SPVAP]-1661315634017
GPR[EPVAP]-1661315634649
GPR[EPVS]-1661315634649
========
if(val.length()==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
if(val.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315634650
GPR[SPVAP]-1661315634650
GPR[EPVAP]-1661315635288
GPR[EPVS]-1661315635288
========
if(val.length()==0){
if(val==null){
return false;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315635290
GPR[SPVAP]-1661315635290
GPR[EPVAP]-1661315635922
GPR[EPVS]-1661315635923
========
if(val.length()==0){
return true;
}
if(val.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315635924
GPR[SPVAP]-1661315635924
GPR[EPVAP]-1661315636552
GPR[EPVS]-1661315636552
========
if(val==null||val.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315636554
GPR[SPVAP]-1661315636554
GPR[EPVAP]-1661315637649
GPR[SPVATF]-1661315637649
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315638582
GPR[EPVS]-1661315638582
========
if(val.length()==0){
if(val==null||chars.length()==0){
return NONE_MATCHER;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315638583
GPR[SPVAP]-1661315638583
GPR[EPVAP]-1661315639214
GPR[EPVS]-1661315639214
========
if(val.length()==0){
if(val==null||str.length()==0){
return NONE_MATCHER;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315639216
GPR[SPVAP]-1661315639216
GPR[EPVAP]-1661315639847
GPR[EPVS]-1661315639847
========
if(val.length()==0){
if(val==null||str.length()==0){
return str;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315639849
GPR[SPVAP]-1661315639849
GPR[EPVAP]-1661315640488
GPR[EPVS]-1661315640488
========
if(chars.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315640490
GPR[SPVAP]-1661315640490
GPR[EPVAP]-1661315641119
GPR[EPVS]-1661315641119
========
if(val.length()==0){
if(val.length()==1){
return new CharMatcher(chars.charAt(0));
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315641121
GPR[SPVAP]-1661315641121
GPR[EPVAP]-1661315641765
GPR[EPVS]-1661315641765
========
if(val.length()<2){
return EMPTY;
}
if(val.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315641766
GPR[SPVAP]-1661315641766
GPR[EPVAP]-1661315642395
GPR[EPVS]-1661315642395
========
if(val!=null&&val.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315642396
GPR[SPVAP]-1661315642396
GPR[EPVAP]-1661315643498
GPR[SPVATF]-1661315643499
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315644427
GPR[EPVS]-1661315644427
========
if(val.length()==0){
throw new IllegalArgumentException("The validated string is empty");
}

========
MM Copying to MM
GPR[SPVS]-1661315644428
GPR[SPVAP]-1661315644428
GPR[EPVAP]-1661315645539
GPR[SPVATF]-1661315645540
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315646485
GPR[EPVS]-1661315646485
========
if(val==null||val.length()==0){
throw new IllegalArgumentException("The validated string is empty");
}

========
MM Copying to MM
GPR[SPVS]-1661315646487
GPR[SPVAP]-1661315646487
GPR[EPVAP]-1661315647585
GPR[SPVATF]-1661315647585
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315648515
GPR[EPVS]-1661315648515
========
if(val.length()==0){
if(val==null){
return ;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315648517
GPR[SPVAP]-1661315648517
GPR[EPVAP]-1661315649159
GPR[EPVS]-1661315649159
========
if(val==null||val.length()==0||searchChars.length==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315649161
GPR[SPVAP]-1661315649161
GPR[EPVAP]-1661315649790
GPR[EPVS]-1661315649790
========
if(val.length()==0){
throw new StringIndexOutOfBoundsException("startIndex must be valid");
}

========
MM Copying to MM
GPR[SPVS]-1661315649793
GPR[SPVAP]-1661315649793
GPR[EPVAP]-1661315650876
GPR[SPVATF]-1661315650876
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315651820
GPR[EPVS]-1661315651820
========
if(val.length()==0){
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315651823
GPR[SPVAP]-1661315651823
GPR[EPVAP]-1661315652910
GPR[SPVATF]-1661315652910
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315653831
GPR[EPVS]-1661315653831
========
if(val.length()==0){
if(val==null){
return appendNull();
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315653833
GPR[SPVAP]-1661315653833
GPR[EPVAP]-1661315654468
GPR[EPVS]-1661315654468
========
if(duration.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315654470
GPR[SPVAP]-1661315654470
GPR[EPVAP]-1661315655098
GPR[EPVS]-1661315655098
========
if(val==null||val.length()==0||searchList.length==0||replacementList.length==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315655100
GPR[SPVAP]-1661315655100
GPR[EPVAP]-1661315655740
GPR[EPVS]-1661315655740
========
if(text.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315655742
GPR[SPVAP]-1661315655742
GPR[EPVAP]-1661315656383
GPR[EPVS]-1661315656383
========
if(val.length()==0){
if(isIgnoreEmptyTokens()){
return ;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315656385
GPR[SPVAP]-1661315656385
GPR[EPVAP]-1661315657009
GPR[EPVS]-1661315657009
========
if(val.length()==0){
if(isEmptyTokenAsNull()){
tok=null;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315657011
GPR[SPVAP]-1661315657011
GPR[EPVAP]-1661315657647
GPR[EPVS]-1661315657647
========
if(val.length()!=2&&len!=5&&len<7){
throw new IllegalArgumentException("Invalid locale format: "+val);
}
if(val.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315657649
GPR[SPVAP]-1661315657649
GPR[EPVAP]-1661315658284
GPR[EPVS]-1661315658284
========
if(val.length()==0){
throw new StringIndexOutOfBoundsException("length must be valid");
}

========
MM Copying to MM
GPR[SPVS]-1661315658286
GPR[SPVAP]-1661315658286
GPR[EPVAP]-1661315659365
GPR[SPVATF]-1661315659365
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315660306
GPR[EPVS]-1661315660306
========
if(val.length()==0){
if(val.charAt(0)==CharUtils.CR||ch==CharUtils.LF){
return EMPTY;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315660308
GPR[SPVAP]-1661315660308
GPR[EPVAP]-1661315660944
GPR[EPVS]-1661315660944
========
if(val.length()==0){
return val;
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315660945
GPR[SPVAP]-1661315660945
GPR[EPVAP]-1661315661595
GPR[EPVS]-1661315661595
========
if(str1.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315661598
GPR[SPVAP]-1661315661598
GPR[EPVAP]-1661315662231
GPR[EPVS]-1661315662231
========
if(languageCode.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315662233
GPR[SPVAP]-1661315662233
GPR[EPVAP]-1661315662876
GPR[EPVS]-1661315662876
========
if(sub.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315662879
GPR[SPVAP]-1661315662879
GPR[EPVAP]-1661315663525
GPR[EPVS]-1661315663525
========
if(searchChars.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315663527
GPR[SPVAP]-1661315663527
GPR[EPVAP]-1661315664154
GPR[EPVS]-1661315664154
========
if(countryCode.length()==0){
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315664156
GPR[SPVAP]-1661315664156
GPR[EPVAP]-1661315664790
GPR[EPVS]-1661315664790
========
if(val.length()==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
if(val.length()==0){
if(val==null){
return null;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315664793
GPR[SPVAP]-1661315664793
GPR[EPVAP]-1661315665424
GPR[EPVS]-1661315665424
========
if(val.length()==0){
return true;
}
if(val.length()==0){
if(val==null){
return false;
}
throw new NumberFormatException("\"\" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315665426
GPR[SPVAP]-1661315665426
GPR[EPVAP]-1661315666068
GPR[EPVS]-1661315666068
GPR[ESUN]-1661315666072
GPR[SSUN]-1661315666072
org.apache.commons.lang.NumberUtils,145
========
if(str.startsWith("--")){
return null;
}

========
MM Copying to MM
GPR[SPVS]-1661315666538
GPR[SPVAP]-1661315666538
GPR[EPVAP]-1661315667657
GPR[EPVS]-1661315667657
========
if(numeric.startsWith("--")){
return null;
}

========
MM Copying to MM
GPR[SPVS]-1661315667659
GPR[SPVAP]-1661315667659
GPR[EPVAP]-1661315668628
GPR[EPVS]-1661315668628
========
case 'f' :

if(val.startsWith("--")){
return null;
}

========
MM Copying to MM
GPR[SPVS]-1661315668630
GPR[SPVAP]-1661315668630
GPR[EPVAP]-1661315669264
GPR[EPVS]-1661315669264
========
if(className.startsWith("--")){
return null;
}

========
MM Copying to MM
GPR[SPVS]-1661315669265
GPR[SPVAP]-1661315669265
GPR[EPVAP]-1661315670213
GPR[EPVS]-1661315670213
GPR[ESUN]-1661315670213
GPR[SSUN]-1661315670213
org.apache.commons.lang.NumberUtils,152
========
if(str.startsWith("0x")||str.startsWith("-0x")){
return createInteger(val);
}

========
MM Copying to MM
GPR[SPVS]-1661315670607
GPR[SPVAP]-1661315670607
GPR[EPVAP]-1661315671714
GPR[EPVS]-1661315671714
========
if(str.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}

========
MM Copying to MM
GPR[SPVS]-1661315671715
GPR[SPVAP]-1661315671716
GPR[EPVAP]-1661315672692
GPR[EPVS]-1661315672692
========
if(val.startsWith("0x")||str.startsWith("-0x")){
return createInteger(val);
}

========
MM Copying to MM
GPR[SPVS]-1661315672694
GPR[SPVAP]-1661315672694
GPR[EPVAP]-1661315673656
GPR[EPVS]-1661315673656
========
if(val.startsWith("0x")||numeric.startsWith("-0x")){
return createInteger(val);
}

========
MM Copying to MM
GPR[SPVS]-1661315673658
GPR[SPVAP]-1661315673658
GPR[EPVAP]-1661315674612
GPR[EPVS]-1661315674612
========
case 'f' :

if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}

========
MM Copying to MM
GPR[SPVS]-1661315674614
GPR[SPVAP]-1661315674614
GPR[EPVAP]-1661315675268
GPR[EPVS]-1661315675268
========
if(val.startsWith("0x")&&val.startsWith("-0x")){
return createInteger(val);
}

========
MM Copying to MM
GPR[SPVS]-1661315675270
GPR[SPVAP]-1661315675270
GPR[EPVAP]-1661315678377
GPR[SPVATF]-1661315678377
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315679305
GPR[EPVS]-1661315679305
========
if(val.startsWith("0x")||pattern.startsWith("-0x")){
return createInteger(val);
}

========
MM Copying to MM
GPR[SPVS]-1661315679306
GPR[SPVAP]-1661315679306
GPR[EPVAP]-1661315679936
GPR[EPVS]-1661315679936
GPR[ESUN]-1661315679936
GPR[SSUN]-1661315679936
org.apache.commons.lang.NumberUtils,155
========
if(val.startsWith("--")){
return null;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315680934
GPR[SPVAP]-1661315680934
GPR[EPVAP]-1661315684087
GPR[SPVATF]-1661315684087
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315685014
GPR[EPVS]-1661315685014
========
if(str.startsWith("0x")||str.startsWith("-0x")){
return createInteger(val);
}
char lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315685017
GPR[SPVAP]-1661315685017
GPR[EPVAP]-1661315685652
GPR[EPVS]-1661315685652
========
if(val.startsWith("0x")||str.startsWith("-0x")){
return createInteger(val);
}
char lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315685653
GPR[SPVAP]-1661315685653
GPR[EPVAP]-1661315686281
GPR[EPVS]-1661315686281
========
if(str.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315686283
GPR[SPVAP]-1661315686283
GPR[EPVAP]-1661315686914
GPR[EPVS]-1661315686914
========
if(val.startsWith("0x")||str.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315686916
GPR[SPVAP]-1661315686916
GPR[EPVAP]-1661315687555
GPR[EPVS]-1661315687555
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315687556
GPR[SPVAP]-1661315687556
GPR[EPVAP]-1661315688201
GPR[EPVS]-1661315688201
========
if(str.startsWith("0x")||str.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315688204
GPR[SPVAP]-1661315688204
GPR[EPVAP]-1661315688834
GPR[EPVS]-1661315688834
========
if(str.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315688835
GPR[SPVAP]-1661315688835
GPR[EPVAP]-1661315689471
GPR[EPVS]-1661315689471
========
if(lastChar=='y'){
return (val.charAt(1)=='e'||str.charAt(1)=='E')&&(str.charAt(2)=='s'||str.charAt(2)=='S');
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315689474
GPR[SPVAP]-1661315689474
GPR[EPVAP]-1661315690104
GPR[EPVS]-1661315690104
========
if(lastChar=='Y'){
return (val.charAt(1)=='E'||str.charAt(1)=='e')&&(str.charAt(2)=='S'||str.charAt(2)=='s');
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315690106
GPR[SPVAP]-1661315690106
GPR[EPVAP]-1661315690745
GPR[EPVS]-1661315690745
========
if(lastChar=='t'){
return (val.charAt(1)=='r'||str.charAt(1)=='R')&&(str.charAt(2)=='u'||str.charAt(2)=='U');
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315690747
GPR[SPVAP]-1661315690747
GPR[EPVAP]-1661315691386
GPR[EPVS]-1661315691386
========
if(lastChar=='T'){
return (val.charAt(1)=='R'||str.charAt(1)=='r')&&(str.charAt(2)=='U'||str.charAt(2)=='u');
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315691387
GPR[SPVAP]-1661315691387
GPR[EPVAP]-1661315692021
GPR[EPVS]-1661315692021
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=suffix.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315692023
GPR[SPVAP]-1661315692023
GPR[EPVAP]-1661315692663
GPR[EPVS]-1661315692663
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
int lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315692664
GPR[SPVAP]-1661315692665
GPR[EPVAP]-1661315693774
GPR[SPVATF]-1661315693774
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315694705
GPR[EPVS]-1661315694706
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
int lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315694707
GPR[SPVAP]-1661315694707
GPR[EPVAP]-1661315695348
GPR[EPVS]-1661315695348
========
if(str.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
int lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315695350
GPR[SPVAP]-1661315695350
GPR[EPVAP]-1661315695995
GPR[EPVS]-1661315695995
========
if(str.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
int lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315695997
GPR[SPVAP]-1661315695998
GPR[EPVAP]-1661315696628
GPR[EPVS]-1661315696628
========
if(str1.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315696630
GPR[SPVAP]-1661315696630
GPR[EPVAP]-1661315697261
GPR[EPVS]-1661315697261
========
if(val.startsWith("0x")||str2.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315697262
GPR[SPVAP]-1661315697262
GPR[EPVAP]-1661315697898
GPR[EPVS]-1661315697898
========
if(className.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315697900
GPR[SPVAP]-1661315697900
GPR[EPVAP]-1661315698523
GPR[EPVS]-1661315698523
========
if(searchStr.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315698525
GPR[SPVAP]-1661315698525
GPR[EPVAP]-1661315699159
GPR[EPVS]-1661315699159
========
if(val.length()-1<=0){
return EMPTY;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315699161
GPR[SPVAP]-1661315699161
GPR[EPVAP]-1661315699800
GPR[EPVS]-1661315699800
========
if(val.length()==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315699801
GPR[SPVAP]-1661315699801
GPR[EPVAP]-1661315700440
GPR[EPVS]-1661315700440
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=token.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315700443
GPR[SPVAP]-1661315700443
GPR[EPVAP]-1661315701073
GPR[EPVS]-1661315701073
========
if(val.length()==0){
break;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315701074
GPR[SPVAP]-1661315701074
GPR[EPVAP]-1661315701703
GPR[EPVS]-1661315701703
========
if(val.length()!=2&&len!=5&&len<7){
throw new IllegalArgumentException("Invalid locale format: "+val);
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315701705
GPR[SPVAP]-1661315701705
GPR[EPVAP]-1661315702337
GPR[EPVS]-1661315702337
========
if(lastChar<'a'||ch0>'z'||val.charAt(1)<'a'||ch1>'z'){
throw new IllegalArgumentException("Invalid locale format: "+val);
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315702338
GPR[SPVAP]-1661315702338
GPR[EPVAP]-1661315702979
GPR[EPVS]-1661315702979
========
if(s.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315702980
GPR[SPVAP]-1661315702980
GPR[EPVAP]-1661315703631
GPR[EPVS]-1661315703631
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=s.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315703633
GPR[SPVAP]-1661315703633
GPR[EPVAP]-1661315704266
GPR[EPVS]-1661315704266
========
if(val.length()==0){
return val.length();
}else if(m==0){
return n;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315704267
GPR[SPVAP]-1661315704267
GPR[EPVAP]-1661315704923
GPR[EPVS]-1661315704923
========
if(val.startsWith("0x")||str.startsWith("-0x")){
return createInteger(val);
}
int lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315704925
GPR[SPVAP]-1661315704925
GPR[EPVAP]-1661315705557
GPR[EPVS]-1661315705557
========
if(val.startsWith("0x")||str.startsWith("-0x")){
return createInteger(val);
}
int lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315705558
GPR[SPVAP]-1661315705558
GPR[EPVAP]-1661315706199
GPR[EPVS]-1661315706199
========
if(tmp.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315706200
GPR[SPVAP]-1661315706200
GPR[EPVAP]-1661315706835
GPR[EPVS]-1661315706835
========
if(val.startsWith("0x")||duration.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315706836
GPR[SPVAP]-1661315706836
GPR[EPVAP]-1661315707479
GPR[EPVS]-1661315707479
========
if(tmp.startsWith("0x")||duration.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315707481
GPR[SPVAP]-1661315707481
GPR[EPVAP]-1661315708126
GPR[EPVS]-1661315708126
========
if(val.startsWith("0x")&&val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315708127
GPR[SPVAP]-1661315708127
GPR[EPVAP]-1661315709214
GPR[SPVATF]-1661315709214
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315710145
GPR[EPVS]-1661315710145
========
if(val.startsWith("0x")||pattern.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315710146
GPR[SPVAP]-1661315710147
GPR[EPVAP]-1661315710788
GPR[EPVS]-1661315710788
========
if(val.isLetter("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315710790
GPR[SPVAP]-1661315710790
GPR[EPVAP]-1661315711438
GPR[EPVS]-1661315711438
========
if(val.isLetterOrDigit("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315711439
GPR[SPVAP]-1661315711439
GPR[EPVAP]-1661315712072
GPR[EPVS]-1661315712072
========
if(val.isDigit("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315712073
GPR[SPVAP]-1661315712073
GPR[EPVAP]-1661315712712
GPR[EPVS]-1661315712712
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=padStr.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315712714
GPR[SPVAP]-1661315712714
GPR[EPVAP]-1661315713347
GPR[EPVS]-1661315713347
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(isEmpty(val)){
padStr=" ";
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315713348
GPR[SPVAP]-1661315713348
GPR[EPVAP]-1661315713970
GPR[EPVS]-1661315713970
========
if(val.startsWith("0x")||separator.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315713972
GPR[SPVAP]-1661315713972
GPR[EPVAP]-1661315714607
GPR[EPVS]-1661315714607
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(isEmpty(val)){
return EMPTY;
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315714608
GPR[SPVAP]-1661315714608
GPR[EPVAP]-1661315715239
GPR[EPVS]-1661315715239
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=replaceChars.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315715241
GPR[SPVAP]-1661315715241
GPR[EPVAP]-1661315715864
GPR[EPVS]-1661315715865
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
replaceChars=EMPTY;
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315715866
GPR[SPVAP]-1661315715866
GPR[EPVAP]-1661315716497
GPR[EPVS]-1661315716497
========
if(stripChars.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315716499
GPR[SPVAP]-1661315716499
GPR[EPVAP]-1661315717125
GPR[EPVS]-1661315717125
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=text.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315717127
GPR[SPVAP]-1661315717127
GPR[EPVAP]-1661315717765
GPR[EPVS]-1661315717765
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=JAVA_VERSION.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315717766
GPR[SPVAP]-1661315717766
GPR[EPVAP]-1661315718393
GPR[EPVS]-1661315718393
========
if(val.startsWith("0x")||sep.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315718395
GPR[SPVAP]-1661315718395
GPR[EPVAP]-1661315719020
GPR[EPVS]-1661315719020
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=searchStr.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315719022
GPR[SPVAP]-1661315719022
GPR[EPVAP]-1661315719648
GPR[EPVS]-1661315719648
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val==null?null:val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315719649
GPR[SPVAP]-1661315719649
GPR[EPVAP]-1661315720279
GPR[EPVS]-1661315720279
========
if(lastChar=='_'){
return new Locale(val.substring(0,2),"",str.substring(4));
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315720281
GPR[SPVAP]-1661315720281
GPR[EPVAP]-1661315720911
GPR[EPVS]-1661315720911
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
int lastChar=searchStr.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315720913
GPR[SPVAP]-1661315720913
GPR[EPVAP]-1661315721541
GPR[EPVS]-1661315721541
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
int lastChar=text.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315721543
GPR[SPVAP]-1661315721543
GPR[EPVAP]-1661315722170
GPR[EPVS]-1661315722170
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=pattern.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315722172
GPR[SPVAP]-1661315722172
GPR[EPVAP]-1661315722804
GPR[EPVS]-1661315722804
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=entityContent.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315722806
GPR[SPVAP]-1661315722806
GPR[EPVAP]-1661315723435
GPR[EPVS]-1661315723435
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(isEmpty(val)){
return str;
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315723437
GPR[SPVAP]-1661315723437
GPR[EPVAP]-1661315724068
GPR[EPVS]-1661315724068
========
if(duration.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315724070
GPR[SPVAP]-1661315724070
GPR[EPVAP]-1661315724702
GPR[EPVS]-1661315724702
========
if(sub.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315724704
GPR[SPVAP]-1661315724704
GPR[EPVAP]-1661315725333
GPR[EPVS]-1661315725333
========
if(val.startsWith("0x")||token.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315725334
GPR[SPVAP]-1661315725334
GPR[EPVAP]-1661315725964
GPR[EPVS]-1661315725964
========
if(chars.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315725965
GPR[SPVAP]-1661315725965
GPR[EPVAP]-1661315726605
GPR[EPVS]-1661315726605
========
if(val.startsWith("0x")||EMPTY.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315726607
GPR[SPVAP]-1661315726607
GPR[EPVAP]-1661315727245
GPR[EPVS]-1661315727245
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=separator.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315727246
GPR[SPVAP]-1661315727246
GPR[EPVAP]-1661315727886
GPR[EPVS]-1661315727886
========
if(val==null){
str="";
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315727888
GPR[SPVAP]-1661315727888
GPR[EPVAP]-1661315728524
GPR[EPVS]-1661315728524
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(isEmpty(val)){
padStr=" ";
}
char lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315728526
GPR[SPVAP]-1661315728526
GPR[EPVAP]-1661315729156
GPR[EPVS]-1661315729156
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(isEmpty(val)){
padStr=" ";
}
int lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315729158
GPR[SPVAP]-1661315729158
GPR[EPVAP]-1661315729790
GPR[EPVS]-1661315729790
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(isEmpty(val)){
padStr=" ";
}
int lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315729792
GPR[SPVAP]-1661315729792
GPR[EPVAP]-1661315730433
GPR[EPVS]-1661315730433
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return null;
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315730435
GPR[SPVAP]-1661315730435
GPR[EPVAP]-1661315731531
GPR[SPVATF]-1661315731531
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315732477
GPR[EPVS]-1661315732477
========
if(val.length()<2){
return EMPTY;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315732479
GPR[SPVAP]-1661315732479
GPR[EPVAP]-1661315733106
GPR[EPVS]-1661315733106
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return null;
}
char lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315733107
GPR[SPVAP]-1661315733107
GPR[EPVAP]-1661315733739
GPR[EPVS]-1661315733739
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return null;
}
int lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315733741
GPR[SPVAP]-1661315733741
GPR[EPVAP]-1661315734834
GPR[SPVATF]-1661315734834
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315735761
GPR[EPVS]-1661315735761
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return null;
}
int lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315735762
GPR[SPVAP]-1661315735762
GPR[EPVAP]-1661315736396
GPR[EPVS]-1661315736396
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
overlay=EMPTY;
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315736398
GPR[SPVAP]-1661315736398
GPR[EPVAP]-1661315737548
GPR[EPVS]-1661315737548
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=replaceStr.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315737557
GPR[SPVAP]-1661315737557
GPR[EPVAP]-1661315738452
GPR[EPVS]-1661315738452
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
int lastChar=val==null?null:val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315738453
GPR[SPVAP]-1661315738453
GPR[EPVAP]-1661315739107
GPR[EPVS]-1661315739107
========
if((val==null?0:str.length())>0){
int indexOf(val,0)=indexOf(val,0);
if(index>=0){
deleteImpl(index,index+len,len);
}
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315739108
GPR[SPVAP]-1661315739108
GPR[EPVAP]-1661315739654
GPR[EPVS]-1661315739654
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
newLineStr=SystemUtils.LINE_SEPARATOR;
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315739656
GPR[SPVAP]-1661315739656
GPR[EPVAP]-1661315740299
GPR[EPVS]-1661315740299
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return ;
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315740301
GPR[SPVAP]-1661315740301
GPR[EPVAP]-1661315740936
GPR[EPVS]-1661315740936
========
val=str.toLowerCase();
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315740938
GPR[SPVAP]-1661315740938
GPR[EPVAP]-1661315741582
GPR[EPVS]-1661315741582
========
if(countryCode.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315741584
GPR[SPVAP]-1661315741584
GPR[EPVAP]-1661315742225
GPR[EPVS]-1661315742225
========
if((val==null?0:str.length())>0){
int indexOf(val,0)=indexOf(val,0);
while(index>=0){
deleteImpl(index,index+len,len);
index=indexOf(str,index);
}
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315742226
GPR[SPVAP]-1661315742226
GPR[EPVAP]-1661315742781
GPR[EPVS]-1661315742781
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(isEmpty(val)){
return str;
}
char lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315742783
GPR[SPVAP]-1661315742783
GPR[EPVAP]-1661315743426
GPR[EPVS]-1661315743426
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(isEmpty(val)){
return str;
}
int lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315743427
GPR[SPVAP]-1661315743427
GPR[EPVAP]-1661315744080
GPR[EPVS]-1661315744080
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(isEmpty(val)){
return str;
}
int lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315744082
GPR[SPVAP]-1661315744082
GPR[EPVAP]-1661315744719
GPR[EPVS]-1661315744719
========
if(val.length()==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315744721
GPR[SPVAP]-1661315744721
GPR[EPVAP]-1661315745354
GPR[EPVS]-1661315745354
========
if(val.length()==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
int lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315745355
GPR[SPVAP]-1661315745355
GPR[EPVAP]-1661315746000
GPR[EPVS]-1661315746000
========
if(val.length()==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return null;
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315746002
GPR[SPVAP]-1661315746002
GPR[EPVAP]-1661315746634
GPR[EPVS]-1661315746634
========
if(val.length()==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
int lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315746636
GPR[SPVAP]-1661315746636
GPR[EPVAP]-1661315747273
GPR[EPVS]-1661315747273
========
if(val.length()==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return null;
}
char lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315747275
GPR[SPVAP]-1661315747275
GPR[EPVAP]-1661315747918
GPR[EPVS]-1661315747918
========
if(val.length()==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return null;
}
int lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315747920
GPR[SPVAP]-1661315747920
GPR[EPVAP]-1661315748567
GPR[EPVS]-1661315748567
========
if(val.length()==0){
return ArrayUtils.EMPTY_STRING_ARRAY;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return null;
}
int lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315748568
GPR[SPVAP]-1661315748568
GPR[EPVAP]-1661315749202
GPR[EPVS]-1661315749202
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return false;
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315749204
GPR[SPVAP]-1661315749204
GPR[EPVAP]-1661315749840
GPR[EPVS]-1661315749840
========
if(val.length()==0){
return true;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315749842
GPR[SPVAP]-1661315749842
GPR[EPVAP]-1661315750476
GPR[EPVS]-1661315750476
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
int lastChar=replaceStr.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315750478
GPR[SPVAP]-1661315750478
GPR[EPVAP]-1661315751117
GPR[EPVS]-1661315751117
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
str=val;
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315751118
GPR[SPVAP]-1661315751118
GPR[EPVAP]-1661315751751
GPR[EPVS]-1661315751751
========
if(val.startsWith("0x")||numeric.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315751753
GPR[SPVAP]-1661315751753
GPR[EPVAP]-1661315752390
GPR[EPVS]-1661315752390
========
if(separatorChars.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315752392
GPR[SPVAP]-1661315752392
GPR[EPVAP]-1661315753034
GPR[EPVS]-1661315753034
========
if(val.indexOf("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315753035
GPR[SPVAP]-1661315753035
GPR[EPVAP]-1661315753680
GPR[EPVS]-1661315753680
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=toString.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315753681
GPR[SPVAP]-1661315753681
GPR[EPVAP]-1661315754307
GPR[EPVS]-1661315754307
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=contentStart.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315754308
GPR[SPVAP]-1661315754308
GPR[EPVAP]-1661315754937
GPR[EPVS]-1661315754937
========
try{
StringWriter new StringWriter((int)(val.length()*1.5))=new StringWriter((int)(val.length()*1.5));
escapeHtml(writer,str);
return writer.toString();
}catch (IOException ioe) {
  throw new UnhandledException(ioe);
}

if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315754939
GPR[SPVAP]-1661315754939
GPR[EPVAP]-1661315755483
GPR[EPVS]-1661315755483
========
try{
StringWriter new StringWriter((int)(val.length()*1.5))=new StringWriter((int)(val.length()*1.5));
unescapeHtml(writer,str);
return writer.toString();
}catch (IOException ioe) {
  throw new UnhandledException(ioe);
}

if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315755484
GPR[SPVAP]-1661315755484
GPR[EPVAP]-1661315756034
GPR[EPVS]-1661315756034
========
try{
StringWriter new StringWriter(val.length())=new StringWriter(val.length());
unescapeJava(writer,str);
return writer.toString();
}catch (IOException ioe) {
  throw new UnhandledException(ioe);
}

if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315756036
GPR[SPVAP]-1661315756036
GPR[EPVAP]-1661315756582
GPR[EPVS]-1661315756582
========
if(val.contains("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315756585
GPR[SPVAP]-1661315756585
GPR[EPVAP]-1661315757675
GPR[SPVATF]-1661315757675
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315758606
GPR[EPVS]-1661315758606
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
int lastChar=padStr.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315758607
GPR[SPVAP]-1661315758607
GPR[EPVAP]-1661315759247
GPR[EPVS]-1661315759247
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(isEmpty(val)){
padStr=" ";
}
char lastChar=padStr.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315759248
GPR[SPVAP]-1661315759248
GPR[EPVAP]-1661315759883
GPR[EPVS]-1661315759883
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(isEmpty(val)){
padStr=" ";
}
int lastChar=padStr.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315759885
GPR[SPVAP]-1661315759885
GPR[EPVAP]-1661315760519
GPR[EPVS]-1661315760519
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(StringUtils.isEmpty(val)){
return str;
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315760521
GPR[SPVAP]-1661315760521
GPR[EPVAP]-1661315761178
GPR[EPVS]-1661315761178
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(StringUtils.isEmpty(val)){
return false;
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315761180
GPR[SPVAP]-1661315761180
GPR[EPVAP]-1661315761817
GPR[EPVS]-1661315761817
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(StringUtils.isEmpty(val)){
return false;
}
char lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315761819
GPR[SPVAP]-1661315761819
GPR[EPVAP]-1661315762450
GPR[EPVS]-1661315762450
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.getType(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315762457
GPR[SPVAP]-1661315762457
GPR[EPVAP]-1661315763089
GPR[EPVS]-1661315763089
========
case 3 :

if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315763094
GPR[SPVAP]-1661315763094
GPR[EPVAP]-1661315763641
GPR[EPVS]-1661315763641
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return false;
}
char lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315763644
GPR[SPVAP]-1661315763644
GPR[EPVAP]-1661315764292
GPR[EPVS]-1661315764292
========
if(val.length()==0){
return true;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
char lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315764294
GPR[SPVAP]-1661315764294
GPR[EPVAP]-1661315764927
GPR[EPVS]-1661315764927
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return false;
}
int lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315764928
GPR[SPVAP]-1661315764928
GPR[EPVAP]-1661315765564
GPR[EPVS]-1661315765564
========
if(val.length()==0){
return true;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
int lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315765565
GPR[SPVAP]-1661315765565
GPR[EPVAP]-1661315766207
GPR[EPVS]-1661315766207
========
if(val.length()==0){
return true;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return false;
}
char lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315766209
GPR[SPVAP]-1661315766209
GPR[EPVAP]-1661315766843
GPR[EPVS]-1661315766843
========
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return false;
}
int lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315766844
GPR[SPVAP]-1661315766844
GPR[EPVAP]-1661315767479
GPR[EPVS]-1661315767479
========
if(val.length()==0){
return true;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
int lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315767480
GPR[SPVAP]-1661315767480
GPR[EPVAP]-1661315768112
GPR[EPVS]-1661315768112
========
if(val.length()==0){
return true;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return false;
}
char lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315768114
GPR[SPVAP]-1661315768114
GPR[EPVAP]-1661315768754
GPR[EPVS]-1661315768754
========
if(val.length()==0){
return true;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return false;
}
int lastChar=val.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315768755
GPR[SPVAP]-1661315768755
GPR[EPVAP]-1661315769396
GPR[EPVS]-1661315769396
========
if(val.length()==0){
return true;
}
if(val.startsWith("0x")||val.startsWith("-0x")){
return createInteger(val);
}
if(val==null){
return false;
}
int lastChar=str.charAt(val.length()-1);
String mant;

========
MM Copying to MM
GPR[SPVS]-1661315769397
GPR[SPVAP]-1661315769397
GPR[EPVAP]-1661315770031
GPR[EPVS]-1661315770031
GPR[ESUN]-1661315770034
GPR[SSUN]-1661315770034
org.apache.commons.lang.NumberUtils,159
========
String exp;
int decPos=str.indexOf('.');
int expPos=str.indexOf('e')+str.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315770558
GPR[SPVAP]-1661315770558
GPR[EPVAP]-1661315771713
GPR[EPVS]-1661315771713
========
String exp;
int decPos=val.indexOf('.');
int expPos=str.indexOf('e')+str.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315771714
GPR[SPVAP]-1661315771714
GPR[EPVAP]-1661315772698
GPR[EPVS]-1661315772698
========
String exp;
int decPos=str.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315772699
GPR[SPVAP]-1661315772699
GPR[EPVAP]-1661315773639
GPR[EPVS]-1661315773639
========
String exp;
int decPos=val.indexOf('.');
int expPos=str.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315773640
GPR[SPVAP]-1661315773640
GPR[EPVAP]-1661315774594
GPR[EPVS]-1661315774594
========
String exp;
int decPos=val.indexOf('.');
int expPos=val.indexOf('e')+str.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315774596
GPR[SPVAP]-1661315774596
GPR[EPVAP]-1661315775537
GPR[EPVS]-1661315775537
========
if(decPos>=0){
return getFraction(Double.parseDouble(val));
}
String exp;
int decPos=val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315775538
GPR[SPVAP]-1661315775538
GPR[EPVAP]-1661315776492
GPR[EPVS]-1661315776492
========
decPos=val.indexOf(' ');
String exp;
int decPos=val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315776493
GPR[SPVAP]-1661315776493
GPR[EPVAP]-1661315777442
GPR[EPVS]-1661315777442
========
String exp;
int decPos=replaceStr.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315777443
GPR[SPVAP]-1661315777443
GPR[EPVAP]-1661315778393
GPR[EPVS]-1661315778393
========
String exp;
int decPos=val==null?null:val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315778394
GPR[SPVAP]-1661315778394
GPR[EPVAP]-1661315779376
GPR[EPVS]-1661315779376
========
String exp;
if(val==null||dec==null||dec==null){
return null;
}
int decPos=val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315779378
GPR[SPVAP]-1661315779378
GPR[EPVAP]-1661315780319
GPR[EPVS]-1661315780319
========
if(val.indexOf(dec)!=-1){
int decPos=val.indexOf(dec,start+dec.length());
if(end!=-1){
return str.substring(start+open.length(),end);
}
}
String exp;
int decPos=val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315780320
GPR[SPVAP]-1661315780320
GPR[EPVAP]-1661315781281
GPR[EPVS]-1661315781281
========
String exp;
int decPos=text.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315781282
GPR[SPVAP]-1661315781282
GPR[EPVAP]-1661315782246
GPR[EPVS]-1661315782246
========
if(expPos==-1){
return val;
}
String exp;
int decPos=val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315782248
GPR[SPVAP]-1661315782248
GPR[EPVAP]-1661315783206
GPR[EPVS]-1661315783206
========
if(decPos<0){
break;
}
String exp;
int decPos=val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315783208
GPR[SPVAP]-1661315783208
GPR[EPVAP]-1661315784165
GPR[EPVS]-1661315784165
========
String exp;
if(dec==null){
return EMPTY;
}
int decPos=val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315784167
GPR[SPVAP]-1661315784167
GPR[EPVAP]-1661315785159
GPR[EPVS]-1661315785159
========
if(decPos==-1){
return EMPTY;
}
String exp;
int decPos=val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315785160
GPR[SPVAP]-1661315785160
GPR[EPVAP]-1661315786130
GPR[EPVS]-1661315786130
========
String exp;
if(val.length()==0){
return EMPTY;
}
int decPos=val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315786132
GPR[SPVAP]-1661315786132
GPR[EPVAP]-1661315787092
GPR[EPVS]-1661315787092
========
if(decPos==-1){
return val;
}
String exp;
int decPos=val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315787093
GPR[SPVAP]-1661315787093
GPR[EPVAP]-1661315788096
GPR[EPVS]-1661315788096
========
if(decPos==-1){
return EMPTY;
}
String exp;
int decPos=str.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315788098
GPR[SPVAP]-1661315788098
GPR[EPVAP]-1661315789064
GPR[EPVS]-1661315789064
========
if(decPos==-1){
return val;
}
String exp;
int decPos=str.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315789066
GPR[SPVAP]-1661315789066
GPR[EPVAP]-1661315790014
GPR[EPVS]-1661315790014
========
String exp;
int decPos=searchChars.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315790015
GPR[SPVAP]-1661315790015
GPR[EPVAP]-1661315790977
GPR[EPVS]-1661315790977
========
String exp;
int decPos=desc.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315790979
GPR[SPVAP]-1661315790979
GPR[EPVAP]-1661315791917
GPR[EPVS]-1661315791917
========
if(val.indexOf(START_FMT)>0){
dec=val.substring(0,i).trim();
dec=desc.substring(i+1).trim();
}
String exp;
int decPos=val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315791918
GPR[SPVAP]-1661315791918
GPR[EPVAP]-1661315792888
GPR[EPVS]-1661315792888
========
String exp;
int decPos=className.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315792890
GPR[SPVAP]-1661315792890
GPR[EPVAP]-1661315793857
GPR[EPVS]-1661315793857
========
String exp;
int decPos=val.lastIndexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315793858
GPR[SPVAP]-1661315793858
GPR[EPVAP]-1661315796936
GPR[SPVATF]-1661315796936
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315797849
GPR[EPVS]-1661315797849
========
String exp;
if(val.length()==0){
return StringUtils.EMPTY;
}
int decPos=val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315797850
GPR[SPVAP]-1661315797850
GPR[EPVAP]-1661315798483
GPR[EPVS]-1661315798483
========
if(decPos!=-1){
dec=out.replace(INNER_CLASS_SEPARATOR_CHAR,PACKAGE_SEPARATOR_CHAR);
}
String exp;
int decPos=val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315798484
GPR[SPVAP]-1661315798484
GPR[EPVAP]-1661315799119
GPR[EPVS]-1661315799119
========
String exp;
int decPos=val.charAt('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315799120
GPR[SPVAP]-1661315799120
GPR[EPVAP]-1661315800219
GPR[SPVATF]-1661315800219
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315801131
GPR[EPVS]-1661315801131
========
String exp;
char decPos=val.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315801133
GPR[SPVAP]-1661315801133
GPR[EPVAP]-1661315801768
GPR[EPVS]-1661315801768
========
String exp;
int decPos=str.charAt('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315801770
GPR[SPVAP]-1661315801770
GPR[EPVAP]-1661315802407
GPR[EPVS]-1661315802407
========
String exp;
int decPos=val.parseInt('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315802408
GPR[SPVAP]-1661315802408
GPR[EPVAP]-1661315803047
GPR[EPVS]-1661315803047
========
String exp;
int decPos=toString.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315803049
GPR[SPVAP]-1661315803049
GPR[EPVAP]-1661315803687
GPR[EPVS]-1661315803687
========
String exp;
int decPos=contentStart.indexOf('.');
int expPos=val.indexOf('e')+val.indexOf('E');

========
MM Copying to MM
GPR[SPVS]-1661315803689
GPR[SPVAP]-1661315803689
GPR[EPVAP]-1661315804324
GPR[EPVS]-1661315804324
GPR[ESUN]-1661315804325
GPR[SSUN]-1661315804325
org.apache.commons.lang.NumberUtils,160
GPR[ESUN]-1661315804435
GPR[SSUN]-1661315804435
org.apache.commons.lang.NumberUtils,162
========
if(expPos<decPos){
return createBigInteger(dec);
throw new NumberFormatException(val+" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315804809
GPR[SPVAP]-1661315804809
GPR[EPVAP]-1661315805923
GPR[EPVS]-1661315805923
========
case 'f' :

if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}

========
MM Copying to MM
GPR[SPVS]-1661315805924
GPR[SPVAP]-1661315805924
GPR[EPVAP]-1661315806575
GPR[EPVS]-1661315806575
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=str.substring(decPos+1,expPos);
}else {
dec=str.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315807026
GPR[SPVAP]-1661315807026
GPR[EPVAP]-1661315807982
GPR[EPVS]-1661315807982
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=str.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315807983
GPR[SPVAP]-1661315807983
GPR[EPVAP]-1661315808959
GPR[EPVS]-1661315808959
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=str.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315808961
GPR[SPVAP]-1661315808961
GPR[EPVAP]-1661315809927
GPR[EPVS]-1661315809927
========
if(pos>-1){
if(pos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315809929
GPR[SPVAP]-1661315809929
GPR[EPVAP]-1661315810918
GPR[EPVS]-1661315810918
========
if(pos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315810919
GPR[SPVAP]-1661315810919
GPR[EPVAP]-1661315811883
GPR[EPVS]-1661315811883
========
if(expPos>-1){
if(pos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315811884
GPR[SPVAP]-1661315811884
GPR[EPVAP]-1661315812850
GPR[EPVS]-1661315812850
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315812851
GPR[SPVAP]-1661315812851
GPR[EPVAP]-1661315815939
GPR[SPVATF]-1661315815939
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315816864
GPR[EPVS]-1661315816864
========
if(expPos>-1){
if(expPos<decPos){
if(expPos<0){
throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z");
}else {
int Integer.parseInt(val.substring(0,expPos))=Integer.parseInt(val.substring(0,pos));
int Integer.parseInt(val.substring(expPos+1))=Integer.parseInt(str.substring(pos+1));
return getFraction(Integer.parseInt(val.substring(0,expPos)),numer,denom);
}
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315816865
GPR[SPVAP]-1661315816865
GPR[EPVAP]-1661315817410
GPR[EPVS]-1661315817410
========
if(expPos>-1){
str=val.substring(expPos+1);
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315817411
GPR[SPVAP]-1661315817411
GPR[EPVAP]-1661315818037
GPR[EPVS]-1661315818037
========
if(expPos>-1){
pos=val.indexOf('/');
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315818038
GPR[SPVAP]-1661315818038
GPR[EPVAP]-1661315818687
GPR[EPVS]-1661315818687
========
if(expPos>-1){
str=val.substring(expPos+1);
pos=val.indexOf('/');

if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315818689
GPR[SPVAP]-1661315818689
GPR[EPVAP]-1661315819343
GPR[EPVS]-1661315819343
========
if(offset>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315819345
GPR[SPVAP]-1661315819345
GPR[EPVAP]-1661315819988
GPR[EPVS]-1661315819988
========
if(decPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315819989
GPR[SPVAP]-1661315819989
GPR[EPVAP]-1661315821076
GPR[SPVATF]-1661315821076
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315822018
GPR[EPVS]-1661315822018
========
if((expPos+(decPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315822020
GPR[SPVAP]-1661315822020
GPR[EPVAP]-1661315822655
GPR[EPVS]-1661315822655
========
if(decPos<2){
return EMPTY;
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315822657
GPR[SPVAP]-1661315822657
GPR[EPVAP]-1661315823295
GPR[EPVS]-1661315823295
========
if(len>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315823297
GPR[SPVAP]-1661315823297
GPR[EPVAP]-1661315823924
GPR[EPVS]-1661315823924
========
if(val==null){
return null;
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315823925
GPR[SPVAP]-1661315823925
GPR[EPVAP]-1661315825025
GPR[SPVATF]-1661315825025
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315825948
GPR[EPVS]-1661315825948
========
if(expPos<0){
pos=0;
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315825950
GPR[SPVAP]-1661315825950
GPR[EPVAP]-1661315826590
GPR[EPVS]-1661315826590
========
if(val.length()<=(expPos+decPos)){
return str.substring(pos);
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315826591
GPR[SPVAP]-1661315826591
GPR[EPVAP]-1661315827220
GPR[EPVS]-1661315827220
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=desc.substring(decPos+1,expPos);
}else {
dec=desc.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315827221
GPR[SPVAP]-1661315827221
GPR[EPVAP]-1661315827853
GPR[EPVS]-1661315827853
========
if(i>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315827855
GPR[SPVAP]-1661315827855
GPR[EPVAP]-1661315828492
GPR[EPVS]-1661315828492
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=desc.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315828493
GPR[SPVAP]-1661315828493
GPR[EPVAP]-1661315829164
GPR[EPVS]-1661315829164
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=desc.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315829166
GPR[SPVAP]-1661315829166
GPR[EPVAP]-1661315829812
GPR[EPVS]-1661315829812
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
name=val.substring(0,expPos).trim();
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315829814
GPR[SPVAP]-1661315829814
GPR[EPVAP]-1661315830451
GPR[EPVS]-1661315830452
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
name=val.substring(0,expPos).trim();
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315830453
GPR[SPVAP]-1661315830453
GPR[EPVAP]-1661315831084
GPR[EPVS]-1661315831084
========
if(numberOfSubstrings>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315831085
GPR[SPVAP]-1661315831085
GPR[EPVAP]-1661315831728
GPR[EPVS]-1661315831728
========
if(expPos>=-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315831729
GPR[SPVAP]-1661315831729
GPR[EPVAP]-1661315832822
GPR[SPVATF]-1661315832822
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315833736
GPR[EPVS]-1661315833736
========
if(spaceToWrapAt>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315833737
GPR[SPVAP]-1661315833737
GPR[EPVAP]-1661315834377
GPR[EPVS]-1661315834377
========
if(decPos>expPos){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315834378
GPR[SPVAP]-1661315834378
GPR[EPVAP]-1661315835453
GPR[SPVATF]-1661315835453
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315836372
GPR[EPVS]-1661315836372
========
if(decPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315836373
GPR[SPVAP]-1661315836373
GPR[EPVAP]-1661315837449
GPR[SPVATF]-1661315837449
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315838381
GPR[EPVS]-1661315838381
========
if(start>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315838382
GPR[SPVAP]-1661315838382
GPR[EPVAP]-1661315839012
GPR[EPVS]-1661315839012
========
if(decPos<0){
start=0;
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315839014
GPR[SPVAP]-1661315839014
GPR[EPVAP]-1661315839649
GPR[EPVS]-1661315839649
========
if(expPos<0){
end=0;
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315839651
GPR[SPVAP]-1661315839651
GPR[EPVAP]-1661315840282
GPR[EPVS]-1661315840282
========
if(idx>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315840283
GPR[SPVAP]-1661315840283
GPR[EPVAP]-1661315840925
GPR[EPVS]-1661315840925
========
if(smallestIndexOfDiff>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315840926
GPR[SPVAP]-1661315840926
GPR[EPVAP]-1661315841556
GPR[EPVS]-1661315841556
========
if(end>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315841557
GPR[SPVAP]-1661315841557
GPR[EPVAP]-1661315842205
GPR[EPVS]-1661315842205
========
if(at>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315842207
GPR[SPVAP]-1661315842207
GPR[EPVAP]-1661315842842
GPR[EPVS]-1661315842842
========
if(dec==null){
return val;
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315842843
GPR[SPVAP]-1661315842843
GPR[EPVAP]-1661315843483
GPR[EPVS]-1661315843483
========
if(val==null){
return dec;
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315843484
GPR[SPVAP]-1661315843484
GPR[EPVAP]-1661315844122
GPR[EPVS]-1661315844122
========
if(sizePlus1>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315844124
GPR[SPVAP]-1661315844124
GPR[EPVAP]-1661315844770
GPR[EPVS]-1661315844770
========
if(val==null){
return StringUtils.EMPTY;
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315844772
GPR[SPVAP]-1661315844772
GPR[EPVAP]-1661315845400
GPR[EPVS]-1661315845400
========
if(val.length()<=expPos){
return str;
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315845402
GPR[SPVAP]-1661315845402
GPR[EPVAP]-1661315846034
GPR[EPVS]-1661315846034
========
if(val==null){
return null;
}
if(len>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315846035
GPR[SPVAP]-1661315846035
GPR[EPVAP]-1661315846668
GPR[EPVS]-1661315846668
========
if(upper>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315846670
GPR[SPVAP]-1661315846670
GPR[EPVAP]-1661315847310
GPR[EPVS]-1661315847310
========
if(index>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315847311
GPR[SPVAP]-1661315847311
GPR[EPVAP]-1661315847940
GPR[EPVS]-1661315847940
========
if(maxWidth>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315847942
GPR[SPVAP]-1661315847942
GPR[EPVAP]-1661315848579
GPR[EPVS]-1661315848579
========
if(amphersandIdx>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315848581
GPR[SPVAP]-1661315848581
GPR[EPVAP]-1661315849210
GPR[EPVS]-1661315849210
========
if(lastIdx>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315849211
GPR[SPVAP]-1661315849211
GPR[EPVAP]-1661315849855
GPR[EPVS]-1661315849855
========
if(val.charAt(expPos)==CharUtils.LF){
if(val.charAt(expPos-1)==CharUtils.CR){
lastIdx--;
}
}else {
lastIdx++;
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315849857
GPR[SPVAP]-1661315849857
GPR[EPVAP]-1661315850487
GPR[EPVS]-1661315850487
========
if(isEmpty(dec)||val==null){
return str;
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315850489
GPR[SPVAP]-1661315850489
GPR[EPVAP]-1661315851124
GPR[EPVS]-1661315851124
========
if(val.length()==0){
return EMPTY;
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315851126
GPR[SPVAP]-1661315851126
GPR[EPVAP]-1661315851764
GPR[EPVS]-1661315851764
========
if(isEmpty(val)||isEmpty(dec)){
return str;
}
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315851766
GPR[SPVAP]-1661315851766
GPR[EPVAP]-1661315852404
GPR[EPVS]-1661315852404
========
if(pos1>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315852406
GPR[SPVAP]-1661315852406
GPR[EPVAP]-1661315853028
GPR[EPVS]-1661315853028
========
if(pos2>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315853029
GPR[SPVAP]-1661315853029
GPR[EPVAP]-1661315853658
GPR[EPVS]-1661315853658
========
if(pads>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}

========
MM Copying to MM
GPR[SPVS]-1661315853660
GPR[SPVAP]-1661315853660
GPR[EPVAP]-1661315854284
GPR[EPVS]-1661315854284
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315854707
GPR[SPVAP]-1661315854707
GPR[EPVAP]-1661315855812
GPR[SPVATF]-1661315855812
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315856749
GPR[EPVS]-1661315856749
========
mant=val.substring(0,decPos);
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315856751
GPR[SPVAP]-1661315856751
GPR[EPVAP]-1661315857850
GPR[SPVATF]-1661315857850
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315858766
GPR[EPVS]-1661315858766
========
mant=val.substring(0,decPos);
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315858767
GPR[SPVAP]-1661315858767
GPR[EPVAP]-1661315859853
GPR[SPVATF]-1661315859853
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315860785
GPR[EPVS]-1661315860785
========
if(expPos>-1){
mant=str.substring(0,expPos);
}else {
mant=str;
}

========
MM Copying to MM
GPR[SPVS]-1661315860787
GPR[SPVAP]-1661315860787
GPR[EPVAP]-1661315861429
GPR[EPVS]-1661315861429
========
if(expPos>-1){
mant=str.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315861431
GPR[SPVAP]-1661315861431
GPR[EPVAP]-1661315862073
GPR[EPVS]-1661315862073
========
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=str;
}

========
MM Copying to MM
GPR[SPVS]-1661315862074
GPR[SPVAP]-1661315862074
GPR[EPVAP]-1661315862705
GPR[EPVS]-1661315862705
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
mant=str.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315862707
GPR[SPVAP]-1661315862707
GPR[EPVAP]-1661315863348
GPR[EPVS]-1661315863348
========
mant=val.substring(0,decPos);
if(expPos>-1){
mant=str.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315863349
GPR[SPVAP]-1661315863349
GPR[EPVAP]-1661315863978
GPR[EPVS]-1661315863978
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
mant=val.substring(0,expPos);
}else {
mant=str;
}

========
MM Copying to MM
GPR[SPVS]-1661315863979
GPR[SPVAP]-1661315863979
GPR[EPVAP]-1661315864618
GPR[EPVS]-1661315864618
========
mant=val.substring(0,decPos);
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=str;
}

========
MM Copying to MM
GPR[SPVS]-1661315864619
GPR[SPVAP]-1661315864619
GPR[EPVAP]-1661315865250
GPR[EPVS]-1661315865250
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
mant=str.substring(0,expPos);
}else {
mant=str;
}

========
MM Copying to MM
GPR[SPVS]-1661315865251
GPR[SPVAP]-1661315865251
GPR[EPVAP]-1661315865888
GPR[EPVS]-1661315865888
========
mant=val.substring(0,decPos);
if(expPos>-1){
mant=str.substring(0,expPos);
}else {
mant=str;
}

========
MM Copying to MM
GPR[SPVS]-1661315865889
GPR[SPVAP]-1661315865889
GPR[EPVAP]-1661315866523
GPR[EPVS]-1661315866523
========
mant=val.substring(0,decPos);
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
mant=str.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315866524
GPR[SPVAP]-1661315866524
GPR[EPVAP]-1661315867168
GPR[EPVS]-1661315867168
========
mant=val.substring(0,decPos);
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
mant=val.substring(0,expPos);
}else {
mant=str;
}

========
MM Copying to MM
GPR[SPVS]-1661315867169
GPR[SPVAP]-1661315867169
GPR[EPVAP]-1661315867799
GPR[EPVS]-1661315867799
========
mant=val.substring(0,decPos);
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
mant=str.substring(0,expPos);
}else {
mant=str;
}

========
MM Copying to MM
GPR[SPVS]-1661315867800
GPR[SPVAP]-1661315867800
GPR[EPVAP]-1661315868434
GPR[EPVS]-1661315868434
========
if(expPos>-1&&expPos<val.length()-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315868435
GPR[SPVAP]-1661315868435
GPR[EPVAP]-1661315869555
GPR[SPVATF]-1661315869555
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315870505
GPR[EPVS]-1661315870505
========
if(end>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315870507
GPR[SPVAP]-1661315870507
GPR[EPVAP]-1661315871140
GPR[EPVS]-1661315871140
========
if(decPos<0){
start=0;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315871141
GPR[SPVAP]-1661315871141
GPR[EPVAP]-1661315871771
GPR[EPVS]-1661315871771
========
if(decPos<0){
pos=0;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315871772
GPR[SPVAP]-1661315871772
GPR[EPVAP]-1661315872412
GPR[EPVS]-1661315872412
========
if(idx>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315872413
GPR[SPVAP]-1661315872413
GPR[EPVAP]-1661315873062
GPR[EPVS]-1661315873062
========
if(smallestIndexOfDiff>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315873063
GPR[SPVAP]-1661315873063
GPR[EPVAP]-1661315873696
GPR[EPVS]-1661315873696
========
if(offset>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315873697
GPR[SPVAP]-1661315873697
GPR[EPVAP]-1661315874336
GPR[EPVS]-1661315874336
========
if(expPos>-1){
mant=desc.substring(0,expPos);
}else {
mant=desc;
}

========
MM Copying to MM
GPR[SPVS]-1661315874338
GPR[SPVAP]-1661315874338
GPR[EPVAP]-1661315874988
GPR[EPVS]-1661315874988
========
if(i>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315874989
GPR[SPVAP]-1661315874989
GPR[EPVAP]-1661315875615
GPR[EPVS]-1661315875615
========
if(expPos>-1){
mant=desc.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315875617
GPR[SPVAP]-1661315875617
GPR[EPVAP]-1661315876244
GPR[EPVS]-1661315876244
========
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=desc;
}

========
MM Copying to MM
GPR[SPVS]-1661315876245
GPR[SPVAP]-1661315876245
GPR[EPVAP]-1661315876872
GPR[EPVS]-1661315876872
========
if(expPos>-1){
name=val.substring(0,expPos).trim();
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315876873
GPR[SPVAP]-1661315876873
GPR[EPVAP]-1661315877499
GPR[EPVS]-1661315877499
========
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
name=val.substring(0,expPos).trim();
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315877500
GPR[SPVAP]-1661315877500
GPR[EPVAP]-1661315878141
GPR[EPVS]-1661315878141
========
if(expPos>-1&&expPos<val.length()-1){
mant=str.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315878142
GPR[SPVAP]-1661315878142
GPR[EPVAP]-1661315878773
GPR[EPVS]-1661315878773
========
if(strLen>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315878774
GPR[SPVAP]-1661315878775
GPR[EPVAP]-1661315879411
GPR[EPVS]-1661315879411
========
if(val.charAt(expPos-1)==CharUtils.LF){
if(val.substring(0,expPos-1).charAt(expPos-1-1)==CharUtils.CR){
return ret.substring(0,lastIdx-1);
}
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315879412
GPR[SPVAP]-1661315879412
GPR[EPVAP]-1661315880048
GPR[EPVS]-1661315880048
========
if(numberOfSubstrings>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315880050
GPR[SPVAP]-1661315880050
GPR[EPVAP]-1661315880688
GPR[EPVS]-1661315880688
========
if(pos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315880690
GPR[SPVAP]-1661315880690
GPR[EPVAP]-1661315881323
GPR[EPVS]-1661315881323
========
val=str.substring(expPos+1);
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315881325
GPR[SPVAP]-1661315881325
GPR[EPVAP]-1661315881970
GPR[EPVS]-1661315881970
========
expPos=val.indexOf('/');
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315881971
GPR[SPVAP]-1661315881971
GPR[EPVAP]-1661315883067
GPR[SPVATF]-1661315883067
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315883999
GPR[EPVS]-1661315883999
========
if(expPos>=-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315884001
GPR[SPVAP]-1661315884001
GPR[EPVAP]-1661315885105
GPR[SPVATF]-1661315885105
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315886040
GPR[EPVS]-1661315886040
========
if(spaceToWrapAt>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315886041
GPR[SPVAP]-1661315886041
GPR[EPVAP]-1661315886672
GPR[EPVS]-1661315886672
========
if(amphersandIdx>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315886673
GPR[SPVAP]-1661315886673
GPR[EPVAP]-1661315887304
GPR[EPVS]-1661315887304
========
if(start>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315887305
GPR[SPVAP]-1661315887305
GPR[EPVAP]-1661315887947
GPR[EPVS]-1661315887947
========
if(expPos>val.length()){
return EMPTY;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315887948
GPR[SPVAP]-1661315887948
GPR[EPVAP]-1661315888584
GPR[EPVS]-1661315888584
========
if(at>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315888585
GPR[SPVAP]-1661315888585
GPR[EPVAP]-1661315889244
GPR[EPVS]-1661315889244
========
if(val==null){
return val;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315889245
GPR[SPVAP]-1661315889245
GPR[EPVAP]-1661315889896
GPR[EPVS]-1661315889896
========
if(depth>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315889898
GPR[SPVAP]-1661315889898
GPR[EPVAP]-1661315890535
GPR[EPVS]-1661315890535
========
if(val==null){
return StringUtils.EMPTY;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315890537
GPR[SPVAP]-1661315890537
GPR[EPVAP]-1661315891165
GPR[EPVS]-1661315891165
========
if(len>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315891166
GPR[SPVAP]-1661315891166
GPR[EPVAP]-1661315891799
GPR[EPVS]-1661315891799
========
if(val==null){
return null;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315891800
GPR[SPVAP]-1661315891800
GPR[EPVAP]-1661315892898
GPR[SPVATF]-1661315892898
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315893841
GPR[EPVS]-1661315893841
========
if(val.length()<=expPos){
return str;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315893842
GPR[SPVAP]-1661315893842
GPR[EPVAP]-1661315894469
GPR[EPVS]-1661315894469
========
decPos=expPos+decPos;
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315894470
GPR[SPVAP]-1661315894470
GPR[EPVAP]-1661315895558
GPR[SPVATF]-1661315895558
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315896501
GPR[EPVS]-1661315896501
========
decPos=expPos+decPos;
if(end>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315896502
GPR[SPVAP]-1661315896502
GPR[EPVAP]-1661315897147
GPR[EPVS]-1661315897147
========
if(expPos>decPos){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315897148
GPR[SPVAP]-1661315897148
GPR[EPVAP]-1661315898246
GPR[SPVATF]-1661315898246
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315899178
GPR[EPVS]-1661315899178
========
if(start>decPos){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315899179
GPR[SPVAP]-1661315899179
GPR[EPVAP]-1661315899815
GPR[EPVS]-1661315899815
========
if(expPos>-1){
mant=out.substring(0,expPos);
}else {
mant=out;
}

========
MM Copying to MM
GPR[SPVS]-1661315899817
GPR[SPVAP]-1661315899817
GPR[EPVAP]-1661315900456
GPR[EPVS]-1661315900456
========
if(innerIdx>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315900457
GPR[SPVAP]-1661315900457
GPR[EPVAP]-1661315901088
GPR[EPVS]-1661315901088
========
if(expPos>-1){
mant=out.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315901090
GPR[SPVAP]-1661315901090
GPR[EPVAP]-1661315901719
GPR[EPVS]-1661315901719
========
if(expPos>-1){
mant=val.replace(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315901721
GPR[SPVAP]-1661315901721
GPR[EPVAP]-1661315902371
GPR[EPVS]-1661315902371
========
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=out;
}

========
MM Copying to MM
GPR[SPVS]-1661315902372
GPR[SPVAP]-1661315902372
GPR[EPVAP]-1661315903009
GPR[EPVS]-1661315903009
========
if(maxWidth>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315903010
GPR[SPVAP]-1661315903010
GPR[EPVAP]-1661315903640
GPR[EPVS]-1661315903640
========
if(pos1>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315903642
GPR[SPVAP]-1661315903642
GPR[EPVAP]-1661315904272
GPR[EPVS]-1661315904272
========
if(pos2>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315904273
GPR[SPVAP]-1661315904273
GPR[EPVAP]-1661315904909
GPR[EPVS]-1661315904909
========
if(decPos>expPos){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315904910
GPR[SPVAP]-1661315904910
GPR[EPVAP]-1661315905986
GPR[SPVATF]-1661315905986
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315906913
GPR[EPVS]-1661315906913
========
if(decPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315906914
GPR[SPVAP]-1661315906914
GPR[EPVAP]-1661315907998
GPR[SPVATF]-1661315907998
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315908934
GPR[EPVS]-1661315908934
========
if(index>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315908936
GPR[SPVAP]-1661315908936
GPR[EPVAP]-1661315909563
GPR[EPVS]-1661315909563
========
if(isEmpty(val)||val==null){
return str;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315909564
GPR[SPVAP]-1661315909564
GPR[EPVAP]-1661315910191
GPR[EPVS]-1661315910191
========
if(val.length()==0){
return EMPTY;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315910192
GPR[SPVAP]-1661315910192
GPR[EPVAP]-1661315910836
GPR[EPVS]-1661315910836
========
if(isEmpty(val)){
return str;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315910838
GPR[SPVAP]-1661315910838
GPR[EPVAP]-1661315911474
GPR[EPVS]-1661315911474
========
if(val.indexOf(val)==-1){
return EMPTY;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315911475
GPR[SPVAP]-1661315911475
GPR[EPVAP]-1661315912106
GPR[EPVS]-1661315912106
========
if(isEmpty(val)||isEmpty(val)){
return str;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315912107
GPR[SPVAP]-1661315912107
GPR[EPVAP]-1661315912755
GPR[EPVS]-1661315912755
========
if(pads>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315912757
GPR[SPVAP]-1661315912757
GPR[EPVAP]-1661315913391
GPR[EPVS]-1661315913391
========
case 'f' :

if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}

========
MM Copying to MM
GPR[SPVS]-1661315913393
GPR[SPVAP]-1661315913393
GPR[EPVAP]-1661315913939
GPR[EPVS]-1661315913939
========
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=str.substring(decPos+1,expPos);
}else {
dec=str.substring(decPos+1);
}
mant=str.substring(0,decPos);
}else {
if(expPos>-1){
mant=str.substring(0,expPos);
}else {
mant=str;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315914413
GPR[SPVAP]-1661315914413
GPR[EPVAP]-1661315915048
GPR[EPVS]-1661315915048
========
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=str.substring(decPos+1);
}
mant=str.substring(0,decPos);
}else {
if(expPos>-1){
mant=str.substring(0,expPos);
}else {
mant=str;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315915049
GPR[SPVAP]-1661315915049
GPR[EPVAP]-1661315915683
GPR[EPVS]-1661315915683
========
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=str.substring(0,decPos);
}else {
if(expPos>-1){
mant=str.substring(0,expPos);
}else {
mant=str;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315915684
GPR[SPVAP]-1661315915684
GPR[EPVAP]-1661315916320
GPR[EPVS]-1661315916320
========
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=str.substring(0,expPos);
}else {
mant=str;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315916321
GPR[SPVAP]-1661315916321
GPR[EPVAP]-1661315916949
GPR[EPVS]-1661315916949
========
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=str.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315916950
GPR[SPVAP]-1661315916950
GPR[EPVAP]-1661315917582
GPR[EPVS]-1661315917582
========
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=str.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315917583
GPR[SPVAP]-1661315917583
GPR[EPVAP]-1661315918221
GPR[EPVS]-1661315918221
========
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=str.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315918222
GPR[SPVAP]-1661315918222
GPR[EPVAP]-1661315918867
GPR[EPVS]-1661315918867
========
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=str.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315918869
GPR[SPVAP]-1661315918869
GPR[EPVAP]-1661315919499
GPR[EPVS]-1661315919499
========
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=str;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315919500
GPR[SPVAP]-1661315919500
GPR[EPVAP]-1661315920135
GPR[EPVS]-1661315920135
========
if(len>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315920136
GPR[SPVAP]-1661315920136
GPR[EPVAP]-1661315920767
GPR[EPVS]-1661315920767
========
if(val==null){
return null;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315920768
GPR[SPVAP]-1661315920768
GPR[EPVAP]-1661315921862
GPR[SPVATF]-1661315921862
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315922785
GPR[EPVS]-1661315922785
========
if(expPos<0){
pos=0;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315922787
GPR[SPVAP]-1661315922787
GPR[EPVAP]-1661315923419
GPR[EPVS]-1661315923419
========
if(val.length()<=(expPos+decPos)){
return str.substring(pos);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315923421
GPR[SPVAP]-1661315923421
GPR[EPVAP]-1661315924052
GPR[EPVS]-1661315924052
========
if(strLen>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315924054
GPR[SPVAP]-1661315924054
GPR[EPVAP]-1661315924686
GPR[EPVS]-1661315924686
========
if(val.charAt(expPos)==CharUtils.LF){
if(val.substring(0,expPos).charAt(expPos-1)==CharUtils.CR){
return ret.substring(0,lastIdx-1);
}
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315924687
GPR[SPVAP]-1661315924687
GPR[EPVAP]-1661315925317
GPR[EPVS]-1661315925317
========
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315925319
GPR[SPVAP]-1661315925319
GPR[EPVAP]-1661315925948
GPR[EPVS]-1661315925948
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315925949
GPR[SPVAP]-1661315925949
GPR[EPVAP]-1661315927034
GPR[SPVATF]-1661315927034
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315927957
GPR[EPVS]-1661315927957
========
if(val.length()<=expPos){
return str;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315927958
GPR[SPVAP]-1661315927958
GPR[EPVAP]-1661315928589
GPR[EPVS]-1661315928589
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315928590
GPR[SPVAP]-1661315928590
GPR[EPVAP]-1661315929219
GPR[EPVS]-1661315929219
========
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315929220
GPR[SPVAP]-1661315929220
GPR[EPVAP]-1661315929853
GPR[EPVS]-1661315929853
========
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315929854
GPR[SPVAP]-1661315929854
GPR[EPVAP]-1661315930942
GPR[SPVATF]-1661315930942
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315931883
GPR[EPVS]-1661315931883
========
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315931885
GPR[SPVAP]-1661315931885
GPR[EPVAP]-1661315932519
GPR[EPVS]-1661315932519
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315932521
GPR[SPVAP]-1661315932521
GPR[EPVAP]-1661315933612
GPR[SPVATF]-1661315933612
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315934537
GPR[EPVS]-1661315934537
========
if(val==null){
return null;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315934538
GPR[SPVAP]-1661315934538
GPR[EPVAP]-1661315935635
GPR[SPVATF]-1661315935635
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315936562
GPR[EPVS]-1661315936562
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315936573
GPR[SPVAP]-1661315936573
GPR[EPVAP]-1661315937661
GPR[SPVATF]-1661315937661
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315938581
GPR[EPVS]-1661315938581
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315938583
GPR[SPVAP]-1661315938583
GPR[EPVAP]-1661315939677
GPR[SPVATF]-1661315939677
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661315940610
GPR[EPVS]-1661315940610
========
if(idx>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315940611
GPR[SPVAP]-1661315940611
GPR[EPVAP]-1661315941240
GPR[EPVS]-1661315941240
========
if(index>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315941242
GPR[SPVAP]-1661315941242
GPR[EPVAP]-1661315941879
GPR[EPVS]-1661315941879
========
if(decPos>-1){
if(upper>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315941880
GPR[SPVAP]-1661315941880
GPR[EPVAP]-1661315942526
GPR[EPVS]-1661315942526
========
if(end>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315942527
GPR[SPVAP]-1661315942527
GPR[EPVAP]-1661315943152
GPR[EPVS]-1661315943153
========
if(dec==null){
overlay=EMPTY;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315943154
GPR[SPVAP]-1661315943154
GPR[EPVAP]-1661315943790
GPR[EPVS]-1661315943790
========
if(expPos<0){
start=0;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315943791
GPR[SPVAP]-1661315943791
GPR[EPVAP]-1661315944427
GPR[EPVS]-1661315944427
========
if(expPos>val.length()){
start=len;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315944428
GPR[SPVAP]-1661315944428
GPR[EPVAP]-1661315945059
GPR[EPVS]-1661315945059
========
if(decPos>val.length()){
end=len;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315945060
GPR[SPVAP]-1661315945060
GPR[EPVAP]-1661315945690
GPR[EPVS]-1661315945690
========
if(expPos>decPos){
int expPos=start;
start=end;
end=temp;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315945691
GPR[SPVAP]-1661315945691
GPR[EPVAP]-1661315946354
GPR[EPVS]-1661315946354
========
if(delimLen>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315946356
GPR[SPVAP]-1661315946356
GPR[EPVAP]-1661315946984
GPR[EPVS]-1661315946984
========
if(at>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315946986
GPR[SPVAP]-1661315946986
GPR[EPVAP]-1661315947624
GPR[EPVS]-1661315947624
========
if(val==null){
return val;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315947626
GPR[SPVAP]-1661315947626
GPR[EPVAP]-1661315948259
GPR[EPVS]-1661315948259
========
if(start>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315948260
GPR[SPVAP]-1661315948260
GPR[EPVAP]-1661315948889
GPR[EPVS]-1661315948889
========
if(decPos<0){
start=0;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315948890
GPR[SPVAP]-1661315948890
GPR[EPVAP]-1661315949524
GPR[EPVS]-1661315949524
========
if(decPos>val.length()){
return EMPTY;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315949526
GPR[SPVAP]-1661315949526
GPR[EPVAP]-1661315950162
GPR[EPVS]-1661315950162
========
if(val.length()<=decPos){
return str;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315950163
GPR[SPVAP]-1661315950163
GPR[EPVAP]-1661315950803
GPR[EPVS]-1661315950803
========
if(val==null){
return null;
}
if(len>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315950805
GPR[SPVAP]-1661315950805
GPR[EPVAP]-1661315951437
GPR[EPVS]-1661315951437
========
if(pos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315951439
GPR[SPVAP]-1661315951439
GPR[EPVAP]-1661315952084
GPR[EPVS]-1661315952084
========
if(isEmpty(dec)){
return str;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315952085
GPR[SPVAP]-1661315952085
GPR[EPVAP]-1661315952732
GPR[EPVS]-1661315952732
========
if(val==null){
return EMPTY;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315952734
GPR[SPVAP]-1661315952734
GPR[EPVAP]-1661315953365
GPR[EPVS]-1661315953365
========
if(pos1>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315953366
GPR[SPVAP]-1661315953366
GPR[EPVAP]-1661315954007
GPR[EPVS]-1661315954007
========
if(pos2>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315954009
GPR[SPVAP]-1661315954009
GPR[EPVAP]-1661315954640
GPR[EPVS]-1661315954640
========
if(expPos<0){
end=val.length()+end;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315954641
GPR[SPVAP]-1661315954641
GPR[EPVAP]-1661315955278
GPR[EPVS]-1661315955278
========
if(expPos>val.length()){
end=str.length();
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315955279
GPR[SPVAP]-1661315955279
GPR[EPVAP]-1661315955923
GPR[EPVS]-1661315955923
========
if(decPos>expPos){
return EMPTY;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315955925
GPR[SPVAP]-1661315955925
GPR[EPVAP]-1661315956564
GPR[EPVS]-1661315956564
========
if(expPos<0){
end=0;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315956565
GPR[SPVAP]-1661315956565
GPR[EPVAP]-1661315957205
GPR[EPVS]-1661315957205
========
if(val==null){
return null;
}
if(start>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315957206
GPR[SPVAP]-1661315957206
GPR[EPVAP]-1661315957831
GPR[EPVS]-1661315957831
========
if(decPos<0){
start=0;
}
if(start>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315957832
GPR[SPVAP]-1661315957832
GPR[EPVAP]-1661315958464
GPR[EPVS]-1661315958464
========
if(val==null){
return null;
}
if(decPos<0){
start=0;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315958465
GPR[SPVAP]-1661315958465
GPR[EPVAP]-1661315959115
GPR[EPVS]-1661315959115
========
if(val==null){
return null;
}
if(decPos<0){
start=0;
}
if(start>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315959116
GPR[SPVAP]-1661315959116
GPR[EPVAP]-1661315959757
GPR[EPVS]-1661315959757
========
if(pads>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315959759
GPR[SPVAP]-1661315959759
GPR[EPVAP]-1661315960400
GPR[EPVS]-1661315960400
========
if(isEmpty(val)){
return str;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315960402
GPR[SPVAP]-1661315960402
GPR[EPVAP]-1661315961033
GPR[EPVS]-1661315961033
========
if(val.length()==1){
char val.charAt(0)=str.charAt(0);
if(ch==CharUtils.CR||ch==CharUtils.LF){
return EMPTY;
}
return str;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315961034
GPR[SPVAP]-1661315961034
GPR[EPVAP]-1661315961580
GPR[EPVS]-1661315961580
========
if(dec==null){
while((expPos!=decPos)&&Character.isWhitespace(val.charAt(start))){
start++;
}
}else if(stripChars.length()==0){
return str;
}else {
while((start!=strLen)&&(stripChars.indexOf(str.charAt(start))!=-1)){
start++;
}
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315961582
GPR[SPVAP]-1661315961582
GPR[EPVAP]-1661315962215
GPR[EPVS]-1661315962215
========
if(isEmpty(dec)){
return EMPTY;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315962216
GPR[SPVAP]-1661315962216
GPR[EPVAP]-1661315962850
GPR[EPVS]-1661315962850
========
if(isEmpty(val)){
return str;
}
if(pos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315962851
GPR[SPVAP]-1661315962851
GPR[EPVAP]-1661315963483
GPR[EPVS]-1661315963483
========
if(val==null){
return null;
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315963486
GPR[SPVAP]-1661315963486
GPR[EPVAP]-1661315964114
GPR[EPVS]-1661315964114
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315964115
GPR[SPVAP]-1661315964115
GPR[EPVAP]-1661315964750
GPR[EPVS]-1661315964750
========
if(val.length()<=expPos){
return str;
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315964751
GPR[SPVAP]-1661315964751
GPR[EPVAP]-1661315965388
GPR[EPVS]-1661315965388
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315965390
GPR[SPVAP]-1661315965390
GPR[EPVAP]-1661315966018
GPR[EPVS]-1661315966018
========
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315966019
GPR[SPVAP]-1661315966019
GPR[EPVAP]-1661315966654
GPR[EPVS]-1661315966654
========
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315966655
GPR[SPVAP]-1661315966656
GPR[EPVAP]-1661315967291
GPR[EPVS]-1661315967291
========
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315967292
GPR[SPVAP]-1661315967292
GPR[EPVAP]-1661315967937
GPR[EPVS]-1661315967937
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315967938
GPR[SPVAP]-1661315967938
GPR[EPVAP]-1661315968572
GPR[EPVS]-1661315968573
========
if(val==null){
return null;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315968574
GPR[SPVAP]-1661315968574
GPR[EPVAP]-1661315969201
GPR[EPVS]-1661315969201
========
if(val==null){
return null;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315969202
GPR[SPVAP]-1661315969202
GPR[EPVAP]-1661315969831
GPR[EPVS]-1661315969831
========
if(val==null){
return null;
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315969832
GPR[SPVAP]-1661315969832
GPR[EPVAP]-1661315970472
GPR[EPVS]-1661315970472
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315970473
GPR[SPVAP]-1661315970473
GPR[EPVAP]-1661315971115
GPR[EPVS]-1661315971115
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315971116
GPR[SPVAP]-1661315971116
GPR[EPVAP]-1661315971747
GPR[EPVS]-1661315971747
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315971749
GPR[SPVAP]-1661315971749
GPR[EPVAP]-1661315972379
GPR[EPVS]-1661315972379
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315972380
GPR[SPVAP]-1661315972380
GPR[EPVAP]-1661315973007
GPR[EPVS]-1661315973007
========
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315973008
GPR[SPVAP]-1661315973008
GPR[EPVAP]-1661315973652
GPR[EPVS]-1661315973652
========
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315973654
GPR[SPVAP]-1661315973654
GPR[EPVAP]-1661315974288
GPR[EPVS]-1661315974288
========
if(val.length()<=expPos){
return str;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315974290
GPR[SPVAP]-1661315974290
GPR[EPVAP]-1661315974931
GPR[EPVS]-1661315974931
========
if(val.length()<=expPos){
return str;
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315974933
GPR[SPVAP]-1661315974933
GPR[EPVAP]-1661315975558
GPR[EPVS]-1661315975558
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315975559
GPR[SPVAP]-1661315975559
GPR[EPVAP]-1661315976191
GPR[EPVS]-1661315976191
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315976193
GPR[SPVAP]-1661315976193
GPR[EPVAP]-1661315976839
GPR[EPVS]-1661315976839
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315976841
GPR[SPVAP]-1661315976841
GPR[EPVAP]-1661315977469
GPR[EPVS]-1661315977469
========
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315977470
GPR[SPVAP]-1661315977470
GPR[EPVAP]-1661315978100
GPR[EPVS]-1661315978100
========
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315978101
GPR[SPVAP]-1661315978101
GPR[EPVAP]-1661315978727
GPR[EPVS]-1661315978727
========
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315978728
GPR[SPVAP]-1661315978728
GPR[EPVAP]-1661315979359
GPR[EPVS]-1661315979359
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315979360
GPR[SPVAP]-1661315979360
GPR[EPVAP]-1661315980004
GPR[EPVS]-1661315980004
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315980006
GPR[SPVAP]-1661315980006
GPR[EPVAP]-1661315980634
GPR[EPVS]-1661315980634
========
if(val==null){
return null;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315980636
GPR[SPVAP]-1661315980636
GPR[EPVAP]-1661315981274
GPR[EPVS]-1661315981274
========
if(val==null){
return null;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315981275
GPR[SPVAP]-1661315981275
GPR[EPVAP]-1661315981905
GPR[EPVS]-1661315981905
========
if(val==null){
return null;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315981906
GPR[SPVAP]-1661315981906
GPR[EPVAP]-1661315982554
GPR[EPVS]-1661315982554
========
if(val==null){
return null;
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315982555
GPR[SPVAP]-1661315982555
GPR[EPVAP]-1661315983188
GPR[EPVS]-1661315983188
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315983189
GPR[SPVAP]-1661315983189
GPR[EPVAP]-1661315983820
GPR[EPVS]-1661315983820
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315983821
GPR[SPVAP]-1661315983821
GPR[EPVAP]-1661315984463
GPR[EPVS]-1661315984463
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315984464
GPR[SPVAP]-1661315984464
GPR[EPVAP]-1661315985088
GPR[EPVS]-1661315985088
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315985090
GPR[SPVAP]-1661315985090
GPR[EPVAP]-1661315985722
GPR[EPVS]-1661315985722
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315985723
GPR[SPVAP]-1661315985723
GPR[EPVAP]-1661315986364
GPR[EPVS]-1661315986364
========
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315986365
GPR[SPVAP]-1661315986365
GPR[EPVAP]-1661315986998
GPR[EPVS]-1661315986998
========
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315986999
GPR[SPVAP]-1661315986999
GPR[EPVAP]-1661315987636
GPR[EPVS]-1661315987636
========
if(val.length()<=expPos){
return str;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315987637
GPR[SPVAP]-1661315987637
GPR[EPVAP]-1661315988268
GPR[EPVS]-1661315988268
========
if(val.length()<=expPos){
return str;
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315988269
GPR[SPVAP]-1661315988269
GPR[EPVAP]-1661315988914
GPR[EPVS]-1661315988914
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315988915
GPR[SPVAP]-1661315988915
GPR[EPVAP]-1661315989546
GPR[EPVS]-1661315989546
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315989548
GPR[SPVAP]-1661315989548
GPR[EPVAP]-1661315990189
GPR[EPVS]-1661315990189
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315990190
GPR[SPVAP]-1661315990190
GPR[EPVAP]-1661315990828
GPR[EPVS]-1661315990828
========
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315990830
GPR[SPVAP]-1661315990830
GPR[EPVAP]-1661315991470
GPR[EPVS]-1661315991470
========
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315991471
GPR[SPVAP]-1661315991471
GPR[EPVAP]-1661315992104
GPR[EPVS]-1661315992104
========
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315992105
GPR[SPVAP]-1661315992105
GPR[EPVAP]-1661315992733
GPR[EPVS]-1661315992733
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315992734
GPR[SPVAP]-1661315992734
GPR[EPVAP]-1661315993364
GPR[EPVS]-1661315993364
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315993365
GPR[SPVAP]-1661315993365
GPR[EPVAP]-1661315994003
GPR[EPVS]-1661315994003
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315994004
GPR[SPVAP]-1661315994004
GPR[EPVAP]-1661315994631
GPR[EPVS]-1661315994631
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315994632
GPR[SPVAP]-1661315994632
GPR[EPVAP]-1661315995274
GPR[EPVS]-1661315995274
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315995275
GPR[SPVAP]-1661315995275
GPR[EPVAP]-1661315995913
GPR[EPVS]-1661315995913
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315995914
GPR[SPVAP]-1661315995914
GPR[EPVAP]-1661315996543
GPR[EPVS]-1661315996543
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315996544
GPR[SPVAP]-1661315996544
GPR[EPVAP]-1661315997175
GPR[EPVS]-1661315997175
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315997176
GPR[SPVAP]-1661315997176
GPR[EPVAP]-1661315997814
GPR[EPVS]-1661315997814
========
if(val==null){
return null;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315997815
GPR[SPVAP]-1661315997815
GPR[EPVAP]-1661315998452
GPR[EPVS]-1661315998452
========
if(val==null){
return null;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315998454
GPR[SPVAP]-1661315998454
GPR[EPVAP]-1661315999088
GPR[EPVS]-1661315999088
========
if(val==null){
return null;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315999089
GPR[SPVAP]-1661315999089
GPR[EPVAP]-1661315999725
GPR[EPVS]-1661315999725
========
if(val==null){
return null;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661315999726
GPR[SPVAP]-1661315999726
GPR[EPVAP]-1661316000368
GPR[EPVS]-1661316000368
========
if(val==null){
return null;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316000370
GPR[SPVAP]-1661316000370
GPR[EPVAP]-1661316001008
GPR[EPVS]-1661316001008
========
if(val==null){
return null;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316001009
GPR[SPVAP]-1661316001009
GPR[EPVAP]-1661316001635
GPR[EPVS]-1661316001635
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316001637
GPR[SPVAP]-1661316001637
GPR[EPVAP]-1661316002269
GPR[EPVS]-1661316002269
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316002271
GPR[SPVAP]-1661316002271
GPR[EPVAP]-1661316002905
GPR[EPVS]-1661316002905
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316002907
GPR[SPVAP]-1661316002907
GPR[EPVAP]-1661316003537
GPR[EPVS]-1661316003537
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316003538
GPR[SPVAP]-1661316003538
GPR[EPVAP]-1661316004173
GPR[EPVS]-1661316004173
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316004174
GPR[SPVAP]-1661316004174
GPR[EPVAP]-1661316004804
GPR[EPVS]-1661316004804
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316004805
GPR[SPVAP]-1661316004805
GPR[EPVAP]-1661316005432
GPR[EPVS]-1661316005432
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316005434
GPR[SPVAP]-1661316005434
GPR[EPVAP]-1661316006062
GPR[EPVS]-1661316006062
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316006064
GPR[SPVAP]-1661316006064
GPR[EPVAP]-1661316006702
GPR[EPVS]-1661316006702
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316006703
GPR[SPVAP]-1661316006703
GPR[EPVAP]-1661316007337
GPR[EPVS]-1661316007337
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316007338
GPR[SPVAP]-1661316007338
GPR[EPVAP]-1661316007977
GPR[EPVS]-1661316007977
========
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316007978
GPR[SPVAP]-1661316007978
GPR[EPVAP]-1661316008615
GPR[EPVS]-1661316008615
========
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316008617
GPR[SPVAP]-1661316008617
GPR[EPVAP]-1661316009244
GPR[EPVS]-1661316009244
========
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316009245
GPR[SPVAP]-1661316009245
GPR[EPVAP]-1661316009892
GPR[EPVS]-1661316009892
========
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316009893
GPR[SPVAP]-1661316009893
GPR[EPVAP]-1661316010529
GPR[EPVS]-1661316010529
========
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316010530
GPR[SPVAP]-1661316010530
GPR[EPVAP]-1661316011164
GPR[EPVS]-1661316011164
========
if(val.length()<=expPos){
return str;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316011165
GPR[SPVAP]-1661316011165
GPR[EPVAP]-1661316011795
GPR[EPVS]-1661316011795
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316011797
GPR[SPVAP]-1661316011797
GPR[EPVAP]-1661316012437
GPR[EPVS]-1661316012437
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316012438
GPR[SPVAP]-1661316012438
GPR[EPVAP]-1661316013073
GPR[EPVS]-1661316013073
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316013075
GPR[SPVAP]-1661316013075
GPR[EPVAP]-1661316013711
GPR[EPVS]-1661316013711
========
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316013713
GPR[SPVAP]-1661316013713
GPR[EPVAP]-1661316014346
GPR[EPVS]-1661316014346
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316014347
GPR[SPVAP]-1661316014347
GPR[EPVAP]-1661316014980
GPR[EPVS]-1661316014980
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316014981
GPR[SPVAP]-1661316014981
GPR[EPVAP]-1661316015607
GPR[EPVS]-1661316015607
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316015608
GPR[SPVAP]-1661316015608
GPR[EPVAP]-1661316016248
GPR[EPVS]-1661316016248
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316016250
GPR[SPVAP]-1661316016250
GPR[EPVAP]-1661316016887
GPR[EPVS]-1661316016887
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316016888
GPR[SPVAP]-1661316016888
GPR[EPVAP]-1661316017529
GPR[EPVS]-1661316017529
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316017530
GPR[SPVAP]-1661316017530
GPR[EPVAP]-1661316018169
GPR[EPVS]-1661316018169
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316018170
GPR[SPVAP]-1661316018170
GPR[EPVAP]-1661316018802
GPR[EPVS]-1661316018802
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316018804
GPR[SPVAP]-1661316018804
GPR[EPVAP]-1661316019434
GPR[EPVS]-1661316019434
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316019436
GPR[SPVAP]-1661316019436
GPR[EPVAP]-1661316020077
GPR[EPVS]-1661316020077
========
if(val==null){
return null;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316020079
GPR[SPVAP]-1661316020079
GPR[EPVAP]-1661316020712
GPR[EPVS]-1661316020712
========
if(val==null){
return null;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316020713
GPR[SPVAP]-1661316020713
GPR[EPVAP]-1661316021336
GPR[EPVS]-1661316021336
========
if(val==null){
return null;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316021337
GPR[SPVAP]-1661316021337
GPR[EPVAP]-1661316021971
GPR[EPVS]-1661316021971
========
if(val==null){
return null;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316021972
GPR[SPVAP]-1661316021973
GPR[EPVAP]-1661316022624
GPR[EPVS]-1661316022624
========
if(val==null){
return null;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316022625
GPR[SPVAP]-1661316022625
GPR[EPVAP]-1661316023264
GPR[EPVS]-1661316023264
========
if(val==null){
return null;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316023265
GPR[SPVAP]-1661316023265
GPR[EPVAP]-1661316023896
GPR[EPVS]-1661316023896
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316023897
GPR[SPVAP]-1661316023897
GPR[EPVAP]-1661316024532
GPR[EPVS]-1661316024532
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316024533
GPR[SPVAP]-1661316024533
GPR[EPVAP]-1661316025173
GPR[EPVS]-1661316025173
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316025174
GPR[SPVAP]-1661316025174
GPR[EPVAP]-1661316025808
GPR[EPVS]-1661316025808
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316025809
GPR[SPVAP]-1661316025809
GPR[EPVAP]-1661316026451
GPR[EPVS]-1661316026451
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316026452
GPR[SPVAP]-1661316026452
GPR[EPVAP]-1661316027084
GPR[EPVS]-1661316027084
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316027085
GPR[SPVAP]-1661316027085
GPR[EPVAP]-1661316027713
GPR[EPVS]-1661316027713
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316027715
GPR[SPVAP]-1661316027715
GPR[EPVAP]-1661316028342
GPR[EPVS]-1661316028342
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316028343
GPR[SPVAP]-1661316028343
GPR[EPVAP]-1661316028978
GPR[EPVS]-1661316028978
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316028979
GPR[SPVAP]-1661316028979
GPR[EPVAP]-1661316029610
GPR[EPVS]-1661316029610
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316029611
GPR[SPVAP]-1661316029611
GPR[EPVAP]-1661316030244
GPR[EPVS]-1661316030244
========
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316030245
GPR[SPVAP]-1661316030245
GPR[EPVAP]-1661316030875
GPR[EPVS]-1661316030875
========
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316030876
GPR[SPVAP]-1661316030876
GPR[EPVAP]-1661316031516
GPR[EPVS]-1661316031516
========
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316031517
GPR[SPVAP]-1661316031517
GPR[EPVAP]-1661316032148
GPR[EPVS]-1661316032148
========
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316032150
GPR[SPVAP]-1661316032150
GPR[EPVAP]-1661316032793
GPR[EPVS]-1661316032793
========
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316032794
GPR[SPVAP]-1661316032794
GPR[EPVAP]-1661316033430
GPR[EPVS]-1661316033430
========
if(val.length()<=expPos){
return str;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316033431
GPR[SPVAP]-1661316033431
GPR[EPVAP]-1661316034086
GPR[EPVS]-1661316034086
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316034088
GPR[SPVAP]-1661316034088
GPR[EPVAP]-1661316034719
GPR[EPVS]-1661316034719
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316034720
GPR[SPVAP]-1661316034720
GPR[EPVAP]-1661316035348
GPR[EPVS]-1661316035348
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316035349
GPR[SPVAP]-1661316035349
GPR[EPVAP]-1661316035984
GPR[EPVS]-1661316035984
========
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(offset>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316035986
GPR[SPVAP]-1661316035986
GPR[EPVAP]-1661316036622
GPR[EPVS]-1661316036622
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316036623
GPR[SPVAP]-1661316036623
GPR[EPVAP]-1661316037254
GPR[EPVS]-1661316037254
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316037255
GPR[SPVAP]-1661316037255
GPR[EPVAP]-1661316037891
GPR[EPVS]-1661316037891
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316037892
GPR[SPVAP]-1661316037892
GPR[EPVAP]-1661316038537
GPR[EPVS]-1661316038537
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316038538
GPR[SPVAP]-1661316038538
GPR[EPVAP]-1661316039188
GPR[EPVS]-1661316039188
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316039189
GPR[SPVAP]-1661316039189
GPR[EPVAP]-1661316039828
GPR[EPVS]-1661316039828
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316039829
GPR[SPVAP]-1661316039829
GPR[EPVAP]-1661316040466
GPR[EPVS]-1661316040466
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316040467
GPR[SPVAP]-1661316040467
GPR[EPVAP]-1661316041103
GPR[EPVS]-1661316041103
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316041104
GPR[SPVAP]-1661316041104
GPR[EPVAP]-1661316041733
GPR[EPVS]-1661316041733
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316041735
GPR[SPVAP]-1661316041735
GPR[EPVAP]-1661316042369
GPR[EPVS]-1661316042369
========
if(val==null){
return null;
}
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316042371
GPR[SPVAP]-1661316042371
GPR[EPVAP]-1661316043001
GPR[EPVS]-1661316043001
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316043002
GPR[SPVAP]-1661316043002
GPR[EPVAP]-1661316043641
GPR[EPVS]-1661316043641
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316043642
GPR[SPVAP]-1661316043642
GPR[EPVAP]-1661316044272
GPR[EPVS]-1661316044272
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316044273
GPR[SPVAP]-1661316044273
GPR[EPVAP]-1661316044907
GPR[EPVS]-1661316044907
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316044909
GPR[SPVAP]-1661316044909
GPR[EPVAP]-1661316045536
GPR[EPVS]-1661316045536
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316045537
GPR[SPVAP]-1661316045537
GPR[EPVAP]-1661316046174
GPR[EPVS]-1661316046174
========
if(val==null){
return null;
}
if(val.length()<=expPos){
return str;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316046175
GPR[SPVAP]-1661316046175
GPR[EPVAP]-1661316046810
GPR[EPVS]-1661316046810
========
if(val==null){
return null;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316046812
GPR[SPVAP]-1661316046812
GPR[EPVAP]-1661316047445
GPR[EPVS]-1661316047445
========
if(val==null){
return null;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316047446
GPR[SPVAP]-1661316047446
GPR[EPVAP]-1661316048096
GPR[EPVS]-1661316048096
========
if(val==null){
return null;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316048097
GPR[SPVAP]-1661316048097
GPR[EPVAP]-1661316048736
GPR[EPVS]-1661316048736
========
if(val==null){
return null;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316048737
GPR[SPVAP]-1661316048737
GPR[EPVAP]-1661316049369
GPR[EPVS]-1661316049369
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316049370
GPR[SPVAP]-1661316049370
GPR[EPVAP]-1661316050008
GPR[EPVS]-1661316050008
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316050009
GPR[SPVAP]-1661316050009
GPR[EPVAP]-1661316050644
GPR[EPVS]-1661316050644
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316050645
GPR[SPVAP]-1661316050645
GPR[EPVAP]-1661316051280
GPR[EPVS]-1661316051280
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316051281
GPR[SPVAP]-1661316051281
GPR[EPVAP]-1661316051922
GPR[EPVS]-1661316051922
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316051923
GPR[SPVAP]-1661316051923
GPR[EPVAP]-1661316052570
GPR[EPVS]-1661316052570
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(val.length()<=expPos){
return str;
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316052571
GPR[SPVAP]-1661316052571
GPR[EPVAP]-1661316053200
GPR[EPVS]-1661316053200
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316053201
GPR[SPVAP]-1661316053201
GPR[EPVAP]-1661316053838
GPR[EPVS]-1661316053838
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316053839
GPR[SPVAP]-1661316053839
GPR[EPVAP]-1661316054478
GPR[EPVS]-1661316054478
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316054479
GPR[SPVAP]-1661316054479
GPR[EPVAP]-1661316055111
GPR[EPVS]-1661316055111
========
if(expPos<4){
throw new IllegalArgumentException("Minimum abbreviation width is 4");
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316055112
GPR[SPVAP]-1661316055112
GPR[EPVAP]-1661316055746
GPR[EPVS]-1661316055746
========
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316055747
GPR[SPVAP]-1661316055747
GPR[EPVAP]-1661316056385
GPR[EPVS]-1661316056385
========
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316056386
GPR[SPVAP]-1661316056386
GPR[EPVAP]-1661316057027
GPR[EPVS]-1661316057027
========
if(val.length()<=expPos){
return str;
}
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316057028
GPR[SPVAP]-1661316057028
GPR[EPVAP]-1661316057663
GPR[EPVS]-1661316057663
========
if(val.length()<=expPos){
return str;
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316057664
GPR[SPVAP]-1661316057664
GPR[EPVAP]-1661316058286
GPR[EPVS]-1661316058286
========
if((val.length()-decPos)<(expPos-3)){
offset=str.length()-(maxWidth-3);
}
if(decPos<=4){
return val.substring(0,expPos-3)+"...";
}
if(expPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if((decPos+(expPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(decPos>-1){
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
dec=val.substring(decPos+1,expPos);
}else {
dec=val.substring(decPos+1);
}
mant=val.substring(0,decPos);
}else {
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316058287
GPR[SPVAP]-1661316058287
GPR[EPVAP]-1661316058931
GPR[EPVS]-1661316058931
GPR[ESUN]-1661316058932
GPR[SSUN]-1661316058932
org.apache.commons.lang.NumberUtils,174
GPR[ESUN]-1661316059055
GPR[SSUN]-1661316059055
org.apache.commons.lang.NumberUtils,177
GPR[ESUN]-1661316059106
GPR[SSUN]-1661316059106
org.apache.commons.lang.NumberUtils,179
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316059584
GPR[SPVAP]-1661316059584
GPR[EPVAP]-1661316062774
GPR[SPVATF]-1661316062774
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316063698
GPR[EPVS]-1661316063698
========
if(expPos>-1){
mant=str.substring(0,expPos);
}else {
mant=str;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316063699
GPR[SPVAP]-1661316063699
GPR[EPVAP]-1661316064338
GPR[EPVS]-1661316064338
========
if(expPos>-1){
mant=str.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316064339
GPR[SPVAP]-1661316064339
GPR[EPVAP]-1661316064968
GPR[EPVS]-1661316064968
========
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=str;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316064969
GPR[SPVAP]-1661316064969
GPR[EPVAP]-1661316065600
GPR[EPVS]-1661316065600
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
mant=str.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316065601
GPR[SPVAP]-1661316065601
GPR[EPVAP]-1661316066232
GPR[EPVS]-1661316066232
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
mant=val.substring(0,expPos);
}else {
mant=str;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316066233
GPR[SPVAP]-1661316066233
GPR[EPVAP]-1661316066869
GPR[EPVS]-1661316066869
========
if(expPos>-1){
if(expPos<decPos){
throw new NumberFormatException(val+" is not a valid number.");
}
mant=str.substring(0,expPos);
}else {
mant=str;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316066870
GPR[SPVAP]-1661316066870
GPR[EPVAP]-1661316067523
GPR[EPVS]-1661316067523
========
if(expPos>-1&&expPos<val.length()-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316067525
GPR[SPVAP]-1661316067525
GPR[EPVAP]-1661316068628
GPR[SPVATF]-1661316068628
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316069556
GPR[EPVS]-1661316069556
========
if(decPos>expPos){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316069557
GPR[SPVAP]-1661316069557
GPR[EPVAP]-1661316070644
GPR[SPVATF]-1661316070644
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316071577
GPR[EPVS]-1661316071577
========
if(decPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316071578
GPR[SPVAP]-1661316071578
GPR[EPVAP]-1661316072656
GPR[SPVATF]-1661316072656
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316073583
GPR[EPVS]-1661316073583
========
if(start>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316073584
GPR[SPVAP]-1661316073584
GPR[EPVAP]-1661316074212
GPR[EPVS]-1661316074212
========
if(decPos<0){
start=0;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316074213
GPR[SPVAP]-1661316074213
GPR[EPVAP]-1661316074859
GPR[EPVS]-1661316074859
========
if(expPos<0){
end=0;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316074860
GPR[SPVAP]-1661316074860
GPR[EPVAP]-1661316075492
GPR[EPVS]-1661316075492
========
if(idx>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316075494
GPR[SPVAP]-1661316075494
GPR[EPVAP]-1661316076136
GPR[EPVS]-1661316076136
========
if(smallestIndexOfDiff>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316076138
GPR[SPVAP]-1661316076138
GPR[EPVAP]-1661316076772
GPR[EPVS]-1661316076772
========
if(expPos>-1){
mant=desc.substring(0,expPos);
}else {
mant=desc;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316076774
GPR[SPVAP]-1661316076774
GPR[EPVAP]-1661316077398
GPR[EPVS]-1661316077398
========
if(i>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316077399
GPR[SPVAP]-1661316077399
GPR[EPVAP]-1661316078043
GPR[EPVS]-1661316078043
========
if(expPos>-1){
mant=desc.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316078044
GPR[SPVAP]-1661316078044
GPR[EPVAP]-1661316078698
GPR[EPVS]-1661316078698
========
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=desc;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316078699
GPR[SPVAP]-1661316078699
GPR[EPVAP]-1661316079327
GPR[EPVS]-1661316079327
========
if(expPos>-1){
args=val.substring(expPos+1).trim();
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316079328
GPR[SPVAP]-1661316079328
GPR[EPVAP]-1661316079960
GPR[EPVS]-1661316079960
========
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
args=val.substring(expPos+1).trim();
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316079962
GPR[SPVAP]-1661316079962
GPR[EPVAP]-1661316080594
GPR[EPVS]-1661316080594
========
if(strLen>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316080596
GPR[SPVAP]-1661316080596
GPR[EPVAP]-1661316081234
GPR[EPVS]-1661316081234
========
if(val.charAt(expPos-1)==CharUtils.LF){
if(dec.charAt(expPos-1-1)==CharUtils.CR){
return ret.substring(0,lastIdx-1);
}
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316081236
GPR[SPVAP]-1661316081236
GPR[EPVAP]-1661316081867
GPR[EPVS]-1661316081867
========
if(expPos>-1&&expPos<val.length()-1){
mant=str.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316081869
GPR[SPVAP]-1661316081869
GPR[EPVAP]-1661316082510
GPR[EPVS]-1661316082510
========
if(len>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316082512
GPR[SPVAP]-1661316082512
GPR[EPVAP]-1661316083145
GPR[EPVS]-1661316083145
========
if(val==null){
return null;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316083146
GPR[SPVAP]-1661316083146
GPR[EPVAP]-1661316084250
GPR[SPVATF]-1661316084250
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316085186
GPR[EPVS]-1661316085186
========
if(expPos<0){
pos=0;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316085187
GPR[SPVAP]-1661316085187
GPR[EPVAP]-1661316085820
GPR[EPVS]-1661316085820
========
if(val.length()<=(expPos+decPos)){
return str.substring(pos);
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316085822
GPR[SPVAP]-1661316085822
GPR[EPVAP]-1661316086454
GPR[EPVS]-1661316086454
========
if(numberOfSubstrings>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316086456
GPR[SPVAP]-1661316086456
GPR[EPVAP]-1661316087087
GPR[EPVS]-1661316087087
========
if(pos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316087089
GPR[SPVAP]-1661316087089
GPR[EPVAP]-1661316087718
GPR[EPVS]-1661316087718
========
val=str.substring(expPos+1);
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316087719
GPR[SPVAP]-1661316087719
GPR[EPVAP]-1661316088353
GPR[EPVS]-1661316088353
========
expPos=val.indexOf('/');
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316088355
GPR[SPVAP]-1661316088355
GPR[EPVAP]-1661316089439
GPR[SPVATF]-1661316089439
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316090370
GPR[EPVS]-1661316090370
========
if(expPos>=-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316090371
GPR[SPVAP]-1661316090371
GPR[EPVAP]-1661316091458
GPR[SPVATF]-1661316091458
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316092383
GPR[EPVS]-1661316092383
========
if(spaceToWrapAt>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316092384
GPR[SPVAP]-1661316092384
GPR[EPVAP]-1661316093020
GPR[EPVS]-1661316093020
========
if(offset>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316093021
GPR[SPVAP]-1661316093021
GPR[EPVAP]-1661316093657
GPR[EPVS]-1661316093657
========
if(decPos<7){
throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316093658
GPR[SPVAP]-1661316093658
GPR[EPVAP]-1661316094754
GPR[SPVATF]-1661316094754
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316095685
GPR[EPVS]-1661316095685
========
if((expPos+(decPos-3))<val.length()){
return "..."+abbreviate(str.substring(offset),maxWidth-3);
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316095687
GPR[SPVAP]-1661316095687
GPR[EPVAP]-1661316096328
GPR[EPVS]-1661316096328
========
if(at>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316096330
GPR[SPVAP]-1661316096330
GPR[EPVAP]-1661316096974
GPR[EPVS]-1661316096974
========
if(val==null){
return val;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316096976
GPR[SPVAP]-1661316096976
GPR[EPVAP]-1661316097602
GPR[EPVS]-1661316097602
========
if(val==null){
return StringUtils.EMPTY;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316097603
GPR[SPVAP]-1661316097603
GPR[EPVAP]-1661316098225
GPR[EPVS]-1661316098225
========
if(end>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316098226
GPR[SPVAP]-1661316098226
GPR[EPVAP]-1661316098859
GPR[EPVS]-1661316098859
========
if(depth>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316098861
GPR[SPVAP]-1661316098861
GPR[EPVAP]-1661316099489
GPR[EPVS]-1661316099489
========
if(val.length()<=expPos){
return str;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316099490
GPR[SPVAP]-1661316099490
GPR[EPVAP]-1661316100127
GPR[EPVS]-1661316100127
========
if(val==null){
return null;
}
if(len>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316100128
GPR[SPVAP]-1661316100128
GPR[EPVAP]-1661316100800
GPR[EPVS]-1661316100800
========
if(expPos<0){
start=0;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316100802
GPR[SPVAP]-1661316100802
GPR[EPVAP]-1661316101446
GPR[EPVS]-1661316101446
========
if(expPos>val.length()){
return EMPTY;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316101448
GPR[SPVAP]-1661316101448
GPR[EPVAP]-1661316102102
GPR[EPVS]-1661316102102
========
if(val==null){
return null;
}
if(start>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316102103
GPR[SPVAP]-1661316102103
GPR[EPVAP]-1661316102743
GPR[EPVS]-1661316102743
========
decPos+=decPos;
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316102744
GPR[SPVAP]-1661316102744
GPR[EPVAP]-1661316103842
GPR[SPVATF]-1661316103842
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316104757
GPR[EPVS]-1661316104757
========
decPos+=decPos;
if(end>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316104759
GPR[SPVAP]-1661316104759
GPR[EPVAP]-1661316105409
GPR[EPVS]-1661316105409
========
if(expPos>decPos){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316105410
GPR[SPVAP]-1661316105410
GPR[EPVAP]-1661316106500
GPR[SPVATF]-1661316106500
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316107422
GPR[EPVS]-1661316107423
========
if(decPos>decPos){
end=len;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316107424
GPR[SPVAP]-1661316107424
GPR[EPVAP]-1661316108066
GPR[EPVS]-1661316108066
========
if(start>decPos){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316108067
GPR[SPVAP]-1661316108067
GPR[EPVAP]-1661316108700
GPR[EPVS]-1661316108700
========
if(expPos>-1){
mant=out.substring(0,expPos);
}else {
mant=out;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316108701
GPR[SPVAP]-1661316108701
GPR[EPVAP]-1661316109344
GPR[EPVS]-1661316109344
========
if(innerIdx>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316109345
GPR[SPVAP]-1661316109345
GPR[EPVAP]-1661316109976
GPR[EPVS]-1661316109976
========
if(expPos>-1){
mant=out.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316109977
GPR[SPVAP]-1661316109977
GPR[EPVAP]-1661316110650
GPR[EPVS]-1661316110650
========
if(expPos>-1){
mant=val.replace(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316110651
GPR[SPVAP]-1661316110651
GPR[EPVAP]-1661316111292
GPR[EPVS]-1661316111292
========
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=out;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316111294
GPR[SPVAP]-1661316111294
GPR[EPVAP]-1661316111938
GPR[EPVS]-1661316111938
========
if(maxWidth>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316111939
GPR[SPVAP]-1661316111939
GPR[EPVAP]-1661316112575
GPR[EPVS]-1661316112575
========
if(amphersandIdx>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316112576
GPR[SPVAP]-1661316112576
GPR[EPVAP]-1661316113211
GPR[EPVS]-1661316113211
========
if(pos1>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316113212
GPR[SPVAP]-1661316113212
GPR[EPVAP]-1661316113838
GPR[EPVS]-1661316113838
========
if(pos2>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316113839
GPR[SPVAP]-1661316113839
GPR[EPVAP]-1661316114471
GPR[EPVS]-1661316114471
========
if(upper>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316114472
GPR[SPVAP]-1661316114472
GPR[EPVAP]-1661316115112
GPR[EPVS]-1661316115112
========
if(index>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316115113
GPR[SPVAP]-1661316115113
GPR[EPVAP]-1661316115761
GPR[EPVS]-1661316115761
========
if(isEmpty(val)||val==null){
return str;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316115762
GPR[SPVAP]-1661316115762
GPR[EPVAP]-1661316116392
GPR[EPVS]-1661316116392
========
if(val.length()==0){
return EMPTY;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316116393
GPR[SPVAP]-1661316116393
GPR[EPVAP]-1661316117028
GPR[EPVS]-1661316117028
========
if(isEmpty(val)||isEmpty(val)){
return str;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316117030
GPR[SPVAP]-1661316117030
GPR[EPVAP]-1661316117658
GPR[EPVS]-1661316117658
========
if(isEmpty(val)){
return str;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316117659
GPR[SPVAP]-1661316117659
GPR[EPVAP]-1661316118303
GPR[EPVS]-1661316118303
========
if(val.indexOf(val)==-1){
return EMPTY;
}
if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316118304
GPR[SPVAP]-1661316118304
GPR[EPVAP]-1661316118932
GPR[EPVS]-1661316118932
========
if(pads>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316118933
GPR[SPVAP]-1661316118933
GPR[EPVAP]-1661316119580
GPR[EPVS]-1661316119580
========
case 'f' :

if(expPos>-1){
mant=val.substring(0,expPos);
}else {
mant=val;
}
dec=null;

========
MM Copying to MM
GPR[SPVS]-1661316119581
GPR[SPVAP]-1661316119581
GPR[EPVAP]-1661316120120
GPR[EPVS]-1661316120120
GPR[ESUN]-1661316120121
GPR[SSUN]-1661316120121
org.apache.commons.lang.NumberUtils,181
========
if(expPos>-1&&expPos<str.length()-1){
exp=str.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316121042
GPR[SPVAP]-1661316121042
GPR[EPVAP]-1661316122213
GPR[EPVS]-1661316122213
========
if(expPos>-1&&expPos<str.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316122214
GPR[SPVAP]-1661316122214
GPR[EPVAP]-1661316123172
GPR[EPVS]-1661316123172
========
if(expPos>-1&&expPos<val.length()-1){
exp=str.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316123173
GPR[SPVAP]-1661316123173
GPR[EPVAP]-1661316124120
GPR[EPVS]-1661316124120
========
if(dec.length()>val.length()){
return false;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316124123
GPR[SPVAP]-1661316124123
GPR[EPVAP]-1661316125074
GPR[EPVS]-1661316125074
========
if(expPos>-1&&startPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316125075
GPR[SPVAP]-1661316125075
GPR[EPVAP]-1661316126016
GPR[EPVS]-1661316126016
========
if(expPos>-1&&expPos<val.length()-1){
tmp=StringUtils.replaceOnce(exp," 0 hours","");
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316126017
GPR[SPVAP]-1661316126017
GPR[EPVAP]-1661316126980
GPR[EPVS]-1661316126980
========
if(expPos>-1&&expPos<val.length()-1){
if(val.length()!=exp.length()){
duration=StringUtils.replaceOnce(val," 0 days","");
}
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316126982
GPR[SPVAP]-1661316126982
GPR[EPVAP]-1661316127930
GPR[EPVS]-1661316127930
========
if(expPos>-1&&expPos<val.length()-1){
tmp=StringUtils.replaceOnce(exp," 0 hours","");
if(val.length()!=exp.length()){
duration=StringUtils.replaceOnce(val," 0 days","");
}

exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316127931
GPR[SPVAP]-1661316127931
GPR[EPVAP]-1661316128890
GPR[EPVS]-1661316128890
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
tmp=StringUtils.replaceOnce(exp," 0 hours","");
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316128891
GPR[SPVAP]-1661316128891
GPR[EPVAP]-1661316129844
GPR[EPVS]-1661316129844
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
if(val.length()!=exp.length()){
duration=StringUtils.replaceOnce(val," 0 days","");
}
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316129846
GPR[SPVAP]-1661316129846
GPR[EPVAP]-1661316130805
GPR[EPVS]-1661316130805
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
tmp=StringUtils.replaceOnce(exp," 0 hours","");
if(val.length()!=exp.length()){
duration=StringUtils.replaceOnce(val," 0 days","");
}

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316130806
GPR[SPVAP]-1661316130806
GPR[EPVAP]-1661316131761
GPR[EPVS]-1661316131761
========
if(expPos>-1&&maxWidth<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316131762
GPR[SPVAP]-1661316131762
GPR[EPVAP]-1661316132820
GPR[EPVS]-1661316132820
========
if(upper>-1&&upper<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316132822
GPR[SPVAP]-1661316132822
GPR[EPVAP]-1661316133776
GPR[EPVS]-1661316133776
========
if(upper>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316133777
GPR[SPVAP]-1661316133777
GPR[EPVAP]-1661316134735
GPR[EPVS]-1661316134735
========
if(expPos>-1&&upper<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316134736
GPR[SPVAP]-1661316134736
GPR[EPVAP]-1661316135703
GPR[EPVS]-1661316135703
========
if(expPos<0){
return EMPTY;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316135705
GPR[SPVAP]-1661316135705
GPR[EPVAP]-1661316136666
GPR[EPVS]-1661316136666
========
if(val.length()<=expPos){
return str;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316136667
GPR[SPVAP]-1661316136667
GPR[EPVAP]-1661316137660
GPR[EPVS]-1661316137660
========
if(pos>-1&&pos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316137661
GPR[SPVAP]-1661316137661
GPR[EPVAP]-1661316138636
GPR[EPVS]-1661316138636
========
if(pos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316138638
GPR[SPVAP]-1661316138638
GPR[EPVAP]-1661316139582
GPR[EPVS]-1661316139582
========
if(expPos>-1&&pos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316139583
GPR[SPVAP]-1661316139583
GPR[EPVAP]-1661316140524
GPR[EPVS]-1661316140524
========
decPos=Math.min(increase,val.length()/5);
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316140525
GPR[SPVAP]-1661316140525
GPR[EPVAP]-1661316141474
GPR[EPVS]-1661316141474
========
if(i>-1&&i<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316141476
GPR[SPVAP]-1661316141476
GPR[EPVAP]-1661316142442
GPR[EPVS]-1661316142442
========
if(expPos>-1&&expPos<val.length()){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316142443
GPR[SPVAP]-1661316142443
GPR[EPVAP]-1661316145495
GPR[SPVATF]-1661316145495
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316146424
GPR[EPVS]-1661316146424
========
if(i>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316146425
GPR[SPVAP]-1661316146425
GPR[EPVAP]-1661316147061
GPR[EPVS]-1661316147061
========
if(expPos>-1&&i<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316147062
GPR[SPVAP]-1661316147062
GPR[EPVAP]-1661316147701
GPR[EPVS]-1661316147701
========
if(decPos<0){
pos=0;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316147703
GPR[SPVAP]-1661316147703
GPR[EPVAP]-1661316148336
GPR[EPVS]-1661316148336
========
if(expPos>val.length()){
return EMPTY;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316148338
GPR[SPVAP]-1661316148338
GPR[EPVAP]-1661316148963
GPR[EPVS]-1661316148963
========
if(expPos<0){
return EMPTY;
}
if(val.length()<=expPos){
return str;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316148964
GPR[SPVAP]-1661316148964
GPR[EPVAP]-1661316149599
GPR[EPVS]-1661316149599
========
if(offset>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316149600
GPR[SPVAP]-1661316149600
GPR[EPVAP]-1661316150230
GPR[EPVS]-1661316150230
========
if(len>-1&&len<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316150232
GPR[SPVAP]-1661316150232
GPR[EPVAP]-1661316150884
GPR[EPVS]-1661316150884
========
if(len>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316150886
GPR[SPVAP]-1661316150886
GPR[EPVAP]-1661316151523
GPR[EPVS]-1661316151523
========
if(expPos>-1&&len<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316151524
GPR[SPVAP]-1661316151524
GPR[EPVAP]-1661316152154
GPR[EPVS]-1661316152154
========
if(expPos>-1&&expPos<=val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316152156
GPR[SPVAP]-1661316152156
GPR[EPVAP]-1661316153248
GPR[SPVATF]-1661316153249
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316154177
GPR[EPVS]-1661316154177
========
if(expPos>-1&&expPos<=0){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316154178
GPR[SPVAP]-1661316154178
GPR[EPVAP]-1661316155256
GPR[SPVATF]-1661316155256
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316156186
GPR[EPVS]-1661316156186
========
if(expPos>-1&&size<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316156187
GPR[SPVAP]-1661316156187
GPR[EPVAP]-1661316156817
GPR[EPVS]-1661316156817
========
if(expPos-val.length()<=0){
return val;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316156818
GPR[SPVAP]-1661316156818
GPR[EPVAP]-1661316157440
GPR[EPVS]-1661316157441
========
if(JAVA_VERSION.charAt(decPos)>='0'&&JAVA_VERSION.charAt(decPos)<='9'){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316157442
GPR[SPVAP]-1661316157442
GPR[EPVAP]-1661316158080
GPR[EPVS]-1661316158080
========
if(JAVA_VERSION.charAt(decPos)>='0'&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316158081
GPR[SPVAP]-1661316158081
GPR[EPVAP]-1661316158715
GPR[EPVS]-1661316158715
========
if(expPos>-1&&JAVA_VERSION.charAt(decPos)<='9'){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316158716
GPR[SPVAP]-1661316158716
GPR[EPVAP]-1661316159346
GPR[EPVS]-1661316159346
========
if(expPos==1||val.length()==0){
return val;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316159348
GPR[SPVAP]-1661316159348
GPR[EPVAP]-1661316159988
GPR[EPVS]-1661316159988
========
if(len>-1&&pos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316159990
GPR[SPVAP]-1661316159990
GPR[EPVAP]-1661316160637
GPR[EPVS]-1661316160637
========
if(StringUtils.containsAny(val.substring(1,str.length()-1),CSV_SEARCH_CHARS)){
val=StringUtils.replace(quoteless,CSV_QUOTE_STR+CSV_QUOTE_STR,CSV_QUOTE_STR);
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316160638
GPR[SPVAP]-1661316160638
GPR[EPVAP]-1661316161289
GPR[EPVS]-1661316161289
========
if(dec.length()==0){
return EMPTY;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316161291
GPR[SPVAP]-1661316161291
GPR[EPVAP]-1661316161918
GPR[EPVS]-1661316161918
========
if(val.indexOf(dec)==-1){
return val;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316161919
GPR[SPVAP]-1661316161919
GPR[EPVAP]-1661316162558
GPR[EPVS]-1661316162558
========
if(length>-1&&length<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316162559
GPR[SPVAP]-1661316162559
GPR[EPVAP]-1661316163200
GPR[EPVS]-1661316163200
========
if(length>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316163201
GPR[SPVAP]-1661316163201
GPR[EPVAP]-1661316163850
GPR[EPVS]-1661316163850
========
if(expPos>-1&&startIndex<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316163851
GPR[SPVAP]-1661316163851
GPR[EPVAP]-1661316164489
GPR[EPVS]-1661316164489
========
if(expPos>-1&&length<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316164491
GPR[SPVAP]-1661316164491
GPR[EPVAP]-1661316165141
GPR[EPVS]-1661316165141
========
if(isEmpty(val)){
return str;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316165142
GPR[SPVAP]-1661316165142
GPR[EPVAP]-1661316165774
GPR[EPVS]-1661316165774
========
if(dec==null){
return EMPTY;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316165775
GPR[SPVAP]-1661316165775
GPR[EPVAP]-1661316166407
GPR[EPVS]-1661316166407
========
if(isEmpty(exp)){
padStr=" ";
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316166408
GPR[SPVAP]-1661316166408
GPR[EPVAP]-1661316167037
GPR[EPVS]-1661316167037
========
if(expPos>-1&&size<=val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316167038
GPR[SPVAP]-1661316167038
GPR[EPVAP]-1661316167677
GPR[EPVS]-1661316167677
========
if(expPos-val.length()<=0){
return val;
}
if(expPos>-1&&expPos<=val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316167678
GPR[SPVAP]-1661316167678
GPR[EPVAP]-1661316168308
GPR[EPVS]-1661316168308
========
if(expPos-val.length()<=0){
return val;
}
if(expPos>-1&&expPos<=0){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316168309
GPR[SPVAP]-1661316168309
GPR[EPVAP]-1661316168944
GPR[EPVS]-1661316168944
========
if(expPos-val.length()<=0){
return val;
}
if(expPos>-1&&size<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316168946
GPR[SPVAP]-1661316168946
GPR[EPVAP]-1661316169576
GPR[EPVS]-1661316169576
========
if(expPos-val.length()<=0){
return val;
}
if(expPos>-1&&size<=val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316169577
GPR[SPVAP]-1661316169577
GPR[EPVAP]-1661316170221
GPR[EPVS]-1661316170221
========
if(expPos>-1&&expPos<7){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316170222
GPR[SPVAP]-1661316170222
GPR[EPVAP]-1661316171336
GPR[SPVATF]-1661316171336
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316172263
GPR[EPVS]-1661316172263
========
if(val==null){
return null;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316172264
GPR[SPVAP]-1661316172264
GPR[EPVAP]-1661316173350
GPR[SPVATF]-1661316173350
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316174281
GPR[EPVS]-1661316174281
========
if(len>-1&&expPos<7){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316174283
GPR[SPVAP]-1661316174283
GPR[EPVAP]-1661316174932
GPR[EPVS]-1661316174932
========
if(val==null){
return null;
}
if(len>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316174933
GPR[SPVAP]-1661316174933
GPR[EPVAP]-1661316175565
GPR[EPVS]-1661316175565
========
if(val==null){
return null;
}
if(expPos>-1&&len<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316175566
GPR[SPVAP]-1661316175566
GPR[EPVAP]-1661316176209
GPR[EPVS]-1661316176209
========
if(val==null){
return null;
}
if(expPos>-1&&expPos<7){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316176210
GPR[SPVAP]-1661316176210
GPR[EPVAP]-1661316177292
GPR[SPVATF]-1661316177292
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316178218
GPR[EPVS]-1661316178218
========
if(val==null){
return null;
}
if(len>-1&&len<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316178219
GPR[SPVAP]-1661316178219
GPR[EPVAP]-1661316178854
GPR[EPVS]-1661316178854
========
if(val==null){
return null;
}
if(len>-1&&expPos<7){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316178855
GPR[SPVAP]-1661316178855
GPR[EPVAP]-1661316179483
GPR[EPVS]-1661316179483
========
if(val.startsWith("--")){
return null;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316179484
GPR[SPVAP]-1661316179484
GPR[EPVAP]-1661316180574
GPR[SPVATF]-1661316180574
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316181496
GPR[EPVS]-1661316181496
========
if(startIndex>-1&&startIndex<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316181499
GPR[SPVAP]-1661316181499
GPR[EPVAP]-1661316182132
GPR[EPVS]-1661316182132
========
if(startIndex>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316182133
GPR[SPVAP]-1661316182133
GPR[EPVAP]-1661316182772
GPR[EPVS]-1661316182772
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
Validate.isTrue(expPos>-1,"Negative values should not be possible",value);
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316182773
GPR[SPVAP]-1661316182773
GPR[EPVAP]-1661316183414
GPR[EPVS]-1661316183414
========
if(index>-1&&index<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316183723
GPR[SPVAP]-1661316183723
GPR[EPVAP]-1661316184355
GPR[EPVS]-1661316184355
========
if(index>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316184356
GPR[SPVAP]-1661316184356
GPR[EPVAP]-1661316184988
GPR[EPVS]-1661316184988
========
if(expPos>-1&&index<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316184989
GPR[SPVAP]-1661316184989
GPR[EPVAP]-1661316185618
GPR[EPVS]-1661316185618
========
if(endIndex>-1&&endIndex<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316185620
GPR[SPVAP]-1661316185620
GPR[EPVAP]-1661316186251
GPR[EPVS]-1661316186251
========
if(endIndex>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316186252
GPR[SPVAP]-1661316186252
GPR[EPVAP]-1661316186883
GPR[EPVS]-1661316186883
========
if(expPos>-1&&endIndex<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316186885
GPR[SPVAP]-1661316186885
GPR[EPVAP]-1661316187518
GPR[EPVS]-1661316187518
========
if(val.charAt(expPos)==CharUtils.LF){
if(val.charAt(expPos-1)==CharUtils.CR){
lastIdx--;
}
}else {
lastIdx++;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316187520
GPR[SPVAP]-1661316187520
GPR[EPVAP]-1661316188149
GPR[EPVS]-1661316188149
========
val=str.toLowerCase();
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316188150
GPR[SPVAP]-1661316188150
GPR[EPVAP]-1661316188782
GPR[EPVS]-1661316188782
========
if(val.length()==1){
return indexOf(val.charAt(0),decPos);
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316188783
GPR[SPVAP]-1661316188783
GPR[EPVAP]-1661316189411
GPR[EPVS]-1661316189411
========
if(searchList.length!=replacementList.length){
throw new IllegalArgumentException("Search and Replace array lengths don\'t match: "+searchLength);
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316189412
GPR[SPVAP]-1661316189412
GPR[EPVAP]-1661316190059
GPR[EPVS]-1661316190059
========
val=str.substring(expPos+1);
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316190061
GPR[SPVAP]-1661316190061
GPR[EPVAP]-1661316190692
GPR[EPVS]-1661316190692
========
expPos=val.indexOf('/');
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316190694
GPR[SPVAP]-1661316190694
GPR[EPVAP]-1661316191786
GPR[SPVATF]-1661316191786
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316192733
GPR[EPVS]-1661316192733
========
if(val.charAt(expPos-1)==CharUtils.LF){
if(val.substring(0,expPos-1).charAt(expPos-1-1)==CharUtils.CR){
return ret.substring(0,lastIdx-1);
}
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316192735
GPR[SPVAP]-1661316192735
GPR[EPVAP]-1661316193406
GPR[EPVS]-1661316193406
========
if(expPos>-1&&expPos<val.length()-1){
exp=desc.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316193408
GPR[SPVAP]-1661316193408
GPR[EPVAP]-1661316194040
GPR[EPVS]-1661316194040
========
if(expPos>-1&&expPos<val.length()-1){
name=val.substring(0,expPos).trim();
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316194042
GPR[SPVAP]-1661316194042
GPR[EPVAP]-1661316194678
GPR[EPVS]-1661316194678
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
name=val.substring(0,expPos).trim();
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316194679
GPR[SPVAP]-1661316194679
GPR[EPVAP]-1661316195307
GPR[EPVS]-1661316195307
========
case 'f' :

if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316195309
GPR[SPVAP]-1661316195309
GPR[EPVAP]-1661316195861
GPR[EPVS]-1661316195861
========
if(expPos<=0){
return val;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316195863
GPR[SPVAP]-1661316195863
GPR[EPVAP]-1661316196496
GPR[EPVS]-1661316196496
========
if(expPos>PAD_LIMIT){
return rightPad(val,decPos,String.valueOf(lastChar));
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316196498
GPR[SPVAP]-1661316196498
GPR[EPVAP]-1661316197131
GPR[EPVS]-1661316197131
========
if(expPos>PAD_LIMIT){
return leftPad(val,decPos,String.valueOf(lastChar));
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316197132
GPR[SPVAP]-1661316197132
GPR[EPVAP]-1661316197760
GPR[EPVS]-1661316197760
========
if(amphersandIdx>-1&&amphersandIdx<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316197762
GPR[SPVAP]-1661316197762
GPR[EPVAP]-1661316198399
GPR[EPVS]-1661316198399
========
if(expPos>-1&&expPos<decPos){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316198400
GPR[SPVAP]-1661316198400
GPR[EPVAP]-1661316199488
GPR[SPVATF]-1661316199488
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316200422
GPR[EPVS]-1661316200422
========
if(amphersandIdx>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316200423
GPR[SPVAP]-1661316200423
GPR[EPVAP]-1661316201049
GPR[EPVS]-1661316201049
========
if(expPos>-1&&amphersandIdx<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316201050
GPR[SPVAP]-1661316201050
GPR[EPVAP]-1661316201688
GPR[EPVS]-1661316201688
========
if(val.lastIndexOf(PACKAGE_SEPARATOR_CHAR)==-1){
return StringUtils.EMPTY;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316201689
GPR[SPVAP]-1661316201689
GPR[EPVAP]-1661316202338
GPR[EPVS]-1661316202338
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316202340
GPR[SPVAP]-1661316202340
GPR[EPVAP]-1661316202976
GPR[EPVS]-1661316202976
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316202977
GPR[SPVAP]-1661316202977
GPR[EPVAP]-1661316203608
GPR[EPVS]-1661316203608
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316203609
GPR[SPVAP]-1661316203609
GPR[EPVAP]-1661316204256
GPR[EPVS]-1661316204256
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316204257
GPR[SPVAP]-1661316204257
GPR[EPVAP]-1661316204897
GPR[EPVS]-1661316204897
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316204898
GPR[SPVAP]-1661316204898
GPR[EPVAP]-1661316205528
GPR[EPVS]-1661316205528
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316205529
GPR[SPVAP]-1661316205529
GPR[EPVAP]-1661316206172
GPR[EPVS]-1661316206172
========
decPos=expPos+decPos;
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316206174
GPR[SPVAP]-1661316206174
GPR[EPVAP]-1661316207267
GPR[SPVATF]-1661316207267
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316208198
GPR[EPVS]-1661316208198
========
if(val.lastIndexOf(dec)==-1){
return val;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316208200
GPR[SPVAP]-1661316208200
GPR[EPVAP]-1661316208836
GPR[EPVS]-1661316208836
========
if(pos1>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316208837
GPR[SPVAP]-1661316208837
GPR[EPVAP]-1661316209471
GPR[EPVS]-1661316209471
========
if(pos2>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316209472
GPR[SPVAP]-1661316209472
GPR[EPVAP]-1661316210128
GPR[EPVS]-1661316210128
========
if(length>-1&&startIndex<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316210130
GPR[SPVAP]-1661316210130
GPR[EPVAP]-1661316210764
GPR[EPVS]-1661316210764
========
if(expPos>-1&&offset<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316210765
GPR[SPVAP]-1661316210766
GPR[EPVAP]-1661316211408
GPR[EPVS]-1661316211408
========
if(expPos>decPos||index<0){
throw new IndexOutOfBoundsException("Index: "+index);
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316211410
GPR[SPVAP]-1661316211410
GPR[EPVAP]-1661316212055
GPR[EPVS]-1661316212055
========
if(offset>-1&&offset<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316212058
GPR[SPVAP]-1661316212058
GPR[EPVAP]-1661316212685
GPR[EPVS]-1661316212685
========
if(off>-1&&off<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316212688
GPR[SPVAP]-1661316212688
GPR[EPVAP]-1661316213319
GPR[EPVS]-1661316213319
========
if(expPos>-1&&(decPos+expPos)<0){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316213321
GPR[SPVAP]-1661316213321
GPR[EPVAP]-1661316214418
GPR[SPVATF]-1661316214419
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316215354
GPR[EPVS]-1661316215354
========
if(off>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316215355
GPR[SPVAP]-1661316215355
GPR[EPVAP]-1661316215978
GPR[EPVS]-1661316215978
========
if(expPos>-1&&(decPos+expPos)<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316215979
GPR[SPVAP]-1661316215979
GPR[EPVAP]-1661316217082
GPR[SPVATF]-1661316217082
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316218021
GPR[EPVS]-1661316218021
========
if(expPos>-1&&off<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316218023
GPR[SPVAP]-1661316218023
GPR[EPVAP]-1661316218655
GPR[EPVS]-1661316218655
========
if(len>-1&&off<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316218657
GPR[SPVAP]-1661316218657
GPR[EPVAP]-1661316219291
GPR[EPVS]-1661316219291
========
if(len>-1&&(decPos+expPos)<0){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316219292
GPR[SPVAP]-1661316219292
GPR[EPVAP]-1661316219920
GPR[EPVS]-1661316219920
========
if(len>-1&&(decPos+expPos)<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316219922
GPR[SPVAP]-1661316219922
GPR[EPVAP]-1661316220562
GPR[EPVS]-1661316220562
========
if(off>-1&&len<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316220563
GPR[SPVAP]-1661316220563
GPR[EPVAP]-1661316221197
GPR[EPVS]-1661316221197
========
if(length>-1&&len<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316221199
GPR[SPVAP]-1661316221199
GPR[EPVAP]-1661316221833
GPR[EPVS]-1661316221833
========
if(off>-1&&(decPos+expPos)<0){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316221834
GPR[SPVAP]-1661316221834
GPR[EPVAP]-1661316222469
GPR[EPVS]-1661316222469
========
if(off>-1&&(decPos+expPos)<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316222470
GPR[SPVAP]-1661316222470
GPR[EPVAP]-1661316223116
GPR[EPVS]-1661316223116
========
if(length>-1&&off<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316223117
GPR[SPVAP]-1661316223117
GPR[EPVAP]-1661316223749
GPR[EPVS]-1661316223749
========
if(length>-1&&(decPos+expPos)<0){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316223750
GPR[SPVAP]-1661316223750
GPR[EPVAP]-1661316224375
GPR[EPVS]-1661316224375
========
if(length>-1&&(decPos+expPos)<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316224376
GPR[SPVAP]-1661316224376
GPR[EPVAP]-1661316225030
GPR[EPVS]-1661316225030
========
if(expPos>-1&&currentType<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316225032
GPR[SPVAP]-1661316225032
GPR[EPVAP]-1661316225666
GPR[EPVS]-1661316225666
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316225668
GPR[SPVAP]-1661316225668
GPR[EPVAP]-1661316226302
GPR[EPVS]-1661316226302
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316226303
GPR[SPVAP]-1661316226303
GPR[EPVAP]-1661316226943
GPR[EPVS]-1661316226943
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316226944
GPR[SPVAP]-1661316226944
GPR[EPVAP]-1661316227588
GPR[EPVS]-1661316227588
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316227589
GPR[SPVAP]-1661316227589
GPR[EPVAP]-1661316228216
GPR[EPVS]-1661316228216
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316228218
GPR[SPVAP]-1661316228218
GPR[EPVAP]-1661316228851
GPR[EPVS]-1661316228851
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316228852
GPR[SPVAP]-1661316228852
GPR[EPVAP]-1661316229484
GPR[EPVS]-1661316229484
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316229486
GPR[SPVAP]-1661316229486
GPR[EPVAP]-1661316230128
GPR[EPVS]-1661316230128
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316230130
GPR[SPVAP]-1661316230130
GPR[EPVAP]-1661316230760
GPR[EPVS]-1661316230760
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316230761
GPR[SPVAP]-1661316230761
GPR[EPVAP]-1661316231396
GPR[EPVS]-1661316231396
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316231398
GPR[SPVAP]-1661316231398
GPR[EPVAP]-1661316232026
GPR[EPVS]-1661316232026
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316232027
GPR[SPVAP]-1661316232027
GPR[EPVAP]-1661316232664
GPR[EPVS]-1661316232664
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316232665
GPR[SPVAP]-1661316232665
GPR[EPVAP]-1661316233308
GPR[EPVS]-1661316233308
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316233310
GPR[SPVAP]-1661316233310
GPR[EPVAP]-1661316233937
GPR[EPVS]-1661316233937
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316233938
GPR[SPVAP]-1661316233938
GPR[EPVAP]-1661316234583
GPR[EPVS]-1661316234583
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316234584
GPR[SPVAP]-1661316234584
GPR[EPVAP]-1661316235216
GPR[EPVS]-1661316235216
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316235217
GPR[SPVAP]-1661316235217
GPR[EPVAP]-1661316235852
GPR[EPVS]-1661316235852
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316235854
GPR[SPVAP]-1661316235854
GPR[EPVAP]-1661316236505
GPR[EPVS]-1661316236505
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316236506
GPR[SPVAP]-1661316236506
GPR[EPVAP]-1661316237151
GPR[EPVS]-1661316237151
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316237153
GPR[SPVAP]-1661316237153
GPR[EPVAP]-1661316237787
GPR[EPVS]-1661316237787
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316237788
GPR[SPVAP]-1661316237788
GPR[EPVAP]-1661316238435
GPR[EPVS]-1661316238435
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316238437
GPR[SPVAP]-1661316238437
GPR[EPVAP]-1661316239078
GPR[EPVS]-1661316239078
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316239079
GPR[SPVAP]-1661316239079
GPR[EPVAP]-1661316239716
GPR[EPVS]-1661316239716
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316239718
GPR[SPVAP]-1661316239718
GPR[EPVAP]-1661316240348
GPR[EPVS]-1661316240348
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316240349
GPR[SPVAP]-1661316240349
GPR[EPVAP]-1661316240978
GPR[EPVS]-1661316240978
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316240979
GPR[SPVAP]-1661316240979
GPR[EPVAP]-1661316241624
GPR[EPVS]-1661316241624
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316241625
GPR[SPVAP]-1661316241625
GPR[EPVAP]-1661316242259
GPR[EPVS]-1661316242259
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316242260
GPR[SPVAP]-1661316242260
GPR[EPVAP]-1661316242888
GPR[EPVS]-1661316242888
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316242889
GPR[SPVAP]-1661316242889
GPR[EPVAP]-1661316243527
GPR[EPVS]-1661316243527
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316243528
GPR[SPVAP]-1661316243528
GPR[EPVAP]-1661316244154
GPR[EPVS]-1661316244154
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316244155
GPR[SPVAP]-1661316244155
GPR[EPVAP]-1661316244788
GPR[EPVS]-1661316244788
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316244789
GPR[SPVAP]-1661316244789
GPR[EPVAP]-1661316245436
GPR[EPVS]-1661316245436
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316245438
GPR[SPVAP]-1661316245438
GPR[EPVAP]-1661316246084
GPR[EPVS]-1661316246084
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316246085
GPR[SPVAP]-1661316246085
GPR[EPVAP]-1661316246713
GPR[EPVS]-1661316246713
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316246714
GPR[SPVAP]-1661316246714
GPR[EPVAP]-1661316247354
GPR[EPVS]-1661316247354
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316247356
GPR[SPVAP]-1661316247356
GPR[EPVAP]-1661316247988
GPR[EPVS]-1661316247988
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316247990
GPR[SPVAP]-1661316247990
GPR[EPVAP]-1661316248637
GPR[EPVS]-1661316248637
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316248638
GPR[SPVAP]-1661316248638
GPR[EPVAP]-1661316249272
GPR[EPVS]-1661316249272
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316249273
GPR[SPVAP]-1661316249273
GPR[EPVAP]-1661316249916
GPR[EPVS]-1661316249916
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316249918
GPR[SPVAP]-1661316249918
GPR[EPVAP]-1661316250554
GPR[EPVS]-1661316250554
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316250556
GPR[SPVAP]-1661316250556
GPR[EPVAP]-1661316251194
GPR[EPVS]-1661316251194
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316251195
GPR[SPVAP]-1661316251195
GPR[EPVAP]-1661316251841
GPR[EPVS]-1661316251841
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316251842
GPR[SPVAP]-1661316251842
GPR[EPVAP]-1661316252482
GPR[EPVS]-1661316252482
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316252483
GPR[SPVAP]-1661316252483
GPR[EPVAP]-1661316253128
GPR[EPVS]-1661316253128
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316253129
GPR[SPVAP]-1661316253129
GPR[EPVAP]-1661316253764
GPR[EPVS]-1661316253764
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316253765
GPR[SPVAP]-1661316253765
GPR[EPVAP]-1661316254409
GPR[EPVS]-1661316254409
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316254410
GPR[SPVAP]-1661316254410
GPR[EPVAP]-1661316255045
GPR[EPVS]-1661316255045
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316255046
GPR[SPVAP]-1661316255046
GPR[EPVAP]-1661316255688
GPR[EPVS]-1661316255688
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316255689
GPR[SPVAP]-1661316255689
GPR[EPVAP]-1661316256344
GPR[EPVS]-1661316256344
========
if(expPos>-1&&expPos<val.length()-1){
match=false;
exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316256345
GPR[SPVAP]-1661316256345
GPR[EPVAP]-1661316256974
GPR[EPVS]-1661316256974
========
if(expPos>-1&&expPos<val.length()-1){
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=val.substring(expPos+1,val.length()-1);
}else {
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;
if(decPos++==decPos){
i=decPos;
lastMatch=false;
}
match=false;

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316256975
GPR[SPVAP]-1661316256975
GPR[EPVAP]-1661316257606
GPR[EPVS]-1661316257606
========
if(dec==null&&exp==null&&(numeric.charAt(decPos)!=' ')){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316258471
GPR[SPVAP]-1661316258471
GPR[EPVAP]-1661316259550
GPR[SPVATF]-1661316259550
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316260495
GPR[EPVS]-1661316260495
========
if(dec==null&&exp==null&&numeric.charAt(str.length()-1)!=CSV_QUOTE){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316260497
GPR[SPVAP]-1661316260497
GPR[EPVAP]-1661316261137
GPR[EPVS]-1661316261137
========
if(dec==null&&exp==null&&numeric.charAt(decPos+1)=='\''){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316261138
GPR[SPVAP]-1661316261138
GPR[EPVAP]-1661316262224
GPR[SPVATF]-1661316262224
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316263140
GPR[EPVS]-1661316263140
========
if(numeric.startsWith("--")){
return null;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316263142
GPR[SPVAP]-1661316263142
GPR[EPVAP]-1661316264231
GPR[SPVATF]-1661316264231
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316265161
GPR[EPVS]-1661316265161
========
if(dec==null&&exp==null&&expPos<numeric.length()-1){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316265163
GPR[SPVAP]-1661316265163
GPR[EPVAP]-1661316266248
GPR[SPVATF]-1661316266248
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 0
GPR[EPVATF]-1661316267176
GPR[SPVATR]-1661316267176
TESTING : lang_44
MM messageFailing tests: 0
GPR[EPVATR]-1661316277791
GPR[EPVS]-1661316277791
GPR[PF]-1661316277791
sourceFile  script/workingdir/SimFix/lang/lang_44_buggy/src/java/org/apache/commons/lang/NumberUtils.java
location   script/workingdir/SimFix/lang/lang_44_buggy
MM Out patch at /experiment_home///results/SimFix/Lang/44/seed_284/patch/lang/44/0/patch_677063_1_ts_1661316277791.diff
MM Command diff diff -w -b  --label=/src/java/org/apache/commons/lang/NumberUtils.java --label=/src/java/org/apache/commons/lang/NumberUtils.java /tmp/tmpDirMM6919589521277285658/NumberUtils.java  /experiment_home///results/SimFix/Lang/44/seed_284/patch/lang/44/0/1_NumberUtils.java  --unified=3  > /experiment_home///results/SimFix/Lang/44/seed_284/patch/lang/44/0/patch_677063_1_ts_1661316277791.diff
MMOut command diff: []
========
if(dec==null&&exp==null&&decPos<=PAD_LIMIT){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316277804
GPR[SPVAP]-1661316277804
GPR[EPVAP]-1661316278436
GPR[EPVS]-1661316278436
========
if(dec.lastIndexOf(PACKAGE_SEPARATOR_CHAR)==-1){
return StringUtils.EMPTY;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316278439
GPR[SPVAP]-1661316278439
GPR[EPVAP]-1661316279112
GPR[EPVS]-1661316279112
========
if(decPos<0){
return EMPTY;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316279114
GPR[SPVAP]-1661316279114
GPR[EPVAP]-1661316279751
GPR[EPVS]-1661316279751
========
if(numeric.length()<=decPos){
return str;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316279752
GPR[SPVAP]-1661316279752
GPR[EPVAP]-1661316280386
GPR[EPVS]-1661316280386
========
if(dec==null&&exp==null&&dec==null){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316280387
GPR[SPVAP]-1661316280387
GPR[EPVAP]-1661316281478
GPR[SPVATF]-1661316281478
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 0
GPR[EPVATF]-1661316282404
GPR[SPVATR]-1661316282404
TESTING : lang_44
MM messageFailing tests: 0
GPR[EPVATR]-1661316292975
GPR[EPVS]-1661316292975
GPR[PF]-1661316292975
sourceFile  script/workingdir/SimFix/lang/lang_44_buggy/src/java/org/apache/commons/lang/NumberUtils.java
location   script/workingdir/SimFix/lang/lang_44_buggy
MM Out patch at /experiment_home///results/SimFix/Lang/44/seed_284/patch/lang/44/0/patch_692261_2_ts_1661316292975.diff
MM Command diff diff -w -b  --label=/src/java/org/apache/commons/lang/NumberUtils.java --label=/src/java/org/apache/commons/lang/NumberUtils.java /tmp/tmpDirMM5843904027695094653/NumberUtils.java  /experiment_home///results/SimFix/Lang/44/seed_284/patch/lang/44/0/2_NumberUtils.java  --unified=3  > /experiment_home///results/SimFix/Lang/44/seed_284/patch/lang/44/0/patch_692261_2_ts_1661316292975.diff
MMOut command diff: []
========
if(dec.length()==0){
return EMPTY;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316293019
GPR[SPVAP]-1661316293020
GPR[EPVAP]-1661316293761
GPR[EPVS]-1661316293761
========
if(val.indexOf(dec)==-1){
return val;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316293762
GPR[SPVAP]-1661316293762
GPR[EPVAP]-1661316294404
GPR[EPVS]-1661316294404
========
if(decPos<0){
start=numeric.length()+start;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316294406
GPR[SPVAP]-1661316294406
GPR[EPVAP]-1661316295040
GPR[EPVS]-1661316295040
========
if(decPos<0){
start=0;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316295041
GPR[SPVAP]-1661316295041
GPR[EPVAP]-1661316295675
GPR[EPVS]-1661316295675
========
if(decPos>numeric.length()){
return EMPTY;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316295676
GPR[SPVAP]-1661316295676
GPR[EPVAP]-1661316296305
GPR[EPVS]-1661316296305
========
if(val.lastIndexOf(numeric)==-1){
return val;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316296307
GPR[SPVAP]-1661316296307
GPR[EPVAP]-1661316296946
GPR[EPVS]-1661316296946
========
if(val==null){
return dec;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316296947
GPR[SPVAP]-1661316296947
GPR[EPVAP]-1661316297569
GPR[EPVS]-1661316297569
========
if(indexOfDifference(dec,val)==-1){
return EMPTY;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316297570
GPR[SPVAP]-1661316297570
GPR[EPVAP]-1661316298201
GPR[EPVS]-1661316298201
========
if(isEmpty(numeric)){
return str;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316298202
GPR[SPVAP]-1661316298202
GPR[EPVAP]-1661316298861
GPR[EPVS]-1661316298861
========
if(numeric.indexOf(dec)==-1){
return EMPTY;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316298862
GPR[SPVAP]-1661316298862
GPR[EPVAP]-1661316299499
GPR[EPVS]-1661316299499
========
if(dec==null&&exp==null&&val.lastIndexOf(numeric)==(val.length()-numeric.length())){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316299501
GPR[SPVAP]-1661316299501
GPR[EPVAP]-1661316300590
GPR[SPVATF]-1661316300590
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 0
GPR[EPVATF]-1661316301521
GPR[SPVATR]-1661316301522
TESTING : lang_44
MM message  - org.apache.commons.lang.NumberUtilsTest::testIsNumber
MM message  - org.apache.commons.lang.NumberUtilsTest::testCreateNumber
MM messageFailing tests: 2
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1661316312035
GPR[EPVS]-1661316312035
========
if(isEmpty(val)){
return str;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316312037
GPR[SPVAP]-1661316312037
GPR[EPVAP]-1661316312680
GPR[EPVS]-1661316312680
========
if(isEmpty(numeric)){
return EMPTY;
}
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}

========
MM Copying to MM
GPR[SPVS]-1661316312682
GPR[SPVAP]-1661316312682
GPR[EPVAP]-1661316313312
GPR[EPVS]-1661316313312
========
default :

case 'L' :
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}
throw new NumberFormatException(val+" is not a valid number.");


========
MM Copying to MM
GPR[SPVS]-1661316313637
GPR[SPVAP]-1661316313637
GPR[EPVAP]-1661316314265
GPR[EPVS]-1661316314265
========
case 'L' :
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}
if(!(createFloat(numeric).isInfinite()||(f.floatValue()==0.0&&!isAllZeros(mant)&&isAllZeros(exp)))){
return f;
}
throw new NumberFormatException(val+" is not a valid number.");


========
MM Copying to MM
GPR[SPVS]-1661316314267
GPR[SPVAP]-1661316314267
GPR[EPVAP]-1661316314920
GPR[EPVS]-1661316314920
========
try{
Double createDouble(numeric)=createDouble(numeric);
if(!(d.isInfinite()||(d.doubleValue()==0.0&&!isAllZeros(mant)&&isAllZeros(exp)))){
return d;
}
}catch (NumberFormatException nfe) {
}

case 'L' :
if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}
throw new NumberFormatException(val+" is not a valid number.");


========
MM Copying to MM
GPR[SPVS]-1661316314921
GPR[SPVAP]-1661316314921
GPR[EPVAP]-1661316315467
GPR[EPVS]-1661316315467
========
if(!(f.isInfinite()||(f.doubleValue()==0.0&&!allZeros))){
return f;
}

========
MM Copying to MM
GPR[SPVS]-1661316316069
GPR[SPVAP]-1661316316069
GPR[EPVAP]-1661316317143
GPR[SPVATF]-1661316317143
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316318081
GPR[EPVS]-1661316318081
========
try{
Double createDouble(val)=createDouble(val);
if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
return d;
}
}catch (NumberFormatException nfe) {
}

case 'F' :
try{
Float f=NumberUtils.createFloat(numeric);
if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
return f;
}
}catch (NumberFormatException e) {
}



========
MM Copying to MM
GPR[SPVS]-1661316318391
GPR[SPVAP]-1661316318391
GPR[EPVAP]-1661316318938
GPR[EPVS]-1661316318938
========
case 'F' :
try{
return createBigDecimal(numeric);
}catch (NumberFormatException e) {
}

try{
Float f=NumberUtils.createFloat(numeric);
if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
return f;
}
}catch (NumberFormatException e) {
}




========
MM Copying to MM
GPR[SPVS]-1661316318940
GPR[SPVAP]-1661316318940
GPR[EPVAP]-1661316320002
GPR[SPVATF]-1661316320002
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316320941
GPR[EPVS]-1661316320941
========
default :

case 'F' :
try{
Float f=NumberUtils.createFloat(numeric);
if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
return f;
}
}catch (NumberFormatException e) {
}



========
MM Copying to MM
GPR[SPVS]-1661316320943
GPR[SPVAP]-1661316320943
GPR[EPVAP]-1661316321571
GPR[EPVS]-1661316321571
========
default :

case 'F' :
try{
return createBigDecimal(numeric);
}catch (NumberFormatException e) {
}

try{
Float f=NumberUtils.createFloat(numeric);
if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
return f;
}
}catch (NumberFormatException e) {
}




========
MM Copying to MM
GPR[SPVS]-1661316321573
GPR[SPVAP]-1661316321573
GPR[EPVAP]-1661316322204
GPR[EPVS]-1661316322204
========
if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
return d;
}

========
MM Copying to MM
GPR[SPVS]-1661316322812
GPR[SPVAP]-1661316322812
GPR[EPVAP]-1661316323890
GPR[SPVATF]-1661316323890
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316324811
GPR[EPVS]-1661316324811
========
case 'D' :
try{
Double d=NumberUtils.createDouble(numeric);
if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
return d;
}
}catch (NumberFormatException nfe) {
}

try{
return createBigDecimal(numeric);
}catch (NumberFormatException e) {
}


case 'D' :
try{
Double d=NumberUtils.createDouble(numeric);
if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
return d;
}
}catch (NumberFormatException nfe) {
}

try{
return createBigDecimal(numeric);
}catch (NumberFormatException e) {
}



========
MM Copying to MM
GPR[SPVS]-1661316325132
GPR[SPVAP]-1661316325132
GPR[EPVAP]-1661316325755
GPR[EPVS]-1661316325755
========
default :

case 'D' :
try{
Double d=NumberUtils.createDouble(numeric);
if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
return d;
}
}catch (NumberFormatException nfe) {
}

try{
return createBigDecimal(numeric);
}catch (NumberFormatException e) {
}



========
MM Copying to MM
GPR[SPVS]-1661316325756
GPR[SPVAP]-1661316325756
GPR[EPVAP]-1661316326392
GPR[EPVS]-1661316326392
========
case 'H' :

case 'D' :
try{
Double d=NumberUtils.createDouble(numeric);
if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
return d;
}
}catch (NumberFormatException nfe) {
}

try{
return createBigDecimal(numeric);
}catch (NumberFormatException e) {
}



========
MM Copying to MM
GPR[SPVS]-1661316326394
GPR[SPVAP]-1661316326394
GPR[EPVAP]-1661316327488
GPR[SPVATF]-1661316327488
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316328426
GPR[EPVS]-1661316328426
========
case 'D' :
try{
Double d=NumberUtils.createDouble(numeric);
if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
return d;
}
}catch (NumberFormatException nfe) {
}

try{
return createBigDecimal(numeric);
}catch (NumberFormatException e) {
}


default :

case 'D' :
try{
Double d=NumberUtils.createDouble(numeric);
if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
return d;
}
}catch (NumberFormatException nfe) {
}

try{
return createBigDecimal(numeric);
}catch (NumberFormatException e) {
}



========
MM Copying to MM
GPR[SPVS]-1661316328428
GPR[SPVAP]-1661316328428
GPR[EPVAP]-1661316329065
GPR[EPVS]-1661316329065
========
default :
if(dec==null&&exp==null&&(dec.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
try{
return createLong(numeric);
}catch (NumberFormatException nfe) {
}

return createBigInteger(numeric);
}
throw new NumberFormatException(val+" is not a valid number.");


========
MM Copying to MM
GPR[SPVS]-1661316329360
GPR[SPVAP]-1661316329360
GPR[EPVAP]-1661316330437
GPR[SPVATF]-1661316330437
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316331360
GPR[EPVS]-1661316331360
========
default :
throw new NumberFormatException(val+" is not a valid number.");
throw new NumberFormatException(val+" is not a valid number.");



========
MM Copying to MM
GPR[SPVS]-1661316331361
GPR[SPVAP]-1661316331361
GPR[EPVAP]-1661316331993
GPR[EPVS]-1661316331993
========
case 'f' :

default :
throw new NumberFormatException(val+" is not a valid number.");


========
MM Copying to MM
GPR[SPVS]-1661316331994
GPR[SPVAP]-1661316331994
GPR[EPVAP]-1661316332622
GPR[EPVS]-1661316332622
========
if(expPos>-1&&expPos<str.length()-1){
exp=str.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316333427
GPR[SPVAP]-1661316333427
GPR[EPVAP]-1661316334059
GPR[EPVS]-1661316334059
========
if(expPos>-1&&expPos<str.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316334060
GPR[SPVAP]-1661316334060
GPR[EPVAP]-1661316334699
GPR[EPVS]-1661316334699
========
if(expPos>-1&&expPos<val.length()-1){
exp=str.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316334700
GPR[SPVAP]-1661316334700
GPR[EPVAP]-1661316335325
GPR[EPVS]-1661316335325
========
if(dec.length()>val.length()){
return false;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316335326
GPR[SPVAP]-1661316335326
GPR[EPVAP]-1661316335962
GPR[EPVS]-1661316335962
========
if(expPos>-1&&startPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316335964
GPR[SPVAP]-1661316335964
GPR[EPVAP]-1661316336589
GPR[EPVS]-1661316336589
========
if(expPos>-1&&expPos<val.length()-1){
tmp=StringUtils.replaceOnce(exp," 0 hours","");
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316336590
GPR[SPVAP]-1661316336590
GPR[EPVAP]-1661316337218
GPR[EPVS]-1661316337218
========
if(expPos>-1&&expPos<val.length()-1){
if(val.length()!=exp.length()){
duration=StringUtils.replaceOnce(val," 0 days","");
}
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316337219
GPR[SPVAP]-1661316337219
GPR[EPVAP]-1661316337847
GPR[EPVS]-1661316337847
========
if(expPos>-1&&expPos<val.length()-1){
tmp=StringUtils.replaceOnce(exp," 0 hours","");
if(val.length()!=exp.length()){
duration=StringUtils.replaceOnce(val," 0 days","");
}

exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316337849
GPR[SPVAP]-1661316337849
GPR[EPVAP]-1661316338471
GPR[EPVS]-1661316338471
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
tmp=StringUtils.replaceOnce(exp," 0 hours","");
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316338473
GPR[SPVAP]-1661316338473
GPR[EPVAP]-1661316339112
GPR[EPVS]-1661316339112
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
if(val.length()!=exp.length()){
duration=StringUtils.replaceOnce(val," 0 days","");
}
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316339113
GPR[SPVAP]-1661316339113
GPR[EPVAP]-1661316339753
GPR[EPVS]-1661316339753
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
tmp=StringUtils.replaceOnce(exp," 0 hours","");
if(val.length()!=exp.length()){
duration=StringUtils.replaceOnce(val," 0 days","");
}

exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316339754
GPR[SPVAP]-1661316339755
GPR[EPVAP]-1661316340388
GPR[EPVS]-1661316340388
========
if(expPos>-1&&maxWidth<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316340389
GPR[SPVAP]-1661316340389
GPR[EPVAP]-1661316341033
GPR[EPVS]-1661316341034
========
if(upper>-1&&upper<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316341035
GPR[SPVAP]-1661316341035
GPR[EPVAP]-1661316341668
GPR[EPVS]-1661316341668
========
if(upper>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316341669
GPR[SPVAP]-1661316341669
GPR[EPVAP]-1661316342303
GPR[EPVS]-1661316342303
========
if(expPos>-1&&upper<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316342304
GPR[SPVAP]-1661316342304
GPR[EPVAP]-1661316342930
GPR[EPVS]-1661316342930
========
if(expPos<0){
return EMPTY;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316342931
GPR[SPVAP]-1661316342931
GPR[EPVAP]-1661316343557
GPR[EPVS]-1661316343557
========
if(val.length()<=expPos){
return str;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316343558
GPR[SPVAP]-1661316343558
GPR[EPVAP]-1661316344192
GPR[EPVS]-1661316344192
========
if(pos>-1&&pos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316344194
GPR[SPVAP]-1661316344194
GPR[EPVAP]-1661316344850
GPR[EPVS]-1661316344850
========
if(pos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316344851
GPR[SPVAP]-1661316344851
GPR[EPVAP]-1661316345481
GPR[EPVS]-1661316345481
========
if(expPos>-1&&pos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316345483
GPR[SPVAP]-1661316345483
GPR[EPVAP]-1661316346113
GPR[EPVS]-1661316346113
========
decPos=Math.min(increase,val.length()/5);
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316346114
GPR[SPVAP]-1661316346114
GPR[EPVAP]-1661316346752
GPR[EPVS]-1661316346752
========
if(i>-1&&i<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316346754
GPR[SPVAP]-1661316346754
GPR[EPVAP]-1661316347398
GPR[EPVS]-1661316347398
========
if(expPos>-1&&expPos<val.length()){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316347400
GPR[SPVAP]-1661316347400
GPR[EPVAP]-1661316348508
GPR[SPVATF]-1661316348508
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316349445
GPR[EPVS]-1661316349445
========
if(i>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316349446
GPR[SPVAP]-1661316349446
GPR[EPVAP]-1661316350080
GPR[EPVS]-1661316350080
========
if(expPos>-1&&i<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316350081
GPR[SPVAP]-1661316350081
GPR[EPVAP]-1661316350714
GPR[EPVS]-1661316350714
========
mant=val.substring(0,expPos);
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316350715
GPR[SPVAP]-1661316350715
GPR[EPVAP]-1661316351802
GPR[SPVATF]-1661316351802
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316352736
GPR[EPVS]-1661316352736
========
if(decPos<0){
pos=0;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316352738
GPR[SPVAP]-1661316352738
GPR[EPVAP]-1661316353372
GPR[EPVS]-1661316353372
========
mant=val.substring(0,expPos);
if(expPos>-1&&expPos<val.length()-1){
exp=str.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316353373
GPR[SPVAP]-1661316353373
GPR[EPVAP]-1661316354004
GPR[EPVS]-1661316354005
========
if(expPos>val.length()){
return EMPTY;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316354006
GPR[SPVAP]-1661316354006
GPR[EPVAP]-1661316354636
GPR[EPVS]-1661316354636
========
if(expPos<0){
return EMPTY;
}
if(val.length()<=expPos){
return str;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316354637
GPR[SPVAP]-1661316354637
GPR[EPVAP]-1661316355279
GPR[EPVS]-1661316355279
========
if(len>-1&&len<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316355281
GPR[SPVAP]-1661316355281
GPR[EPVAP]-1661316355924
GPR[EPVS]-1661316355924
========
if(len>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316355926
GPR[SPVAP]-1661316355926
GPR[EPVAP]-1661316356559
GPR[EPVS]-1661316356559
========
if(expPos>-1&&len<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316356560
GPR[SPVAP]-1661316356560
GPR[EPVAP]-1661316357195
GPR[EPVS]-1661316357195
========
if(offset>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316357196
GPR[SPVAP]-1661316357196
GPR[EPVAP]-1661316357832
GPR[EPVS]-1661316357832
========
if(JAVA_VERSION.charAt(decPos)>='0'&&JAVA_VERSION.charAt(decPos)<='9'){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316357834
GPR[SPVAP]-1661316357834
GPR[EPVAP]-1661316358470
GPR[EPVS]-1661316358470
========
if(JAVA_VERSION.charAt(decPos)>='0'&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316358471
GPR[SPVAP]-1661316358471
GPR[EPVAP]-1661316359103
GPR[EPVS]-1661316359103
========
if(expPos>-1&&JAVA_VERSION.charAt(decPos)<='9'){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316359104
GPR[SPVAP]-1661316359104
GPR[EPVAP]-1661316359742
GPR[EPVS]-1661316359742
========
if(expPos>-1&&expPos<=val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316359744
GPR[SPVAP]-1661316359744
GPR[EPVAP]-1661316360823
GPR[SPVATF]-1661316360823
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316361767
GPR[EPVS]-1661316361767
========
if(expPos>-1&&expPos<=0){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316361769
GPR[SPVAP]-1661316361769
GPR[EPVAP]-1661316362870
GPR[SPVATF]-1661316362870
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316363803
GPR[EPVS]-1661316363803
========
if(expPos>-1&&size<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316363804
GPR[SPVAP]-1661316363804
GPR[EPVAP]-1661316364427
GPR[EPVS]-1661316364427
========
if(expPos-val.length()<=0){
return val;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316364428
GPR[SPVAP]-1661316364428
GPR[EPVAP]-1661316365053
GPR[EPVS]-1661316365053
========
if(expPos==1||val.length()==0){
return val;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316365054
GPR[SPVAP]-1661316365054
GPR[EPVAP]-1661316365680
GPR[EPVS]-1661316365680
========
if(len>-1&&pos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316365681
GPR[SPVAP]-1661316365681
GPR[EPVAP]-1661316366314
GPR[EPVS]-1661316366314
========
if(StringUtils.containsAny(val.substring(1,str.length()-1),CSV_SEARCH_CHARS)){
val=StringUtils.replace(quoteless,CSV_QUOTE_STR+CSV_QUOTE_STR,CSV_QUOTE_STR);
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316366315
GPR[SPVAP]-1661316366315
GPR[EPVAP]-1661316366970
GPR[EPVS]-1661316366970
========
if(dec.length()==0){
return EMPTY;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316366971
GPR[SPVAP]-1661316366971
GPR[EPVAP]-1661316367606
GPR[EPVS]-1661316367606
========
if(val.indexOf(dec)==-1){
return val;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316367607
GPR[SPVAP]-1661316367607
GPR[EPVAP]-1661316368235
GPR[EPVS]-1661316368235
========
if(isEmpty(val)){
return str;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316368236
GPR[SPVAP]-1661316368236
GPR[EPVAP]-1661316368874
GPR[EPVS]-1661316368874
========
if(dec==null){
return EMPTY;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316368875
GPR[SPVAP]-1661316368875
GPR[EPVAP]-1661316369508
GPR[EPVS]-1661316369508
========
if(length>-1&&length<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316369510
GPR[SPVAP]-1661316369510
GPR[EPVAP]-1661316370140
GPR[EPVS]-1661316370140
========
if(length>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316370141
GPR[SPVAP]-1661316370141
GPR[EPVAP]-1661316370771
GPR[EPVS]-1661316370771
========
if(expPos>-1&&startIndex<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316370772
GPR[SPVAP]-1661316370772
GPR[EPVAP]-1661316371406
GPR[EPVS]-1661316371406
========
if(expPos>-1&&length<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316371407
GPR[SPVAP]-1661316371407
GPR[EPVAP]-1661316372054
GPR[EPVS]-1661316372054
========
if(isEmpty(exp)){
padStr=" ";
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316372055
GPR[SPVAP]-1661316372055
GPR[EPVAP]-1661316372685
GPR[EPVS]-1661316372685
========
if(expPos>-1&&size<=val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316372686
GPR[SPVAP]-1661316372686
GPR[EPVAP]-1661316373326
GPR[EPVS]-1661316373326
========
if(expPos-val.length()<=0){
return val;
}
if(expPos>-1&&expPos<=val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316373327
GPR[SPVAP]-1661316373327
GPR[EPVAP]-1661316373955
GPR[EPVS]-1661316373955
========
if(expPos-val.length()<=0){
return val;
}
if(expPos>-1&&expPos<=0){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316373956
GPR[SPVAP]-1661316373956
GPR[EPVAP]-1661316374588
GPR[EPVS]-1661316374588
========
if(expPos-val.length()<=0){
return val;
}
if(expPos>-1&&size<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316374589
GPR[SPVAP]-1661316374589
GPR[EPVAP]-1661316375217
GPR[EPVS]-1661316375217
========
if(expPos-val.length()<=0){
return val;
}
if(expPos>-1&&size<=val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316375218
GPR[SPVAP]-1661316375218
GPR[EPVAP]-1661316375862
GPR[EPVS]-1661316375862
========
if(val.startsWith("--")){
return null;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316375863
GPR[SPVAP]-1661316375863
GPR[EPVAP]-1661316376967
GPR[SPVATF]-1661316376967
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316377898
GPR[EPVS]-1661316377898
========
if(expPos>-1&&expPos<7){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316377900
GPR[SPVAP]-1661316377900
GPR[EPVAP]-1661316378983
GPR[SPVATF]-1661316378983
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316379928
GPR[EPVS]-1661316379928
========
if(val==null){
return null;
}
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316379929
GPR[SPVAP]-1661316379929
GPR[EPVAP]-1661316381010
GPR[SPVATF]-1661316381010
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316381937
GPR[EPVS]-1661316381937
========
if(len>-1&&expPos<7){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316381938
GPR[SPVAP]-1661316381938
GPR[EPVAP]-1661316382572
GPR[EPVS]-1661316382572
========
if(val==null){
return null;
}
if(len>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316382573
GPR[SPVAP]-1661316382573
GPR[EPVAP]-1661316383208
GPR[EPVS]-1661316383208
========
if(val==null){
return null;
}
if(expPos>-1&&len<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316383209
GPR[SPVAP]-1661316383209
GPR[EPVAP]-1661316383844
GPR[EPVS]-1661316383844
========
if(val==null){
return null;
}
if(expPos>-1&&expPos<7){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316383845
GPR[SPVAP]-1661316383845
GPR[EPVAP]-1661316384937
GPR[SPVATF]-1661316384937
TESTING : org.apache.commons.lang.NumberUtilsTest::testLang457
MM:   - org.apache.commons.lang.NumberUtilsTest::testLang457
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661316385866
GPR[EPVS]-1661316385866
========
if(val==null){
return null;
}
if(len>-1&&len<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316385868
GPR[SPVAP]-1661316385868
GPR[EPVAP]-1661316386503
GPR[EPVS]-1661316386503
========
if(val==null){
return null;
}
if(len>-1&&expPos<7){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316386504
GPR[SPVAP]-1661316386504
GPR[EPVAP]-1661316387139
GPR[EPVS]-1661316387139
========
if(startIndex>-1&&startIndex<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316387141
GPR[SPVAP]-1661316387141
GPR[EPVAP]-1661316387780
GPR[EPVS]-1661316387780
========
if(startIndex>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316387782
GPR[SPVAP]-1661316387782
GPR[EPVAP]-1661316388412
GPR[EPVS]-1661316388412
========
if(expPos>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
Validate.isTrue(expPos>-1,"Negative values should not be possible",value);
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316388414
GPR[SPVAP]-1661316388414
GPR[EPVAP]-1661316389058
GPR[EPVS]-1661316389058
========
if(index>-1&&index<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316389060
GPR[SPVAP]-1661316389060
GPR[EPVAP]-1661316389703
GPR[EPVS]-1661316389703
========
if(index>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316389704
GPR[SPVAP]-1661316389704
GPR[EPVAP]-1661316390358
GPR[EPVS]-1661316390358
========
if(expPos>-1&&index<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316390359
GPR[SPVAP]-1661316390359
GPR[EPVAP]-1661316390986
GPR[EPVS]-1661316390987
========
if(endIndex>-1&&endIndex<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316390988
GPR[SPVAP]-1661316390988
GPR[EPVAP]-1661316391618
GPR[EPVS]-1661316391618
========
if(endIndex>-1&&expPos<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316391619
GPR[SPVAP]-1661316391619
GPR[EPVAP]-1661316392251
GPR[EPVS]-1661316392251
========
if(expPos>-1&&endIndex<val.length()-1){
exp=val.substring(expPos+1,val.length());
}else {
exp=null;
}

========
MM Copying to MM
GPR[SPVS]-1661316392252
GPR[SPVAP]-1661316392252
GPR[EPVAP]-1661316392879
GPR[EPVS]-1661316392879
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fe5d15f5574, pid=730452, tid=140625414149888
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 4847 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007fe5d15f5574 [0x00007fe5d15f2ac0+0x2ab4]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/lang/lang_44_buggy/hs_err_pid730452.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Lang/44 results at /experiment_home///results/SimFix/Lang/44/seed_284/
\n\nNode: host-57\n
\n\nDate: Tue 23 Aug 2022 09:46:32 PM PDT\n
Removing checked out dir script/workingdir/SimFix/lang/lang_44_buggy
Killing all java process
GPR[SSLE]-1661316393804
GPR[ESLE]-1661316453808
