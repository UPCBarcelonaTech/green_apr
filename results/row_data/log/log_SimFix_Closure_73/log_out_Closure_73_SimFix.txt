Sleep 1m start
GPR[SSLI]-1659892355464
GPR[ESLI]-1659892415470
Running SimFix Closure 73b
Timezone: America/Los_Angeles
Seed 261
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Closure/73/seed_261/
Project lc: closure
New out script/workingdir/SimFix/closure/closure_73_buggy
The file script/workingdir/SimFix/closure/closure_73_buggy does not exist!
script/workingdir/SimFix/closure/closure_73_buggy
Current directory: script/workingdir/SimFix/closure/closure_73_buggy
classpath:  script/workingdir/SimFix/closure/closure_73_buggy/build/classes:script/workingdir/SimFix/closure/closure_73_buggy/lib/args4j.jar:script/workingdir/SimFix/closure/closure_73_buggy/lib/guava.jar:script/workingdir/SimFix/closure/closure_73_buggy/lib/json.jar:script/workingdir/SimFix/closure/closure_73_buggy/lib/jsr305.jar:script/workingdir/SimFix/closure/closure_73_buggy/lib/libtrunk_rhino_parser_jarjared.jar:script/workingdir/SimFix/closure/closure_73_buggy/lib/protobuf-java.jar:script/workingdir/SimFix/closure/closure_73_buggy/lib/ant.jar:script/workingdir/SimFix/closure/closure_73_buggy/lib/ant-launcher.jar:script/workingdir/SimFix/closure/closure_73_buggy/lib/caja-r4314.jar:script/workingdir/SimFix/closure/closure_73_buggy/lib/junit.jar:script/workingdir/SimFix/closure/closure_73_buggy/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659892431463
GPR[ESLB]-1659892491467
Calling SimFix: at script/workingdir/SimFix/closure/closure_73_buggy
build
build.xml
closure-compiler.pom
contrib
CONTRIBUTORS
COPYING
d4j-info
defects4j.build.properties
externs
gen
javadoc
lib
README
src
test
tools
content current dir: build build.xml closure-compiler.pom contrib CONTRIBUTORS COPYING d4j-info defects4j.build.properties externs gen javadoc lib README src test tools
Node: host-55
Date init: Sun 07 Aug 2022 10:14:53 AM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659892493754
=================================================
Project : closure_73	start : 22/08/07 10:14

Field type inconsistancy 'errors' with types : JSError[] and List<JSError>
Field type inconsistancy 'type' with types : JSType and Type
Variable type inconsistancy of 'name' in method 'visit,NodeTraversal,Node,Node' with types : String and Name
Field type inconsistancy 'THIS' with types : Token and int
GPR[ESUP]-1659892496063
MM Purify? false
GPR[SFL]-1659892496391
GPR[EFL]-1659892496436
GPR[SFP]-1659892496437
TIMEOUT : 18000000
GPR[SSUN]-1659892496456
com.google.javascript.jscomp.CodeGenerator,1051
========
if(c>0x1f&&c<0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892498775
GPR[SPVAP]-1659892498775
GPR[EPVAP]-1659892505963
GPR[SPVATF]-1659892505963
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 0
GPR[EPVATF]-1659892508301
GPR[SPVATR]-1659892508302
TESTING : closure_73
MM messageFailing tests: 0
GPR[EPVATR]-1659892553084
GPR[EPVS]-1659892553084
GPR[PF]-1659892553084
sourceFile  script/workingdir/SimFix/closure/closure_73_buggy/src/com/google/javascript/jscomp/CodeGenerator.java
location   script/workingdir/SimFix/closure/closure_73_buggy
MM Out patch at /experiment_home///results/SimFix/Closure/73/seed_261/patch/closure/73/0/patch_56650_1_ts_1659892553084.diff
MM Command diff diff -w -b  --label=/src/com/google/javascript/jscomp/CodeGenerator.java --label=/src/com/google/javascript/jscomp/CodeGenerator.java /tmp/tmpDirMM247291576359651906/CodeGenerator.java  /experiment_home///results/SimFix/Closure/73/seed_261/patch/closure/73/0/1_CodeGenerator.java  --unified=3  > /experiment_home///results/SimFix/Closure/73/seed_261/patch/closure/73/0/patch_56650_1_ts_1659892553084.diff
MMOut command diff: []
========
if(ch>0x1f&&ch<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892553100
GPR[SPVAP]-1659892553100
GPR[EPVAP]-1659892554376
GPR[EPVS]-1659892554377
========
if(ch>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892554378
GPR[SPVAP]-1659892554378
GPR[EPVAP]-1659892555617
GPR[EPVS]-1659892555618
========
if(c>0x1f&&ch<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892555619
GPR[SPVAP]-1659892555619
GPR[EPVAP]-1659892556881
GPR[EPVS]-1659892556881
========
if(c>0x1f&&i<=0){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892556884
GPR[SPVAP]-1659892556884
GPR[EPVAP]-1659892559658
GPR[SPVATF]-1659892559658
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892561996
GPR[EPVS]-1659892561996
========
new StringBuilder(START_COMMENT).append(" (");
if(c>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892561998
GPR[SPVAP]-1659892561998
GPR[EPVAP]-1659892563253
GPR[EPVS]-1659892563253
========
if(START_COMMENT!=null){
new StringBuilder(START_COMMENT).append(sourceName);
}
if(c>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892563255
GPR[SPVAP]-1659892563255
GPR[EPVAP]-1659892564513
GPR[EPVS]-1659892564513
========
if(i>0){
new StringBuilder(START_COMMENT).append('#');
buf.append(lineNumber);
}
if(c>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892564514
GPR[SPVAP]-1659892564515
GPR[EPVAP]-1659892565761
GPR[EPVS]-1659892565761
========
if(c>0x1f&&c<=0x7f){
sb.add(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892565765
GPR[SPVAP]-1659892565765
GPR[EPVAP]-1659892567012
GPR[EPVS]-1659892567012
========
if(c>0x1f&&c<=0x7f){
return i+1;
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892567015
GPR[SPVAP]-1659892567015
GPR[EPVAP]-1659892568264
GPR[EPVS]-1659892568264
========
if(i>0)c++;
if(c>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892568266
GPR[SPVAP]-1659892568266
GPR[EPVAP]-1659892570944
GPR[SPVATF]-1659892570944
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892573285
GPR[EPVS]-1659892573285
========
maybeEndStatement();
if(c>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892573288
GPR[SPVAP]-1659892573288
GPR[EPVAP]-1659892574977
GPR[EPVS]-1659892574977
========
if(START_COMMENT.length()==0){
return ;
}
if(c>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892574983
GPR[SPVAP]-1659892574983
GPR[EPVAP]-1659892576384
GPR[EPVS]-1659892576384
========
append(START_COMMENT);
if(c>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892576386
GPR[SPVAP]-1659892576386
GPR[EPVAP]-1659892577690
GPR[EPVS]-1659892577690
========
if(c>0x1f&&c<=0x7f){
hexSize=2;
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892577694
GPR[SPVAP]-1659892577694
GPR[EPVAP]-1659892579024
GPR[EPVS]-1659892579024
========
if(first>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892579027
GPR[SPVAP]-1659892579027
GPR[EPVAP]-1659892580307
GPR[EPVS]-1659892580307
========
if(c>0x1f&&prev<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892580309
GPR[SPVAP]-1659892580309
GPR[EPVAP]-1659892581555
GPR[EPVS]-1659892581555
========
if(j1>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892581558
GPR[SPVAP]-1659892581558
GPR[EPVAP]-1659892582820
GPR[EPVS]-1659892582820
========
if(c>0x1f&&dig<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892582822
GPR[SPVAP]-1659892582822
GPR[EPVAP]-1659892584087
GPR[EPVS]-1659892584087
========
if(c>0x1f&&i<=Token.LAST_TOKEN){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892584090
GPR[SPVAP]-1659892584090
GPR[EPVAP]-1659892586852
GPR[SPVATF]-1659892586852
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892589165
GPR[EPVS]-1659892589165
========
if(c>0x1f&&c<=Token.LAST_TOKEN){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892589167
GPR[SPVAP]-1659892589167
GPR[EPVAP]-1659892591845
GPR[SPVATF]-1659892591845
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892594181
GPR[EPVS]-1659892594181
========
if(c>0x1f&&token<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892594183
GPR[SPVAP]-1659892594183
GPR[EPVAP]-1659892595461
GPR[EPVS]-1659892595461
========
append((char)i);
if(c>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892595462
GPR[SPVAP]-1659892595462
GPR[EPVAP]-1659892596736
GPR[EPVS]-1659892596736
========
append((char)Token.EOL);
if(c>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892596738
GPR[SPVAP]-1659892596738
GPR[EPVAP]-1659892597989
GPR[EPVS]-1659892597989
========
if(c>0x1f&&c<=0x7f){
return false;
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892597994
GPR[SPVAP]-1659892597994
GPR[EPVAP]-1659892599250
GPR[EPVS]-1659892599250
========
append((char)i);
if(c>0x1f&&i<=Token.LAST_TOKEN){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892599253
GPR[SPVAP]-1659892599253
GPR[EPVAP]-1659892600502
GPR[EPVS]-1659892600502
========
if(c>0x1f&&token<=Token.LAST_TOKEN){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892600504
GPR[SPVAP]-1659892600504
GPR[EPVAP]-1659892601754
GPR[EPVS]-1659892601754
========
append((char)i);
if(c>0x1f&&c<=Token.LAST_TOKEN){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892601756
GPR[SPVAP]-1659892601756
GPR[EPVAP]-1659892603018
GPR[EPVS]-1659892603018
========
append((char)i);
if(c>0x1f&&token<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892603020
GPR[SPVAP]-1659892603020
GPR[EPVAP]-1659892604276
GPR[EPVS]-1659892604276
========
append((char)i);
if(c>0x1f&&token<=Token.LAST_TOKEN){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892604278
GPR[SPVAP]-1659892604278
GPR[EPVAP]-1659892605522
GPR[EPVS]-1659892605522
========
if(c>0x1f&&c<=c){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892605526
GPR[SPVAP]-1659892605526
GPR[EPVAP]-1659892608192
GPR[SPVATF]-1659892608192
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892610537
GPR[EPVS]-1659892610537
========
if(c>0x1f&&c<=0x7f){
break;
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892610540
GPR[SPVAP]-1659892610540
GPR[EPVAP]-1659892611799
GPR[EPVS]-1659892611799
========
case 2 :

if(c>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892611801
GPR[SPVAP]-1659892611801
GPR[EPVAP]-1659892612884
GPR[EPVS]-1659892612884
GPR[ESUN]-1659892612886
GPR[SSUN]-1659892612886
com.google.javascript.jscomp.CodeGenerator,1160
GPR[ESUN]-1659892614816
GPR[SSUN]-1659892614816
com.google.javascript.jscomp.CodeGenerator,1164
Find no block!
GPR[SSUN]-1659892615025
com.google.javascript.jscomp.CodeGenerator,1165
Find no block!
GPR[SSUN]-1659892615205
com.google.javascript.jscomp.CodeGenerator,1177
========
if(Character.canEncode(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}

========
MM Copying to MM
GPR[SPVS]-1659892616697
GPR[SPVAP]-1659892616697
GPR[EPVAP]-1659892619484
GPR[EPVS]-1659892619484
GPR[ESUN]-1659892619485
GPR[SSUN]-1659892619485
com.google.javascript.jscomp.CodeGenerator,1187
========
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).add(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892621487
GPR[SPVAP]-1659892621488
GPR[EPVAP]-1659892624241
GPR[EPVS]-1659892624241
========
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.charAt(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892624244
GPR[SPVAP]-1659892624244
GPR[EPVAP]-1659892626273
GPR[EPVS]-1659892626273
========
out.append("\n]");
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892626275
GPR[SPVAP]-1659892626275
GPR[EPVAP]-1659892632808
GPR[SPVATF]-1659892632808
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892635192
GPR[EPVS]-1659892635192
========
if(Character.isSupplementaryCodePoint(codePoint)){
out.append(" (CLASS)\n");
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892635194
GPR[SPVAP]-1659892635194
GPR[EPVAP]-1659892637905
GPR[SPVATF]-1659892637905
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892640249
GPR[EPVS]-1659892640249
========
if(Character.isSupplementaryCodePoint(codePoint)){
out.append(" - FUNCTIONS: ");
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892640251
GPR[SPVAP]-1659892640251
GPR[EPVAP]-1659892642981
GPR[SPVATF]-1659892642981
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892645400
GPR[EPVS]-1659892645400
========
if(Character.isSupplementaryCodePoint(codePoint)){
out.append(" (CLASS)\n");
out.append(" - FUNCTIONS: ");

char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892645401
GPR[SPVAP]-1659892645401
GPR[EPVAP]-1659892648067
GPR[SPVATF]-1659892648068
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892650465
GPR[EPVS]-1659892650465
========
if(Character.isSupplementaryCodePoint(codePoint)){
out.append(" (CLASS)\n");
out.append(" - FUNCTIONS: ");
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892650468
GPR[SPVAP]-1659892650468
GPR[EPVAP]-1659892653205
GPR[SPVATF]-1659892653205
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892655560
GPR[EPVS]-1659892655560
========
if(Character.isSupplementaryCodePoint(codePoint)){
out.append(" (CLASS)\n");
out.append(" (CLASS)\n");
out.append(" - FUNCTIONS: ");

char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892655562
GPR[SPVAP]-1659892655562
GPR[EPVAP]-1659892658245
GPR[SPVATF]-1659892658245
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892660573
GPR[EPVS]-1659892660573
========
if(Character.isSupplementaryCodePoint(codePoint)){
out.append(" - FUNCTIONS: ");
out.append(" (CLASS)\n");
out.append(" - FUNCTIONS: ");

char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892660575
GPR[SPVAP]-1659892660575
GPR[EPVAP]-1659892663245
GPR[SPVATF]-1659892663245
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892665586
GPR[EPVS]-1659892665586
========
if(Character.isSupplementaryCodePoint(codePoint)){
out.append(" (CLASS)\n");
out.append(" - FUNCTIONS: ");
out.append(" (CLASS)\n");
out.append(" - FUNCTIONS: ");

char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892665587
GPR[SPVAP]-1659892665587
GPR[EPVAP]-1659892668248
GPR[SPVATF]-1659892668248
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892670561
GPR[EPVS]-1659892670561
========
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).shiftLeft(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892670564
GPR[SPVAP]-1659892670564
GPR[EPVAP]-1659892671821
GPR[EPVS]-1659892671821
========
out.append('\n');
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892671824
GPR[SPVAP]-1659892671824
GPR[EPVAP]-1659892674508
GPR[SPVATF]-1659892674508
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892676865
GPR[EPVS]-1659892676865
========
new StringBuilder(120).append(' ');
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892676867
GPR[SPVAP]-1659892676868
GPR[EPVAP]-1659892679596
GPR[SPVATF]-1659892679596
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892681937
GPR[EPVS]-1659892681937
========
new StringBuilder(120).append(formatTime(eventTime()));
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892681939
GPR[SPVAP]-1659892681939
GPR[EPVAP]-1659892683197
GPR[EPVS]-1659892683197
========
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).setLength(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892683199
GPR[SPVAP]-1659892683199
GPR[EPVAP]-1659892684461
GPR[EPVS]-1659892684461
========
if(Character.isLetter(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892684463
GPR[SPVAP]-1659892684463
GPR[EPVAP]-1659892687147
GPR[SPVATF]-1659892687147
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892689486
GPR[EPVS]-1659892689486
========
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).checkState(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892689488
GPR[SPVAP]-1659892689488
GPR[EPVAP]-1659892690756
GPR[EPVS]-1659892690756
========
if(!getThisSlot().getType().isNone()){
new StringBuilder(32).append("this:");
b.append(getThisSlot().getType().toString());
}
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892690759
GPR[SPVAP]-1659892690759
GPR[EPVAP]-1659892692019
GPR[EPVS]-1659892692019
========
if(Character.charAt(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892692022
GPR[SPVAP]-1659892692022
GPR[EPVAP]-1659892693273
GPR[EPVS]-1659892693273
========
new StringBuilder("(?:^|;)\\s*(").deleteCharAt(sb.length()-1);
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892693275
GPR[SPVAP]-1659892693275
GPR[EPVAP]-1659892694551
GPR[EPVS]-1659892694551
========
new StringBuilder("(?:^|;)\\s*(").append(")\\s*\\((.*?)\\)");
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892694552
GPR[SPVAP]-1659892694552
GPR[EPVAP]-1659892697249
GPR[SPVATF]-1659892697249
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892699590
GPR[EPVS]-1659892699590
========
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).update(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892699591
GPR[SPVAP]-1659892699591
GPR[EPVAP]-1659892700845
GPR[EPVS]-1659892700845
========
if(Character.canEncode(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892700847
GPR[SPVAP]-1659892700847
GPR[EPVAP]-1659892702109
GPR[EPVS]-1659892702109
========
maybeEndStatement();
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892702111
GPR[SPVAP]-1659892702111
GPR[EPVAP]-1659892703354
GPR[EPVS]-1659892703354
========
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
if(codePoint==0){
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892703357
GPR[SPVAP]-1659892703357
GPR[EPVAP]-1659892706039
GPR[SPVATF]-1659892706039
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892708345
GPR[EPVS]-1659892708345
========
out.append(new StringBuilder());
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892708346
GPR[SPVAP]-1659892708346
GPR[EPVAP]-1659892711015
GPR[SPVATF]-1659892711015
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892713328
GPR[EPVS]-1659892713328
========
out.append(new StringBuilder());
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
if(codePoint==0){
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892713330
GPR[SPVAP]-1659892713330
GPR[EPVAP]-1659892716039
GPR[SPVATF]-1659892716039
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892718369
GPR[EPVS]-1659892718369
========
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).multiply(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892718371
GPR[SPVAP]-1659892718371
GPR[EPVAP]-1659892719621
GPR[EPVS]-1659892719621
========
if(Character.compareTo(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892719623
GPR[SPVAP]-1659892719623
GPR[EPVAP]-1659892720878
GPR[EPVS]-1659892720878
========
if(Character.isSupplementaryCodePoint(codePoint)){
out.append('\n');
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892720880
GPR[SPVAP]-1659892720880
GPR[EPVAP]-1659892723527
GPR[SPVATF]-1659892723527
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892725862
GPR[EPVS]-1659892725862
========
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
appendSpaces(new StringBuilder(),codePoint-codePoint);
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892725864
GPR[SPVAP]-1659892725864
GPR[EPVAP]-1659892727107
GPR[EPVS]-1659892727107
========
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
case ' ' :

out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892727110
GPR[SPVAP]-1659892727110
GPR[EPVAP]-1659892728242
GPR[EPVS]-1659892728242
========
case Token.RC :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892728245
GPR[SPVAP]-1659892728245
GPR[EPVAP]-1659892729323
GPR[EPVS]-1659892729323
========
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
case Token.GET :

out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892729325
GPR[SPVAP]-1659892729325
GPR[EPVAP]-1659892730413
GPR[EPVS]-1659892730413
========
case Token.NAME :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892730415
GPR[SPVAP]-1659892730415
GPR[EPVAP]-1659892731491
GPR[EPVS]-1659892731491
========
case Token.LB :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892731493
GPR[SPVAP]-1659892731493
GPR[EPVAP]-1659892732571
GPR[EPVS]-1659892732571
========
case Token.CONTINUE :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892732573
GPR[SPVAP]-1659892732573
GPR[EPVAP]-1659892733650
GPR[EPVS]-1659892733651
========
case Token.VAR :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892733653
GPR[SPVAP]-1659892733653
GPR[EPVAP]-1659892734769
GPR[EPVS]-1659892734769
========
case FUNCTION_END :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892734770
GPR[SPVAP]-1659892734770
GPR[EPVAP]-1659892735865
GPR[EPVS]-1659892735865
========
if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
case Token.WHILE :

out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892735866
GPR[SPVAP]-1659892735866
GPR[EPVAP]-1659892736968
GPR[EPVS]-1659892736968
========
case '\"' :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892736970
GPR[SPVAP]-1659892736970
GPR[EPVAP]-1659892738061
GPR[EPVS]-1659892738061
========
case '>' :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892738063
GPR[SPVAP]-1659892738063
GPR[EPVAP]-1659892739171
GPR[EPVS]-1659892739171
========
default :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892739172
GPR[SPVAP]-1659892739172
GPR[EPVAP]-1659892740259
GPR[EPVS]-1659892740260
========
case '\n' :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892740261
GPR[SPVAP]-1659892740261
GPR[EPVAP]-1659892741345
GPR[EPVS]-1659892741345
========
case '\t' :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892741347
GPR[SPVAP]-1659892741347
GPR[EPVAP]-1659892742431
GPR[EPVS]-1659892742431
========
case 2 :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892742433
GPR[SPVAP]-1659892742433
GPR[EPVAP]-1659892743527
GPR[EPVS]-1659892743527
========
case Token.FALSE :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892743529
GPR[SPVAP]-1659892743529
GPR[EPVAP]-1659892744629
GPR[EPVS]-1659892744629
========
case Token.THIS :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892744631
GPR[SPVAP]-1659892744631
GPR[EPVAP]-1659892745738
GPR[EPVS]-1659892745738
========
case Token.EOL :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892745740
GPR[SPVAP]-1659892745740
GPR[EPVAP]-1659892746817
GPR[EPVS]-1659892746817
========
case Token.NEW :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892746818
GPR[SPVAP]-1659892746818
GPR[EPVAP]-1659892747906
GPR[EPVS]-1659892747906
========
case Token.IF :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892747908
GPR[SPVAP]-1659892747908
GPR[EPVAP]-1659892748991
GPR[EPVS]-1659892748991
========
case Token.FOR :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892748993
GPR[SPVAP]-1659892748993
GPR[EPVAP]-1659892750080
GPR[EPVS]-1659892750084
========
case Token.WITH :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892750086
GPR[SPVAP]-1659892750086
GPR[EPVAP]-1659892751171
GPR[EPVS]-1659892751171
========
case Token.DO :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892751173
GPR[SPVAP]-1659892751173
GPR[EPVAP]-1659892752271
GPR[EPVS]-1659892752271
========
case Token.CATCH :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892752273
GPR[SPVAP]-1659892752273
GPR[EPVAP]-1659892753359
GPR[EPVS]-1659892753359
========
case Token.THROW :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892753361
GPR[SPVAP]-1659892753361
GPR[EPVAP]-1659892754443
GPR[EPVS]-1659892754443
========
case Token.DEFAULT :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892754444
GPR[SPVAP]-1659892754444
GPR[EPVAP]-1659892755534
GPR[EPVS]-1659892755534
========
case Token.ASSIGN_ADD :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892755536
GPR[SPVAP]-1659892755536
GPR[EPVAP]-1659892756635
GPR[EPVS]-1659892756635
========
case Token.ASSIGN_MUL :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892756637
GPR[SPVAP]-1659892756637
GPR[EPVAP]-1659892757716
GPR[EPVS]-1659892757716
========
case Token.ASSIGN_MOD :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892757718
GPR[SPVAP]-1659892757718
GPR[EPVAP]-1659892758803
GPR[EPVS]-1659892758803
========
case Token.ASSIGN_BITXOR :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892758805
GPR[SPVAP]-1659892758805
GPR[EPVAP]-1659892759891
GPR[EPVS]-1659892759891
========
case Token.ASSIGN_LSH :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892759892
GPR[SPVAP]-1659892759892
GPR[EPVAP]-1659892761009
GPR[EPVS]-1659892761009
========
case Token.ASSIGN_URSH :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892761010
GPR[SPVAP]-1659892761010
GPR[EPVAP]-1659892762112
GPR[EPVS]-1659892762112
========
case Token.OBJECTLIT :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892762114
GPR[SPVAP]-1659892762114
GPR[EPVAP]-1659892763205
GPR[EPVS]-1659892763205
========
case Token.AND :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892763206
GPR[SPVAP]-1659892763206
GPR[EPVAP]-1659892764299
GPR[EPVS]-1659892764299
========
case Token.BITXOR :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892764300
GPR[SPVAP]-1659892764300
GPR[EPVAP]-1659892765381
GPR[EPVS]-1659892765381
========
case Token.SHEQ :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892765382
GPR[SPVAP]-1659892765382
GPR[EPVAP]-1659892766474
GPR[EPVS]-1659892766474
========
case Token.EQ :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892766475
GPR[SPVAP]-1659892766475
GPR[EPVAP]-1659892767563
GPR[EPVS]-1659892767563
========
case Token.LE :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892767565
GPR[SPVAP]-1659892767565
GPR[EPVAP]-1659892768667
GPR[EPVS]-1659892768667
========
case Token.GE :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892768668
GPR[SPVAP]-1659892768668
GPR[EPVAP]-1659892769756
GPR[EPVS]-1659892769756
========
case Token.INSTANCEOF :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892769758
GPR[SPVAP]-1659892769758
GPR[EPVAP]-1659892771161
GPR[EPVS]-1659892771161
========
case Token.RSH :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892771164
GPR[SPVAP]-1659892771164
GPR[EPVAP]-1659892772490
GPR[EPVS]-1659892772490
========
case Token.TYPEOF :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892772492
GPR[SPVAP]-1659892772492
GPR[EPVAP]-1659892773591
GPR[EPVS]-1659892773591
========
case Token.CONST :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892773593
GPR[SPVAP]-1659892773593
GPR[EPVAP]-1659892774713
GPR[EPVS]-1659892774713
========
case Token.BITNOT :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892774715
GPR[SPVAP]-1659892774715
GPR[EPVAP]-1659892775823
GPR[EPVS]-1659892775823
========
case Token.NEG :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892775825
GPR[SPVAP]-1659892775825
GPR[EPVAP]-1659892776925
GPR[EPVS]-1659892776925
========
case Token.DEC :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892776927
GPR[SPVAP]-1659892776927
GPR[EPVAP]-1659892778007
GPR[EPVS]-1659892778007
========
case Token.SUB :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892778008
GPR[SPVAP]-1659892778008
GPR[EPVAP]-1659892779100
GPR[EPVS]-1659892779100
========
case Token.DIV :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892779102
GPR[SPVAP]-1659892779102
GPR[EPVAP]-1659892780179
GPR[EPVS]-1659892780179
========
case Token.COLONCOLON :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892780181
GPR[SPVAP]-1659892780181
GPR[EPVAP]-1659892781279
GPR[EPVS]-1659892781279
========
case Token.DOTQUERY :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892781281
GPR[SPVAP]-1659892781281
GPR[EPVAP]-1659892782403
GPR[EPVS]-1659892782403
========
case '\r' :

if(Character.isSupplementaryCodePoint(codePoint)){
char[] surrogates=Character.toChars(codePoint);
appendHexJavaScriptRepresentation(surrogates[0],out);
appendHexJavaScriptRepresentation(surrogates[1],out);
return ;
}
out.append("\\u").append(HEX_CHARS[(codePoint>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);

========
MM Copying to MM
GPR[SPVS]-1659892782404
GPR[SPVAP]-1659892782404
GPR[EPVAP]-1659892783495
GPR[EPVS]-1659892783495
GPR[ESUN]-1659892783495
GPR[SSUN]-1659892783495
com.google.javascript.jscomp.CodeGenerator,1192
Find no block!
GPR[SSUN]-1659892784063
com.google.javascript.jscomp.Compiler,1247
GPR[ESUN]-1659892785518
GPR[SSUN]-1659892785518
com.google.javascript.jscomp.Compiler,1243
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
if(inputsByName.containsKey(externExports)){
throw new IllegalArgumentException("Conflicting externs name: "+name);
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892787291
GPR[SPVAP]-1659892787291
GPR[EPVAP]-1659892789709
GPR[EPVS]-1659892789709
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
compiler.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892789711
GPR[SPVAP]-1659892789711
GPR[EPVAP]-1659892791971
GPR[EPVS]-1659892791971
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName!=null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892791973
GPR[SPVAP]-1659892791973
GPR[EPVAP]-1659892798812
GPR[SPVATF]-1659892798812
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892801129
GPR[EPVS]-1659892801129
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=input.isExtern()?Maps.newHashMap():null;
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892801131
GPR[SPVAP]-1659892801131
GPR[EPVAP]-1659892802465
GPR[EPVS]-1659892802465
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
Preconditions.checkNotNull(input,js);
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892802466
GPR[SPVAP]-1659892802466
GPR[EPVAP]-1659892805388
GPR[SPVATF]-1659892805388
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892807693
GPR[EPVS]-1659892807693
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),input);
return parse(JSSourceFile.fromCode(currentPassName,js));

========
MM Copying to MM
GPR[SPVS]-1659892807696
GPR[SPVAP]-1659892807696
GPR[EPVAP]-1659892810545
GPR[SPVATF]-1659892810545
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892812853
GPR[EPVS]-1659892812853
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),input);
return input.parse(this);

========
MM Copying to MM
GPR[SPVS]-1659892812854
GPR[SPVAP]-1659892812854
GPR[EPVAP]-1659892814213
GPR[EPVS]-1659892814213
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
names.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892814215
GPR[SPVAP]-1659892814215
GPR[EPVAP]-1659892815543
GPR[EPVS]-1659892815543
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
nameDefinitionMultimap.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892815545
GPR[SPVAP]-1659892815545
GPR[EPVAP]-1659892816863
GPR[EPVS]-1659892816863
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),new ExternalNameOnlyDefinition(externsRoot));
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892816864
GPR[SPVAP]-1659892816864
GPR[EPVAP]-1659892818221
GPR[EPVS]-1659892818221
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
definitionSiteMap.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892818222
GPR[SPVAP]-1659892818222
GPR[EPVAP]-1659892819554
GPR[EPVS]-1659892819554
========
if(externsRoot==null){
return false;
}
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892819556
GPR[SPVAP]-1659892819556
GPR[EPVAP]-1659892820915
GPR[EPVS]-1659892820915
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
anonFns.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892820917
GPR[SPVAP]-1659892820917
GPR[EPVAP]-1659892822245
GPR[EPVS]-1659892822245
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),externsRoot);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892822247
GPR[SPVAP]-1659892822247
GPR[EPVAP]-1659892823588
GPR[EPVS]-1659892823588
========
if(externsRoot==null){
return ;
}
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892823590
GPR[SPVAP]-1659892823590
GPR[EPVAP]-1659892824929
GPR[EPVS]-1659892824929
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),parseConfiguration(js));
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892824931
GPR[SPVAP]-1659892824931
GPR[EPVAP]-1659892826273
GPR[EPVS]-1659892826273
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),config.name);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892826274
GPR[SPVAP]-1659892826274
GPR[EPVAP]-1659892827653
GPR[EPVS]-1659892827653
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
if(currentPassName.equals(js)){
return ;
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892827655
GPR[SPVAP]-1659892827655
GPR[EPVAP]-1659892828997
GPR[EPVS]-1659892828997
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
scopeUpRefMap.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892829000
GPR[SPVAP]-1659892829000
GPR[EPVAP]-1659892830334
GPR[EPVS]-1659892830334
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),var.name);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892830336
GPR[SPVAP]-1659892830336
GPR[EPVAP]-1659892831665
GPR[EPVS]-1659892831665
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
reachingDef.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892831667
GPR[SPVAP]-1659892831667
GPR[EPVAP]-1659892833024
GPR[EPVS]-1659892833024
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
assignments.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892833026
GPR[SPVAP]-1659892833026
GPR[EPVAP]-1659892834372
GPR[EPVS]-1659892834372
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
properties.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892834374
GPR[SPVAP]-1659892834374
GPR[EPVAP]-1659892835713
GPR[EPVS]-1659892835713
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
mappedPaths.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892835716
GPR[SPVAP]-1659892835716
GPR[EPVAP]-1659892837082
GPR[EPVS]-1659892837082
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),js);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892837083
GPR[SPVAP]-1659892837083
GPR[EPVAP]-1659892838415
GPR[EPVS]-1659892838415
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),Annotation.NOT_IMPLEMENTED);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892838417
GPR[SPVAP]-1659892838417
GPR[EPVAP]-1659892839738
GPR[EPVS]-1659892839738
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName!=null){
inputsByName=Maps.newHashMap();
}
nameDefinitionMultimap.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892839741
GPR[SPVAP]-1659892839741
GPR[EPVAP]-1659892841122
GPR[EPVS]-1659892841122
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),toShadow.oldName);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892841124
GPR[SPVAP]-1659892841124
GPR[EPVAP]-1659892842469
GPR[EPVS]-1659892842469
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),new Function(externsRoot));
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892842471
GPR[SPVAP]-1659892842471
GPR[EPVAP]-1659892843824
GPR[EPVS]-1659892843824
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),new Callsite(externsRoot));
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892843826
GPR[SPVAP]-1659892843826
GPR[EPVAP]-1659892845169
GPR[EPVS]-1659892845169
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
hasRegExpGlobalReferences=false;
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892845171
GPR[SPVAP]-1659892845171
GPR[EPVAP]-1659892848077
GPR[SPVATF]-1659892848077
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892850389
GPR[EPVS]-1659892850389
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
throwsDescriptions.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892850391
GPR[SPVAP]-1659892850391
GPR[EPVAP]-1659892851710
GPR[EPVS]-1659892851710
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
knownLocals.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892851712
GPR[SPVAP]-1659892851712
GPR[EPVAP]-1659892853049
GPR[EPVS]-1659892853049
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
if(hasOwnDeclaredProperty(externExports)){
return false;
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892853051
GPR[SPVAP]-1659892853051
GPR[EPVAP]-1659892854380
GPR[EPVS]-1659892854380
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
externalNoShadowVariableNames.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892854382
GPR[SPVAP]-1659892854382
GPR[EPVAP]-1659892855724
GPR[EPVS]-1659892855724
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),p.newName);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892855726
GPR[SPVAP]-1659892855726
GPR[EPVAP]-1659892857070
GPR[EPVS]-1659892857070
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
mayUseMap.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892857072
GPR[SPVAP]-1659892857072
GPR[EPVAP]-1659892858404
GPR[EPVS]-1659892858404
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),colCount);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892858406
GPR[SPVAP]-1659892858406
GPR[EPVAP]-1659892859739
GPR[EPVS]-1659892859739
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
refNodes.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892859741
GPR[SPVAP]-1659892859741
GPR[EPVAP]-1659892861085
GPR[EPVS]-1659892861085
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(affinityGraph==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892861087
GPR[SPVAP]-1659892861087
GPR[EPVAP]-1659892862432
GPR[EPVS]-1659892862432
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
externalNames.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892862434
GPR[SPVAP]-1659892862434
GPR[EPVAP]-1659892863773
GPR[EPVS]-1659892863773
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
parameters.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892863775
GPR[SPVAP]-1659892863775
GPR[EPVAP]-1659892865116
GPR[EPVS]-1659892865116
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
localBleedingFunctions.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892865119
GPR[SPVAP]-1659892865119
GPR[EPVAP]-1659892866444
GPR[EPVS]-1659892866444
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
localBleedingFunctionsPerScope.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892866446
GPR[SPVAP]-1659892866446
GPR[EPVAP]-1659892867758
GPR[EPVS]-1659892867758
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),new NameInfo(externExports));
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892867760
GPR[SPVAP]-1659892867760
GPR[EPVAP]-1659892869128
GPR[EPVS]-1659892869128
========
if(bestShadow.count<localAssignment.count){
continue;
}
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892869130
GPR[SPVAP]-1659892869130
GPR[EPVAP]-1659892870472
GPR[EPVS]-1659892870472
========
if(colCount!=-1){
return false;
}
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892870474
GPR[SPVAP]-1659892870474
GPR[EPVAP]-1659892871796
GPR[EPVS]-1659892871796
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
if(getDefinitionsReferencedAt(externsRoot)==null){
return ;
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892871797
GPR[SPVAP]-1659892871797
GPR[EPVAP]-1659892873123
GPR[EPVS]-1659892873123
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==Token.NAME){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892873125
GPR[SPVAP]-1659892873125
GPR[EPVAP]-1659892874481
GPR[EPVS]-1659892874481
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
if(!isPropertyAssignmentToName(externsRoot.getNext())){
continue;
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892874482
GPR[SPVAP]-1659892874483
GPR[EPVAP]-1659892875822
GPR[EPVS]-1659892875822
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(currentPassName)){
return false;
}
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892875824
GPR[SPVAP]-1659892875824
GPR[EPVAP]-1659892877159
GPR[EPVS]-1659892877159
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
if(!input.contains("%s")){
throw new FlagUsageException("No %s placeholder in module wrapper: \'"+wrapper);
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892877161
GPR[SPVAP]-1659892877161
GPR[EPVAP]-1659892878487
GPR[EPVS]-1659892878487
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
globalNames.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892878489
GPR[SPVAP]-1659892878489
GPR[EPVAP]-1659892879803
GPR[EPVS]-1659892879804
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
nameMap.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892879805
GPR[SPVAP]-1659892879805
GPR[EPVAP]-1659892881145
GPR[EPVS]-1659892881145
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),new MessageLocation(currentPassName,externsRoot.getLineno()));
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892881147
GPR[SPVAP]-1659892881147
GPR[EPVAP]-1659892882517
GPR[EPVS]-1659892882517
========
current.renameMap.put(externsRoot.getFirstChild().getString(),new LabelInfo(colCount));
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892882519
GPR[SPVAP]-1659892882519
GPR[EPVAP]-1659892883848
GPR[EPVS]-1659892883848
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
state.cssNames==null?null:inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892883850
GPR[SPVAP]-1659892883850
GPR[EPVAP]-1659892884940
GPR[EPVS]-1659892884940
========
this.externExports=state.idGeneratorMap;
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892884942
GPR[SPVAP]-1659892884942
GPR[EPVAP]-1659892886279
GPR[EPVS]-1659892886279
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
props.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892886281
GPR[SPVAP]-1659892886281
GPR[EPVAP]-1659892887612
GPR[EPVS]-1659892887612
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
if(externsRoot.getType()!=Token.FUNCTION){
return ;
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892887614
GPR[SPVAP]-1659892887614
GPR[EPVAP]-1659892888990
GPR[EPVS]-1659892888990
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(JSSourceFile.fromCode(" [testcode] ",js));
if(inputsByName==null){
inputsByName=Maps.newHashMap();
}
if(colCount<0){
return ;
}
inputsByName.put(input.getName(),input);
return input.getAstRoot(this);

========
MM Copying to MM
GPR[SPVS]-1659892888991
GPR[SPVAP]-1659892888991
GPR[EPVAP]-1659892890320
GPR[EPVS]-1659892890320
GPR[ESUN]-1659892890321
GPR[SSUN]-1659892890321
com.google.javascript.jscomp.Compiler,1244
GPR[ESUN]-1659892890871
GPR[SSUN]-1659892890871
com.google.javascript.jscomp.Compiler,1246
GPR[ESUN]-1659892891059
GPR[SSUN]-1659892891059
com.google.javascript.jscomp.Compiler,1249
GPR[ESUN]-1659892891259
GPR[SSUN]-1659892891259
com.google.javascript.jscomp.Compiler,1250
GPR[ESUN]-1659892891445
GPR[SSUN]-1659892891445
com.google.javascript.jscomp.CodeGenerator,944
Find no block!
GPR[SSUN]-1659892891634
com.google.javascript.jscomp.CodeGenerator,1034
========
if(outputCharsetEncoder.isWhitespace(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892893516
GPR[SPVAP]-1659892893516
GPR[EPVAP]-1659892896303
GPR[EPVS]-1659892896303
========
if(outputCharsetEncoder.canEncode(c)){
b.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892896304
GPR[SPVAP]-1659892896304
GPR[EPVAP]-1659892898257
GPR[EPVS]-1659892898257
========
if(prototypeNames.canEncode(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892898259
GPR[SPVAP]-1659892898259
GPR[EPVAP]-1659892900204
GPR[EPVS]-1659892900204
========
if(outputCharsetEncoder.charAt(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892900205
GPR[SPVAP]-1659892900205
GPR[EPVAP]-1659892902151
GPR[EPVS]-1659892902151
========
maybeEndStatement();
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892902153
GPR[SPVAP]-1659892902153
GPR[EPVAP]-1659892904161
GPR[EPVS]-1659892904161
========
if((isWordChar(c)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892904163
GPR[SPVAP]-1659892904163
GPR[EPVAP]-1659892906076
GPR[EPVS]-1659892906076
========
append(START_COMMENT);
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892906078
GPR[SPVAP]-1659892906078
GPR[EPVAP]-1659892908016
GPR[EPVS]-1659892908016
========
if(usedHashedAliases.canEncode(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892908017
GPR[SPVAP]-1659892908017
GPR[EPVAP]-1659892909982
GPR[EPVS]-1659892909982
========
sb.append('_');
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892909984
GPR[SPVAP]-1659892909984
GPR[EPVAP]-1659892918441
GPR[SPVATF]-1659892918441
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892920778
GPR[EPVS]-1659892920778
========
if(outputCharsetEncoder.canEncode(c)){
out.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892920780
GPR[SPVAP]-1659892920780
GPR[EPVAP]-1659892922047
GPR[EPVS]-1659892922048
========
if(outputCharsetEncoder.canEncode(c)){
new StringBuilder().append(" - FUNCTIONS: ");
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892922049
GPR[SPVAP]-1659892922049
GPR[EPVAP]-1659892924772
GPR[SPVATF]-1659892924772
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892927104
GPR[EPVS]-1659892927104
========
if(outputCharsetEncoder.canEncode(c)){
message.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892927105
GPR[SPVAP]-1659892927105
GPR[EPVAP]-1659892928362
GPR[EPVS]-1659892928362
========
if(outputCharsetEncoder.isSupplementaryCodePoint(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892928364
GPR[SPVAP]-1659892928364
GPR[EPVAP]-1659892929613
GPR[EPVS]-1659892929613
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
return ;
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892929614
GPR[SPVAP]-1659892929614
GPR[EPVAP]-1659892930868
GPR[EPVS]-1659892930868
========
if(outputCharsetEncoder.isSupplementaryCodePoint(c)){
sb.append(c);
}else {
return ;
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892930870
GPR[SPVAP]-1659892930870
GPR[EPVAP]-1659892932117
GPR[EPVS]-1659892932117
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892932119
GPR[SPVAP]-1659892932119
GPR[EPVAP]-1659892933350
GPR[EPVS]-1659892933350
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892933352
GPR[SPVAP]-1659892933352
GPR[EPVAP]-1659892936084
GPR[SPVATF]-1659892936085
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892938402
GPR[EPVS]-1659892938402
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892938404
GPR[SPVAP]-1659892938404
GPR[EPVAP]-1659892941062
GPR[SPVATF]-1659892941062
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892943375
GPR[EPVS]-1659892943375
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892943377
GPR[SPVAP]-1659892943377
GPR[EPVAP]-1659892946041
GPR[SPVATF]-1659892946041
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892948377
GPR[EPVS]-1659892948377
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892948378
GPR[SPVAP]-1659892948378
GPR[EPVAP]-1659892951037
GPR[SPVATF]-1659892951037
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892953352
GPR[EPVS]-1659892953352
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892953354
GPR[SPVAP]-1659892953354
GPR[EPVAP]-1659892956016
GPR[SPVATF]-1659892956016
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892958323
GPR[EPVS]-1659892958323
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892958324
GPR[SPVAP]-1659892958324
GPR[EPVAP]-1659892960993
GPR[SPVATF]-1659892960993
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892963309
GPR[EPVS]-1659892963309
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892963310
GPR[SPVAP]-1659892963310
GPR[EPVAP]-1659892966044
GPR[SPVATF]-1659892966044
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892968337
GPR[EPVS]-1659892968337
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892968339
GPR[SPVAP]-1659892968339
GPR[EPVAP]-1659892970996
GPR[SPVATF]-1659892970996
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892973302
GPR[EPVS]-1659892973302
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892973303
GPR[SPVAP]-1659892973303
GPR[EPVAP]-1659892976609
GPR[SPVATF]-1659892976609
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892979110
GPR[EPVS]-1659892979110
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892979111
GPR[SPVAP]-1659892979111
GPR[EPVAP]-1659892981821
GPR[SPVATF]-1659892981821
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892984308
GPR[EPVS]-1659892984308
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892984310
GPR[SPVAP]-1659892984310
GPR[EPVAP]-1659892987112
GPR[SPVATF]-1659892987112
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892989644
GPR[EPVS]-1659892989644
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892989646
GPR[SPVAP]-1659892989646
GPR[EPVAP]-1659892992359
GPR[SPVATF]-1659892992359
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659892994876
GPR[EPVS]-1659892994876
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659892994878
GPR[SPVAP]-1659892994878
GPR[EPVAP]-1659892997645
GPR[SPVATF]-1659892997645
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893000169
GPR[EPVS]-1659893000169
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893000170
GPR[SPVAP]-1659893000170
GPR[EPVAP]-1659893002893
GPR[SPVATF]-1659893002893
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893005389
GPR[EPVS]-1659893005389
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893005391
GPR[SPVAP]-1659893005391
GPR[EPVAP]-1659893008154
GPR[SPVATF]-1659893008154
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893015055
GPR[EPVS]-1659893015055
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893015064
GPR[SPVAP]-1659893015064
GPR[EPVAP]-1659893020221
GPR[SPVATF]-1659893020221
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893022623
GPR[EPVS]-1659893022623
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893022624
GPR[SPVAP]-1659893022624
GPR[EPVAP]-1659893025316
GPR[SPVATF]-1659893025316
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893027681
GPR[EPVS]-1659893027681
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893027683
GPR[SPVAP]-1659893027683
GPR[EPVAP]-1659893030394
GPR[SPVATF]-1659893030394
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893032873
GPR[EPVS]-1659893032873
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893032875
GPR[SPVAP]-1659893032875
GPR[EPVAP]-1659893035615
GPR[SPVATF]-1659893035615
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893038168
GPR[EPVS]-1659893038168
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893038169
GPR[SPVAP]-1659893038169
GPR[EPVAP]-1659893040901
GPR[SPVATF]-1659893040901
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893043397
GPR[EPVS]-1659893043397
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893043399
GPR[SPVAP]-1659893043399
GPR[EPVAP]-1659893046173
GPR[SPVATF]-1659893046173
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893048637
GPR[EPVS]-1659893048637
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893048639
GPR[SPVAP]-1659893048639
GPR[EPVAP]-1659893051386
GPR[SPVATF]-1659893051386
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893053872
GPR[EPVS]-1659893053872
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893053873
GPR[SPVAP]-1659893053873
GPR[EPVAP]-1659893056625
GPR[SPVATF]-1659893056625
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893059169
GPR[EPVS]-1659893059169
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893059170
GPR[SPVAP]-1659893059170
GPR[EPVAP]-1659893061972
GPR[SPVATF]-1659893061972
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893068552
GPR[EPVS]-1659893068552
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893068562
GPR[SPVAP]-1659893068562
GPR[EPVAP]-1659893073358
GPR[SPVATF]-1659893073358
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893076224
GPR[EPVS]-1659893076224
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893076226
GPR[SPVAP]-1659893076226
GPR[EPVAP]-1659893078956
GPR[SPVATF]-1659893078956
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893082593
GPR[EPVS]-1659893082593
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893082595
GPR[SPVAP]-1659893082595
GPR[EPVAP]-1659893085278
GPR[SPVATF]-1659893085279
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893087617
GPR[EPVS]-1659893087617
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893087618
GPR[SPVAP]-1659893087618
GPR[EPVAP]-1659893090354
GPR[SPVATF]-1659893090354
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893092796
GPR[EPVS]-1659893092796
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893092799
GPR[SPVAP]-1659893092799
GPR[EPVAP]-1659893095505
GPR[SPVATF]-1659893095505
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893098029
GPR[EPVS]-1659893098029
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893098031
GPR[SPVAP]-1659893098031
GPR[EPVAP]-1659893100819
GPR[SPVATF]-1659893100819
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893103366
GPR[EPVS]-1659893103366
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893103368
GPR[SPVAP]-1659893103368
GPR[EPVAP]-1659893106100
GPR[SPVATF]-1659893106100
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893108652
GPR[EPVS]-1659893108652
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893108654
GPR[SPVAP]-1659893108654
GPR[EPVAP]-1659893111399
GPR[SPVATF]-1659893111399
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893113912
GPR[EPVS]-1659893113912
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893113913
GPR[SPVAP]-1659893113913
GPR[EPVAP]-1659893117448
GPR[SPVATF]-1659893117448
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893123213
GPR[EPVS]-1659893123213
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893123219
GPR[SPVAP]-1659893123219
GPR[EPVAP]-1659893127154
GPR[SPVATF]-1659893127154
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893129733
GPR[EPVS]-1659893129733
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893129735
GPR[SPVAP]-1659893129735
GPR[EPVAP]-1659893132462
GPR[SPVATF]-1659893132462
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893135732
GPR[EPVS]-1659893135732
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893135734
GPR[SPVAP]-1659893135734
GPR[EPVAP]-1659893138442
GPR[SPVATF]-1659893138442
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893140863
GPR[EPVS]-1659893140863
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893140865
GPR[SPVAP]-1659893140865
GPR[EPVAP]-1659893144126
GPR[SPVATF]-1659893144126
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893146665
GPR[EPVS]-1659893146665
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893146667
GPR[SPVAP]-1659893146667
GPR[EPVAP]-1659893150342
GPR[SPVATF]-1659893150342
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893152869
GPR[EPVS]-1659893152869
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893152872
GPR[SPVAP]-1659893152872
GPR[EPVAP]-1659893156159
GPR[SPVATF]-1659893156159
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893158745
GPR[EPVS]-1659893158745
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893158747
GPR[SPVAP]-1659893158747
GPR[EPVAP]-1659893162161
GPR[SPVATF]-1659893162161
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893165121
GPR[EPVS]-1659893165121
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893165132
GPR[SPVAP]-1659893165132
GPR[EPVAP]-1659893168137
GPR[SPVATF]-1659893168137
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893171901
GPR[EPVS]-1659893171901
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893171903
GPR[SPVAP]-1659893171903
GPR[EPVAP]-1659893174657
GPR[SPVATF]-1659893174657
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893178164
GPR[EPVS]-1659893178164
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893178166
GPR[SPVAP]-1659893178166
GPR[EPVAP]-1659893180857
GPR[SPVATF]-1659893180857
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893183232
GPR[EPVS]-1659893183232
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893183234
GPR[SPVAP]-1659893183234
GPR[EPVAP]-1659893186223
GPR[SPVATF]-1659893186223
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893188744
GPR[EPVS]-1659893188744
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893188745
GPR[SPVAP]-1659893188745
GPR[EPVAP]-1659893192816
GPR[SPVATF]-1659893192816
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893195286
GPR[EPVS]-1659893195286
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893195287
GPR[SPVAP]-1659893195287
GPR[EPVAP]-1659893198563
GPR[SPVATF]-1659893198563
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893201092
GPR[EPVS]-1659893201092
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893201094
GPR[SPVAP]-1659893201094
GPR[EPVAP]-1659893204469
GPR[SPVATF]-1659893204469
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893206986
GPR[EPVS]-1659893206986
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893206990
GPR[SPVAP]-1659893206990
GPR[EPVAP]-1659893210228
GPR[SPVATF]-1659893210228
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893212544
GPR[EPVS]-1659893212544
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893212545
GPR[SPVAP]-1659893212545
GPR[EPVAP]-1659893215257
GPR[SPVATF]-1659893215257
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893217797
GPR[EPVS]-1659893217797
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893217798
GPR[SPVAP]-1659893217798
GPR[EPVAP]-1659893220560
GPR[SPVATF]-1659893220560
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893223091
GPR[EPVS]-1659893223091
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893223092
GPR[SPVAP]-1659893223092
GPR[EPVAP]-1659893225837
GPR[SPVATF]-1659893225837
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893228318
GPR[EPVS]-1659893228318
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893228319
GPR[SPVAP]-1659893228319
GPR[EPVAP]-1659893231062
GPR[SPVATF]-1659893231062
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893233574
GPR[EPVS]-1659893233574
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893233575
GPR[SPVAP]-1659893233575
GPR[EPVAP]-1659893236381
GPR[SPVATF]-1659893236381
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893238858
GPR[EPVS]-1659893238858
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893238860
GPR[SPVAP]-1659893238860
GPR[EPVAP]-1659893241603
GPR[SPVATF]-1659893241603
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893246254
GPR[EPVS]-1659893246254
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893246262
GPR[SPVAP]-1659893246262
GPR[EPVAP]-1659893252154
GPR[SPVATF]-1659893252154
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893257481
GPR[EPVS]-1659893257481
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893257483
GPR[SPVAP]-1659893257483
GPR[EPVAP]-1659893260472
GPR[SPVATF]-1659893260472
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893263256
GPR[EPVS]-1659893263256
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893263258
GPR[SPVAP]-1659893263258
GPR[EPVAP]-1659893266571
GPR[SPVATF]-1659893266571
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893269257
GPR[EPVS]-1659893269257
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893269258
GPR[SPVAP]-1659893269258
GPR[EPVAP]-1659893272696
GPR[SPVATF]-1659893272696
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893275205
GPR[EPVS]-1659893275205
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893275207
GPR[SPVAP]-1659893275207
GPR[EPVAP]-1659893278887
GPR[SPVATF]-1659893278887
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893281222
GPR[EPVS]-1659893281222
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893281223
GPR[SPVAP]-1659893281223
GPR[EPVAP]-1659893283908
GPR[SPVATF]-1659893283908
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893286410
GPR[EPVS]-1659893286410
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893286412
GPR[SPVAP]-1659893286412
GPR[EPVAP]-1659893289442
GPR[SPVATF]-1659893289442
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893291951
GPR[EPVS]-1659893291951
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893291952
GPR[SPVAP]-1659893291952
GPR[EPVAP]-1659893295540
GPR[SPVATF]-1659893295540
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893299026
GPR[EPVS]-1659893299026
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893299028
GPR[SPVAP]-1659893299028
GPR[EPVAP]-1659893301802
GPR[SPVATF]-1659893301802
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893305316
GPR[EPVS]-1659893305316
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893305318
GPR[SPVAP]-1659893305318
GPR[EPVAP]-1659893308020
GPR[SPVATF]-1659893308020
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893310504
GPR[EPVS]-1659893310504
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893310506
GPR[SPVAP]-1659893310506
GPR[EPVAP]-1659893313256
GPR[SPVATF]-1659893313256
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893316500
GPR[EPVS]-1659893316500
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893316501
GPR[SPVAP]-1659893316501
GPR[EPVAP]-1659893319976
GPR[SPVATF]-1659893319976
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893322583
GPR[EPVS]-1659893322583
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893322584
GPR[SPVAP]-1659893322584
GPR[EPVAP]-1659893326204
GPR[SPVATF]-1659893326204
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893328733
GPR[EPVS]-1659893328733
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893328735
GPR[SPVAP]-1659893328735
GPR[EPVAP]-1659893331794
GPR[SPVATF]-1659893331794
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893334330
GPR[EPVS]-1659893334330
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893334332
GPR[SPVAP]-1659893334332
GPR[EPVAP]-1659893337586
GPR[SPVATF]-1659893337586
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893340053
GPR[EPVS]-1659893340053
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893340054
GPR[SPVAP]-1659893340054
GPR[EPVAP]-1659893343249
GPR[SPVATF]-1659893343249
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893345576
GPR[EPVS]-1659893345576
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893345578
GPR[SPVAP]-1659893345578
GPR[EPVAP]-1659893348421
GPR[SPVATF]-1659893348421
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893350794
GPR[EPVS]-1659893350794
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893350796
GPR[SPVAP]-1659893350796
GPR[EPVAP]-1659893353538
GPR[SPVATF]-1659893353538
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893356038
GPR[EPVS]-1659893356038
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893356043
GPR[SPVAP]-1659893356043
GPR[EPVAP]-1659893359414
GPR[SPVATF]-1659893359414
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893363222
GPR[EPVS]-1659893363222
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893363223
GPR[SPVAP]-1659893363223
GPR[EPVAP]-1659893365954
GPR[SPVATF]-1659893365955
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893369401
GPR[EPVS]-1659893369401
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893369403
GPR[SPVAP]-1659893369403
GPR[EPVAP]-1659893372220
GPR[SPVATF]-1659893372220
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893375282
GPR[EPVS]-1659893375282
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893375284
GPR[SPVAP]-1659893375284
GPR[EPVAP]-1659893378729
GPR[SPVATF]-1659893378729
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893381313
GPR[EPVS]-1659893381313
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893381315
GPR[SPVAP]-1659893381315
GPR[EPVAP]-1659893384517
GPR[SPVATF]-1659893384517
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893386876
GPR[EPVS]-1659893386876
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893386878
GPR[SPVAP]-1659893386878
GPR[EPVAP]-1659893389578
GPR[SPVATF]-1659893389578
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893392085
GPR[EPVS]-1659893392085
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893392086
GPR[SPVAP]-1659893392086
GPR[EPVAP]-1659893395696
GPR[SPVATF]-1659893395696
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893398204
GPR[EPVS]-1659893398204
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893398206
GPR[SPVAP]-1659893398206
GPR[EPVAP]-1659893401298
GPR[SPVATF]-1659893401299
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893403775
GPR[EPVS]-1659893403775
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893403776
GPR[SPVAP]-1659893403776
GPR[EPVAP]-1659893407389
GPR[SPVATF]-1659893407389
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893410160
GPR[EPVS]-1659893410160
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893410162
GPR[SPVAP]-1659893410162
GPR[EPVAP]-1659893412914
GPR[SPVATF]-1659893412914
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893416902
GPR[EPVS]-1659893416902
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893416903
GPR[SPVAP]-1659893416903
GPR[EPVAP]-1659893419722
GPR[SPVATF]-1659893419722
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893422911
GPR[EPVS]-1659893422911
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893422912
GPR[SPVAP]-1659893422912
GPR[EPVAP]-1659893425943
GPR[SPVATF]-1659893425943
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893428669
GPR[EPVS]-1659893428669
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893428670
GPR[SPVAP]-1659893428670
GPR[EPVAP]-1659893432611
GPR[SPVATF]-1659893432611
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893435093
GPR[EPVS]-1659893435093
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893435095
GPR[SPVAP]-1659893435095
GPR[EPVAP]-1659893438089
GPR[SPVATF]-1659893438089
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893440520
GPR[EPVS]-1659893440520
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893440522
GPR[SPVAP]-1659893440522
GPR[EPVAP]-1659893443895
GPR[SPVATF]-1659893443895
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893446209
GPR[EPVS]-1659893446209
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893446210
GPR[SPVAP]-1659893446210
GPR[EPVAP]-1659893448880
GPR[SPVATF]-1659893448880
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893451372
GPR[EPVS]-1659893451372
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893451375
GPR[SPVAP]-1659893451375
GPR[EPVAP]-1659893454693
GPR[SPVATF]-1659893454693
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893457204
GPR[EPVS]-1659893457204
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893457206
GPR[SPVAP]-1659893457206
GPR[EPVAP]-1659893460517
GPR[SPVATF]-1659893460517
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893464234
GPR[EPVS]-1659893464234
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893464245
GPR[SPVAP]-1659893464245
GPR[EPVAP]-1659893466982
GPR[SPVATF]-1659893466982
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893470019
GPR[EPVS]-1659893470019
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893470021
GPR[SPVAP]-1659893470021
GPR[EPVAP]-1659893472756
GPR[SPVATF]-1659893472756
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893476221
GPR[EPVS]-1659893476221
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>\n");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893476223
GPR[SPVAP]-1659893476223
GPR[EPVAP]-1659893479103
GPR[SPVATF]-1659893479103
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893481840
GPR[EPVS]-1659893481840
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893481842
GPR[SPVAP]-1659893481842
GPR[EPVAP]-1659893485015
GPR[SPVATF]-1659893485015
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893487617
GPR[EPVS]-1659893487617
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893487619
GPR[SPVAP]-1659893487619
GPR[EPVAP]-1659893490262
GPR[SPVATF]-1659893490262
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893492749
GPR[EPVS]-1659893492749
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893492751
GPR[SPVAP]-1659893492751
GPR[EPVAP]-1659893496138
GPR[SPVATF]-1659893496138
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893498527
GPR[EPVS]-1659893498527
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893498528
GPR[SPVAP]-1659893498528
GPR[EPVAP]-1659893501590
GPR[SPVATF]-1659893501590
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893504086
GPR[EPVS]-1659893504086
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<li>REFERS TO:<br>\n");
sb.append("<ul>");
sb.append("</ul>\n");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893504088
GPR[SPVAP]-1659893504088
GPR[EPVAP]-1659893507596
GPR[SPVATF]-1659893507596
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893510119
GPR[EPVS]-1659893510119
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893510121
GPR[SPVAP]-1659893510121
GPR[EPVAP]-1659893513601
GPR[SPVATF]-1659893513601
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893516112
GPR[EPVS]-1659893516112
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893516114
GPR[SPVAP]-1659893516114
GPR[EPVAP]-1659893519449
GPR[SPVATF]-1659893519449
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893523357
GPR[EPVS]-1659893523357
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893523359
GPR[SPVAP]-1659893523359
GPR[EPVAP]-1659893526123
GPR[SPVATF]-1659893526123
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893529478
GPR[EPVS]-1659893529478
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893529479
GPR[SPVAP]-1659893529479
GPR[EPVAP]-1659893532230
GPR[SPVATF]-1659893532230
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893535360
GPR[EPVS]-1659893535360
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893535361
GPR[SPVAP]-1659893535361
GPR[EPVAP]-1659893538008
GPR[SPVATF]-1659893538008
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893540318
GPR[EPVS]-1659893540318
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
builder.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893540320
GPR[SPVAP]-1659893540320
GPR[EPVAP]-1659893541609
GPR[EPVS]-1659893541609
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
builder.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893541623
GPR[SPVAP]-1659893541623
GPR[EPVAP]-1659893542925
GPR[EPVS]-1659893542925
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893542931
GPR[SPVAP]-1659893542931
GPR[EPVAP]-1659893544295
GPR[EPVS]-1659893544295
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893544297
GPR[SPVAP]-1659893544297
GPR[EPVAP]-1659893545578
GPR[EPVS]-1659893545578
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893545580
GPR[SPVAP]-1659893545580
GPR[EPVAP]-1659893546856
GPR[EPVS]-1659893546856
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893546857
GPR[SPVAP]-1659893546857
GPR[EPVAP]-1659893548225
GPR[EPVS]-1659893548225
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893548233
GPR[SPVAP]-1659893548233
GPR[EPVAP]-1659893550103
GPR[EPVS]-1659893550103
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893550105
GPR[SPVAP]-1659893550105
GPR[EPVAP]-1659893552929
GPR[SPVATF]-1659893552929
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893556389
GPR[EPVS]-1659893556389
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893556391
GPR[SPVAP]-1659893556391
GPR[EPVAP]-1659893559518
GPR[SPVATF]-1659893559518
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893562258
GPR[EPVS]-1659893562258
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893562260
GPR[SPVAP]-1659893562260
GPR[EPVAP]-1659893565567
GPR[SPVATF]-1659893565567
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893568047
GPR[EPVS]-1659893568047
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893568049
GPR[SPVAP]-1659893568049
GPR[EPVAP]-1659893571453
GPR[SPVATF]-1659893571453
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893574005
GPR[EPVS]-1659893574005
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893574007
GPR[SPVAP]-1659893574007
GPR[EPVAP]-1659893577392
GPR[SPVATF]-1659893577392
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893579713
GPR[EPVS]-1659893579713
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893579714
GPR[SPVAP]-1659893579714
GPR[EPVAP]-1659893582374
GPR[SPVATF]-1659893582374
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893584729
GPR[EPVS]-1659893584729
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893584730
GPR[SPVAP]-1659893584730
GPR[EPVAP]-1659893587473
GPR[SPVATF]-1659893587473
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893590686
GPR[EPVS]-1659893590686
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893590692
GPR[SPVAP]-1659893590692
GPR[EPVAP]-1659893593622
GPR[SPVATF]-1659893593622
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893596750
GPR[EPVS]-1659893596750
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893596752
GPR[SPVAP]-1659893596752
GPR[EPVAP]-1659893599477
GPR[SPVATF]-1659893599477
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893602825
GPR[EPVS]-1659893602825
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893602827
GPR[SPVAP]-1659893602827
GPR[EPVAP]-1659893605583
GPR[SPVATF]-1659893605583
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893608845
GPR[EPVS]-1659893608845
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893608846
GPR[SPVAP]-1659893608846
GPR[EPVAP]-1659893611947
GPR[SPVATF]-1659893611947
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893614715
GPR[EPVS]-1659893614715
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893614716
GPR[SPVAP]-1659893614716
GPR[EPVAP]-1659893618278
GPR[SPVATF]-1659893618278
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893620630
GPR[EPVS]-1659893620630
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893620631
GPR[SPVAP]-1659893620631
GPR[EPVAP]-1659893623373
GPR[SPVATF]-1659893623373
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893625881
GPR[EPVS]-1659893625881
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893625884
GPR[SPVAP]-1659893625884
GPR[EPVAP]-1659893629403
GPR[SPVATF]-1659893629403
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893631861
GPR[EPVS]-1659893631861
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893631863
GPR[SPVAP]-1659893631863
GPR[EPVAP]-1659893635297
GPR[SPVATF]-1659893635297
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893637787
GPR[EPVS]-1659893637787
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893637789
GPR[SPVAP]-1659893637789
GPR[EPVAP]-1659893641126
GPR[SPVATF]-1659893641126
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893645108
GPR[EPVS]-1659893645108
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893645109
GPR[SPVAP]-1659893645109
GPR[EPVAP]-1659893647873
GPR[SPVATF]-1659893647873
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893651409
GPR[EPVS]-1659893651409
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893651411
GPR[SPVAP]-1659893651411
GPR[EPVAP]-1659893654509
GPR[SPVATF]-1659893654509
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893657272
GPR[EPVS]-1659893657272
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893657274
GPR[SPVAP]-1659893657274
GPR[EPVAP]-1659893661187
GPR[SPVATF]-1659893661187
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893663531
GPR[EPVS]-1659893663531
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893663532
GPR[SPVAP]-1659893663532
GPR[EPVAP]-1659893666235
GPR[SPVATF]-1659893666235
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893668766
GPR[EPVS]-1659893668766
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
builder.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893668767
GPR[SPVAP]-1659893668767
GPR[EPVAP]-1659893670061
GPR[EPVS]-1659893670061
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893670062
GPR[SPVAP]-1659893670062
GPR[EPVAP]-1659893671324
GPR[EPVS]-1659893671324
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893671326
GPR[SPVAP]-1659893671326
GPR[EPVAP]-1659893672614
GPR[EPVS]-1659893672614
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
builder.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893672615
GPR[SPVAP]-1659893672615
GPR[EPVAP]-1659893673887
GPR[EPVS]-1659893673887
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
builder.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893673888
GPR[SPVAP]-1659893673888
GPR[EPVAP]-1659893675163
GPR[EPVS]-1659893675163
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893675165
GPR[SPVAP]-1659893675165
GPR[EPVAP]-1659893676437
GPR[EPVS]-1659893676437
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893676438
GPR[SPVAP]-1659893676438
GPR[EPVAP]-1659893677760
GPR[EPVS]-1659893677760
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893677761
GPR[SPVAP]-1659893677761
GPR[EPVAP]-1659893679053
GPR[EPVS]-1659893679053
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
builder.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893679054
GPR[SPVAP]-1659893679054
GPR[EPVAP]-1659893680329
GPR[EPVS]-1659893680329
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
builder.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893680330
GPR[SPVAP]-1659893680330
GPR[EPVAP]-1659893681616
GPR[EPVS]-1659893681616
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893681617
GPR[SPVAP]-1659893681617
GPR[EPVAP]-1659893682913
GPR[EPVS]-1659893682913
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893682914
GPR[SPVAP]-1659893682914
GPR[EPVAP]-1659893684189
GPR[EPVS]-1659893684189
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893684190
GPR[SPVAP]-1659893684190
GPR[EPVAP]-1659893685460
GPR[EPVS]-1659893685460
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893685461
GPR[SPVAP]-1659893685461
GPR[EPVAP]-1659893686736
GPR[EPVS]-1659893686736
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893686738
GPR[SPVAP]-1659893686738
GPR[EPVAP]-1659893688044
GPR[EPVS]-1659893688044
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893688046
GPR[SPVAP]-1659893688046
GPR[EPVAP]-1659893689315
GPR[EPVS]-1659893689315
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893689316
GPR[SPVAP]-1659893689316
GPR[EPVAP]-1659893690588
GPR[EPVS]-1659893690588
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893690590
GPR[SPVAP]-1659893690590
GPR[EPVAP]-1659893691857
GPR[EPVS]-1659893691857
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893691858
GPR[SPVAP]-1659893691858
GPR[EPVAP]-1659893693126
GPR[EPVS]-1659893693126
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893693127
GPR[SPVAP]-1659893693127
GPR[EPVAP]-1659893694460
GPR[EPVS]-1659893694460
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893694462
GPR[SPVAP]-1659893694462
GPR[EPVAP]-1659893695849
GPR[EPVS]-1659893695849
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893695857
GPR[SPVAP]-1659893695857
GPR[EPVAP]-1659893702137
GPR[SPVATF]-1659893702137
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893707467
GPR[EPVS]-1659893707467
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893707469
GPR[SPVAP]-1659893707469
GPR[EPVAP]-1659893710196
GPR[SPVATF]-1659893710197
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893713328
GPR[EPVS]-1659893713328
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893713337
GPR[SPVAP]-1659893713337
GPR[EPVAP]-1659893716109
GPR[SPVATF]-1659893716109
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893718424
GPR[EPVS]-1659893718424
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893718425
GPR[SPVAP]-1659893718426
GPR[EPVAP]-1659893721072
GPR[SPVATF]-1659893721072
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893723545
GPR[EPVS]-1659893723545
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893723547
GPR[SPVAP]-1659893723547
GPR[EPVAP]-1659893726235
GPR[SPVATF]-1659893726235
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893729129
GPR[EPVS]-1659893729129
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893729130
GPR[SPVAP]-1659893729130
GPR[EPVAP]-1659893731853
GPR[SPVATF]-1659893731853
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893734941
GPR[EPVS]-1659893734941
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893734943
GPR[SPVAP]-1659893734943
GPR[EPVAP]-1659893737675
GPR[SPVATF]-1659893737675
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893741315
GPR[EPVS]-1659893741315
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893741317
GPR[SPVAP]-1659893741317
GPR[EPVAP]-1659893744621
GPR[SPVATF]-1659893744621
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893747398
GPR[EPVS]-1659893747398
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893747400
GPR[SPVAP]-1659893747400
GPR[EPVAP]-1659893750097
GPR[SPVATF]-1659893750097
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893752601
GPR[EPVS]-1659893752601
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893752603
GPR[SPVAP]-1659893752603
GPR[EPVAP]-1659893756384
GPR[SPVATF]-1659893756384
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893758858
GPR[EPVS]-1659893758858
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893758859
GPR[SPVAP]-1659893758859
GPR[EPVAP]-1659893761892
GPR[SPVATF]-1659893761892
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893764426
GPR[EPVS]-1659893764426
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893764427
GPR[SPVAP]-1659893764427
GPR[EPVAP]-1659893767865
GPR[SPVATF]-1659893767865
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893770382
GPR[EPVS]-1659893770382
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893770384
GPR[SPVAP]-1659893770384
GPR[EPVAP]-1659893773556
GPR[SPVATF]-1659893773556
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893777044
GPR[EPVS]-1659893777044
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893777052
GPR[SPVAP]-1659893777052
GPR[EPVAP]-1659893779888
GPR[SPVATF]-1659893779888
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893785945
GPR[EPVS]-1659893785945
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893785946
GPR[SPVAP]-1659893785946
GPR[EPVAP]-1659893789042
GPR[SPVATF]-1659893789042
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893791504
GPR[EPVS]-1659893791504
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893791506
GPR[SPVAP]-1659893791506
GPR[EPVAP]-1659893795082
GPR[SPVATF]-1659893795083
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893797592
GPR[EPVS]-1659893797592
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893797596
GPR[SPVAP]-1659893797596
GPR[EPVAP]-1659893800480
GPR[SPVATF]-1659893800480
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893803015
GPR[EPVS]-1659893803015
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893803019
GPR[SPVAP]-1659893803019
GPR[EPVAP]-1659893806018
GPR[SPVATF]-1659893806018
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893808908
GPR[EPVS]-1659893808908
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893808917
GPR[SPVAP]-1659893808917
GPR[EPVAP]-1659893812042
GPR[SPVATF]-1659893812042
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893815570
GPR[EPVS]-1659893815570
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893815571
GPR[SPVAP]-1659893815571
GPR[EPVAP]-1659893818345
GPR[SPVATF]-1659893818345
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893821980
GPR[EPVS]-1659893821980
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893821981
GPR[SPVAP]-1659893821981
GPR[EPVAP]-1659893825109
GPR[SPVATF]-1659893825109
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893827802
GPR[EPVS]-1659893827802
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893827804
GPR[SPVAP]-1659893827804
GPR[EPVAP]-1659893831179
GPR[SPVATF]-1659893831179
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893833537
GPR[EPVS]-1659893833537
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893833539
GPR[SPVAP]-1659893833539
GPR[EPVAP]-1659893836210
GPR[SPVATF]-1659893836210
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893838626
GPR[EPVS]-1659893838626
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893838627
GPR[SPVAP]-1659893838627
GPR[EPVAP]-1659893841438
GPR[SPVATF]-1659893841438
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893843868
GPR[EPVS]-1659893843868
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893843870
GPR[SPVAP]-1659893843870
GPR[EPVAP]-1659893847473
GPR[SPVATF]-1659893847473
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893849984
GPR[EPVS]-1659893849984
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893849986
GPR[SPVAP]-1659893849986
GPR[EPVAP]-1659893853471
GPR[SPVATF]-1659893853471
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893855762
GPR[EPVS]-1659893855762
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893855763
GPR[SPVAP]-1659893855763
GPR[EPVAP]-1659893858397
GPR[SPVATF]-1659893858397
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893860699
GPR[EPVS]-1659893860699
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893860700
GPR[SPVAP]-1659893860700
GPR[EPVAP]-1659893863376
GPR[SPVATF]-1659893863376
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893865708
GPR[EPVS]-1659893865708
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893865709
GPR[SPVAP]-1659893865709
GPR[EPVAP]-1659893868387
GPR[SPVATF]-1659893868388
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893870714
GPR[EPVS]-1659893870714
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893870715
GPR[SPVAP]-1659893870715
GPR[EPVAP]-1659893873386
GPR[SPVATF]-1659893873387
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893875710
GPR[EPVS]-1659893875710
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893875712
GPR[SPVAP]-1659893875712
GPR[EPVAP]-1659893878380
GPR[SPVATF]-1659893878380
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893880706
GPR[EPVS]-1659893880706
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893880707
GPR[SPVAP]-1659893880707
GPR[EPVAP]-1659893883394
GPR[SPVATF]-1659893883394
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893885710
GPR[EPVS]-1659893885710
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893885711
GPR[SPVAP]-1659893885711
GPR[EPVAP]-1659893888365
GPR[SPVATF]-1659893888365
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893890698
GPR[EPVS]-1659893890698
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893890700
GPR[SPVAP]-1659893890700
GPR[EPVAP]-1659893893357
GPR[SPVATF]-1659893893357
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893895678
GPR[EPVS]-1659893895678
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893895680
GPR[SPVAP]-1659893895680
GPR[EPVAP]-1659893898340
GPR[SPVATF]-1659893898340
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893900740
GPR[EPVS]-1659893900740
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893900741
GPR[SPVAP]-1659893900741
GPR[EPVAP]-1659893902005
GPR[EPVS]-1659893902005
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893902006
GPR[SPVAP]-1659893902006
GPR[EPVAP]-1659893903256
GPR[EPVS]-1659893903256
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
builder.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893903257
GPR[SPVAP]-1659893903257
GPR[EPVAP]-1659893904513
GPR[EPVS]-1659893904513
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
builder.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893904515
GPR[SPVAP]-1659893904515
GPR[EPVAP]-1659893905788
GPR[EPVS]-1659893905788
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893905791
GPR[SPVAP]-1659893905791
GPR[EPVAP]-1659893907039
GPR[EPVS]-1659893907039
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893907040
GPR[SPVAP]-1659893907040
GPR[EPVAP]-1659893908289
GPR[EPVS]-1659893908289
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893908290
GPR[SPVAP]-1659893908290
GPR[EPVAP]-1659893909540
GPR[EPVS]-1659893909540
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893909542
GPR[SPVAP]-1659893909542
GPR[EPVAP]-1659893910780
GPR[EPVS]-1659893910780
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893910782
GPR[SPVAP]-1659893910782
GPR[EPVAP]-1659893912048
GPR[EPVS]-1659893912048
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893912050
GPR[SPVAP]-1659893912050
GPR[EPVAP]-1659893913332
GPR[EPVS]-1659893913332
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893913334
GPR[SPVAP]-1659893913334
GPR[EPVAP]-1659893914588
GPR[EPVS]-1659893914588
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893914590
GPR[SPVAP]-1659893914590
GPR[EPVAP]-1659893915838
GPR[EPVS]-1659893915838
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
builder.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893915839
GPR[SPVAP]-1659893915839
GPR[EPVAP]-1659893917092
GPR[EPVS]-1659893917092
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
builder.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893917094
GPR[SPVAP]-1659893917094
GPR[EPVAP]-1659893918320
GPR[EPVS]-1659893918320
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
builder.append(c);
}else {
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893918321
GPR[SPVAP]-1659893918321
GPR[EPVAP]-1659893919580
GPR[EPVS]-1659893919580
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893919582
GPR[SPVAP]-1659893919582
GPR[EPVAP]-1659893920846
GPR[EPVS]-1659893920846
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893920847
GPR[SPVAP]-1659893920847
GPR[EPVAP]-1659893922106
GPR[EPVS]-1659893922106
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893922108
GPR[SPVAP]-1659893922108
GPR[EPVAP]-1659893923352
GPR[EPVS]-1659893923352
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893923354
GPR[SPVAP]-1659893923354
GPR[EPVAP]-1659893924605
GPR[EPVS]-1659893924605
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893924606
GPR[SPVAP]-1659893924606
GPR[EPVAP]-1659893925897
GPR[EPVS]-1659893925897
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893925898
GPR[SPVAP]-1659893925898
GPR[EPVAP]-1659893927179
GPR[EPVS]-1659893927179
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893927181
GPR[SPVAP]-1659893927181
GPR[EPVAP]-1659893928451
GPR[EPVS]-1659893928451
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
builder.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893928452
GPR[SPVAP]-1659893928452
GPR[EPVAP]-1659893929720
GPR[EPVS]-1659893929720
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
builder.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893929722
GPR[SPVAP]-1659893929722
GPR[EPVAP]-1659893930977
GPR[EPVS]-1659893930977
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
builder.append(c);
}else {
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893930978
GPR[SPVAP]-1659893930978
GPR[EPVAP]-1659893932239
GPR[EPVS]-1659893932239
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893932240
GPR[SPVAP]-1659893932240
GPR[EPVAP]-1659893933472
GPR[EPVS]-1659893933472
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893933473
GPR[SPVAP]-1659893933473
GPR[EPVAP]-1659893934768
GPR[EPVS]-1659893934768
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893934769
GPR[SPVAP]-1659893934769
GPR[EPVAP]-1659893936024
GPR[EPVS]-1659893936024
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893936025
GPR[SPVAP]-1659893936025
GPR[EPVAP]-1659893937316
GPR[EPVS]-1659893937316
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893937318
GPR[SPVAP]-1659893937318
GPR[EPVAP]-1659893938575
GPR[EPVS]-1659893938575
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}else {
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893938577
GPR[SPVAP]-1659893938577
GPR[EPVAP]-1659893939831
GPR[EPVS]-1659893939831
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893939833
GPR[SPVAP]-1659893939833
GPR[EPVAP]-1659893941084
GPR[EPVS]-1659893941085
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893941086
GPR[SPVAP]-1659893941086
GPR[EPVAP]-1659893942356
GPR[EPVS]-1659893942356
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893942358
GPR[SPVAP]-1659893942358
GPR[EPVAP]-1659893943593
GPR[EPVS]-1659893943593
========
if(outputCharsetEncoder.canEncode(c)){
builder.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893943594
GPR[SPVAP]-1659893943594
GPR[EPVAP]-1659893944859
GPR[EPVS]-1659893944859
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893944860
GPR[SPVAP]-1659893944860
GPR[EPVAP]-1659893947588
GPR[SPVATF]-1659893947588
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893949949
GPR[EPVS]-1659893949949
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893949950
GPR[SPVAP]-1659893949950
GPR[EPVAP]-1659893952653
GPR[SPVATF]-1659893952653
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893954989
GPR[EPVS]-1659893954989
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893954991
GPR[SPVAP]-1659893954991
GPR[EPVAP]-1659893957662
GPR[SPVATF]-1659893957662
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893959989
GPR[EPVS]-1659893959989
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893959990
GPR[SPVAP]-1659893959990
GPR[EPVAP]-1659893962659
GPR[SPVATF]-1659893962659
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893964982
GPR[EPVS]-1659893964982
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893964983
GPR[SPVAP]-1659893964983
GPR[EPVAP]-1659893967654
GPR[SPVATF]-1659893967654
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893969981
GPR[EPVS]-1659893969981
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893969983
GPR[SPVAP]-1659893969983
GPR[EPVAP]-1659893972703
GPR[SPVATF]-1659893972703
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893975073
GPR[EPVS]-1659893975073
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893975075
GPR[SPVAP]-1659893975075
GPR[EPVAP]-1659893977928
GPR[SPVATF]-1659893977928
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893980289
GPR[EPVS]-1659893980289
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893980290
GPR[SPVAP]-1659893980290
GPR[EPVAP]-1659893982956
GPR[SPVATF]-1659893982956
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893985297
GPR[EPVS]-1659893985297
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893985298
GPR[SPVAP]-1659893985298
GPR[EPVAP]-1659893987994
GPR[SPVATF]-1659893987994
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893990318
GPR[EPVS]-1659893990318
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}else {
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893990319
GPR[SPVAP]-1659893990319
GPR[EPVAP]-1659893992995
GPR[SPVATF]-1659893992995
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659893995301
GPR[EPVS]-1659893995301
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659893995302
GPR[SPVAP]-1659893995302
GPR[EPVAP]-1659893997943
GPR[SPVATF]-1659893997943
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894000261
GPR[EPVS]-1659894000261
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894000262
GPR[SPVAP]-1659894000262
GPR[EPVAP]-1659894002896
GPR[SPVATF]-1659894002896
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894005201
GPR[EPVS]-1659894005201
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894005203
GPR[SPVAP]-1659894005203
GPR[EPVAP]-1659894007884
GPR[SPVATF]-1659894007884
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894010201
GPR[EPVS]-1659894010201
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894010202
GPR[SPVAP]-1659894010202
GPR[EPVAP]-1659894012859
GPR[SPVATF]-1659894012859
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894015200
GPR[EPVS]-1659894015200
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894015202
GPR[SPVAP]-1659894015202
GPR[EPVAP]-1659894017860
GPR[SPVATF]-1659894017860
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894020217
GPR[EPVS]-1659894020217
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894020219
GPR[SPVAP]-1659894020219
GPR[EPVAP]-1659894022879
GPR[SPVATF]-1659894022879
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894025208
GPR[EPVS]-1659894025208
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894025210
GPR[SPVAP]-1659894025210
GPR[EPVAP]-1659894027865
GPR[SPVATF]-1659894027865
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894030199
GPR[EPVS]-1659894030199
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894030200
GPR[SPVAP]-1659894030200
GPR[EPVAP]-1659894032866
GPR[SPVATF]-1659894032866
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894035204
GPR[EPVS]-1659894035204
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894035205
GPR[SPVAP]-1659894035205
GPR[EPVAP]-1659894037900
GPR[SPVATF]-1659894037900
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894040218
GPR[EPVS]-1659894040218
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894040220
GPR[SPVAP]-1659894040220
GPR[EPVAP]-1659894042881
GPR[SPVATF]-1659894042881
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894045218
GPR[EPVS]-1659894045218
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894045219
GPR[SPVAP]-1659894045219
GPR[EPVAP]-1659894047901
GPR[SPVATF]-1659894047901
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894050212
GPR[EPVS]-1659894050212
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894050214
GPR[SPVAP]-1659894050214
GPR[EPVAP]-1659894052924
GPR[SPVATF]-1659894052924
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894055249
GPR[EPVS]-1659894055249
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894055250
GPR[SPVAP]-1659894055250
GPR[EPVAP]-1659894057977
GPR[SPVATF]-1659894057977
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894060313
GPR[EPVS]-1659894060313
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894060315
GPR[SPVAP]-1659894060315
GPR[EPVAP]-1659894062970
GPR[SPVATF]-1659894062970
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894065303
GPR[EPVS]-1659894065303
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894065305
GPR[SPVAP]-1659894065305
GPR[EPVAP]-1659894067959
GPR[SPVATF]-1659894067959
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894070261
GPR[EPVS]-1659894070261
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894070263
GPR[SPVAP]-1659894070263
GPR[EPVAP]-1659894072932
GPR[SPVATF]-1659894072932
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894075250
GPR[EPVS]-1659894075250
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894075252
GPR[SPVAP]-1659894075252
GPR[EPVAP]-1659894077941
GPR[SPVATF]-1659894077941
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894080247
GPR[EPVS]-1659894080247
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894080248
GPR[SPVAP]-1659894080248
GPR[EPVAP]-1659894082903
GPR[SPVATF]-1659894082903
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894085209
GPR[EPVS]-1659894085209
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894085210
GPR[SPVAP]-1659894085210
GPR[EPVAP]-1659894087884
GPR[SPVATF]-1659894087884
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894090231
GPR[EPVS]-1659894090231
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("</ul>");
sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894090232
GPR[SPVAP]-1659894090232
GPR[EPVAP]-1659894092913
GPR[SPVATF]-1659894092913
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894095213
GPR[EPVS]-1659894095213
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894095215
GPR[SPVAP]-1659894095215
GPR[EPVAP]-1659894097868
GPR[SPVATF]-1659894097868
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894100177
GPR[EPVS]-1659894100177
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894100179
GPR[SPVAP]-1659894100179
GPR[EPVAP]-1659894102853
GPR[SPVATF]-1659894102853
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894105164
GPR[EPVS]-1659894105164
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894105166
GPR[SPVAP]-1659894105166
GPR[EPVAP]-1659894107845
GPR[SPVATF]-1659894107845
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894110189
GPR[EPVS]-1659894110189
========
if(outputCharsetEncoder.canEncode(c)){
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894110190
GPR[SPVAP]-1659894110190
GPR[EPVAP]-1659894112839
GPR[SPVATF]-1659894112839
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894115212
GPR[EPVS]-1659894115212
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");
sb.append("<li>REFERENCED BY:<br>\n");
sb.append("<ul>");
sb.append("</ul>");

appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894115216
GPR[SPVAP]-1659894115216
GPR[EPVAP]-1659894117903
GPR[SPVATF]-1659894117903
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894120231
GPR[EPVS]-1659894120231
========
if(outputCharsetEncoder.isLetter(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894120233
GPR[SPVAP]-1659894120233
GPR[EPVAP]-1659894121489
GPR[EPVS]-1659894121489
========
if(outputCharsetEncoder.canEncode(c)){
return 1;
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894121491
GPR[SPVAP]-1659894121491
GPR[EPVAP]-1659894122745
GPR[EPVS]-1659894122745
========
if(outputCharsetEncoder.isNaN(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894122748
GPR[SPVAP]-1659894122748
GPR[EPVAP]-1659894123990
GPR[EPVS]-1659894123990
========
sb.append("  ");
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894123992
GPR[SPVAP]-1659894123992
GPR[EPVAP]-1659894126647
GPR[SPVATF]-1659894126647
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894128955
GPR[EPVS]-1659894128955
========
if(outputCharsetEncoder.compareTo(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894128956
GPR[SPVAP]-1659894128956
GPR[EPVAP]-1659894130239
GPR[EPVS]-1659894130240
========
if(outputCharsetEncoder.canEncode(c)){
sb.setLength(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894130241
GPR[SPVAP]-1659894130241
GPR[EPVAP]-1659894132911
GPR[SPVATF]-1659894132911
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894135241
GPR[EPVS]-1659894135241
========
if(outputCharsetEncoder.canEncode(c)){
return 1;
sb.setLength(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894135243
GPR[SPVAP]-1659894135243
GPR[EPVAP]-1659894136504
GPR[EPVS]-1659894136504
========
if(outputCharsetEncoder.canEncode(c)){
sb.append(getReturnSlot().getType().toString());
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894136507
GPR[SPVAP]-1659894136507
GPR[EPVAP]-1659894137784
GPR[EPVS]-1659894137784
========
if(outputCharsetEncoder.isJavaIdentifierPart(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}

========
MM Copying to MM
GPR[SPVS]-1659894137786
GPR[SPVAP]-1659894137786
GPR[EPVAP]-1659894139023
GPR[EPVS]-1659894139023
========
if(outputCharsetEncoder==null){
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}
}else {
if(c>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}
}

========
MM Copying to MM
GPR[SPVS]-1659894140876
GPR[SPVAP]-1659894140876
GPR[EPVAP]-1659894143527
GPR[SPVATF]-1659894143527
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894145865
GPR[EPVS]-1659894145865
========
if(null==sb){
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}
}else {
if(c>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}
}

========
MM Copying to MM
GPR[SPVS]-1659894145866
GPR[SPVAP]-1659894145866
GPR[EPVAP]-1659894148518
GPR[SPVATF]-1659894148518
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894150845
GPR[EPVS]-1659894150845
========
if(outputCharsetEncoder!=sb){
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}
}else {
if(c>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}
}

========
MM Copying to MM
GPR[SPVS]-1659894150846
GPR[SPVAP]-1659894150846
GPR[EPVAP]-1659894152104
GPR[EPVS]-1659894152104
========
sb.append(" */\n");
if(outputCharsetEncoder!=null){
if(outputCharsetEncoder.canEncode(c)){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}
}else {
if(c>0x1f&&c<=0x7f){
sb.append(c);
}else {
appendHexJavaScriptRepresentation(sb,c);
}
}

========
MM Copying to MM
GPR[SPVS]-1659894152107
GPR[SPVAP]-1659894152107
GPR[EPVAP]-1659894154735
GPR[SPVATF]-1659894154735
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894157075
GPR[EPVS]-1659894157075
GPR[ESUN]-1659894157082
GPR[SSUN]-1659894157082
com.google.javascript.jscomp.CodeGenerator,1045
GPR[ESUN]-1659894157614
GPR[SSUN]-1659894157614
com.google.javascript.jscomp.CodeGenerator,1046
GPR[ESUN]-1659894157798
GPR[SSUN]-1659894157798
com.google.javascript.jscomp.CodeGenerator,996
========
case '\n' :

case '\0' :
sb.append("\\0");
break;


========
MM Copying to MM
GPR[SPVS]-1659894159343
GPR[SPVAP]-1659894159343
GPR[EPVAP]-1659894162049
GPR[EPVS]-1659894162049
========
case '\t' :

case '\0' :
sb.append("\\0");
break;


========
MM Copying to MM
GPR[SPVS]-1659894162050
GPR[SPVAP]-1659894162050
GPR[EPVAP]-1659894164030
GPR[EPVS]-1659894164030
========
case 2 :

case '\0' :
sb.append("\\0");
break;


========
MM Copying to MM
GPR[SPVS]-1659894164032
GPR[SPVAP]-1659894164032
GPR[EPVAP]-1659894170587
GPR[SPVATF]-1659894170587
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894172968
GPR[EPVS]-1659894172968
========
case '\r' :

case '\0' :
sb.append("\\0");
break;


========
MM Copying to MM
GPR[SPVS]-1659894172970
GPR[SPVAP]-1659894172970
GPR[EPVAP]-1659894174227
GPR[EPVS]-1659894174227
========
case '\\' :

case '\0' :
sb.append("\\0");
break;


========
MM Copying to MM
GPR[SPVS]-1659894174228
GPR[SPVAP]-1659894174228
GPR[EPVAP]-1659894175479
GPR[EPVS]-1659894175479
========
case '\"' :

case '\0' :
sb.append("\\0");
break;


========
MM Copying to MM
GPR[SPVS]-1659894175480
GPR[SPVAP]-1659894175480
GPR[EPVAP]-1659894176745
GPR[EPVS]-1659894176745
========
case '>' :

case '\0' :
sb.append("\\0");
break;


========
MM Copying to MM
GPR[SPVS]-1659894176746
GPR[SPVAP]-1659894176746
GPR[EPVAP]-1659894178000
GPR[EPVS]-1659894178000
========
case '\'' :

case '\0' :
sb.append("\\0");
break;


========
MM Copying to MM
GPR[SPVS]-1659894178001
GPR[SPVAP]-1659894178001
GPR[EPVAP]-1659894179258
GPR[EPVS]-1659894179258
========
case ' ' :
String Integer.toString(quote,16)=Integer.toString(quote,16);
sb.append(s,i,i).append("\\u").append("0000",hex.length(),4).append(hex);
pos=i+1;
break;

case '\0' :
sb.append("\\0");
break;


========
MM Copying to MM
GPR[SPVS]-1659894179260
GPR[SPVAP]-1659894179260
GPR[EPVAP]-1659894180360
GPR[EPVS]-1659894180360
========
if(i==0){
return ;
}
case '\0' :
sb.append("\\0");
break;


========
MM Copying to MM
GPR[SPVS]-1659894180362
GPR[SPVAP]-1659894180362
GPR[EPVAP]-1659894181454
GPR[EPVS]-1659894181454
========
sb.deleteCharAt(sb.length()-1);
case '\0' :
sb.append("\\0");
break;


========
MM Copying to MM
GPR[SPVS]-1659894181456
GPR[SPVAP]-1659894181456
GPR[EPVAP]-1659894182552
GPR[EPVS]-1659894182552
========
sb.append(")\\s*\\((.*?)\\)");
case '\0' :
sb.append("\\0");
break;


========
MM Copying to MM
GPR[SPVS]-1659894182554
GPR[SPVAP]-1659894182554
GPR[EPVAP]-1659894183645
GPR[EPVS]-1659894183645
========
if(!sb.add(sb.toString())){
encoded+="_"+i;
}
case '\0' :
sb.append("\\0");
break;


========
MM Copying to MM
GPR[SPVS]-1659894183646
GPR[SPVAP]-1659894183646
GPR[EPVAP]-1659894184754
GPR[EPVS]-1659894184754
========
sb.append(" ms ");
case '\0' :
sb.append("\\0");
break;


========
MM Copying to MM
GPR[SPVS]-1659894184756
GPR[SPVAP]-1659894184756
GPR[EPVAP]-1659894185851
GPR[EPVS]-1659894185851
========
case '\n' :

case '\n' :
sb.append("\\n");
break;


========
MM Copying to MM
GPR[SPVS]-1659894187164
GPR[SPVAP]-1659894187164
GPR[EPVAP]-1659894188452
GPR[EPVS]-1659894188452
========
case '\t' :

case '\n' :
sb.append("\\n");
break;


========
MM Copying to MM
GPR[SPVS]-1659894188454
GPR[SPVAP]-1659894188454
GPR[EPVAP]-1659894189704
GPR[EPVS]-1659894189704
========
case 2 :

case '\n' :
sb.append("\\n");
break;


========
MM Copying to MM
GPR[SPVS]-1659894189706
GPR[SPVAP]-1659894189706
GPR[EPVAP]-1659894192526
GPR[SPVATF]-1659894192526
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894194879
GPR[EPVS]-1659894194879
========
case '\r' :

case '\n' :
sb.append("\\n");
break;


========
MM Copying to MM
GPR[SPVS]-1659894194881
GPR[SPVAP]-1659894194881
GPR[EPVAP]-1659894196151
GPR[EPVS]-1659894196151
========
case '\\' :

case '\n' :
sb.append("\\n");
break;


========
MM Copying to MM
GPR[SPVS]-1659894196152
GPR[SPVAP]-1659894196152
GPR[EPVAP]-1659894197396
GPR[EPVS]-1659894197396
========
case '\"' :

case '\n' :
sb.append("\\n");
break;


========
MM Copying to MM
GPR[SPVS]-1659894197397
GPR[SPVAP]-1659894197397
GPR[EPVAP]-1659894198650
GPR[EPVS]-1659894198650
========
case '>' :

case '\n' :
sb.append("\\n");
break;


========
MM Copying to MM
GPR[SPVS]-1659894198652
GPR[SPVAP]-1659894198652
GPR[EPVAP]-1659894199905
GPR[EPVS]-1659894199905
========
case '\'' :

case '\n' :
sb.append("\\n");
break;


========
MM Copying to MM
GPR[SPVS]-1659894199906
GPR[SPVAP]-1659894199906
GPR[EPVAP]-1659894201175
GPR[EPVS]-1659894201175
========
case ' ' :
String Integer.toString(quote,16)=Integer.toString(quote,16);
sb.append(s,i,i).append("\\u").append("0000",hex.length(),4).append(hex);
pos=i+1;
break;

case '\n' :
sb.append("\\n");
break;


========
MM Copying to MM
GPR[SPVS]-1659894201177
GPR[SPVAP]-1659894201177
GPR[EPVAP]-1659894202266
GPR[EPVS]-1659894202266
========
if(i==0){
return ;
}
case '\n' :
sb.append("\\n");
break;


========
MM Copying to MM
GPR[SPVS]-1659894202267
GPR[SPVAP]-1659894202267
GPR[EPVAP]-1659894203503
GPR[EPVS]-1659894203503
========
sb.deleteCharAt(sb.length()-1);
case '\n' :
sb.append("\\n");
break;


========
MM Copying to MM
GPR[SPVS]-1659894203505
GPR[SPVAP]-1659894203505
GPR[EPVAP]-1659894204777
GPR[EPVS]-1659894204777
========
sb.append(")\\s*\\((.*?)\\)");
case '\n' :
sb.append("\\n");
break;


========
MM Copying to MM
GPR[SPVS]-1659894204778
GPR[SPVAP]-1659894204778
GPR[EPVAP]-1659894206042
GPR[EPVS]-1659894206042
========
if(!sb.add(sb.toString())){
encoded+="_"+i;
}
case '\n' :
sb.append("\\n");
break;


========
MM Copying to MM
GPR[SPVS]-1659894206045
GPR[SPVAP]-1659894206045
GPR[EPVAP]-1659894207289
GPR[EPVS]-1659894207289
========
sb.append(" ms ");
case '\n' :
sb.append("\\n");
break;


========
MM Copying to MM
GPR[SPVS]-1659894207291
GPR[SPVAP]-1659894207291
GPR[EPVAP]-1659894208571
GPR[EPVS]-1659894208571
========
case '\n' :

case '\r' :
sb.append("\\r");
break;


========
MM Copying to MM
GPR[SPVS]-1659894209848
GPR[SPVAP]-1659894209848
GPR[EPVAP]-1659894211102
GPR[EPVS]-1659894211102
========
case '\t' :

case '\r' :
sb.append("\\r");
break;


========
MM Copying to MM
GPR[SPVS]-1659894211103
GPR[SPVAP]-1659894211103
GPR[EPVAP]-1659894212360
GPR[EPVS]-1659894212360
========
case 2 :

case '\r' :
sb.append("\\r");
break;


========
MM Copying to MM
GPR[SPVS]-1659894212362
GPR[SPVAP]-1659894212362
GPR[EPVAP]-1659894215177
GPR[SPVATF]-1659894215177
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894217541
GPR[EPVS]-1659894217541
========
case '\r' :

case '\r' :
sb.append("\\r");
break;


========
MM Copying to MM
GPR[SPVS]-1659894217542
GPR[SPVAP]-1659894217542
GPR[EPVAP]-1659894218788
GPR[EPVS]-1659894218788
========
case '\\' :

case '\r' :
sb.append("\\r");
break;


========
MM Copying to MM
GPR[SPVS]-1659894218789
GPR[SPVAP]-1659894218789
GPR[EPVAP]-1659894220034
GPR[EPVS]-1659894220035
========
case '\"' :

case '\r' :
sb.append("\\r");
break;


========
MM Copying to MM
GPR[SPVS]-1659894220036
GPR[SPVAP]-1659894220036
GPR[EPVAP]-1659894221299
GPR[EPVS]-1659894221299
========
case '>' :

case '\r' :
sb.append("\\r");
break;


========
MM Copying to MM
GPR[SPVS]-1659894221301
GPR[SPVAP]-1659894221301
GPR[EPVAP]-1659894222559
GPR[EPVS]-1659894222559
========
case '\'' :

case '\r' :
sb.append("\\r");
break;


========
MM Copying to MM
GPR[SPVS]-1659894222560
GPR[SPVAP]-1659894222560
GPR[EPVAP]-1659894223802
GPR[EPVS]-1659894223802
========
case ' ' :
String Integer.toString(quote,16)=Integer.toString(quote,16);
sb.append(s,i,i).append("\\u").append("0000",hex.length(),4).append(hex);
pos=i+1;
break;

case '\r' :
sb.append("\\r");
break;


========
MM Copying to MM
GPR[SPVS]-1659894223803
GPR[SPVAP]-1659894223803
GPR[EPVAP]-1659894224893
GPR[EPVS]-1659894224893
========
if(i==0){
return ;
}
case '\r' :
sb.append("\\r");
break;


========
MM Copying to MM
GPR[SPVS]-1659894224894
GPR[SPVAP]-1659894224894
GPR[EPVAP]-1659894226148
GPR[EPVS]-1659894226148
========
sb.deleteCharAt(sb.length()-1);
case '\r' :
sb.append("\\r");
break;


========
MM Copying to MM
GPR[SPVS]-1659894226149
GPR[SPVAP]-1659894226149
GPR[EPVAP]-1659894227391
GPR[EPVS]-1659894227391
========
sb.append(")\\s*\\((.*?)\\)");
case '\r' :
sb.append("\\r");
break;


========
MM Copying to MM
GPR[SPVS]-1659894227393
GPR[SPVAP]-1659894227393
GPR[EPVAP]-1659894228652
GPR[EPVS]-1659894228652
========
if(!sb.add(sb.toString())){
encoded+="_"+i;
}
case '\r' :
sb.append("\\r");
break;


========
MM Copying to MM
GPR[SPVS]-1659894228654
GPR[SPVAP]-1659894228654
GPR[EPVAP]-1659894229921
GPR[EPVS]-1659894229921
========
sb.append(" ms ");
case '\r' :
sb.append("\\r");
break;


========
MM Copying to MM
GPR[SPVS]-1659894229922
GPR[SPVAP]-1659894229922
GPR[EPVAP]-1659894231194
GPR[EPVS]-1659894231194
========
case '\n' :

case '\t' :
sb.append("\\t");
break;


========
MM Copying to MM
GPR[SPVS]-1659894232488
GPR[SPVAP]-1659894232488
GPR[EPVAP]-1659894233734
GPR[EPVS]-1659894233734
========
case '\t' :

case '\t' :
sb.append("\\t");
break;


========
MM Copying to MM
GPR[SPVS]-1659894233736
GPR[SPVAP]-1659894233736
GPR[EPVAP]-1659894234981
GPR[EPVS]-1659894234981
========
case 2 :

case '\t' :
sb.append("\\t");
break;


========
MM Copying to MM
GPR[SPVS]-1659894234982
GPR[SPVAP]-1659894234982
GPR[EPVAP]-1659894237691
GPR[SPVATF]-1659894237691
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894240016
GPR[EPVS]-1659894240016
========
case '\r' :

case '\t' :
sb.append("\\t");
break;


========
MM Copying to MM
GPR[SPVS]-1659894240018
GPR[SPVAP]-1659894240018
GPR[EPVAP]-1659894241270
GPR[EPVS]-1659894241270
========
case '\\' :

case '\t' :
sb.append("\\t");
break;


========
MM Copying to MM
GPR[SPVS]-1659894241272
GPR[SPVAP]-1659894241272
GPR[EPVAP]-1659894242526
GPR[EPVS]-1659894242526
========
case '\"' :

case '\t' :
sb.append("\\t");
break;


========
MM Copying to MM
GPR[SPVS]-1659894242528
GPR[SPVAP]-1659894242528
GPR[EPVAP]-1659894243789
GPR[EPVS]-1659894243789
========
case '>' :

case '\t' :
sb.append("\\t");
break;


========
MM Copying to MM
GPR[SPVS]-1659894243791
GPR[SPVAP]-1659894243791
GPR[EPVAP]-1659894245030
GPR[EPVS]-1659894245031
========
case '\'' :

case '\t' :
sb.append("\\t");
break;


========
MM Copying to MM
GPR[SPVS]-1659894245032
GPR[SPVAP]-1659894245032
GPR[EPVAP]-1659894246278
GPR[EPVS]-1659894246278
========
case ' ' :
String Integer.toString(quote,16)=Integer.toString(quote,16);
sb.append(s,i,i).append("\\u").append("0000",hex.length(),4).append(hex);
pos=i+1;
break;

case '\t' :
sb.append("\\t");
break;


========
MM Copying to MM
GPR[SPVS]-1659894246280
GPR[SPVAP]-1659894246280
GPR[EPVAP]-1659894247368
GPR[EPVS]-1659894247368
========
if(i==0){
return ;
}
case '\t' :
sb.append("\\t");
break;


========
MM Copying to MM
GPR[SPVS]-1659894247370
GPR[SPVAP]-1659894247370
GPR[EPVAP]-1659894248622
GPR[EPVS]-1659894248622
========
sb.deleteCharAt(sb.length()-1);
case '\t' :
sb.append("\\t");
break;


========
MM Copying to MM
GPR[SPVS]-1659894248623
GPR[SPVAP]-1659894248623
GPR[EPVAP]-1659894249893
GPR[EPVS]-1659894249893
========
sb.append(")\\s*\\((.*?)\\)");
case '\t' :
sb.append("\\t");
break;


========
MM Copying to MM
GPR[SPVS]-1659894249894
GPR[SPVAP]-1659894249894
GPR[EPVAP]-1659894251163
GPR[EPVS]-1659894251163
========
if(!sb.add(sb.toString())){
encoded+="_"+i;
}
case '\t' :
sb.append("\\t");
break;


========
MM Copying to MM
GPR[SPVS]-1659894251165
GPR[SPVAP]-1659894251165
GPR[EPVAP]-1659894252417
GPR[EPVS]-1659894252417
========
sb.append(" ms ");
case '\t' :
sb.append("\\t");
break;


========
MM Copying to MM
GPR[SPVS]-1659894252419
GPR[SPVAP]-1659894252419
GPR[EPVAP]-1659894253667
GPR[EPVS]-1659894253667
========
case '\"' :

case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894254950
GPR[SPVAP]-1659894254950
GPR[EPVAP]-1659894256196
GPR[EPVS]-1659894256196
========
case '\n' :

case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894256204
GPR[SPVAP]-1659894256204
GPR[EPVAP]-1659894257465
GPR[EPVS]-1659894257465
========
case '\t' :

case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894257466
GPR[SPVAP]-1659894257466
GPR[EPVAP]-1659894258738
GPR[EPVS]-1659894258738
========
case 2 :

case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894258740
GPR[SPVAP]-1659894258740
GPR[EPVAP]-1659894261427
GPR[SPVATF]-1659894261427
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894263783
GPR[EPVS]-1659894263783
========
case '\r' :

case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894263784
GPR[SPVAP]-1659894263784
GPR[EPVAP]-1659894265067
GPR[EPVS]-1659894265067
========
case '>' :

case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894265069
GPR[SPVAP]-1659894265069
GPR[EPVAP]-1659894266316
GPR[EPVS]-1659894266316
========
if(i==0){
return ;
}
case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894266318
GPR[SPVAP]-1659894266318
GPR[EPVAP]-1659894267559
GPR[EPVS]-1659894267559
========
case ' ' :
String Integer.toString(quote,16)=Integer.toString(quote,16);
sb.append(backslashEscape,i,i).append("\\u").append("0000",hex.length(),4).append(hex);
pos=i+1;
break;

case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894267561
GPR[SPVAP]-1659894267561
GPR[EPVAP]-1659894268665
GPR[EPVS]-1659894268665
========
sb.deleteCharAt(sb.length()-1);
case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894268667
GPR[SPVAP]-1659894268667
GPR[EPVAP]-1659894269933
GPR[EPVS]-1659894269933
========
sb.append(")\\s*\\((.*?)\\)");
case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894269934
GPR[SPVAP]-1659894269934
GPR[EPVAP]-1659894271207
GPR[EPVS]-1659894271207
========
sb.append("}");
case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894271208
GPR[SPVAP]-1659894271208
GPR[EPVAP]-1659894272465
GPR[EPVS]-1659894272465
========
case '\\' :
sb.append(s);
break;


========
MM Copying to MM
GPR[SPVS]-1659894272467
GPR[SPVAP]-1659894272467
GPR[EPVAP]-1659894275105
GPR[SPVATF]-1659894275105
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894277421
GPR[EPVS]-1659894277421
========
if(sb.length()>0){
sb.append('.');
}
case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894277423
GPR[SPVAP]-1659894277423
GPR[EPVAP]-1659894278668
GPR[EPVS]-1659894278668
========
appendSpaces(sb,i-i);
case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894278669
GPR[SPVAP]-1659894278669
GPR[EPVAP]-1659894279916
GPR[EPVS]-1659894279916
========
if(!sb.add(backslashEscape)){
encoded+="_"+i;
}
case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894279917
GPR[SPVAP]-1659894279917
GPR[EPVAP]-1659894281176
GPR[EPVS]-1659894281176
========
case '\\' :
sb.append(c);
break;


========
MM Copying to MM
GPR[SPVS]-1659894281177
GPR[SPVAP]-1659894281177
GPR[EPVAP]-1659894283846
GPR[SPVATF]-1659894283846
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894286212
GPR[EPVS]-1659894286212
========
sb.append(" ms ");
case '\\' :
sb.append(backslashEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894286214
GPR[SPVAP]-1659894286214
GPR[EPVAP]-1659894287481
GPR[EPVS]-1659894287481
========
case '\n' :

case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894288778
GPR[SPVAP]-1659894288778
GPR[EPVAP]-1659894290021
GPR[EPVS]-1659894290021
========
case '\t' :

case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894290022
GPR[SPVAP]-1659894290022
GPR[EPVAP]-1659894291271
GPR[EPVS]-1659894291271
========
case 2 :

case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894291273
GPR[SPVAP]-1659894291273
GPR[EPVAP]-1659894293918
GPR[SPVATF]-1659894293918
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894296246
GPR[EPVS]-1659894296246
========
case '\r' :

case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894296248
GPR[SPVAP]-1659894296248
GPR[EPVAP]-1659894297504
GPR[EPVS]-1659894297504
========
case '\"' :

case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894297505
GPR[SPVAP]-1659894297505
GPR[EPVAP]-1659894298767
GPR[EPVS]-1659894298767
========
case '>' :

case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894298769
GPR[SPVAP]-1659894298769
GPR[EPVAP]-1659894300020
GPR[EPVS]-1659894300020
========
if(i==0){
return ;
}
case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894300022
GPR[SPVAP]-1659894300022
GPR[EPVAP]-1659894301270
GPR[EPVS]-1659894301270
========
case ' ' :
String Integer.toString(quote,16)=Integer.toString(quote,16);
sb.append(doublequoteEscape,i,i).append("\\u").append("0000",hex.length(),4).append(hex);
pos=i+1;
break;

case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894301272
GPR[SPVAP]-1659894301272
GPR[EPVAP]-1659894302378
GPR[EPVS]-1659894302378
========
sb.deleteCharAt(sb.length()-1);
case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894302381
GPR[SPVAP]-1659894302381
GPR[EPVAP]-1659894303643
GPR[EPVS]-1659894303643
========
sb.append(")\\s*\\((.*?)\\)");
case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894303645
GPR[SPVAP]-1659894303645
GPR[EPVAP]-1659894304912
GPR[EPVS]-1659894304912
========
sb.append("}");
case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894304914
GPR[SPVAP]-1659894304914
GPR[EPVAP]-1659894306178
GPR[EPVS]-1659894306179
========
case '\"' :
sb.append(s);
break;


========
MM Copying to MM
GPR[SPVS]-1659894306180
GPR[SPVAP]-1659894306180
GPR[EPVAP]-1659894308894
GPR[SPVATF]-1659894308894
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894311210
GPR[EPVS]-1659894311210
========
if(sb.length()>0){
sb.append('.');
}
case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894311211
GPR[SPVAP]-1659894311211
GPR[EPVAP]-1659894312460
GPR[EPVS]-1659894312460
========
appendSpaces(sb,i-i);
case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894312461
GPR[SPVAP]-1659894312461
GPR[EPVAP]-1659894313698
GPR[EPVS]-1659894313698
========
if(!sb.add(doublequoteEscape)){
encoded+="_"+i;
}
case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894313699
GPR[SPVAP]-1659894313699
GPR[EPVAP]-1659894314946
GPR[EPVS]-1659894314946
========
case '\"' :
sb.append(c);
break;


========
MM Copying to MM
GPR[SPVS]-1659894314947
GPR[SPVAP]-1659894314947
GPR[EPVAP]-1659894317582
GPR[SPVATF]-1659894317582
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894319892
GPR[EPVS]-1659894319892
========
sb.append(" ms ");
case '\"' :
sb.append(doublequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894319894
GPR[SPVAP]-1659894319894
GPR[EPVAP]-1659894321163
GPR[EPVS]-1659894321163
========
case '>' :

case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894322449
GPR[SPVAP]-1659894322449
GPR[EPVAP]-1659894323697
GPR[EPVS]-1659894323697
========
case '\n' :

case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894323698
GPR[SPVAP]-1659894323698
GPR[EPVAP]-1659894324929
GPR[EPVS]-1659894324929
========
case '\t' :

case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894324931
GPR[SPVAP]-1659894324931
GPR[EPVAP]-1659894326197
GPR[EPVS]-1659894326197
========
case 2 :

case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894326199
GPR[SPVAP]-1659894326199
GPR[EPVAP]-1659894328916
GPR[SPVATF]-1659894328916
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894331257
GPR[EPVS]-1659894331257
========
case '\r' :

case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894331259
GPR[SPVAP]-1659894331259
GPR[EPVAP]-1659894332521
GPR[EPVS]-1659894332521
========
case '\"' :

case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894332522
GPR[SPVAP]-1659894332522
GPR[EPVAP]-1659894333762
GPR[EPVS]-1659894333762
========
if(i==0){
return ;
}
case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894333764
GPR[SPVAP]-1659894333764
GPR[EPVAP]-1659894335002
GPR[EPVS]-1659894335002
========
case ' ' :
String Integer.toString(quote,16)=Integer.toString(quote,16);
sb.append(singlequoteEscape,i,i).append("\\u").append("0000",hex.length(),4).append(hex);
pos=i+1;
break;

case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894335004
GPR[SPVAP]-1659894335004
GPR[EPVAP]-1659894336096
GPR[EPVS]-1659894336096
========
sb.deleteCharAt(sb.length()-1);
case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894336098
GPR[SPVAP]-1659894336098
GPR[EPVAP]-1659894337355
GPR[EPVS]-1659894337355
========
sb.append(")\\s*\\((.*?)\\)");
case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894337357
GPR[SPVAP]-1659894337357
GPR[EPVAP]-1659894338599
GPR[EPVS]-1659894338599
========
sb.append("}");
case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894338600
GPR[SPVAP]-1659894338600
GPR[EPVAP]-1659894339837
GPR[EPVS]-1659894339837
========
case '\'' :
sb.append(s);
break;


========
MM Copying to MM
GPR[SPVS]-1659894339838
GPR[SPVAP]-1659894339838
GPR[EPVAP]-1659894342484
GPR[SPVATF]-1659894342484
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894344790
GPR[EPVS]-1659894344790
========
if(sb.length()>0){
sb.append('.');
}
case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894344792
GPR[SPVAP]-1659894344792
GPR[EPVAP]-1659894346059
GPR[EPVS]-1659894346059
========
appendSpaces(sb,i-i);
case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894346060
GPR[SPVAP]-1659894346060
GPR[EPVAP]-1659894347335
GPR[EPVS]-1659894347335
========
if(!sb.add(singlequoteEscape)){
encoded+="_"+i;
}
case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894347337
GPR[SPVAP]-1659894347337
GPR[EPVAP]-1659894348586
GPR[EPVS]-1659894348586
========
case '\'' :
sb.append(c);
break;


========
MM Copying to MM
GPR[SPVS]-1659894348587
GPR[SPVAP]-1659894348587
GPR[EPVAP]-1659894351246
GPR[SPVATF]-1659894351246
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894353557
GPR[EPVS]-1659894353557
========
sb.append(" ms ");
case '\'' :
sb.append(singlequoteEscape);
break;


========
MM Copying to MM
GPR[SPVS]-1659894353559
GPR[SPVAP]-1659894353559
GPR[EPVAP]-1659894354823
GPR[EPVS]-1659894354823
========
if(i>=2&&(s.charAt(2)=='x'||s.charAt(2)=='X')){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894356870
GPR[SPVAP]-1659894356870
GPR[EPVAP]-1659894359521
GPR[SPVATF]-1659894359521
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894361823
GPR[EPVS]-1659894361823
========
if(i>=2&&(s.charAt(2)=='x'||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894361824
GPR[SPVAP]-1659894361824
GPR[EPVAP]-1659894364553
GPR[SPVATF]-1659894364553
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894366887
GPR[EPVS]-1659894366887
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||s.charAt(2)=='X')){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894366889
GPR[SPVAP]-1659894366889
GPR[EPVAP]-1659894369542
GPR[SPVATF]-1659894369542
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894371869
GPR[EPVS]-1659894371869
========
if(length>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894371871
GPR[SPVAP]-1659894371871
GPR[EPVAP]-1659894373132
GPR[EPVS]-1659894373132
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894373133
GPR[SPVAP]-1659894373133
GPR[EPVAP]-1659894375790
GPR[SPVATF]-1659894375790
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894378115
GPR[EPVS]-1659894378115
========
if(i>=2&&s.charAt(1)=='o'){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894378117
GPR[SPVAP]-1659894378117
GPR[EPVAP]-1659894380825
GPR[SPVATF]-1659894380825
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894383349
GPR[EPVS]-1659894383349
========
if(i>=2&&s.charAt(1)=='n'){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894383351
GPR[SPVAP]-1659894383351
GPR[EPVAP]-1659894386008
GPR[SPVATF]-1659894386008
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894388312
GPR[EPVS]-1659894388312
========
if(i>=2&&s.charAt(1)=='e'){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894388313
GPR[SPVAP]-1659894388314
GPR[EPVAP]-1659894390992
GPR[SPVATF]-1659894390992
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894393314
GPR[EPVS]-1659894393314
========
if(i>=2&&s.charAt(1)=='r'){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894393315
GPR[SPVAP]-1659894393315
GPR[EPVAP]-1659894396007
GPR[SPVATF]-1659894396007
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894398334
GPR[EPVS]-1659894398334
========
if(i>=2&&s.charAt(1)=='a'){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894398336
GPR[SPVAP]-1659894398336
GPR[EPVAP]-1659894400973
GPR[SPVATF]-1659894400973
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894403316
GPR[EPVS]-1659894403316
========
if(i>=2&&s.charAt(1)=='h'){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894403318
GPR[SPVAP]-1659894403318
GPR[EPVAP]-1659894406002
GPR[SPVATF]-1659894406002
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894408304
GPR[EPVS]-1659894408304
========
if(i>=2&&s.charAt(1)=='l'){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894408306
GPR[SPVAP]-1659894408306
GPR[EPVAP]-1659894411048
GPR[SPVATF]-1659894411048
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894413360
GPR[EPVS]-1659894413360
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.charAt(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894413362
GPR[SPVAP]-1659894413362
GPR[EPVAP]-1659894415993
GPR[SPVATF]-1659894415993
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894418320
GPR[EPVS]-1659894418320
========
if(i>=2&&(s.charAt(1)=='x'||s.charAt(1)=='X')){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894418323
GPR[SPVAP]-1659894418323
GPR[EPVAP]-1659894421010
GPR[SPVATF]-1659894421010
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894423309
GPR[EPVS]-1659894423309
========
if(i>=2&&(s.charAt(1)=='x'||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894423311
GPR[SPVAP]-1659894423311
GPR[EPVAP]-1659894425985
GPR[SPVATF]-1659894425985
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894428294
GPR[EPVS]-1659894428294
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||s.charAt(1)=='X')){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894428295
GPR[SPVAP]-1659894428295
GPR[EPVAP]-1659894430965
GPR[SPVATF]-1659894430965
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894433312
GPR[EPVS]-1659894433312
========
if(i>=2&&i<=9){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894433314
GPR[SPVAP]-1659894433314
GPR[EPVAP]-1659894436072
GPR[SPVATF]-1659894436073
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894438394
GPR[EPVS]-1659894438394
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
if((i>>>32)==0){
return i;
}
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894438396
GPR[SPVAP]-1659894438396
GPR[EPVAP]-1659894439659
GPR[EPVS]-1659894439659
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
if((i>>>32)==0){
return i;
}
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894439661
GPR[SPVAP]-1659894439661
GPR[EPVAP]-1659894440928
GPR[EPVS]-1659894440928
========
if(i>=2&&i<=9){
sb.append("\\>");
}else {
sb.charAt(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894440930
GPR[SPVAP]-1659894440930
GPR[EPVAP]-1659894443567
GPR[SPVATF]-1659894443567
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894445894
GPR[EPVS]-1659894445894
========
if(i>=2&&i!='\\'){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894445895
GPR[SPVAP]-1659894445895
GPR[EPVAP]-1659894448553
GPR[SPVATF]-1659894448553
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894450891
GPR[EPVS]-1659894450891
========
if(c>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894450893
GPR[SPVAP]-1659894450893
GPR[EPVAP]-1659894453576
GPR[SPVATF]-1659894453576
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894455918
GPR[EPVS]-1659894455918
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
continue;
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894455919
GPR[SPVAP]-1659894455919
GPR[EPVAP]-1659894457195
GPR[EPVS]-1659894457195
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
continue;
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894457198
GPR[SPVAP]-1659894457198
GPR[EPVAP]-1659894458513
GPR[EPVS]-1659894458513
========
if(c>=2&&i!='\\'){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894458514
GPR[SPVAP]-1659894458514
GPR[EPVAP]-1659894461207
GPR[SPVATF]-1659894461208
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894463545
GPR[EPVS]-1659894463545
========
if(i>=2&&i==Token.DEFAULT){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894463547
GPR[SPVAP]-1659894463547
GPR[EPVAP]-1659894466263
GPR[SPVATF]-1659894466263
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894468594
GPR[EPVS]-1659894468594
========
if(nextToken>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894468595
GPR[SPVAP]-1659894468595
GPR[EPVAP]-1659894469853
GPR[EPVS]-1659894469853
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
b.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894469855
GPR[SPVAP]-1659894469855
GPR[EPVAP]-1659894471092
GPR[EPVS]-1659894471092
========
if(i>=2&&i<s.length()){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894471093
GPR[SPVAP]-1659894471094
GPR[EPVAP]-1659894473798
GPR[SPVATF]-1659894473798
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894476183
GPR[EPVS]-1659894476183
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
b.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894476185
GPR[SPVAP]-1659894476185
GPR[EPVAP]-1659894477450
GPR[EPVS]-1659894477450
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894477451
GPR[SPVAP]-1659894477451
GPR[EPVAP]-1659894478722
GPR[EPVS]-1659894478722
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894478723
GPR[SPVAP]-1659894478723
GPR[EPVAP]-1659894481390
GPR[SPVATF]-1659894481390
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894483710
GPR[EPVS]-1659894483710
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894483711
GPR[SPVAP]-1659894483711
GPR[EPVAP]-1659894486370
GPR[SPVATF]-1659894486371
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894488677
GPR[EPVS]-1659894488677
========
if(i>=2&&i<s.length()){
b.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894488678
GPR[SPVAP]-1659894488678
GPR[EPVAP]-1659894489920
GPR[EPVS]-1659894489920
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
b.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894489921
GPR[SPVAP]-1659894489921
GPR[EPVAP]-1659894491163
GPR[EPVS]-1659894491163
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
b.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894491165
GPR[SPVAP]-1659894491165
GPR[EPVAP]-1659894492403
GPR[EPVS]-1659894492403
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
b.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894492405
GPR[SPVAP]-1659894492405
GPR[EPVAP]-1659894493653
GPR[EPVS]-1659894493653
========
if(i>=2&&i<s.length()){
sb.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894493654
GPR[SPVAP]-1659894493654
GPR[EPVAP]-1659894494920
GPR[EPVS]-1659894494920
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894494922
GPR[SPVAP]-1659894494922
GPR[EPVAP]-1659894496158
GPR[EPVS]-1659894496158
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
sb.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894496160
GPR[SPVAP]-1659894496160
GPR[EPVAP]-1659894497422
GPR[EPVS]-1659894497422
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append("^\n");
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894497423
GPR[SPVAP]-1659894497423
GPR[EPVAP]-1659894498678
GPR[EPVS]-1659894498678
========
if(i>=0&&i<s.length()){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894498679
GPR[SPVAP]-1659894498679
GPR[EPVAP]-1659894501329
GPR[SPVATF]-1659894501329
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894503639
GPR[EPVS]-1659894503639
========
if(i>=2&&i<s.length()){
sb.append("^\n");
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894503640
GPR[SPVAP]-1659894503640
GPR[EPVAP]-1659894506297
GPR[SPVATF]-1659894506297
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894508609
GPR[EPVS]-1659894508609
========
if(i>=2&&i<s.length()){
sb.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894508611
GPR[SPVAP]-1659894508611
GPR[EPVAP]-1659894511278
GPR[SPVATF]-1659894511278
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894513590
GPR[EPVS]-1659894513590
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894513591
GPR[SPVAP]-1659894513591
GPR[EPVAP]-1659894516286
GPR[SPVATF]-1659894516286
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894518609
GPR[EPVS]-1659894518609
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894518610
GPR[SPVAP]-1659894518610
GPR[EPVAP]-1659894521296
GPR[SPVATF]-1659894521296
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894523648
GPR[EPVS]-1659894523648
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
sb.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894523650
GPR[SPVAP]-1659894523650
GPR[EPVAP]-1659894526283
GPR[SPVATF]-1659894526283
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894528598
GPR[EPVS]-1659894528598
========
if(i>=2&&i<s.length()){
b.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894528599
GPR[SPVAP]-1659894528599
GPR[EPVAP]-1659894529864
GPR[EPVS]-1659894529864
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
b.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894529866
GPR[SPVAP]-1659894529866
GPR[EPVAP]-1659894531104
GPR[EPVS]-1659894531104
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
b.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894531106
GPR[SPVAP]-1659894531106
GPR[EPVAP]-1659894532375
GPR[EPVS]-1659894532375
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
b.append("\\>");
}else {
sb.append("^\n");
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894532377
GPR[SPVAP]-1659894532377
GPR[EPVAP]-1659894533616
GPR[EPVS]-1659894533616
========
if(i>=0&&i<s.length()){
b.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894533618
GPR[SPVAP]-1659894533618
GPR[EPVAP]-1659894534856
GPR[EPVS]-1659894534856
========
if(i>=2&&i<s.length()){
sb.append("^\n");
b.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894534858
GPR[SPVAP]-1659894534858
GPR[EPVAP]-1659894536103
GPR[EPVS]-1659894536103
========
if(i>=2&&i<s.length()){
b.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894536105
GPR[SPVAP]-1659894536105
GPR[EPVAP]-1659894537349
GPR[EPVS]-1659894537349
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
b.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894537351
GPR[SPVAP]-1659894537351
GPR[EPVAP]-1659894538601
GPR[EPVS]-1659894538601
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
b.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894538603
GPR[SPVAP]-1659894538603
GPR[EPVAP]-1659894539864
GPR[EPVS]-1659894539864
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
b.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894539865
GPR[SPVAP]-1659894539865
GPR[EPVAP]-1659894541101
GPR[EPVS]-1659894541101
========
if(i>=0&&i<s.length()){
sb.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894541103
GPR[SPVAP]-1659894541103
GPR[EPVAP]-1659894542362
GPR[EPVS]-1659894542362
========
if(i>=2&&i<s.length()){
sb.append("^\n");
sb.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894542363
GPR[SPVAP]-1659894542363
GPR[EPVAP]-1659894543603
GPR[EPVS]-1659894543604
========
if(i>=2&&i<s.length()){
sb.append("\\>");
}else {
sb.append("^\n");
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894543605
GPR[SPVAP]-1659894543605
GPR[EPVAP]-1659894544856
GPR[EPVS]-1659894544856
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
sb.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894544857
GPR[SPVAP]-1659894544857
GPR[EPVAP]-1659894546096
GPR[EPVS]-1659894546096
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append("^\n");
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894546098
GPR[SPVAP]-1659894546098
GPR[EPVAP]-1659894547382
GPR[EPVS]-1659894547382
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
sb.append("\\>");
}else {
sb.append("^\n");
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894547384
GPR[SPVAP]-1659894547384
GPR[EPVAP]-1659894548619
GPR[EPVS]-1659894548619
========
if(i>=0&&i<s.length()){
sb.append("^\n");
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894548621
GPR[SPVAP]-1659894548621
GPR[EPVAP]-1659894551312
GPR[SPVATF]-1659894551312
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894553646
GPR[EPVS]-1659894553646
========
if(i>=0&&i<s.length()){
sb.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894553647
GPR[SPVAP]-1659894553647
GPR[EPVAP]-1659894556296
GPR[SPVATF]-1659894556296
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894558601
GPR[EPVS]-1659894558601
========
if(i>=2&&i<s.length()){
sb.append("^\n");
sb.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894558603
GPR[SPVAP]-1659894558603
GPR[EPVAP]-1659894561245
GPR[SPVATF]-1659894561245
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894563546
GPR[EPVS]-1659894563546
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
sb.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894563548
GPR[SPVAP]-1659894563548
GPR[EPVAP]-1659894566233
GPR[SPVATF]-1659894566233
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894568568
GPR[EPVS]-1659894568568
========
if(i>=0&&i<s.length()){
b.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894568570
GPR[SPVAP]-1659894568570
GPR[EPVAP]-1659894569829
GPR[EPVS]-1659894569829
========
if(i>=2&&i<s.length()){
sb.append("^\n");
b.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894569830
GPR[SPVAP]-1659894569830
GPR[EPVAP]-1659894571077
GPR[EPVS]-1659894571077
========
if(i>=2&&i<s.length()){
b.append("\\>");
}else {
sb.append("^\n");
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894571078
GPR[SPVAP]-1659894571078
GPR[EPVAP]-1659894572328
GPR[EPVS]-1659894572328
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
b.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894572330
GPR[SPVAP]-1659894572330
GPR[EPVAP]-1659894573576
GPR[EPVS]-1659894573576
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
b.append("\\>");
}else {
sb.append("^\n");
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894573577
GPR[SPVAP]-1659894573577
GPR[EPVAP]-1659894574824
GPR[EPVS]-1659894574824
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
b.append("\\>");
}else {
sb.append("^\n");
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894574826
GPR[SPVAP]-1659894574826
GPR[EPVAP]-1659894576088
GPR[EPVS]-1659894576088
========
if(i>=0&&i<s.length()){
sb.append("^\n");
b.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894576090
GPR[SPVAP]-1659894576090
GPR[EPVAP]-1659894577345
GPR[EPVS]-1659894577345
========
if(i>=0&&i<s.length()){
b.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894577347
GPR[SPVAP]-1659894577347
GPR[EPVAP]-1659894578604
GPR[EPVS]-1659894578604
========
if(i>=2&&i<s.length()){
sb.append("^\n");
b.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894578606
GPR[SPVAP]-1659894578606
GPR[EPVAP]-1659894579871
GPR[EPVS]-1659894579871
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
b.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894579873
GPR[SPVAP]-1659894579873
GPR[EPVAP]-1659894581135
GPR[EPVS]-1659894581135
========
if(i>=0&&i<s.length()){
sb.append("^\n");
sb.append("\\>");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894581136
GPR[SPVAP]-1659894581136
GPR[EPVAP]-1659894582376
GPR[EPVS]-1659894582376
========
if(i>=0&&i<s.length()){
sb.append("\\>");
}else {
sb.append("^\n");
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894582378
GPR[SPVAP]-1659894582378
GPR[EPVAP]-1659894583628
GPR[EPVS]-1659894583628
========
if(i>=2&&i<s.length()){
sb.append("^\n");
sb.append("\\>");
}else {
sb.append("^\n");
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894583630
GPR[SPVAP]-1659894583630
GPR[EPVAP]-1659894584863
GPR[EPVS]-1659894584863
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("^\n");
sb.append("\\>");
}else {
sb.append("^\n");
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894584864
GPR[SPVAP]-1659894584864
GPR[EPVAP]-1659894586147
GPR[EPVS]-1659894586147
========
if(i>=0&&i<s.length()){
sb.append("^\n");
sb.append("\\>");
}else {
sb.append("^\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894586148
GPR[SPVAP]-1659894586148
GPR[EPVAP]-1659894588815
GPR[SPVATF]-1659894588815
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894591141
GPR[EPVS]-1659894591141
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
break;
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894591144
GPR[SPVAP]-1659894591144
GPR[EPVAP]-1659894592404
GPR[EPVS]-1659894592404
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
break;
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894592405
GPR[SPVAP]-1659894592406
GPR[EPVAP]-1659894593641
GPR[EPVS]-1659894593641
========
if(i>=2&&getLastChar()==s.charAt(0)){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894593643
GPR[SPVAP]-1659894593643
GPR[EPVAP]-1659894594894
GPR[EPVS]-1659894594894
========
maybeEndStatement();
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894594895
GPR[SPVAP]-1659894594895
GPR[EPVAP]-1659894596144
GPR[EPVS]-1659894596144
========
new StringBuilder(singlequoteEscape).append(" (");
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894596146
GPR[SPVAP]-1659894596146
GPR[EPVAP]-1659894598798
GPR[SPVATF]-1659894598798
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894601111
GPR[EPVS]-1659894601111
========
if(singlequoteEscape!=null){
new StringBuilder(singlequoteEscape).append(sourceName);
}
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894601112
GPR[SPVAP]-1659894601112
GPR[EPVAP]-1659894602357
GPR[EPVS]-1659894602357
========
if(i>0){
new StringBuilder(singlequoteEscape).append('#');
buf.append(lineNumber);
}
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894602359
GPR[SPVAP]-1659894602359
GPR[EPVAP]-1659894603599
GPR[EPVS]-1659894603599
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')&&(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894603601
GPR[SPVAP]-1659894603601
GPR[EPVAP]-1659894606268
GPR[SPVATF]-1659894606268
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894608585
GPR[EPVS]-1659894608585
========
if(i>=2&&(quote>='A'&&ch<='Z')){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894608587
GPR[SPVAP]-1659894608587
GPR[EPVAP]-1659894609847
GPR[EPVS]-1659894609847
========
if(i>=2&&(quote>='A'&&quote<='Z')){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894609849
GPR[SPVAP]-1659894609849
GPR[EPVAP]-1659894612576
GPR[SPVATF]-1659894612577
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894614904
GPR[EPVS]-1659894614904
========
if(i>=2&&(quote>='A'||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894614906
GPR[SPVAP]-1659894614906
GPR[EPVAP]-1659894617593
GPR[SPVATF]-1659894617593
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894619925
GPR[EPVS]-1659894619925
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||quote<='Z')){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894619926
GPR[SPVAP]-1659894619926
GPR[EPVAP]-1659894622609
GPR[SPVATF]-1659894622609
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894624982
GPR[EPVS]-1659894624982
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(Integer.toHexString(quote));
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894624983
GPR[SPVAP]-1659894624983
GPR[EPVAP]-1659894627681
GPR[SPVATF]-1659894627681
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894630000
GPR[EPVS]-1659894630000
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
protectHex=true;
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894630002
GPR[SPVAP]-1659894630002
GPR[EPVAP]-1659894631254
GPR[EPVS]-1659894631254
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(Integer.toHexString(quote));
protectHex=true;

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894631256
GPR[SPVAP]-1659894631256
GPR[EPVAP]-1659894632509
GPR[EPVS]-1659894632509
========
if(i>=2&&(quote>='A'&&(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894632510
GPR[SPVAP]-1659894632510
GPR[EPVAP]-1659894635151
GPR[SPVATF]-1659894635151
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894637460
GPR[EPVS]-1659894637460
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')&&quote<='Z')){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894637462
GPR[SPVAP]-1659894637462
GPR[EPVAP]-1659894640172
GPR[SPVATF]-1659894640172
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894642494
GPR[EPVS]-1659894642494
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')&&(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(Integer.toHexString(quote));
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894642496
GPR[SPVAP]-1659894642496
GPR[EPVAP]-1659894645170
GPR[SPVATF]-1659894645170
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894647513
GPR[EPVS]-1659894647513
========
if(i>=2&&(quote>='A'&&quote<='Z')){
sb.append("\\>");
}else {
sb.append(Integer.toHexString(quote));
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894647515
GPR[SPVAP]-1659894647515
GPR[EPVAP]-1659894650165
GPR[SPVATF]-1659894650165
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894652483
GPR[EPVS]-1659894652483
========
if(i>=2&&(quote>='A'||quote<='Z')){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894652484
GPR[SPVAP]-1659894652484
GPR[EPVAP]-1659894655141
GPR[SPVATF]-1659894655141
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894657473
GPR[EPVS]-1659894657473
========
if(i>=2&&(quote>='A'||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(Integer.toHexString(quote));
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894657475
GPR[SPVAP]-1659894657475
GPR[EPVAP]-1659894660112
GPR[SPVATF]-1659894660112
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894662405
GPR[EPVS]-1659894662405
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||quote<='Z')){
sb.append("\\>");
}else {
sb.append(Integer.toHexString(quote));
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894662406
GPR[SPVAP]-1659894662406
GPR[EPVAP]-1659894665118
GPR[SPVATF]-1659894665118
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894667472
GPR[EPVS]-1659894667472
========
if(i>=2&&(quote>='A'&&(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(Integer.toHexString(quote));
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894667474
GPR[SPVAP]-1659894667474
GPR[EPVAP]-1659894670163
GPR[SPVATF]-1659894670163
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894672472
GPR[EPVS]-1659894672472
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')&&quote<='Z')){
sb.append("\\>");
}else {
sb.append(Integer.toHexString(quote));
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894672473
GPR[SPVAP]-1659894672473
GPR[EPVAP]-1659894675146
GPR[SPVATF]-1659894675146
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894677550
GPR[EPVS]-1659894677550
========
if(i>=2&&(quote>='A'||quote<='Z')){
sb.append("\\>");
}else {
sb.append(Integer.toHexString(quote));
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894677552
GPR[SPVAP]-1659894677552
GPR[EPVAP]-1659894680226
GPR[SPVATF]-1659894680226
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894682572
GPR[EPVS]-1659894682572
========
if(i>=2&&i<='9'){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894682574
GPR[SPVAP]-1659894682574
GPR[EPVAP]-1659894685228
GPR[SPVATF]-1659894685228
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894687529
GPR[EPVS]-1659894687529
========
if(i>=2&&c>'9'){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894687530
GPR[SPVAP]-1659894687530
GPR[EPVAP]-1659894690211
GPR[SPVATF]-1659894690211
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894692537
GPR[EPVS]-1659894692537
========
if(i>16){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894692539
GPR[SPVAP]-1659894692539
GPR[EPVAP]-1659894695207
GPR[SPVATF]-1659894695207
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894697541
GPR[EPVS]-1659894697541
========
if(i>16&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894697543
GPR[SPVAP]-1659894697543
GPR[EPVAP]-1659894700215
GPR[SPVATF]-1659894700215
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894702525
GPR[EPVS]-1659894702525
========
if(reps>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894702526
GPR[SPVAP]-1659894702526
GPR[EPVAP]-1659894703779
GPR[EPVS]-1659894703779
========
if(i>=16&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894703780
GPR[SPVAP]-1659894703780
GPR[EPVAP]-1659894706436
GPR[SPVATF]-1659894706436
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894708794
GPR[EPVS]-1659894708794
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
builder.append("\\>");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894708796
GPR[SPVAP]-1659894708796
GPR[EPVAP]-1659894710043
GPR[EPVS]-1659894710043
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
builder.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894710044
GPR[SPVAP]-1659894710044
GPR[EPVAP]-1659894711286
GPR[EPVS]-1659894711286
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894711288
GPR[SPVAP]-1659894711288
GPR[EPVAP]-1659894712534
GPR[EPVS]-1659894712534
========
if(decPt>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894712536
GPR[SPVAP]-1659894712536
GPR[EPVAP]-1659894713792
GPR[EPVS]-1659894713792
========
if(i>=1&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894713794
GPR[SPVAP]-1659894713794
GPR[EPVAP]-1659894716476
GPR[SPVATF]-1659894716476
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894718897
GPR[EPVS]-1659894718897
========
if((isWordChar(c)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894718899
GPR[SPVAP]-1659894718899
GPR[EPVAP]-1659894720168
GPR[EPVS]-1659894720168
========
append(s);
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894720169
GPR[SPVAP]-1659894720169
GPR[EPVAP]-1659894721423
GPR[EPVS]-1659894721423
========
if(ilim>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894721425
GPR[SPVAP]-1659894721425
GPR[EPVAP]-1659894722666
GPR[EPVS]-1659894722666
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.setLength(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894722668
GPR[SPVAP]-1659894722668
GPR[EPVAP]-1659894725335
GPR[SPVATF]-1659894725335
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894727667
GPR[EPVS]-1659894727667
========
if(i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.setLength(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894727669
GPR[SPVAP]-1659894727669
GPR[EPVAP]-1659894730365
GPR[SPVATF]-1659894730365
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894732701
GPR[EPVS]-1659894732701
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(s);
}

========
MM Copying to MM
GPR[SPVS]-1659894732703
GPR[SPVAP]-1659894732703
GPR[EPVAP]-1659894735355
GPR[SPVATF]-1659894735355
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894737728
GPR[EPVS]-1659894737728
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
start=-1;
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894737730
GPR[SPVAP]-1659894737730
GPR[EPVAP]-1659894739015
GPR[EPVS]-1659894739015
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append('\n');
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894739017
GPR[SPVAP]-1659894739017
GPR[EPVAP]-1659894741731
GPR[SPVATF]-1659894741731
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894744091
GPR[EPVS]-1659894744091
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
start=i+1;
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894744092
GPR[SPVAP]-1659894744092
GPR[EPVAP]-1659894745368
GPR[EPVS]-1659894745368
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append('\n');
start=i+1;

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894745370
GPR[SPVAP]-1659894745370
GPR[EPVAP]-1659894746622
GPR[EPVS]-1659894746622
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
builder.append("\\>");
}else {
sb.append(s);
}

========
MM Copying to MM
GPR[SPVS]-1659894746623
GPR[SPVAP]-1659894746623
GPR[EPVAP]-1659894747876
GPR[EPVS]-1659894747876
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
builder.append("\\>");
}else {
sb.append('\n');
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894747878
GPR[SPVAP]-1659894747878
GPR[EPVAP]-1659894749114
GPR[EPVS]-1659894749114
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
builder.append(s);
}

========
MM Copying to MM
GPR[SPVS]-1659894749116
GPR[SPVAP]-1659894749116
GPR[EPVAP]-1659894750366
GPR[EPVS]-1659894750366
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append('\n');
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894750368
GPR[SPVAP]-1659894750368
GPR[EPVAP]-1659894751647
GPR[EPVS]-1659894751647
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append('\n');
sb.append(s);
}

========
MM Copying to MM
GPR[SPVS]-1659894751649
GPR[SPVAP]-1659894751649
GPR[EPVAP]-1659894754292
GPR[SPVATF]-1659894754292
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894756633
GPR[EPVS]-1659894756633
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
builder.append("\\>");
}else {
builder.append(s);
}

========
MM Copying to MM
GPR[SPVS]-1659894756634
GPR[SPVAP]-1659894756634
GPR[EPVAP]-1659894757916
GPR[EPVS]-1659894757916
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
builder.append("\\>");
}else {
sb.append('\n');
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894757918
GPR[SPVAP]-1659894757918
GPR[EPVAP]-1659894759180
GPR[EPVS]-1659894759180
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
builder.append("\\>");
}else {
sb.append('\n');
sb.append(s);
}

========
MM Copying to MM
GPR[SPVS]-1659894759182
GPR[SPVAP]-1659894759182
GPR[EPVAP]-1659894760437
GPR[EPVS]-1659894760437
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append('\n');
builder.append(s);
}

========
MM Copying to MM
GPR[SPVS]-1659894760438
GPR[SPVAP]-1659894760438
GPR[EPVAP]-1659894761690
GPR[EPVS]-1659894761690
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
builder.append("\\>");
}else {
sb.append('\n');
builder.append(s);
}

========
MM Copying to MM
GPR[SPVS]-1659894761691
GPR[SPVAP]-1659894761691
GPR[EPVAP]-1659894762940
GPR[EPVS]-1659894762940
========
if(i>=2&&(quote++=='9')){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894762943
GPR[SPVAP]-1659894762943
GPR[EPVAP]-1659894765584
GPR[SPVATF]-1659894765585
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894767900
GPR[EPVS]-1659894767900
========
if(j1>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894767902
GPR[SPVAP]-1659894767902
GPR[EPVAP]-1659894769144
GPR[EPVS]-1659894769144
========
if(i>=0&&(quote++=='9')){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894769145
GPR[SPVAP]-1659894769145
GPR[EPVAP]-1659894771853
GPR[SPVATF]-1659894771853
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894774188
GPR[EPVS]-1659894774188
========
if(i>=1&&(quote++=='9')){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894774189
GPR[SPVAP]-1659894774189
GPR[EPVAP]-1659894776880
GPR[SPVATF]-1659894776880
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894779208
GPR[EPVS]-1659894779208
========
if(i>=2&&i<=Token.LAST_TOKEN){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894779210
GPR[SPVAP]-1659894779210
GPR[EPVAP]-1659894781933
GPR[SPVATF]-1659894781933
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894784282
GPR[EPVS]-1659894784282
========
append((char)i);
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894784283
GPR[SPVAP]-1659894784283
GPR[EPVAP]-1659894785538
GPR[EPVS]-1659894785538
========
append((char)Token.EOL);
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894785540
GPR[SPVAP]-1659894785540
GPR[EPVAP]-1659894786783
GPR[EPVS]-1659894786783
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
size+=i;
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894786785
GPR[SPVAP]-1659894786785
GPR[EPVAP]-1659894788077
GPR[EPVS]-1659894788077
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
size+=i;
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894788078
GPR[SPVAP]-1659894788078
GPR[EPVAP]-1659894789354
GPR[EPVS]-1659894789354
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
return false;
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894789356
GPR[SPVAP]-1659894789356
GPR[EPVAP]-1659894790634
GPR[EPVS]-1659894790634
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
return false;
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894790636
GPR[SPVAP]-1659894790636
GPR[EPVAP]-1659894791876
GPR[EPVS]-1659894791876
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.setValue(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894791879
GPR[SPVAP]-1659894791879
GPR[EPVAP]-1659894793141
GPR[EPVS]-1659894793141
========
case Token.LB :

if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894793143
GPR[SPVAP]-1659894793143
GPR[EPVAP]-1659894795799
GPR[SPVATF]-1659894795799
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894798172
GPR[EPVS]-1659894798172
========
case Token.CONTINUE :

if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894798173
GPR[SPVAP]-1659894798173
GPR[EPVAP]-1659894800876
GPR[SPVATF]-1659894800876
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894803202
GPR[EPVS]-1659894803202
========
case Token.VAR :

if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894803203
GPR[SPVAP]-1659894803203
GPR[EPVAP]-1659894805894
GPR[SPVATF]-1659894805894
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894808229
GPR[EPVS]-1659894808229
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.join("\\>");
}else {
sb.join(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894808230
GPR[SPVAP]-1659894808230
GPR[EPVAP]-1659894809486
GPR[EPVS]-1659894809486
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.join("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894809487
GPR[SPVAP]-1659894809487
GPR[EPVAP]-1659894810762
GPR[EPVS]-1659894810762
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.join(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894810763
GPR[SPVAP]-1659894810763
GPR[EPVAP]-1659894812021
GPR[EPVS]-1659894812021
========
append((char)i);
if(i>=2&&i<=Token.LAST_TOKEN){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894812024
GPR[SPVAP]-1659894812024
GPR[EPVAP]-1659894813306
GPR[EPVS]-1659894813306
========
case Token.RC :

if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894813308
GPR[SPVAP]-1659894813308
GPR[EPVAP]-1659894815984
GPR[SPVATF]-1659894815984
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894818315
GPR[EPVS]-1659894818315
========
singlequoteEscape=s.substring(0,i);
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894818317
GPR[SPVAP]-1659894818317
GPR[EPVAP]-1659894820997
GPR[SPVATF]-1659894820997
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894823322
GPR[EPVS]-1659894823322
========
i=s.indexOf('.',i+11);
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894823323
GPR[SPVAP]-1659894823323
GPR[EPVAP]-1659894826024
GPR[SPVATF]-1659894826024
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894828385
GPR[EPVS]-1659894828385
========
singlequoteEscape=s.substring(0,i);
i=s.indexOf('.',i+11);
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894828386
GPR[SPVAP]-1659894828386
GPR[EPVAP]-1659894831040
GPR[SPVATF]-1659894831040
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894833346
GPR[EPVS]-1659894833346
========
if(singlequoteEscape.contains("")){
return null;
}
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894833348
GPR[SPVAP]-1659894833348
GPR[EPVAP]-1659894836072
GPR[SPVATF]-1659894836072
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894838389
GPR[EPVS]-1659894838389
========
case 0 :

if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894838391
GPR[SPVAP]-1659894838391
GPR[EPVAP]-1659894839660
GPR[EPVS]-1659894839660
========
if(j>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894839662
GPR[SPVAP]-1659894839662
GPR[EPVAP]-1659894840905
GPR[EPVS]-1659894840905
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.report("\\>");
}else {
sb.report(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894840908
GPR[SPVAP]-1659894840908
GPR[EPVAP]-1659894842164
GPR[EPVS]-1659894842164
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.report("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894842166
GPR[SPVAP]-1659894842166
GPR[EPVAP]-1659894843433
GPR[EPVS]-1659894843433
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.report(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894843434
GPR[SPVAP]-1659894843434
GPR[EPVAP]-1659894844691
GPR[EPVS]-1659894844691
========
if(j>=1&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894844693
GPR[SPVAP]-1659894844693
GPR[EPVAP]-1659894845986
GPR[EPVS]-1659894845986
========
if(i>10){
quote=(char)('a'+radix-10);
quote=(char)('A'+radix-10);
}
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894845988
GPR[SPVAP]-1659894845988
GPR[EPVAP]-1659894847252
GPR[EPVS]-1659894847252
========
if(i>=2&&peekToken()==Token.NAME){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894847253
GPR[SPVAP]-1659894847253
GPR[EPVAP]-1659894848531
GPR[EPVS]-1659894848531
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
bag=new Object[L-1];
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894848533
GPR[SPVAP]-1659894848533
GPR[EPVAP]-1659894849824
GPR[EPVS]-1659894849824
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
bag=new Object[L-1];
break;

sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894849825
GPR[SPVAP]-1659894849825
GPR[EPVAP]-1659894851064
GPR[EPVS]-1659894851064
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
bag=new Object[L-1];
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894851065
GPR[SPVAP]-1659894851065
GPR[EPVAP]-1659894852305
GPR[EPVS]-1659894852305
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
bag=new Object[L-1];
break;

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894852307
GPR[SPVAP]-1659894852307
GPR[EPVAP]-1659894853553
GPR[EPVS]-1659894853553
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
break;
sb.append("\\>");
}else {
break;
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894853554
GPR[SPVAP]-1659894853554
GPR[EPVAP]-1659894854800
GPR[EPVS]-1659894854800
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
return 0;
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894854802
GPR[SPVAP]-1659894854802
GPR[EPVAP]-1659894856075
GPR[EPVS]-1659894856075
========
if(open>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894856077
GPR[SPVAP]-1659894856077
GPR[EPVAP]-1659894857319
GPR[EPVS]-1659894857319
========
if(close>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894857320
GPR[SPVAP]-1659894857320
GPR[EPVAP]-1659894858578
GPR[EPVS]-1659894858578
========
if(colon>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894858579
GPR[SPVAP]-1659894858579
GPR[EPVAP]-1659894859816
GPR[EPVS]-1659894859816
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
open=close=colon=-1;
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894859818
GPR[SPVAP]-1659894859818
GPR[EPVAP]-1659894861077
GPR[EPVS]-1659894861077
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
open=close=colon=-1;
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894861079
GPR[SPVAP]-1659894861079
GPR[EPVAP]-1659894862338
GPR[EPVS]-1659894862338
========
if(i>=2&&i!=DELETED){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894862340
GPR[SPVAP]-1659894862340
GPR[EPVAP]-1659894863575
GPR[EPVS]-1659894863575
========
if(entry>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894863576
GPR[SPVAP]-1659894863576
GPR[EPVAP]-1659894864868
GPR[EPVS]-1659894864868
========
if(i>=EMPTY&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894864869
GPR[SPVAP]-1659894864869
GPR[EPVAP]-1659894866121
GPR[EPVS]-1659894866121
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
globalNames.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894866122
GPR[SPVAP]-1659894866122
GPR[EPVAP]-1659894867400
GPR[EPVS]-1659894867400
========
if(i>=2&&i==i){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894867402
GPR[SPVAP]-1659894867402
GPR[EPVAP]-1659894870050
GPR[SPVATF]-1659894870051
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894872385
GPR[EPVS]-1659894872385
========
if(i>0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894872387
GPR[SPVAP]-1659894872387
GPR[EPVAP]-1659894875119
GPR[SPVATF]-1659894875119
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894877448
GPR[EPVS]-1659894877448
========
if(m2>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894877450
GPR[SPVAP]-1659894877450
GPR[EPVAP]-1659894878708
GPR[EPVS]-1659894878708
========
if(key>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894878711
GPR[SPVAP]-1659894878711
GPR[EPVAP]-1659894879987
GPR[EPVS]-1659894879987
========
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.writeInt(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894879988
GPR[SPVAP]-1659894879988
GPR[EPVAP]-1659894881231
GPR[EPVS]-1659894881231
========
if(i>=EMPTY&&i!=DELETED){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894881232
GPR[SPVAP]-1659894881232
GPR[EPVAP]-1659894882497
GPR[EPVS]-1659894882497
========
if(i>=2&&c<quote){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894882502
GPR[SPVAP]-1659894882502
GPR[EPVAP]-1659894885165
GPR[SPVATF]-1659894885165
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894887486
GPR[EPVS]-1659894887486
========
case 2 :

if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894887488
GPR[SPVAP]-1659894887488
GPR[EPVAP]-1659894890181
GPR[SPVATF]-1659894890181
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894892520
GPR[EPVS]-1659894892520
========
case 2 :

if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
break;
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894892522
GPR[SPVAP]-1659894892522
GPR[EPVAP]-1659894893786
GPR[EPVS]-1659894893786
========
HEX_CHARS[i]=c;
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894893788
GPR[SPVAP]-1659894893788
GPR[EPVAP]-1659894896429
GPR[SPVATF]-1659894896429
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894898802
GPR[EPVS]-1659894898802
========
++i;
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894898804
GPR[SPVAP]-1659894898804
GPR[EPVAP]-1659894901490
GPR[SPVATF]-1659894901490
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894903801
GPR[EPVS]-1659894903801
========
HEX_CHARS[i]=c;
++i;
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659894903803
GPR[SPVAP]-1659894903803
GPR[EPVAP]-1659894906460
GPR[SPVATF]-1659894906460
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894908785
GPR[EPVS]-1659894908785
========
case ' ' :
String Integer.toString(c,16)=Integer.toString(c,16);
sb.append(s,i,i).append("\\u").append("0000",hex.length(),4).append(hex);
pos=i+1;
break;

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659894910461
GPR[SPVAP]-1659894910461
GPR[EPVAP]-1659894911552
GPR[EPVS]-1659894911552
========
case '>' :
i++;
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894911554
GPR[SPVAP]-1659894911554
GPR[EPVAP]-1659894914249
GPR[SPVATF]-1659894914249
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894916589
GPR[EPVS]-1659894916589
========
case '>' :
sb.append("\\r");
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894916592
GPR[SPVAP]-1659894916592
GPR[EPVAP]-1659894919265
GPR[SPVATF]-1659894919265
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894921597
GPR[EPVS]-1659894921597
========
case '>' :
sb.append("\\n");
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894921598
GPR[SPVAP]-1659894921598
GPR[EPVAP]-1659894924275
GPR[SPVATF]-1659894924275
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894926608
GPR[EPVS]-1659894926608
========
case '>' :
sb.append("\\u2028");
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894926609
GPR[SPVAP]-1659894926609
GPR[EPVAP]-1659894929301
GPR[SPVATF]-1659894929301
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894931640
GPR[EPVS]-1659894931640
========
case '>' :
sb.append("\\u2029");
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894931641
GPR[SPVAP]-1659894931641
GPR[EPVAP]-1659894934292
GPR[SPVATF]-1659894934292
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894936596
GPR[EPVS]-1659894936596
========
case '>' :
++i;
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894936598
GPR[SPVAP]-1659894936598
GPR[EPVAP]-1659894939275
GPR[SPVATF]-1659894939275
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894941621
GPR[EPVS]-1659894941621
========
case FUNCTION_END :

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659894941622
GPR[SPVAP]-1659894941622
GPR[EPVAP]-1659894942889
GPR[EPVS]-1659894942889
========
case Token.NUMBER :

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659894942890
GPR[SPVAP]-1659894942890
GPR[EPVAP]-1659894944130
GPR[EPVS]-1659894944130
========
case Token.NAME :

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659894944133
GPR[SPVAP]-1659894944133
GPR[EPVAP]-1659894946777
GPR[SPVATF]-1659894946777
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894949102
GPR[EPVS]-1659894949102
========
case 1 :
i=i=-1;
i=18;
i=0;
break;

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659894949104
GPR[SPVAP]-1659894949104
GPR[EPVAP]-1659894951766
GPR[SPVATF]-1659894951766
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894954079
GPR[EPVS]-1659894954079
========
case 2 :

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659894954081
GPR[SPVAP]-1659894954081
GPR[EPVAP]-1659894956749
GPR[SPVATF]-1659894956749
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894959067
GPR[EPVS]-1659894959067
========
case 1 :
i=i=-1;
i=18;
i=0;
break;

case 2 :

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659894959068
GPR[SPVAP]-1659894959068
GPR[EPVAP]-1659894961767
GPR[SPVATF]-1659894961767
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894964062
GPR[EPVS]-1659894964062
========
case '>' :
if(i>=2&&i<=9){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659894964065
GPR[SPVAP]-1659894964065
GPR[EPVAP]-1659894966709
GPR[SPVATF]-1659894966709
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894969081
GPR[EPVS]-1659894969081
========
case '>' :
indent-=i;
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894969082
GPR[SPVAP]-1659894969082
GPR[EPVAP]-1659894970345
GPR[EPVS]-1659894970345
========
case '>' :
if(j>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659894970347
GPR[SPVAP]-1659894970347
GPR[EPVAP]-1659894971596
GPR[EPVS]-1659894971596
========
case '>' :
if(i>=1&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659894971598
GPR[SPVAP]-1659894971598
GPR[EPVAP]-1659894974252
GPR[SPVATF]-1659894974252
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894976558
GPR[EPVS]-1659894976558
========
case '>' :
if(i<=0)ndigits=1;
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894976560
GPR[SPVAP]-1659894976560
GPR[EPVAP]-1659894977804
GPR[EPVS]-1659894977804
========
case '>' :
ilim=ilim1=i=i;
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894977806
GPR[SPVAP]-1659894977806
GPR[EPVAP]-1659894979066
GPR[EPVS]-1659894979066
========
case '>' :
if(i<=0)ndigits=1;
ilim=ilim1=i=i;

if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894979068
GPR[SPVAP]-1659894979068
GPR[EPVAP]-1659894980310
GPR[EPVS]-1659894980310
========
case 3 :

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659894980312
GPR[SPVAP]-1659894980312
GPR[EPVAP]-1659894982963
GPR[SPVATF]-1659894982963
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894985280
GPR[EPVS]-1659894985280
========
case '>' :
if(i>=2&&c>'9'){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659894985282
GPR[SPVAP]-1659894985282
GPR[EPVAP]-1659894987958
GPR[SPVATF]-1659894987958
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894990269
GPR[EPVS]-1659894990269
========
case '>' :
ilim=i;
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894990272
GPR[SPVAP]-1659894990272
GPR[EPVAP]-1659894991517
GPR[EPVS]-1659894991517
========
case '>' :
ilim1=i-1;
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894991518
GPR[SPVAP]-1659894991518
GPR[EPVAP]-1659894992768
GPR[EPVS]-1659894992768
========
case '>' :
ilim=i;
ilim1=i-1;

if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894992782
GPR[SPVAP]-1659894992782
GPR[EPVAP]-1659894994024
GPR[EPVS]-1659894994024
========
case '>' :
c=s.charAt(0);
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894994026
GPR[SPVAP]-1659894994026
GPR[EPVAP]-1659894996709
GPR[SPVATF]-1659894996709
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659894999023
GPR[EPVS]-1659894999023
========
case '>' :
c=s.charAt(1);
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659894999024
GPR[SPVAP]-1659894999024
GPR[EPVAP]-1659895001712
GPR[SPVATF]-1659895001712
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895004064
GPR[EPVS]-1659895004064
========
case '>' :
if(j>=1&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895004067
GPR[SPVAP]-1659895004067
GPR[EPVAP]-1659895005339
GPR[EPVS]-1659895005339
========
case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
bag=new Object[L-1];
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895005342
GPR[SPVAP]-1659895005342
GPR[EPVAP]-1659895006582
GPR[EPVS]-1659895006583
========
case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
break;
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895006584
GPR[SPVAP]-1659895006584
GPR[EPVAP]-1659895007839
GPR[EPVS]-1659895007839
========
case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
bag=new Object[L-1];
break;

sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895007840
GPR[SPVAP]-1659895007840
GPR[EPVAP]-1659895009082
GPR[EPVS]-1659895009082
========
case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
bag=new Object[L-1];
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895009083
GPR[SPVAP]-1659895009083
GPR[EPVAP]-1659895010340
GPR[EPVS]-1659895010340
========
case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
break;
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895010341
GPR[SPVAP]-1659895010341
GPR[EPVAP]-1659895011595
GPR[EPVS]-1659895011595
========
case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
bag=new Object[L-1];
break;

sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895011597
GPR[SPVAP]-1659895011597
GPR[EPVAP]-1659895012837
GPR[EPVS]-1659895012837
========
case '>' :
if(i>=2&&i!=DELETED){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895012840
GPR[SPVAP]-1659895012840
GPR[EPVAP]-1659895014081
GPR[EPVS]-1659895014081
========
case '>' :
if(entry>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895014082
GPR[SPVAP]-1659895014082
GPR[EPVAP]-1659895015325
GPR[EPVS]-1659895015325
========
case '>' :
if(i>=EMPTY&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895015327
GPR[SPVAP]-1659895015327
GPR[EPVAP]-1659895016588
GPR[EPVS]-1659895016588
========
consumeToken();
case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895016590
GPR[SPVAP]-1659895016590
GPR[EPVAP]-1659895017868
GPR[EPVS]-1659895017869
========
case '>' :
if(i>=2&&i==i){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895017871
GPR[SPVAP]-1659895017871
GPR[EPVAP]-1659895020496
GPR[SPVATF]-1659895020497
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895022815
GPR[EPVS]-1659895022815
========
if(i==0){
return s;
}
case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895022817
GPR[SPVAP]-1659895022817
GPR[EPVAP]-1659895024067
GPR[EPVS]-1659895024068
========
case Token.DIV :

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895024070
GPR[SPVAP]-1659895024070
GPR[EPVAP]-1659895026722
GPR[SPVATF]-1659895026722
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895029053
GPR[EPVS]-1659895029053
========
case Token.MUL :

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895029055
GPR[SPVAP]-1659895029055
GPR[EPVAP]-1659895031731
GPR[SPVATF]-1659895031731
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895034105
GPR[EPVS]-1659895034105
========
case '>' :
sb.append("    ");
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659895034107
GPR[SPVAP]-1659895034107
GPR[EPVAP]-1659895036797
GPR[SPVATF]-1659895036797
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895039101
GPR[EPVS]-1659895039101
========
case '>' :
sb.append(backslashEscape);
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659895039103
GPR[SPVAP]-1659895039103
GPR[EPVAP]-1659895041769
GPR[SPVATF]-1659895041769
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895044077
GPR[EPVS]-1659895044077
========
case '\"' :

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895044079
GPR[SPVAP]-1659895044079
GPR[EPVAP]-1659895045324
GPR[EPVS]-1659895045324
========
case '>' :
sb.append(singlequoteEscape);
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659895045326
GPR[SPVAP]-1659895045326
GPR[EPVAP]-1659895047965
GPR[SPVATF]-1659895047965
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895050325
GPR[EPVS]-1659895050325
========
case '>' :

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895050326
GPR[SPVAP]-1659895050326
GPR[EPVAP]-1659895051593
GPR[EPVS]-1659895051593
========
case '>' :
if(key>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895051595
GPR[SPVAP]-1659895051595
GPR[EPVAP]-1659895052864
GPR[EPVS]-1659895052864
========
case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.writeInt(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895052866
GPR[SPVAP]-1659895052866
GPR[EPVAP]-1659895054127
GPR[EPVS]-1659895054127
========
case '>' :
if(i>=EMPTY&&i!=DELETED){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895054128
GPR[SPVAP]-1659895054128
GPR[EPVAP]-1659895055379
GPR[EPVS]-1659895055379
========
case '>' :
sb.append("\\0");
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659895055382
GPR[SPVAP]-1659895055382
GPR[EPVAP]-1659895058040
GPR[SPVATF]-1659895058040
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895060390
GPR[EPVS]-1659895060390
========
case '\n' :

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895060391
GPR[SPVAP]-1659895060391
GPR[EPVAP]-1659895061655
GPR[EPVS]-1659895061655
========
case '\t' :

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895061656
GPR[SPVAP]-1659895061656
GPR[EPVAP]-1659895062912
GPR[EPVS]-1659895062912
========
case '>' :
sb.append(" ");
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659895062914
GPR[SPVAP]-1659895062914
GPR[EPVAP]-1659895065563
GPR[SPVATF]-1659895065563
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895067885
GPR[EPVS]-1659895067885
========
case 2 :

case '>' :
sb.append(" ");
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659895067886
GPR[SPVAP]-1659895067886
GPR[EPVAP]-1659895070563
GPR[SPVATF]-1659895070563
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895072895
GPR[EPVS]-1659895072895
========
case '\r' :

case '>' :
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659895072897
GPR[SPVAP]-1659895072897
GPR[EPVAP]-1659895074144
GPR[EPVS]-1659895074144
========
case '\"' :

case '>' :
sb.append(backslashEscape);
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659895074147
GPR[SPVAP]-1659895074147
GPR[EPVAP]-1659895075404
GPR[EPVS]-1659895075404
========
case '>' :

case '>' :
sb.append(singlequoteEscape);
if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659895075406
GPR[SPVAP]-1659895075406
GPR[EPVAP]-1659895076656
GPR[EPVS]-1659895076656
========
if(wrapper.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895078895
GPR[SPVAP]-1659895078895
GPR[EPVAP]-1659895080167
GPR[EPVS]-1659895080167
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
message.append("<\\");
}else {
message.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895080169
GPR[SPVAP]-1659895080169
GPR[EPVAP]-1659895081400
GPR[EPVS]-1659895081400
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
message.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895081401
GPR[SPVAP]-1659895081401
GPR[EPVAP]-1659895082650
GPR[EPVS]-1659895082650
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
message.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895082651
GPR[SPVAP]-1659895082651
GPR[EPVAP]-1659895083898
GPR[EPVS]-1659895083898
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895083900
GPR[SPVAP]-1659895083900
GPR[EPVAP]-1659895085140
GPR[EPVS]-1659895085140
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895085142
GPR[SPVAP]-1659895085142
GPR[EPVAP]-1659895086379
GPR[EPVS]-1659895086379
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895086380
GPR[SPVAP]-1659895086380
GPR[EPVAP]-1659895087642
GPR[EPVS]-1659895087642
========
if(prototypeNames.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895087643
GPR[SPVAP]-1659895087643
GPR[EPVAP]-1659895088915
GPR[EPVS]-1659895088915
========
sb.append("<li>"+nameAnchor(node.name));
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895088916
GPR[SPVAP]-1659895088916
GPR[EPVAP]-1659895090209
GPR[EPVS]-1659895090209
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
b.append("<\\");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895090211
GPR[SPVAP]-1659895090211
GPR[EPVAP]-1659895091468
GPR[EPVS]-1659895091468
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
b.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895091469
GPR[SPVAP]-1659895091469
GPR[EPVAP]-1659895092733
GPR[EPVS]-1659895092733
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
b.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895092734
GPR[SPVAP]-1659895092734
GPR[EPVAP]-1659895093997
GPR[EPVS]-1659895093997
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895093998
GPR[SPVAP]-1659895093998
GPR[EPVAP]-1659895096635
GPR[SPVATF]-1659895096635
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895098981
GPR[EPVS]-1659895098981
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895098982
GPR[SPVAP]-1659895098982
GPR[EPVAP]-1659895101658
GPR[SPVATF]-1659895101658
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895103968
GPR[EPVS]-1659895103968
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895103970
GPR[SPVAP]-1659895103970
GPR[EPVAP]-1659895106649
GPR[SPVATF]-1659895106649
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895108969
GPR[EPVS]-1659895108969
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895108970
GPR[SPVAP]-1659895108970
GPR[EPVAP]-1659895111676
GPR[SPVATF]-1659895111677
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895114019
GPR[EPVS]-1659895114019
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895114021
GPR[SPVAP]-1659895114021
GPR[EPVAP]-1659895116693
GPR[SPVATF]-1659895116693
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895119022
GPR[EPVS]-1659895119022
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895119024
GPR[SPVAP]-1659895119024
GPR[EPVAP]-1659895121691
GPR[SPVATF]-1659895121691
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895124001
GPR[EPVS]-1659895124001
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895124002
GPR[SPVAP]-1659895124002
GPR[EPVAP]-1659895126667
GPR[SPVATF]-1659895126667
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895129041
GPR[EPVS]-1659895129041
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895129042
GPR[SPVAP]-1659895129042
GPR[EPVAP]-1659895130285
GPR[EPVS]-1659895130285
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895130287
GPR[SPVAP]-1659895130287
GPR[EPVAP]-1659895131529
GPR[EPVS]-1659895131529
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895131531
GPR[SPVAP]-1659895131531
GPR[EPVAP]-1659895132772
GPR[EPVS]-1659895132772
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895132773
GPR[SPVAP]-1659895132773
GPR[EPVAP]-1659895134022
GPR[EPVS]-1659895134022
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895134024
GPR[SPVAP]-1659895134024
GPR[EPVAP]-1659895135275
GPR[EPVS]-1659895135275
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895135277
GPR[SPVAP]-1659895135277
GPR[EPVAP]-1659895136516
GPR[EPVS]-1659895136516
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895136518
GPR[SPVAP]-1659895136518
GPR[EPVAP]-1659895137764
GPR[EPVS]-1659895137764
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895137766
GPR[SPVAP]-1659895137766
GPR[EPVAP]-1659895139028
GPR[EPVS]-1659895139028
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895139030
GPR[SPVAP]-1659895139030
GPR[EPVAP]-1659895140329
GPR[EPVS]-1659895140329
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895140330
GPR[SPVAP]-1659895140330
GPR[EPVAP]-1659895141567
GPR[EPVS]-1659895141567
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895141569
GPR[SPVAP]-1659895141569
GPR[EPVAP]-1659895142816
GPR[EPVS]-1659895142816
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895142818
GPR[SPVAP]-1659895142818
GPR[EPVAP]-1659895144060
GPR[EPVS]-1659895144060
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895144062
GPR[SPVAP]-1659895144062
GPR[EPVAP]-1659895145315
GPR[EPVS]-1659895145315
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895145316
GPR[SPVAP]-1659895145316
GPR[EPVAP]-1659895146551
GPR[EPVS]-1659895146551
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895146554
GPR[SPVAP]-1659895146554
GPR[EPVAP]-1659895149412
GPR[SPVATF]-1659895149412
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895151761
GPR[EPVS]-1659895151761
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895151763
GPR[SPVAP]-1659895151763
GPR[EPVAP]-1659895154519
GPR[SPVATF]-1659895154519
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895156836
GPR[EPVS]-1659895156836
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895156838
GPR[SPVAP]-1659895156838
GPR[EPVAP]-1659895159555
GPR[SPVATF]-1659895159555
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895161923
GPR[EPVS]-1659895161923
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895161925
GPR[SPVAP]-1659895161925
GPR[EPVAP]-1659895164572
GPR[SPVATF]-1659895164572
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895166921
GPR[EPVS]-1659895166921
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895166922
GPR[SPVAP]-1659895166923
GPR[EPVAP]-1659895169579
GPR[SPVATF]-1659895169579
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895171913
GPR[EPVS]-1659895171913
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895171915
GPR[SPVAP]-1659895171915
GPR[EPVAP]-1659895174633
GPR[SPVATF]-1659895174633
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895176999
GPR[EPVS]-1659895176999
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895177001
GPR[SPVAP]-1659895177001
GPR[EPVAP]-1659895179675
GPR[SPVATF]-1659895179675
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895182005
GPR[EPVS]-1659895182005
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895182006
GPR[SPVAP]-1659895182006
GPR[EPVAP]-1659895184657
GPR[SPVATF]-1659895184657
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895187009
GPR[EPVS]-1659895187009
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895187011
GPR[SPVAP]-1659895187011
GPR[EPVAP]-1659895189686
GPR[SPVATF]-1659895189686
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895192063
GPR[EPVS]-1659895192063
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895192064
GPR[SPVAP]-1659895192064
GPR[EPVAP]-1659895194805
GPR[SPVATF]-1659895194805
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895197129
GPR[EPVS]-1659895197129
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895197131
GPR[SPVAP]-1659895197131
GPR[EPVAP]-1659895199792
GPR[SPVATF]-1659895199792
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895202112
GPR[EPVS]-1659895202112
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895202113
GPR[SPVAP]-1659895202113
GPR[EPVAP]-1659895204761
GPR[SPVATF]-1659895204761
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895207082
GPR[EPVS]-1659895207083
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895207084
GPR[SPVAP]-1659895207084
GPR[EPVAP]-1659895209742
GPR[SPVATF]-1659895209742
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895212048
GPR[EPVS]-1659895212048
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895212049
GPR[SPVAP]-1659895212049
GPR[EPVAP]-1659895214725
GPR[SPVATF]-1659895214725
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895217054
GPR[EPVS]-1659895217054
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895217055
GPR[SPVAP]-1659895217055
GPR[EPVAP]-1659895219761
GPR[SPVATF]-1659895219761
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895222140
GPR[EPVS]-1659895222140
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895222142
GPR[SPVAP]-1659895222142
GPR[EPVAP]-1659895224794
GPR[SPVATF]-1659895224794
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895227153
GPR[EPVS]-1659895227153
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895227155
GPR[SPVAP]-1659895227155
GPR[EPVAP]-1659895229857
GPR[SPVATF]-1659895229857
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895232206
GPR[EPVS]-1659895232206
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895232208
GPR[SPVAP]-1659895232208
GPR[EPVAP]-1659895234856
GPR[SPVATF]-1659895234856
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895237250
GPR[EPVS]-1659895237250
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895237252
GPR[SPVAP]-1659895237252
GPR[EPVAP]-1659895239921
GPR[SPVATF]-1659895239921
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895242302
GPR[EPVS]-1659895242302
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895242303
GPR[SPVAP]-1659895242303
GPR[EPVAP]-1659895244989
GPR[SPVATF]-1659895244989
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895247340
GPR[EPVS]-1659895247340
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895247342
GPR[SPVAP]-1659895247342
GPR[EPVAP]-1659895250006
GPR[SPVATF]-1659895250006
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895252348
GPR[EPVS]-1659895252348
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895252349
GPR[SPVAP]-1659895252349
GPR[EPVAP]-1659895253610
GPR[EPVS]-1659895253610
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895253611
GPR[SPVAP]-1659895253611
GPR[EPVAP]-1659895254867
GPR[EPVS]-1659895254867
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895254868
GPR[SPVAP]-1659895254868
GPR[EPVAP]-1659895256119
GPR[EPVS]-1659895256119
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895256121
GPR[SPVAP]-1659895256121
GPR[EPVAP]-1659895257373
GPR[EPVS]-1659895257373
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895257374
GPR[SPVAP]-1659895257374
GPR[EPVAP]-1659895258622
GPR[EPVS]-1659895258622
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895258624
GPR[SPVAP]-1659895258624
GPR[EPVAP]-1659895259867
GPR[EPVS]-1659895259867
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895259868
GPR[SPVAP]-1659895259868
GPR[EPVAP]-1659895261138
GPR[EPVS]-1659895261138
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895261139
GPR[SPVAP]-1659895261139
GPR[EPVAP]-1659895262380
GPR[EPVS]-1659895262380
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895262381
GPR[SPVAP]-1659895262381
GPR[EPVAP]-1659895263620
GPR[EPVS]-1659895263620
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895263622
GPR[SPVAP]-1659895263622
GPR[EPVAP]-1659895264884
GPR[EPVS]-1659895264884
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895264885
GPR[SPVAP]-1659895264885
GPR[EPVAP]-1659895266128
GPR[EPVS]-1659895266128
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895266129
GPR[SPVAP]-1659895266129
GPR[EPVAP]-1659895267368
GPR[EPVS]-1659895267368
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895267370
GPR[SPVAP]-1659895267370
GPR[EPVAP]-1659895268671
GPR[EPVS]-1659895268671
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895268672
GPR[SPVAP]-1659895268672
GPR[EPVAP]-1659895269908
GPR[EPVS]-1659895269908
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895269910
GPR[SPVAP]-1659895269910
GPR[EPVAP]-1659895271176
GPR[EPVS]-1659895271176
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895271177
GPR[SPVAP]-1659895271177
GPR[EPVAP]-1659895272429
GPR[EPVS]-1659895272429
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895272430
GPR[SPVAP]-1659895272430
GPR[EPVAP]-1659895273676
GPR[EPVS]-1659895273676
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895273678
GPR[SPVAP]-1659895273678
GPR[EPVAP]-1659895274945
GPR[EPVS]-1659895274945
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895274946
GPR[SPVAP]-1659895274946
GPR[EPVAP]-1659895276204
GPR[EPVS]-1659895276204
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895276206
GPR[SPVAP]-1659895276206
GPR[EPVAP]-1659895277452
GPR[EPVS]-1659895277452
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895277453
GPR[SPVAP]-1659895277453
GPR[EPVAP]-1659895278700
GPR[EPVS]-1659895278700
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895278702
GPR[SPVAP]-1659895278702
GPR[EPVAP]-1659895279952
GPR[EPVS]-1659895279952
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895279953
GPR[SPVAP]-1659895279953
GPR[EPVAP]-1659895281191
GPR[EPVS]-1659895281191
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895281193
GPR[SPVAP]-1659895281193
GPR[EPVAP]-1659895282437
GPR[EPVS]-1659895282437
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895282439
GPR[SPVAP]-1659895282439
GPR[EPVAP]-1659895283699
GPR[EPVS]-1659895283699
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895283701
GPR[SPVAP]-1659895283701
GPR[EPVAP]-1659895284947
GPR[EPVS]-1659895284947
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895284949
GPR[SPVAP]-1659895284949
GPR[EPVAP]-1659895286195
GPR[EPVS]-1659895286195
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895286196
GPR[SPVAP]-1659895286196
GPR[EPVAP]-1659895287443
GPR[EPVS]-1659895287443
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895287444
GPR[SPVAP]-1659895287444
GPR[EPVAP]-1659895288713
GPR[EPVS]-1659895288713
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895288715
GPR[SPVAP]-1659895288715
GPR[EPVAP]-1659895289965
GPR[EPVS]-1659895289965
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895289966
GPR[SPVAP]-1659895289966
GPR[EPVAP]-1659895291215
GPR[EPVS]-1659895291215
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895291217
GPR[SPVAP]-1659895291217
GPR[EPVAP]-1659895292476
GPR[EPVS]-1659895292476
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895292478
GPR[SPVAP]-1659895292478
GPR[EPVAP]-1659895293733
GPR[EPVS]-1659895293733
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895293735
GPR[SPVAP]-1659895293735
GPR[EPVAP]-1659895294984
GPR[EPVS]-1659895294984
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895294986
GPR[SPVAP]-1659895294986
GPR[EPVAP]-1659895296240
GPR[EPVS]-1659895296240
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895296242
GPR[SPVAP]-1659895296242
GPR[EPVAP]-1659895297505
GPR[EPVS]-1659895297505
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895297506
GPR[SPVAP]-1659895297506
GPR[EPVAP]-1659895298772
GPR[EPVS]-1659895298772
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895298773
GPR[SPVAP]-1659895298773
GPR[EPVAP]-1659895300007
GPR[EPVS]-1659895300007
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895300008
GPR[SPVAP]-1659895300008
GPR[EPVAP]-1659895301264
GPR[EPVS]-1659895301264
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895301265
GPR[SPVAP]-1659895301265
GPR[EPVAP]-1659895302584
GPR[EPVS]-1659895302584
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895302585
GPR[SPVAP]-1659895302585
GPR[EPVAP]-1659895303832
GPR[EPVS]-1659895303832
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895303833
GPR[SPVAP]-1659895303833
GPR[EPVAP]-1659895305112
GPR[EPVS]-1659895305112
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895305114
GPR[SPVAP]-1659895305114
GPR[EPVAP]-1659895306357
GPR[EPVS]-1659895306357
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895306358
GPR[SPVAP]-1659895306358
GPR[EPVAP]-1659895307611
GPR[EPVS]-1659895307611
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895307613
GPR[SPVAP]-1659895307613
GPR[EPVAP]-1659895308900
GPR[EPVS]-1659895308900
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895308902
GPR[SPVAP]-1659895308902
GPR[EPVAP]-1659895310155
GPR[EPVS]-1659895310155
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895310157
GPR[SPVAP]-1659895310157
GPR[EPVAP]-1659895311426
GPR[EPVS]-1659895311426
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895311428
GPR[SPVAP]-1659895311428
GPR[EPVAP]-1659895312668
GPR[EPVS]-1659895312668
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895312669
GPR[SPVAP]-1659895312669
GPR[EPVAP]-1659895313918
GPR[EPVS]-1659895313918
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895313920
GPR[SPVAP]-1659895313920
GPR[EPVAP]-1659895316645
GPR[SPVATF]-1659895316645
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895319021
GPR[EPVS]-1659895319021
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895319023
GPR[SPVAP]-1659895319023
GPR[EPVAP]-1659895321699
GPR[SPVATF]-1659895321699
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895324017
GPR[EPVS]-1659895324017
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895324018
GPR[SPVAP]-1659895324018
GPR[EPVAP]-1659895326674
GPR[SPVATF]-1659895326674
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895329038
GPR[EPVS]-1659895329038
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895329039
GPR[SPVAP]-1659895329039
GPR[EPVAP]-1659895331692
GPR[SPVATF]-1659895331692
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895334019
GPR[EPVS]-1659895334019
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895334021
GPR[SPVAP]-1659895334021
GPR[EPVAP]-1659895336717
GPR[SPVATF]-1659895336717
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895339020
GPR[EPVS]-1659895339020
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895339021
GPR[SPVAP]-1659895339021
GPR[EPVAP]-1659895341691
GPR[SPVATF]-1659895341691
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895344033
GPR[EPVS]-1659895344033
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895344035
GPR[SPVAP]-1659895344035
GPR[EPVAP]-1659895346686
GPR[SPVATF]-1659895346686
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895349016
GPR[EPVS]-1659895349016
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895349018
GPR[SPVAP]-1659895349018
GPR[EPVAP]-1659895351681
GPR[SPVATF]-1659895351681
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895354041
GPR[EPVS]-1659895354041
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895354042
GPR[SPVAP]-1659895354042
GPR[EPVAP]-1659895356697
GPR[SPVATF]-1659895356697
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895358999
GPR[EPVS]-1659895358999
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895359000
GPR[SPVAP]-1659895359000
GPR[EPVAP]-1659895361650
GPR[SPVATF]-1659895361650
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895363948
GPR[EPVS]-1659895363948
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895363950
GPR[SPVAP]-1659895363950
GPR[EPVAP]-1659895366632
GPR[SPVATF]-1659895366632
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895368989
GPR[EPVS]-1659895368989
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895368991
GPR[SPVAP]-1659895368991
GPR[EPVAP]-1659895371656
GPR[SPVATF]-1659895371656
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895374003
GPR[EPVS]-1659895374003
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895374004
GPR[SPVAP]-1659895374004
GPR[EPVAP]-1659895376694
GPR[SPVATF]-1659895376694
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895379097
GPR[EPVS]-1659895379097
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895379099
GPR[SPVAP]-1659895379099
GPR[EPVAP]-1659895381779
GPR[SPVATF]-1659895381779
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895384111
GPR[EPVS]-1659895384111
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895384113
GPR[SPVAP]-1659895384113
GPR[EPVAP]-1659895386778
GPR[SPVATF]-1659895386778
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895389110
GPR[EPVS]-1659895389110
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895389111
GPR[SPVAP]-1659895389111
GPR[EPVAP]-1659895391806
GPR[SPVATF]-1659895391806
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895394164
GPR[EPVS]-1659895394164
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895394165
GPR[SPVAP]-1659895394165
GPR[EPVAP]-1659895396817
GPR[SPVATF]-1659895396817
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895399112
GPR[EPVS]-1659895399112
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895399113
GPR[SPVAP]-1659895399113
GPR[EPVAP]-1659895401798
GPR[SPVATF]-1659895401798
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895404150
GPR[EPVS]-1659895404150
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895404151
GPR[SPVAP]-1659895404151
GPR[EPVAP]-1659895406820
GPR[SPVATF]-1659895406820
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895409141
GPR[EPVS]-1659895409141
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895409143
GPR[SPVAP]-1659895409143
GPR[EPVAP]-1659895411790
GPR[SPVATF]-1659895411790
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895414148
GPR[EPVS]-1659895414148
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895414149
GPR[SPVAP]-1659895414149
GPR[EPVAP]-1659895416847
GPR[SPVATF]-1659895416847
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895419163
GPR[EPVS]-1659895419163
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895419164
GPR[SPVAP]-1659895419164
GPR[EPVAP]-1659895421852
GPR[SPVATF]-1659895421852
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895424232
GPR[EPVS]-1659895424232
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895424234
GPR[SPVAP]-1659895424234
GPR[EPVAP]-1659895426901
GPR[SPVATF]-1659895426901
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895429229
GPR[EPVS]-1659895429229
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895429231
GPR[SPVAP]-1659895429231
GPR[EPVAP]-1659895431929
GPR[SPVATF]-1659895431929
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895434233
GPR[EPVS]-1659895434233
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895434234
GPR[SPVAP]-1659895434234
GPR[EPVAP]-1659895436905
GPR[SPVATF]-1659895436905
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895439243
GPR[EPVS]-1659895439243
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895439244
GPR[SPVAP]-1659895439244
GPR[EPVAP]-1659895441897
GPR[SPVATF]-1659895441897
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895444227
GPR[EPVS]-1659895444227
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895444228
GPR[SPVAP]-1659895444228
GPR[EPVAP]-1659895446919
GPR[SPVATF]-1659895446919
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895449261
GPR[EPVS]-1659895449261
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895449262
GPR[SPVAP]-1659895449262
GPR[EPVAP]-1659895451924
GPR[SPVATF]-1659895451924
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895454313
GPR[EPVS]-1659895454313
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895454315
GPR[SPVAP]-1659895454315
GPR[EPVAP]-1659895456981
GPR[SPVATF]-1659895456981
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895459313
GPR[EPVS]-1659895459313
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895459314
GPR[SPVAP]-1659895459314
GPR[EPVAP]-1659895461985
GPR[SPVATF]-1659895461985
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895464319
GPR[EPVS]-1659895464319
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895464320
GPR[SPVAP]-1659895464320
GPR[EPVAP]-1659895467029
GPR[SPVATF]-1659895467029
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895469325
GPR[EPVS]-1659895469325
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895469327
GPR[SPVAP]-1659895469327
GPR[EPVAP]-1659895471980
GPR[SPVATF]-1659895471980
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895474304
GPR[EPVS]-1659895474304
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895474305
GPR[SPVAP]-1659895474305
GPR[EPVAP]-1659895476997
GPR[SPVATF]-1659895476997
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895479278
GPR[EPVS]-1659895479278
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895479279
GPR[SPVAP]-1659895479279
GPR[EPVAP]-1659895481938
GPR[SPVATF]-1659895481938
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895484266
GPR[EPVS]-1659895484266
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895484267
GPR[SPVAP]-1659895484267
GPR[EPVAP]-1659895486927
GPR[SPVATF]-1659895486927
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895489252
GPR[EPVS]-1659895489252
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895489254
GPR[SPVAP]-1659895489254
GPR[EPVAP]-1659895490525
GPR[EPVS]-1659895490525
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895490526
GPR[SPVAP]-1659895490526
GPR[EPVAP]-1659895491771
GPR[EPVS]-1659895491771
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895491773
GPR[SPVAP]-1659895491773
GPR[EPVAP]-1659895493027
GPR[EPVS]-1659895493027
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895493028
GPR[SPVAP]-1659895493028
GPR[EPVAP]-1659895494280
GPR[EPVS]-1659895494280
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895494282
GPR[SPVAP]-1659895494282
GPR[EPVAP]-1659895495540
GPR[EPVS]-1659895495540
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895495542
GPR[SPVAP]-1659895495542
GPR[EPVAP]-1659895496784
GPR[EPVS]-1659895496784
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895496786
GPR[SPVAP]-1659895496786
GPR[EPVAP]-1659895498026
GPR[EPVS]-1659895498026
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895498028
GPR[SPVAP]-1659895498028
GPR[EPVAP]-1659895499275
GPR[EPVS]-1659895499275
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895499276
GPR[SPVAP]-1659895499276
GPR[EPVAP]-1659895500512
GPR[EPVS]-1659895500512
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895500514
GPR[SPVAP]-1659895500514
GPR[EPVAP]-1659895501764
GPR[EPVS]-1659895501764
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895501765
GPR[SPVAP]-1659895501765
GPR[EPVAP]-1659895503010
GPR[EPVS]-1659895503010
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895503012
GPR[SPVAP]-1659895503012
GPR[EPVAP]-1659895504277
GPR[EPVS]-1659895504277
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895504278
GPR[SPVAP]-1659895504278
GPR[EPVAP]-1659895505524
GPR[EPVS]-1659895505524
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895505526
GPR[SPVAP]-1659895505526
GPR[EPVAP]-1659895506782
GPR[EPVS]-1659895506782
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895506783
GPR[SPVAP]-1659895506783
GPR[EPVAP]-1659895508089
GPR[EPVS]-1659895508089
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895508090
GPR[SPVAP]-1659895508090
GPR[EPVAP]-1659895509350
GPR[EPVS]-1659895509350
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895509352
GPR[SPVAP]-1659895509352
GPR[EPVAP]-1659895510616
GPR[EPVS]-1659895510616
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895510618
GPR[SPVAP]-1659895510618
GPR[EPVAP]-1659895511870
GPR[EPVS]-1659895511870
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895511872
GPR[SPVAP]-1659895511872
GPR[EPVAP]-1659895513142
GPR[EPVS]-1659895513142
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895513144
GPR[SPVAP]-1659895513144
GPR[EPVAP]-1659895514380
GPR[EPVS]-1659895514380
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895514381
GPR[SPVAP]-1659895514381
GPR[EPVAP]-1659895515628
GPR[EPVS]-1659895515628
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895515629
GPR[SPVAP]-1659895515629
GPR[EPVAP]-1659895516864
GPR[EPVS]-1659895516864
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895516866
GPR[SPVAP]-1659895516866
GPR[EPVAP]-1659895518119
GPR[EPVS]-1659895518119
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895518120
GPR[SPVAP]-1659895518120
GPR[EPVAP]-1659895519395
GPR[EPVS]-1659895519395
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895519397
GPR[SPVAP]-1659895519397
GPR[EPVAP]-1659895520636
GPR[EPVS]-1659895520636
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895520637
GPR[SPVAP]-1659895520637
GPR[EPVAP]-1659895521904
GPR[EPVS]-1659895521904
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895521906
GPR[SPVAP]-1659895521906
GPR[EPVAP]-1659895523145
GPR[EPVS]-1659895523145
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895523147
GPR[SPVAP]-1659895523147
GPR[EPVAP]-1659895524394
GPR[EPVS]-1659895524394
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895524396
GPR[SPVAP]-1659895524396
GPR[EPVAP]-1659895525644
GPR[EPVS]-1659895525644
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895525646
GPR[SPVAP]-1659895525646
GPR[EPVAP]-1659895526892
GPR[EPVS]-1659895526892
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895526894
GPR[SPVAP]-1659895526894
GPR[EPVAP]-1659895528156
GPR[EPVS]-1659895528156
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895528158
GPR[SPVAP]-1659895528158
GPR[EPVAP]-1659895529405
GPR[EPVS]-1659895529405
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895529407
GPR[SPVAP]-1659895529407
GPR[EPVAP]-1659895530655
GPR[EPVS]-1659895530655
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895530657
GPR[SPVAP]-1659895530657
GPR[EPVAP]-1659895531919
GPR[EPVS]-1659895531919
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895531920
GPR[SPVAP]-1659895531920
GPR[EPVAP]-1659895533174
GPR[EPVS]-1659895533174
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895533176
GPR[SPVAP]-1659895533176
GPR[EPVAP]-1659895534448
GPR[EPVS]-1659895534448
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895534449
GPR[SPVAP]-1659895534449
GPR[EPVAP]-1659895535699
GPR[EPVS]-1659895535699
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895535700
GPR[SPVAP]-1659895535700
GPR[EPVAP]-1659895536943
GPR[EPVS]-1659895536943
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895536944
GPR[SPVAP]-1659895536945
GPR[EPVAP]-1659895538214
GPR[EPVS]-1659895538214
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895538216
GPR[SPVAP]-1659895538216
GPR[EPVAP]-1659895539461
GPR[EPVS]-1659895539461
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895539462
GPR[SPVAP]-1659895539462
GPR[EPVAP]-1659895540716
GPR[EPVS]-1659895540716
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895540717
GPR[SPVAP]-1659895540717
GPR[EPVAP]-1659895541971
GPR[EPVS]-1659895541971
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895541972
GPR[SPVAP]-1659895541972
GPR[EPVAP]-1659895543228
GPR[EPVS]-1659895543228
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895543230
GPR[SPVAP]-1659895543230
GPR[EPVAP]-1659895544495
GPR[EPVS]-1659895544495
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895544496
GPR[SPVAP]-1659895544496
GPR[EPVAP]-1659895545732
GPR[EPVS]-1659895545732
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895545733
GPR[SPVAP]-1659895545733
GPR[EPVAP]-1659895546992
GPR[EPVS]-1659895546992
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895546993
GPR[SPVAP]-1659895546993
GPR[EPVAP]-1659895548236
GPR[EPVS]-1659895548236
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895548238
GPR[SPVAP]-1659895548238
GPR[EPVAP]-1659895549540
GPR[EPVS]-1659895549540
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895549542
GPR[SPVAP]-1659895549542
GPR[EPVAP]-1659895550846
GPR[EPVS]-1659895550846
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895550847
GPR[SPVAP]-1659895550847
GPR[EPVAP]-1659895552081
GPR[EPVS]-1659895552081
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895552083
GPR[SPVAP]-1659895552083
GPR[EPVAP]-1659895553319
GPR[EPVS]-1659895553319
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895553320
GPR[SPVAP]-1659895553320
GPR[EPVAP]-1659895554569
GPR[EPVS]-1659895554569
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895554570
GPR[SPVAP]-1659895554570
GPR[EPVAP]-1659895555806
GPR[EPVS]-1659895555806
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895555807
GPR[SPVAP]-1659895555807
GPR[EPVAP]-1659895557060
GPR[EPVS]-1659895557060
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895557061
GPR[SPVAP]-1659895557061
GPR[EPVAP]-1659895558322
GPR[EPVS]-1659895558322
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895558323
GPR[SPVAP]-1659895558323
GPR[EPVAP]-1659895559601
GPR[EPVS]-1659895559601
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895559602
GPR[SPVAP]-1659895559602
GPR[EPVAP]-1659895560848
GPR[EPVS]-1659895560848
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895560850
GPR[SPVAP]-1659895560850
GPR[EPVAP]-1659895562120
GPR[EPVS]-1659895562120
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895562121
GPR[SPVAP]-1659895562121
GPR[EPVAP]-1659895563388
GPR[EPVS]-1659895563388
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895563390
GPR[SPVAP]-1659895563390
GPR[EPVAP]-1659895564656
GPR[EPVS]-1659895564656
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895564658
GPR[SPVAP]-1659895564658
GPR[EPVAP]-1659895565913
GPR[EPVS]-1659895565913
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895565915
GPR[SPVAP]-1659895565915
GPR[EPVAP]-1659895567192
GPR[EPVS]-1659895567192
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895567193
GPR[SPVAP]-1659895567193
GPR[EPVAP]-1659895568425
GPR[EPVS]-1659895568425
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895568426
GPR[SPVAP]-1659895568426
GPR[EPVAP]-1659895569672
GPR[EPVS]-1659895569672
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895569673
GPR[SPVAP]-1659895569673
GPR[EPVAP]-1659895570915
GPR[EPVS]-1659895570915
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895570916
GPR[SPVAP]-1659895570916
GPR[EPVAP]-1659895572164
GPR[EPVS]-1659895572164
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895572165
GPR[SPVAP]-1659895572165
GPR[EPVAP]-1659895573432
GPR[EPVS]-1659895573432
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895573434
GPR[SPVAP]-1659895573434
GPR[EPVAP]-1659895574679
GPR[EPVS]-1659895574679
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895574681
GPR[SPVAP]-1659895574681
GPR[EPVAP]-1659895575923
GPR[EPVS]-1659895575923
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895575924
GPR[SPVAP]-1659895575924
GPR[EPVAP]-1659895577169
GPR[EPVS]-1659895577169
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895577170
GPR[SPVAP]-1659895577170
GPR[EPVAP]-1659895578416
GPR[EPVS]-1659895578416
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895578418
GPR[SPVAP]-1659895578418
GPR[EPVAP]-1659895579658
GPR[EPVS]-1659895579658
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895579660
GPR[SPVAP]-1659895579660
GPR[EPVAP]-1659895580903
GPR[EPVS]-1659895580903
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895580904
GPR[SPVAP]-1659895580904
GPR[EPVAP]-1659895582169
GPR[EPVS]-1659895582169
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895582170
GPR[SPVAP]-1659895582170
GPR[EPVAP]-1659895583415
GPR[EPVS]-1659895583415
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895583416
GPR[SPVAP]-1659895583417
GPR[EPVAP]-1659895584660
GPR[EPVS]-1659895584660
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895584662
GPR[SPVAP]-1659895584662
GPR[EPVAP]-1659895585915
GPR[EPVS]-1659895585915
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895585916
GPR[SPVAP]-1659895585916
GPR[EPVAP]-1659895587189
GPR[EPVS]-1659895587189
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895587190
GPR[SPVAP]-1659895587190
GPR[EPVAP]-1659895588446
GPR[EPVS]-1659895588446
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895588448
GPR[SPVAP]-1659895588448
GPR[EPVAP]-1659895589712
GPR[EPVS]-1659895589712
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895589714
GPR[SPVAP]-1659895589714
GPR[EPVAP]-1659895590961
GPR[EPVS]-1659895590961
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895590962
GPR[SPVAP]-1659895590962
GPR[EPVAP]-1659895592199
GPR[EPVS]-1659895592200
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895592201
GPR[SPVAP]-1659895592201
GPR[EPVAP]-1659895593455
GPR[EPVS]-1659895593455
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895593457
GPR[SPVAP]-1659895593457
GPR[EPVAP]-1659895594724
GPR[EPVS]-1659895594724
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895594726
GPR[SPVAP]-1659895594726
GPR[EPVAP]-1659895596015
GPR[EPVS]-1659895596015
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895596016
GPR[SPVAP]-1659895596016
GPR[EPVAP]-1659895597276
GPR[EPVS]-1659895597276
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895597278
GPR[SPVAP]-1659895597278
GPR[EPVAP]-1659895598524
GPR[EPVS]-1659895598524
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895598526
GPR[SPVAP]-1659895598526
GPR[EPVAP]-1659895599762
GPR[EPVS]-1659895599762
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895599764
GPR[SPVAP]-1659895599764
GPR[EPVAP]-1659895601006
GPR[EPVS]-1659895601006
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895601008
GPR[SPVAP]-1659895601008
GPR[EPVAP]-1659895602255
GPR[EPVS]-1659895602255
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895602257
GPR[SPVAP]-1659895602257
GPR[EPVAP]-1659895603515
GPR[EPVS]-1659895603515
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895603516
GPR[SPVAP]-1659895603516
GPR[EPVAP]-1659895606245
GPR[SPVATF]-1659895606245
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895608565
GPR[EPVS]-1659895608566
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895608567
GPR[SPVAP]-1659895608567
GPR[EPVAP]-1659895611316
GPR[SPVATF]-1659895611316
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895613632
GPR[EPVS]-1659895613632
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895613634
GPR[SPVAP]-1659895613634
GPR[EPVAP]-1659895616282
GPR[SPVATF]-1659895616282
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895618597
GPR[EPVS]-1659895618597
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895618598
GPR[SPVAP]-1659895618598
GPR[EPVAP]-1659895621249
GPR[SPVATF]-1659895621249
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895623565
GPR[EPVS]-1659895623565
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895623567
GPR[SPVAP]-1659895623567
GPR[EPVAP]-1659895626226
GPR[SPVATF]-1659895626226
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895628527
GPR[EPVS]-1659895628527
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895628528
GPR[SPVAP]-1659895628529
GPR[EPVAP]-1659895631203
GPR[SPVATF]-1659895631203
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895633506
GPR[EPVS]-1659895633506
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895633508
GPR[SPVAP]-1659895633508
GPR[EPVAP]-1659895636181
GPR[SPVATF]-1659895636181
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895638490
GPR[EPVS]-1659895638490
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895638492
GPR[SPVAP]-1659895638492
GPR[EPVAP]-1659895641195
GPR[SPVATF]-1659895641195
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895643503
GPR[EPVS]-1659895643503
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895643505
GPR[SPVAP]-1659895643505
GPR[EPVAP]-1659895646167
GPR[SPVATF]-1659895646167
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895648492
GPR[EPVS]-1659895648492
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895648493
GPR[SPVAP]-1659895648493
GPR[EPVAP]-1659895651193
GPR[SPVATF]-1659895651193
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895653500
GPR[EPVS]-1659895653500
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895653502
GPR[SPVAP]-1659895653502
GPR[EPVAP]-1659895656168
GPR[SPVATF]-1659895656168
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895658490
GPR[EPVS]-1659895658490
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895658491
GPR[SPVAP]-1659895658491
GPR[EPVAP]-1659895661169
GPR[SPVATF]-1659895661169
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895663508
GPR[EPVS]-1659895663508
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895663509
GPR[SPVAP]-1659895663509
GPR[EPVAP]-1659895666163
GPR[SPVATF]-1659895666163
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895668495
GPR[EPVS]-1659895668495
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895668496
GPR[SPVAP]-1659895668496
GPR[EPVAP]-1659895671150
GPR[SPVATF]-1659895671150
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895673490
GPR[EPVS]-1659895673490
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895673491
GPR[SPVAP]-1659895673491
GPR[EPVAP]-1659895676154
GPR[SPVATF]-1659895676154
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895678470
GPR[EPVS]-1659895678470
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895678472
GPR[SPVAP]-1659895678472
GPR[EPVAP]-1659895681139
GPR[SPVATF]-1659895681139
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895683460
GPR[EPVS]-1659895683460
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895683462
GPR[SPVAP]-1659895683462
GPR[EPVAP]-1659895686101
GPR[SPVATF]-1659895686101
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895688460
GPR[EPVS]-1659895688460
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895688462
GPR[SPVAP]-1659895688462
GPR[EPVAP]-1659895691115
GPR[SPVATF]-1659895691115
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895693418
GPR[EPVS]-1659895693418
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895693419
GPR[SPVAP]-1659895693419
GPR[EPVAP]-1659895696134
GPR[SPVATF]-1659895696134
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895698440
GPR[EPVS]-1659895698440
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895698442
GPR[SPVAP]-1659895698442
GPR[EPVAP]-1659895701098
GPR[SPVATF]-1659895701098
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895703454
GPR[EPVS]-1659895703454
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895703455
GPR[SPVAP]-1659895703455
GPR[EPVAP]-1659895706125
GPR[SPVATF]-1659895706125
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895708435
GPR[EPVS]-1659895708435
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895708436
GPR[SPVAP]-1659895708436
GPR[EPVAP]-1659895711112
GPR[SPVATF]-1659895711112
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895713427
GPR[EPVS]-1659895713427
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895713428
GPR[SPVAP]-1659895713428
GPR[EPVAP]-1659895716120
GPR[SPVATF]-1659895716120
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895718473
GPR[EPVS]-1659895718473
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895718474
GPR[SPVAP]-1659895718474
GPR[EPVAP]-1659895721163
GPR[SPVATF]-1659895721163
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895723474
GPR[EPVS]-1659895723474
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895723475
GPR[SPVAP]-1659895723475
GPR[EPVAP]-1659895726209
GPR[SPVATF]-1659895726209
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895728585
GPR[EPVS]-1659895728585
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895728587
GPR[SPVAP]-1659895728587
GPR[EPVAP]-1659895731269
GPR[SPVATF]-1659895731269
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895733594
GPR[EPVS]-1659895733594
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895733595
GPR[SPVAP]-1659895733595
GPR[EPVAP]-1659895736323
GPR[SPVATF]-1659895736323
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895738640
GPR[EPVS]-1659895738640
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895738641
GPR[SPVAP]-1659895738641
GPR[EPVAP]-1659895741371
GPR[SPVATF]-1659895741371
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895743757
GPR[EPVS]-1659895743757
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895743759
GPR[SPVAP]-1659895743759
GPR[EPVAP]-1659895746406
GPR[SPVATF]-1659895746406
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895748783
GPR[EPVS]-1659895748783
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895748784
GPR[SPVAP]-1659895748784
GPR[EPVAP]-1659895751493
GPR[SPVATF]-1659895751493
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895753841
GPR[EPVS]-1659895753841
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895753842
GPR[SPVAP]-1659895753842
GPR[EPVAP]-1659895756484
GPR[SPVATF]-1659895756484
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895758798
GPR[EPVS]-1659895758798
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895758799
GPR[SPVAP]-1659895758799
GPR[EPVAP]-1659895761563
GPR[SPVATF]-1659895761563
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895763915
GPR[EPVS]-1659895763915
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895763917
GPR[SPVAP]-1659895763917
GPR[EPVAP]-1659895766572
GPR[SPVATF]-1659895766573
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895768889
GPR[EPVS]-1659895768889
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else {
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895768891
GPR[SPVAP]-1659895768891
GPR[EPVAP]-1659895771619
GPR[SPVATF]-1659895771619
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895773922
GPR[EPVS]-1659895773922
========
sb.append("<ul>");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895773924
GPR[SPVAP]-1659895773924
GPR[EPVAP]-1659895776589
GPR[SPVATF]-1659895776589
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895778934
GPR[EPVS]-1659895778934
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895778936
GPR[SPVAP]-1659895778936
GPR[EPVAP]-1659895781635
GPR[SPVATF]-1659895781635
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895783950
GPR[EPVS]-1659895783950
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895783960
GPR[SPVAP]-1659895783960
GPR[EPVAP]-1659895786606
GPR[SPVATF]-1659895786606
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895788944
GPR[EPVS]-1659895788944
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895788945
GPR[SPVAP]-1659895788945
GPR[EPVAP]-1659895791626
GPR[SPVATF]-1659895791626
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895793945
GPR[EPVS]-1659895793945
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895793947
GPR[SPVAP]-1659895793947
GPR[EPVAP]-1659895796612
GPR[SPVATF]-1659895796612
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895798912
GPR[EPVS]-1659895798912
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895798913
GPR[SPVAP]-1659895798913
GPR[EPVAP]-1659895801582
GPR[SPVATF]-1659895801582
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895803976
GPR[EPVS]-1659895803976
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895803978
GPR[SPVAP]-1659895803978
GPR[EPVAP]-1659895805223
GPR[EPVS]-1659895805223
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895805224
GPR[SPVAP]-1659895805224
GPR[EPVAP]-1659895806467
GPR[EPVS]-1659895806467
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895806469
GPR[SPVAP]-1659895806469
GPR[EPVAP]-1659895807727
GPR[EPVS]-1659895807727
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895807729
GPR[SPVAP]-1659895807729
GPR[EPVAP]-1659895808996
GPR[EPVS]-1659895808996
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895808998
GPR[SPVAP]-1659895808998
GPR[EPVAP]-1659895810244
GPR[EPVS]-1659895810244
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895810246
GPR[SPVAP]-1659895810246
GPR[EPVAP]-1659895811495
GPR[EPVS]-1659895811495
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895811497
GPR[SPVAP]-1659895811497
GPR[EPVAP]-1659895812750
GPR[EPVS]-1659895812750
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895812751
GPR[SPVAP]-1659895812751
GPR[EPVAP]-1659895813996
GPR[EPVS]-1659895813996
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895813997
GPR[SPVAP]-1659895813997
GPR[EPVAP]-1659895815248
GPR[EPVS]-1659895815248
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895815250
GPR[SPVAP]-1659895815250
GPR[EPVAP]-1659895816505
GPR[EPVS]-1659895816505
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895816514
GPR[SPVAP]-1659895816514
GPR[EPVAP]-1659895819174
GPR[SPVATF]-1659895819174
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895821521
GPR[EPVS]-1659895821521
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895821522
GPR[SPVAP]-1659895821522
GPR[EPVAP]-1659895824192
GPR[SPVATF]-1659895824192
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895826512
GPR[EPVS]-1659895826512
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895826513
GPR[SPVAP]-1659895826513
GPR[EPVAP]-1659895829187
GPR[SPVATF]-1659895829187
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895831497
GPR[EPVS]-1659895831497
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895831499
GPR[SPVAP]-1659895831499
GPR[EPVAP]-1659895834178
GPR[SPVATF]-1659895834178
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895836499
GPR[EPVS]-1659895836499
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895836500
GPR[SPVAP]-1659895836500
GPR[EPVAP]-1659895839158
GPR[SPVATF]-1659895839158
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895841552
GPR[EPVS]-1659895841552
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895841553
GPR[SPVAP]-1659895841553
GPR[EPVAP]-1659895844188
GPR[SPVATF]-1659895844189
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895849731
GPR[EPVS]-1659895849731
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895849733
GPR[SPVAP]-1659895849733
GPR[EPVAP]-1659895852441
GPR[SPVATF]-1659895852441
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895854759
GPR[EPVS]-1659895854759
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895854760
GPR[SPVAP]-1659895854760
GPR[EPVAP]-1659895857425
GPR[SPVATF]-1659895857425
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895859776
GPR[EPVS]-1659895859776
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895859778
GPR[SPVAP]-1659895859778
GPR[EPVAP]-1659895862443
GPR[SPVATF]-1659895862443
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895864755
GPR[EPVS]-1659895864755
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895864757
GPR[SPVAP]-1659895864757
GPR[EPVAP]-1659895867396
GPR[SPVATF]-1659895867396
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895869740
GPR[EPVS]-1659895869740
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895869742
GPR[SPVAP]-1659895869742
GPR[EPVAP]-1659895872448
GPR[SPVATF]-1659895872448
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895874773
GPR[EPVS]-1659895874773
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895874775
GPR[SPVAP]-1659895874775
GPR[EPVAP]-1659895877433
GPR[SPVATF]-1659895877433
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895879741
GPR[EPVS]-1659895879741
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895879742
GPR[SPVAP]-1659895879742
GPR[EPVAP]-1659895882480
GPR[SPVATF]-1659895882480
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895884790
GPR[EPVS]-1659895884790
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895884791
GPR[SPVAP]-1659895884791
GPR[EPVAP]-1659895887461
GPR[SPVATF]-1659895887461
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895889802
GPR[EPVS]-1659895889802
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895889803
GPR[SPVAP]-1659895889803
GPR[EPVAP]-1659895892488
GPR[SPVATF]-1659895892488
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895894847
GPR[EPVS]-1659895894847
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895894848
GPR[SPVAP]-1659895894848
GPR[EPVAP]-1659895897496
GPR[SPVATF]-1659895897496
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895899819
GPR[EPVS]-1659895899819
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895899820
GPR[SPVAP]-1659895899820
GPR[EPVAP]-1659895902492
GPR[SPVATF]-1659895902493
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895904864
GPR[EPVS]-1659895904864
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895904866
GPR[SPVAP]-1659895904866
GPR[EPVAP]-1659895907540
GPR[SPVATF]-1659895907540
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895909917
GPR[EPVS]-1659895909917
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895909918
GPR[SPVAP]-1659895909918
GPR[EPVAP]-1659895912570
GPR[SPVATF]-1659895912570
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895914912
GPR[EPVS]-1659895914912
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895914914
GPR[SPVAP]-1659895914914
GPR[EPVAP]-1659895917583
GPR[SPVATF]-1659895917583
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895919942
GPR[EPVS]-1659895919942
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895919944
GPR[SPVAP]-1659895919944
GPR[EPVAP]-1659895921214
GPR[EPVS]-1659895921214
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895921216
GPR[SPVAP]-1659895921216
GPR[EPVAP]-1659895922462
GPR[EPVS]-1659895922462
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895922464
GPR[SPVAP]-1659895922464
GPR[EPVAP]-1659895923723
GPR[EPVS]-1659895923723
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895923725
GPR[SPVAP]-1659895923725
GPR[EPVAP]-1659895924971
GPR[EPVS]-1659895924971
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895924972
GPR[SPVAP]-1659895924972
GPR[EPVAP]-1659895926225
GPR[EPVS]-1659895926225
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895926226
GPR[SPVAP]-1659895926226
GPR[EPVAP]-1659895927487
GPR[EPVS]-1659895927487
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895927488
GPR[SPVAP]-1659895927488
GPR[EPVAP]-1659895928732
GPR[EPVS]-1659895928732
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895928733
GPR[SPVAP]-1659895928733
GPR[EPVAP]-1659895929994
GPR[EPVS]-1659895929994
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895929995
GPR[SPVAP]-1659895929995
GPR[EPVAP]-1659895931251
GPR[EPVS]-1659895931251
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895931252
GPR[SPVAP]-1659895931252
GPR[EPVAP]-1659895932496
GPR[EPVS]-1659895932497
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895932498
GPR[SPVAP]-1659895932498
GPR[EPVAP]-1659895933742
GPR[EPVS]-1659895933742
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895933744
GPR[SPVAP]-1659895933744
GPR[EPVAP]-1659895934980
GPR[EPVS]-1659895934980
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895934982
GPR[SPVAP]-1659895934982
GPR[EPVAP]-1659895936234
GPR[EPVS]-1659895936234
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895936235
GPR[SPVAP]-1659895936235
GPR[EPVAP]-1659895937481
GPR[EPVS]-1659895937481
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895937482
GPR[SPVAP]-1659895937482
GPR[EPVAP]-1659895938724
GPR[EPVS]-1659895938724
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895938726
GPR[SPVAP]-1659895938726
GPR[EPVAP]-1659895939972
GPR[EPVS]-1659895939972
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895939974
GPR[SPVAP]-1659895939974
GPR[EPVAP]-1659895941224
GPR[EPVS]-1659895941224
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895941225
GPR[SPVAP]-1659895941225
GPR[EPVAP]-1659895942467
GPR[EPVS]-1659895942467
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895942468
GPR[SPVAP]-1659895942468
GPR[EPVAP]-1659895943711
GPR[EPVS]-1659895943711
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895943715
GPR[SPVAP]-1659895943715
GPR[EPVAP]-1659895944962
GPR[EPVS]-1659895944962
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895944963
GPR[SPVAP]-1659895944963
GPR[EPVAP]-1659895946206
GPR[EPVS]-1659895946206
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895946207
GPR[SPVAP]-1659895946207
GPR[EPVAP]-1659895947447
GPR[EPVS]-1659895947447
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895947448
GPR[SPVAP]-1659895947448
GPR[EPVAP]-1659895948681
GPR[EPVS]-1659895948681
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895948682
GPR[SPVAP]-1659895948682
GPR[EPVAP]-1659895949919
GPR[EPVS]-1659895949919
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895949921
GPR[SPVAP]-1659895949921
GPR[EPVAP]-1659895951157
GPR[EPVS]-1659895951157
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895951158
GPR[SPVAP]-1659895951158
GPR[EPVAP]-1659895952404
GPR[EPVS]-1659895952404
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895952406
GPR[SPVAP]-1659895952406
GPR[EPVAP]-1659895953654
GPR[EPVS]-1659895953654
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895953655
GPR[SPVAP]-1659895953655
GPR[EPVAP]-1659895954904
GPR[EPVS]-1659895954904
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895954906
GPR[SPVAP]-1659895954906
GPR[EPVAP]-1659895956150
GPR[EPVS]-1659895956151
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895956152
GPR[SPVAP]-1659895956152
GPR[EPVAP]-1659895957396
GPR[EPVS]-1659895957396
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895957398
GPR[SPVAP]-1659895957398
GPR[EPVAP]-1659895958650
GPR[EPVS]-1659895958650
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895958652
GPR[SPVAP]-1659895958652
GPR[EPVAP]-1659895959925
GPR[EPVS]-1659895959926
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895959927
GPR[SPVAP]-1659895959927
GPR[EPVAP]-1659895961166
GPR[EPVS]-1659895961166
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895961167
GPR[SPVAP]-1659895961167
GPR[EPVAP]-1659895962402
GPR[EPVS]-1659895962402
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895962404
GPR[SPVAP]-1659895962404
GPR[EPVAP]-1659895963643
GPR[EPVS]-1659895963643
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895963644
GPR[SPVAP]-1659895963644
GPR[EPVAP]-1659895964904
GPR[EPVS]-1659895964904
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895964906
GPR[SPVAP]-1659895964906
GPR[EPVAP]-1659895966150
GPR[EPVS]-1659895966151
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895966152
GPR[SPVAP]-1659895966152
GPR[EPVAP]-1659895967407
GPR[EPVS]-1659895967407
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895967409
GPR[SPVAP]-1659895967409
GPR[EPVAP]-1659895968661
GPR[EPVS]-1659895968661
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895968662
GPR[SPVAP]-1659895968662
GPR[EPVAP]-1659895969908
GPR[EPVS]-1659895969908
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895969910
GPR[SPVAP]-1659895969910
GPR[EPVAP]-1659895971150
GPR[EPVS]-1659895971150
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895971152
GPR[SPVAP]-1659895971152
GPR[EPVAP]-1659895972407
GPR[EPVS]-1659895972407
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895972408
GPR[SPVAP]-1659895972408
GPR[EPVAP]-1659895973664
GPR[EPVS]-1659895973664
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895973665
GPR[SPVAP]-1659895973665
GPR[EPVAP]-1659895974915
GPR[EPVS]-1659895974915
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895974916
GPR[SPVAP]-1659895974916
GPR[EPVAP]-1659895976183
GPR[EPVS]-1659895976183
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895976185
GPR[SPVAP]-1659895976185
GPR[EPVAP]-1659895978837
GPR[SPVATF]-1659895978837
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895981196
GPR[EPVS]-1659895981196
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895981197
GPR[SPVAP]-1659895981197
GPR[EPVAP]-1659895983855
GPR[SPVATF]-1659895983855
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895986202
GPR[EPVS]-1659895986202
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895986204
GPR[SPVAP]-1659895986204
GPR[EPVAP]-1659895988870
GPR[SPVATF]-1659895988870
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895991181
GPR[EPVS]-1659895991181
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895991182
GPR[SPVAP]-1659895991182
GPR[EPVAP]-1659895993843
GPR[SPVATF]-1659895993843
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659895996165
GPR[EPVS]-1659895996165
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659895996167
GPR[SPVAP]-1659895996167
GPR[EPVAP]-1659895998833
GPR[SPVATF]-1659895998833
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896001157
GPR[EPVS]-1659896001157
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896001158
GPR[SPVAP]-1659896001158
GPR[EPVAP]-1659896003854
GPR[SPVATF]-1659896003854
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896006183
GPR[EPVS]-1659896006183
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896006184
GPR[SPVAP]-1659896006185
GPR[EPVAP]-1659896008843
GPR[SPVATF]-1659896008843
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896011184
GPR[EPVS]-1659896011184
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896011186
GPR[SPVAP]-1659896011186
GPR[EPVAP]-1659896013862
GPR[SPVATF]-1659896013862
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896016276
GPR[EPVS]-1659896016276
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896016278
GPR[SPVAP]-1659896016278
GPR[EPVAP]-1659896018934
GPR[SPVATF]-1659896018934
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896021264
GPR[EPVS]-1659896021264
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896021266
GPR[SPVAP]-1659896021266
GPR[EPVAP]-1659896023921
GPR[SPVATF]-1659896023921
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896026248
GPR[EPVS]-1659896026248
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896026250
GPR[SPVAP]-1659896026250
GPR[EPVAP]-1659896028925
GPR[SPVATF]-1659896028925
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896031239
GPR[EPVS]-1659896031239
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896031241
GPR[SPVAP]-1659896031241
GPR[EPVAP]-1659896033886
GPR[SPVATF]-1659896033886
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896036180
GPR[EPVS]-1659896036180
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896036181
GPR[SPVAP]-1659896036181
GPR[EPVAP]-1659896038865
GPR[SPVATF]-1659896038865
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896041174
GPR[EPVS]-1659896041174
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896041176
GPR[SPVAP]-1659896041176
GPR[EPVAP]-1659896043845
GPR[SPVATF]-1659896043845
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896046189
GPR[EPVS]-1659896046189
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896046190
GPR[SPVAP]-1659896046190
GPR[EPVAP]-1659896048857
GPR[SPVATF]-1659896048857
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896051248
GPR[EPVS]-1659896051248
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896051250
GPR[SPVAP]-1659896051250
GPR[EPVAP]-1659896053928
GPR[SPVATF]-1659896053928
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896056260
GPR[EPVS]-1659896056260
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896056261
GPR[SPVAP]-1659896056261
GPR[EPVAP]-1659896058941
GPR[SPVATF]-1659896058941
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896061254
GPR[EPVS]-1659896061254
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896061255
GPR[SPVAP]-1659896061255
GPR[EPVAP]-1659896063934
GPR[SPVATF]-1659896063934
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896066274
GPR[EPVS]-1659896066274
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896066275
GPR[SPVAP]-1659896066275
GPR[EPVAP]-1659896068928
GPR[SPVATF]-1659896068928
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896071308
GPR[EPVS]-1659896071308
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896071309
GPR[SPVAP]-1659896071309
GPR[EPVAP]-1659896073980
GPR[SPVATF]-1659896073980
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896076339
GPR[EPVS]-1659896076339
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896076341
GPR[SPVAP]-1659896076341
GPR[EPVAP]-1659896078991
GPR[SPVATF]-1659896078991
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896081304
GPR[EPVS]-1659896081304
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896081305
GPR[SPVAP]-1659896081305
GPR[EPVAP]-1659896083978
GPR[SPVATF]-1659896083978
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896086306
GPR[EPVS]-1659896086306
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896086308
GPR[SPVAP]-1659896086308
GPR[EPVAP]-1659896088964
GPR[SPVATF]-1659896088964
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896091272
GPR[EPVS]-1659896091272
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896091275
GPR[SPVAP]-1659896091275
GPR[EPVAP]-1659896093949
GPR[SPVATF]-1659896093949
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896096382
GPR[EPVS]-1659896096382
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896096383
GPR[SPVAP]-1659896096383
GPR[EPVAP]-1659896099112
GPR[SPVATF]-1659896099112
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896101441
GPR[EPVS]-1659896101441
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896101442
GPR[SPVAP]-1659896101442
GPR[EPVAP]-1659896104133
GPR[SPVATF]-1659896104133
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896106482
GPR[EPVS]-1659896106482
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896106484
GPR[SPVAP]-1659896106484
GPR[EPVAP]-1659896109152
GPR[SPVATF]-1659896109152
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896111464
GPR[EPVS]-1659896111464
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896111465
GPR[SPVAP]-1659896111465
GPR[EPVAP]-1659896114127
GPR[SPVATF]-1659896114127
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896116462
GPR[EPVS]-1659896116462
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896116463
GPR[SPVAP]-1659896116463
GPR[EPVAP]-1659896119120
GPR[SPVATF]-1659896119120
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896121438
GPR[EPVS]-1659896121438
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896121439
GPR[SPVAP]-1659896121439
GPR[EPVAP]-1659896124136
GPR[SPVATF]-1659896124136
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896126462
GPR[EPVS]-1659896126462
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896126464
GPR[SPVAP]-1659896126464
GPR[EPVAP]-1659896129106
GPR[SPVATF]-1659896129106
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896131429
GPR[EPVS]-1659896131429
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896131431
GPR[SPVAP]-1659896131431
GPR[EPVAP]-1659896134085
GPR[SPVATF]-1659896134085
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896136401
GPR[EPVS]-1659896136401
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896136402
GPR[SPVAP]-1659896136402
GPR[EPVAP]-1659896139074
GPR[SPVATF]-1659896139074
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896141439
GPR[EPVS]-1659896141439
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896141440
GPR[SPVAP]-1659896141440
GPR[EPVAP]-1659896144098
GPR[SPVATF]-1659896144098
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896146444
GPR[EPVS]-1659896146444
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896146445
GPR[SPVAP]-1659896146445
GPR[EPVAP]-1659896149128
GPR[SPVATF]-1659896149128
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896151451
GPR[EPVS]-1659896151451
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896151452
GPR[SPVAP]-1659896151452
GPR[EPVAP]-1659896152703
GPR[EPVS]-1659896152703
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896152704
GPR[SPVAP]-1659896152704
GPR[EPVAP]-1659896153985
GPR[EPVS]-1659896153985
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896153986
GPR[SPVAP]-1659896153986
GPR[EPVAP]-1659896155234
GPR[EPVS]-1659896155234
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896155236
GPR[SPVAP]-1659896155236
GPR[EPVAP]-1659896156468
GPR[EPVS]-1659896156468
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896156469
GPR[SPVAP]-1659896156469
GPR[EPVAP]-1659896157715
GPR[EPVS]-1659896157715
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896157717
GPR[SPVAP]-1659896157717
GPR[EPVAP]-1659896158957
GPR[EPVS]-1659896158957
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896158959
GPR[SPVAP]-1659896158959
GPR[EPVAP]-1659896160203
GPR[EPVS]-1659896160203
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896160205
GPR[SPVAP]-1659896160205
GPR[EPVAP]-1659896161447
GPR[EPVS]-1659896161447
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896161449
GPR[SPVAP]-1659896161449
GPR[EPVAP]-1659896162715
GPR[EPVS]-1659896162715
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896162717
GPR[SPVAP]-1659896162717
GPR[EPVAP]-1659896163976
GPR[EPVS]-1659896163976
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896163978
GPR[SPVAP]-1659896163978
GPR[EPVAP]-1659896165211
GPR[EPVS]-1659896165211
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896165212
GPR[SPVAP]-1659896165212
GPR[EPVAP]-1659896166453
GPR[EPVS]-1659896166453
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896166454
GPR[SPVAP]-1659896166454
GPR[EPVAP]-1659896167683
GPR[EPVS]-1659896167683
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896167685
GPR[SPVAP]-1659896167685
GPR[EPVAP]-1659896168932
GPR[EPVS]-1659896168932
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896168933
GPR[SPVAP]-1659896168933
GPR[EPVAP]-1659896170172
GPR[EPVS]-1659896170172
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896170173
GPR[SPVAP]-1659896170173
GPR[EPVAP]-1659896171446
GPR[EPVS]-1659896171446
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896171448
GPR[SPVAP]-1659896171448
GPR[EPVAP]-1659896172707
GPR[EPVS]-1659896172707
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896172708
GPR[SPVAP]-1659896172708
GPR[EPVAP]-1659896173973
GPR[EPVS]-1659896173973
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896173974
GPR[SPVAP]-1659896173974
GPR[EPVAP]-1659896175211
GPR[EPVS]-1659896175211
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896175212
GPR[SPVAP]-1659896175212
GPR[EPVAP]-1659896176453
GPR[EPVS]-1659896176453
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896176454
GPR[SPVAP]-1659896176454
GPR[EPVAP]-1659896177717
GPR[EPVS]-1659896177717
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896177718
GPR[SPVAP]-1659896177718
GPR[EPVAP]-1659896178956
GPR[EPVS]-1659896178956
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896178957
GPR[SPVAP]-1659896178957
GPR[EPVAP]-1659896180199
GPR[EPVS]-1659896180199
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896180201
GPR[SPVAP]-1659896180201
GPR[EPVAP]-1659896181453
GPR[EPVS]-1659896181453
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896181454
GPR[SPVAP]-1659896181454
GPR[EPVAP]-1659896182729
GPR[EPVS]-1659896182729
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896182731
GPR[SPVAP]-1659896182731
GPR[EPVAP]-1659896183989
GPR[EPVS]-1659896183989
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896183991
GPR[SPVAP]-1659896183991
GPR[EPVAP]-1659896185236
GPR[EPVS]-1659896185236
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896185238
GPR[SPVAP]-1659896185238
GPR[EPVAP]-1659896186477
GPR[EPVS]-1659896186477
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896186479
GPR[SPVAP]-1659896186479
GPR[EPVAP]-1659896187720
GPR[EPVS]-1659896187720
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896187722
GPR[SPVAP]-1659896187722
GPR[EPVAP]-1659896188988
GPR[EPVS]-1659896188988
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896188990
GPR[SPVAP]-1659896188990
GPR[EPVAP]-1659896190238
GPR[EPVS]-1659896190238
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896190240
GPR[SPVAP]-1659896190240
GPR[EPVAP]-1659896191480
GPR[EPVS]-1659896191480
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896191481
GPR[SPVAP]-1659896191481
GPR[EPVAP]-1659896192748
GPR[EPVS]-1659896192748
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896192750
GPR[SPVAP]-1659896192750
GPR[EPVAP]-1659896193996
GPR[EPVS]-1659896193996
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896193997
GPR[SPVAP]-1659896193997
GPR[EPVAP]-1659896195276
GPR[EPVS]-1659896195276
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896195277
GPR[SPVAP]-1659896195277
GPR[EPVAP]-1659896196524
GPR[EPVS]-1659896196524
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896196525
GPR[SPVAP]-1659896196525
GPR[EPVAP]-1659896197812
GPR[EPVS]-1659896197812
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896197813
GPR[SPVAP]-1659896197813
GPR[EPVAP]-1659896199051
GPR[EPVS]-1659896199051
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896199052
GPR[SPVAP]-1659896199052
GPR[EPVAP]-1659896200296
GPR[EPVS]-1659896200296
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896200298
GPR[SPVAP]-1659896200298
GPR[EPVAP]-1659896201560
GPR[EPVS]-1659896201560
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896201561
GPR[SPVAP]-1659896201561
GPR[EPVAP]-1659896202800
GPR[EPVS]-1659896202800
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896202801
GPR[SPVAP]-1659896202801
GPR[EPVAP]-1659896204047
GPR[EPVS]-1659896204047
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896204048
GPR[SPVAP]-1659896204048
GPR[EPVAP]-1659896205293
GPR[EPVS]-1659896205293
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896205295
GPR[SPVAP]-1659896205295
GPR[EPVAP]-1659896206552
GPR[EPVS]-1659896206552
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896206554
GPR[SPVAP]-1659896206554
GPR[EPVAP]-1659896207797
GPR[EPVS]-1659896207797
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896207798
GPR[SPVAP]-1659896207798
GPR[EPVAP]-1659896209059
GPR[EPVS]-1659896209060
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896209061
GPR[SPVAP]-1659896209061
GPR[EPVAP]-1659896210311
GPR[EPVS]-1659896210311
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896210312
GPR[SPVAP]-1659896210312
GPR[EPVAP]-1659896211580
GPR[EPVS]-1659896211580
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896211584
GPR[SPVAP]-1659896211584
GPR[EPVAP]-1659896212881
GPR[EPVS]-1659896212881
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896212882
GPR[SPVAP]-1659896212882
GPR[EPVAP]-1659896214127
GPR[EPVS]-1659896214127
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896214128
GPR[SPVAP]-1659896214128
GPR[EPVAP]-1659896215389
GPR[EPVS]-1659896215389
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896215390
GPR[SPVAP]-1659896215390
GPR[EPVAP]-1659896216663
GPR[EPVS]-1659896216663
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896216664
GPR[SPVAP]-1659896216664
GPR[EPVAP]-1659896217946
GPR[EPVS]-1659896217946
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896217948
GPR[SPVAP]-1659896217948
GPR[EPVAP]-1659896219192
GPR[EPVS]-1659896219192
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
builder.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896219193
GPR[SPVAP]-1659896219193
GPR[EPVAP]-1659896220475
GPR[EPVS]-1659896220475
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896220476
GPR[SPVAP]-1659896220476
GPR[EPVAP]-1659896221735
GPR[EPVS]-1659896221735
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896221736
GPR[SPVAP]-1659896221736
GPR[EPVAP]-1659896222998
GPR[EPVS]-1659896222998
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896223000
GPR[SPVAP]-1659896223000
GPR[EPVAP]-1659896224256
GPR[EPVS]-1659896224256
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896224258
GPR[SPVAP]-1659896224258
GPR[EPVAP]-1659896225508
GPR[EPVS]-1659896225508
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896225510
GPR[SPVAP]-1659896225510
GPR[EPVAP]-1659896226773
GPR[EPVS]-1659896226773
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896226774
GPR[SPVAP]-1659896226774
GPR[EPVAP]-1659896228015
GPR[EPVS]-1659896228015
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896228017
GPR[SPVAP]-1659896228017
GPR[EPVAP]-1659896229261
GPR[EPVS]-1659896229261
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896229262
GPR[SPVAP]-1659896229262
GPR[EPVAP]-1659896230495
GPR[EPVS]-1659896230495
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896230497
GPR[SPVAP]-1659896230497
GPR[EPVAP]-1659896231753
GPR[EPVS]-1659896231753
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896231754
GPR[SPVAP]-1659896231754
GPR[EPVAP]-1659896232999
GPR[EPVS]-1659896232999
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896233000
GPR[SPVAP]-1659896233000
GPR[EPVAP]-1659896234244
GPR[EPVS]-1659896234244
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896234246
GPR[SPVAP]-1659896234246
GPR[EPVAP]-1659896235484
GPR[EPVS]-1659896235484
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896235486
GPR[SPVAP]-1659896235486
GPR[EPVAP]-1659896236736
GPR[EPVS]-1659896236736
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896236738
GPR[SPVAP]-1659896236738
GPR[EPVAP]-1659896237989
GPR[EPVS]-1659896237989
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896237990
GPR[SPVAP]-1659896237990
GPR[EPVAP]-1659896239280
GPR[EPVS]-1659896239280
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896239281
GPR[SPVAP]-1659896239281
GPR[EPVAP]-1659896240529
GPR[EPVS]-1659896240529
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896240530
GPR[SPVAP]-1659896240530
GPR[EPVAP]-1659896241778
GPR[EPVS]-1659896241778
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896241779
GPR[SPVAP]-1659896241779
GPR[EPVAP]-1659896243061
GPR[EPVS]-1659896243061
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896243062
GPR[SPVAP]-1659896243062
GPR[EPVAP]-1659896244304
GPR[EPVS]-1659896244304
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896244306
GPR[SPVAP]-1659896244306
GPR[EPVAP]-1659896245567
GPR[EPVS]-1659896245567
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896245569
GPR[SPVAP]-1659896245569
GPR[EPVAP]-1659896246804
GPR[EPVS]-1659896246804
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896246807
GPR[SPVAP]-1659896246807
GPR[EPVAP]-1659896248039
GPR[EPVS]-1659896248039
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896248041
GPR[SPVAP]-1659896248041
GPR[EPVAP]-1659896249295
GPR[EPVS]-1659896249295
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896249296
GPR[SPVAP]-1659896249296
GPR[EPVAP]-1659896250542
GPR[EPVS]-1659896250542
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896250544
GPR[SPVAP]-1659896250544
GPR[EPVAP]-1659896251791
GPR[EPVS]-1659896251791
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896251793
GPR[SPVAP]-1659896251793
GPR[EPVAP]-1659896253055
GPR[EPVS]-1659896253055
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896253056
GPR[SPVAP]-1659896253056
GPR[EPVAP]-1659896254296
GPR[EPVS]-1659896254296
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896254298
GPR[SPVAP]-1659896254298
GPR[EPVAP]-1659896255543
GPR[EPVS]-1659896255543
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896255545
GPR[SPVAP]-1659896255545
GPR[EPVAP]-1659896256788
GPR[EPVS]-1659896256788
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896256789
GPR[SPVAP]-1659896256789
GPR[EPVAP]-1659896258041
GPR[EPVS]-1659896258041
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896258042
GPR[SPVAP]-1659896258042
GPR[EPVAP]-1659896259307
GPR[EPVS]-1659896259307
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896259308
GPR[SPVAP]-1659896259308
GPR[EPVAP]-1659896260567
GPR[EPVS]-1659896260567
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896260569
GPR[SPVAP]-1659896260569
GPR[EPVAP]-1659896261850
GPR[EPVS]-1659896261850
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896261851
GPR[SPVAP]-1659896261851
GPR[EPVAP]-1659896263101
GPR[EPVS]-1659896263101
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896263103
GPR[SPVAP]-1659896263103
GPR[EPVAP]-1659896264348
GPR[EPVS]-1659896264348
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896264350
GPR[SPVAP]-1659896264350
GPR[EPVAP]-1659896267067
GPR[SPVATF]-1659896267067
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896269390
GPR[EPVS]-1659896269390
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896269391
GPR[SPVAP]-1659896269391
GPR[EPVAP]-1659896272043
GPR[SPVATF]-1659896272043
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896274339
GPR[EPVS]-1659896274339
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896274340
GPR[SPVAP]-1659896274340
GPR[EPVAP]-1659896277041
GPR[SPVATF]-1659896277041
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896279345
GPR[EPVS]-1659896279345
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896279346
GPR[SPVAP]-1659896279346
GPR[EPVAP]-1659896282030
GPR[SPVATF]-1659896282030
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896284351
GPR[EPVS]-1659896284351
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896284353
GPR[SPVAP]-1659896284353
GPR[EPVAP]-1659896286996
GPR[SPVATF]-1659896286996
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896289302
GPR[EPVS]-1659896289302
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896289303
GPR[SPVAP]-1659896289303
GPR[EPVAP]-1659896291949
GPR[SPVATF]-1659896291949
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896294276
GPR[EPVS]-1659896294276
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896294278
GPR[SPVAP]-1659896294278
GPR[EPVAP]-1659896296961
GPR[SPVATF]-1659896296961
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896299290
GPR[EPVS]-1659896299290
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896299292
GPR[SPVAP]-1659896299292
GPR[EPVAP]-1659896301947
GPR[SPVATF]-1659896301947
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896304277
GPR[EPVS]-1659896304277
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896304278
GPR[SPVAP]-1659896304278
GPR[EPVAP]-1659896306943
GPR[SPVATF]-1659896306944
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896309278
GPR[EPVS]-1659896309278
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896309279
GPR[SPVAP]-1659896309279
GPR[EPVAP]-1659896311952
GPR[SPVATF]-1659896311952
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896314310
GPR[EPVS]-1659896314310
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896314312
GPR[SPVAP]-1659896314312
GPR[EPVAP]-1659896316995
GPR[SPVATF]-1659896316995
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896319348
GPR[EPVS]-1659896319348
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896319350
GPR[SPVAP]-1659896319350
GPR[EPVAP]-1659896322012
GPR[SPVATF]-1659896322012
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896324341
GPR[EPVS]-1659896324341
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896324342
GPR[SPVAP]-1659896324342
GPR[EPVAP]-1659896327009
GPR[SPVATF]-1659896327009
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896329325
GPR[EPVS]-1659896329325
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896329327
GPR[SPVAP]-1659896329327
GPR[EPVAP]-1659896332000
GPR[SPVATF]-1659896332000
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896334322
GPR[EPVS]-1659896334322
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896334323
GPR[SPVAP]-1659896334323
GPR[EPVAP]-1659896337006
GPR[SPVATF]-1659896337006
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896339344
GPR[EPVS]-1659896339344
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896339345
GPR[SPVAP]-1659896339345
GPR[EPVAP]-1659896342019
GPR[SPVATF]-1659896342019
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896344340
GPR[EPVS]-1659896344340
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896344342
GPR[SPVAP]-1659896344342
GPR[EPVAP]-1659896347034
GPR[SPVATF]-1659896347034
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896349338
GPR[EPVS]-1659896349338
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896349340
GPR[SPVAP]-1659896349340
GPR[EPVAP]-1659896351982
GPR[SPVATF]-1659896351982
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896354281
GPR[EPVS]-1659896354281
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896354283
GPR[SPVAP]-1659896354283
GPR[EPVAP]-1659896356971
GPR[SPVATF]-1659896356971
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896359273
GPR[EPVS]-1659896359273
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896359274
GPR[SPVAP]-1659896359274
GPR[EPVAP]-1659896361951
GPR[SPVATF]-1659896361951
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896364316
GPR[EPVS]-1659896364316
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896364317
GPR[SPVAP]-1659896364317
GPR[EPVAP]-1659896367041
GPR[SPVATF]-1659896367041
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896369396
GPR[EPVS]-1659896369396
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896369398
GPR[SPVAP]-1659896369398
GPR[EPVAP]-1659896372116
GPR[SPVATF]-1659896372116
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896374471
GPR[EPVS]-1659896374471
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896374472
GPR[SPVAP]-1659896374472
GPR[EPVAP]-1659896377150
GPR[SPVATF]-1659896377150
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896379481
GPR[EPVS]-1659896379481
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896379483
GPR[SPVAP]-1659896379483
GPR[EPVAP]-1659896382163
GPR[SPVATF]-1659896382163
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896384542
GPR[EPVS]-1659896384542
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896384544
GPR[SPVAP]-1659896384544
GPR[EPVAP]-1659896387229
GPR[SPVATF]-1659896387229
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896389570
GPR[EPVS]-1659896389570
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896389571
GPR[SPVAP]-1659896389571
GPR[EPVAP]-1659896392271
GPR[SPVATF]-1659896392271
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896394608
GPR[EPVS]-1659896394608
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896394609
GPR[SPVAP]-1659896394609
GPR[EPVAP]-1659896397313
GPR[SPVATF]-1659896397313
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896399671
GPR[EPVS]-1659896399671
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896399672
GPR[SPVAP]-1659896399672
GPR[EPVAP]-1659896402434
GPR[SPVATF]-1659896402434
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896404777
GPR[EPVS]-1659896404777
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896404778
GPR[SPVAP]-1659896404778
GPR[EPVAP]-1659896407410
GPR[SPVATF]-1659896407410
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896409742
GPR[EPVS]-1659896409742
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("</ul>");
sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896409744
GPR[SPVAP]-1659896409744
GPR[EPVAP]-1659896412413
GPR[SPVATF]-1659896412413
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896414738
GPR[EPVS]-1659896414738
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896414739
GPR[SPVAP]-1659896414739
GPR[EPVAP]-1659896417401
GPR[SPVATF]-1659896417401
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896419695
GPR[EPVS]-1659896419695
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896419696
GPR[SPVAP]-1659896419696
GPR[EPVAP]-1659896422356
GPR[SPVATF]-1659896422356
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896424686
GPR[EPVS]-1659896424686
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896424688
GPR[SPVAP]-1659896424688
GPR[EPVAP]-1659896427336
GPR[SPVATF]-1659896427336
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896429660
GPR[EPVS]-1659896429660
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else {
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896429662
GPR[SPVAP]-1659896429662
GPR[EPVAP]-1659896432322
GPR[SPVATF]-1659896432323
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896434626
GPR[EPVS]-1659896434626
========
sb.append("</ul>\n");
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896434627
GPR[SPVAP]-1659896434627
GPR[EPVAP]-1659896437280
GPR[SPVATF]-1659896437280
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896439627
GPR[EPVS]-1659896439627
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
out.append("<\\");
}else {
out.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896439629
GPR[SPVAP]-1659896439629
GPR[EPVAP]-1659896440882
GPR[EPVS]-1659896440882
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
out.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896440883
GPR[SPVAP]-1659896440883
GPR[EPVAP]-1659896442143
GPR[EPVS]-1659896442143
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
out.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896442144
GPR[SPVAP]-1659896442144
GPR[EPVAP]-1659896443417
GPR[EPVS]-1659896443417
========
if(usedHashedAliases.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896443419
GPR[SPVAP]-1659896443419
GPR[EPVAP]-1659896444658
GPR[EPVS]-1659896444658
========
sb.append('_');
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896444659
GPR[SPVAP]-1659896444659
GPR[EPVAP]-1659896447314
GPR[SPVATF]-1659896447315
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896449633
GPR[EPVS]-1659896449633
========
if(line.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896449635
GPR[SPVAP]-1659896449635
GPR[EPVAP]-1659896450893
GPR[EPVS]-1659896450893
========
if(newcode.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896450895
GPR[SPVAP]-1659896450895
GPR[EPVAP]-1659896452169
GPR[EPVS]-1659896452169
========
maybeEndStatement();
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896452170
GPR[SPVAP]-1659896452170
GPR[EPVAP]-1659896453415
GPR[EPVS]-1659896453415
========
if((isWordChar(c)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896453416
GPR[SPVAP]-1659896453416
GPR[EPVAP]-1659896454673
GPR[EPVS]-1659896454673
========
append(s);
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896454675
GPR[SPVAP]-1659896454675
GPR[EPVAP]-1659896455954
GPR[EPVS]-1659896455954
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
return 1;
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896455956
GPR[SPVAP]-1659896455956
GPR[EPVAP]-1659896457201
GPR[EPVS]-1659896457201
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
return 0;
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896457202
GPR[SPVAP]-1659896457202
GPR[EPVAP]-1659896458467
GPR[EPVS]-1659896458467
========
if(i==0){
return s;
}
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896458470
GPR[SPVAP]-1659896458470
GPR[EPVAP]-1659896461148
GPR[SPVATF]-1659896461148
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896463457
GPR[EPVS]-1659896463458
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.setLength(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896463459
GPR[SPVAP]-1659896463459
GPR[EPVAP]-1659896466185
GPR[SPVATF]-1659896466185
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896468531
GPR[EPVS]-1659896468531
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
return 1;
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896468532
GPR[SPVAP]-1659896468532
GPR[EPVAP]-1659896469787
GPR[EPVS]-1659896469787
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
return 1;
sb.append("<\\");
}else {
sb.setLength(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896469790
GPR[SPVAP]-1659896469790
GPR[EPVAP]-1659896471049
GPR[EPVS]-1659896471049
========
if(stringAsString.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896471051
GPR[SPVAP]-1659896471051
GPR[EPVAP]-1659896472299
GPR[EPVS]-1659896472299
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append(getReturnSlot().getType().toString());
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896472302
GPR[SPVAP]-1659896472302
GPR[EPVAP]-1659896473537
GPR[EPVS]-1659896473537
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(getReturnSlot().getType().toString());
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896473539
GPR[SPVAP]-1659896473539
GPR[EPVAP]-1659896474785
GPR[EPVS]-1659896474785
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.valueAtColumn(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896474787
GPR[SPVAP]-1659896474787
GPR[EPVAP]-1659896476036
GPR[EPVS]-1659896476036
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
break;
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896476037
GPR[SPVAP]-1659896476037
GPR[EPVAP]-1659896477310
GPR[EPVS]-1659896477310
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
break;
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896477311
GPR[SPVAP]-1659896477311
GPR[EPVAP]-1659896478560
GPR[EPVS]-1659896478560
========
if(L==0)return false;
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896478562
GPR[SPVAP]-1659896478562
GPR[EPVAP]-1659896479811
GPR[EPVS]-1659896479811
========
if(pathPrefix.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896479812
GPR[SPVAP]-1659896479812
GPR[EPVAP]-1659896481051
GPR[EPVS]-1659896481051
========
if(rawJsString.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896481053
GPR[SPVAP]-1659896481053
GPR[EPVAP]-1659896482303
GPR[EPVS]-1659896482303
========
if(s.length()==0){
return 0.0;
}
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896482304
GPR[SPVAP]-1659896482304
GPR[EPVAP]-1659896483550
GPR[EPVS]-1659896483550
========
if(code.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896483552
GPR[SPVAP]-1659896483552
GPR[EPVAP]-1659896484813
GPR[EPVS]-1659896484813
========
if(prefix.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896484815
GPR[SPVAP]-1659896484815
GPR[EPVAP]-1659896486059
GPR[EPVS]-1659896486059
========
case 2 :

if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896486061
GPR[SPVAP]-1659896486061
GPR[EPVAP]-1659896487155
GPR[EPVS]-1659896487155
========
if(jsOutputFile.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896487157
GPR[SPVAP]-1659896487157
GPR[EPVAP]-1659896488415
GPR[EPVS]-1659896488415
========
if(createSourceMap.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896488416
GPR[SPVAP]-1659896488416
GPR[EPVAP]-1659896489669
GPR[EPVS]-1659896489669
========
if(description.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896489671
GPR[SPVAP]-1659896489671
GPR[EPVAP]-1659896490917
GPR[EPVS]-1659896490917
========
if(paramDescription.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896490918
GPR[SPVAP]-1659896490918
GPR[EPVAP]-1659896492170
GPR[EPVS]-1659896492170
========
if(reason.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896492171
GPR[SPVAP]-1659896492171
GPR[EPVAP]-1659896493407
GPR[EPVS]-1659896493407
========
if(returnDescription.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896493408
GPR[SPVAP]-1659896493408
GPR[EPVAP]-1659896494653
GPR[EPVS]-1659896494653
========
if(outputFileName.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896494655
GPR[SPVAP]-1659896494655
GPR[EPVAP]-1659896495911
GPR[EPVS]-1659896495911
========
if(name.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896495912
GPR[SPVAP]-1659896495912
GPR[EPVAP]-1659896497147
GPR[EPVS]-1659896497147
========
if(multilineText.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896497149
GPR[SPVAP]-1659896497149
GPR[EPVAP]-1659896498391
GPR[EPVS]-1659896498391
========
if(contents.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896498393
GPR[SPVAP]-1659896498393
GPR[EPVAP]-1659896499629
GPR[EPVS]-1659896499629
========
if(blacklistRegex.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896499630
GPR[SPVAP]-1659896499630
GPR[EPVAP]-1659896500901
GPR[EPVS]-1659896500901
========
if(fieldName.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896500902
GPR[SPVAP]-1659896500902
GPR[EPVAP]-1659896502171
GPR[EPVS]-1659896502171
========
if(input.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896502174
GPR[SPVAP]-1659896502174
GPR[EPVAP]-1659896503427
GPR[EPVS]-1659896503427
========
if(source.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896503430
GPR[SPVAP]-1659896503430
GPR[EPVAP]-1659896504682
GPR[EPVS]-1659896504682
========
if(depList.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896504684
GPR[SPVAP]-1659896504684
GPR[EPVAP]-1659896505916
GPR[EPVS]-1659896505916
========
if(maybeStringVal.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896505918
GPR[SPVAP]-1659896505918
GPR[EPVAP]-1659896507162
GPR[EPVS]-1659896507162
========
if(author.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896507164
GPR[SPVAP]-1659896507164
GPR[EPVAP]-1659896508413
GPR[EPVS]-1659896508413
========
if(reference.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896508414
GPR[SPVAP]-1659896508414
GPR[EPVAP]-1659896509665
GPR[EPVS]-1659896509665
========
if(value.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896509666
GPR[SPVAP]-1659896509666
GPR[EPVAP]-1659896510908
GPR[EPVS]-1659896510908
========
if(str.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896510909
GPR[SPVAP]-1659896510909
GPR[EPVAP]-1659896512160
GPR[EPVS]-1659896512160
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.join("<\\");
}else {
sb.join(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896512162
GPR[SPVAP]-1659896512162
GPR[EPVAP]-1659896513420
GPR[EPVS]-1659896513420
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.join("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896513421
GPR[SPVAP]-1659896513421
GPR[EPVAP]-1659896514688
GPR[EPVS]-1659896514688
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.join(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896514690
GPR[SPVAP]-1659896514690
GPR[EPVAP]-1659896515950
GPR[EPVS]-1659896515950
========
if(js.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896515952
GPR[SPVAP]-1659896515952
GPR[EPVAP]-1659896517193
GPR[EPVS]-1659896517193
========
if(functionPrivateName.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896517195
GPR[SPVAP]-1659896517195
GPR[EPVAP]-1659896518423
GPR[EPVS]-1659896518423
========
if(templateTypeName.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896518425
GPR[SPVAP]-1659896518425
GPR[EPVAP]-1659896519676
GPR[EPVS]-1659896519676
========
if(version.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896519678
GPR[SPVAP]-1659896519678
GPR[EPVAP]-1659896520920
GPR[EPVS]-1659896520920
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
compiler.append("<\\");
}else {
compiler.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896520921
GPR[SPVAP]-1659896520921
GPR[EPVAP]-1659896522174
GPR[EPVS]-1659896522174
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
compiler.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896522176
GPR[SPVAP]-1659896522176
GPR[EPVAP]-1659896523451
GPR[EPVS]-1659896523451
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
compiler.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896523453
GPR[SPVAP]-1659896523453
GPR[EPVAP]-1659896524699
GPR[EPVS]-1659896524699
========
Preconditions.checkState(singlequoteEscape.length()!=0);
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896524701
GPR[SPVAP]-1659896524701
GPR[EPVAP]-1659896527374
GPR[SPVATF]-1659896527374
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896529730
GPR[EPVS]-1659896529730
========
Preconditions.checkState(singlequoteEscape.length()!=0);
if(name.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896529732
GPR[SPVAP]-1659896529732
GPR[EPVAP]-1659896530996
GPR[EPVS]-1659896530996
========
if(functionName.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896530997
GPR[SPVAP]-1659896530997
GPR[EPVAP]-1659896532241
GPR[EPVS]-1659896532241
========
if(languageIn.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896532243
GPR[SPVAP]-1659896532243
GPR[EPVAP]-1659896533485
GPR[EPVS]-1659896533485
========
if(desc.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896533486
GPR[SPVAP]-1659896533486
GPR[EPVAP]-1659896534734
GPR[EPVS]-1659896534734
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.setDesc("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896534735
GPR[SPVAP]-1659896534735
GPR[EPVAP]-1659896536002
GPR[EPVS]-1659896536002
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.charAt(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896536004
GPR[SPVAP]-1659896536004
GPR[EPVAP]-1659896538676
GPR[SPVATF]-1659896538676
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896541002
GPR[EPVS]-1659896541002
========
if(source.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.charAt(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896541003
GPR[SPVAP]-1659896541003
GPR[EPVAP]-1659896542260
GPR[EPVS]-1659896542260
========
if(fileStr.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896542261
GPR[SPVAP]-1659896542261
GPR[EPVAP]-1659896543506
GPR[EPVS]-1659896543506
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
extraTracingValues=new long[i];
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896543511
GPR[SPVAP]-1659896543511
GPR[EPVAP]-1659896544755
GPR[EPVS]-1659896544755
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
extraTracingValues=new long[i];
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896544756
GPR[SPVAP]-1659896544756
GPR[EPVAP]-1659896545998
GPR[EPVS]-1659896545998
========
Preconditions.checkArgument(s.startsWith(LINEMAP_HEADER),"Expected %s",LINEMAP_HEADER);
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896546001
GPR[SPVAP]-1659896546001
GPR[EPVAP]-1659896547262
GPR[EPVS]-1659896547262
========
if(slot.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896547264
GPR[SPVAP]-1659896547264
GPR[EPVAP]-1659896548524
GPR[EPVS]-1659896548524
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
changed=true;
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896548526
GPR[SPVAP]-1659896548526
GPR[EPVAP]-1659896549774
GPR[EPVS]-1659896549774
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
changed=true;
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896549776
GPR[SPVAP]-1659896549776
GPR[EPVAP]-1659896551021
GPR[EPVS]-1659896551021
========
if(param.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896551022
GPR[SPVAP]-1659896551022
GPR[EPVAP]-1659896552287
GPR[EPVS]-1659896552287
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
replacementParameter=Config.REPLACE_ALL_VALUE;
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896552288
GPR[SPVAP]-1659896552288
GPR[EPVAP]-1659896553542
GPR[EPVS]-1659896553543
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
refInfo.append("<\\");
}else {
refInfo.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896553545
GPR[SPVAP]-1659896553546
GPR[EPVAP]-1659896554801
GPR[EPVS]-1659896554801
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.add("<\\");
}else {
sb.add(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896554802
GPR[SPVAP]-1659896554802
GPR[EPVAP]-1659896556051
GPR[EPVS]-1659896556051
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
refInfo.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896556052
GPR[SPVAP]-1659896556052
GPR[EPVAP]-1659896557294
GPR[EPVS]-1659896557294
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.add("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896557296
GPR[SPVAP]-1659896557296
GPR[EPVAP]-1659896558542
GPR[EPVS]-1659896558542
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
refInfo.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896558543
GPR[SPVAP]-1659896558543
GPR[EPVAP]-1659896559800
GPR[EPVS]-1659896559800
========
if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.add(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896559801
GPR[SPVAP]-1659896559801
GPR[EPVAP]-1659896561072
GPR[EPVS]-1659896561072
========
case 1 :
i=i=-1;
i=18;
i=0;
break;

if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896561075
GPR[SPVAP]-1659896561075
GPR[EPVAP]-1659896562164
GPR[EPVS]-1659896562164
========
if(line.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896564374
GPR[SPVAP]-1659896564374
GPR[EPVAP]-1659896565619
GPR[EPVS]-1659896565619
========
sb.append("  ");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896565620
GPR[SPVAP]-1659896565620
GPR[EPVAP]-1659896568257
GPR[SPVATF]-1659896568257
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896570566
GPR[EPVS]-1659896570566
========
sb.append("| ");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896570568
GPR[SPVAP]-1659896570568
GPR[EPVAP]-1659896573218
GPR[SPVATF]-1659896573218
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896575501
GPR[EPVS]-1659896575501
========
sb.append("  ");
sb.append("| ");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896575503
GPR[SPVAP]-1659896575503
GPR[EPVAP]-1659896578141
GPR[SPVATF]-1659896578141
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896580458
GPR[EPVS]-1659896580458
========
if(prototypeNames.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896580460
GPR[SPVAP]-1659896580460
GPR[EPVAP]-1659896581707
GPR[EPVS]-1659896581707
========
sb.append("<li>"+nameAnchor(node.name));
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896581708
GPR[SPVAP]-1659896581708
GPR[EPVAP]-1659896582968
GPR[EPVS]-1659896582968
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896582971
GPR[SPVAP]-1659896582971
GPR[EPVAP]-1659896584208
GPR[EPVS]-1659896584208
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896584210
GPR[SPVAP]-1659896584210
GPR[EPVAP]-1659896586883
GPR[SPVATF]-1659896586883
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896589208
GPR[EPVS]-1659896589208
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896589209
GPR[SPVAP]-1659896589209
GPR[EPVAP]-1659896591868
GPR[SPVATF]-1659896591868
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896594181
GPR[EPVS]-1659896594181
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896594183
GPR[SPVAP]-1659896594183
GPR[EPVAP]-1659896596901
GPR[SPVATF]-1659896596901
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896599224
GPR[EPVS]-1659896599224
========
sb.append("<ul>");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896599225
GPR[SPVAP]-1659896599225
GPR[EPVAP]-1659896601910
GPR[SPVATF]-1659896601910
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896604249
GPR[EPVS]-1659896604249
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896604250
GPR[SPVAP]-1659896604250
GPR[EPVAP]-1659896606937
GPR[SPVATF]-1659896606937
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896609254
GPR[EPVS]-1659896609254
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896609256
GPR[SPVAP]-1659896609256
GPR[EPVAP]-1659896611913
GPR[SPVATF]-1659896611913
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896614204
GPR[EPVS]-1659896614204
========
sb.append("<ul>");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896614205
GPR[SPVAP]-1659896614205
GPR[EPVAP]-1659896616879
GPR[SPVATF]-1659896616879
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896619265
GPR[EPVS]-1659896619265
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896619267
GPR[SPVAP]-1659896619267
GPR[EPVAP]-1659896621915
GPR[SPVATF]-1659896621915
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896624231
GPR[EPVS]-1659896624231
========
sb.append("<ul>");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("</ul>\n");
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896624232
GPR[SPVAP]-1659896624232
GPR[EPVAP]-1659896626907
GPR[SPVATF]-1659896626907
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896629256
GPR[EPVS]-1659896629256
========
sb.append("<ul>");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896629257
GPR[SPVAP]-1659896629257
GPR[EPVAP]-1659896632013
GPR[SPVATF]-1659896632013
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896634361
GPR[EPVS]-1659896634361
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896634363
GPR[SPVAP]-1659896634363
GPR[EPVAP]-1659896637043
GPR[SPVATF]-1659896637043
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896639377
GPR[EPVS]-1659896639377
========
sb.append("<ul>");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896639379
GPR[SPVAP]-1659896639379
GPR[EPVAP]-1659896642038
GPR[SPVATF]-1659896642038
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896644337
GPR[EPVS]-1659896644337
========
sb.append("<ul>");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896644339
GPR[SPVAP]-1659896644339
GPR[EPVAP]-1659896647009
GPR[SPVATF]-1659896647009
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896649342
GPR[EPVS]-1659896649342
========
sb.append("<ul>");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896649344
GPR[SPVAP]-1659896649344
GPR[EPVAP]-1659896651984
GPR[SPVATF]-1659896651984
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896654323
GPR[EPVS]-1659896654323
========
sb.append("<ul>");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>\n");
sb.append("<ul>");
sb.append("</ul>\n");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896654324
GPR[SPVAP]-1659896654324
GPR[EPVAP]-1659896656982
GPR[SPVATF]-1659896656982
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896659340
GPR[EPVS]-1659896659340
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("</ul>");
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896659341
GPR[SPVAP]-1659896659341
GPR[EPVAP]-1659896661984
GPR[SPVATF]-1659896661985
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896664329
GPR[EPVS]-1659896664329
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896664330
GPR[SPVAP]-1659896664330
GPR[EPVAP]-1659896666992
GPR[SPVATF]-1659896666992
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896669332
GPR[EPVS]-1659896669332
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896669333
GPR[SPVAP]-1659896669333
GPR[EPVAP]-1659896671971
GPR[SPVATF]-1659896671971
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896674342
GPR[EPVS]-1659896674342
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896674343
GPR[SPVAP]-1659896674343
GPR[EPVAP]-1659896675613
GPR[EPVS]-1659896675613
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("</ul>");
builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896675615
GPR[SPVAP]-1659896675615
GPR[EPVAP]-1659896676883
GPR[EPVS]-1659896676883
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896676885
GPR[SPVAP]-1659896676885
GPR[EPVAP]-1659896678166
GPR[EPVS]-1659896678166
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896678167
GPR[SPVAP]-1659896678167
GPR[EPVAP]-1659896679404
GPR[EPVS]-1659896679404
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896679406
GPR[SPVAP]-1659896679406
GPR[EPVAP]-1659896682098
GPR[SPVATF]-1659896682098
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896684417
GPR[EPVS]-1659896684417
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896684418
GPR[SPVAP]-1659896684418
GPR[EPVAP]-1659896687097
GPR[SPVATF]-1659896687097
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896689429
GPR[EPVS]-1659896689429
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896689430
GPR[SPVAP]-1659896689430
GPR[EPVAP]-1659896692131
GPR[SPVATF]-1659896692131
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896694440
GPR[EPVS]-1659896694440
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896694442
GPR[SPVAP]-1659896694442
GPR[EPVAP]-1659896697120
GPR[SPVATF]-1659896697120
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896699431
GPR[EPVS]-1659896699431
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("</ul>");
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896699433
GPR[SPVAP]-1659896699433
GPR[EPVAP]-1659896702125
GPR[SPVATF]-1659896702125
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896704486
GPR[EPVS]-1659896704486
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896704487
GPR[SPVAP]-1659896704487
GPR[EPVAP]-1659896707270
GPR[SPVATF]-1659896707270
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896709660
GPR[EPVS]-1659896709660
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>");
builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896709661
GPR[SPVAP]-1659896709661
GPR[EPVAP]-1659896710928
GPR[EPVS]-1659896710928
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896710929
GPR[SPVAP]-1659896710929
GPR[EPVAP]-1659896712181
GPR[EPVS]-1659896712181
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896712182
GPR[SPVAP]-1659896712182
GPR[EPVAP]-1659896713441
GPR[EPVS]-1659896713441
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896713443
GPR[SPVAP]-1659896713443
GPR[EPVAP]-1659896714720
GPR[EPVS]-1659896714720
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("</ul>");
builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896714722
GPR[SPVAP]-1659896714722
GPR[EPVAP]-1659896715973
GPR[EPVS]-1659896715973
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896715975
GPR[SPVAP]-1659896715975
GPR[EPVAP]-1659896717221
GPR[EPVS]-1659896717221
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896717223
GPR[SPVAP]-1659896717223
GPR[EPVAP]-1659896719881
GPR[SPVATF]-1659896719881
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896722230
GPR[EPVS]-1659896722230
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896722231
GPR[SPVAP]-1659896722231
GPR[EPVAP]-1659896724892
GPR[SPVATF]-1659896724893
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896727210
GPR[EPVS]-1659896727210
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896727211
GPR[SPVAP]-1659896727211
GPR[EPVAP]-1659896729882
GPR[SPVATF]-1659896729882
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896732239
GPR[EPVS]-1659896732239
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896732240
GPR[SPVAP]-1659896732240
GPR[EPVAP]-1659896734891
GPR[SPVATF]-1659896734891
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896737212
GPR[EPVS]-1659896737212
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896737213
GPR[SPVAP]-1659896737213
GPR[EPVAP]-1659896738450
GPR[EPVS]-1659896738450
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>");
builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896738452
GPR[SPVAP]-1659896738452
GPR[EPVAP]-1659896739700
GPR[EPVS]-1659896739700
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896739701
GPR[SPVAP]-1659896739701
GPR[EPVAP]-1659896740955
GPR[EPVS]-1659896740955
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

builder.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896740957
GPR[SPVAP]-1659896740957
GPR[EPVAP]-1659896742204
GPR[EPVS]-1659896742204
========
sb.append("</ul>\n");
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<ul>");
sb.append("</ul>");
sb.append("<ul>");
sb.append("</ul>");

sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896742206
GPR[SPVAP]-1659896742206
GPR[EPVAP]-1659896744854
GPR[SPVATF]-1659896744854
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896747165
GPR[EPVS]-1659896747165
========
if(wrapper.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896747166
GPR[SPVAP]-1659896747166
GPR[EPVAP]-1659896748434
GPR[EPVS]-1659896748434
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
message.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896748436
GPR[SPVAP]-1659896748436
GPR[EPVAP]-1659896749686
GPR[EPVS]-1659896749686
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
out.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
out.append("<\\");
}else {
out.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896749688
GPR[SPVAP]-1659896749688
GPR[EPVAP]-1659896750922
GPR[EPVS]-1659896750922
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
out.append("<\\");
}else {
out.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896750924
GPR[SPVAP]-1659896750924
GPR[EPVAP]-1659896752172
GPR[EPVS]-1659896752172
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
out.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896752173
GPR[SPVAP]-1659896752173
GPR[EPVAP]-1659896753436
GPR[EPVS]-1659896753436
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
out.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896753438
GPR[SPVAP]-1659896753438
GPR[EPVAP]-1659896754692
GPR[EPVS]-1659896754692
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
out.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896754693
GPR[SPVAP]-1659896754693
GPR[EPVAP]-1659896755931
GPR[EPVS]-1659896755931
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append(" - FUNCTIONS: ");
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896755932
GPR[SPVAP]-1659896755932
GPR[EPVAP]-1659896758611
GPR[SPVATF]-1659896758611
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896760970
GPR[EPVS]-1659896760970
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
b.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896760973
GPR[SPVAP]-1659896760973
GPR[EPVAP]-1659896762246
GPR[EPVS]-1659896762246
========
if(usedHashedAliases.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896762249
GPR[SPVAP]-1659896762249
GPR[EPVAP]-1659896763487
GPR[EPVS]-1659896763487
========
sb.append('_');
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896763489
GPR[SPVAP]-1659896763489
GPR[EPVAP]-1659896766155
GPR[SPVATF]-1659896766155
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896768489
GPR[EPVS]-1659896768489
========
if(newcode.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896768491
GPR[SPVAP]-1659896768491
GPR[EPVAP]-1659896769803
GPR[EPVS]-1659896769803
========
maybeEndStatement();
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896769804
GPR[SPVAP]-1659896769804
GPR[EPVAP]-1659896771068
GPR[EPVS]-1659896771068
========
if((isWordChar(c)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896771070
GPR[SPVAP]-1659896771070
GPR[EPVAP]-1659896772332
GPR[EPVS]-1659896772332
========
append(s);
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896772334
GPR[SPVAP]-1659896772334
GPR[EPVAP]-1659896773577
GPR[EPVS]-1659896773577
========
if(i==0){
return s;
}
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896773579
GPR[SPVAP]-1659896773579
GPR[EPVAP]-1659896776225
GPR[SPVATF]-1659896776225
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896778544
GPR[EPVS]-1659896778544
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
return 1;
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896778546
GPR[SPVAP]-1659896778546
GPR[EPVAP]-1659896779809
GPR[EPVS]-1659896779809
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
break;
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896779811
GPR[SPVAP]-1659896779811
GPR[EPVAP]-1659896781079
GPR[EPVS]-1659896781079
========
if(L==0)return false;
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896781080
GPR[SPVAP]-1659896781080
GPR[EPVAP]-1659896782325
GPR[EPVS]-1659896782325
========
if(pathPrefix.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896782326
GPR[SPVAP]-1659896782326
GPR[EPVAP]-1659896783604
GPR[EPVS]-1659896783604
========
if(stringAsString.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896783606
GPR[SPVAP]-1659896783606
GPR[EPVAP]-1659896784867
GPR[EPVS]-1659896784867
========
if(rawJsString.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896784869
GPR[SPVAP]-1659896784869
GPR[EPVAP]-1659896786123
GPR[EPVS]-1659896786123
========
if(s.length()==0){
return 0.0;
}
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896786124
GPR[SPVAP]-1659896786124
GPR[EPVAP]-1659896787391
GPR[EPVS]-1659896787391
========
if(s.length()>2&&s.charAt(0)=='0'&&(s.charAt(1)=='x'||s.charAt(1)=='X')){
try{
return Double.valueOf(Integer.parseInt(s.substring(2),16));
}catch (NumberFormatException e) {
  return Double.NaN;
}

}
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896787392
GPR[SPVAP]-1659896787392
GPR[EPVAP]-1659896788641
GPR[EPVS]-1659896788641
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append(getReturnSlot().getType().toString());
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896788642
GPR[SPVAP]-1659896788642
GPR[EPVAP]-1659896789889
GPR[EPVS]-1659896789889
========
if(code.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896789890
GPR[SPVAP]-1659896789890
GPR[EPVAP]-1659896791116
GPR[EPVS]-1659896791116
========
if(prefix.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896791117
GPR[SPVAP]-1659896791117
GPR[EPVAP]-1659896792364
GPR[EPVS]-1659896792364
========
if(name.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896792367
GPR[SPVAP]-1659896792367
GPR[EPVAP]-1659896793643
GPR[EPVS]-1659896793643
========
case 2 :

if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896793645
GPR[SPVAP]-1659896793645
GPR[EPVAP]-1659896794891
GPR[EPVS]-1659896794891
========
if(outputFileName.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896794892
GPR[SPVAP]-1659896794892
GPR[EPVAP]-1659896796126
GPR[EPVS]-1659896796127
========
if(description.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896796128
GPR[SPVAP]-1659896796128
GPR[EPVAP]-1659896797379
GPR[EPVS]-1659896797379
========
if(paramDescription.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896797381
GPR[SPVAP]-1659896797381
GPR[EPVAP]-1659896798637
GPR[EPVS]-1659896798637
========
if(reason.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896798639
GPR[SPVAP]-1659896798639
GPR[EPVAP]-1659896799892
GPR[EPVS]-1659896799892
========
if(returnDescription.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896799894
GPR[SPVAP]-1659896799894
GPR[EPVAP]-1659896801140
GPR[EPVS]-1659896801140
========
if(jsOutputFile.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896801142
GPR[SPVAP]-1659896801142
GPR[EPVAP]-1659896802382
GPR[EPVS]-1659896802382
========
if(createSourceMap.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896802384
GPR[SPVAP]-1659896802384
GPR[EPVAP]-1659896803627
GPR[EPVS]-1659896803627
========
if(contents.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896803629
GPR[SPVAP]-1659896803629
GPR[EPVAP]-1659896804873
GPR[EPVS]-1659896804873
========
if(blacklistRegex.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896804875
GPR[SPVAP]-1659896804875
GPR[EPVAP]-1659896806108
GPR[EPVS]-1659896806108
========
if(fieldName.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896806110
GPR[SPVAP]-1659896806110
GPR[EPVAP]-1659896807351
GPR[EPVS]-1659896807351
========
if(multilineText.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896807353
GPR[SPVAP]-1659896807353
GPR[EPVAP]-1659896808609
GPR[EPVS]-1659896808609
========
if(input.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896808610
GPR[SPVAP]-1659896808610
GPR[EPVAP]-1659896809861
GPR[EPVS]-1659896809861
========
if(depList.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896809862
GPR[SPVAP]-1659896809862
GPR[EPVAP]-1659896811107
GPR[EPVS]-1659896811107
========
if(maybeStringVal.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896811109
GPR[SPVAP]-1659896811109
GPR[EPVAP]-1659896812378
GPR[EPVS]-1659896812378
========
if(author.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896812379
GPR[SPVAP]-1659896812379
GPR[EPVAP]-1659896813620
GPR[EPVS]-1659896813621
========
if(reference.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896813622
GPR[SPVAP]-1659896813622
GPR[EPVAP]-1659896814863
GPR[EPVS]-1659896814863
========
if(str.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896814864
GPR[SPVAP]-1659896814864
GPR[EPVAP]-1659896816127
GPR[EPVS]-1659896816127
========
if(source.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896816128
GPR[SPVAP]-1659896816128
GPR[EPVAP]-1659896817387
GPR[EPVS]-1659896817387
========
if(value.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896817389
GPR[SPVAP]-1659896817389
GPR[EPVAP]-1659896818634
GPR[EPVS]-1659896818634
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.join("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896818636
GPR[SPVAP]-1659896818636
GPR[EPVAP]-1659896819889
GPR[EPVS]-1659896819889
========
if(js.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896819891
GPR[SPVAP]-1659896819891
GPR[EPVAP]-1659896821138
GPR[EPVS]-1659896821138
========
if(functionPrivateName.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896821140
GPR[SPVAP]-1659896821140
GPR[EPVAP]-1659896822396
GPR[EPVS]-1659896822396
========
if(templateTypeName.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896822399
GPR[SPVAP]-1659896822399
GPR[EPVAP]-1659896823673
GPR[EPVS]-1659896823673
========
if(version.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896823674
GPR[SPVAP]-1659896823674
GPR[EPVAP]-1659896824913
GPR[EPVS]-1659896824913
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
compiler.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896824915
GPR[SPVAP]-1659896824915
GPR[EPVAP]-1659896826159
GPR[EPVS]-1659896826159
========
reportCodeChange();
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896826160
GPR[SPVAP]-1659896826160
GPR[EPVAP]-1659896827404
GPR[EPVS]-1659896827405
========
if(functionName.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896827407
GPR[SPVAP]-1659896827407
GPR[EPVAP]-1659896828658
GPR[EPVS]-1659896828658
========
if(desc.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896828660
GPR[SPVAP]-1659896828660
GPR[EPVAP]-1659896829937
GPR[EPVS]-1659896829937
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.setDesc("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896829939
GPR[SPVAP]-1659896829939
GPR[EPVAP]-1659896831196
GPR[EPVS]-1659896831196
========
if(languageIn.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(languageIn.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896831201
GPR[SPVAP]-1659896831201
GPR[EPVAP]-1659896832454
GPR[EPVS]-1659896832454
========
if(languageIn.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896832455
GPR[SPVAP]-1659896832455
GPR[EPVAP]-1659896833702
GPR[EPVS]-1659896833703
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(languageIn.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896833704
GPR[SPVAP]-1659896833704
GPR[EPVAP]-1659896834960
GPR[EPVS]-1659896834960
========
if(fileStr.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896834963
GPR[SPVAP]-1659896834963
GPR[EPVAP]-1659896836221
GPR[EPVS]-1659896836221
========
case 1 :
i=i=-1;
i=18;
i=0;
break;

if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896836224
GPR[SPVAP]-1659896836224
GPR[EPVAP]-1659896837467
GPR[EPVS]-1659896837467
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
extraTracingValues=new long[i];
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896837469
GPR[SPVAP]-1659896837469
GPR[EPVAP]-1659896838724
GPR[EPVS]-1659896838724
========
if(slot.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896838727
GPR[SPVAP]-1659896838727
GPR[EPVAP]-1659896840021
GPR[EPVS]-1659896840021
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
changed=true;
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896840022
GPR[SPVAP]-1659896840022
GPR[EPVAP]-1659896841279
GPR[EPVS]-1659896841279
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
refInfo.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
refInfo.append("<\\");
}else {
refInfo.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896841282
GPR[SPVAP]-1659896841282
GPR[EPVAP]-1659896842562
GPR[EPVS]-1659896842562
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
refInfo.append("<\\");
}else {
refInfo.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896842563
GPR[SPVAP]-1659896842563
GPR[EPVAP]-1659896843814
GPR[EPVS]-1659896843814
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
refInfo.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896843816
GPR[SPVAP]-1659896843816
GPR[EPVAP]-1659896845075
GPR[EPVS]-1659896845075
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.add("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896845077
GPR[SPVAP]-1659896845077
GPR[EPVAP]-1659896846353
GPR[EPVS]-1659896846353
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
refInfo.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896846355
GPR[SPVAP]-1659896846355
GPR[EPVAP]-1659896847608
GPR[EPVS]-1659896847608
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
refInfo.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896847609
GPR[SPVAP]-1659896847609
GPR[EPVAP]-1659896848866
GPR[EPVS]-1659896848866
========
Preconditions.checkArgument(s.startsWith(LINEMAP_HEADER),"Expected %s",LINEMAP_HEADER);
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896848868
GPR[SPVAP]-1659896848868
GPR[EPVAP]-1659896850114
GPR[EPVS]-1659896850114
========
if(param.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(param.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896850117
GPR[SPVAP]-1659896850117
GPR[EPVAP]-1659896851355
GPR[EPVS]-1659896851355
========
if(param.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896851356
GPR[SPVAP]-1659896851356
GPR[EPVAP]-1659896852603
GPR[EPVS]-1659896852603
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(param.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896852605
GPR[SPVAP]-1659896852605
GPR[EPVAP]-1659896853850
GPR[EPVS]-1659896853850
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
replacementParameter=Config.REPLACE_ALL_VALUE;
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896853852
GPR[SPVAP]-1659896853852
GPR[EPVAP]-1659896855149
GPR[EPVS]-1659896855149
========
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
replacementParameter=i;
sb.append("<\\");
}else {
sb.append(c);
}

========
MM Copying to MM
GPR[SPVS]-1659896855150
GPR[SPVAP]-1659896855150
GPR[EPVAP]-1659896856404
GPR[EPVS]-1659896856404
========
case '<' :
 final String END_SCRIPT="/script";
sb.append("\\r");
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896858144
GPR[SPVAP]-1659896858144
GPR[EPVAP]-1659896860870
GPR[SPVATF]-1659896860870
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896863203
GPR[EPVS]-1659896863203
========
case '<' :
 final String END_SCRIPT="/script";
sb.append("\\n");
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896863204
GPR[SPVAP]-1659896863204
GPR[EPVAP]-1659896865860
GPR[SPVATF]-1659896865860
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896868141
GPR[EPVS]-1659896868141
========
case '<' :
 final String END_SCRIPT="/script";
sb.append("\\u2028");
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896868143
GPR[SPVAP]-1659896868143
GPR[EPVAP]-1659896870794
GPR[SPVATF]-1659896870794
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896873094
GPR[EPVS]-1659896873094
========
case '<' :
 final String END_SCRIPT="/script";
sb.append("\\u2029");
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896873096
GPR[SPVAP]-1659896873096
GPR[EPVAP]-1659896875763
GPR[SPVATF]-1659896875763
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896878127
GPR[EPVS]-1659896878127
========
case '<' :
 final String END_SCRIPT="/script";
pos=i+1;
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896878129
GPR[SPVAP]-1659896878129
GPR[EPVAP]-1659896879392
GPR[EPVS]-1659896879392
========
case '<' :
 final String END_SCRIPT="/script";
sb.append("    ");
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896879393
GPR[SPVAP]-1659896879393
GPR[EPVAP]-1659896882052
GPR[SPVATF]-1659896882052
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896884401
GPR[EPVS]-1659896884401
========
case '<' :
 final String END_SCRIPT="/script";
sb.append(backslashEscape);
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896884403
GPR[SPVAP]-1659896884403
GPR[EPVAP]-1659896887059
GPR[SPVATF]-1659896887059
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896889410
GPR[EPVS]-1659896889410
========
case '\"' :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896889412
GPR[SPVAP]-1659896889412
GPR[EPVAP]-1659896890684
GPR[EPVS]-1659896890684
========
case '<' :
 final String END_SCRIPT="/script";
sb.append(singlequoteEscape);
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896890685
GPR[SPVAP]-1659896890685
GPR[EPVAP]-1659896893389
GPR[SPVATF]-1659896893389
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896895721
GPR[EPVS]-1659896895721
========
case '>' :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896895722
GPR[SPVAP]-1659896895722
GPR[EPVAP]-1659896896986
GPR[EPVS]-1659896896986
========
case '<' :
 final String END_SCRIPT="/script";
sb.append("\\0");
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896896989
GPR[SPVAP]-1659896896989
GPR[EPVAP]-1659896899640
GPR[SPVATF]-1659896899640
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896901959
GPR[EPVS]-1659896901959
========
case '\n' :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896901960
GPR[SPVAP]-1659896901960
GPR[EPVAP]-1659896903237
GPR[EPVS]-1659896903237
========
case '\t' :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896903239
GPR[SPVAP]-1659896903239
GPR[EPVAP]-1659896904480
GPR[EPVS]-1659896904480
========
case '<' :
 final String END_SCRIPT="/script";
sb.append(" ");
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896904482
GPR[SPVAP]-1659896904482
GPR[EPVAP]-1659896907228
GPR[SPVATF]-1659896907228
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896909531
GPR[EPVS]-1659896909531
========
case 2 :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896909532
GPR[SPVAP]-1659896909532
GPR[EPVAP]-1659896912215
GPR[SPVATF]-1659896912215
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896914600
GPR[EPVS]-1659896914600
========
case 2 :

case '<' :
 final String END_SCRIPT="/script";
sb.append(" ");
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896914602
GPR[SPVAP]-1659896914602
GPR[EPVAP]-1659896917251
GPR[SPVATF]-1659896917251
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896919583
GPR[EPVS]-1659896919583
========
case '\r' :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896919584
GPR[SPVAP]-1659896919584
GPR[EPVAP]-1659896920842
GPR[EPVS]-1659896920842
========
if(L==0)return false;
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896920843
GPR[SPVAP]-1659896920843
GPR[EPVAP]-1659896922104
GPR[EPVS]-1659896922104
========
if(!Character.isJavaIdentifierStart(s.charAt(0)))return false;
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896922105
GPR[SPVAP]-1659896922105
GPR[EPVAP]-1659896923351
GPR[EPVS]-1659896923351
========
sb.append("{");
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896923352
GPR[SPVAP]-1659896923352
GPR[EPVAP]-1659896924604
GPR[EPVS]-1659896924604
========
case '<' :
 final String END_SCRIPT="/script";
++i;
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896924607
GPR[SPVAP]-1659896924607
GPR[EPVAP]-1659896927289
GPR[SPVATF]-1659896927289
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896929611
GPR[EPVS]-1659896929611
========
case FUNCTION_END :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896929612
GPR[SPVAP]-1659896929612
GPR[EPVAP]-1659896930901
GPR[EPVS]-1659896930901
========
if(i==0||!Character.isJavaIdentifierStart(s.charAt(0)))return false;
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896930903
GPR[SPVAP]-1659896930903
GPR[EPVAP]-1659896932154
GPR[EPVS]-1659896932154
========
case Token.NUMBER :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896932156
GPR[SPVAP]-1659896932156
GPR[EPVAP]-1659896933401
GPR[EPVS]-1659896933401
========
case Token.NAME :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896933403
GPR[SPVAP]-1659896933403
GPR[EPVAP]-1659896936041
GPR[SPVATF]-1659896936041
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896938364
GPR[EPVS]-1659896938364
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
indent-=i;
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896938367
GPR[SPVAP]-1659896938367
GPR[EPVAP]-1659896939627
GPR[EPVS]-1659896939627
========
case '<' :
 final String END_SCRIPT="/script";
c=s.charAt(0);
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896939628
GPR[SPVAP]-1659896939628
GPR[EPVAP]-1659896942286
GPR[SPVATF]-1659896942286
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896944644
GPR[EPVS]-1659896944644
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(i=='c'){
X="const";
id=Id_const;
}else if(i=='f'){
X="final";
id=Id_final;
}
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896944646
GPR[SPVAP]-1659896944646
GPR[EPVAP]-1659896945904
GPR[EPVS]-1659896945904
========
case '<' :
 final String END_SCRIPT="/script";
c=s.charAt(0);
if(i=='c'){
X="const";
id=Id_const;
}else if(i=='f'){
X="final";
id=Id_final;
}

 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896945906
GPR[SPVAP]-1659896945906
GPR[EPVAP]-1659896947159
GPR[EPVS]-1659896947159
========
case 'o' :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896947160
GPR[SPVAP]-1659896947160
GPR[EPVAP]-1659896949827
GPR[SPVATF]-1659896949827
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896952120
GPR[EPVS]-1659896952120
========
case 'o' :

case '<' :
 final String END_SCRIPT="/script";
c=s.charAt(0);
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896952122
GPR[SPVAP]-1659896952122
GPR[EPVAP]-1659896954841
GPR[SPVATF]-1659896954841
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896957140
GPR[EPVS]-1659896957140
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(i=='d'){
X="delete";
id=Id_delete;
}else if(i=='r'){
X="return";
id=Id_return;
}
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896957142
GPR[SPVAP]-1659896957142
GPR[EPVAP]-1659896958401
GPR[EPVS]-1659896958401
========
case '<' :
 final String END_SCRIPT="/script";
c=s.charAt(0);
if(i=='d'){
X="delete";
id=Id_delete;
}else if(i=='r'){
X="return";
id=Id_return;
}

 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896958402
GPR[SPVAP]-1659896958402
GPR[EPVAP]-1659896959685
GPR[EPVS]-1659896959685
========
case 'h' :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896959686
GPR[SPVAP]-1659896959686
GPR[EPVAP]-1659896962336
GPR[SPVATF]-1659896962336
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896964678
GPR[EPVS]-1659896964678
========
case 'h' :

case '<' :
 final String END_SCRIPT="/script";
c=s.charAt(0);
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896964679
GPR[SPVAP]-1659896964680
GPR[EPVAP]-1659896967376
GPR[SPVATF]-1659896967376
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896969738
GPR[EPVS]-1659896969738
========
case '<' :
 final String END_SCRIPT="/script";
c=s.charAt(1);
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896969739
GPR[SPVAP]-1659896969739
GPR[EPVAP]-1659896972396
GPR[SPVATF]-1659896972396
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896974754
GPR[EPVS]-1659896974755
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(i=='m'){
X="implements";
id=Id_implements;
}else if(i=='n'){
X="instanceof";
id=Id_instanceof;
}
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896974756
GPR[SPVAP]-1659896974756
GPR[EPVAP]-1659896976015
GPR[EPVS]-1659896976015
========
case '<' :
 final String END_SCRIPT="/script";
c=s.charAt(1);
if(i=='m'){
X="implements";
id=Id_implements;
}else if(i=='n'){
X="instanceof";
id=Id_instanceof;
}

 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896976016
GPR[SPVAP]-1659896976016
GPR[EPVAP]-1659896977262
GPR[EPVS]-1659896977262
========
case 12 :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896977263
GPR[SPVAP]-1659896977263
GPR[EPVAP]-1659896979959
GPR[SPVATF]-1659896979959
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896982281
GPR[EPVS]-1659896982281
========
case 12 :

case '<' :
 final String END_SCRIPT="/script";
c=s.charAt(1);
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659896982282
GPR[SPVAP]-1659896982282
GPR[EPVAP]-1659896984953
GPR[SPVATF]-1659896984953
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896987270
GPR[EPVS]-1659896987270
========
case 1 :
i=i=-1;
i=18;
i=0;
break;

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896987273
GPR[SPVAP]-1659896987273
GPR[EPVAP]-1659896989958
GPR[SPVATF]-1659896989958
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896992279
GPR[EPVS]-1659896992279
========
case 1 :
i=i=-1;
i=18;
i=0;
break;

case 2 :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896992281
GPR[SPVAP]-1659896992281
GPR[EPVAP]-1659896994977
GPR[SPVATF]-1659896994977
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659896997281
GPR[EPVS]-1659896997281
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(prefix.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896997283
GPR[SPVAP]-1659896997283
GPR[EPVAP]-1659896998560
GPR[EPVS]-1659896998560
========
case Token.DIV :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659896998562
GPR[SPVAP]-1659896998562
GPR[EPVAP]-1659897001284
GPR[SPVATF]-1659897001284
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897003624
GPR[EPVS]-1659897003624
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(i<=0)ndigits=1;
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659897003626
GPR[SPVAP]-1659897003626
GPR[EPVAP]-1659897004887
GPR[EPVS]-1659897004887
========
case '<' :
 final String END_SCRIPT="/script";
ilim=ilim1=i=i;
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659897004889
GPR[SPVAP]-1659897004889
GPR[EPVAP]-1659897006133
GPR[EPVS]-1659897006133
========
case '<' :
 final String END_SCRIPT="/script";
if(i<=0)ndigits=1;
ilim=ilim1=i=i;

 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659897006134
GPR[SPVAP]-1659897006134
GPR[EPVAP]-1659897007384
GPR[EPVS]-1659897007384
========
case 3 :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659897007385
GPR[SPVAP]-1659897007385
GPR[EPVAP]-1659897010069
GPR[SPVATF]-1659897010069
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897012410
GPR[EPVS]-1659897012410
========
case Token.MUL :

case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659897012411
GPR[SPVAP]-1659897012411
GPR[EPVAP]-1659897015104
GPR[SPVATF]-1659897015104
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897017459
GPR[EPVS]-1659897017459
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(name.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659897017461
GPR[SPVAP]-1659897017461
GPR[EPVAP]-1659897018725
GPR[EPVS]-1659897018725
========
if(i==0){
return s;
}
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659897018727
GPR[SPVAP]-1659897018727
GPR[EPVAP]-1659897019969
GPR[EPVS]-1659897019969
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(slot.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659897019976
GPR[SPVAP]-1659897019976
GPR[EPVAP]-1659897021224
GPR[EPVS]-1659897021224
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
changed=true;
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659897021225
GPR[SPVAP]-1659897021225
GPR[EPVAP]-1659897022468
GPR[EPVS]-1659897022468
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
refInfo.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
refInfo.append("<\\");
}else {
refInfo.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659897022471
GPR[SPVAP]-1659897022471
GPR[EPVAP]-1659897023713
GPR[EPVS]-1659897023713
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
refInfo.append("<\\");
}else {
refInfo.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659897023714
GPR[SPVAP]-1659897023714
GPR[EPVAP]-1659897024944
GPR[EPVS]-1659897024944
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
refInfo.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659897024945
GPR[SPVAP]-1659897024945
GPR[EPVAP]-1659897026204
GPR[EPVS]-1659897026204
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.add("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659897026205
GPR[SPVAP]-1659897026205
GPR[EPVAP]-1659897027459
GPR[EPVS]-1659897027459
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
refInfo.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659897027460
GPR[SPVAP]-1659897027460
GPR[EPVAP]-1659897028700
GPR[EPVS]-1659897028700
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
refInfo.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659897028702
GPR[SPVAP]-1659897028702
GPR[EPVAP]-1659897029966
GPR[EPVS]-1659897029966
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
refInfo.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
refInfo.append("<\\");
}else {
sb.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659897029968
GPR[SPVAP]-1659897029968
GPR[EPVAP]-1659897031221
GPR[EPVS]-1659897031221
========
case '<' :
 final String END_SCRIPT="/script";
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
refInfo.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
refInfo.append(c);
}
break;


========
MM Copying to MM
GPR[SPVS]-1659897031223
GPR[SPVAP]-1659897031223
GPR[EPVAP]-1659897032480
GPR[EPVS]-1659897032480
========
case '\"' :

case '<' :
 final String END_SCRIPT="/script";
sb.append(backslashEscape);
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659897032485
GPR[SPVAP]-1659897032485
GPR[EPVAP]-1659897033728
GPR[EPVS]-1659897033728
========
case '>' :

case '<' :
 final String END_SCRIPT="/script";
sb.append(singlequoteEscape);
 final String START_COMMENT="!--";
if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
sb.append("<\\");
}else {
sb.append(c);
}
break;



========
MM Copying to MM
GPR[SPVS]-1659897033730
GPR[SPVAP]-1659897033730
GPR[EPVAP]-1659897034977
GPR[EPVS]-1659897034977
GPR[ESUN]-1659897037101
GPR[SSUN]-1659897037101
com.google.javascript.jscomp.CodeGenerator,997
Find no block!
GPR[SSUN]-1659897037591
com.google.javascript.jscomp.CodeGenerator,628
UNKNOWN ASTNode type : catch (DataFlowAnalysis.MaxIterationsExceededException e) {
  compiler.report(t.makeError(n,DATAFLOW_ERROR));
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Node.tokenToName(n.getType()),n);
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Node.tokenToName(n.getType()),n);
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Node.tokenToName(n.getType()),n);
}

========
if(VAR!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897040736
GPR[SPVAP]-1659897040736
GPR[EPVAP]-1659897043463
GPR[EPVS]-1659897043463
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897043464
GPR[SPVAP]-1659897043464
GPR[EPVAP]-1659897049930
GPR[SPVATF]-1659897049930
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897052266
GPR[EPVS]-1659897052266
========
if(childCount!=Token.NAME){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897052267
GPR[SPVAP]-1659897052267
GPR[EPVAP]-1659897054935
GPR[SPVATF]-1659897054935
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897057298
GPR[EPVS]-1659897057298
========
if(childCount==Token.NAME){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897057299
GPR[SPVAP]-1659897057299
GPR[EPVAP]-1659897059947
GPR[SPVATF]-1659897059947
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897062264
GPR[EPVS]-1659897062264
========
if(childCount!=Token.VAR){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897062266
GPR[SPVAP]-1659897062266
GPR[EPVAP]-1659897064946
GPR[SPVATF]-1659897064946
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897067250
GPR[EPVS]-1659897067250
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.VAR){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897067252
GPR[SPVAP]-1659897067252
GPR[EPVAP]-1659897069935
GPR[SPVATF]-1659897069935
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897072272
GPR[EPVS]-1659897072272
========
if(!(n.getType()==Token.SCRIPT||n.getParent()!=null&&grandparent.getType()==Token.FUNCTION&&parent.getType()==Token.BLOCK)){
return ;
}
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897072274
GPR[SPVAP]-1659897072274
GPR[EPVAP]-1659897073539
GPR[EPVS]-1659897073539
========
if(childCount!=Token.VAR){
if(n.getType()!=Token.VAR){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897073540
GPR[SPVAP]-1659897073540
GPR[EPVAP]-1659897076164
GPR[SPVATF]-1659897076164
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897078513
GPR[EPVS]-1659897078513
========
if(SCRIPT!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897078514
GPR[SPVAP]-1659897078514
GPR[EPVAP]-1659897079765
GPR[EPVS]-1659897079765
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.SCRIPT&&n.getType()!=Token.BLOCK){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897079766
GPR[SPVAP]-1659897079766
GPR[EPVAP]-1659897082403
GPR[SPVATF]-1659897082403
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897084719
GPR[EPVS]-1659897084719
========
if(FUNCTION!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897084720
GPR[SPVAP]-1659897084720
GPR[EPVAP]-1659897085988
GPR[EPVS]-1659897085988
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.FUNCTION||n.getType()==Token.SCRIPT){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897085990
GPR[SPVAP]-1659897085990
GPR[EPVAP]-1659897088681
GPR[SPVATF]-1659897088681
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897090982
GPR[EPVS]-1659897090982
========
if(EMPTY!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897090983
GPR[SPVAP]-1659897090983
GPR[EPVAP]-1659897092235
GPR[EPVS]-1659897092235
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.EMPTY||n.getType()==Token.COMMA){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897092236
GPR[SPVAP]-1659897092236
GPR[EPVAP]-1659897094895
GPR[SPVATF]-1659897094895
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897097225
GPR[EPVS]-1659897097225
========
if(CALL!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897097226
GPR[SPVAP]-1659897097226
GPR[EPVAP]-1659897098491
GPR[EPVS]-1659897098491
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.CALL||n.getFirstChild().getType()!=Token.NAME){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897098493
GPR[SPVAP]-1659897098493
GPR[EPVAP]-1659897101172
GPR[SPVATF]-1659897101172
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897103513
GPR[EPVS]-1659897103513
========
if(childCount!=Token.EMPTY){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897103514
GPR[SPVAP]-1659897103514
GPR[EPVAP]-1659897106193
GPR[SPVATF]-1659897106193
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897108483
GPR[EPVS]-1659897108483
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.EMPTY){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897108485
GPR[SPVAP]-1659897108485
GPR[EPVAP]-1659897109737
GPR[EPVS]-1659897109737
========
if(childCount!=Token.RETURN){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897109739
GPR[SPVAP]-1659897109739
GPR[EPVAP]-1659897112380
GPR[SPVATF]-1659897112380
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897114721
GPR[EPVS]-1659897114721
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.RETURN){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897114723
GPR[SPVAP]-1659897114723
GPR[EPVAP]-1659897115972
GPR[EPVS]-1659897115972
========
if(childCount!=Token.STRING){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897115974
GPR[SPVAP]-1659897115975
GPR[EPVAP]-1659897118618
GPR[SPVATF]-1659897118618
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897120925
GPR[EPVS]-1659897120925
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.STRING){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897120926
GPR[SPVAP]-1659897120926
GPR[EPVAP]-1659897122169
GPR[EPVS]-1659897122169
========
if(childCount==Token.STRING){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897122171
GPR[SPVAP]-1659897122171
GPR[EPVAP]-1659897124807
GPR[SPVATF]-1659897124807
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897127121
GPR[EPVS]-1659897127121
========
if(childCount!=Token.FUNCTION){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897127122
GPR[SPVAP]-1659897127122
GPR[EPVAP]-1659897129834
GPR[SPVATF]-1659897129834
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897132157
GPR[EPVS]-1659897132157
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.FUNCTION){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897132159
GPR[SPVAP]-1659897132159
GPR[EPVAP]-1659897134823
GPR[SPVATF]-1659897134823
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897137147
GPR[EPVS]-1659897137147
========
if(childCount!=Token.FUNCTION){
if(n.getType()!=Token.FUNCTION){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897137148
GPR[SPVAP]-1659897137148
GPR[EPVAP]-1659897139804
GPR[SPVATF]-1659897139804
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897142135
GPR[EPVS]-1659897142135
========
if(childCount==Token.FUNCTION){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897142137
GPR[SPVAP]-1659897142137
GPR[EPVAP]-1659897144835
GPR[SPVATF]-1659897144835
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897147153
GPR[EPVS]-1659897147153
========
if(childCount!=Token.CALL){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897147155
GPR[SPVAP]-1659897147155
GPR[EPVAP]-1659897149842
GPR[SPVATF]-1659897149843
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897152150
GPR[EPVS]-1659897152150
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.CALL){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897152151
GPR[SPVAP]-1659897152151
GPR[EPVAP]-1659897154835
GPR[SPVATF]-1659897154835
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897157159
GPR[EPVS]-1659897157159
========
if(childCount!=Token.CALL){
if(n.getType()!=Token.CALL){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897157160
GPR[SPVAP]-1659897157160
GPR[EPVAP]-1659897159808
GPR[SPVATF]-1659897159808
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897162205
GPR[EPVS]-1659897162205
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.NAME){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897162207
GPR[SPVAP]-1659897162207
GPR[EPVAP]-1659897164871
GPR[SPVATF]-1659897164871
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897167216
GPR[EPVS]-1659897167216
========
if(childCount!=Token.NAME){
if(n.getType()!=Token.NAME){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897167218
GPR[SPVAP]-1659897167218
GPR[EPVAP]-1659897169913
GPR[SPVATF]-1659897169913
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897172232
GPR[EPVS]-1659897172232
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.RETURN){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897172234
GPR[SPVAP]-1659897172234
GPR[EPVAP]-1659897174879
GPR[SPVATF]-1659897174879
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897177215
GPR[EPVS]-1659897177215
========
if(childCount!=Token.RETURN){
if(n.getType()!=Token.RETURN){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897177217
GPR[SPVAP]-1659897177217
GPR[EPVAP]-1659897179907
GPR[SPVATF]-1659897179907
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897182257
GPR[EPVS]-1659897182257
========
if(childCount!=Token.NEW){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897182258
GPR[SPVAP]-1659897182258
GPR[EPVAP]-1659897184923
GPR[SPVATF]-1659897184923
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897187227
GPR[EPVS]-1659897187227
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.NEW){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897187228
GPR[SPVAP]-1659897187228
GPR[EPVAP]-1659897189880
GPR[SPVATF]-1659897189880
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897192178
GPR[EPVS]-1659897192178
========
if(childCount!=Token.NEW){
if(n.getType()!=Token.NEW){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897192179
GPR[SPVAP]-1659897192179
GPR[EPVAP]-1659897194821
GPR[SPVATF]-1659897194821
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897197172
GPR[EPVS]-1659897197172
========
if(GT!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897197174
GPR[SPVAP]-1659897197174
GPR[EPVAP]-1659897198436
GPR[EPVS]-1659897198436
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.GT&&n.getType()!=Token.LT){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897198438
GPR[SPVAP]-1659897198438
GPR[EPVAP]-1659897199689
GPR[EPVS]-1659897199689
========
if(OBJECTLIT!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897199690
GPR[SPVAP]-1659897199690
GPR[EPVAP]-1659897200967
GPR[EPVS]-1659897200967
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.OBJECTLIT||next.getType()!=Token.STRING){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897200969
GPR[SPVAP]-1659897200969
GPR[EPVAP]-1659897202201
GPR[EPVS]-1659897202201
========
if(childCount!=Token.EXPR_RESULT){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897202202
GPR[SPVAP]-1659897202202
GPR[EPVAP]-1659897204903
GPR[SPVATF]-1659897204903
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897207194
GPR[EPVS]-1659897207194
========
if(childCount==Token.EXPR_RESULT){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897207196
GPR[SPVAP]-1659897207196
GPR[EPVAP]-1659897209895
GPR[SPVATF]-1659897209895
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897212217
GPR[EPVS]-1659897212217
========
if(EXPR_RESULT!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897212218
GPR[SPVAP]-1659897212218
GPR[EPVAP]-1659897213500
GPR[EPVS]-1659897213500
========
if(RETURN!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897213502
GPR[SPVAP]-1659897213502
GPR[EPVAP]-1659897214788
GPR[EPVS]-1659897214788
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.isSyntheticBlock()||n.getParent()==null){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897214790
GPR[SPVAP]-1659897214790
GPR[EPVAP]-1659897216066
GPR[EPVS]-1659897216066
========
if(childCount!=null){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897216067
GPR[SPVAP]-1659897216067
GPR[EPVAP]-1659897217309
GPR[EPVS]-1659897217309
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.EMPTY||(n.getType()==Token.BLOCK&&!n.hasChildren())){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897217310
GPR[SPVAP]-1659897217310
GPR[EPVAP]-1659897219973
GPR[SPVATF]-1659897219973
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897222306
GPR[EPVS]-1659897222306
========
if(EMPTY!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.EMPTY||(n.getType()==Token.BLOCK&&!n.hasChildren())){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897222308
GPR[SPVAP]-1659897222308
GPR[EPVAP]-1659897223558
GPR[EPVS]-1659897223558
========
if(IF!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897223560
GPR[SPVAP]-1659897223560
GPR[EPVAP]-1659897224824
GPR[EPVS]-1659897224824
========
if(WHILE!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897224825
GPR[SPVAP]-1659897224825
GPR[EPVAP]-1659897226060
GPR[EPVS]-1659897226061
========
if(WITH!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897226062
GPR[SPVAP]-1659897226062
GPR[EPVAP]-1659897227322
GPR[EPVS]-1659897227322
========
if(SWITCH!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897227323
GPR[SPVAP]-1659897227323
GPR[EPVAP]-1659897228568
GPR[EPVS]-1659897228568
========
if(CASE!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897228570
GPR[SPVAP]-1659897228570
GPR[EPVAP]-1659897229816
GPR[EPVS]-1659897229816
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getJSType()!=null&&next.getType()==Token.ASSIGN){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897229818
GPR[SPVAP]-1659897229818
GPR[EPVAP]-1659897231062
GPR[EPVS]-1659897231062
========
if(BLOCK!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897231064
GPR[SPVAP]-1659897231064
GPR[EPVAP]-1659897232347
GPR[EPVS]-1659897232347
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.BLOCK||n.getLastChild()==null){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897232348
GPR[SPVAP]-1659897232348
GPR[EPVAP]-1659897235064
GPR[SPVATF]-1659897235064
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897237380
GPR[EPVS]-1659897237380
========
if(childCount!=Token.LABEL){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897237381
GPR[SPVAP]-1659897237381
GPR[EPVAP]-1659897240054
GPR[SPVATF]-1659897240054
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897242372
GPR[EPVS]-1659897242372
========
if(childCount==Token.LABEL){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897242373
GPR[SPVAP]-1659897242373
GPR[EPVAP]-1659897245034
GPR[SPVATF]-1659897245034
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897247372
GPR[EPVS]-1659897247372
========
if(childCount!=Token.OBJECTLIT){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897247374
GPR[SPVAP]-1659897247374
GPR[EPVAP]-1659897250085
GPR[SPVATF]-1659897250085
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897252445
GPR[EPVS]-1659897252445
========
if(childCount==Token.OBJECTLIT){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897252446
GPR[SPVAP]-1659897252446
GPR[EPVAP]-1659897255089
GPR[SPVATF]-1659897255089
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897257423
GPR[EPVS]-1659897257423
========
if(childCount!=Token.SCRIPT){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897257424
GPR[SPVAP]-1659897257424
GPR[EPVAP]-1659897260092
GPR[SPVATF]-1659897260092
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897262393
GPR[EPVS]-1659897262393
========
if(childCount==Token.SCRIPT){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897262394
GPR[SPVAP]-1659897262394
GPR[EPVAP]-1659897265110
GPR[SPVATF]-1659897265110
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897267448
GPR[EPVS]-1659897267448
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.THIS){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897267450
GPR[SPVAP]-1659897267450
GPR[EPVAP]-1659897268723
GPR[EPVS]-1659897268723
========
if(Token.STRING!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897268724
GPR[SPVAP]-1659897268724
GPR[EPVAP]-1659897271380
GPR[SPVATF]-1659897271380
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897273755
GPR[EPVS]-1659897273755
========
if(STRING!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897273757
GPR[SPVAP]-1659897273757
GPR[EPVAP]-1659897275006
GPR[EPVS]-1659897275006
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(Token.STRING!=n.getType()){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897275008
GPR[SPVAP]-1659897275008
GPR[EPVAP]-1659897276265
GPR[EPVS]-1659897276265
========
if(Token.NUMBER!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897276267
GPR[SPVAP]-1659897276267
GPR[EPVAP]-1659897278929
GPR[SPVATF]-1659897278929
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897281222
GPR[EPVS]-1659897281222
========
if(NUMBER!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897281223
GPR[SPVAP]-1659897281223
GPR[EPVAP]-1659897282475
GPR[EPVS]-1659897282475
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(Token.NUMBER!=n.getType()){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897282477
GPR[SPVAP]-1659897282477
GPR[EPVAP]-1659897283720
GPR[EPVS]-1659897283720
========
if(Token.NAME!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897283721
GPR[SPVAP]-1659897283721
GPR[EPVAP]-1659897286380
GPR[SPVATF]-1659897286380
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897288715
GPR[EPVS]-1659897288715
========
if(NAME!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897288717
GPR[SPVAP]-1659897288717
GPR[EPVAP]-1659897289983
GPR[EPVS]-1659897289983
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(Token.NAME!=n.getType()){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897289984
GPR[SPVAP]-1659897289984
GPR[EPVAP]-1659897291231
GPR[EPVS]-1659897291231
========
if(childCount!=Token.NUMBER){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897291232
GPR[SPVAP]-1659897291232
GPR[EPVAP]-1659897293882
GPR[SPVATF]-1659897293882
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897296181
GPR[EPVS]-1659897296181
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.NUMBER){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897296182
GPR[SPVAP]-1659897296182
GPR[EPVAP]-1659897297485
GPR[EPVS]-1659897297485
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new Error("Missing BLOCK child.");
}

========
MM Copying to MM
GPR[SPVS]-1659897297486
GPR[SPVAP]-1659897297486
GPR[EPVAP]-1659897300142
GPR[SPVATF]-1659897300143
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897302463
GPR[EPVS]-1659897302463
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getFirstChild().getType()!=Token.EMPTY){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897302465
GPR[SPVAP]-1659897302465
GPR[EPVAP]-1659897303729
GPR[EPVS]-1659897303729
========
if(childCount!=Token.EXPR_VOID){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897303730
GPR[SPVAP]-1659897303730
GPR[EPVAP]-1659897306399
GPR[SPVATF]-1659897306399
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897308707
GPR[EPVS]-1659897308707
========
if(childCount==Token.EXPR_VOID){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897308709
GPR[SPVAP]-1659897308709
GPR[EPVAP]-1659897312750
GPR[SPVATF]-1659897312750
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897315058
GPR[EPVS]-1659897315058
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(!((n.getType()==Token.CALL&&n.getFirstChild()==n)||n.getType()==Token.NEW)){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897315059
GPR[SPVAP]-1659897315059
GPR[EPVAP]-1659897316293
GPR[EPVS]-1659897316293
========
if(n.getFirstChild().getType()!=Token.GETPROP){
return ;
}
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897316294
GPR[SPVAP]-1659897316294
GPR[EPVAP]-1659897318996
GPR[SPVATF]-1659897318996
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897321309
GPR[EPVS]-1659897321309
========
if(n.getFirstChild().getType()!=Token.GETPROP){
return ;
}
if(childCount!=Token.CALL){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897321311
GPR[SPVAP]-1659897321311
GPR[EPVAP]-1659897323998
GPR[SPVATF]-1659897323998
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897326305
GPR[EPVS]-1659897326305
========
if(n.getFirstChild().getType()!=Token.GETPROP){
return ;
}
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.CALL){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897326307
GPR[SPVAP]-1659897326307
GPR[EPVAP]-1659897329025
GPR[SPVATF]-1659897329025
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897331410
GPR[EPVS]-1659897331410
========
if(n.getFirstChild().getType()!=Token.GETPROP){
return ;
}
if(childCount!=Token.CALL){
if(n.getType()!=Token.CALL){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897331412
GPR[SPVAP]-1659897331412
GPR[EPVAP]-1659897334113
GPR[SPVATF]-1659897334113
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897336427
GPR[EPVS]-1659897336427
========
if(childCount!=Token.TRY){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897336428
GPR[SPVAP]-1659897336428
GPR[EPVAP]-1659897339141
GPR[SPVATF]-1659897339141
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897341428
GPR[EPVS]-1659897341428
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(NodeUtil.isTryCatchNodeContainer(n)){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897341429
GPR[SPVAP]-1659897341429
GPR[EPVAP]-1659897344153
GPR[SPVATF]-1659897344153
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897346477
GPR[EPVS]-1659897346477
========
if(childCount==Token.TRY){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897346479
GPR[SPVAP]-1659897346479
GPR[EPVAP]-1659897349157
GPR[SPVATF]-1659897349157
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897351502
GPR[EPVS]-1659897351502
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(NodeUtil.isTryCatchNodeContainer(n)){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897351503
GPR[SPVAP]-1659897351503
GPR[EPVAP]-1659897354212
GPR[SPVATF]-1659897354212
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897356494
GPR[EPVS]-1659897356494
========
if(childCount!=Token.TRY){
if(NodeUtil.isTryCatchNodeContainer(n)){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897356496
GPR[SPVAP]-1659897356496
GPR[EPVAP]-1659897359164
GPR[SPVATF]-1659897359164
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897361473
GPR[EPVS]-1659897361473
========
if(childCount==Token.TRY){
if(NodeUtil.isTryCatchNodeContainer(n)){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897361474
GPR[SPVAP]-1659897361474
GPR[EPVAP]-1659897364146
GPR[SPVATF]-1659897364146
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897366492
GPR[EPVS]-1659897366492
========
if(ASSIGN!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897366494
GPR[SPVAP]-1659897366494
GPR[EPVAP]-1659897367765
GPR[EPVS]-1659897367765
========
if(GETPROP!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897367766
GPR[SPVAP]-1659897367766
GPR[EPVAP]-1659897369016
GPR[EPVS]-1659897369016
========
if(childCount!=Token.GETPROP){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897369018
GPR[SPVAP]-1659897369018
GPR[EPVAP]-1659897371666
GPR[SPVATF]-1659897371666
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897373982
GPR[EPVS]-1659897373982
========
if(childCount==Token.GETPROP){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897373984
GPR[SPVAP]-1659897373984
GPR[EPVAP]-1659897376665
GPR[SPVATF]-1659897376665
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897378997
GPR[EPVS]-1659897378997
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new Error("Unexpected Node subclass.");
}

========
MM Copying to MM
GPR[SPVS]-1659897378999
GPR[SPVAP]-1659897378999
GPR[EPVAP]-1659897381695
GPR[SPVATF]-1659897381695
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897384063
GPR[EPVS]-1659897384063
========
if(childCount==null){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897384065
GPR[SPVAP]-1659897384065
GPR[EPVAP]-1659897385328
GPR[EPVS]-1659897385328
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getChildCount()<3){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897385329
GPR[SPVAP]-1659897385329
GPR[EPVAP]-1659897386569
GPR[EPVS]-1659897386569
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getFirstChild()!=null){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897386579
GPR[SPVAP]-1659897386579
GPR[EPVAP]-1659897387842
GPR[EPVS]-1659897387842
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new RuntimeException("node is not a child");
}

========
MM Copying to MM
GPR[SPVS]-1659897387843
GPR[SPVAP]-1659897387843
GPR[EPVAP]-1659897390533
GPR[SPVATF]-1659897390533
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897392881
GPR[EPVS]-1659897392881
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new RuntimeException("node is not a child");
}

========
MM Copying to MM
GPR[SPVS]-1659897392883
GPR[SPVAP]-1659897392883
GPR[EPVAP]-1659897395541
GPR[SPVATF]-1659897395541
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897397840
GPR[EPVS]-1659897397840
========
if(childCount!=null){
throw new RuntimeException("node is not a child");
}

========
MM Copying to MM
GPR[SPVS]-1659897397842
GPR[SPVAP]-1659897397842
GPR[EPVAP]-1659897399122
GPR[EPVS]-1659897399122
========
if(childCount==null){
throw new RuntimeException("node is not a child");
}

========
MM Copying to MM
GPR[SPVS]-1659897399124
GPR[SPVAP]-1659897399124
GPR[EPVAP]-1659897400368
GPR[EPVS]-1659897400368
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.NAME&&n.getString().equals(name)){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897400370
GPR[SPVAP]-1659897400370
GPR[EPVAP]-1659897401633
GPR[EPVS]-1659897401633
========
if(ARRAYLIT!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897401634
GPR[SPVAP]-1659897401634
GPR[EPVAP]-1659897402920
GPR[EPVS]-1659897402920
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if((n.getType()!=Token.ARRAYLIT)||!next.getString().equals("join")){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897402922
GPR[SPVAP]-1659897402922
GPR[EPVAP]-1659897404172
GPR[EPVS]-1659897404172
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.VAR&&n.hasOneChild()&&n.getFirstChild().getFirstChild()!=null){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897404174
GPR[SPVAP]-1659897404174
GPR[EPVAP]-1659897405436
GPR[EPVS]-1659897405436
========
if(childCount==Token.VAR){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897405438
GPR[SPVAP]-1659897405438
GPR[EPVAP]-1659897408097
GPR[SPVATF]-1659897408097
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897410377
GPR[EPVS]-1659897410377
========
if(childCount==Token.RETURN){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897410379
GPR[SPVAP]-1659897410379
GPR[EPVAP]-1659897413061
GPR[SPVATF]-1659897413061
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897415415
GPR[EPVS]-1659897415415
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getParent()!=null&&gramps.getType()==Token.VAR){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897415417
GPR[SPVAP]-1659897415417
GPR[EPVAP]-1659897416675
GPR[EPVS]-1659897416675
========
if(childCount==Token.EMPTY){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897416676
GPR[SPVAP]-1659897416676
GPR[EPVAP]-1659897419359
GPR[SPVATF]-1659897419359
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897421677
GPR[EPVS]-1659897421677
========
if(childCount!=Token.NE){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897421679
GPR[SPVAP]-1659897421679
GPR[EPVAP]-1659897424311
GPR[SPVATF]-1659897424311
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897426603
GPR[EPVS]-1659897426603
========
if(childCount==Token.NE){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897426604
GPR[SPVAP]-1659897426604
GPR[EPVAP]-1659897429272
GPR[SPVATF]-1659897429272
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897431605
GPR[EPVS]-1659897431605
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getLastChild().getType()!=Token.BLOCK){
return isOneExactlyFunctionOrDo(labeledStatement);
}else {
if(getNonEmptyChildCount(n,2)==1){
return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));
}else {
return false;
}
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897431607
GPR[SPVAP]-1659897431607
GPR[EPVAP]-1659897432847
GPR[EPVS]-1659897432847
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(getNonEmptyChildCount(n,2)==1){
return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));
}else {
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897432848
GPR[SPVAP]-1659897432848
GPR[EPVAP]-1659897434105
GPR[EPVS]-1659897434105
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.LABEL){
Node n.getLastChild()=n.getLastChild();
if(labeledStatement.getType()!=Token.BLOCK){
return isOneExactlyFunctionOrDo(labeledStatement);
}else {
if(getNonEmptyChildCount(n,2)==1){
return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));
}else {
return false;
}
}
}else {
return (n.getType()==Token.FUNCTION||n.getType()==Token.DO);
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897434106
GPR[SPVAP]-1659897434106
GPR[EPVAP]-1659897435204
GPR[EPVS]-1659897435204
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.NAME){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897435206
GPR[SPVAP]-1659897435206
GPR[EPVAP]-1659897436439
GPR[EPVS]-1659897436439
========
if(!isAliasName(n.getString())){
return false;
}
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897436440
GPR[SPVAP]-1659897436440
GPR[EPVAP]-1659897437686
GPR[EPVS]-1659897437686
========
if(childCount!=Token.FOR){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897437688
GPR[SPVAP]-1659897437688
GPR[EPVAP]-1659897440378
GPR[SPVATF]-1659897440378
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897442712
GPR[EPVS]-1659897442712
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected LABEL");
}

========
MM Copying to MM
GPR[SPVS]-1659897442714
GPR[SPVAP]-1659897442714
GPR[EPVAP]-1659897445385
GPR[SPVATF]-1659897445385
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897447696
GPR[EPVS]-1659897447696
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
Preconditions.checkState(n.getType()==Token.LABEL);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897447698
GPR[SPVAP]-1659897447698
GPR[EPVAP]-1659897450414
GPR[SPVATF]-1659897450414
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897452719
GPR[EPVS]-1659897452719
========
if(childCount==Token.FOR){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897452721
GPR[SPVAP]-1659897452721
GPR[EPVAP]-1659897455372
GPR[SPVATF]-1659897455372
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897457729
GPR[EPVS]-1659897457729
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected LABEL");
}

========
MM Copying to MM
GPR[SPVS]-1659897457730
GPR[SPVAP]-1659897457730
GPR[EPVAP]-1659897460396
GPR[SPVATF]-1659897460396
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897462748
GPR[EPVS]-1659897462748
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
Preconditions.checkState(n.getType()==Token.LABEL);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897462751
GPR[SPVAP]-1659897462751
GPR[EPVAP]-1659897465473
GPR[SPVATF]-1659897465473
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897467769
GPR[EPVS]-1659897467769
========
if(childCount!=Token.FOR){
throw new IllegalStateException("Unexpected LABEL");
}

========
MM Copying to MM
GPR[SPVS]-1659897467770
GPR[SPVAP]-1659897467770
GPR[EPVAP]-1659897470425
GPR[SPVATF]-1659897470425
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897472711
GPR[EPVS]-1659897472711
========
if(childCount!=Token.FOR){
Preconditions.checkState(n.getType()==Token.LABEL);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897472712
GPR[SPVAP]-1659897472712
GPR[EPVAP]-1659897475420
GPR[SPVATF]-1659897475420
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897477748
GPR[EPVS]-1659897477748
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
Preconditions.checkState(n.getType()==Token.LABEL);
throw new IllegalStateException("Unexpected LABEL");
}

========
MM Copying to MM
GPR[SPVS]-1659897477750
GPR[SPVAP]-1659897477750
GPR[EPVAP]-1659897480415
GPR[SPVATF]-1659897480415
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897482745
GPR[EPVS]-1659897482745
========
if(childCount==Token.FOR){
throw new IllegalStateException("Unexpected LABEL");
}

========
MM Copying to MM
GPR[SPVS]-1659897482747
GPR[SPVAP]-1659897482747
GPR[EPVAP]-1659897485429
GPR[SPVATF]-1659897485429
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897487781
GPR[EPVS]-1659897487781
========
if(childCount==Token.FOR){
Preconditions.checkState(n.getType()==Token.LABEL);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897487783
GPR[SPVAP]-1659897487783
GPR[EPVAP]-1659897490475
GPR[SPVATF]-1659897490475
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897492778
GPR[EPVS]-1659897492778
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
Preconditions.checkState(n.getType()==Token.LABEL);
throw new IllegalStateException("Unexpected LABEL");
}

========
MM Copying to MM
GPR[SPVS]-1659897492780
GPR[SPVAP]-1659897492780
GPR[EPVAP]-1659897495465
GPR[SPVATF]-1659897495465
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897497793
GPR[EPVS]-1659897497793
========
if(childCount!=Token.FOR){
Preconditions.checkState(n.getType()==Token.LABEL);
throw new IllegalStateException("Unexpected LABEL");
}

========
MM Copying to MM
GPR[SPVS]-1659897497795
GPR[SPVAP]-1659897497795
GPR[EPVAP]-1659897500430
GPR[SPVATF]-1659897500430
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897502720
GPR[EPVS]-1659897502720
========
if(childCount==Token.FOR){
Preconditions.checkState(n.getType()==Token.LABEL);
throw new IllegalStateException("Unexpected LABEL");
}

========
MM Copying to MM
GPR[SPVS]-1659897502722
GPR[SPVAP]-1659897502722
GPR[EPVAP]-1659897505394
GPR[SPVATF]-1659897505394
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897507725
GPR[EPVS]-1659897507725
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
validateObjectLit(n);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897507727
GPR[SPVAP]-1659897507727
GPR[EPVAP]-1659897508997
GPR[EPVS]-1659897508997
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getChildCount()==1&&n.getFirstChild().getType()==Token.NAME&&n.getFirstChild().getString().equals("Infinity")){
return Double.NEGATIVE_INFINITY;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897508999
GPR[SPVAP]-1659897508999
GPR[EPVAP]-1659897510232
GPR[EPVS]-1659897510232
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.VAR&&!NodeUtil.isFunctionDeclaration(n)&&!(parent.getType()==Token.ASSIGN&&n==parent.getFirstChild())){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897510234
GPR[SPVAP]-1659897510234
GPR[EPVAP]-1659897511494
GPR[EPVS]-1659897511494
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(NodeUtil.isFunctionDeclaration(n)||next.getType()==Token.NAME){
return normalizeClassType(n.getJSType());
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897511496
GPR[SPVAP]-1659897511496
GPR[EPVAP]-1659897512737
GPR[EPVS]-1659897512737
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.EXPR_RESULT&&n.getParent().getType()!=Token.LABEL){
n.detachChildren();
parent.replaceChild(n,next);
Node new Node(Token.EXPR_RESULT,next)=new Node(Token.EXPR_RESULT,next);
newStatement.copyInformationFrom(n);
parent.getParent().addChildAfter(newStatement,parent);
reportCodeChange();
return left;
}else {
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897512739
GPR[SPVAP]-1659897512739
GPR[EPVAP]-1659897513832
GPR[EPVS]-1659897513832
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.detachChildren();
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897513833
GPR[SPVAP]-1659897513833
GPR[EPVAP]-1659897516502
GPR[SPVATF]-1659897516502
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897518837
GPR[EPVS]-1659897518837
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.replaceChild(n,next);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897518839
GPR[SPVAP]-1659897518839
GPR[EPVAP]-1659897520086
GPR[EPVS]-1659897520086
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
new Node(Token.EXPR_RESULT,next).copyInformationFrom(n);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897520087
GPR[SPVAP]-1659897520087
GPR[EPVAP]-1659897521384
GPR[EPVS]-1659897521384
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.getParent().addChildAfter(new Node(Token.EXPR_RESULT,next),parent);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897521385
GPR[SPVAP]-1659897521385
GPR[EPVAP]-1659897522629
GPR[EPVS]-1659897522629
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
reportCodeChange();
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897522630
GPR[SPVAP]-1659897522630
GPR[EPVAP]-1659897523902
GPR[EPVS]-1659897523902
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.detachChildren();
n.replaceChild(n,next);
new Node(Token.EXPR_RESULT,next).copyInformationFrom(n);
n.getParent().addChildAfter(new Node(Token.EXPR_RESULT,next),parent);
reportCodeChange();

throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897523903
GPR[SPVAP]-1659897523903
GPR[EPVAP]-1659897525173
GPR[EPVS]-1659897525173
========
if(EXPR_RESULT!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.detachChildren();
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897525174
GPR[SPVAP]-1659897525174
GPR[EPVAP]-1659897526429
GPR[EPVS]-1659897526429
========
if(childCount!=Token.ASSIGN){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897526430
GPR[SPVAP]-1659897526430
GPR[EPVAP]-1659897529075
GPR[SPVATF]-1659897529075
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897531372
GPR[EPVS]-1659897531372
========
if(childCount==Token.ASSIGN){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897531374
GPR[SPVAP]-1659897531374
GPR[EPVAP]-1659897534066
GPR[SPVATF]-1659897534066
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897536385
GPR[EPVS]-1659897536385
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(next==null&&(n.getType()==Token.THROW||next!=null)){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897536387
GPR[SPVAP]-1659897536387
GPR[EPVAP]-1659897537663
GPR[EPVS]-1659897537663
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(next==null||!isCallToScopeMethod(parent)){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897537665
GPR[SPVAP]-1659897537665
GPR[EPVAP]-1659897538903
GPR[EPVS]-1659897538903
========
if(INC!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897538905
GPR[SPVAP]-1659897538905
GPR[EPVAP]-1659897540160
GPR[EPVS]-1659897540160
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if((NodeUtil.isAssignmentOp(n)&&parent.getFirstChild()==n)||n.getType()==Token.INC||parent.getType()==Token.DEC){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897540162
GPR[SPVAP]-1659897540162
GPR[EPVAP]-1659897541416
GPR[EPVS]-1659897541416
========
if(name.length()==0){
return ;
}
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897541418
GPR[SPVAP]-1659897541418
GPR[EPVAP]-1659897542658
GPR[EPVS]-1659897542658
========
if(LP!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897542660
GPR[SPVAP]-1659897542660
GPR[EPVAP]-1659897543905
GPR[EPVS]-1659897543905
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
handleFunctionInputs(next);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897543906
GPR[SPVAP]-1659897543906
GPR[EPVAP]-1659897545192
GPR[EPVS]-1659897545192
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.GETPROP&&n==next.getFirstChild()&&NodeUtil.isAssignmentOp(parent)){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897545193
GPR[SPVAP]-1659897545193
GPR[EPVAP]-1659897546454
GPR[EPVS]-1659897546454
========
if(DO!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897546455
GPR[SPVAP]-1659897546455
GPR[EPVAP]-1659897547715
GPR[EPVS]-1659897547715
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n!=null&&n.getType()==Token.GETPROP){
Node n.getLastChild()=n.getLastChild();
return propNode!=null&&propNode.getType()==Token.STRING&&isStripName(propNode.getString());
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897547717
GPR[SPVAP]-1659897547717
GPR[EPVAP]-1659897548811
GPR[EPVS]-1659897548811
========
if(!ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals(n.getFirstChild().getQualifiedName())){
return ;
}
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897548813
GPR[SPVAP]-1659897548813
GPR[EPVAP]-1659897551510
GPR[SPVATF]-1659897551510
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897553838
GPR[EPVS]-1659897553838
========
if(!ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals(n.getFirstChild().getQualifiedName())){
return ;
}
if(childCount!=Token.NEW){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897553839
GPR[SPVAP]-1659897553839
GPR[EPVAP]-1659897556478
GPR[SPVATF]-1659897556478
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897558849
GPR[EPVS]-1659897558849
========
if(!ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals(n.getFirstChild().getQualifiedName())){
return ;
}
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.NEW){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897558850
GPR[SPVAP]-1659897558850
GPR[EPVAP]-1659897561497
GPR[SPVATF]-1659897561497
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897563792
GPR[EPVS]-1659897563792
========
if(!ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals(n.getFirstChild().getQualifiedName())){
return ;
}
if(childCount!=Token.NEW){
if(n.getType()!=Token.NEW){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897563793
GPR[SPVAP]-1659897563793
GPR[EPVAP]-1659897566485
GPR[SPVATF]-1659897566485
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897568767
GPR[EPVS]-1659897568767
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.NUMBER){
childCount=(int)n.getDouble();
}else {
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897568769
GPR[SPVAP]-1659897568769
GPR[EPVAP]-1659897570019
GPR[EPVS]-1659897570019
========
if(childCount==Token.NUMBER){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897570022
GPR[SPVAP]-1659897570022
GPR[EPVAP]-1659897572683
GPR[SPVATF]-1659897572683
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897574977
GPR[EPVS]-1659897574977
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.NUMBER){
childCount=(int)n.getDouble();
}else {
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897574980
GPR[SPVAP]-1659897574980
GPR[EPVAP]-1659897576222
GPR[EPVS]-1659897576222
========
if(childCount!=Token.NUMBER){
if(n.getType()==Token.NUMBER){
childCount=(int)n.getDouble();
}else {
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897576223
GPR[SPVAP]-1659897576223
GPR[EPVAP]-1659897577489
GPR[EPVS]-1659897577489
========
if(childCount==Token.NUMBER){
if(n.getType()==Token.NUMBER){
childCount=(int)n.getDouble();
}else {
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897577491
GPR[SPVAP]-1659897577491
GPR[EPVAP]-1659897578745
GPR[EPVS]-1659897578745
========
if(type!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897578746
GPR[SPVAP]-1659897578746
GPR[EPVAP]-1659897581397
GPR[SPVATF]-1659897581397
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897583693
GPR[EPVS]-1659897583693
========
if(type==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897583695
GPR[SPVAP]-1659897583695
GPR[EPVAP]-1659897586354
GPR[SPVATF]-1659897586354
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897588673
GPR[EPVS]-1659897588673
========
if(type!=Token.NAME){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897588674
GPR[SPVAP]-1659897588674
GPR[EPVAP]-1659897591363
GPR[SPVATF]-1659897591363
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897593674
GPR[EPVS]-1659897593674
========
if(type==Token.NAME){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897593675
GPR[SPVAP]-1659897593675
GPR[EPVAP]-1659897596380
GPR[SPVATF]-1659897596380
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897598705
GPR[EPVS]-1659897598705
========
if(pseudoNameMap!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897598707
GPR[SPVAP]-1659897598707
GPR[EPVAP]-1659897599965
GPR[EPVS]-1659897599965
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getJSType()!=null){
return n.getJSType();
}else {
return getTypeRegistry().getNativeType(UNKNOWN_TYPE);
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897599966
GPR[SPVAP]-1659897599966
GPR[EPVAP]-1659897601212
GPR[EPVS]-1659897601212
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(type!=null){
return getTypeDeprecationInfo(type)!=null;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897601213
GPR[SPVAP]-1659897601213
GPR[EPVAP]-1659897602458
GPR[EPVS]-1659897602458
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getNext()!=null){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897602459
GPR[SPVAP]-1659897602459
GPR[EPVAP]-1659897603725
GPR[EPVS]-1659897603725
========
if(null!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897603726
GPR[SPVAP]-1659897603726
GPR[EPVAP]-1659897604985
GPR[EPVS]-1659897604986
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n!=null&&arg1.getType()==Token.NUMBER){
childCount=(int)arg1.getDouble();
}else {
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897604987
GPR[SPVAP]-1659897604987
GPR[EPVAP]-1659897606237
GPR[EPVS]-1659897606237
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if((n.getNext()!=null)||(secondArg.getType()!=Token.NUMBER)){
return n;
}else {
childCount=(int)secondArg.getDouble();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897606238
GPR[SPVAP]-1659897606238
GPR[EPVAP]-1659897607476
GPR[EPVS]-1659897607476
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.VAR){
return n.getFirstChild();
}else if(NodeUtil.isExprAssign(n)){
return n.getFirstChild().getFirstChild();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897607478
GPR[SPVAP]-1659897607478
GPR[EPVAP]-1659897608735
GPR[EPVS]-1659897608735
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.VAR){
return n.getFirstChild().getFirstChild();
}else if(NodeUtil.isExprAssign(n)){
return n.getFirstChild().getLastChild();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897608736
GPR[SPVAP]-1659897608736
GPR[EPVAP]-1659897609977
GPR[EPVS]-1659897609977
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getParent()!=null&&grandParent.getType()==Token.VAR){
String name=n.getString();
return isIdName(name);
}else {
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897609979
GPR[SPVAP]-1659897609979
GPR[EPVAP]-1659897611228
GPR[EPVS]-1659897611228
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.NAME){
Node n.getParent()=n.getParent();
if(grandParent!=null&&grandParent.getType()==Token.VAR){
String name=parent.getString();
return isIdName(name);
}else {
return false;
}
}else {
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897611230
GPR[SPVAP]-1659897611230
GPR[EPVAP]-1659897612337
GPR[EPVS]-1659897612337
========
if(GETELEM!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897612339
GPR[SPVAP]-1659897612339
GPR[EPVAP]-1659897613598
GPR[EPVS]-1659897613598
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(next.getType()==Token.GETELEM&&(n.getType()!=Token.STRING&&property.getType()!=Token.NUMBER)){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897613600
GPR[SPVAP]-1659897613600
GPR[EPVAP]-1659897614853
GPR[EPVS]-1659897614853
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(next==null){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897614854
GPR[SPVAP]-1659897614854
GPR[EPVAP]-1659897616106
GPR[EPVS]-1659897616106
========
Preconditions.checkState(n.getType()==Token.FUNCTION);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897616108
GPR[SPVAP]-1659897616108
GPR[EPVAP]-1659897618748
GPR[SPVATF]-1659897618748
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897621057
GPR[EPVS]-1659897621057
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.FUNCTION||n.getType()==Token.VAR||n.getType()==Token.NEW){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897621059
GPR[SPVAP]-1659897621059
GPR[EPVAP]-1659897623716
GPR[SPVATF]-1659897623716
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897626069
GPR[EPVS]-1659897626069
========
if(FUNCTION!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.FUNCTION||n.getType()==Token.VAR||n.getType()==Token.NEW){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897626071
GPR[SPVAP]-1659897626071
GPR[EPVAP]-1659897627324
GPR[EPVS]-1659897627324
========
if(VAR!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.FUNCTION||n.getType()==Token.VAR||n.getType()==Token.NEW){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897627325
GPR[SPVAP]-1659897627325
GPR[EPVAP]-1659897628580
GPR[EPVS]-1659897628580
========
if(CATCH!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897628581
GPR[SPVAP]-1659897628581
GPR[EPVAP]-1659897629825
GPR[EPVS]-1659897629825
========
if(TRY!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897629827
GPR[SPVAP]-1659897629827
GPR[EPVAP]-1659897631096
GPR[EPVS]-1659897631096
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(NodeUtil.hasCatchHandler(n.getNext())){
return s.getFirstChild();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897631097
GPR[SPVAP]-1659897631097
GPR[EPVAP]-1659897632360
GPR[EPVS]-1659897632360
========
Preconditions.checkState(n.getType()==Token.NEW);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897632362
GPR[SPVAP]-1659897632362
GPR[EPVAP]-1659897635027
GPR[SPVATF]-1659897635027
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897637326
GPR[EPVS]-1659897637326
========
Preconditions.checkState(n.getType()==Token.NEW);
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897637328
GPR[SPVAP]-1659897637328
GPR[EPVAP]-1659897640007
GPR[SPVATF]-1659897640007
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897642328
GPR[EPVS]-1659897642328
========
Preconditions.checkState(n.getType()==Token.NEW);
if(childCount!=Token.NAME){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897642329
GPR[SPVAP]-1659897642329
GPR[EPVAP]-1659897645022
GPR[SPVATF]-1659897645022
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897647320
GPR[EPVS]-1659897647320
========
Preconditions.checkState(n.getType()==Token.NEW);
if(childCount==Token.NAME){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897647322
GPR[SPVAP]-1659897647322
GPR[EPVAP]-1659897650003
GPR[SPVATF]-1659897650003
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897652318
GPR[EPVS]-1659897652318
========
if(childCount!=Token.IF){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897652320
GPR[SPVAP]-1659897652320
GPR[EPVAP]-1659897655017
GPR[SPVATF]-1659897655017
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897657322
GPR[EPVS]-1659897657322
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.IF){
return NodeUtil.getConditionExpression(n);
}else {
Preconditions.checkState(isExprConditional(n));
return n.getFirstChild().getFirstChild();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897657323
GPR[SPVAP]-1659897657323
GPR[EPVAP]-1659897658582
GPR[EPVS]-1659897658582
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
Preconditions.checkState(isExprConditional(n));
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897658584
GPR[SPVAP]-1659897658584
GPR[EPVAP]-1659897659844
GPR[EPVS]-1659897659844
========
if(childCount==Token.IF){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897659845
GPR[SPVAP]-1659897659845
GPR[EPVAP]-1659897662517
GPR[SPVATF]-1659897662517
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897664848
GPR[EPVS]-1659897664848
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getDouble()==0||numValue==1){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897664850
GPR[SPVAP]-1659897664850
GPR[EPVAP]-1659897666101
GPR[EPVS]-1659897666101
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n==next.getFirstChild()&&next.getChildCount()==2&&n.getNext().getType()==Token.NAME&&"eval".equals(n.getNext().getString())){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897666102
GPR[SPVAP]-1659897666102
GPR[EPVAP]-1659897667363
GPR[EPVS]-1659897667363
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n==null||NodeUtil.isLiteralValue(n,true)||n.getType()==Token.FUNCTION){
return true;
}else if(n.getType()==Token.CALL){
Node n=n.getFirstChild();
return functionName.getType()==Token.NAME&&(functionName.getString().equals(CrossModuleMethodMotion.STUB_METHOD_NAME)||functionName.getString().equals(CrossModuleMethodMotion.UNSTUB_METHOD_NAME));
}else if(n.getType()==Token.ARRAYLIT||n.getType()==Token.OBJECTLIT){
boolean n.getType()==Token.OBJECTLIT=n.getType()==Token.OBJECTLIT;
for(Node n.getFirstChild()=n.getFirstChild();child!=null;child=child.getNext()){
if(!canMoveValue(isObjectLit?child.getFirstChild():child)){
return false;
}
}
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897667364
GPR[SPVAP]-1659897667364
GPR[EPVAP]-1659897668454
GPR[EPVS]-1659897668454
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(next==null||areMatchingExits(n,follow)){
Node new Node(Token.BREAK)=new Node(Token.BREAK);
n.getParent().replaceChild(n,replacement);
this.reportCodeChange();
return replacement;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897668456
GPR[SPVAP]-1659897668456
GPR[EPVAP]-1659897669558
GPR[EPVS]-1659897669558
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.getParent().replaceChild(n,new Node(Token.BREAK));
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897669559
GPR[SPVAP]-1659897669560
GPR[EPVAP]-1659897672242
GPR[SPVATF]-1659897672242
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897674597
GPR[EPVS]-1659897674597
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
this.reportCodeChange();
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897674598
GPR[SPVAP]-1659897674598
GPR[EPVAP]-1659897675860
GPR[EPVS]-1659897675860
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.getParent().replaceChild(n,new Node(Token.BREAK));
this.reportCodeChange();

throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897675861
GPR[SPVAP]-1659897675861
GPR[EPVAP]-1659897677103
GPR[EPVS]-1659897677103
========
if(minPrecedence!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897677105
GPR[SPVAP]-1659897677105
GPR[EPVAP]-1659897678378
GPR[EPVS]-1659897678378
========
if(DEC!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897678379
GPR[SPVAP]-1659897678379
GPR[EPVAP]-1659897679634
GPR[EPVS]-1659897679634
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(!n.hasChildren()||right.getFirstChild().getNext()!=right.getLastChild()){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897679635
GPR[SPVAP]-1659897679635
GPR[EPVAP]-1659897680876
GPR[EPVS]-1659897680876
========
Preconditions.checkArgument(n.getType()==Token.ASSIGN);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897680878
GPR[SPVAP]-1659897680878
GPR[EPVAP]-1659897683527
GPR[SPVATF]-1659897683527
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897685825
GPR[EPVS]-1659897685825
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(getArrayElementStringValue(n)==null){
return null;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897685827
GPR[SPVAP]-1659897685828
GPR[EPVAP]-1659897687087
GPR[EPVS]-1659897687087
========
if(defaults!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897687088
GPR[SPVAP]-1659897687088
GPR[EPVAP]-1659897688342
GPR[EPVS]-1659897688343
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.isQualifiedName()&&n.getJSDocInfo()!=null){
return ;
}else if(NodeUtil.isExpressionNode(n)){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897688344
GPR[SPVAP]-1659897688344
GPR[EPVAP]-1659897690998
GPR[SPVATF]-1659897690998
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897693340
GPR[EPVS]-1659897693340
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n!=null){
return n.children();
}else {
return Collections.emptySet();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897693342
GPR[SPVAP]-1659897693342
GPR[EPVAP]-1659897694602
GPR[EPVS]-1659897694602
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getFirstChild().getFirstChild().isQualifiedName()){
return maybeOwner;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897694603
GPR[SPVAP]-1659897694603
GPR[EPVAP]-1659897695863
GPR[EPVS]-1659897695863
========
Preconditions.checkState(childCount==1);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897695864
GPR[SPVAP]-1659897695864
GPR[EPVAP]-1659897698515
GPR[SPVATF]-1659897698515
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897700838
GPR[EPVS]-1659897700838
========
Preconditions.checkState(childCount==1);
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897700839
GPR[SPVAP]-1659897700840
GPR[EPVAP]-1659897703484
GPR[SPVATF]-1659897703484
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897705803
GPR[EPVS]-1659897705803
========
Preconditions.checkState(childCount==1);
if(childCount!=Token.NUMBER){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897705804
GPR[SPVAP]-1659897705804
GPR[EPVAP]-1659897708503
GPR[SPVATF]-1659897708503
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897710840
GPR[EPVS]-1659897710840
========
Preconditions.checkState(childCount==1);
if(childCount==Token.NUMBER){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897710842
GPR[SPVAP]-1659897710842
GPR[EPVAP]-1659897713532
GPR[SPVATF]-1659897713532
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897715851
GPR[EPVS]-1659897715851
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(next==null||areMatchingExits(n,follow)){
n.detachFromParent();
reportCodeChange();
return null;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897715852
GPR[SPVAP]-1659897715852
GPR[EPVAP]-1659897717120
GPR[EPVS]-1659897717120
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.detachFromParent();
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897717122
GPR[SPVAP]-1659897717122
GPR[EPVAP]-1659897719761
GPR[SPVATF]-1659897719761
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897722081
GPR[EPVS]-1659897722081
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.detachFromParent();
reportCodeChange();

throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897722083
GPR[SPVAP]-1659897722083
GPR[EPVAP]-1659897723336
GPR[EPVS]-1659897723336
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.detachFromParent();
reportCodeChange();
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897723338
GPR[SPVAP]-1659897723338
GPR[EPVAP]-1659897724591
GPR[EPVS]-1659897724591
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(next!=null&&NodeUtil.isObjectLitKey(n,parent)){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897724593
GPR[SPVAP]-1659897724593
GPR[EPVAP]-1659897725857
GPR[EPVS]-1659897725857
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected const change.\n"+"  name: "+name);
}

========
MM Copying to MM
GPR[SPVS]-1659897725859
GPR[SPVAP]-1659897725859
GPR[EPVAP]-1659897727122
GPR[EPVS]-1659897727122
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.putBooleanProp(Node.IS_CONSTANT_NAME,true);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897727124
GPR[SPVAP]-1659897727124
GPR[EPVAP]-1659897729777
GPR[SPVATF]-1659897729777
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897732119
GPR[EPVS]-1659897732119
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(next.getType()==Token.FOR&&!NodeUtil.isForIn(parent)&&NodeUtil.getConditionExpression(parent)!=n){
parent.replaceChild(n,new Node(Token.EMPTY));
}else {
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897732120
GPR[SPVAP]-1659897732120
GPR[EPVAP]-1659897733389
GPR[EPVS]-1659897733389
========
case Token.ARRAYLIT :

if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897733390
GPR[SPVAP]-1659897733390
GPR[EPVAP]-1659897734639
GPR[EPVS]-1659897734639
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Expected NEW node, got "+Token.name(n.getType()));
}

========
MM Copying to MM
GPR[SPVS]-1659897734641
GPR[SPVAP]-1659897734641
GPR[EPVAP]-1659897737284
GPR[SPVATF]-1659897737284
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897739585
GPR[EPVS]-1659897739585
========
if(childCount!=Token.NEW){
throw new IllegalStateException("Expected NEW node, got "+Token.name(n.getType()));
}

========
MM Copying to MM
GPR[SPVS]-1659897739587
GPR[SPVAP]-1659897739587
GPR[EPVAP]-1659897742244
GPR[SPVATF]-1659897742244
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897744557
GPR[EPVS]-1659897744557
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Expected CALL node, got "+Token.name(n.getType()));
}

========
MM Copying to MM
GPR[SPVS]-1659897744559
GPR[SPVAP]-1659897744559
GPR[EPVAP]-1659897747210
GPR[SPVATF]-1659897747210
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897749544
GPR[EPVS]-1659897749544
========
if(childCount!=Token.CALL){
throw new IllegalStateException("Expected CALL node, got "+Token.name(n.getType()));
}

========
MM Copying to MM
GPR[SPVS]-1659897749545
GPR[SPVAP]-1659897749545
GPR[EPVAP]-1659897752233
GPR[SPVATF]-1659897752233
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897754536
GPR[EPVS]-1659897754536
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Expected STRING, got "+Token.name(n.getType()));
}

========
MM Copying to MM
GPR[SPVS]-1659897754538
GPR[SPVAP]-1659897754538
GPR[EPVAP]-1659897757249
GPR[SPVATF]-1659897757249
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897759573
GPR[EPVS]-1659897759573
========
if(childCount!=Token.STRING){
throw new IllegalStateException("Expected STRING, got "+Token.name(n.getType()));
}

========
MM Copying to MM
GPR[SPVS]-1659897759574
GPR[SPVAP]-1659897759574
GPR[EPVAP]-1659897762231
GPR[SPVATF]-1659897762231
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897764598
GPR[EPVS]-1659897764598
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.GETELEM&&n.getType()!=Token.GETPROP){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897764600
GPR[SPVAP]-1659897764600
GPR[EPVAP]-1659897765895
GPR[EPVS]-1659897765895
========
if(GET!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897765897
GPR[SPVAP]-1659897765897
GPR[EPVAP]-1659897767156
GPR[EPVS]-1659897767156
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(next.getType()==Token.CATCH&&n.getType()==Token.CATCH){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897767157
GPR[SPVAP]-1659897767157
GPR[EPVAP]-1659897768410
GPR[EPVS]-1659897768410
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(isAssign(next)&&parent.getFirstChild()==n){
return n.getNext();
}else {
return null;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897768412
GPR[SPVAP]-1659897768412
GPR[EPVAP]-1659897769652
GPR[EPVS]-1659897769652
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if((next.getType()!=Token.STRING)||((n.getType()!=Token.STRING))){
return next;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897769654
GPR[SPVAP]-1659897769654
GPR[EPVAP]-1659897770895
GPR[EPVS]-1659897770895
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.FUNCTION||n.getType()==Token.EXPR_RESULT){
return current;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897770897
GPR[SPVAP]-1659897770897
GPR[EPVAP]-1659897772146
GPR[EPVS]-1659897772146
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.SCRIPT&&n.getType()!=Token.BLOCK){
return subtree;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897772148
GPR[SPVAP]-1659897772148
GPR[EPVAP]-1659897773392
GPR[EPVS]-1659897773392
========
if(childCount==Token.GET){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897773393
GPR[SPVAP]-1659897773393
GPR[EPVAP]-1659897776043
GPR[SPVATF]-1659897776043
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897778346
GPR[EPVS]-1659897778346
========
if(childCount!=Token.GET){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897778347
GPR[SPVAP]-1659897778347
GPR[EPVAP]-1659897781039
GPR[SPVATF]-1659897781039
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897783341
GPR[EPVS]-1659897783341
========
if(type!=Token.GET){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897783342
GPR[SPVAP]-1659897783342
GPR[EPVAP]-1659897786027
GPR[SPVATF]-1659897786027
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897788313
GPR[EPVS]-1659897788313
========
if(type==Token.GET){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897788315
GPR[SPVAP]-1659897788315
GPR[EPVAP]-1659897790981
GPR[SPVATF]-1659897790981
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897793295
GPR[EPVS]-1659897793295
========
case Token.GETPROP :

if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897793296
GPR[SPVAP]-1659897793296
GPR[EPVAP]-1659897794558
GPR[EPVS]-1659897794558
========
if(childCount==Token.CALL){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897794560
GPR[SPVAP]-1659897794560
GPR[EPVAP]-1659897797227
GPR[SPVATF]-1659897797227
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897799546
GPR[EPVS]-1659897799546
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.NAME||n.getType()==Token.GETPROP&&leftSide.getFirstChild().getType()==Token.THIS){
next=next;
next=leftSide.getNext();
break;
}else {
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897799547
GPR[SPVAP]-1659897799547
GPR[EPVAP]-1659897800820
GPR[EPVS]-1659897800820
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(null==next||(null!=next&&null!=flags.getNext())){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897800822
GPR[SPVAP]-1659897800822
GPR[EPVAP]-1659897802078
GPR[EPVS]-1659897802078
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n!=null&&n.getType()!=Token.EXPR_RESULT&&parent.getType()!=Token.SCRIPT){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897802080
GPR[SPVAP]-1659897802080
GPR[EPVAP]-1659897803336
GPR[EPVS]-1659897803336
========
if(NAME!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected const change.\n"+"  name: "+name);
}

========
MM Copying to MM
GPR[SPVS]-1659897803337
GPR[SPVAP]-1659897803337
GPR[EPVAP]-1659897804594
GPR[EPVS]-1659897804594
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(next.getType()!=Token.EXPR_RESULT&&ancestorType!=Token.BLOCK)return ;else break;
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897804595
GPR[SPVAP]-1659897804595
GPR[EPVAP]-1659897805844
GPR[EPVS]-1659897805844
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getFirstChild().getFirstChild().getType()==Token.GETELEM){
return false;
}else if(calledFn.getType()==Token.GETPROP&&calledFn.getLastChild().getString().startsWith("on")){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897805846
GPR[SPVAP]-1659897805846
GPR[EPVAP]-1659897807084
GPR[EPVS]-1659897807084
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getFirstChild().getFirstChild().getType()==Token.GETPROP&&calledFn.getLastChild().getString().startsWith("on")){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897807085
GPR[SPVAP]-1659897807086
GPR[EPVAP]-1659897808330
GPR[EPVS]-1659897808330
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
return true;
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897808332
GPR[SPVAP]-1659897808332
GPR[EPVAP]-1659897809589
GPR[EPVS]-1659897809589
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new Error("Expected children to be strings");
}

========
MM Copying to MM
GPR[SPVS]-1659897809590
GPR[SPVAP]-1659897809590
GPR[EPVAP]-1659897812249
GPR[SPVATF]-1659897812249
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897814600
GPR[EPVS]-1659897814600
========
if(STRING!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new Error("Expected children to be strings");
}

========
MM Copying to MM
GPR[SPVS]-1659897814602
GPR[SPVAP]-1659897814602
GPR[EPVAP]-1659897815860
GPR[EPVS]-1659897815860
========
updateAssignAllowedStack(n,false);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897815861
GPR[SPVAP]-1659897815861
GPR[EPVAP]-1659897817120
GPR[EPVS]-1659897817120
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n==null){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897817122
GPR[SPVAP]-1659897817122
GPR[EPVAP]-1659897818384
GPR[EPVS]-1659897818384
========
if((n.getParent()==null)||(n.getFirstChild()!=next)){
return false;
}
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897818386
GPR[SPVAP]-1659897818386
GPR[EPVAP]-1659897819625
GPR[EPVS]-1659897819625
========
if(AND!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897819627
GPR[SPVAP]-1659897819627
GPR[EPVAP]-1659897820876
GPR[EPVS]-1659897820876
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if((n.getType()==Token.AND)||(n.getType()==Token.OR)){
return processShortCircuitExpression(node);
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897820877
GPR[SPVAP]-1659897820877
GPR[EPVAP]-1659897822161
GPR[EPVS]-1659897822161
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897822162
GPR[SPVAP]-1659897822162
GPR[EPVAP]-1659897824826
GPR[SPVATF]-1659897824827
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897827151
GPR[EPVS]-1659897827151
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897827153
GPR[SPVAP]-1659897827153
GPR[EPVAP]-1659897829832
GPR[SPVATF]-1659897829832
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897832145
GPR[EPVS]-1659897832145
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(first);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897832147
GPR[SPVAP]-1659897832147
GPR[EPVAP]-1659897834836
GPR[SPVATF]-1659897834836
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897837152
GPR[EPVS]-1659897837152
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(first);

throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897837153
GPR[SPVAP]-1659897837153
GPR[EPVAP]-1659897839855
GPR[SPVATF]-1659897839855
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897842156
GPR[EPVS]-1659897842156
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897842157
GPR[SPVAP]-1659897842157
GPR[EPVAP]-1659897844835
GPR[SPVATF]-1659897844835
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897847192
GPR[EPVS]-1659897847192
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897847193
GPR[SPVAP]-1659897847193
GPR[EPVAP]-1659897849908
GPR[SPVATF]-1659897849908
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897852261
GPR[EPVS]-1659897852261
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(first);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897852262
GPR[SPVAP]-1659897852262
GPR[EPVAP]-1659897854991
GPR[SPVATF]-1659897854991
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897857308
GPR[EPVS]-1659897857308
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(first);

throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897857309
GPR[SPVAP]-1659897857309
GPR[EPVAP]-1659897860018
GPR[SPVATF]-1659897860018
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897862329
GPR[EPVS]-1659897862329
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897862330
GPR[SPVAP]-1659897862330
GPR[EPVAP]-1659897864996
GPR[SPVATF]-1659897864996
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897867303
GPR[EPVS]-1659897867303
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(first);
throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897867305
GPR[SPVAP]-1659897867305
GPR[EPVAP]-1659897869989
GPR[SPVATF]-1659897869989
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897872299
GPR[EPVS]-1659897872299
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(first);

throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897872301
GPR[SPVAP]-1659897872301
GPR[EPVAP]-1659897874947
GPR[SPVATF]-1659897874947
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897877277
GPR[EPVS]-1659897877277
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(first);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897877278
GPR[SPVAP]-1659897877278
GPR[EPVAP]-1659897879975
GPR[SPVATF]-1659897879975
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897882329
GPR[EPVS]-1659897882329
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(" ");
add(first);

throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897882331
GPR[SPVAP]-1659897882331
GPR[EPVAP]-1659897885063
GPR[SPVATF]-1659897885063
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897887379
GPR[EPVS]-1659897887379
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(first);
add(" ");
add(first);

throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897887381
GPR[SPVAP]-1659897887381
GPR[EPVAP]-1659897890061
GPR[SPVATF]-1659897890061
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897892382
GPR[EPVS]-1659897892382
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897892383
GPR[SPVAP]-1659897892383
GPR[EPVAP]-1659897895070
GPR[SPVATF]-1659897895070
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897897369
GPR[EPVS]-1659897897369
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(first);
throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897897371
GPR[SPVAP]-1659897897371
GPR[EPVAP]-1659897900082
GPR[SPVATF]-1659897900083
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897902397
GPR[EPVS]-1659897902397
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(first);

throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897902398
GPR[SPVAP]-1659897902398
GPR[EPVAP]-1659897905110
GPR[SPVATF]-1659897905110
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897907477
GPR[EPVS]-1659897907477
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(first);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897907479
GPR[SPVAP]-1659897907479
GPR[EPVAP]-1659897910207
GPR[SPVATF]-1659897910207
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897912548
GPR[EPVS]-1659897912548
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(" ");
add(first);

throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897912550
GPR[SPVAP]-1659897912550
GPR[EPVAP]-1659897915263
GPR[SPVATF]-1659897915263
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897917577
GPR[EPVS]-1659897917577
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(first);
add(" ");
add(first);

throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897917578
GPR[SPVAP]-1659897917578
GPR[EPVAP]-1659897920246
GPR[SPVATF]-1659897920246
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897922549
GPR[EPVS]-1659897922549
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(first);
throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897922551
GPR[SPVAP]-1659897922551
GPR[EPVAP]-1659897925232
GPR[SPVATF]-1659897925232
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897927572
GPR[EPVS]-1659897927572
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(" ");
add(first);

throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897927573
GPR[SPVAP]-1659897927573
GPR[EPVAP]-1659897930322
GPR[SPVATF]-1659897930322
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897932729
GPR[EPVS]-1659897932729
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(first);
add(" ");
add(first);

throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897932730
GPR[SPVAP]-1659897932730
GPR[EPVAP]-1659897935383
GPR[SPVATF]-1659897935383
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897937747
GPR[EPVS]-1659897937747
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(first);
add(" ");
add(first);

throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897937748
GPR[SPVAP]-1659897937748
GPR[EPVAP]-1659897940447
GPR[SPVATF]-1659897940447
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897942801
GPR[EPVS]-1659897942801
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(first);
throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897942802
GPR[SPVAP]-1659897942802
GPR[EPVAP]-1659897945462
GPR[SPVATF]-1659897945462
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897947808
GPR[EPVS]-1659897947808
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(" ");
add(first);

throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897947810
GPR[SPVAP]-1659897947810
GPR[EPVAP]-1659897950483
GPR[SPVATF]-1659897950483
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897952813
GPR[EPVS]-1659897952813
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(first);
add(" ");
add(first);

throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897952815
GPR[SPVAP]-1659897952815
GPR[EPVAP]-1659897955476
GPR[SPVATF]-1659897955476
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897957775
GPR[EPVS]-1659897957775
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(first);
add(" ");
add(first);

throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897957776
GPR[SPVAP]-1659897957776
GPR[EPVAP]-1659897960442
GPR[SPVATF]-1659897960442
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897962763
GPR[EPVS]-1659897962763
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
add(" ");
add(first);
add(" ");
add(first);

throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659897962764
GPR[SPVAP]-1659897962764
GPR[EPVAP]-1659897965454
GPR[SPVATF]-1659897965454
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897967779
GPR[EPVS]-1659897967779
========
Preconditions.checkState(n.getType()==Token.LP);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897967781
GPR[SPVAP]-1659897967781
GPR[EPVAP]-1659897970434
GPR[SPVATF]-1659897970434
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897972753
GPR[EPVS]-1659897972753
========
if(type.isNone()||type.isAll()){
break;
}
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897972755
GPR[SPVAP]-1659897972755
GPR[EPVAP]-1659897974007
GPR[EPVS]-1659897974007
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(next.getType()==Token.NAME&&n.getType()==Token.NAME&&next.getString().equals(n.getString())){
next.getParent().replaceChild(subtree,right.detachFromParent());
reportCodeChange();
return right;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897974009
GPR[SPVAP]-1659897974009
GPR[EPVAP]-1659897975301
GPR[EPVS]-1659897975301
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
next.getParent().replaceChild(subtree,n.detachFromParent());
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897975303
GPR[SPVAP]-1659897975303
GPR[EPVAP]-1659897976564
GPR[EPVS]-1659897976564
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
next.getParent().replaceChild(subtree,n.detachFromParent());
reportCodeChange();

throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897976565
GPR[SPVAP]-1659897976565
GPR[EPVAP]-1659897977824
GPR[EPVS]-1659897977824
========
if(NAME!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
reportCodeChange();
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897977825
GPR[SPVAP]-1659897977825
GPR[EPVAP]-1659897979063
GPR[EPVS]-1659897979063
========
if(pt!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897979065
GPR[SPVAP]-1659897979065
GPR[EPVAP]-1659897980304
GPR[EPVS]-1659897980304
========
if(FOR!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897980306
GPR[SPVAP]-1659897980306
GPR[EPVAP]-1659897981551
GPR[EPVS]-1659897981551
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(childCount==Token.FOR&&n.getChildCount()==4&&(n==n.getFirstChild()||n==parent.getFirstChild().getNext().getNext())){
}else {
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897981552
GPR[SPVAP]-1659897981552
GPR[EPVAP]-1659897982798
GPR[EPVS]-1659897982798
========
if(REACHABLE!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897982800
GPR[SPVAP]-1659897982800
GPR[EPVAP]-1659897984042
GPR[EPVS]-1659897984042
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
removeDeadExprStatementSafely(n);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897984047
GPR[SPVAP]-1659897984047
GPR[EPVAP]-1659897985335
GPR[EPVS]-1659897985335
========
tryRemoveUnconditionalBranching(n);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897985337
GPR[SPVAP]-1659897985337
GPR[EPVAP]-1659897986607
GPR[EPVS]-1659897986607
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(ambiguousElseClause&&ambiguousElseClause){
return false;
}else if(aIsNull^bIsNull){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897986609
GPR[SPVAP]-1659897986609
GPR[EPVAP]-1659897987880
GPR[EPVS]-1659897987880
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n==null){
return MISSING_SOURCE+"\n";
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897987882
GPR[SPVAP]-1659897987882
GPR[EPVAP]-1659897989141
GPR[EPVS]-1659897989141
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getString().equals("Infinity")){
return n;
}else if(left.getString().equals("NaN")){
n.removeChild(left);
next.replaceChild(n,left);
reportCodeChange();
return left;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897989142
GPR[SPVAP]-1659897989142
GPR[EPVAP]-1659897990396
GPR[EPVS]-1659897990396
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getString().equals("NaN")){
n.removeChild(left);
next.replaceChild(n,left);
reportCodeChange();
return left;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897990398
GPR[SPVAP]-1659897990398
GPR[EPVAP]-1659897991646
GPR[EPVS]-1659897991646
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.VAR){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897991648
GPR[SPVAP]-1659897991648
GPR[EPVAP]-1659897992918
GPR[EPVS]-1659897992918
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.NAME){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897992920
GPR[SPVAP]-1659897992920
GPR[EPVAP]-1659897994213
GPR[EPVS]-1659897994213
========
Preconditions.checkArgument(n.getType()==Token.GETPROP);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897994214
GPR[SPVAP]-1659897994214
GPR[EPVAP]-1659897996948
GPR[SPVATF]-1659897996948
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659897999288
GPR[EPVS]-1659897999288
========
Preconditions.checkArgument(n.getType()==Token.GETPROP);
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659897999289
GPR[SPVAP]-1659897999289
GPR[EPVAP]-1659898001961
GPR[SPVATF]-1659898001961
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898004286
GPR[EPVS]-1659898004286
========
Preconditions.checkArgument(n.getType()==Token.GETPROP);
if(childCount!=Token.NAME){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898004287
GPR[SPVAP]-1659898004287
GPR[EPVAP]-1659898006969
GPR[SPVATF]-1659898006969
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898009278
GPR[EPVS]-1659898009278
========
Preconditions.checkArgument(n.getType()==Token.GETPROP);
if(childCount==Token.NAME){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898009280
GPR[SPVAP]-1659898009280
GPR[EPVAP]-1659898011943
GPR[SPVATF]-1659898011943
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898014274
GPR[EPVS]-1659898014274
========
if(REGEXP!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898014276
GPR[SPVAP]-1659898014276
GPR[EPVAP]-1659898015534
GPR[EPVS]-1659898015534
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getFirstChild().getType()==Token.REGEXP&&REGEXP_METHODS.contains(n.getLastChild().getString())){
return false;
}else if(nameNode.getFirstChild().getType()==Token.STRING&&STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())){
Node n.getNext()=nameNode.getNext();
if(param!=null&&(param.getType()==Token.STRING||param.getType()==Token.REGEXP))return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898015536
GPR[SPVAP]-1659898015536
GPR[EPVAP]-1659898016641
GPR[EPVS]-1659898016641
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(next==computeFollowing(n)){
removeDeadExprStatementSafely(n);
return fallThrough;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898016642
GPR[SPVAP]-1659898016642
GPR[EPVAP]-1659898017883
GPR[EPVS]-1659898017883
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Empty VAR node.");
}

========
MM Copying to MM
GPR[SPVS]-1659898017885
GPR[SPVAP]-1659898017885
GPR[EPVAP]-1659898020551
GPR[SPVATF]-1659898020551
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898022883
GPR[EPVS]-1659898022883
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Invalid attempt to remove node: "+next.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659898022885
GPR[SPVAP]-1659898022885
GPR[EPVAP]-1659898024138
GPR[EPVS]-1659898024138
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(childCount==Token.RETURN){
return !n.hasChildren();
}else {
if(opstr==null){
return !n.hasChildren();
}else {
return n.hasChildren()&&labelName.equals(n.getFirstChild().getString());
}
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898024140
GPR[SPVAP]-1659898024140
GPR[EPVAP]-1659898025392
GPR[EPVS]-1659898025392
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(opstr==null){
return !n.hasChildren();
}else {
return n.hasChildren()&&labelName.equals(n.getFirstChild().getString());
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898025393
GPR[SPVAP]-1659898025393
GPR[EPVAP]-1659898026636
GPR[EPVS]-1659898026636
========
if(type!=Token.RETURN){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898026637
GPR[SPVAP]-1659898026637
GPR[EPVAP]-1659898029304
GPR[SPVATF]-1659898029304
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898031636
GPR[EPVS]-1659898031636
========
if(type==Token.RETURN){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898031638
GPR[SPVAP]-1659898031638
GPR[EPVAP]-1659898034297
GPR[SPVATF]-1659898034297
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898036602
GPR[EPVS]-1659898036602
========
if(INSTANCEOF!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898036604
GPR[SPVAP]-1659898036604
GPR[EPVAP]-1659898037863
GPR[EPVS]-1659898037863
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(TYPEDEF_NAME.equals(n.getLastChild().getQualifiedName())){
return n.getFirstChild().getQualifiedName();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898037865
GPR[SPVAP]-1659898037865
GPR[EPVAP]-1659898039101
GPR[EPVS]-1659898039101
========
if(type!=Token.ASSIGN){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898039102
GPR[SPVAP]-1659898039102
GPR[EPVAP]-1659898041780
GPR[SPVATF]-1659898041780
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898044090
GPR[EPVS]-1659898044090
========
if(type==Token.ASSIGN){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898044091
GPR[SPVAP]-1659898044091
GPR[EPVAP]-1659898046790
GPR[SPVATF]-1659898046791
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898049141
GPR[EPVS]-1659898049141
========
if(tt!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898049143
GPR[SPVAP]-1659898049143
GPR[EPVAP]-1659898050397
GPR[EPVS]-1659898050397
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
recordAlias(opstr,name);
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898050399
GPR[SPVAP]-1659898050399
GPR[EPVAP]-1659898051638
GPR[EPVS]-1659898051638
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(getJSType(n.getFirstChild()).dereference()!=null&&(objectType.getConstructor()!=null||objectType.isFunctionPrototypeType())){
return objectType.toString()+".";
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898051640
GPR[SPVAP]-1659898051640
GPR[EPVAP]-1659898052896
GPR[EPVS]-1659898052896
========
if(parentType!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898052899
GPR[SPVAP]-1659898052899
GPR[EPVAP]-1659898054155
GPR[EPVS]-1659898054155
========
if(NEW!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898054157
GPR[SPVAP]-1659898054157
GPR[EPVAP]-1659898055402
GPR[EPVS]-1659898055402
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getFirstChild().getNext()==null||thisValue.getType()!=Token.THIS){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898055404
GPR[SPVAP]-1659898055404
GPR[EPVAP]-1659898056643
GPR[EPVS]-1659898056643
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(NodeUtil.isFunctionObjectApply(n)){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898056644
GPR[SPVAP]-1659898056644
GPR[EPVAP]-1659898057894
GPR[EPVS]-1659898057894
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.ASSIGN||n.getLastChild()==next&&parent.getFirstChild().isQualifiedName()){
return parent.getFirstChild();
}else if(parent.getType()==Token.NAME){
return parent;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898057895
GPR[SPVAP]-1659898057895
GPR[EPVAP]-1659898059156
GPR[EPVS]-1659898059156
========
if(childCount!=Token.LP){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898059158
GPR[SPVAP]-1659898059158
GPR[EPVAP]-1659898061861
GPR[SPVATF]-1659898061861
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898064169
GPR[EPVS]-1659898064169
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.LP){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898064171
GPR[SPVAP]-1659898064171
GPR[EPVAP]-1659898065408
GPR[EPVS]-1659898065408
========
if(childCount==Token.LP){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898065410
GPR[SPVAP]-1659898065410
GPR[EPVAP]-1659898068073
GPR[SPVATF]-1659898068073
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898070385
GPR[EPVS]-1659898070385
========
if(childCount!=Token.BLOCK){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898070387
GPR[SPVAP]-1659898070387
GPR[EPVAP]-1659898073050
GPR[SPVATF]-1659898073050
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898075341
GPR[EPVS]-1659898075341
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.BLOCK){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898075342
GPR[SPVAP]-1659898075342
GPR[EPVAP]-1659898076619
GPR[EPVS]-1659898076619
========
if(childCount!=Token.CASE){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898076621
GPR[SPVAP]-1659898076621
GPR[EPVAP]-1659898079275
GPR[SPVATF]-1659898079275
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898081600
GPR[EPVS]-1659898081600
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.CASE){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898081602
GPR[SPVAP]-1659898081602
GPR[EPVAP]-1659898082861
GPR[EPVS]-1659898082861
========
if(childCount==Token.CASE){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898082863
GPR[SPVAP]-1659898082863
GPR[EPVAP]-1659898085525
GPR[SPVATF]-1659898085525
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898087854
GPR[EPVS]-1659898087854
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.NUMBER){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898087856
GPR[SPVAP]-1659898087856
GPR[EPVAP]-1659898089115
GPR[EPVS]-1659898089115
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.FUNCTION){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898089117
GPR[SPVAP]-1659898089117
GPR[EPVAP]-1659898090355
GPR[EPVS]-1659898090355
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.FUNCTION){
return null;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898090357
GPR[SPVAP]-1659898090357
GPR[EPVAP]-1659898091585
GPR[EPVS]-1659898091585
========
if(childCount!=Token.NAME){
if(n.getType()!=Token.NAME){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898091586
GPR[SPVAP]-1659898091586
GPR[EPVAP]-1659898092832
GPR[EPVS]-1659898092832
========
if(childCount!=Token.GETELEM){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898092834
GPR[SPVAP]-1659898092834
GPR[EPVAP]-1659898095488
GPR[SPVATF]-1659898095488
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898097794
GPR[EPVS]-1659898097794
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.GETELEM){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898097796
GPR[SPVAP]-1659898097796
GPR[EPVAP]-1659898099052
GPR[EPVS]-1659898099052
========
if(childCount!=Token.NUMBER){
if(n.getType()!=Token.NUMBER){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898099053
GPR[SPVAP]-1659898099053
GPR[EPVAP]-1659898100299
GPR[EPVS]-1659898100299
========
if(childCount!=Token.EMPTY){
if(n.getType()!=Token.EMPTY){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898100300
GPR[SPVAP]-1659898100300
GPR[EPVAP]-1659898101551
GPR[EPVS]-1659898101551
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.GETPROP){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898101553
GPR[SPVAP]-1659898101553
GPR[EPVAP]-1659898102804
GPR[EPVS]-1659898102804
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.RETURN){
return null;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898102806
GPR[SPVAP]-1659898102806
GPR[EPVAP]-1659898104055
GPR[EPVS]-1659898104055
========
if(childCount!=Token.LABEL_NAME){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898104056
GPR[SPVAP]-1659898104056
GPR[EPVAP]-1659898106715
GPR[SPVATF]-1659898106715
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898109054
GPR[EPVS]-1659898109054
========
if(childCount!=Token.LABEL_NAME){
throw new Error("Unexpected token type. Should be LABEL_NAME.");
}

========
MM Copying to MM
GPR[SPVS]-1659898109055
GPR[SPVAP]-1659898109055
GPR[EPVAP]-1659898111737
GPR[SPVATF]-1659898111737
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898114049
GPR[EPVS]-1659898114049
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.STRING){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898114051
GPR[SPVAP]-1659898114051
GPR[EPVAP]-1659898116765
GPR[SPVATF]-1659898116765
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898119103
GPR[EPVS]-1659898119103
========
if(childCount!=Token.STRING){
if(n.getType()!=Token.STRING){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898119104
GPR[SPVAP]-1659898119104
GPR[EPVAP]-1659898121798
GPR[SPVATF]-1659898121799
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898124129
GPR[EPVS]-1659898124129
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.GETPROP){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898124131
GPR[SPVAP]-1659898124131
GPR[EPVAP]-1659898126825
GPR[SPVATF]-1659898126825
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898129146
GPR[EPVS]-1659898129146
========
if(childCount!=Token.GETPROP){
if(n.getType()!=Token.GETPROP){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898129147
GPR[SPVAP]-1659898129147
GPR[EPVAP]-1659898131821
GPR[SPVATF]-1659898131821
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898134143
GPR[EPVS]-1659898134143
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.NEW){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898134145
GPR[SPVAP]-1659898134145
GPR[EPVAP]-1659898136875
GPR[SPVATF]-1659898136875
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898139223
GPR[EPVS]-1659898139223
========
if(childCount==Token.NEW){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898139224
GPR[SPVAP]-1659898139224
GPR[EPVAP]-1659898141880
GPR[SPVATF]-1659898141880
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898144264
GPR[EPVS]-1659898144264
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.NEW){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898144266
GPR[SPVAP]-1659898144266
GPR[EPVAP]-1659898146937
GPR[SPVATF]-1659898146937
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898149262
GPR[EPVS]-1659898149262
========
if(childCount!=Token.NEW){
if(n.getType()==Token.NEW){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898149263
GPR[SPVAP]-1659898149263
GPR[EPVAP]-1659898151909
GPR[SPVATF]-1659898151909
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898154198
GPR[EPVS]-1659898154198
========
if(childCount==Token.NEW){
if(n.getType()==Token.NEW){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898154200
GPR[SPVAP]-1659898154200
GPR[EPVAP]-1659898156842
GPR[SPVATF]-1659898156842
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898159174
GPR[EPVS]-1659898159174
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.FUNCTION){
return next();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898159176
GPR[SPVAP]-1659898159176
GPR[EPVAP]-1659898160442
GPR[EPVS]-1659898160442
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.CALL&&n.getFirstChild()==name){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898160444
GPR[SPVAP]-1659898160444
GPR[EPVAP]-1659898161703
GPR[EPVS]-1659898161703
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.CALL&&n.getFirstChild()==next){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898161705
GPR[SPVAP]-1659898161705
GPR[EPVAP]-1659898162952
GPR[EPVS]-1659898162952
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.FUNCTION){
reportError("msg.bad.prop");
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898162954
GPR[SPVAP]-1659898162954
GPR[EPVAP]-1659898164205
GPR[EPVS]-1659898164205
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
reportError("msg.bad.prop");
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898164207
GPR[SPVAP]-1659898164207
GPR[EPVAP]-1659898165457
GPR[EPVS]-1659898165457
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.STRING&&n.getString().equals("prototype")){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898165458
GPR[SPVAP]-1659898165458
GPR[EPVAP]-1659898166700
GPR[EPVS]-1659898166700
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.RETURN){
return n.hasOneChild();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898166701
GPR[SPVAP]-1659898166701
GPR[EPVAP]-1659898168004
GPR[EPVS]-1659898168004
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.VAR){
return n.hasOneChild();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898168006
GPR[SPVAP]-1659898168006
GPR[EPVAP]-1659898169252
GPR[EPVS]-1659898169252
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.RETURN){
return n.getFirstChild();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898169254
GPR[SPVAP]-1659898169254
GPR[EPVAP]-1659898170497
GPR[EPVS]-1659898170497
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.NAME&&next.getType()==Token.NAME&&firstClause.getString().equals(lValue.getString())&&n.getNext().getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898170498
GPR[SPVAP]-1659898170498
GPR[EPVAP]-1659898171736
GPR[EPVS]-1659898171736
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.NAME&&CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(n.getString())){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898171738
GPR[SPVAP]-1659898171738
GPR[EPVAP]-1659898172984
GPR[EPVS]-1659898172984
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.NAME&&isNameAssignedTo(n.getString(),next)){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898172985
GPR[SPVAP]-1659898172985
GPR[EPVAP]-1659898174260
GPR[EPVS]-1659898174261
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getFirstChild().getFirstChild().getType()==Token.NAME){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898174262
GPR[SPVAP]-1659898174262
GPR[EPVAP]-1659898175510
GPR[EPVS]-1659898175510
========
if(childCount!=TernaryValue.TRUE){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898175511
GPR[SPVAP]-1659898175511
GPR[EPVAP]-1659898176764
GPR[EPVS]-1659898176764
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getFirstChild().getType()==Token.RETURN&&n.getFirstChild().getFirstChild()!=null){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898176766
GPR[SPVAP]-1659898176766
GPR[EPVAP]-1659898178021
GPR[EPVS]-1659898178021
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.GETPROP&&n.getLastChild().getString().equals("prototype")){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898178022
GPR[SPVAP]-1659898178022
GPR[EPVAP]-1659898179268
GPR[EPVS]-1659898179268
========
if(GETPROP!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.GETPROP&&n.getLastChild().getString().equals("prototype")){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898179270
GPR[SPVAP]-1659898179270
GPR[EPVAP]-1659898180524
GPR[EPVS]-1659898180524
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getChildCount()!=3){
return null;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898180526
GPR[SPVAP]-1659898180526
GPR[EPVAP]-1659898181795
GPR[EPVS]-1659898181795
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(next==null&&!(isLowerPrecedenceInExpression(next,AND_PRECEDENCE)&&isLowerPrecedenceInExpression(next,AND_PRECEDENCE))){
n.detachChildren();
n.addChildToBack(new Node(Token.AND,cond,innerCond.detachFromParent()).copyInformationFrom(cond));
n.addChildrenToBack(next.detachFromParent());
reportCodeChange();
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898181797
GPR[SPVAP]-1659898181797
GPR[EPVAP]-1659898183040
GPR[EPVS]-1659898183040
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.addChildToBack(new Node(Token.AND,next,next.detachFromParent()).copyInformationFrom(cond));
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898183042
GPR[SPVAP]-1659898183042
GPR[EPVAP]-1659898184345
GPR[EPVS]-1659898184345
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.addChildrenToBack(next.detachFromParent());
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898184346
GPR[SPVAP]-1659898184346
GPR[EPVAP]-1659898185654
GPR[EPVS]-1659898185654
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.detachChildren();
n.addChildToBack(new Node(Token.AND,next,next.detachFromParent()).copyInformationFrom(cond));
n.addChildrenToBack(next.detachFromParent());
reportCodeChange();

throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898185656
GPR[SPVAP]-1659898185656
GPR[EPVAP]-1659898186890
GPR[EPVS]-1659898186890
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
n.detachChildren();
reportCodeChange();
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898186892
GPR[SPVAP]-1659898186892
GPR[EPVAP]-1659898188123
GPR[EPVS]-1659898188123
========
if(childCount!=Token.NOT){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898188125
GPR[SPVAP]-1659898188125
GPR[EPVAP]-1659898190804
GPR[SPVATF]-1659898190804
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898193128
GPR[EPVS]-1659898193128
========
if(childCount==Token.NOT){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898193130
GPR[SPVAP]-1659898193130
GPR[EPVAP]-1659898195793
GPR[SPVATF]-1659898195793
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898198117
GPR[EPVS]-1659898198117
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.NAME&&opstr.equals(n.getString())){
next=null;
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898198119
GPR[SPVAP]-1659898198119
GPR[EPVAP]-1659898200810
GPR[SPVATF]-1659898200810
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898203119
GPR[EPVS]-1659898203119
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
lookAhead=null;
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898203120
GPR[SPVAP]-1659898203120
GPR[EPVAP]-1659898204361
GPR[EPVS]-1659898204361
========
if(NAME!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.NAME&&opstr.equals(n.getString())){
next=null;
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898204362
GPR[SPVAP]-1659898204362
GPR[EPVAP]-1659898205608
GPR[EPVS]-1659898205608
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getJSType()==null){
return ConcreteType.ALL;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898205609
GPR[SPVAP]-1659898205610
GPR[EPVAP]-1659898206852
GPR[EPVS]-1659898206852
========
Preconditions.checkNotNull(n);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898206854
GPR[SPVAP]-1659898206854
GPR[EPVAP]-1659898209497
GPR[SPVATF]-1659898209497
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898211813
GPR[EPVS]-1659898211813
========
Preconditions.checkArgument(n.getType()==Token.NAME);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898211815
GPR[SPVAP]-1659898211815
GPR[EPVAP]-1659898214475
GPR[SPVATF]-1659898214475
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898216774
GPR[EPVS]-1659898216774
========
Preconditions.checkNotNull(n);
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898216775
GPR[SPVAP]-1659898216775
GPR[EPVAP]-1659898219421
GPR[SPVATF]-1659898219421
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898221705
GPR[EPVS]-1659898221705
========
Preconditions.checkArgument(n.getType()==Token.NAME);
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898221706
GPR[SPVAP]-1659898221706
GPR[EPVAP]-1659898224357
GPR[SPVATF]-1659898224357
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898226654
GPR[EPVS]-1659898226654
========
Preconditions.checkNotNull(n);
if(childCount!=null){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898226656
GPR[SPVAP]-1659898226656
GPR[EPVAP]-1659898227911
GPR[EPVS]-1659898227911
========
Preconditions.checkArgument(n.getType()==Token.NAME);
if(childCount!=null){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898227913
GPR[SPVAP]-1659898227913
GPR[EPVAP]-1659898229180
GPR[EPVS]-1659898229180
========
Preconditions.checkNotNull(n);
Preconditions.checkArgument(n.getType()==Token.NAME);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898229182
GPR[SPVAP]-1659898229182
GPR[EPVAP]-1659898231826
GPR[SPVATF]-1659898231826
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898234133
GPR[EPVS]-1659898234133
========
Preconditions.checkNotNull(n);
if(childCount==null){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898234134
GPR[SPVAP]-1659898234134
GPR[EPVAP]-1659898235403
GPR[EPVS]-1659898235403
========
Preconditions.checkArgument(n.getType()==Token.NAME);
if(childCount==null){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898235404
GPR[SPVAP]-1659898235404
GPR[EPVAP]-1659898236642
GPR[EPVS]-1659898236642
========
Preconditions.checkNotNull(n);
Preconditions.checkArgument(n.getType()==Token.NAME);
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898236644
GPR[SPVAP]-1659898236644
GPR[EPVAP]-1659898239291
GPR[SPVATF]-1659898239291
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898241580
GPR[EPVS]-1659898241580
========
Preconditions.checkNotNull(n);
Preconditions.checkArgument(n.getType()==Token.NAME);
if(childCount!=null){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898241582
GPR[SPVAP]-1659898241582
GPR[EPVAP]-1659898242837
GPR[EPVS]-1659898242837
========
Preconditions.checkNotNull(n);
Preconditions.checkArgument(n.getType()==Token.NAME);
if(childCount==null){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898242839
GPR[SPVAP]-1659898242839
GPR[EPVAP]-1659898244080
GPR[EPVS]-1659898244080
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.NAME){
return opstr.equals(n.getString());
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898244082
GPR[SPVAP]-1659898244082
GPR[EPVAP]-1659898245337
GPR[EPVS]-1659898245337
========
if(childCount!=Token.DEFAULT){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898245339
GPR[SPVAP]-1659898245339
GPR[EPVAP]-1659898248016
GPR[SPVATF]-1659898248016
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898250334
GPR[EPVS]-1659898250334
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getNext().getType()==Token.DEFAULT){
return n.getNext().getFirstChild();
}else {
Preconditions.checkState(false,"Not reachable");
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898250336
GPR[SPVAP]-1659898250336
GPR[EPVAP]-1659898251610
GPR[EPVS]-1659898251610
========
if(childCount==Token.DEFAULT){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898251612
GPR[SPVAP]-1659898251612
GPR[EPVAP]-1659898254341
GPR[SPVATF]-1659898254341
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898256643
GPR[EPVS]-1659898256643
========
if(childCount!=-1){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898256644
GPR[SPVAP]-1659898256644
GPR[EPVAP]-1659898259289
GPR[SPVATF]-1659898259289
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898261615
GPR[EPVS]-1659898261615
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getFirstChild().getString().equals("Math")){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898261617
GPR[SPVAP]-1659898261617
GPR[EPVAP]-1659898262870
GPR[EPVS]-1659898262870
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(!n.hasChildren()||!isExit(previousBlock.getLastChild())){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898262872
GPR[SPVAP]-1659898262872
GPR[EPVAP]-1659898264115
GPR[EPVS]-1659898264115
========
Preconditions.checkState(next==null||previousCase.getNext()==next);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898264117
GPR[SPVAP]-1659898264117
GPR[EPVAP]-1659898265359
GPR[EPVS]-1659898265359
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(name.equals(next.getString())){
return true;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898265361
GPR[SPVAP]-1659898265361
GPR[EPVAP]-1659898266610
GPR[EPVS]-1659898266610
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(maybeExternMethod(first)){
return DecompositionType.UNDECOMPOSABLE;
}else {
return DecompositionType.DECOMPOSABLE;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898266611
GPR[SPVAP]-1659898266611
GPR[EPVAP]-1659898267867
GPR[EPVS]-1659898267867
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(NodeUtil.nodeTypeMayHaveSideEffects(next)&&childCount!=Token.NAME||type==Token.NAME&&n.getType()==Token.CATCH){
next=null;
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898267868
GPR[SPVAP]-1659898267868
GPR[EPVAP]-1659898269117
GPR[EPVS]-1659898269117
========
if(type!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
lookAhead=null;
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898269118
GPR[SPVAP]-1659898269118
GPR[EPVAP]-1659898270358
GPR[EPVS]-1659898270358
========
if(NAME!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
lookAhead=null;
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898270359
GPR[SPVAP]-1659898270359
GPR[EPVAP]-1659898271606
GPR[EPVS]-1659898271606
========
if(SEMI!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898271608
GPR[SPVAP]-1659898271608
GPR[EPVAP]-1659898272857
GPR[EPVS]-1659898272857
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new MalformedException("Expected node type "+childCount,next);
}

========
MM Copying to MM
GPR[SPVS]-1659898272858
GPR[SPVAP]-1659898272858
GPR[EPVAP]-1659898274103
GPR[EPVS]-1659898274103
========
Preconditions.checkArgument(n.getType()==Token.CALL,"Expected: CALL, Got: "+Token.name(node.getType()));
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898274106
GPR[SPVAP]-1659898274106
GPR[EPVAP]-1659898275375
GPR[EPVS]-1659898275376
========
if(childCount==Token.GETELEM){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898275377
GPR[SPVAP]-1659898275377
GPR[EPVAP]-1659898278012
GPR[SPVATF]-1659898278012
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898280344
GPR[EPVS]-1659898280344
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(ref.node.getJSDocInfo()!=null&&info.hasTypedefType()){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898280345
GPR[SPVAP]-1659898280345
GPR[EPVAP]-1659898281601
GPR[EPVS]-1659898281601
========
if(childCount!=Token.COLON){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898281602
GPR[SPVAP]-1659898281602
GPR[EPVAP]-1659898284242
GPR[SPVATF]-1659898284242
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898286533
GPR[EPVS]-1659898286533
========
if(childCount==Token.COLON){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898286534
GPR[SPVAP]-1659898286534
GPR[EPVAP]-1659898289220
GPR[SPVATF]-1659898289220
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898291556
GPR[EPVS]-1659898291556
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n!=null&&last.getType()==Token.STRING){
String n.getString()=last.getString();
return (propName.equals(opstr));
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898291558
GPR[SPVAP]-1659898291558
GPR[EPVAP]-1659898292640
GPR[EPVS]-1659898292640
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(childCount!=n.getType()||getChildCount()!=n.getChildCount()||getNodeClass(this)!=getNodeClass(n)){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898292642
GPR[SPVAP]-1659898292642
GPR[EPVAP]-1659898293902
GPR[EPVS]-1659898293903
========
if(size!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898293904
GPR[SPVAP]-1659898293904
GPR[EPVAP]-1659898295151
GPR[EPVS]-1659898295151
========
Preconditions.checkState(childCount==1||next.getType()==Token.BLOCK||parentType==Token.SCRIPT||parentType==Token.LABEL);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898295153
GPR[SPVAP]-1659898295153
GPR[EPVAP]-1659898296435
GPR[EPVS]-1659898296435
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(!(NodeUtil.isAssignmentOp(n)&&parent.getFirstChild()==next)&&(parent.getType()!=Token.INC)){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898296437
GPR[SPVAP]-1659898296437
GPR[EPVAP]-1659898297707
GPR[EPVS]-1659898297707
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
error=true;
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898297709
GPR[SPVAP]-1659898297709
GPR[EPVAP]-1659898298955
GPR[EPVS]-1659898298955
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalArgumentException(Token.name(n.getType())+" nodes are not supported.");
}

========
MM Copying to MM
GPR[SPVS]-1659898298957
GPR[SPVAP]-1659898298957
GPR[EPVAP]-1659898301646
GPR[SPVATF]-1659898301646
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898303949
GPR[EPVS]-1659898303949
========
if(childCount!=Token.HOOK){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898303951
GPR[SPVAP]-1659898303951
GPR[EPVAP]-1659898306610
GPR[SPVATF]-1659898306610
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898308911
GPR[EPVS]-1659898308911
========
if(childCount==Token.HOOK){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898308913
GPR[SPVAP]-1659898308913
GPR[EPVAP]-1659898311572
GPR[SPVATF]-1659898311572
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898313912
GPR[EPVS]-1659898313912
========
Preconditions.checkState(n.getType()==Token.CASE);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898313914
GPR[SPVAP]-1659898313914
GPR[EPVAP]-1659898316595
GPR[SPVATF]-1659898316595
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898318910
GPR[EPVS]-1659898318910
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new MalformedException("Duplicate placeholder name: "+n.getString(),n);
}

========
MM Copying to MM
GPR[SPVS]-1659898318912
GPR[SPVAP]-1659898318912
GPR[EPVAP]-1659898320160
GPR[EPVS]-1659898320160
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getJSType()!=null&&lValueType.isConstructor()){
return ((FunctionType)lValueType).getInstanceType();
}else {
return normalizeClassType(n.getFirstChild().getJSType());
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898320162
GPR[SPVAP]-1659898320162
GPR[EPVAP]-1659898321414
GPR[EPVS]-1659898321414
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.GETPROP){
JSType n.getJSType()=n.getJSType();
if(lValueType!=null&&lValueType.isConstructor()){
return ((FunctionType)lValueType).getInstanceType();
}else {
return normalizeClassType(lValue.getFirstChild().getJSType());
}
}else {
return normalizeClassType(lValue.getJSType());
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898321415
GPR[SPVAP]-1659898321415
GPR[EPVAP]-1659898322514
GPR[EPVS]-1659898322514
========
if(childCount!=Token.EQUALS){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898322517
GPR[SPVAP]-1659898322517
GPR[EPVAP]-1659898325189
GPR[SPVATF]-1659898325189
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898327490
GPR[EPVS]-1659898327490
========
if(childCount==Token.EQUALS){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898327491
GPR[SPVAP]-1659898327491
GPR[EPVAP]-1659898330169
GPR[SPVATF]-1659898330169
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898332453
GPR[EPVS]-1659898332453
========
if(cType!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898332455
GPR[SPVAP]-1659898332455
GPR[EPVAP]-1659898333704
GPR[EPVS]-1659898333704
========
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()==Token.FUNCTION){
return next();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898333706
GPR[SPVAP]-1659898333706
GPR[EPVAP]-1659898334970
GPR[EPVS]-1659898334970
========
if(childCount!=Token.FUNCTION){
if(n.getType()==Token.FUNCTION){
return next();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898334971
GPR[SPVAP]-1659898334971
GPR[EPVAP]-1659898336229
GPR[EPVS]-1659898336229
========
if(childCount==Token.FUNCTION){
if(n.getType()==Token.FUNCTION){
return next();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898336230
GPR[SPVAP]-1659898336230
GPR[EPVAP]-1659898337502
GPR[EPVS]-1659898337502
========
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(type==null||ambiguousElseClause){
return null;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898337504
GPR[SPVAP]-1659898337504
GPR[EPVAP]-1659898338757
GPR[EPVS]-1659898338757
========
if(childCount!=Token.BLOCK){
if(n.getType()!=Token.BLOCK){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898338759
GPR[SPVAP]-1659898338759
GPR[EPVAP]-1659898340011
GPR[EPVS]-1659898340011
========
if(childCount!=null){
if(n.getNext()!=null){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}

========
MM Copying to MM
GPR[SPVS]-1659898340013
GPR[SPVAP]-1659898340013
GPR[EPVAP]-1659898341253
GPR[EPVS]-1659898341253
GPR[ESUN]-1659898341253
GPR[SSUN]-1659898341253
com.google.javascript.jscomp.CodeGenerator,634
========
case Token.NUMBER :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898343850
GPR[SPVAP]-1659898343850
GPR[EPVAP]-1659898346772
GPR[EPVS]-1659898346772
========
case Token.STRING :
Preconditions.checkState(childCount==1);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898346774
GPR[SPVAP]-1659898346774
GPR[EPVAP]-1659898353260
GPR[SPVATF]-1659898353260
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898355573
GPR[EPVS]-1659898355573
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(".");
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898355575
GPR[SPVAP]-1659898355575
GPR[EPVAP]-1659898358265
GPR[SPVATF]-1659898358265
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898360584
GPR[EPVS]-1659898360584
========
case Token.STRING :
add((String)n.getProp(Node.NAME_PROP));
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898360585
GPR[SPVAP]-1659898360585
GPR[EPVAP]-1659898363278
GPR[SPVATF]-1659898363278
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898365673
GPR[EPVS]-1659898365673
========
case Token.STRING :
Preconditions.checkState(childCount==1);
add(".");
add((String)n.getProp(Node.NAME_PROP));

if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898365674
GPR[SPVAP]-1659898365674
GPR[EPVAP]-1659898368352
GPR[SPVATF]-1659898368352
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898370662
GPR[EPVS]-1659898370662
========
case Token.STRING :
Preconditions.checkState(childCount==0);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898370663
GPR[SPVAP]-1659898370664
GPR[EPVAP]-1659898373341
GPR[SPVATF]-1659898373341
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898375685
GPR[EPVS]-1659898375685
========
case Token.TYPEOF :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898375686
GPR[SPVAP]-1659898375686
GPR[EPVAP]-1659898376959
GPR[EPVS]-1659898376959
========
case Token.NULL :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898376960
GPR[SPVAP]-1659898376960
GPR[EPVAP]-1659898378204
GPR[EPVS]-1659898378204
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
setJSType(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898378206
GPR[SPVAP]-1659898378206
GPR[EPVAP]-1659898379442
GPR[EPVS]-1659898379442
========
case Token.VOID :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898379443
GPR[SPVAP]-1659898379443
GPR[EPVAP]-1659898380697
GPR[EPVS]-1659898380697
========
case Token.TRUE :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898380699
GPR[SPVAP]-1659898380699
GPR[EPVAP]-1659898381950
GPR[EPVS]-1659898381950
========
case Token.REF_SPECIAL :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898381952
GPR[SPVAP]-1659898381952
GPR[EPVAP]-1659898383218
GPR[EPVS]-1659898383218
========
case Token.FUNCTION :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898383220
GPR[SPVAP]-1659898383220
GPR[EPVAP]-1659898384475
GPR[EPVS]-1659898384475
========
case Token.ARRAYLIT :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898384476
GPR[SPVAP]-1659898384476
GPR[EPVAP]-1659898385728
GPR[EPVS]-1659898385728
========
case Token.HOOK :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898385730
GPR[SPVAP]-1659898385730
GPR[EPVAP]-1659898387000
GPR[EPVS]-1659898387000
========
case Token.NULL :
return Node.tokenToName(n.getType());

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898387002
GPR[SPVAP]-1659898387002
GPR[EPVAP]-1659898388264
GPR[EPVS]-1659898388264
========
case Token.DELPROP :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898388266
GPR[SPVAP]-1659898388266
GPR[EPVAP]-1659898389555
GPR[EPVS]-1659898389555
========
case Token.CONTINUE :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898389557
GPR[SPVAP]-1659898389557
GPR[EPVAP]-1659898390802
GPR[EPVS]-1659898390802
========
case Token.SET :
Preconditions.checkState(n.getParent().getType()==Token.OBJECTLIT);
Preconditions.checkState(childCount==1);
Preconditions.checkState(n.getType()==Token.FUNCTION);
Preconditions.checkState(first.getFirstChild().getString().isEmpty());

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898390804
GPR[SPVAP]-1659898390804
GPR[EPVAP]-1659898392057
GPR[EPVS]-1659898392057
========
case Token.ASSIGN_DIV :
tryConvertToNumber(n.getLastChild());
break;

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898392058
GPR[SPVAP]-1659898392058
GPR[EPVAP]-1659898393317
GPR[EPVS]-1659898393317
========
case Token.BITNOT :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898393318
GPR[SPVAP]-1659898393318
GPR[EPVAP]-1659898394569
GPR[EPVS]-1659898394569
========
case Token.STRING :
tryConvertToNumber(n.getLastChild());
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898394571
GPR[SPVAP]-1659898394571
GPR[EPVAP]-1659898395856
GPR[EPVS]-1659898395856
========
case Token.NAME :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898395858
GPR[SPVAP]-1659898395858
GPR[EPVAP]-1659898397112
GPR[EPVS]-1659898397112
========
case Token.FOR :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898397113
GPR[SPVAP]-1659898397113
GPR[EPVAP]-1659898398380
GPR[EPVS]-1659898398380
========
case Token.STRING :
Preconditions.checkState(!n.getString().isEmpty());
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898398382
GPR[SPVAP]-1659898398382
GPR[EPVAP]-1659898401156
GPR[SPVATF]-1659898401156
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898403493
GPR[EPVS]-1659898403493
========
case Token.NAME :

case Token.STRING :
Preconditions.checkState(!n.getString().isEmpty());
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898403495
GPR[SPVAP]-1659898403495
GPR[EPVAP]-1659898404743
GPR[EPVS]-1659898404743
========
case Token.IF :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898404745
GPR[SPVAP]-1659898404745
GPR[EPVAP]-1659898406029
GPR[EPVS]-1659898406029
========
case Token.WHILE :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898406031
GPR[SPVAP]-1659898406031
GPR[EPVAP]-1659898407278
GPR[EPVS]-1659898407278
========
case Token.SWITCH :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898407279
GPR[SPVAP]-1659898407279
GPR[EPVAP]-1659898408543
GPR[EPVS]-1659898408543
========
case Token.NEG :
tryConvertOperandsToNumber(n);
break;

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898408545
GPR[SPVAP]-1659898408545
GPR[EPVAP]-1659898409798
GPR[EPVS]-1659898409798
========
case Token.CASE :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898409800
GPR[SPVAP]-1659898409800
GPR[EPVAP]-1659898411059
GPR[EPVS]-1659898411059
========
case Token.BLOCK :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898411060
GPR[SPVAP]-1659898411060
GPR[EPVAP]-1659898412305
GPR[EPVS]-1659898412305
========
case Token.EXPR_RESULT :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898412306
GPR[SPVAP]-1659898412306
GPR[EPVAP]-1659898413565
GPR[EPVS]-1659898413565
========
case Token.TRY :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898413566
GPR[SPVAP]-1659898413566
GPR[EPVAP]-1659898414803
GPR[EPVS]-1659898414803
========
case Token.BREAK :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898414804
GPR[SPVAP]-1659898414804
GPR[EPVAP]-1659898416050
GPR[EPVS]-1659898416050
========
case Token.RETURN :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898416052
GPR[SPVAP]-1659898416052
GPR[EPVAP]-1659898417310
GPR[EPVS]-1659898417310
========
case Token.LABEL :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898417312
GPR[SPVAP]-1659898417312
GPR[EPVAP]-1659898418560
GPR[EPVS]-1659898418560
========
case Token.WITH :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898418562
GPR[SPVAP]-1659898418562
GPR[EPVAP]-1659898419822
GPR[EPVS]-1659898419822
========
case Token.VAR :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898419823
GPR[SPVAP]-1659898419823
GPR[EPVAP]-1659898421073
GPR[EPVS]-1659898421073
========
case Token.DEBUGGER :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898421074
GPR[SPVAP]-1659898421074
GPR[EPVAP]-1659898422313
GPR[EPVS]-1659898422313
========
case Token.STRING :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898422315
GPR[SPVAP]-1659898422315
GPR[EPVAP]-1659898423558
GPR[EPVS]-1659898423558
========
case Token.GETPROP :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898423560
GPR[SPVAP]-1659898423560
GPR[EPVAP]-1659898424808
GPR[EPVS]-1659898424808
========
case Token.OBJECTLIT :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898424810
GPR[SPVAP]-1659898424810
GPR[EPVAP]-1659898426064
GPR[EPVS]-1659898426064
========
case Token.CALL :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898426066
GPR[SPVAP]-1659898426066
GPR[EPVAP]-1659898427314
GPR[EPVS]-1659898427314
========
case Token.ASSIGN_LSH :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898427316
GPR[SPVAP]-1659898427316
GPR[EPVAP]-1659898430105
GPR[SPVATF]-1659898430105
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898432422
GPR[EPVS]-1659898432422
========
case Token.ASSIGN_LSH :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
setJSType(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898432424
GPR[SPVAP]-1659898432424
GPR[EPVAP]-1659898433683
GPR[EPVS]-1659898433683
========
case Token.STRING :
child=n.getFirstChild().getNext();
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898433685
GPR[SPVAP]-1659898433685
GPR[EPVAP]-1659898434937
GPR[EPVS]-1659898434937
========
case Token.STRING :
type=getValueType(n.getFirstChild());
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898434938
GPR[SPVAP]-1659898434938
GPR[EPVAP]-1659898436189
GPR[EPVS]-1659898436189
========
case Token.GET :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898436191
GPR[SPVAP]-1659898436191
GPR[EPVAP]-1659898437448
GPR[EPVS]-1659898437448
========
case Token.TRUE :
validateChildless(n);
return ;

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898437449
GPR[SPVAP]-1659898437449
GPR[EPVAP]-1659898438702
GPR[EPVS]-1659898438702
========
case Token.BITNOT :
validateUnaryOp(n);
return ;

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898438703
GPR[SPVAP]-1659898438703
GPR[EPVAP]-1659898439972
GPR[EPVS]-1659898439972
========
case Token.COMMA :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898439974
GPR[SPVAP]-1659898439974
GPR[EPVAP]-1659898441233
GPR[EPVS]-1659898441233
========
case Token.DIV :
validateBinaryOp(n);
return ;

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898441234
GPR[SPVAP]-1659898441234
GPR[EPVAP]-1659898442474
GPR[EPVS]-1659898442474
========
case Token.ASSIGN :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898442476
GPR[SPVAP]-1659898442476
GPR[EPVAP]-1659898445135
GPR[SPVATF]-1659898445135
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898447499
GPR[EPVS]-1659898447499
========
case Token.OR :
return n!=next.getFirstChild();

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898447500
GPR[SPVAP]-1659898447500
GPR[EPVAP]-1659898448759
GPR[EPVS]-1659898448759
========
case Token.CATCH :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898448760
GPR[SPVAP]-1659898448760
GPR[EPVAP]-1659898450010
GPR[EPVS]-1659898450010
========
case Token.AND :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898450012
GPR[SPVAP]-1659898450012
GPR[EPVAP]-1659898452672
GPR[SPVATF]-1659898452672
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898455008
GPR[EPVS]-1659898455008
========
case Token.QMARK :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898455010
GPR[SPVAP]-1659898455010
GPR[EPVAP]-1659898457673
GPR[SPVATF]-1659898457673
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898460017
GPR[EPVS]-1659898460017
========
case Token.ELLIPSIS :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898460018
GPR[SPVAP]-1659898460019
GPR[EPVAP]-1659898462685
GPR[SPVATF]-1659898462685
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898464999
GPR[EPVS]-1659898464999
========
default :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898465001
GPR[SPVAP]-1659898465001
GPR[EPVAP]-1659898466266
GPR[EPVS]-1659898466266
========
case Token.STRING :
sourceName=(String)n.getProp(Node.SOURCENAME_PROP);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898466268
GPR[SPVAP]-1659898466268
GPR[EPVAP]-1659898467521
GPR[EPVS]-1659898467521
========
case Token.SCRIPT :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898467522
GPR[SPVAP]-1659898467522
GPR[EPVAP]-1659898468784
GPR[EPVS]-1659898468784
========
case Token.CALL :
Node n.getFirstChild()=n.getFirstChild();

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898468786
GPR[SPVAP]-1659898468786
GPR[EPVAP]-1659898469872
GPR[EPVS]-1659898469872
========
case Token.OR :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898469873
GPR[SPVAP]-1659898469873
GPR[EPVAP]-1659898472529
GPR[SPVATF]-1659898472529
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898474844
GPR[EPVS]-1659898474844
========
case Token.REGEXP :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898474846
GPR[SPVAP]-1659898474846
GPR[EPVAP]-1659898476098
GPR[EPVS]-1659898476098
========
case Token.IF :
return NodeUtil.getConditionExpression(next)!=n;

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898476099
GPR[SPVAP]-1659898476099
GPR[EPVAP]-1659898477344
GPR[EPVS]-1659898477344
========
case Token.CASE :
return next.getFirstChild()!=n;

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898477346
GPR[SPVAP]-1659898477346
GPR[EPVAP]-1659898478596
GPR[EPVS]-1659898478596
========
case Token.DEFAULT :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898478598
GPR[SPVAP]-1659898478598
GPR[EPVAP]-1659898479852
GPR[EPVS]-1659898479852
========
case Token.WITH :
return n!=next.getFirstChild();

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898479854
GPR[SPVAP]-1659898479854
GPR[EPVAP]-1659898481106
GPR[EPVS]-1659898481106
========
case Token.NEW :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898481108
GPR[SPVAP]-1659898481108
GPR[EPVAP]-1659898482347
GPR[EPVS]-1659898482347
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
Preconditions.checkArgument(next.getType()==Token.FOR,"Unsupported assignment in replaceWithRhs. parent: "+Token.name(parent.getType()));
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898482348
GPR[SPVAP]-1659898482348
GPR[EPVAP]-1659898483579
GPR[EPVS]-1659898483579
========
case Token.FOR :
n=n.getLastChild();
continue;

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898483581
GPR[SPVAP]-1659898483581
GPR[EPVAP]-1659898484833
GPR[EPVS]-1659898484833
========
validateMaximumChildCount(n,1);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898484834
GPR[SPVAP]-1659898484834
GPR[EPVAP]-1659898486087
GPR[EPVS]-1659898486087
========
if(n.hasChildren()){
validateExpression(n.getFirstChild());
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898486088
GPR[SPVAP]-1659898486088
GPR[EPVAP]-1659898487337
GPR[EPVS]-1659898487337
========
if(n.hasChildren()){
validateLabelName(n.getFirstChild());
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898487338
GPR[SPVAP]-1659898487338
GPR[EPVAP]-1659898488583
GPR[EPVS]-1659898488583
========
validateMaximumChildCount(n,1);
if(n.hasChildren()){
validateLabelName(n.getFirstChild());
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898488584
GPR[SPVAP]-1659898488584
GPR[EPVAP]-1659898489844
GPR[EPVS]-1659898489844
========
case Token.STRING :
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898489847
GPR[SPVAP]-1659898489847
GPR[EPVAP]-1659898492521
GPR[SPVATF]-1659898492521
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898494837
GPR[EPVS]-1659898494837
========
case Token.STRING :
if(childCount!=Token.STRING){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898494839
GPR[SPVAP]-1659898494839
GPR[EPVAP]-1659898497513
GPR[SPVATF]-1659898497513
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898499888
GPR[EPVS]-1659898499888
========
case Token.STRING :
if(childCount==Token.STRING){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898499890
GPR[SPVAP]-1659898499890
GPR[EPVAP]-1659898502559
GPR[SPVATF]-1659898502559
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898504871
GPR[EPVS]-1659898504871
========
case Token.OBJECTLIT :

case Token.STRING :
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898504872
GPR[SPVAP]-1659898504872
GPR[EPVAP]-1659898506127
GPR[EPVS]-1659898506127
========
case Token.OBJECTLIT :

case Token.STRING :
if(childCount!=Token.STRING){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898506129
GPR[SPVAP]-1659898506129
GPR[EPVAP]-1659898507388
GPR[EPVS]-1659898507388
========
case Token.OBJECTLIT :

case Token.STRING :
if(childCount==Token.STRING){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898507389
GPR[SPVAP]-1659898507389
GPR[EPVAP]-1659898508629
GPR[EPVS]-1659898508629
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
typeable=false;
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898508630
GPR[SPVAP]-1659898508630
GPR[EPVAP]-1659898509886
GPR[EPVS]-1659898509886
========
case Token.ASSIGN_LSH :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
typeable=false;
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898509888
GPR[SPVAP]-1659898509888
GPR[EPVAP]-1659898511160
GPR[EPVS]-1659898511160
========
Preconditions.checkState(n.getParent()!=null);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898511162
GPR[SPVAP]-1659898511162
GPR[EPVAP]-1659898512403
GPR[EPVS]-1659898512403
========
case Token.STRING :
if(childCount!=Token.GETPROP){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898512405
GPR[SPVAP]-1659898512405
GPR[EPVAP]-1659898515047
GPR[SPVATF]-1659898515047
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898517393
GPR[EPVS]-1659898517393
========
case Token.STRING :
if(childCount==Token.GETPROP){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898517394
GPR[SPVAP]-1659898517394
GPR[EPVAP]-1659898520080
GPR[SPVATF]-1659898520080
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898522421
GPR[EPVS]-1659898522421
========
case Token.SWITCH :

case Token.STRING :
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898522423
GPR[SPVAP]-1659898522423
GPR[EPVAP]-1659898523679
GPR[EPVS]-1659898523679
========
case Token.SWITCH :

case Token.STRING :
if(childCount!=Token.GETPROP){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898523680
GPR[SPVAP]-1659898523680
GPR[EPVAP]-1659898524923
GPR[EPVS]-1659898524923
========
case Token.SWITCH :

case Token.STRING :
if(childCount==Token.GETPROP){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898524924
GPR[SPVAP]-1659898524924
GPR[EPVAP]-1659898526169
GPR[EPVS]-1659898526169
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
if(getPureBooleanValue(n.getFirstChild())!=TernaryValue.UNKNOWN){
return getPureBooleanValue(n.getFirstChild()).toBoolean(true)?"false":"true";
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898526171
GPR[SPVAP]-1659898526171
GPR[EPVAP]-1659898527428
GPR[EPVS]-1659898527428
========
case Token.GETELEM :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898527430
GPR[SPVAP]-1659898527430
GPR[EPVAP]-1659898528667
GPR[EPVS]-1659898528667
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
info=next.getJSDocInfo();
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898528669
GPR[SPVAP]-1659898528669
GPR[EPVAP]-1659898529968
GPR[EPVS]-1659898529968
========
case Token.STRING :
valueNodeType=n.getNext().getType();
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898529970
GPR[SPVAP]-1659898529970
GPR[EPVAP]-1659898531215
GPR[EPVS]-1659898531215
========
case Token.STRING :
info=next.getJSDocInfo();
valueNodeType=n.getNext().getType();

if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898531216
GPR[SPVAP]-1659898531216
GPR[EPVAP]-1659898532471
GPR[EPVS]-1659898532471
========
case Token.STRING :
reportCodeChange();
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898532474
GPR[SPVAP]-1659898532474
GPR[EPVAP]-1659898533729
GPR[EPVS]-1659898533729
========
case 1 :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898533730
GPR[SPVAP]-1659898533730
GPR[EPVAP]-1659898536373
GPR[SPVATF]-1659898536373
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898538728
GPR[EPVS]-1659898538728
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
if("undefined".equals(name)||"Infinity".equals(name)){
return name;
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898538730
GPR[SPVAP]-1659898538730
GPR[EPVAP]-1659898539976
GPR[EPVS]-1659898539976
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
typeable=!NodeUtil.isExpressionNode(next);
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898539978
GPR[SPVAP]-1659898539978
GPR[EPVAP]-1659898541228
GPR[EPVS]-1659898541228
========
case Token.OR :
Node trySimpilifyUnusedResult(n.getLastChild())=trySimpilifyUnusedResult(n.getLastChild());
if(conditionalResultNode==null){
Preconditions.checkState(n.hasOneChild());
next=trySimpilifyUnusedResult(n.getFirstChild());
}
break;

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898541230
GPR[SPVAP]-1659898541230
GPR[EPVAP]-1659898542316
GPR[EPVS]-1659898542316
========
case Token.LP :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898542318
GPR[SPVAP]-1659898542318
GPR[EPVAP]-1659898543603
GPR[EPVS]-1659898543603
========
case Token.STRING :
if(childCount!=Token.TRY){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898543605
GPR[SPVAP]-1659898543605
GPR[EPVAP]-1659898546326
GPR[SPVATF]-1659898546326
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898548645
GPR[EPVS]-1659898548645
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(NodeUtil.isTryCatchNodeContainer(n)){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898548647
GPR[SPVAP]-1659898548647
GPR[EPVAP]-1659898551293
GPR[SPVATF]-1659898551293
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898553603
GPR[EPVS]-1659898553603
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
NodeUtil.maybeAddFinally(n.getParent());
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898553605
GPR[SPVAP]-1659898553605
GPR[EPVAP]-1659898556288
GPR[SPVATF]-1659898556288
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898558581
GPR[EPVS]-1659898558581
========
case Token.STRING :
if(childCount==Token.TRY){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898558583
GPR[SPVAP]-1659898558583
GPR[EPVAP]-1659898561224
GPR[SPVATF]-1659898561224
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898563529
GPR[EPVS]-1659898563529
========
case Token.STRING :
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(NodeUtil.isTryCatchNodeContainer(n)){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898563530
GPR[SPVAP]-1659898563530
GPR[EPVAP]-1659898566253
GPR[SPVATF]-1659898566253
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898568581
GPR[EPVS]-1659898568581
========
case Token.STRING :
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
NodeUtil.maybeAddFinally(n.getParent());
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898568582
GPR[SPVAP]-1659898568582
GPR[EPVAP]-1659898571261
GPR[SPVATF]-1659898571261
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898573561
GPR[EPVS]-1659898573561
========
case Token.STRING :
if(childCount!=Token.TRY){
if(NodeUtil.isTryCatchNodeContainer(n)){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898573563
GPR[SPVAP]-1659898573563
GPR[EPVAP]-1659898576211
GPR[SPVATF]-1659898576211
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898578522
GPR[EPVS]-1659898578522
========
case Token.STRING :
if(childCount!=Token.TRY){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
NodeUtil.maybeAddFinally(n.getParent());
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898578524
GPR[SPVAP]-1659898578524
GPR[EPVAP]-1659898581197
GPR[SPVATF]-1659898581197
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898583508
GPR[EPVS]-1659898583508
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(NodeUtil.isTryCatchNodeContainer(n)){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
NodeUtil.maybeAddFinally(n.getParent());
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898583510
GPR[SPVAP]-1659898583510
GPR[EPVAP]-1659898586200
GPR[SPVATF]-1659898586200
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898588499
GPR[EPVS]-1659898588499
========
case Token.STRING :
if(childCount==Token.TRY){
if(NodeUtil.isTryCatchNodeContainer(n)){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898588500
GPR[SPVAP]-1659898588500
GPR[EPVAP]-1659898591153
GPR[SPVATF]-1659898591153
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898593502
GPR[EPVS]-1659898593502
========
case Token.STRING :
if(childCount==Token.TRY){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
NodeUtil.maybeAddFinally(n.getParent());
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898593504
GPR[SPVAP]-1659898593504
GPR[EPVAP]-1659898596166
GPR[SPVATF]-1659898596166
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898598513
GPR[EPVS]-1659898598513
========
case Token.STRING :
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(NodeUtil.isTryCatchNodeContainer(n)){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
NodeUtil.maybeAddFinally(n.getParent());
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898598514
GPR[SPVAP]-1659898598514
GPR[EPVAP]-1659898601224
GPR[SPVATF]-1659898601224
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898603534
GPR[EPVS]-1659898603534
========
case Token.STRING :
if(childCount!=Token.TRY){
if(NodeUtil.isTryCatchNodeContainer(n)){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
NodeUtil.maybeAddFinally(n.getParent());
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898603536
GPR[SPVAP]-1659898603536
GPR[EPVAP]-1659898606187
GPR[SPVATF]-1659898606187
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898608493
GPR[EPVS]-1659898608493
========
case Token.STRING :
if(childCount==Token.TRY){
if(NodeUtil.isTryCatchNodeContainer(n)){
return ;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
NodeUtil.maybeAddFinally(n.getParent());
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898608494
GPR[SPVAP]-1659898608494
GPR[EPVAP]-1659898611159
GPR[SPVATF]-1659898611159
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898613454
GPR[EPVS]-1659898613454
========
case Token.STRING :
annotateDispatchers(n,next);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898613455
GPR[SPVAP]-1659898613455
GPR[EPVAP]-1659898614717
GPR[EPVS]-1659898614717
========
case Token.STRING :
if(!hasElse&&n.getFirstChild().getType()==Token.GETPROP){
return getImplicitActionsFromProp(n.getFirstChild().getFirstChild().getJSType(),lhs.getLastChild().getString(),n.getLastChild());
}
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898614718
GPR[SPVAP]-1659898614718
GPR[EPVAP]-1659898615955
GPR[EPVS]-1659898615955
========
case Token.STRING :
if(childCount!=Token.EMPTY){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898615957
GPR[SPVAP]-1659898615957
GPR[EPVAP]-1659898618640
GPR[SPVATF]-1659898618640
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898620967
GPR[EPVS]-1659898620967
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getType()!=Token.EMPTY){
return false;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898620968
GPR[SPVAP]-1659898620968
GPR[EPVAP]-1659898622236
GPR[EPVS]-1659898622236
========
case Token.STRING :
n=function(FunctionNode.FUNCTION_STATEMENT);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898622237
GPR[SPVAP]-1659898622237
GPR[EPVAP]-1659898623467
GPR[EPVS]-1659898623467
========
case Token.STRING :
n=statement();
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898623469
GPR[SPVAP]-1659898623469
GPR[EPVAP]-1659898624712
GPR[EPVS]-1659898624712
========
case Token.STRING :
Preconditions.checkState(n.getChildCount()==2);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898624714
GPR[SPVAP]-1659898624714
GPR[EPVAP]-1659898627379
GPR[SPVATF]-1659898627379
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898629675
GPR[EPVS]-1659898629675
========
case Token.STRING :
Preconditions.checkState(n.getFirstChild().getType()==Token.NAME);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898629676
GPR[SPVAP]-1659898629676
GPR[EPVAP]-1659898632397
GPR[SPVATF]-1659898632397
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898634710
GPR[EPVS]-1659898634710
========
case Token.STRING :
Preconditions.checkState(n.getChildCount()==2);
Preconditions.checkState(n.getFirstChild().getType()==Token.NAME);

if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898634711
GPR[SPVAP]-1659898634711
GPR[EPVAP]-1659898637377
GPR[SPVATF]-1659898637377
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898639664
GPR[EPVS]-1659898639664
========
case Token.STRING :
if(NAME!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898639666
GPR[SPVAP]-1659898639666
GPR[EPVAP]-1659898640914
GPR[EPVS]-1659898640914
========
case Token.STRING :
Preconditions.checkState(n.hasOneChild());
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898640915
GPR[SPVAP]-1659898640915
GPR[EPVAP]-1659898643588
GPR[SPVATF]-1659898643588
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898645903
GPR[EPVS]-1659898645903
========
new Node(Token.NOT,Node.newNumber(n.getType()==Token.TRUE?0:1)).copyInformationFromForTree(n);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898645905
GPR[SPVAP]-1659898645905
GPR[EPVAP]-1659898647170
GPR[EPVS]-1659898647170
========
reportCodeChange();
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898647172
GPR[SPVAP]-1659898647172
GPR[EPVAP]-1659898648423
GPR[EPVS]-1659898648423
========
case Token.STRING :
typeable=!(n.getType()==Token.ASSIGN&&n.getFirstChild()==n);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898648425
GPR[SPVAP]-1659898648425
GPR[EPVAP]-1659898649679
GPR[EPVS]-1659898649679
========
validateChildCount(n,1);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898649680
GPR[SPVAP]-1659898649680
GPR[EPVAP]-1659898650944
GPR[EPVS]-1659898650944
========
validateObjectLiteralKeyName(n);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898650945
GPR[SPVAP]-1659898650945
GPR[EPVAP]-1659898652192
GPR[EPVS]-1659898652192
========
validateFunctionExpression(n.getFirstChild());
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898652193
GPR[SPVAP]-1659898652193
GPR[EPVAP]-1659898653437
GPR[EPVS]-1659898653437
========
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898653439
GPR[SPVAP]-1659898653439
GPR[EPVAP]-1659898654693
GPR[EPVS]-1659898654693
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898654694
GPR[SPVAP]-1659898654694
GPR[EPVAP]-1659898655958
GPR[EPVS]-1659898655958
========
validateChildCount(n,1);
validateFunctionExpression(n.getFirstChild());
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898655960
GPR[SPVAP]-1659898655960
GPR[EPVAP]-1659898657220
GPR[EPVS]-1659898657220
========
validateChildCount(n,1);
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898657222
GPR[SPVAP]-1659898657222
GPR[EPVAP]-1659898658465
GPR[EPVS]-1659898658465
========
validateObjectLiteralKeyName(n);
validateFunctionExpression(n.getFirstChild());
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898658467
GPR[SPVAP]-1659898658467
GPR[EPVAP]-1659898659730
GPR[EPVS]-1659898659730
========
validateObjectLiteralKeyName(n);
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898659731
GPR[SPVAP]-1659898659731
GPR[EPVAP]-1659898660996
GPR[EPVS]-1659898660996
========
validateFunctionExpression(n.getFirstChild());
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898660998
GPR[SPVAP]-1659898660998
GPR[EPVAP]-1659898662239
GPR[EPVS]-1659898662239
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
validateFunctionExpression(n.getFirstChild());
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898662240
GPR[SPVAP]-1659898662240
GPR[EPVAP]-1659898663492
GPR[EPVS]-1659898663492
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898663493
GPR[SPVAP]-1659898663493
GPR[EPVAP]-1659898664774
GPR[EPVS]-1659898664774
========
validateChildCount(n,1);
validateFunctionExpression(n.getFirstChild());
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898664776
GPR[SPVAP]-1659898664776
GPR[EPVAP]-1659898666020
GPR[EPVS]-1659898666020
========
validateObjectLiteralKeyName(n);
validateFunctionExpression(n.getFirstChild());
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898666021
GPR[SPVAP]-1659898666021
GPR[EPVAP]-1659898667264
GPR[EPVS]-1659898667264
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
validateFunctionExpression(n.getFirstChild());
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898667265
GPR[SPVAP]-1659898667265
GPR[EPVAP]-1659898668507
GPR[EPVS]-1659898668507
========
case Token.STRING :
info=(JSDocInfo)n.getProp(Node.JSDOC_INFO_PROP);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898668509
GPR[SPVAP]-1659898668509
GPR[EPVAP]-1659898669752
GPR[EPVS]-1659898669752
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
result=n.getString().equals(next.getString());
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898669754
GPR[SPVAP]-1659898669754
GPR[EPVAP]-1659898671021
GPR[EPVS]-1659898671021
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
result=!n.getString().equals(next.getString());
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898671022
GPR[SPVAP]-1659898671022
GPR[EPVAP]-1659898672284
GPR[EPVS]-1659898672284
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
if(n.getFirstChild().getFirstChild()==null){
return ;
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898672286
GPR[SPVAP]-1659898672286
GPR[EPVAP]-1659898675033
GPR[SPVATF]-1659898675033
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898677356
GPR[EPVS]-1659898677356
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
isSet=true;
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898677358
GPR[SPVAP]-1659898677358
GPR[EPVAP]-1659898678608
GPR[EPVS]-1659898678608
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
type=n.getFirstChild()==null?Name.Type.OTHER:getValueType(n.getFirstChild());
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898678609
GPR[SPVAP]-1659898678609
GPR[EPVAP]-1659898679859
GPR[EPVS]-1659898679859
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
isSet=true;
type=n.getFirstChild()==null?Name.Type.OTHER:getValueType(n.getFirstChild());

add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898679860
GPR[SPVAP]-1659898679860
GPR[EPVAP]-1659898681114
GPR[EPVS]-1659898681114
========
if(next.hasOneChild()){
NodeUtil.redeclareVarsInsideBranch(catchBlock);
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898681115
GPR[SPVAP]-1659898681115
GPR[EPVAP]-1659898682367
GPR[EPVS]-1659898682367
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898682369
GPR[SPVAP]-1659898682369
GPR[EPVAP]-1659898683629
GPR[EPVS]-1659898683629
========
if(NodeUtil.getPureBooleanValue(NodeUtil.getConditionExpression(n))!=TernaryValue.FALSE){
return n;
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898683630
GPR[SPVAP]-1659898683630
GPR[EPVAP]-1659898684872
GPR[EPVS]-1659898684872
========
NodeUtil.redeclareVarsInsideBranch(n);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898684874
GPR[SPVAP]-1659898684874
GPR[EPVAP]-1659898686138
GPR[EPVS]-1659898686138
========
NodeUtil.removeChild(n.getParent(),n);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898686139
GPR[SPVAP]-1659898686139
GPR[EPVAP]-1659898687400
GPR[EPVS]-1659898687400
========
case Token.STRING :
maybeRecordExport(n);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898687403
GPR[SPVAP]-1659898687403
GPR[EPVAP]-1659898688627
GPR[EPVS]-1659898688627
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
new Node(Token.BLOCK).copyInformationFrom(last);
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898688629
GPR[SPVAP]-1659898688629
GPR[EPVAP]-1659898691288
GPR[SPVATF]-1659898691288
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898693603
GPR[EPVS]-1659898693603
========
case Token.STRING :
new Node(Token.BLOCK).addChildToFront(last);
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898693604
GPR[SPVAP]-1659898693604
GPR[EPVAP]-1659898696290
GPR[SPVATF]-1659898696290
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898698580
GPR[EPVS]-1659898698580
========
case Token.STRING :
reportCodeChange("LABEL normalization");
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898698581
GPR[SPVAP]-1659898698581
GPR[EPVAP]-1659898699843
GPR[EPVS]-1659898699843
========
case Token.STRING :
new Node(Token.BLOCK).copyInformationFrom(last);
new Node(Token.BLOCK).addChildToFront(last);
reportCodeChange("LABEL normalization");

if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898699844
GPR[SPVAP]-1659898699844
GPR[EPVAP]-1659898701093
GPR[EPVS]-1659898701093
========
case Token.AND :
VariableLiveness isVariableReadBeforeKill(n.getFirstChild(),opstr)=isVariableReadBeforeKill(n.getFirstChild(),opstr);
VariableLiveness isVariableReadBeforeKill(n.getLastChild(),opstr)=isVariableReadBeforeKill(n.getLastChild(),variable);
if(v1!=VariableLiveness.MAYBE_LIVE){
return v1;
}else if(v2==VariableLiveness.READ){
return VariableLiveness.READ;
}else {
return VariableLiveness.MAYBE_LIVE;
}

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898701094
GPR[SPVAP]-1659898701094
GPR[EPVAP]-1659898702187
GPR[EPVS]-1659898702187
========
case Token.STRING :
if(STRING!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898702188
GPR[SPVAP]-1659898702188
GPR[EPVAP]-1659898703436
GPR[EPVS]-1659898703436
========
case Token.NOT :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898703438
GPR[SPVAP]-1659898703438
GPR[EPVAP]-1659898704675
GPR[EPVS]-1659898704675
========
case Token.EQ :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898704677
GPR[SPVAP]-1659898704677
GPR[EPVAP]-1659898707366
GPR[SPVATF]-1659898707366
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898709686
GPR[EPVS]-1659898709686
========
validateBlock(n.getFirstChild());
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898709687
GPR[SPVAP]-1659898709687
GPR[EPVAP]-1659898710968
GPR[EPVS]-1659898710969
========
validateNodeType(Token.BLOCK,n.getChildAtIndex(1));
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898710970
GPR[SPVAP]-1659898710970
GPR[EPVAP]-1659898712205
GPR[EPVS]-1659898712205
========
validateMaximumChildCount(n.getChildAtIndex(1),1);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898712207
GPR[SPVAP]-1659898712207
GPR[EPVAP]-1659898713449
GPR[EPVS]-1659898713449
========
if(n.getChildAtIndex(1).hasChildren()){
validateCatch(catches.getFirstChild());
hasElse=true;
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898713450
GPR[SPVAP]-1659898713450
GPR[EPVAP]-1659898714695
GPR[EPVS]-1659898714695
========
newParameter(n.getJSType()).setOptionalArg(n.isOptionalArg());
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898714697
GPR[SPVAP]-1659898714697
GPR[EPVAP]-1659898715951
GPR[EPVS]-1659898715951
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
setString(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898715954
GPR[SPVAP]-1659898715954
GPR[EPVAP]-1659898717202
GPR[EPVS]-1659898717202
========
if(NodeUtil.isVar(next)){
removeVarDeclaration(n);
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898717203
GPR[SPVAP]-1659898717203
GPR[EPVAP]-1659898718457
GPR[EPVS]-1659898718457
========
case Token.STRING :
if(type++==childCount){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898718459
GPR[SPVAP]-1659898718459
GPR[EPVAP]-1659898721128
GPR[SPVATF]-1659898721128
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898723457
GPR[EPVS]-1659898723457
========
case Token.STRING :
if(type++!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898723458
GPR[SPVAP]-1659898723458
GPR[EPVAP]-1659898726188
GPR[SPVATF]-1659898726188
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898728513
GPR[EPVS]-1659898728513
========
case Token.STRING :
if(count!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898728515
GPR[SPVAP]-1659898728515
GPR[EPVAP]-1659898729784
GPR[EPVS]-1659898729784
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(type++==childCount){
return n.getString();
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898729786
GPR[SPVAP]-1659898729786
GPR[EPVAP]-1659898731043
GPR[EPVS]-1659898731043
========
case Token.STRING :
if(type++==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898731045
GPR[SPVAP]-1659898731045
GPR[EPVAP]-1659898733732
GPR[SPVATF]-1659898733732
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898736084
GPR[EPVS]-1659898736084
========
case Token.STRING :
if(mayHaveSideEffects(n)){
return n;
}
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898736086
GPR[SPVAP]-1659898736086
GPR[EPVAP]-1659898737338
GPR[EPVS]-1659898737338
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
knownLength=n.getChildCount();
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898737340
GPR[SPVAP]-1659898737340
GPR[EPVAP]-1659898738601
GPR[EPVS]-1659898738601
========
case Token.STRING :
if(mayHaveSideEffects(n)){
return n;
}
knownLength=n.getChildCount();

if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898738603
GPR[SPVAP]-1659898738603
GPR[EPVAP]-1659898739845
GPR[EPVS]-1659898739845
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
knownLength=n.getString().length();
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898739846
GPR[SPVAP]-1659898739846
GPR[EPVAP]-1659898741096
GPR[EPVS]-1659898741096
========
if(next==null){
return ;
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898741098
GPR[SPVAP]-1659898741098
GPR[EPVAP]-1659898742345
GPR[EPVS]-1659898742345
========
if(next.getType()==Token.GET){
next=new Node(Token.CALL,replacement);
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898742346
GPR[SPVAP]-1659898742346
GPR[EPVAP]-1659898743587
GPR[EPVS]-1659898743587
========
if(next.getType()==Token.EMPTY){
elem=NodeUtil.newUndefinedNode(elem);
}else {
next.removeChild(elem);
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898743589
GPR[SPVAP]-1659898743589
GPR[EPVAP]-1659898744831
GPR[EPVS]-1659898744831
========
if(n.getType()!=Token.CALL){
return ;
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898744834
GPR[SPVAP]-1659898744834
GPR[EPVAP]-1659898746103
GPR[EPVS]-1659898746103
========
if(n.getFirstChild().getType()!=Token.GETPROP){
return ;
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898746104
GPR[SPVAP]-1659898746104
GPR[EPVAP]-1659898747356
GPR[EPVS]-1659898747356
========
if(n.getFirstChild().getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898747358
GPR[SPVAP]-1659898747358
GPR[EPVAP]-1659898748608
GPR[EPVS]-1659898748608
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
if(n.getFirstChild().getNext().getType()==Token.STRING&&n.getParent().getParent().getType()==Token.ASSIGN){
Node n.getParent().getParent().getFirstChild().getNext()=n.getParent().getParent().getFirstChild().getNext();
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898748610
GPR[SPVAP]-1659898748610
GPR[EPVAP]-1659898749700
GPR[EPVS]-1659898749700
========
if(n.getQualifiedName()==null||!"goog.now".equals(googNowQName)||n.getNext()!=null){
return ;
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898749702
GPR[SPVAP]-1659898749702
GPR[EPVAP]-1659898750958
GPR[EPVS]-1659898750958
========
case Token.STRING :
if(ASSIGN!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898750959
GPR[SPVAP]-1659898750959
GPR[EPVAP]-1659898752206
GPR[EPVS]-1659898752206
========
case Token.CALL :
{
Node n=new Node(childCount,next,childCount,childCount);
n.putIntProp(Node.INCRDECR_PROP,hasElse?1:0);
return n;
}

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898752209
GPR[SPVAP]-1659898752209
GPR[EPVAP]-1659898753454
GPR[EPVS]-1659898753454
========
validateMinimumChildCount(n,1);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898753456
GPR[SPVAP]-1659898753456
GPR[EPVAP]-1659898754703
GPR[EPVS]-1659898754704
========
validateExpression(n.getFirstChild());
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898754705
GPR[SPVAP]-1659898754705
GPR[EPVAP]-1659898755978
GPR[EPVS]-1659898755978
========
this.validateMinimumChildCount(n,1);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898755980
GPR[SPVAP]-1659898755980
GPR[EPVAP]-1659898757224
GPR[EPVS]-1659898757224
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
if(n.getJSDocInfo()!=null&&n.getJSDocInfo().isNoTypeCheck()){
if(hasElse){
childCount++;
}else {
childCount--;
}
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898757226
GPR[SPVAP]-1659898757226
GPR[EPVAP]-1659898758497
GPR[EPVS]-1659898758497
========
case Token.WITH :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
typeable=false;
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898758499
GPR[SPVAP]-1659898758499
GPR[EPVAP]-1659898759799
GPR[EPVS]-1659898759799
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(next==computeFollowing(n)){
removeDeadExprStatementSafely(n);
return fallThrough;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898759800
GPR[SPVAP]-1659898759800
GPR[EPVAP]-1659898761063
GPR[EPVS]-1659898761063
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
setLineno(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898761064
GPR[SPVAP]-1659898761064
GPR[EPVAP]-1659898762348
GPR[EPVS]-1659898762349
========
if(!areValidRegexpFlags(n.getString())){
error(INVALID_REGULAR_EXPRESSION_FLAGS,flags);
return n;
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898762350
GPR[SPVAP]-1659898762350
GPR[EPVAP]-1659898763602
GPR[EPVS]-1659898763602
========
if(!areSafeFlagsToFold(n.getString())){
return n;
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898763604
GPR[SPVAP]-1659898763604
GPR[EPVAP]-1659898764842
GPR[EPVS]-1659898764842
========
next=new Node(Token.REGEXP,next,n);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898764844
GPR[SPVAP]-1659898764844
GPR[EPVAP]-1659898766101
GPR[EPVS]-1659898766101
========
if(next.getType()==Token.VAR){
next=new Node(Token.BLOCK,key,new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,key.getFirstChild().cloneNode(),n.cloneTree())),body);
}else {
ifBody=new Node(Token.BLOCK,new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,key,tmp.cloneTree())),body);
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898766102
GPR[SPVAP]-1659898766102
GPR[EPVAP]-1659898767351
GPR[EPVS]-1659898767351
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
if(name==null){
return ;
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898767353
GPR[SPVAP]-1659898767353
GPR[EPVAP]-1659898768610
GPR[EPVS]-1659898768610
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
if(next.getType()!=Token.CALL){
return ;
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898768612
GPR[SPVAP]-1659898768612
GPR[EPVAP]-1659898769856
GPR[EPVS]-1659898769856
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
if(name==null){
return ;
}
if(next.getType()!=Token.CALL){
return ;
}

add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898769858
GPR[SPVAP]-1659898769858
GPR[EPVAP]-1659898771109
GPR[EPVS]-1659898771109
========
case Token.STRING :
if(childCount!=Token.NUMBER){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898771111
GPR[SPVAP]-1659898771111
GPR[EPVAP]-1659898773767
GPR[SPVATF]-1659898773767
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898776083
GPR[EPVS]-1659898776083
========
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
if(n.getDouble()==0||numValue==1){
return n;
}
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898776084
GPR[SPVAP]-1659898776084
GPR[EPVAP]-1659898777336
GPR[EPVS]-1659898777336
========
case Token.POS :

case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898779991
GPR[SPVAP]-1659898779991
GPR[EPVAP]-1659898781249
GPR[EPVS]-1659898781249
========
case Token.STRING :
if(childCount==Token.NUMBER){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898781250
GPR[SPVAP]-1659898781250
GPR[EPVAP]-1659898783915
GPR[SPVATF]-1659898783915
TESTING : com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM:   - com.google.javascript.jscomp.CodePrinterTest::testUnicode
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659898786254
GPR[EPVS]-1659898786254
========
case Token.STRING :
reportCodeChange();
if(childCount==((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898786255
GPR[SPVAP]-1659898786255
GPR[EPVAP]-1659898787505
GPR[EPVS]-1659898787505
========
case Token.STRING :
reportCodeChange();
if(childCount!=Token.NUMBER){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898787506
GPR[SPVAP]-1659898787506
GPR[EPVAP]-1659898788755
GPR[EPVS]-1659898788755
========
case Token.STRING :
reportCodeChange();
if(childCount==Token.NUMBER){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;



========
MM Copying to MM
GPR[SPVS]-1659898788756
GPR[SPVAP]-1659898788756
GPR[EPVAP]-1659898790011
GPR[EPVS]-1659898790011
========
if(!opstr.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fn);
}
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898790017
GPR[SPVAP]-1659898790017
GPR[EPVAP]-1659898791271
GPR[EPVS]-1659898791271
========
Preconditions.checkState(n.getType()==Token.LP);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898791272
GPR[SPVAP]-1659898791272
GPR[EPVAP]-1659898792520
GPR[EPVS]-1659898792520
========
scanVars(body,n);
case Token.STRING :
if(childCount!=((n.getParent()!=null&&n.getParent().getType()==Token.OBJECTLIT)?1:0)){
throw new IllegalStateException("Unexpected String children: "+n.getParent().toStringTree());
}
add(jsString(n.getString(),outputCharsetEncoder));
break;


========
MM Copying to MM
GPR[SPVS]-1659898792521
GPR[SPVAP]-1659898792521
GPR[EPVAP]-1659898793772
GPR[EPVS]-1659898793772
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f468e33cd07, pid=2799524, tid=139941362587392
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 5621 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007f468e33cd07 [0x00007f468e33a800+0x2507]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/closure/closure_73_buggy/hs_err_pid2799524.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Closure/73 results at /experiment_home///results/SimFix/Closure/73/seed_261/
\n\nNode: host-55\n
\n\nDate: Sun 07 Aug 2022 11:59:53 AM PDT\n
Removing checked out dir script/workingdir/SimFix/closure/closure_73_buggy
GPR[SSLE]-1659898793812
GPR[ESLE]-1659898853816
