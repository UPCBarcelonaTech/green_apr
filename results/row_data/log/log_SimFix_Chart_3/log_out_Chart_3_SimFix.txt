Sleep 1m start
GPR[SSLI]-1659868624416
GPR[ESLI]-1659868684419
Running SimFix Chart 3b
Timezone: America/Los_Angeles
Seed 260
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Chart/3/seed_260/
Project lc: chart
New out script/workingdir/SimFix/chart/chart_3_buggy
The file script/workingdir/SimFix/chart/chart_3_buggy does not exist!
script/workingdir/SimFix/chart/chart_3_buggy
Current directory: script/workingdir/SimFix/chart/chart_3_buggy
classpath:  script/workingdir/SimFix/chart/chart_3_buggy/lib/servlet.jar:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/SimFix/chart/chart_3_buggy/build:script/workingdir/SimFix/chart/chart_3_buggy/build-tests
Src java:  /source
Classes Java:  /build
Src Test:  /tests
Classes Test:  /build-tests
GPR[SSLB]-1659868703790
GPR[ESLB]-1659868763794
Calling SimFix: at script/workingdir/SimFix/chart/chart_3_buggy
ant
build
build-tests
ChangeLog
checkstyle
d4j-info
defects4j.build.properties
docfiles
experimental
lib
licence-LGPL.txt
maven-jfreechart-project.xml
NEWS
README.txt
source
swt
tests
content current dir: ant build build-tests ChangeLog checkstyle d4j-info defects4j.build.properties docfiles experimental lib licence-LGPL.txt maven-jfreechart-project.xml NEWS README.txt source swt tests
Node: host-43
Date init: Sun 07 Aug 2022 03:39:27 AM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659868767138
=================================================
Project : chart_3	start : 22/08/07 03:39

GPR[ESUP]-1659868770078
MM Purify? false
GPR[SFL]-1659868770683
GPR[EFL]-1659868770727
GPR[SFP]-1659868770727
TIMEOUT : 18000000
GPR[SSUN]-1659868770737
org.jfree.data.time.TimeSeries,1050
========
if(end<0){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
MM Copying to MM
GPR[SPVS]-1659868772974
GPR[SPVAP]-1659868772974
GPR[EPVAP]-1659868777597
GPR[SPVATF]-1659868777597
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868778704
GPR[EPVS]-1659868778704
========
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
MM Copying to MM
GPR[SPVS]-1659868778706
GPR[SPVAP]-1659868778706
GPR[EPVAP]-1659868780017
GPR[SPVATF]-1659868780017
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868781183
GPR[EPVS]-1659868781183
========
if(start<0){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659868781185
GPR[SPVAP]-1659868781185
GPR[EPVAP]-1659868782508
GPR[SPVATF]-1659868782508
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868783646
GPR[EPVS]-1659868783646
========
if(end<0){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659868783648
GPR[SPVAP]-1659868783648
GPR[EPVAP]-1659868784947
GPR[SPVATF]-1659868784947
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868786097
GPR[EPVS]-1659868786097
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659868786099
GPR[SPVAP]-1659868786099
GPR[EPVAP]-1659868787427
GPR[SPVATF]-1659868787427
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868788560
GPR[EPVS]-1659868788560
========
if(newline<0){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
MM Copying to MM
GPR[SPVS]-1659868788563
GPR[SPVAP]-1659868788563
GPR[EPVAP]-1659868789314
GPR[EPVS]-1659868789314
========
if(index<0){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
MM Copying to MM
GPR[SPVS]-1659868789317
GPR[SPVAP]-1659868789317
GPR[EPVAP]-1659868790090
GPR[EPVS]-1659868790090
GPR[ESUN]-1659868790090
GPR[SSUN]-1659868790090
org.jfree.data.time.TimeSeries,1053
========
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
MM Copying to MM
GPR[SPVS]-1659868792357
GPR[SPVAP]-1659868792357
GPR[EPVAP]-1659868796990
GPR[SPVATF]-1659868796990
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868798107
GPR[EPVS]-1659868798107
========
if(end<=start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659868798109
GPR[SPVAP]-1659868798109
GPR[EPVAP]-1659868799457
GPR[SPVATF]-1659868799457
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868800592
GPR[EPVS]-1659868800592
========
if(end<start){
if(end<=start){
return end;
}
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659868800594
GPR[SPVAP]-1659868800594
GPR[EPVAP]-1659868801337
GPR[EPVS]-1659868801337
========
if(end<newline){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659868801339
GPR[SPVAP]-1659868801339
GPR[EPVAP]-1659868802076
GPR[EPVS]-1659868802076
========
if(end<start){
if(end>start){
return newline;
}
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659868802078
GPR[SPVAP]-1659868802078
GPR[EPVAP]-1659868802829
GPR[EPVS]-1659868802829
========
if(include<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659868802831
GPR[SPVAP]-1659868802831
GPR[EPVAP]-1659868803583
GPR[EPVS]-1659868803583
========
if(end<INCLUDE_FIRST){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659868803584
GPR[SPVAP]-1659868803584
GPR[EPVAP]-1659868804350
GPR[EPVS]-1659868804350
========
if(end<start){
if(start==SerialDate.INCLUDE_FIRST){
return (maximumItemCount>=start&&s<end);
}else if(include==SerialDate.INCLUDE_SECOND){
return (s>start&&s<=end);
}else {
return (s>start&&s<end);
}
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659868804351
GPR[SPVAP]-1659868804351
GPR[EPVAP]-1659868805110
GPR[EPVS]-1659868805111
========
if(newline<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659868805115
GPR[SPVAP]-1659868805115
GPR[EPVAP]-1659868805896
GPR[EPVS]-1659868805896
========
if(fieldIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659868805898
GPR[SPVAP]-1659868805898
GPR[EPVAP]-1659868806673
GPR[EPVS]-1659868806673
========
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659868806676
GPR[SPVAP]-1659868806676
GPR[EPVAP]-1659868808194
GPR[EPVS]-1659868808194
========
if(count<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659868808196
GPR[SPVAP]-1659868808196
GPR[EPVAP]-1659868809012
GPR[EPVS]-1659868809012
GPR[ESUN]-1659868809013
GPR[SSUN]-1659868809013
org.jfree.data.time.TimeSeries,1056
========
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868812348
GPR[SPVAP]-1659868812348
GPR[EPVAP]-1659868816886
GPR[SPVATF]-1659868816887
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868818016
GPR[EPVS]-1659868818016
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868818018
GPR[SPVAP]-1659868818018
GPR[EPVAP]-1659868819364
GPR[SPVATF]-1659868819364
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868820515
GPR[EPVS]-1659868820515
========
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868820517
GPR[SPVAP]-1659868820517
GPR[EPVAP]-1659868821792
GPR[SPVATF]-1659868821792
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868822924
GPR[EPVS]-1659868822924
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868822926
GPR[SPVAP]-1659868822926
GPR[EPVAP]-1659868823687
GPR[EPVS]-1659868823687
========
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868823688
GPR[SPVAP]-1659868823688
GPR[EPVAP]-1659868824462
GPR[EPVS]-1659868824462
========
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868824464
GPR[SPVAP]-1659868824464
GPR[EPVAP]-1659868825243
GPR[EPVS]-1659868825243
========
clone.categoryKeys=(Comparable[])this.categoryKeys.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868825245
GPR[SPVAP]-1659868825245
GPR[EPVAP]-1659868826051
GPR[EPVS]-1659868826051
========
clone.seriesKeys=(Comparable[])this.seriesKeys.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868826053
GPR[SPVAP]-1659868826053
GPR[EPVAP]-1659868826810
GPR[EPVS]-1659868826810
========
clone.startData=clone(this.startData);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868826812
GPR[SPVAP]-1659868826812
GPR[EPVAP]-1659868827581
GPR[EPVS]-1659868827581
========
clone.endData=clone(this.endData);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868827583
GPR[SPVAP]-1659868827583
GPR[EPVAP]-1659868828330
GPR[EPVS]-1659868828330
========
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868828332
GPR[SPVAP]-1659868828332
GPR[EPVAP]-1659868829079
GPR[EPVS]-1659868829079
========
clone.seriesPaintList=(PaintList)this.seriesPaintList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868829082
GPR[SPVAP]-1659868829082
GPR[EPVAP]-1659868829835
GPR[EPVS]-1659868829835
========
clone.seriesOutlinePaintList=(PaintList)this.seriesOutlinePaintList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868829836
GPR[SPVAP]-1659868829836
GPR[EPVAP]-1659868830587
GPR[EPVS]-1659868830587
========
clone.seriesOutlineStrokeList=(StrokeList)this.seriesOutlineStrokeList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868830589
GPR[SPVAP]-1659868830589
GPR[EPVAP]-1659868831337
GPR[EPVS]-1659868831337
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868831339
GPR[SPVAP]-1659868831339
GPR[EPVAP]-1659868832105
GPR[EPVS]-1659868832105
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868832107
GPR[SPVAP]-1659868832107
GPR[EPVAP]-1659868832857
GPR[EPVS]-1659868832857
========
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868832858
GPR[SPVAP]-1659868832858
GPR[EPVAP]-1659868833627
GPR[EPVS]-1659868833627
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868833628
GPR[SPVAP]-1659868833628
GPR[EPVAP]-1659868834376
GPR[EPVS]-1659868834376
========
clone.keys=(ArrayList)this.keys.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868834378
GPR[SPVAP]-1659868834378
GPR[EPVAP]-1659868835129
GPR[EPVS]-1659868835129
========
clone.values=(ArrayList)this.values.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868835131
GPR[SPVAP]-1659868835131
GPR[EPVAP]-1659868835886
GPR[EPVS]-1659868835886
========
clone.indexMap=(HashMap)this.indexMap.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868835887
GPR[SPVAP]-1659868835887
GPR[EPVAP]-1659868836646
GPR[EPVS]-1659868836646
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
result.defaultGroup=(Comparable)KeyToGroupMap.clone(this.defaultGroup);
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868836648
GPR[SPVAP]-1659868836648
GPR[EPVAP]-1659868837407
GPR[EPVS]-1659868837407
========
result.keyToGroupMap=(Map)KeyToGroupMap.clone(this.keyToGroupMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868837408
GPR[SPVAP]-1659868837408
GPR[EPVAP]-1659868838181
GPR[EPVS]-1659868838181
========
result.legendBar=ShapeUtilities.clone(this.legendBar);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868838184
GPR[SPVAP]-1659868838184
GPR[EPVAP]-1659868838937
GPR[EPVS]-1659868838937
========
if(end<start){
throw new IllegalArgumentException("Null \'itemParameterName\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868838940
GPR[SPVAP]-1659868838940
GPR[EPVAP]-1659868840269
GPR[SPVATF]-1659868840269
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868841387
GPR[EPVS]-1659868841387
========
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'seriesParameterName\' argument.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868841389
GPR[SPVAP]-1659868841389
GPR[EPVAP]-1659868842741
GPR[SPVATF]-1659868842741
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868843879
GPR[EPVS]-1659868843879
========
this.DEFAULT_RANGE_DESCRIPTION=prefix;
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868843880
GPR[SPVAP]-1659868843880
GPR[EPVAP]-1659868844630
GPR[EPVS]-1659868844630
========
this.DEFAULT_RANGE_DESCRIPTION=seriesParameterName;
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868844631
GPR[SPVAP]-1659868844631
GPR[EPVAP]-1659868845376
GPR[EPVS]-1659868845376
========
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'seriesParameterName\' argument.");
}
if(end<start){
throw new IllegalArgumentException("Null \'itemParameterName\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868845378
GPR[SPVAP]-1659868845378
GPR[EPVAP]-1659868846671
GPR[SPVATF]-1659868846671
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868847776
GPR[EPVS]-1659868847776
========
clone.itemLabelGeneratorList=(ObjectList)this.itemLabelGeneratorList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868847778
GPR[SPVAP]-1659868847778
GPR[EPVAP]-1659868848529
GPR[EPVS]-1659868848529
========
clone.dayFormatter=(NumberFormat)this.dayFormatter.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868848530
GPR[SPVAP]-1659868848530
GPR[EPVAP]-1659868849278
GPR[EPVS]-1659868849278
========
clone.secondFormatter=(NumberFormat)this.secondFormatter.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868849280
GPR[SPVAP]-1659868849280
GPR[EPVAP]-1659868850032
GPR[EPVS]-1659868850032
========
clone.items=new java.util.ArrayList(this.items);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868850035
GPR[SPVAP]-1659868850035
GPR[EPVAP]-1659868850780
GPR[EPVS]-1659868850781
========
clone.values=(DefaultKeyedValues2D)this.values.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868850783
GPR[SPVAP]-1659868850783
GPR[EPVAP]-1659868851554
GPR[EPVS]-1659868851554
========
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868851555
GPR[SPVAP]-1659868851555
GPR[EPVAP]-1659868852321
GPR[EPVS]-1659868852321
========
clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868852323
GPR[SPVAP]-1659868852323
GPR[EPVAP]-1659868853087
GPR[EPVS]-1659868853087
========
clone.legendLine=ShapeUtilities.clone(this.legendLine);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868853088
GPR[SPVAP]-1659868853088
GPR[EPVAP]-1659868853830
GPR[EPVS]-1659868853830
========
clone.shape=ShapeUtilities.clone(this.shape);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868853832
GPR[SPVAP]-1659868853832
GPR[EPVAP]-1659868854574
GPR[EPVS]-1659868854574
========
clone.line=ShapeUtilities.clone(this.line);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868854586
GPR[SPVAP]-1659868854586
GPR[EPVAP]-1659868855339
GPR[EPVS]-1659868855339
========
if(length<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868855341
GPR[SPVAP]-1659868855342
GPR[EPVAP]-1659868856095
GPR[EPVS]-1659868856095
========
if(end<start){
throw new IllegalArgumentException("The \'polygon\' array must "+"contain an even number of items.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868856097
GPR[SPVAP]-1659868856097
GPR[EPVAP]-1659868857413
GPR[SPVATF]-1659868857413
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868858529
GPR[EPVS]-1659868858529
========
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868858532
GPR[SPVAP]-1659868858532
GPR[EPVAP]-1659868859303
GPR[EPVS]-1659868859303
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868859305
GPR[SPVAP]-1659868859305
GPR[EPVAP]-1659868860073
GPR[EPVS]-1659868860073
========
if(clone.dataset!=null){
clone.dataset.addChangeListener((MeterPlot)super.clone());
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868860075
GPR[SPVAP]-1659868860075
GPR[EPVAP]-1659868860828
GPR[EPVS]-1659868860828
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868860829
GPR[SPVAP]-1659868860829
GPR[EPVAP]-1659868861587
GPR[EPVS]-1659868861587
========
clone.keys=new java.util.ArrayList(this.keys);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868861589
GPR[SPVAP]-1659868861589
GPR[EPVAP]-1659868862359
GPR[EPVS]-1659868862359
========
clone.intervalDelegate=(IntervalXYDelegate)this.intervalDelegate.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868862361
GPR[SPVAP]-1659868862361
GPR[EPVAP]-1659868863110
GPR[EPVS]-1659868863110
========
clone.pieChart=(JFreeChart)this.pieChart.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868863111
GPR[SPVAP]-1659868863111
GPR[EPVAP]-1659868863859
GPR[EPVS]-1659868863859
========
clone.sectionPaints=new HashMap(this.sectionPaints);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868863860
GPR[SPVAP]-1659868863860
GPR[EPVAP]-1659868864611
GPR[EPVS]-1659868864611
========
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868864613
GPR[SPVAP]-1659868864613
GPR[EPVAP]-1659868865371
GPR[EPVS]-1659868865371
========
clone.rows=(List)ObjectUtilities.deepClone(this.rows);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868865373
GPR[SPVAP]-1659868865373
GPR[EPVAP]-1659868866129
GPR[EPVS]-1659868866129
========
clone.formatter=(NumberFormat)this.formatter.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868866132
GPR[SPVAP]-1659868866132
GPR[EPVAP]-1659868866875
GPR[EPVS]-1659868866875
========
clone.seriesFilled=(BooleanList)this.seriesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868866876
GPR[SPVAP]-1659868866877
GPR[EPVAP]-1659868867638
GPR[EPVS]-1659868867638
========
clone.urlSeries=new java.util.ArrayList(this.urlSeries);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868867640
GPR[SPVAP]-1659868867640
GPR[EPVAP]-1659868868386
GPR[EPVS]-1659868868386
========
clone.underlying=(TaskSeriesCollection)this.underlying.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868868389
GPR[SPVAP]-1659868868389
GPR[EPVAP]-1659868869137
GPR[EPVS]-1659868869137
========
clone.legendArea=ShapeUtilities.clone(this.legendArea);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868869140
GPR[SPVAP]-1659868869140
GPR[EPVAP]-1659868869903
GPR[EPVS]-1659868869903
========
clone.zValues=DataUtilities.clone(this.zValues);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868869905
GPR[SPVAP]-1659868869905
GPR[EPVAP]-1659868870650
GPR[EPVS]-1659868870651
========
if(this.data!=null){
clone.data=ArrayUtilities.clone(this.data);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868870652
GPR[SPVAP]-1659868870652
GPR[EPVAP]-1659868871398
GPR[EPVS]-1659868871398
========
clone.timeZone=(TimeZone)this.timeZone.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868871400
GPR[SPVAP]-1659868871400
GPR[EPVAP]-1659868872191
GPR[EPVS]-1659868872191
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemToolTipGenerator instanceof PublicCloneable){
clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);
}
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868872193
GPR[SPVAP]-1659868872194
GPR[EPVAP]-1659868872939
GPR[EPVS]-1659868872939
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868872941
GPR[SPVAP]-1659868872941
GPR[EPVAP]-1659868873712
GPR[EPVS]-1659868873712
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868873713
GPR[SPVAP]-1659868873713
GPR[EPVAP]-1659868874463
GPR[EPVS]-1659868874463
========
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868874464
GPR[SPVAP]-1659868874464
GPR[EPVAP]-1659868875219
GPR[EPVS]-1659868875219
========
if(clone.legendItemToolTipGenerator instanceof PublicCloneable){
clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868875221
GPR[SPVAP]-1659868875221
GPR[EPVAP]-1659868875984
GPR[EPVS]-1659868875984
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868875986
GPR[SPVAP]-1659868875986
GPR[EPVAP]-1659868876753
GPR[EPVS]-1659868876753
========
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868876755
GPR[SPVAP]-1659868876755
GPR[EPVAP]-1659868877550
GPR[EPVS]-1659868877550
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868877552
GPR[SPVAP]-1659868877552
GPR[EPVAP]-1659868878325
GPR[EPVS]-1659868878325
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868878326
GPR[SPVAP]-1659868878326
GPR[EPVAP]-1659868879095
GPR[EPVS]-1659868879095
========
clone.entities=new java.util.ArrayList(this.entities.size());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868879096
GPR[SPVAP]-1659868879096
GPR[EPVAP]-1659868879847
GPR[EPVS]-1659868879847
========
if(clone.dataset!=null){
clone.dataset.addChangeListener((PiePlot)super.clone());
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868879848
GPR[SPVAP]-1659868879848
GPR[EPVAP]-1659868880599
GPR[EPVS]-1659868880599
========
if(position<position){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868880602
GPR[SPVAP]-1659868880602
GPR[EPVAP]-1659868881355
GPR[EPVS]-1659868881355
========
if(position<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868881357
GPR[SPVAP]-1659868881357
GPR[EPVAP]-1659868882129
GPR[EPVS]-1659868882129
========
if(end<position){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868882131
GPR[SPVAP]-1659868882131
GPR[EPVAP]-1659868882880
GPR[EPVS]-1659868882880
========
if(end<start){
throw new IllegalArgumentException("\'position\' out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868882881
GPR[SPVAP]-1659868882881
GPR[EPVAP]-1659868884240
GPR[SPVATF]-1659868884240
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868885371
GPR[EPVS]-1659868885371
========
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868885373
GPR[SPVAP]-1659868885373
GPR[EPVAP]-1659868886124
GPR[EPVS]-1659868886124
========
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868886125
GPR[SPVAP]-1659868886125
GPR[EPVAP]-1659868886877
GPR[EPVS]-1659868886877
========
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868886878
GPR[SPVAP]-1659868886878
GPR[EPVAP]-1659868887654
GPR[EPVS]-1659868887654
========
if(end<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868887656
GPR[SPVAP]-1659868887656
GPR[EPVAP]-1659868888927
GPR[SPVATF]-1659868888927
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868890107
GPR[EPVS]-1659868890107
========
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868890109
GPR[SPVAP]-1659868890109
GPR[EPVAP]-1659868890866
GPR[EPVS]-1659868890866
========
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868890867
GPR[SPVAP]-1659868890867
GPR[EPVAP]-1659868891606
GPR[EPVS]-1659868891606
========
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868891609
GPR[SPVAP]-1659868891609
GPR[EPVAP]-1659868892373
GPR[EPVS]-1659868892375
========
if(end<start){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868892379
GPR[SPVAP]-1659868892379
GPR[EPVAP]-1659868893671
GPR[SPVATF]-1659868893671
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868894828
GPR[EPVS]-1659868894828
========
if(series<start){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868894830
GPR[SPVAP]-1659868894830
GPR[EPVAP]-1659868895566
GPR[EPVS]-1659868895566
========
if(end<series){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868895567
GPR[SPVAP]-1659868895567
GPR[EPVAP]-1659868896315
GPR[EPVS]-1659868896315
========
if(series<series){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868896317
GPR[SPVAP]-1659868896317
GPR[EPVAP]-1659868897063
GPR[EPVS]-1659868897063
========
if(end<start){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868897066
GPR[SPVAP]-1659868897066
GPR[EPVAP]-1659868898339
GPR[SPVATF]-1659868898339
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868899490
GPR[EPVS]-1659868899490
========
if(series<start){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868899493
GPR[SPVAP]-1659868899493
GPR[EPVAP]-1659868900237
GPR[EPVS]-1659868900237
========
if(end<series){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868900240
GPR[SPVAP]-1659868900240
GPR[EPVAP]-1659868900981
GPR[EPVS]-1659868900981
========
if(series<series){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868900982
GPR[SPVAP]-1659868900983
GPR[EPVAP]-1659868901734
GPR[EPVS]-1659868901734
========
if(count<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868901736
GPR[SPVAP]-1659868901736
GPR[EPVAP]-1659868902519
GPR[EPVS]-1659868902519
========
if(end<maximum){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868902521
GPR[SPVAP]-1659868902521
GPR[EPVAP]-1659868903266
GPR[EPVS]-1659868903266
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(maximumItemCount<0){
throw new IllegalArgumentException("Negative \'maximum\' argument.");
}
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868903268
GPR[SPVAP]-1659868903268
GPR[EPVAP]-1659868904585
GPR[SPVATF]-1659868904585
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868905713
GPR[EPVS]-1659868905713
========
clone.domainAxes=new ObjectList();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868905717
GPR[SPVAP]-1659868905717
GPR[EPVAP]-1659868906470
GPR[EPVS]-1659868906470
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868906472
GPR[SPVAP]-1659868906472
GPR[EPVAP]-1659868907241
GPR[EPVS]-1659868907241
========
(XYSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868907242
GPR[SPVAP]-1659868907242
GPR[EPVAP]-1659868907866
GPR[EPVS]-1659868907866
========
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868907868
GPR[SPVAP]-1659868907868
GPR[EPVAP]-1659868909178
GPR[SPVATF]-1659868909178
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868910336
GPR[EPVS]-1659868910336
========
setSelectionState(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868910338
GPR[SPVAP]-1659868910338
GPR[EPVAP]-1659868911104
GPR[EPVS]-1659868911104
========
clone.sublabels=new HashMap(this.sublabels);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868911107
GPR[SPVAP]-1659868911107
GPR[EPVAP]-1659868911876
GPR[EPVS]-1659868911876
========
clone.listenerList=new EventListenerList();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868911877
GPR[SPVAP]-1659868911877
GPR[EPVAP]-1659868912637
GPR[EPVS]-1659868912637
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868912639
GPR[SPVAP]-1659868912639
GPR[EPVAP]-1659868913403
GPR[EPVS]-1659868913403
========
(TaskSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868913405
GPR[SPVAP]-1659868913405
GPR[EPVAP]-1659868914032
GPR[EPVS]-1659868914032
========
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868914034
GPR[SPVAP]-1659868914034
GPR[EPVAP]-1659868914801
GPR[EPVS]-1659868914801
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868914803
GPR[SPVAP]-1659868914803
GPR[EPVAP]-1659868915554
GPR[EPVS]-1659868915555
========
(XIntervalSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868915556
GPR[SPVAP]-1659868915556
GPR[EPVAP]-1659868916172
GPR[EPVS]-1659868916172
========
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868916174
GPR[SPVAP]-1659868916174
GPR[EPVAP]-1659868916923
GPR[EPVS]-1659868916923
========
(XYIntervalSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868916925
GPR[SPVAP]-1659868916925
GPR[EPVAP]-1659868917550
GPR[EPVS]-1659868917550
========
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868917553
GPR[SPVAP]-1659868917553
GPR[EPVAP]-1659868918299
GPR[EPVS]-1659868918299
========
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868918301
GPR[SPVAP]-1659868918301
GPR[EPVAP]-1659868919114
GPR[EPVS]-1659868919114
========
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868919115
GPR[SPVAP]-1659868919115
GPR[EPVAP]-1659868919903
GPR[EPVS]-1659868919903
========
(YIntervalSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868919905
GPR[SPVAP]-1659868919905
GPR[EPVAP]-1659868920521
GPR[EPVS]-1659868920521
========
(XYSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868920523
GPR[SPVAP]-1659868920523
GPR[EPVAP]-1659868921141
GPR[EPVS]-1659868921141
========
(XYSeries)this.data.get(start).removeChangeListener(this);
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868921142
GPR[SPVAP]-1659868921142
GPR[EPVAP]-1659868921760
GPR[EPVS]-1659868921760
========
(XYSeries)this.data.get(start).removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868921762
GPR[SPVAP]-1659868921762
GPR[EPVAP]-1659868922383
GPR[EPVS]-1659868922383
========
(XYSeries)this.data.get(start).removeChangeListener(this);
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868922384
GPR[SPVAP]-1659868922384
GPR[EPVAP]-1659868923003
GPR[EPVS]-1659868923003
========
(XYSeries)this.data.get(start).removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868923005
GPR[SPVAP]-1659868923005
GPR[EPVAP]-1659868923622
GPR[EPVS]-1659868923622
========
(XYSeries)this.data.get(start).removeChangeListener(this);
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868923625
GPR[SPVAP]-1659868923625
GPR[EPVAP]-1659868924245
GPR[EPVS]-1659868924245
========
(XYSeries)this.data.get(start).removeChangeListener(this);
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868924247
GPR[SPVAP]-1659868924247
GPR[EPVAP]-1659868924866
GPR[EPVS]-1659868924866
========
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868924868
GPR[SPVAP]-1659868924868
GPR[EPVAP]-1659868925631
GPR[EPVS]-1659868925631
========
clone.intervalDelegate=new IntervalXYDelegate((CategoryTableXYDataset)super.clone());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868925633
GPR[SPVAP]-1659868925633
GPR[EPVAP]-1659868926397
GPR[EPVS]-1659868926397
========
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868926398
GPR[SPVAP]-1659868926398
GPR[EPVAP]-1659868927147
GPR[EPVS]-1659868927147
========
clone.intervalDelegate.setAutoWidth(isAutoWidth());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868927148
GPR[SPVAP]-1659868927148
GPR[EPVAP]-1659868927888
GPR[EPVS]-1659868927888
========
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868927890
GPR[SPVAP]-1659868927890
GPR[EPVAP]-1659868928652
GPR[EPVS]-1659868928652
========
clone.propertyChangeSupport=new PropertyChangeSupport((Series)super.clone());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868928654
GPR[SPVAP]-1659868928654
GPR[EPVAP]-1659868929407
GPR[EPVS]-1659868929407
========
clone.yCrosshairs=(List)ObjectUtilities.deepClone(this.yCrosshairs);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868929411
GPR[SPVAP]-1659868929411
GPR[EPVAP]-1659868930167
GPR[EPVS]-1659868930167
========
if(startIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868930170
GPR[SPVAP]-1659868930170
GPR[EPVAP]-1659868930917
GPR[EPVS]-1659868930917
========
clone.tickLabelFontMap=new HashMap(this.tickLabelFontMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868930919
GPR[SPVAP]-1659868930919
GPR[EPVAP]-1659868931679
GPR[EPVS]-1659868931679
========
clone.tickLabelPaintMap=new HashMap(this.tickLabelPaintMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868931681
GPR[SPVAP]-1659868931681
GPR[EPVAP]-1659868932460
GPR[EPVS]-1659868932460
========
clone.categoryLabelToolTips=new HashMap(this.categoryLabelToolTips);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868932462
GPR[SPVAP]-1659868932462
GPR[EPVAP]-1659868933212
GPR[EPVS]-1659868933212
========
if(pos<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868933215
GPR[SPVAP]-1659868933215
GPR[EPVAP]-1659868933975
GPR[EPVS]-1659868933975
========
fireSeriesChanged();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868933977
GPR[SPVAP]-1659868933977
GPR[EPVAP]-1659868935308
GPR[SPVATF]-1659868935308
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868936426
GPR[EPVS]-1659868936426
========
updateBoundsForRemovedItem((XYDataItem)this.data.remove(start));
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868936429
GPR[SPVAP]-1659868936429
GPR[EPVAP]-1659868937177
GPR[EPVS]-1659868937177
========
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868937179
GPR[SPVAP]-1659868937179
GPR[EPVAP]-1659868937941
GPR[EPVS]-1659868937941
========
if(end<start){
throw new SeriesException("X-value already exists.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868937943
GPR[SPVAP]-1659868937943
GPR[EPVAP]-1659868939230
GPR[SPVATF]-1659868939230
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868940380
GPR[EPVS]-1659868940380
========
if(index<start){
throw new SeriesException("X-value already exists.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868940381
GPR[SPVAP]-1659868940381
GPR[EPVAP]-1659868941135
GPR[EPVS]-1659868941135
========
if(fieldIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868941137
GPR[SPVAP]-1659868941137
GPR[EPVAP]-1659868941887
GPR[EPVS]-1659868941887
========
if(end<start){
if(start>=0){
return (TimeSeriesDataItem)this.data.get(index);
}else {
return null;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868941889
GPR[SPVAP]-1659868941889
GPR[EPVAP]-1659868942661
GPR[EPVS]-1659868942661
========
if(remove<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868942663
GPR[SPVAP]-1659868942663
GPR[EPVAP]-1659868943425
GPR[EPVS]-1659868943425
========
if(end<VERTICAL){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868943427
GPR[SPVAP]-1659868943427
GPR[EPVAP]-1659868944190
GPR[EPVS]-1659868944190
========
if(end<=start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868944192
GPR[SPVAP]-1659868944192
GPR[EPVAP]-1659868945489
GPR[SPVATF]-1659868945489
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868946625
GPR[EPVS]-1659868946625
========
if(position<=start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868946626
GPR[SPVAP]-1659868946626
GPR[EPVAP]-1659868947395
GPR[EPVS]-1659868947395
========
if(end<start){
if(end<=start){
return end;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868947396
GPR[SPVAP]-1659868947396
GPR[EPVAP]-1659868948161
GPR[EPVS]-1659868948161
========
if(end<newline){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868948164
GPR[SPVAP]-1659868948164
GPR[EPVAP]-1659868948919
GPR[EPVS]-1659868948919
========
if(end<start){
if(end>start){
return newline;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868948921
GPR[SPVAP]-1659868948921
GPR[EPVAP]-1659868949675
GPR[EPVS]-1659868949675
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(this.data.size()==0){
return ;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868949677
GPR[SPVAP]-1659868949677
GPR[EPVAP]-1659868950418
GPR[EPVS]-1659868950418
========
this.data.clear();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868950419
GPR[SPVAP]-1659868950419
GPR[EPVAP]-1659868951715
GPR[SPVATF]-1659868951715
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868952861
GPR[EPVS]-1659868952861
========
this.data.clear();
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868952862
GPR[SPVAP]-1659868952862
GPR[EPVAP]-1659868953613
GPR[EPVS]-1659868953613
========
if(end<start){
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868953615
GPR[SPVAP]-1659868953615
GPR[EPVAP]-1659868954895
GPR[SPVATF]-1659868954895
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868956015
GPR[EPVS]-1659868956015
========
if(index<start){
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868956016
GPR[SPVAP]-1659868956016
GPR[EPVAP]-1659868956778
GPR[EPVS]-1659868956778
========
if(keyIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868956781
GPR[SPVAP]-1659868956781
GPR[EPVAP]-1659868957546
GPR[EPVS]-1659868957546
========
if(end<start){
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868957549
GPR[SPVAP]-1659868957549
GPR[EPVAP]-1659868958829
GPR[SPVATF]-1659868958829
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868959958
GPR[EPVS]-1659868959958
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868959960
GPR[SPVAP]-1659868959960
GPR[EPVAP]-1659868961261
GPR[SPVATF]-1659868961261
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868962383
GPR[EPVS]-1659868962383
========
if(end<start){
new StringBuffer().append("the time period ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868962385
GPR[SPVAP]-1659868962385
GPR[EPVAP]-1659868963653
GPR[SPVATF]-1659868963653
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868965784
GPR[EPVS]-1659868965784
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868965787
GPR[SPVAP]-1659868965787
GPR[EPVAP]-1659868967251
GPR[SPVATF]-1659868967251
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868968518
GPR[EPVS]-1659868968518
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868968519
GPR[SPVAP]-1659868968519
GPR[EPVAP]-1659868969823
GPR[SPVATF]-1659868969823
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868971008
GPR[EPVS]-1659868971008
========
if(end<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868971009
GPR[SPVAP]-1659868971009
GPR[EPVAP]-1659868972347
GPR[SPVATF]-1659868972347
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868973488
GPR[EPVS]-1659868973488
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868973489
GPR[SPVAP]-1659868973489
GPR[EPVAP]-1659868974788
GPR[SPVATF]-1659868974788
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868975918
GPR[EPVS]-1659868975918
========
if(index<start){
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868975920
GPR[SPVAP]-1659868975920
GPR[EPVAP]-1659868976718
GPR[EPVS]-1659868976718
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868976720
GPR[SPVAP]-1659868976720
GPR[EPVAP]-1659868977476
GPR[EPVS]-1659868977476
========
if(index<start){
new StringBuffer().append("the time period ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868977477
GPR[SPVAP]-1659868977477
GPR[EPVAP]-1659868978237
GPR[EPVS]-1659868978237
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868978239
GPR[SPVAP]-1659868978239
GPR[EPVAP]-1659868978991
GPR[EPVS]-1659868978991
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868978993
GPR[SPVAP]-1659868978993
GPR[EPVAP]-1659868979749
GPR[EPVS]-1659868979749
========
if(index<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868979751
GPR[SPVAP]-1659868979751
GPR[EPVAP]-1659868980509
GPR[EPVS]-1659868980509
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868980511
GPR[SPVAP]-1659868980511
GPR[EPVAP]-1659868981267
GPR[EPVS]-1659868981267
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868981268
GPR[SPVAP]-1659868981268
GPR[EPVAP]-1659868982554
GPR[SPVATF]-1659868982554
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868983676
GPR[EPVS]-1659868983676
========
if(end<start){
new StringBuffer().append("the time period ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868983678
GPR[SPVAP]-1659868983678
GPR[EPVAP]-1659868984999
GPR[SPVATF]-1659868984999
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868986137
GPR[EPVS]-1659868986137
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868986139
GPR[SPVAP]-1659868986139
GPR[EPVAP]-1659868987459
GPR[SPVATF]-1659868987459
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868988580
GPR[EPVS]-1659868988580
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868988582
GPR[SPVAP]-1659868988582
GPR[EPVAP]-1659868989879
GPR[SPVATF]-1659868989879
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868990984
GPR[EPVS]-1659868990984
========
if(end<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868990987
GPR[SPVAP]-1659868990987
GPR[EPVAP]-1659868992291
GPR[SPVATF]-1659868992291
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868993452
GPR[EPVS]-1659868993452
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868993454
GPR[SPVAP]-1659868993454
GPR[EPVAP]-1659868994746
GPR[SPVATF]-1659868994746
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868995910
GPR[EPVS]-1659868995910
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868995913
GPR[SPVAP]-1659868995913
GPR[EPVAP]-1659868997195
GPR[SPVATF]-1659868997195
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659868998337
GPR[EPVS]-1659868998337
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659868998339
GPR[SPVAP]-1659868998339
GPR[EPVAP]-1659868999639
GPR[SPVATF]-1659868999639
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869000755
GPR[EPVS]-1659869000755
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869000756
GPR[SPVAP]-1659869000756
GPR[EPVAP]-1659869002057
GPR[SPVATF]-1659869002057
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869003209
GPR[EPVS]-1659869003209
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869003211
GPR[SPVAP]-1659869003211
GPR[EPVAP]-1659869004525
GPR[SPVATF]-1659869004525
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869005629
GPR[EPVS]-1659869005629
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869005630
GPR[SPVAP]-1659869005630
GPR[EPVAP]-1659869006907
GPR[SPVATF]-1659869006907
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869008038
GPR[EPVS]-1659869008038
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869008040
GPR[SPVAP]-1659869008040
GPR[EPVAP]-1659869009337
GPR[SPVATF]-1659869009337
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869010448
GPR[EPVS]-1659869010448
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869010450
GPR[SPVAP]-1659869010450
GPR[EPVAP]-1659869011746
GPR[SPVATF]-1659869011746
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869012865
GPR[EPVS]-1659869012865
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869012866
GPR[SPVAP]-1659869012866
GPR[EPVAP]-1659869014163
GPR[SPVATF]-1659869014163
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869015289
GPR[EPVS]-1659869015289
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869015290
GPR[SPVAP]-1659869015290
GPR[EPVAP]-1659869016559
GPR[SPVATF]-1659869016559
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869017680
GPR[EPVS]-1659869017680
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869017682
GPR[SPVAP]-1659869017682
GPR[EPVAP]-1659869018980
GPR[SPVATF]-1659869018980
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869020097
GPR[EPVS]-1659869020097
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869020098
GPR[SPVAP]-1659869020098
GPR[EPVAP]-1659869021389
GPR[SPVATF]-1659869021389
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869022543
GPR[EPVS]-1659869022543
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869022545
GPR[SPVAP]-1659869022545
GPR[EPVAP]-1659869023835
GPR[SPVATF]-1659869023835
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869024966
GPR[EPVS]-1659869024966
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869024968
GPR[SPVAP]-1659869024968
GPR[EPVAP]-1659869026297
GPR[SPVATF]-1659869026297
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869027451
GPR[EPVS]-1659869027451
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869027453
GPR[SPVAP]-1659869027453
GPR[EPVAP]-1659869028777
GPR[SPVATF]-1659869028777
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869029937
GPR[EPVS]-1659869029937
========
if(end<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869029939
GPR[SPVAP]-1659869029939
GPR[EPVAP]-1659869031272
GPR[SPVATF]-1659869031272
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869032454
GPR[EPVS]-1659869032454
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869032456
GPR[SPVAP]-1659869032456
GPR[EPVAP]-1659869033207
GPR[EPVS]-1659869033207
========
if(index<start){
new StringBuffer().append("the time period ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869033209
GPR[SPVAP]-1659869033209
GPR[EPVAP]-1659869033963
GPR[EPVS]-1659869033963
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869033964
GPR[SPVAP]-1659869033964
GPR[EPVAP]-1659869034718
GPR[EPVS]-1659869034718
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869034719
GPR[SPVAP]-1659869034719
GPR[EPVAP]-1659869035467
GPR[EPVS]-1659869035467
========
if(index<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869035470
GPR[SPVAP]-1659869035470
GPR[EPVAP]-1659869036225
GPR[EPVS]-1659869036225
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869036227
GPR[SPVAP]-1659869036227
GPR[EPVAP]-1659869037007
GPR[EPVS]-1659869037007
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869037009
GPR[SPVAP]-1659869037009
GPR[EPVAP]-1659869037762
GPR[EPVS]-1659869037762
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869037764
GPR[SPVAP]-1659869037764
GPR[EPVAP]-1659869038518
GPR[EPVS]-1659869038518
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869038520
GPR[SPVAP]-1659869038520
GPR[EPVAP]-1659869039279
GPR[EPVS]-1659869039279
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869039281
GPR[SPVAP]-1659869039281
GPR[EPVAP]-1659869040034
GPR[EPVS]-1659869040034
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869040036
GPR[SPVAP]-1659869040036
GPR[EPVAP]-1659869040802
GPR[EPVS]-1659869040802
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869040805
GPR[SPVAP]-1659869040805
GPR[EPVAP]-1659869041568
GPR[EPVS]-1659869041568
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869041570
GPR[SPVAP]-1659869041570
GPR[EPVAP]-1659869042341
GPR[EPVS]-1659869042341
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869042343
GPR[SPVAP]-1659869042343
GPR[EPVAP]-1659869043142
GPR[EPVS]-1659869043142
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869043144
GPR[SPVAP]-1659869043144
GPR[EPVAP]-1659869043887
GPR[EPVS]-1659869043887
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869043889
GPR[SPVAP]-1659869043889
GPR[EPVAP]-1659869044635
GPR[EPVS]-1659869044635
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869044636
GPR[SPVAP]-1659869044636
GPR[EPVAP]-1659869045401
GPR[EPVS]-1659869045401
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869045402
GPR[SPVAP]-1659869045402
GPR[EPVAP]-1659869046152
GPR[EPVS]-1659869046152
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869046154
GPR[SPVAP]-1659869046154
GPR[EPVAP]-1659869046930
GPR[EPVS]-1659869046930
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869046931
GPR[SPVAP]-1659869046931
GPR[EPVAP]-1659869047673
GPR[EPVS]-1659869047673
========
if(index<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869047675
GPR[SPVAP]-1659869047675
GPR[EPVAP]-1659869048426
GPR[EPVS]-1659869048426
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869048427
GPR[SPVAP]-1659869048427
GPR[EPVAP]-1659869049712
GPR[SPVATF]-1659869049712
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869050850
GPR[EPVS]-1659869050850
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869050852
GPR[SPVAP]-1659869050852
GPR[EPVAP]-1659869052127
GPR[SPVATF]-1659869052127
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869053248
GPR[EPVS]-1659869053248
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869053250
GPR[SPVAP]-1659869053250
GPR[EPVAP]-1659869054557
GPR[SPVATF]-1659869054557
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869055745
GPR[EPVS]-1659869055745
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869055746
GPR[SPVAP]-1659869055746
GPR[EPVAP]-1659869057032
GPR[SPVATF]-1659869057032
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869058160
GPR[EPVS]-1659869058160
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869058161
GPR[SPVAP]-1659869058161
GPR[EPVAP]-1659869059480
GPR[SPVATF]-1659869059480
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869060602
GPR[EPVS]-1659869060602
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869060603
GPR[SPVAP]-1659869060603
GPR[EPVAP]-1659869061946
GPR[SPVATF]-1659869061946
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869063090
GPR[EPVS]-1659869063090
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869063091
GPR[SPVAP]-1659869063091
GPR[EPVAP]-1659869064382
GPR[SPVATF]-1659869064382
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869065525
GPR[EPVS]-1659869065525
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869065527
GPR[SPVAP]-1659869065527
GPR[EPVAP]-1659869066813
GPR[SPVATF]-1659869066813
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869067924
GPR[EPVS]-1659869067924
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869067925
GPR[SPVAP]-1659869067925
GPR[EPVAP]-1659869069203
GPR[SPVATF]-1659869069203
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869070311
GPR[EPVS]-1659869070311
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869070313
GPR[SPVAP]-1659869070313
GPR[EPVAP]-1659869071587
GPR[SPVATF]-1659869071587
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869072719
GPR[EPVS]-1659869072719
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869072721
GPR[SPVAP]-1659869072721
GPR[EPVAP]-1659869074026
GPR[SPVATF]-1659869074026
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869075137
GPR[EPVS]-1659869075137
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869075139
GPR[SPVAP]-1659869075139
GPR[EPVAP]-1659869076421
GPR[SPVATF]-1659869076421
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869077554
GPR[EPVS]-1659869077554
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869077555
GPR[SPVAP]-1659869077555
GPR[EPVAP]-1659869078833
GPR[SPVATF]-1659869078833
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869079981
GPR[EPVS]-1659869079981
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869079982
GPR[SPVAP]-1659869079982
GPR[EPVAP]-1659869081268
GPR[SPVATF]-1659869081268
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869082422
GPR[EPVS]-1659869082422
========
if(end<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869082424
GPR[SPVAP]-1659869082424
GPR[EPVAP]-1659869083728
GPR[SPVATF]-1659869083728
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869084859
GPR[EPVS]-1659869084859
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869084860
GPR[SPVAP]-1659869084860
GPR[EPVAP]-1659869086199
GPR[SPVATF]-1659869086199
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869087341
GPR[EPVS]-1659869087341
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869087343
GPR[SPVAP]-1659869087343
GPR[EPVAP]-1659869088646
GPR[SPVATF]-1659869088646
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869089792
GPR[EPVS]-1659869089792
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869089793
GPR[SPVAP]-1659869089793
GPR[EPVAP]-1659869091129
GPR[SPVATF]-1659869091129
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869092267
GPR[EPVS]-1659869092267
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869092268
GPR[SPVAP]-1659869092268
GPR[EPVAP]-1659869093601
GPR[SPVATF]-1659869093601
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869094713
GPR[EPVS]-1659869094713
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869094715
GPR[SPVAP]-1659869094715
GPR[EPVAP]-1659869096006
GPR[SPVATF]-1659869096006
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869097148
GPR[EPVS]-1659869097148
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869097150
GPR[SPVAP]-1659869097150
GPR[EPVAP]-1659869098436
GPR[SPVATF]-1659869098436
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869099600
GPR[EPVS]-1659869099600
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869099602
GPR[SPVAP]-1659869099602
GPR[EPVAP]-1659869100914
GPR[SPVATF]-1659869100914
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869102042
GPR[EPVS]-1659869102042
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869102043
GPR[SPVAP]-1659869102043
GPR[EPVAP]-1659869103353
GPR[SPVATF]-1659869103353
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869104467
GPR[EPVS]-1659869104467
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869104469
GPR[SPVAP]-1659869104469
GPR[EPVAP]-1659869105741
GPR[SPVATF]-1659869105741
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869106884
GPR[EPVS]-1659869106884
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869106886
GPR[SPVAP]-1659869106886
GPR[EPVAP]-1659869108180
GPR[SPVATF]-1659869108180
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869109304
GPR[EPVS]-1659869109304
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869109305
GPR[SPVAP]-1659869109305
GPR[EPVAP]-1659869110598
GPR[SPVATF]-1659869110598
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869111735
GPR[EPVS]-1659869111735
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869111737
GPR[SPVAP]-1659869111737
GPR[EPVAP]-1659869113022
GPR[SPVATF]-1659869113022
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869114190
GPR[EPVS]-1659869114190
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869114192
GPR[SPVAP]-1659869114192
GPR[EPVAP]-1659869115466
GPR[SPVATF]-1659869115466
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869116615
GPR[EPVS]-1659869116615
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869116617
GPR[SPVAP]-1659869116617
GPR[EPVAP]-1659869117902
GPR[SPVATF]-1659869117903
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869119035
GPR[EPVS]-1659869119035
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869119036
GPR[SPVAP]-1659869119036
GPR[EPVAP]-1659869120348
GPR[SPVATF]-1659869120348
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869121466
GPR[EPVS]-1659869121466
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869121468
GPR[SPVAP]-1659869121468
GPR[EPVAP]-1659869122779
GPR[SPVATF]-1659869122779
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869123914
GPR[EPVS]-1659869123914
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869123916
GPR[SPVAP]-1659869123916
GPR[EPVAP]-1659869125194
GPR[SPVATF]-1659869125194
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869127028
GPR[EPVS]-1659869127028
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869127030
GPR[SPVAP]-1659869127030
GPR[EPVAP]-1659869128491
GPR[SPVATF]-1659869128491
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869129795
GPR[EPVS]-1659869129795
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869129797
GPR[SPVAP]-1659869129797
GPR[EPVAP]-1659869131071
GPR[SPVATF]-1659869131071
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869132221
GPR[EPVS]-1659869132221
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869132226
GPR[SPVAP]-1659869132226
GPR[EPVAP]-1659869133541
GPR[SPVATF]-1659869133541
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869134659
GPR[EPVS]-1659869134659
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869134662
GPR[SPVAP]-1659869134662
GPR[EPVAP]-1659869135412
GPR[EPVS]-1659869135412
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869135413
GPR[SPVAP]-1659869135413
GPR[EPVAP]-1659869136195
GPR[EPVS]-1659869136195
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869136197
GPR[SPVAP]-1659869136197
GPR[EPVAP]-1659869136951
GPR[EPVS]-1659869136951
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869136952
GPR[SPVAP]-1659869136952
GPR[EPVAP]-1659869137717
GPR[EPVS]-1659869137717
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869137718
GPR[SPVAP]-1659869137718
GPR[EPVAP]-1659869138506
GPR[EPVS]-1659869138506
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869138507
GPR[SPVAP]-1659869138507
GPR[EPVAP]-1659869139268
GPR[EPVS]-1659869139268
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869139270
GPR[SPVAP]-1659869139270
GPR[EPVAP]-1659869140035
GPR[EPVS]-1659869140035
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869140037
GPR[SPVAP]-1659869140037
GPR[EPVAP]-1659869140791
GPR[EPVS]-1659869140791
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869140792
GPR[SPVAP]-1659869140792
GPR[EPVAP]-1659869141535
GPR[EPVS]-1659869141535
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869141536
GPR[SPVAP]-1659869141536
GPR[EPVAP]-1659869142263
GPR[EPVS]-1659869142263
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869142265
GPR[SPVAP]-1659869142265
GPR[EPVAP]-1659869143034
GPR[EPVS]-1659869143034
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869143035
GPR[SPVAP]-1659869143035
GPR[EPVAP]-1659869143803
GPR[EPVS]-1659869143803
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869143805
GPR[SPVAP]-1659869143805
GPR[EPVAP]-1659869144570
GPR[EPVS]-1659869144570
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869144571
GPR[SPVAP]-1659869144571
GPR[EPVAP]-1659869145339
GPR[EPVS]-1659869145339
========
if(index<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869145341
GPR[SPVAP]-1659869145341
GPR[EPVAP]-1659869146079
GPR[EPVS]-1659869146079
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869146081
GPR[SPVAP]-1659869146081
GPR[EPVAP]-1659869146835
GPR[EPVS]-1659869146835
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869146837
GPR[SPVAP]-1659869146837
GPR[EPVAP]-1659869147601
GPR[EPVS]-1659869147601
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869147602
GPR[SPVAP]-1659869147602
GPR[EPVAP]-1659869148353
GPR[EPVS]-1659869148353
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869148355
GPR[SPVAP]-1659869148355
GPR[EPVAP]-1659869149124
GPR[EPVS]-1659869149124
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869149126
GPR[SPVAP]-1659869149126
GPR[EPVAP]-1659869149879
GPR[EPVS]-1659869149879
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869149880
GPR[SPVAP]-1659869149880
GPR[EPVAP]-1659869150650
GPR[EPVS]-1659869150650
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869150651
GPR[SPVAP]-1659869150651
GPR[EPVAP]-1659869151430
GPR[EPVS]-1659869151430
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869151431
GPR[SPVAP]-1659869151431
GPR[EPVAP]-1659869152191
GPR[EPVS]-1659869152191
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869152192
GPR[SPVAP]-1659869152192
GPR[EPVAP]-1659869152971
GPR[EPVS]-1659869152971
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869152972
GPR[SPVAP]-1659869152972
GPR[EPVAP]-1659869153745
GPR[EPVS]-1659869153745
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869153747
GPR[SPVAP]-1659869153747
GPR[EPVAP]-1659869154495
GPR[EPVS]-1659869154495
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869154496
GPR[SPVAP]-1659869154496
GPR[EPVAP]-1659869155247
GPR[EPVS]-1659869155247
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869155248
GPR[SPVAP]-1659869155248
GPR[EPVAP]-1659869156002
GPR[EPVS]-1659869156002
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869156003
GPR[SPVAP]-1659869156003
GPR[EPVAP]-1659869156753
GPR[EPVS]-1659869156753
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869156754
GPR[SPVAP]-1659869156754
GPR[EPVAP]-1659869157505
GPR[EPVS]-1659869157505
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869157506
GPR[SPVAP]-1659869157506
GPR[EPVAP]-1659869158256
GPR[EPVS]-1659869158256
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869158257
GPR[SPVAP]-1659869158258
GPR[EPVAP]-1659869159035
GPR[EPVS]-1659869159035
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869159036
GPR[SPVAP]-1659869159036
GPR[EPVAP]-1659869159817
GPR[EPVS]-1659869159817
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869159820
GPR[SPVAP]-1659869159820
GPR[EPVAP]-1659869160567
GPR[EPVS]-1659869160567
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869160569
GPR[SPVAP]-1659869160569
GPR[EPVAP]-1659869161344
GPR[EPVS]-1659869161344
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869161346
GPR[SPVAP]-1659869161346
GPR[EPVAP]-1659869162642
GPR[SPVATF]-1659869162642
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869163783
GPR[EPVS]-1659869163783
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869163785
GPR[SPVAP]-1659869163785
GPR[EPVAP]-1659869165085
GPR[SPVATF]-1659869165085
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869166268
GPR[EPVS]-1659869166268
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869166270
GPR[SPVAP]-1659869166270
GPR[EPVAP]-1659869167585
GPR[SPVATF]-1659869167585
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869168699
GPR[EPVS]-1659869168699
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869168701
GPR[SPVAP]-1659869168701
GPR[EPVAP]-1659869170010
GPR[SPVATF]-1659869170010
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869171152
GPR[EPVS]-1659869171152
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869171153
GPR[SPVAP]-1659869171153
GPR[EPVAP]-1659869172456
GPR[SPVATF]-1659869172456
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869173607
GPR[EPVS]-1659869173607
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869173608
GPR[SPVAP]-1659869173608
GPR[EPVAP]-1659869174913
GPR[SPVATF]-1659869174914
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869176082
GPR[EPVS]-1659869176082
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869176084
GPR[SPVAP]-1659869176084
GPR[EPVAP]-1659869177432
GPR[SPVATF]-1659869177432
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869178583
GPR[EPVS]-1659869178583
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869178584
GPR[SPVAP]-1659869178584
GPR[EPVAP]-1659869179900
GPR[SPVATF]-1659869179900
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869181090
GPR[EPVS]-1659869181091
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869181093
GPR[SPVAP]-1659869181093
GPR[EPVAP]-1659869182439
GPR[SPVATF]-1659869182439
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869183620
GPR[EPVS]-1659869183620
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869183622
GPR[SPVAP]-1659869183622
GPR[EPVAP]-1659869184916
GPR[SPVATF]-1659869184916
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869186064
GPR[EPVS]-1659869186064
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869186065
GPR[SPVAP]-1659869186065
GPR[EPVAP]-1659869187404
GPR[SPVATF]-1659869187404
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869188571
GPR[EPVS]-1659869188571
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869188572
GPR[SPVAP]-1659869188572
GPR[EPVAP]-1659869189881
GPR[SPVATF]-1659869189881
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869191042
GPR[EPVS]-1659869191042
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869191043
GPR[SPVAP]-1659869191043
GPR[EPVAP]-1659869192373
GPR[SPVATF]-1659869192373
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869193507
GPR[EPVS]-1659869193507
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869193508
GPR[SPVAP]-1659869193508
GPR[EPVAP]-1659869194852
GPR[SPVATF]-1659869194852
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869195982
GPR[EPVS]-1659869195982
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869195983
GPR[SPVAP]-1659869195983
GPR[EPVAP]-1659869197260
GPR[SPVATF]-1659869197260
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869198402
GPR[EPVS]-1659869198402
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869198404
GPR[SPVAP]-1659869198404
GPR[EPVAP]-1659869199705
GPR[SPVATF]-1659869199705
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869200808
GPR[EPVS]-1659869200808
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869200810
GPR[SPVAP]-1659869200810
GPR[EPVAP]-1659869202173
GPR[SPVATF]-1659869202174
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869203349
GPR[EPVS]-1659869203349
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869203351
GPR[SPVAP]-1659869203351
GPR[EPVAP]-1659869204662
GPR[SPVATF]-1659869204662
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869205799
GPR[EPVS]-1659869205799
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869205801
GPR[SPVAP]-1659869205801
GPR[EPVAP]-1659869207103
GPR[SPVATF]-1659869207103
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869208239
GPR[EPVS]-1659869208239
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869208240
GPR[SPVAP]-1659869208240
GPR[EPVAP]-1659869209529
GPR[SPVATF]-1659869209530
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869210699
GPR[EPVS]-1659869210699
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869210700
GPR[SPVAP]-1659869210700
GPR[EPVAP]-1659869212034
GPR[SPVATF]-1659869212034
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869213200
GPR[EPVS]-1659869213200
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869213201
GPR[SPVAP]-1659869213201
GPR[EPVAP]-1659869214564
GPR[SPVATF]-1659869214564
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869215714
GPR[EPVS]-1659869215714
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869215716
GPR[SPVAP]-1659869215716
GPR[EPVAP]-1659869217001
GPR[SPVATF]-1659869217001
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869218125
GPR[EPVS]-1659869218125
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869218126
GPR[SPVAP]-1659869218126
GPR[EPVAP]-1659869219435
GPR[SPVATF]-1659869219435
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869220569
GPR[EPVS]-1659869220569
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869220570
GPR[SPVAP]-1659869220570
GPR[EPVAP]-1659869221873
GPR[SPVATF]-1659869221873
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869223014
GPR[EPVS]-1659869223014
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869223015
GPR[SPVAP]-1659869223015
GPR[EPVAP]-1659869224315
GPR[SPVATF]-1659869224315
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869225467
GPR[EPVS]-1659869225467
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869225469
GPR[SPVAP]-1659869225469
GPR[EPVAP]-1659869226781
GPR[SPVATF]-1659869226781
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869228661
GPR[EPVS]-1659869228661
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869228662
GPR[SPVAP]-1659869228662
GPR[EPVAP]-1659869231149
GPR[SPVATF]-1659869231149
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869232285
GPR[EPVS]-1659869232285
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869232287
GPR[SPVAP]-1659869232287
GPR[EPVAP]-1659869233601
GPR[SPVATF]-1659869233601
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869234743
GPR[EPVS]-1659869234743
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869234744
GPR[SPVAP]-1659869234744
GPR[EPVAP]-1659869236038
GPR[SPVATF]-1659869236038
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869237165
GPR[EPVS]-1659869237165
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869237166
GPR[SPVAP]-1659869237166
GPR[EPVAP]-1659869238474
GPR[SPVATF]-1659869238474
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869239606
GPR[EPVS]-1659869239606
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869239607
GPR[SPVAP]-1659869239607
GPR[EPVAP]-1659869240910
GPR[SPVATF]-1659869240910
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869242027
GPR[EPVS]-1659869242027
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869242029
GPR[SPVAP]-1659869242029
GPR[EPVAP]-1659869243341
GPR[SPVATF]-1659869243341
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869244480
GPR[EPVS]-1659869244480
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869244481
GPR[SPVAP]-1659869244481
GPR[EPVAP]-1659869245829
GPR[SPVATF]-1659869245829
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869247015
GPR[EPVS]-1659869247015
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869247016
GPR[SPVAP]-1659869247016
GPR[EPVAP]-1659869248333
GPR[SPVATF]-1659869248333
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869249454
GPR[EPVS]-1659869249454
========
if(newline<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
MM Copying to MM
GPR[SPVS]-1659869249456
GPR[SPVAP]-1659869249456
GPR[EPVAP]-1659869250215
GPR[EPVS]-1659869250215
GPR[ESUN]-1659869250217
GPR[SSUN]-1659869250217
org.jfree.data.time.TimeSeries,1057
========
clone.shape=ShapeUtilities.clone(this.shape);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869255226
GPR[SPVAP]-1659869255226
GPR[EPVAP]-1659869257586
GPR[EPVS]-1659869257586
========
clone.line=ShapeUtilities.clone(this.line);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869257587
GPR[SPVAP]-1659869257587
GPR[EPVAP]-1659869258650
GPR[EPVS]-1659869258650
========
clone.itemLabelGeneratorList=(ObjectList)this.itemLabelGeneratorList.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869258651
GPR[SPVAP]-1659869258651
GPR[EPVAP]-1659869259623
GPR[EPVS]-1659869259623
========
clone.toolTipGeneratorList=(ObjectList)this.toolTipGeneratorList.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869259624
GPR[SPVAP]-1659869259624
GPR[EPVAP]-1659869260568
GPR[EPVS]-1659869260568
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869260570
GPR[SPVAP]-1659869260570
GPR[EPVAP]-1659869261491
GPR[EPVS]-1659869261491
========
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869261492
GPR[SPVAP]-1659869261492
GPR[EPVAP]-1659869262421
GPR[EPVS]-1659869262421
========
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869262422
GPR[SPVAP]-1659869262422
GPR[EPVAP]-1659869263333
GPR[EPVS]-1659869263333
========
if(this.item!=null){
clone.yDateFormat=(DateFormat)this.yDateFormat.clone();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869263335
GPR[SPVAP]-1659869263335
GPR[EPVAP]-1659869264262
GPR[EPVS]-1659869264262
========
if(this.item!=null){
clone.paintList=(PaintList)this.paintList.clone();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869264264
GPR[SPVAP]-1659869264264
GPR[EPVAP]-1659869265213
GPR[EPVS]-1659869265213
========
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869265215
GPR[SPVAP]-1659869265215
GPR[EPVAP]-1659869266170
GPR[EPVS]-1659869266170
========
clone.backgroundDomainMarkers=(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869266172
GPR[SPVAP]-1659869266172
GPR[EPVAP]-1659869267193
GPR[EPVS]-1659869267193
========
clone.foregroundRangeMarkers=(Map)ObjectUtilities.clone(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869267194
GPR[SPVAP]-1659869267194
GPR[EPVAP]-1659869268125
GPR[EPVS]-1659869268125
========
clone.backgroundRangeMarkers=(Map)ObjectUtilities.clone(this.backgroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869268127
GPR[SPVAP]-1659869268127
GPR[EPVAP]-1659869269070
GPR[EPVS]-1659869269070
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869269072
GPR[SPVAP]-1659869269072
GPR[EPVAP]-1659869270034
GPR[EPVS]-1659869270034
========
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869270036
GPR[SPVAP]-1659869270037
GPR[EPVAP]-1659869273233
GPR[SPVATF]-1659869273233
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869274367
GPR[EPVS]-1659869274367
========
for(int index=start;index<=seriesCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869274368
GPR[SPVAP]-1659869274368
GPR[EPVAP]-1659869275137
GPR[EPVS]-1659869275137
========
for(int index=start;index<=end;index++){
clone.data.add(item.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869275138
GPR[SPVAP]-1659869275138
GPR[EPVAP]-1659869275926
GPR[EPVS]-1659869275926
========
for(int index=start;index<=end;index++){
updateBoundsForRemovedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869275928
GPR[SPVAP]-1659869275928
GPR[EPVAP]-1659869276686
GPR[EPVS]-1659869276686
========
for(int index=start;index<=end;index++){
clone.frame=(BlockFrame)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869276688
GPR[SPVAP]-1659869276688
GPR[EPVAP]-1659869277437
GPR[EPVS]-1659869277437
========
clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869277439
GPR[SPVAP]-1659869277439
GPR[EPVAP]-1659869278195
GPR[EPVS]-1659869278195
========
result.legendBar=ShapeUtilities.clone(this.legendBar);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869278196
GPR[SPVAP]-1659869278196
GPR[EPVAP]-1659869278966
GPR[EPVS]-1659869278966
========
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869278968
GPR[SPVAP]-1659869278968
GPR[EPVAP]-1659869279768
GPR[EPVS]-1659869279768
========
if(getItemCount()>this.end){
XYDataItem clone=(XYDataItem)this.data.remove(0);
updateBoundsForRemovedItem(removed);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869279771
GPR[SPVAP]-1659869279771
GPR[EPVAP]-1659869280541
GPR[EPVS]-1659869280541
========
for(int index=start;index<=end;index++){
clone.subplotInfo.add(item.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869280544
GPR[SPVAP]-1659869280544
GPR[EPVAP]-1659869281301
GPR[EPVS]-1659869281301
========
for(int index=start;index<=end;index++){
clone.entities.add(item.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869281302
GPR[SPVAP]-1659869281302
GPR[EPVAP]-1659869282052
GPR[EPVS]-1659869282052
========
clone=(TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(index).clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869282054
GPR[SPVAP]-1659869282054
GPR[EPVAP]-1659869282810
GPR[EPVS]-1659869282810
========
(TimeSeriesDataItem)this.data.get(index).setValue(item.getValue());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869282812
GPR[SPVAP]-1659869282812
GPR[EPVAP]-1659869283439
GPR[EPVS]-1659869283439
========
clone.datasets=(ValueDataset[])this.datasets.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869283441
GPR[SPVAP]-1659869283441
GPR[EPVAP]-1659869284186
GPR[EPVS]-1659869284186
========
clone.seriesNeedle=(MeterNeedle[])this.seriesNeedle.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869284188
GPR[SPVAP]-1659869284188
GPR[EPVAP]-1659869285039
GPR[EPVS]-1659869285039
========
clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869285041
GPR[SPVAP]-1659869285041
GPR[EPVAP]-1659869285835
GPR[EPVS]-1659869285835
========
clone.listenerList=new EventListenerList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869285836
GPR[SPVAP]-1659869285836
GPR[EPVAP]-1659869286596
GPR[EPVS]-1659869286596
========
if(null!=null){
result=Collections.unmodifiableCollection(result);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869286597
GPR[SPVAP]-1659869286597
GPR[EPVAP]-1659869287410
GPR[EPVS]-1659869287410
========
for(int index=start;index<=itemCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869287413
GPR[SPVAP]-1659869287413
GPR[EPVAP]-1659869288551
GPR[EPVS]-1659869288551
========
if(this.item!=null){
clone.legendTextPaint=(PaintList)this.legendTextPaint.clone();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869288553
GPR[SPVAP]-1659869288553
GPR[EPVAP]-1659869289349
GPR[EPVS]-1659869289349
========
clone.rangeAxis=(ValueAxis)ObjectUtilities.clone(this.rangeAxis);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869289351
GPR[SPVAP]-1659869289351
GPR[EPVAP]-1659869290158
GPR[EPVS]-1659869290158
========
if(clone.rangeAxis!=null){
clone.rangeAxis.setPlot((ThermometerPlot)super.clone());
clone.rangeAxis.addChangeListener(clone);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869290160
GPR[SPVAP]-1659869290160
GPR[EPVAP]-1659869290934
GPR[EPVS]-1659869290934
========
clone.valueFormat=(NumberFormat)this.valueFormat.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869290936
GPR[SPVAP]-1659869290936
GPR[EPVAP]-1659869291747
GPR[EPVS]-1659869291747
========
clone.subrangePaint=(Paint[])this.subrangePaint.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869291749
GPR[SPVAP]-1659869291749
GPR[EPVAP]-1659869292504
GPR[EPVS]-1659869292504
========
clone.timeZone=(TimeZone)this.timeZone.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869292506
GPR[SPVAP]-1659869292506
GPR[EPVAP]-1659869293262
GPR[EPVS]-1659869293262
========
for(int index=start;index<=end;index++){
clone.paintScale=(PaintScale)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869293264
GPR[SPVAP]-1659869293264
GPR[EPVAP]-1659869294023
GPR[EPVS]-1659869294023
========
for(int index=start;index<=end;index++){
clone.underlying=(GanttCategoryDataset)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869294025
GPR[SPVAP]-1659869294025
GPR[EPVAP]-1659869294777
GPR[EPVS]-1659869294777
========
for(int index=start;index<=end;index++){
clone.underlying=(CategoryDataset)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869294778
GPR[SPVAP]-1659869294778
GPR[EPVAP]-1659869295527
GPR[EPVS]-1659869295527
========
for(int index=start;index<=end;index++){
clone.underlying=(XYDataset)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869295529
GPR[SPVAP]-1659869295529
GPR[EPVAP]-1659869296280
GPR[EPVS]-1659869296280
========
for(int index=start;index<=end;index++){
clone.object=item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869296296
GPR[SPVAP]-1659869296296
GPR[EPVAP]-1659869297045
GPR[EPVS]-1659869297045
========
clone.domainAxisLocations=(ObjectList)this.domainAxisLocations.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869297047
GPR[SPVAP]-1659869297047
GPR[EPVAP]-1659869297811
GPR[EPVS]-1659869297811
========
clone.rangeAxes=new ObjectList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869297813
GPR[SPVAP]-1659869297813
GPR[EPVAP]-1659869298593
GPR[EPVS]-1659869298594
========
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869298595
GPR[SPVAP]-1659869298596
GPR[EPVAP]-1659869299338
GPR[EPVS]-1659869299338
========
chart.subtitles=new ArrayList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869299339
GPR[SPVAP]-1659869299339
GPR[EPVAP]-1659869300117
GPR[EPVS]-1659869300117
========
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869300119
GPR[SPVAP]-1659869300119
GPR[EPVAP]-1659869300915
GPR[EPVS]-1659869300915
========
clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869300916
GPR[SPVAP]-1659869300916
GPR[EPVAP]-1659869301658
GPR[EPVS]-1659869301658
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869301659
GPR[SPVAP]-1659869301659
GPR[EPVAP]-1659869302443
GPR[EPVS]-1659869302443
========
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869302444
GPR[SPVAP]-1659869302444
GPR[EPVAP]-1659869303195
GPR[EPVS]-1659869303195
========
if(clone.legendItemToolTipGenerator instanceof PublicCloneable){
clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869303197
GPR[SPVAP]-1659869303197
GPR[EPVAP]-1659869304007
GPR[EPVS]-1659869304007
========
clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869304009
GPR[SPVAP]-1659869304009
GPR[EPVAP]-1659869304760
GPR[EPVS]-1659869304760
========
clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869304761
GPR[SPVAP]-1659869304761
GPR[EPVAP]-1659869305516
GPR[EPVS]-1659869305516
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869305517
GPR[SPVAP]-1659869305517
GPR[EPVAP]-1659869306287
GPR[EPVS]-1659869306287
========
clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869306289
GPR[SPVAP]-1659869306289
GPR[EPVAP]-1659869307039
GPR[EPVS]-1659869307039
========
clone.rangeAxisLocations=(ObjectList)ObjectUtilities.clone(this.rangeAxisLocations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869307040
GPR[SPVAP]-1659869307040
GPR[EPVAP]-1659869307796
GPR[EPVS]-1659869307796
========
clone.datasets=(ObjectList)ObjectUtilities.clone(this.datasets);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869307797
GPR[SPVAP]-1659869307797
GPR[EPVAP]-1659869308554
GPR[EPVS]-1659869308554
========
clone.rangeAxes=(ObjectList)ObjectUtilities.clone(this.rangeAxes);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869308556
GPR[SPVAP]-1659869308556
GPR[EPVAP]-1659869309360
GPR[EPVS]-1659869309360
========
clone.domainAxisLocations=(ObjectList)this.domainAxisLocations.clone();
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869309361
GPR[SPVAP]-1659869309361
GPR[EPVAP]-1659869310111
GPR[EPVS]-1659869310111
========
if(clone!=null){
removeLayer(existing);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869310114
GPR[SPVAP]-1659869310114
GPR[EPVAP]-1659869310896
GPR[EPVS]-1659869310896
========
fireChangeEvent();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869310897
GPR[SPVAP]-1659869310897
GPR[EPVAP]-1659869311681
GPR[EPVS]-1659869311681
========
this.data.remove(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869311683
GPR[SPVAP]-1659869311683
GPR[EPVAP]-1659869312431
GPR[EPVS]-1659869312431
========
this.data.remove(index);
fireChangeEvent();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869312432
GPR[SPVAP]-1659869312432
GPR[EPVAP]-1659869313174
GPR[EPVS]-1659869313174
========
clone.data=new java.util.ArrayList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869313176
GPR[SPVAP]-1659869313176
GPR[EPVAP]-1659869313925
GPR[EPVS]-1659869313925
========
for(int index=start;index<=count;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869313928
GPR[SPVAP]-1659869313928
GPR[EPVAP]-1659869314679
GPR[EPVS]-1659869314679
========
for(int index=start;index<=end;index++){
result=(Number)data.get(index).doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869314682
GPR[SPVAP]-1659869314682
GPR[EPVAP]-1659869315456
GPR[EPVS]-1659869315456
========
clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869315458
GPR[SPVAP]-1659869315458
GPR[EPVAP]-1659869316211
GPR[EPVS]-1659869316211
========
clone.intervals=new java.util.ArrayList(this.intervals);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869316212
GPR[SPVAP]-1659869316212
GPR[EPVAP]-1659869316981
GPR[EPVS]-1659869316981
========
for(int index=start;index<=end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869316984
GPR[SPVAP]-1659869316984
GPR[EPVAP]-1659869317763
GPR[EPVS]-1659869317763
========
for(int index=start;index<=end;index++){
System.arraycopy(data[1],0,new double[y.length],0,y.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869317764
GPR[SPVAP]-1659869317764
GPR[EPVAP]-1659869318518
GPR[EPVS]-1659869318518
========
for(int index=start;index<=end;index++){
clone.seriesList.add(index,new double[][]{new double[x.length],new double[y.length]});
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869318519
GPR[SPVAP]-1659869318519
GPR[EPVAP]-1659869319269
GPR[EPVS]-1659869319269
========
for(int index=start;index<=end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
System.arraycopy(data[1],0,new double[y.length],0,y.length);
clone.seriesList.add(index,new double[][]{new double[x.length],new double[y.length]});

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869319271
GPR[SPVAP]-1659869319271
GPR[EPVAP]-1659869320022
GPR[EPVS]-1659869320022
========
for(int index=start;index<=end;index++){
if(index>=data.size()){
break;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869320025
GPR[SPVAP]-1659869320025
GPR[EPVAP]-1659869321348
GPR[SPVATF]-1659869321348
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869322495
GPR[EPVS]-1659869322495
========
for(int index=start;index<=end;index++){
if(item!=null){
item.setBounds(new Rectangle2D.Double(start*minY,start*minY,width,height));
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869322497
GPR[SPVAP]-1659869322497
GPR[EPVAP]-1659869323243
GPR[EPVS]-1659869323243
========
for(int index=start;index<=end;index++){
if(index>=data.size()){
break;
}
if(item!=null){
item.setBounds(new Rectangle2D.Double(start*minY,start*minY,width,height));
}

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869323245
GPR[SPVAP]-1659869323245
GPR[EPVAP]-1659869324026
GPR[EPVS]-1659869324026
========
for(int index=start;index<=end;index++){
toAdd=item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869324029
GPR[SPVAP]-1659869324029
GPR[EPVAP]-1659869324788
GPR[EPVS]-1659869324788
========
datasetChanged(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869324790
GPR[SPVAP]-1659869324790
GPR[EPVAP]-1659869325541
GPR[EPVS]-1659869325541
========
for(int index=start;index<=end;index++){
copy.data=new java.util.ArrayList();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869325543
GPR[SPVAP]-1659869325543
GPR[EPVAP]-1659869326820
GPR[SPVATF]-1659869326820
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869327966
GPR[EPVS]-1659869327966
========
if(index>=0){
return item.getObject(index);
}else {
return null;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869327968
GPR[SPVAP]-1659869327968
GPR[EPVAP]-1659869328713
GPR[EPVS]-1659869328713
========
this.index=DefaultAxisEditor.getInstance(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869328714
GPR[SPVAP]-1659869328714
GPR[EPVAP]-1659869329496
GPR[EPVS]-1659869329496
========
for(int index=start;index<=end;index++){
System.arraycopy(data[2],0,new double[z.length],0,z.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869329498
GPR[SPVAP]-1659869329498
GPR[EPVAP]-1659869330262
GPR[EPVS]-1659869330262
========
for(int index=start;index<=end;index++){
clone.seriesList.add(index,new double[][]{new double[x.length],new double[y.length],new double[z.length]});
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869330263
GPR[SPVAP]-1659869330263
GPR[EPVAP]-1659869331013
GPR[EPVS]-1659869331013
========
for(int index=start;index<=end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
System.arraycopy(data[1],0,new double[y.length],0,y.length);
System.arraycopy(data[2],0,new double[z.length],0,z.length);
clone.seriesList.add(index,new double[][]{new double[x.length],new double[y.length],new double[z.length]});

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869331014
GPR[SPVAP]-1659869331014
GPR[EPVAP]-1659869331791
GPR[EPVS]-1659869331791
========
for(int index=start;index<end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869331792
GPR[SPVAP]-1659869331792
GPR[EPVAP]-1659869332565
GPR[EPVS]-1659869332565
========
for(int index=start;index<end;index++){
System.arraycopy(data[1],0,new double[y.length],0,y.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869332567
GPR[SPVAP]-1659869332567
GPR[EPVAP]-1659869333343
GPR[EPVS]-1659869333343
========
for(int index=start;index<=end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
System.arraycopy(data[1],0,new double[y.length],0,y.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869333344
GPR[SPVAP]-1659869333344
GPR[EPVAP]-1659869334098
GPR[EPVS]-1659869334098
========
for(int index=start;index<end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
System.arraycopy(data[1],0,new double[y.length],0,y.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869334099
GPR[SPVAP]-1659869334099
GPR[EPVAP]-1659869334914
GPR[EPVS]-1659869334914
========
for(int index=start;index<=end;index++){
if((Block)data.get(index)!=null){
maxH=Math.max(clone,item.getHeight());
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869334916
GPR[SPVAP]-1659869334916
GPR[EPVAP]-1659869335687
GPR[EPVS]-1659869335687
========
for(int index=start;index<=end;index++){
if(index>=data.size()){
break;
}
if((Block)data.get(index)!=null){
maxH=Math.max(clone,item.getHeight());
}

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869335688
GPR[SPVAP]-1659869335688
GPR[EPVAP]-1659869336439
GPR[EPVS]-1659869336439
========
for(int index=start;index<=end;index++){
if((Block)data.get(index)!=null){
maxW=Math.max(clone,item.getWidth());
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869336441
GPR[SPVAP]-1659869336441
GPR[EPVAP]-1659869337239
GPR[EPVS]-1659869337239
========
for(int index=start;index<=end;index++){
if(index>=data.size()){
break;
}
if((Block)data.get(index)!=null){
maxW=Math.max(clone,item.getWidth());
}

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869337240
GPR[SPVAP]-1659869337240
GPR[EPVAP]-1659869337990
GPR[EPVS]-1659869337990
========
data.add(DEFAULT_RANGE_DESCRIPTION);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869337992
GPR[SPVAP]-1659869337992
GPR[EPVAP]-1659869339309
GPR[SPVATF]-1659869339309
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869340503
GPR[EPVS]-1659869340503
========
for(int index=start;index<=np;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869340505
GPR[SPVAP]-1659869340505
GPR[EPVAP]-1659869341263
GPR[EPVS]-1659869341263
========
for(int index=start;index<=end;index++){
x[i]=cpi.x;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869341264
GPR[SPVAP]-1659869341264
GPR[EPVAP]-1659869342039
GPR[EPVS]-1659869342039
========
for(int index=start;index<=end;index++){
d[i]=cpi.y;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869342040
GPR[SPVAP]-1659869342040
GPR[EPVAP]-1659869342790
GPR[EPVS]-1659869342790
========
for(int index=start;index<=end;index++){
x[i]=cpi.x;
d[i]=cpi.y;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869342791
GPR[SPVAP]-1659869342791
GPR[EPVAP]-1659869343546
GPR[EPVS]-1659869343546
========
for(int index=start;index<=end;index++){
result=(Number)data.get(0).doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869343548
GPR[SPVAP]-1659869343548
GPR[EPVAP]-1659869344297
GPR[EPVS]-1659869344297
========
for(int index=start;index<=end;index++){
clone.entities=(EntityCollection)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869344299
GPR[SPVAP]-1659869344299
GPR[EPVAP]-1659869345072
GPR[EPVS]-1659869345072
========
for(int index=start;index<=end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869345073
GPR[SPVAP]-1659869345073
GPR[EPVAP]-1659869345825
GPR[EPVS]-1659869345825
========
for(int index=start;index<seriesCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869345828
GPR[SPVAP]-1659869345828
GPR[EPVAP]-1659869346583
GPR[EPVS]-1659869346583
========
clone.data=new java.util.ArrayList(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869346585
GPR[SPVAP]-1659869346585
GPR[EPVAP]-1659869347336
GPR[EPVS]-1659869347336
========
for(int index=start;index<=end;index++){
clone.rows.add(item.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869347338
GPR[SPVAP]-1659869347338
GPR[EPVAP]-1659869348094
GPR[EPVS]-1659869348094
========
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869348096
GPR[SPVAP]-1659869348096
GPR[EPVAP]-1659869348853
GPR[EPVS]-1659869348853
========
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869348855
GPR[SPVAP]-1659869348855
GPR[EPVAP]-1659869349619
GPR[EPVS]-1659869349619
========
clone.rows=new java.util.ArrayList(this.rows.size());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869349620
GPR[SPVAP]-1659869349620
GPR[EPVAP]-1659869350374
GPR[EPVS]-1659869350374
========
for(int index=start;index<=end;index++){
if(!Arrays.equals(clone,(double[][])that.seriesList.get(index)[0])){
return false;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869350376
GPR[SPVAP]-1659869350376
GPR[EPVAP]-1659869351145
GPR[EPVS]-1659869351145
========
for(int index=start;index<=end;index++){
if(!Arrays.equals((double[][])this.data.get(index)[1],(double[][])that.seriesList.get(index)[1])){
return false;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869351147
GPR[SPVAP]-1659869351147
GPR[EPVAP]-1659869351894
GPR[EPVS]-1659869351894
========
for(int index=start;index<=end;index++){
if(!Arrays.equals(clone,(double[][])that.seriesList.get(index)[0])){
return false;
}
if(!Arrays.equals((double[][])this.data.get(index)[1],(double[][])that.seriesList.get(index)[1])){
return false;
}

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869351896
GPR[SPVAP]-1659869351896
GPR[EPVAP]-1659869352682
GPR[EPVS]-1659869352682
========
this.end=start;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869352685
GPR[SPVAP]-1659869352685
GPR[EPVAP]-1659869353455
GPR[EPVS]-1659869353455
========
if(isTickMarksVisible()){
minY=getTickMarkOutsideLength();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869353457
GPR[SPVAP]-1659869353457
GPR[EPVAP]-1659869354211
GPR[EPVS]-1659869354211
========
configureDomainAxes();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869354212
GPR[SPVAP]-1659869354212
GPR[EPVAP]-1659869355006
GPR[EPVS]-1659869355006
========
configureRangeAxes();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869355007
GPR[SPVAP]-1659869355007
GPR[EPVAP]-1659869355774
GPR[EPVS]-1659869355774
========
for(int index=start;index<end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869355776
GPR[SPVAP]-1659869355776
GPR[EPVAP]-1659869356523
GPR[EPVS]-1659869356523
========
fireChartChanged();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869356526
GPR[SPVAP]-1659869356526
GPR[EPVAP]-1659869357289
GPR[EPVS]-1659869357289
========
for(int index=start;index<=numberOfColumns;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869357291
GPR[SPVAP]-1659869357291
GPR[EPVAP]-1659869358069
GPR[EPVS]-1659869358069
========
for(int index=start;index<=end;index++){
result=item.getDomainAxis(index);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869358072
GPR[SPVAP]-1659869358072
GPR[EPVAP]-1659869358844
GPR[EPVS]-1659869358844
========
for(int index=start;index<=end;index++){
result=item.getRangeAxis(index);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869358846
GPR[SPVAP]-1659869358846
GPR[EPVAP]-1659869359600
GPR[EPVS]-1659869359600
========
for(int index=start;index<count;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869359602
GPR[SPVAP]-1659869359602
GPR[EPVAP]-1659869360376
GPR[EPVS]-1659869360376
========
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869360378
GPR[SPVAP]-1659869360378
GPR[EPVAP]-1659869361135
GPR[EPVS]-1659869361135
========
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869361136
GPR[SPVAP]-1659869361136
GPR[EPVAP]-1659869361899
GPR[EPVS]-1659869361899
========
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869361900
GPR[SPVAP]-1659869361900
GPR[EPVAP]-1659869362651
GPR[EPVS]-1659869362651
========
for(int index=start;index<=last;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869362653
GPR[SPVAP]-1659869362653
GPR[EPVAP]-1659869363422
GPR[EPVS]-1659869363422
========
for(int index=start;index<=n;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869363425
GPR[SPVAP]-1659869363425
GPR[EPVAP]-1659869364198
GPR[EPVS]-1659869364198
========
for(int index=start;index<=end;index++){
totalWeight+=item.getWeight();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869364199
GPR[SPVAP]-1659869364199
GPR[EPVAP]-1659869364965
GPR[EPVS]-1659869364965
========
for(int index=start;index<n;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869364967
GPR[SPVAP]-1659869364967
GPR[EPVAP]-1659869365710
GPR[EPVS]-1659869365710
========
for(int index=start;index<end;index++){
totalWeight+=item.getWeight();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869365711
GPR[SPVAP]-1659869365711
GPR[EPVAP]-1659869366477
GPR[EPVS]-1659869366477
========
for(int index=start;index<=n;index++){
totalWeight+=item.getWeight();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869366478
GPR[SPVAP]-1659869366478
GPR[EPVAP]-1659869367231
GPR[EPVS]-1659869367231
========
for(int index=start;index<n;index++){
totalWeight+=item.getWeight();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869367232
GPR[SPVAP]-1659869367232
GPR[EPVAP]-1659869367994
GPR[EPVS]-1659869367994
========
for(int index=start;index<=samples;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869367996
GPR[SPVAP]-1659869367996
GPR[EPVAP]-1659869368746
GPR[EPVS]-1659869368746
========
this.end=width;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869368748
GPR[SPVAP]-1659869368748
GPR[EPVAP]-1659869369499
GPR[EPVS]-1659869369499
========
this.end=height;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869369501
GPR[SPVAP]-1659869369501
GPR[EPVAP]-1659869370239
GPR[EPVS]-1659869370239
========
this.end=end;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869370241
GPR[SPVAP]-1659869370241
GPR[EPVAP]-1659869370986
GPR[EPVS]-1659869370986
========
data.add(removeStringDelimiters(DEFAULT_RANGE_DESCRIPTION.substring(clone,line.length())));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869370988
GPR[SPVAP]-1659869370988
GPR[EPVAP]-1659869371740
GPR[EPVS]-1659869371740
========
for(int index=start;index<=datasetCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869371742
GPR[SPVAP]-1659869371742
GPR[EPVAP]-1659869372497
GPR[EPVS]-1659869372497
========
for(int index=start;index<=end;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869372499
GPR[SPVAP]-1659869372499
GPR[EPVAP]-1659869373282
GPR[EPVS]-1659869373282
========
for(int index=start;index<=rendererCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869373284
GPR[SPVAP]-1659869373284
GPR[EPVAP]-1659869374046
GPR[EPVS]-1659869374046
========
for(int index=start;index<end;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869374048
GPR[SPVAP]-1659869374048
GPR[EPVAP]-1659869374798
GPR[EPVS]-1659869374798
========
for(int index=start;index<rendererCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869374800
GPR[SPVAP]-1659869374800
GPR[EPVAP]-1659869375557
GPR[EPVS]-1659869375557
========
for(int index=start;index<=rendererCount;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869375559
GPR[SPVAP]-1659869375559
GPR[EPVAP]-1659869376314
GPR[EPVS]-1659869376314
========
for(int index=start;index<rendererCount;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869376315
GPR[SPVAP]-1659869376315
GPR[EPVAP]-1659869377069
GPR[EPVS]-1659869377069
========
for(int index=start;index<=end;index++){
updateBounds(item.getPeriod(),index);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869377071
GPR[SPVAP]-1659869377071
GPR[EPVAP]-1659869377818
GPR[EPVS]-1659869377818
========
clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869377820
GPR[SPVAP]-1659869377820
GPR[EPVAP]-1659869378567
GPR[EPVS]-1659869378567
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869378568
GPR[SPVAP]-1659869378568
GPR[EPVAP]-1659869379327
GPR[EPVS]-1659869379327
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869379328
GPR[SPVAP]-1659869379328
GPR[EPVAP]-1659869380104
GPR[EPVS]-1659869380104
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869380105
GPR[SPVAP]-1659869380105
GPR[EPVAP]-1659869380861
GPR[EPVS]-1659869380861
========
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869380862
GPR[SPVAP]-1659869380862
GPR[EPVAP]-1659869381613
GPR[EPVS]-1659869381613
========
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869381615
GPR[SPVAP]-1659869381615
GPR[EPVAP]-1659869382361
GPR[EPVS]-1659869382361
========
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869382363
GPR[SPVAP]-1659869382363
GPR[EPVAP]-1659869383119
GPR[EPVS]-1659869383119
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869383120
GPR[SPVAP]-1659869383120
GPR[EPVAP]-1659869383867
GPR[EPVS]-1659869383867
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869383868
GPR[SPVAP]-1659869383868
GPR[EPVAP]-1659869384620
GPR[EPVS]-1659869384620
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869384621
GPR[SPVAP]-1659869384621
GPR[EPVAP]-1659869385395
GPR[EPVS]-1659869385395
========
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869385397
GPR[SPVAP]-1659869385397
GPR[EPVAP]-1659869386141
GPR[EPVS]-1659869386141
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869386142
GPR[SPVAP]-1659869386142
GPR[EPVAP]-1659869386964
GPR[EPVS]-1659869386964
========
for(int index=start;start<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869386967
GPR[SPVAP]-1659869386967
GPR[EPVAP]-1659869388273
GPR[SPVATF]-1659869388273
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869389383
GPR[EPVS]-1659869389383
========
for(int index=start;start<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869389384
GPR[SPVAP]-1659869389384
GPR[EPVAP]-1659869390666
GPR[SPVATF]-1659869390666
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869391803
GPR[EPVS]-1659869391803
========
for(int index=start;start<=count;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869391805
GPR[SPVAP]-1659869391805
GPR[EPVAP]-1659869392559
GPR[EPVS]-1659869392559
========
for(int index=start;start<count;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869392560
GPR[SPVAP]-1659869392560
GPR[EPVAP]-1659869393359
GPR[EPVS]-1659869393359
========
for(int index=start;index<=end;index++){
clone.baseItemLabelGenerator=(CategoryItemLabelGenerator)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869393362
GPR[SPVAP]-1659869393362
GPR[EPVAP]-1659869394102
GPR[EPVS]-1659869394102
========
for(int index=start;index<=end;index++){
clone.baseToolTipGenerator=(CategoryToolTipGenerator)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869394104
GPR[SPVAP]-1659869394104
GPR[EPVAP]-1659869394851
GPR[EPVS]-1659869394851
========
for(int index=start;index<=end;index++){
clone.baseURLGenerator=(CategoryURLGenerator)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869394852
GPR[SPVAP]-1659869394852
GPR[EPVAP]-1659869395602
GPR[EPVS]-1659869395602
========
for(int index=start;index<=values.length;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869395605
GPR[SPVAP]-1659869395605
GPR[EPVAP]-1659869396346
GPR[EPVS]-1659869396346
========
for(int index=start;index<=length;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869396347
GPR[SPVAP]-1659869396347
GPR[EPVAP]-1659869397102
GPR[EPVS]-1659869397102
========
for(int index=start;index<=end;index++){
if(values[i]<minY){
if(minY<0.0){
fraction=0.0;
}
binIndex=(int)(minY*start);
if(index>=start){
binIndex=start-1;
}
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869397103
GPR[SPVAP]-1659869397103
GPR[EPVAP]-1659869397886
GPR[EPVS]-1659869397886
========
for(int index=start;index<=end;index++){
item.incrementCount();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869397887
GPR[SPVAP]-1659869397887
GPR[EPVAP]-1659869398634
GPR[EPVS]-1659869398634
========
for(int index=start;index<=end;index++){
if(values[i]<minY){
if(minY<0.0){
fraction=0.0;
}
binIndex=(int)(minY*start);
if(index>=start){
binIndex=start-1;
}
}
item.incrementCount();

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869398635
GPR[SPVAP]-1659869398635
GPR[EPVAP]-1659869399382
GPR[EPVS]-1659869399382
========
removeValue(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869399383
GPR[SPVAP]-1659869399383
GPR[EPVAP]-1659869400134
GPR[EPVS]-1659869400134
========
removeRow(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869400136
GPR[SPVAP]-1659869400136
GPR[EPVAP]-1659869400912
GPR[EPVS]-1659869400912
========
for(int index=start;index<this.end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869400914
GPR[SPVAP]-1659869400914
GPR[EPVAP]-1659869401661
GPR[EPVS]-1659869401661
========
for(int index=start;index<=this.end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869401663
GPR[SPVAP]-1659869401663
GPR[EPVAP]-1659869402421
GPR[EPVS]-1659869402421
========
for(int index=start;index<=cols;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869402423
GPR[SPVAP]-1659869402423
GPR[EPVAP]-1659869403182
GPR[EPVS]-1659869403182
========
for(int index=start;index<=rows;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869403184
GPR[SPVAP]-1659869403184
GPR[EPVAP]-1659869403939
GPR[EPVS]-1659869403939
========
for(int index=start;index<=series;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869403941
GPR[SPVAP]-1659869403941
GPR[EPVAP]-1659869404696
GPR[EPVS]-1659869404696
========
for(int index=count;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869404698
GPR[SPVAP]-1659869404698
GPR[EPVAP]-1659869405455
GPR[EPVS]-1659869405455
========
for(int index=start;index<=end;index++){
item.clear();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869405457
GPR[SPVAP]-1659869405457
GPR[EPVAP]-1659869406220
GPR[EPVS]-1659869406220
========
for(int index=start;index<=end;index++){
if(item.getDescription().equals(DEFAULT_RANGE_DESCRIPTION)){
result=item;
break;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869406222
GPR[SPVAP]-1659869406222
GPR[EPVAP]-1659869406995
GPR[EPVS]-1659869406995
========
for(int index=start;index<=end;index++){
if(item!=null){
item.zoomRange(minY,minY);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869406997
GPR[SPVAP]-1659869406997
GPR[EPVAP]-1659869407776
GPR[EPVS]-1659869407776
========
for(int index=start;index<end;index++){
if(item!=null){
item.zoomRange(minY,minY);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869407779
GPR[SPVAP]-1659869407779
GPR[EPVAP]-1659869408527
GPR[EPVS]-1659869408527
========
for(int index=entityCount;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869408528
GPR[SPVAP]-1659869408528
GPR[EPVAP]-1659869409281
GPR[EPVS]-1659869409281
========
for(int index=start;index<=end;index++){
if(item.getArea().contains(minY,minY)){
return item;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869409282
GPR[SPVAP]-1659869409282
GPR[EPVAP]-1659869410046
GPR[EPVS]-1659869410046
========
for(int index=start;index<=domainAxisCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869410048
GPR[SPVAP]-1659869410048
GPR[EPVAP]-1659869410810
GPR[EPVS]-1659869410810
========
for(int index=start;index<=rangeAxisCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869410811
GPR[SPVAP]-1659869410811
GPR[EPVAP]-1659869411567
GPR[EPVS]-1659869411567
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869411569
GPR[SPVAP]-1659869411569
GPR[EPVAP]-1659869412324
GPR[EPVS]-1659869412324
========
for(int index=start;index<=end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869412325
GPR[SPVAP]-1659869412325
GPR[EPVAP]-1659869413087
GPR[EPVS]-1659869413087
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869413088
GPR[SPVAP]-1659869413088
GPR[EPVAP]-1659869413866
GPR[EPVS]-1659869413866
========
for(int index=start;index<=end;index++){
if(item!=null){
item.removeChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869413867
GPR[SPVAP]-1659869413867
GPR[EPVAP]-1659869414620
GPR[EPVS]-1659869414620
========
for(int index=start;index<=end;index++){
if(item!=null){
item.configure();
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869414623
GPR[SPVAP]-1659869414623
GPR[EPVAP]-1659869415379
GPR[EPVS]-1659869415379
========
for(int index=start;index<end;index++){
if(item!=null){
item.removeChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869415380
GPR[SPVAP]-1659869415380
GPR[EPVAP]-1659869416129
GPR[EPVS]-1659869416129
========
for(int index=start;index<end;index++){
if(item!=null){
item.configure();
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869416130
GPR[SPVAP]-1659869416130
GPR[EPVAP]-1659869416896
GPR[EPVS]-1659869416896
========
for(int index=start;index<=lowerCoordinates;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869416898
GPR[SPVAP]-1659869416898
GPR[EPVAP]-1659869417649
GPR[EPVS]-1659869417649
========
for(int index=start;index<=(end-start);index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869417652
GPR[SPVAP]-1659869417652
GPR[EPVAP]-1659869418956
GPR[SPVATF]-1659869418956
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869420099
GPR[EPVS]-1659869420099
========
for(int index=start;index<=start;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869420101
GPR[SPVAP]-1659869420101
GPR[EPVAP]-1659869421385
GPR[SPVATF]-1659869421385
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869422502
GPR[EPVS]-1659869422502
========
for(int index=start;index<=bins;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869422504
GPR[SPVAP]-1659869422504
GPR[EPVAP]-1659869423266
GPR[EPVS]-1659869423266
========
for(int index=start;index<start;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869423268
GPR[SPVAP]-1659869423268
GPR[EPVAP]-1659869424553
GPR[SPVATF]-1659869424554
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869425677
GPR[EPVS]-1659869425677
========
for(int index=start;index<=end;index++){
item.handleClick(start,start,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869425678
GPR[SPVAP]-1659869425678
GPR[EPVAP]-1659869426435
GPR[EPVS]-1659869426435
========
for(int index=start;index<end;index++){
item.handleClick(start,start,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869426437
GPR[SPVAP]-1659869426437
GPR[EPVAP]-1659869427182
GPR[EPVS]-1659869427182
========
for(int index=start;index<=minorTickSpaces;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869427185
GPR[SPVAP]-1659869427185
GPR[EPVAP]-1659869427934
GPR[EPVS]-1659869427934
========
for(int index=start;index<=end;index++){
if(item!=null){
RectangleEdge clone=getDomainAxisEdge(index);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869427935
GPR[SPVAP]-1659869427935
GPR[EPVAP]-1659869428738
GPR[EPVS]-1659869428738
========
for(int index=start;index<=end;index++){
if(item!=null){
RectangleEdge clone=getRangeAxisEdge(index);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869428740
GPR[SPVAP]-1659869428740
GPR[EPVAP]-1659869429486
GPR[EPVS]-1659869429486
========
for(int index=start;index<end;index++){
if(item!=null){
RectangleEdge clone=getDomainAxisEdge(index);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869429488
GPR[SPVAP]-1659869429488
GPR[EPVAP]-1659869430233
GPR[EPVS]-1659869430233
========
for(int index=start;index<end;index++){
if(item!=null){
RectangleEdge clone=getRangeAxisEdge(index);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869430234
GPR[SPVAP]-1659869430234
GPR[EPVAP]-1659869430981
GPR[EPVS]-1659869430981
========
for(int index=start;index<=end;index++){
start++;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869430983
GPR[SPVAP]-1659869430983
GPR[EPVAP]-1659869432257
GPR[SPVATF]-1659869432257
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869433374
GPR[EPVS]-1659869433374
========
fireDatasetChanged(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869433376
GPR[SPVAP]-1659869433376
GPR[EPVAP]-1659869434127
GPR[EPVS]-1659869434127
========
for(int index=start;index<=end;index++){
this.data.remove(item);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869434128
GPR[SPVAP]-1659869434129
GPR[EPVAP]-1659869434874
GPR[EPVS]-1659869434874
========
for(int index=start;index<=end;index++){
item.removePropertyChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869434875
GPR[SPVAP]-1659869434875
GPR[EPVAP]-1659869435632
GPR[EPVS]-1659869435632
========
for(int index=start;index<=end;index++){
this.data.remove(item);
item.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869435634
GPR[SPVAP]-1659869435634
GPR[EPVAP]-1659869436389
GPR[EPVS]-1659869436389
========
for(int index=start;index<end;index++){
this.data.remove(item);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869436390
GPR[SPVAP]-1659869436390
GPR[EPVAP]-1659869437142
GPR[EPVS]-1659869437142
========
for(int index=start;index<end;index++){
item.removePropertyChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869437143
GPR[SPVAP]-1659869437143
GPR[EPVAP]-1659869437894
GPR[EPVS]-1659869437894
========
for(int index=start;index<end;index++){
this.data.remove(item);
item.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869437896
GPR[SPVAP]-1659869437896
GPR[EPVAP]-1659869438651
GPR[EPVS]-1659869438651
========
for(int index=start;index<=end;index++){
this.data.remove(item);
item.removePropertyChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869438652
GPR[SPVAP]-1659869438652
GPR[EPVAP]-1659869439447
GPR[EPVS]-1659869439447
========
for(int index=start;index<=end;index++){
this.data.remove(item);
this.data.remove(item);
item.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869439448
GPR[SPVAP]-1659869439448
GPR[EPVAP]-1659869440205
GPR[EPVS]-1659869440205
========
for(int index=start;index<=end;index++){
item.removePropertyChangeListener(this);
this.data.remove(item);
item.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869440207
GPR[SPVAP]-1659869440207
GPR[EPVAP]-1659869440981
GPR[EPVS]-1659869440981
========
for(int index=start;index<end;index++){
this.data.remove(item);
item.removePropertyChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869440983
GPR[SPVAP]-1659869440983
GPR[EPVAP]-1659869441726
GPR[EPVS]-1659869441726
========
for(int index=start;index<end;index++){
this.data.remove(item);
this.data.remove(item);
item.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869441729
GPR[SPVAP]-1659869441729
GPR[EPVAP]-1659869442476
GPR[EPVS]-1659869442476
========
for(int index=start;index<end;index++){
item.removePropertyChangeListener(this);
this.data.remove(item);
item.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869442478
GPR[SPVAP]-1659869442478
GPR[EPVAP]-1659869443225
GPR[EPVS]-1659869443225
========
for(int index=start;index<=end;index++){
this.data.remove(item);
item.removePropertyChangeListener(this);
this.data.remove(item);
item.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869443227
GPR[SPVAP]-1659869443227
GPR[EPVAP]-1659869443978
GPR[EPVS]-1659869443978
========
for(int index=start;index<end;index++){
this.data.remove(item);
item.removePropertyChangeListener(this);
this.data.remove(item);
item.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869443979
GPR[SPVAP]-1659869443979
GPR[EPVAP]-1659869444729
GPR[EPVS]-1659869444729
========
for(int index=start;index<=end;index++){
updateBoundsForAddedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869444730
GPR[SPVAP]-1659869444730
GPR[EPVAP]-1659869445491
GPR[EPVS]-1659869445491
========
this.minY=Double.NaN;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869445492
GPR[SPVAP]-1659869445492
GPR[EPVAP]-1659869446805
GPR[SPVATF]-1659869446805
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869448935
GPR[EPVS]-1659869448935
========
this.maxY=Double.NaN;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869448937
GPR[SPVAP]-1659869448937
GPR[EPVAP]-1659869450375
GPR[SPVATF]-1659869450375
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869451703
GPR[EPVS]-1659869451703
========
this.minY=Double.NaN;
this.maxY=Double.NaN;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869451704
GPR[SPVAP]-1659869451704
GPR[EPVAP]-1659869452988
GPR[SPVATF]-1659869452988
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869454099
GPR[EPVS]-1659869454099
========
for(int index=start;index<itemCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869454100
GPR[SPVAP]-1659869454100
GPR[EPVAP]-1659869454841
GPR[EPVS]-1659869454841
========
minY+=minY;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869454843
GPR[SPVAP]-1659869454843
GPR[EPVAP]-1659869456131
GPR[SPVATF]-1659869456131
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869457266
GPR[EPVS]-1659869457266
========
for(int index=start;index<=i;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869457268
GPR[SPVAP]-1659869457268
GPR[EPVAP]-1659869458019
GPR[EPVS]-1659869458019
========
for(int index=start;index<datasetCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869458022
GPR[SPVAP]-1659869458022
GPR[EPVAP]-1659869458774
GPR[EPVS]-1659869458774
========
this.start=index;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869458776
GPR[SPVAP]-1659869458776
GPR[EPVAP]-1659869459517
GPR[EPVS]-1659869459517
========
invalidateRangeInfo();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869459519
GPR[SPVAP]-1659869459519
GPR[EPVAP]-1659869460260
GPR[EPVS]-1659869460260
========
fireSeriesChanged();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869460261
GPR[SPVAP]-1659869460261
GPR[EPVAP]-1659869461548
GPR[SPVATF]-1659869461548
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869462701
GPR[EPVS]-1659869462701
========
for(int index=start;index<=end;index++){
new java.util.ArrayList().add(item.getKey());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869462704
GPR[SPVAP]-1659869462704
GPR[EPVAP]-1659869463457
GPR[EPVS]-1659869463457
========
for(int index=start;index<=end;index++){
minval=Math.min(minY,item.doubleValue());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869464628
GPR[SPVAP]-1659869464628
GPR[EPVAP]-1659869465386
GPR[EPVS]-1659869465386
========
for(int index=start;index<=end;index++){
maxval=Math.max(clone,item.doubleValue());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869465387
GPR[SPVAP]-1659869465387
GPR[EPVAP]-1659869466146
GPR[EPVS]-1659869466146
========
for(int index=start;index<=end;index++){
minval=Math.min(minY,item.doubleValue());
maxval=Math.max(clone,item.doubleValue());

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869466147
GPR[SPVAP]-1659869466147
GPR[EPVAP]-1659869466897
GPR[EPVS]-1659869466897
========
configureDomainAxes();
configureRangeAxes();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869466899
GPR[SPVAP]-1659869466899
GPR[EPVAP]-1659869467652
GPR[EPVS]-1659869467652
========
for(int index=start;index<series;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869467654
GPR[SPVAP]-1659869467654
GPR[EPVAP]-1659869468410
GPR[EPVS]-1659869468410
========
if(item==null){
return ;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869468412
GPR[SPVAP]-1659869468412
GPR[EPVAP]-1659869469154
GPR[EPVS]-1659869469154
========
item.add(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869469155
GPR[SPVAP]-1659869469155
GPR[EPVAP]-1659869469901
GPR[EPVS]-1659869469901
========
for(int index=start;index<=end;index++){
xNumber=new Long(item.getTime());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869469904
GPR[SPVAP]-1659869469904
GPR[EPVAP]-1659869470650
GPR[EPVS]-1659869470650
========
Collections.sort(this.data);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869470654
GPR[SPVAP]-1659869470654
GPR[EPVAP]-1659869471929
GPR[SPVATF]-1659869471929
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869473064
GPR[EPVS]-1659869473064
========
this.data.clear();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869473065
GPR[SPVAP]-1659869473065
GPR[EPVAP]-1659869474389
GPR[SPVATF]-1659869474389
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869475520
GPR[EPVS]-1659869475520
========
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869475521
GPR[SPVAP]-1659869475521
GPR[EPVAP]-1659869476277
GPR[EPVS]-1659869476277
========
datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869476279
GPR[SPVAP]-1659869476280
GPR[EPVAP]-1659869477030
GPR[EPVS]-1659869477030
========
this.clone=Math.max(this.size,maximumItemCount+1);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869477032
GPR[SPVAP]-1659869477032
GPR[EPVAP]-1659869477799
GPR[EPVS]-1659869477799
========
for(int index=start;index<=end;index++){
item.setParent(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869477801
GPR[SPVAP]-1659869477801
GPR[EPVAP]-1659869478601
GPR[EPVS]-1659869478601
========
result.subplots=(List)ObjectUtilities.deepClone(this.subplots);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869478602
GPR[SPVAP]-1659869478602
GPR[EPVAP]-1659869479357
GPR[EPVS]-1659869479357
========
for(int index=start;index<=subCategoryCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869479363
GPR[SPVAP]-1659869479363
GPR[EPVAP]-1659869480122
GPR[EPVS]-1659869480122
========
minY=direction%360;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869480124
GPR[SPVAP]-1659869480124
GPR[EPVAP]-1659869480880
GPR[EPVS]-1659869480880
========
data.add(new NumberTick(new Double(maximumItemAge),"",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869480882
GPR[SPVAP]-1659869480882
GPR[EPVAP]-1659869481627
GPR[EPVS]-1659869481627
========
for(int index=start;index<=end;index++){
item.setParent((CombinedRangeXYPlot)super.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869481629
GPR[SPVAP]-1659869481629
GPR[EPVAP]-1659869482378
GPR[EPVS]-1659869482378
========
if((CombinedRangeXYPlot)super.clone().getRangeAxis()!=null){
rangeAxis.configure();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869482380
GPR[SPVAP]-1659869482380
GPR[EPVAP]-1659869483150
GPR[EPVS]-1659869483150
========
for(int index=start;index<=end;index++){
item.setParent((CombinedRangeCategoryPlot)super.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869483151
GPR[SPVAP]-1659869483152
GPR[EPVAP]-1659869483931
GPR[EPVS]-1659869483931
========
if((CombinedRangeCategoryPlot)super.clone().getRangeAxis()!=null){
rangeAxis.configure();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869483933
GPR[SPVAP]-1659869483933
GPR[EPVAP]-1659869484681
GPR[EPVS]-1659869484681
========
for(int index=start;index<=end;index++){
item.setParent((CombinedDomainXYPlot)super.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869484682
GPR[SPVAP]-1659869484682
GPR[EPVAP]-1659869485464
GPR[EPVS]-1659869485465
========
if((CombinedDomainXYPlot)super.clone().getDomainAxis()!=null){
domainAxis.configure();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869485466
GPR[SPVAP]-1659869485466
GPR[EPVAP]-1659869486214
GPR[EPVS]-1659869486214
========
item.removeChangeListener(this);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869486216
GPR[SPVAP]-1659869486216
GPR[EPVAP]-1659869486994
GPR[EPVS]-1659869486994
========
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869486995
GPR[SPVAP]-1659869486995
GPR[EPVAP]-1659869487775
GPR[EPVS]-1659869487775
========
item.removeChangeListener(this);
this.data.remove(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869487776
GPR[SPVAP]-1659869487776
GPR[EPVAP]-1659869488528
GPR[EPVS]-1659869488528
========
item.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869488529
GPR[SPVAP]-1659869488529
GPR[EPVAP]-1659869489307
GPR[EPVS]-1659869489307
========
item.removeChangeListener(this);
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869489308
GPR[SPVAP]-1659869489308
GPR[EPVAP]-1659869490063
GPR[EPVS]-1659869490063
========
this.item=(double[])coefficients.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869490066
GPR[SPVAP]-1659869490066
GPR[EPVAP]-1659869490821
GPR[EPVS]-1659869490821
========
if(index==-1){
return DEFAULT_RANGE_DESCRIPTION;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869490823
GPR[SPVAP]-1659869490823
GPR[EPVAP]-1659869491573
GPR[EPVS]-1659869491573
========
clone=lookupSectionPaint(getSectionKey(index),false);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869491576
GPR[SPVAP]-1659869491576
GPR[EPVAP]-1659869492331
GPR[EPVS]-1659869492331
========
new JPanel(new BorderLayout()).setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869492334
GPR[SPVAP]-1659869492334
GPR[EPVAP]-1659869493106
GPR[EPVS]-1659869493106
========
item.setBorder(BorderFactory.createEmptyBorder(0,5,0,5));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869493107
GPR[SPVAP]-1659869493107
GPR[EPVAP]-1659869493875
GPR[EPVS]-1659869493875
========
data.add(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869493877
GPR[SPVAP]-1659869493877
GPR[EPVAP]-1659869494626
GPR[EPVS]-1659869494626
========
super();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869494628
GPR[SPVAP]-1659869494628
GPR[EPVAP]-1659869495395
GPR[EPVS]-1659869495395
========
if(polygon.length%2!=0){
throw new IllegalArgumentException("The \'polygon\' array must "+"contain an even number of items.");
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869495396
GPR[SPVAP]-1659869495396
GPR[EPVAP]-1659869496164
GPR[EPVS]-1659869496164
========
this.item=(double[])polygon.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869496165
GPR[SPVAP]-1659869496165
GPR[EPVAP]-1659869496919
GPR[EPVS]-1659869496919
========
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'seriesParameterName\' argument.");
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869496921
GPR[SPVAP]-1659869496921
GPR[EPVAP]-1659869498223
GPR[SPVATF]-1659869498223
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869499364
GPR[EPVS]-1659869499364
========
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'itemParameterName\' argument.");
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869499365
GPR[SPVAP]-1659869499365
GPR[EPVAP]-1659869500645
GPR[SPVATF]-1659869500645
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869501787
GPR[EPVS]-1659869501787
========
this.item=(DateFormat)dateFormat.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869501788
GPR[SPVAP]-1659869501788
GPR[EPVAP]-1659869502557
GPR[EPVS]-1659869502557
========
this.DEFAULT_RANGE_DESCRIPTION=prefix;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869502558
GPR[SPVAP]-1659869502558
GPR[EPVAP]-1659869503311
GPR[EPVS]-1659869503311
========
this.DEFAULT_RANGE_DESCRIPTION=seriesParameterName;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869503312
GPR[SPVAP]-1659869503312
GPR[EPVAP]-1659869504066
GPR[EPVS]-1659869504066
========
this.DEFAULT_RANGE_DESCRIPTION=itemParameterName;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869504068
GPR[SPVAP]-1659869504068
GPR[EPVAP]-1659869504861
GPR[EPVS]-1659869504861
========
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'seriesParameterName\' argument.");
}
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'itemParameterName\' argument.");
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869504862
GPR[SPVAP]-1659869504862
GPR[EPVAP]-1659869506183
GPR[SPVATF]-1659869506183
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869507337
GPR[EPVS]-1659869507337
========
clone.setModifier(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869507339
GPR[SPVAP]-1659869507339
GPR[EPVAP]-1659869508084
GPR[EPVS]-1659869508084
========
this.data.add(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869508085
GPR[SPVAP]-1659869508085
GPR[EPVAP]-1659869508830
GPR[EPVS]-1659869508830
========
if(item==null){
return -1;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869508833
GPR[SPVAP]-1659869508833
GPR[EPVAP]-1659869509603
GPR[EPVS]-1659869509603
========
new JPanel(new BorderLayout()).add(new JScrollPane(clone));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869509604
GPR[SPVAP]-1659869509604
GPR[EPVAP]-1659869510363
GPR[EPVS]-1659869510363
========
index=4*lenX;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869510365
GPR[SPVAP]-1659869510365
GPR[EPVAP]-1659869511116
GPR[EPVS]-1659869511116
========
repaint();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869511117
GPR[SPVAP]-1659869511117
GPR[EPVAP]-1659869511863
GPR[EPVS]-1659869511863
========
fireOverlayChanged();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869511864
GPR[SPVAP]-1659869511864
GPR[EPVAP]-1659869512623
GPR[EPVS]-1659869512623
========
this.minY=Double.NaN;
for(int index=start;index<=end;index++){
updateBoundsForAddedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869512625
GPR[SPVAP]-1659869512625
GPR[EPVAP]-1659869513384
GPR[EPVS]-1659869513384
========
this.maxY=Double.NaN;
for(int index=start;index<=end;index++){
updateBoundsForAddedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869513385
GPR[SPVAP]-1659869513385
GPR[EPVAP]-1659869514140
GPR[EPVS]-1659869514140
========
this.minY=Double.NaN;
this.maxY=Double.NaN;
for(int index=start;index<=end;index++){
updateBoundsForAddedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869514141
GPR[SPVAP]-1659869514141
GPR[EPVAP]-1659869514899
GPR[EPVS]-1659869514899
========
for(int index=start;index<=limit1;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869514900
GPR[SPVAP]-1659869514900
GPR[EPVAP]-1659869515652
GPR[EPVS]-1659869515652
========
for(int index=start;index<=end;index++){
start=start;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869515654
GPR[SPVAP]-1659869515654
GPR[EPVAP]-1659869516962
GPR[SPVATF]-1659869516962
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869518080
GPR[EPVS]-1659869518080
========
this.item=new java.util.ArrayList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869518082
GPR[SPVAP]-1659869518082
GPR[EPVAP]-1659869518830
GPR[EPVS]-1659869518830
========
this.item.add(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869518831
GPR[SPVAP]-1659869518831
GPR[EPVAP]-1659869519591
GPR[EPVS]-1659869519591
========
this.maximumItemCount=start;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869519593
GPR[SPVAP]-1659869519593
GPR[EPVAP]-1659869520873
GPR[SPVATF]-1659869520873
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869521996
GPR[EPVS]-1659869521996
========
this.maximumItemCount=maximumItemCount;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869521998
GPR[SPVAP]-1659869521998
GPR[EPVAP]-1659869523300
GPR[SPVATF]-1659869523300
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869524434
GPR[EPVS]-1659869524434
========
if(index>maximumItemCount){
delete(0,count-maximum);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869524435
GPR[SPVAP]-1659869524435
GPR[EPVAP]-1659869525219
GPR[EPVS]-1659869525219
========
for(int index=start;index<=size;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869525222
GPR[SPVAP]-1659869525222
GPR[EPVAP]-1659869525972
GPR[EPVS]-1659869525972
========
for(int index=start;index<size;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869525974
GPR[SPVAP]-1659869525974
GPR[EPVAP]-1659869526723
GPR[EPVS]-1659869526723
========
clone.datasets=(ValueDataset[])this.datasets.clone();
clone.seriesNeedle=(MeterNeedle[])this.seriesNeedle.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869526727
GPR[SPVAP]-1659869526727
GPR[EPVAP]-1659869527481
GPR[EPVS]-1659869527481
========
for(int index=start;index<minorTickSpaces;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869527483
GPR[SPVAP]-1659869527483
GPR[EPVAP]-1659869528265
GPR[EPVS]-1659869528265
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869528267
GPR[SPVAP]-1659869528267
GPR[EPVAP]-1659869529055
GPR[EPVS]-1659869529055
========
for(int index=start;index<end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869529056
GPR[SPVAP]-1659869529056
GPR[EPVAP]-1659869529827
GPR[EPVS]-1659869529827
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869529828
GPR[SPVAP]-1659869529828
GPR[EPVAP]-1659869530584
GPR[EPVS]-1659869530584
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869530585
GPR[SPVAP]-1659869530585
GPR[EPVAP]-1659869531360
GPR[EPVS]-1659869531360
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869531361
GPR[SPVAP]-1659869531361
GPR[EPVAP]-1659869532122
GPR[EPVS]-1659869532122
========
for(int index=start;index<=end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869532123
GPR[SPVAP]-1659869532123
GPR[EPVAP]-1659869532880
GPR[EPVS]-1659869532880
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869532881
GPR[SPVAP]-1659869532881
GPR[EPVAP]-1659869533683
GPR[EPVS]-1659869533683
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869533685
GPR[SPVAP]-1659869533685
GPR[EPVAP]-1659869534450
GPR[EPVS]-1659869534450
========
for(int index=start;index<end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869534451
GPR[SPVAP]-1659869534451
GPR[EPVAP]-1659869535247
GPR[EPVS]-1659869535247
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869535248
GPR[SPVAP]-1659869535248
GPR[EPVAP]-1659869535995
GPR[EPVS]-1659869535995
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869535996
GPR[SPVAP]-1659869535996
GPR[EPVAP]-1659869536762
GPR[EPVS]-1659869536762
========
for(int index=start;index<=datasetCount;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869536764
GPR[SPVAP]-1659869536764
GPR[EPVAP]-1659869537513
GPR[EPVS]-1659869537513
========
for(int index=start;index<datasetCount;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869537515
GPR[SPVAP]-1659869537515
GPR[EPVAP]-1659869538273
GPR[EPVS]-1659869538273
========
this.data.clear();
for(int index=start;index<=end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869538276
GPR[SPVAP]-1659869538276
GPR[EPVAP]-1659869539071
GPR[EPVS]-1659869539071
========
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869539072
GPR[SPVAP]-1659869539072
GPR[EPVAP]-1659869539842
GPR[EPVS]-1659869539842
========
this.data.clear();
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869539843
GPR[SPVAP]-1659869539843
GPR[EPVAP]-1659869540608
GPR[EPVS]-1659869540608
========
this.data.clear();
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869540610
GPR[SPVAP]-1659869540610
GPR[EPVAP]-1659869541370
GPR[EPVS]-1659869541370
========
configureRangeAxes();
fireChangeEvent();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869541372
GPR[SPVAP]-1659869541372
GPR[EPVAP]-1659869542122
GPR[EPVS]-1659869542122
========
try{
return Color.decode(DEFAULT_RANGE_DESCRIPTION);
}catch (NumberFormatException nfe) {
  try {
    final Field f=Color.class.getField(value);
    return (Color)f.get(null);
  }
 catch (  Exception ce) {
    return Color.black;
  }
}

for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
MM Copying to MM
GPR[SPVS]-1659869542125
GPR[SPVAP]-1659869542125
GPR[EPVAP]-1659869542878
GPR[EPVS]-1659869542878
========
if(this.data.size()>index){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869547656
GPR[SPVAP]-1659869547656
GPR[EPVAP]-1659869548447
GPR[EPVS]-1659869548447
========
if(this.data.size()>0){
break;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869548453
GPR[SPVAP]-1659869548453
GPR[EPVAP]-1659869549209
GPR[EPVS]-1659869549209
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869549211
GPR[SPVAP]-1659869549211
GPR[EPVAP]-1659869550538
GPR[SPVATF]-1659869550538
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869551647
GPR[EPVS]-1659869551647
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869551648
GPR[SPVAP]-1659869551648
GPR[EPVAP]-1659869552403
GPR[EPVS]-1659869552403
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869552405
GPR[SPVAP]-1659869552405
GPR[EPVAP]-1659869553155
GPR[EPVS]-1659869553155
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869553156
GPR[SPVAP]-1659869553156
GPR[EPVAP]-1659869553901
GPR[EPVS]-1659869553902
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869553903
GPR[SPVAP]-1659869553903
GPR[EPVAP]-1659869554670
GPR[EPVS]-1659869554670
========
this.data.clear();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869554672
GPR[SPVAP]-1659869554672
GPR[EPVAP]-1659869555972
GPR[SPVATF]-1659869555972
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869557103
GPR[EPVS]-1659869557103
========
fireDatasetChanged(new DatasetChangeInfo());
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869557105
GPR[SPVAP]-1659869557105
GPR[EPVAP]-1659869557860
GPR[EPVS]-1659869557860
========
if(this.data.size()>0){
for(int index=start;index<=numberOfColumns;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869557864
GPR[SPVAP]-1659869557864
GPR[EPVAP]-1659869558639
GPR[EPVS]-1659869558639
========
if(this.data.size()>end){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869558655
GPR[SPVAP]-1659869558655
GPR[EPVAP]-1659869559969
GPR[SPVATF]-1659869559969
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869561131
GPR[EPVS]-1659869561131
========
case 1 :

if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869561135
GPR[SPVAP]-1659869561135
GPR[EPVAP]-1659869561753
GPR[EPVS]-1659869561753
========
if((index<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869561755
GPR[SPVAP]-1659869561755
GPR[EPVAP]-1659869562523
GPR[EPVS]-1659869562523
========
item.removeChangeListener(this);
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869562525
GPR[SPVAP]-1659869562525
GPR[EPVAP]-1659869563279
GPR[EPVS]-1659869563279
========
this.data.remove(index);
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869563281
GPR[SPVAP]-1659869563281
GPR[EPVAP]-1659869564022
GPR[EPVS]-1659869564022
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
minval=Math.min(Double.POSITIVE_INFINITY,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869564024
GPR[SPVAP]-1659869564024
GPR[EPVAP]-1659869564766
GPR[EPVS]-1659869564766
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
maxval=Math.max(Double.NEGATIVE_INFINITY,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869564767
GPR[SPVAP]-1659869564767
GPR[EPVAP]-1659869565537
GPR[EPVS]-1659869565537
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
minval=Math.min(Double.POSITIVE_INFINITY,clone);
maxval=Math.max(Double.NEGATIVE_INFINITY,clone);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869565538
GPR[SPVAP]-1659869565538
GPR[EPVAP]-1659869566291
GPR[EPVS]-1659869566291
========
index=4*lenX;
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869566319
GPR[SPVAP]-1659869566319
GPR[EPVAP]-1659869567075
GPR[EPVS]-1659869567075
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869567089
GPR[SPVAP]-1659869567089
GPR[EPVAP]-1659869567848
GPR[EPVS]-1659869567848
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869567850
GPR[SPVAP]-1659869567850
GPR[EPVAP]-1659869568590
GPR[EPVS]-1659869568590
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869568592
GPR[SPVAP]-1659869568592
GPR[EPVAP]-1659869569384
GPR[EPVS]-1659869569384
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869569386
GPR[SPVAP]-1659869569386
GPR[EPVAP]-1659869570169
GPR[EPVS]-1659869570169
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869570170
GPR[SPVAP]-1659869570170
GPR[EPVAP]-1659869570924
GPR[EPVS]-1659869570924
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869570926
GPR[SPVAP]-1659869570926
GPR[EPVAP]-1659869571692
GPR[EPVS]-1659869571692
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869571693
GPR[SPVAP]-1659869571693
GPR[EPVAP]-1659869572447
GPR[EPVS]-1659869572447
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869572448
GPR[SPVAP]-1659869572448
GPR[EPVAP]-1659869573205
GPR[EPVS]-1659869573205
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869573206
GPR[SPVAP]-1659869573206
GPR[EPVAP]-1659869573979
GPR[EPVS]-1659869573979
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869573980
GPR[SPVAP]-1659869573980
GPR[EPVAP]-1659869574727
GPR[EPVS]-1659869574727
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869574729
GPR[SPVAP]-1659869574729
GPR[EPVAP]-1659869575502
GPR[EPVS]-1659869575502
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869575503
GPR[SPVAP]-1659869575503
GPR[EPVAP]-1659869576284
GPR[EPVS]-1659869576284
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869576286
GPR[SPVAP]-1659869576286
GPR[EPVAP]-1659869577070
GPR[EPVS]-1659869577070
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869577072
GPR[SPVAP]-1659869577072
GPR[EPVAP]-1659869577847
GPR[EPVS]-1659869577847
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869577848
GPR[SPVAP]-1659869577848
GPR[EPVAP]-1659869578625
GPR[EPVS]-1659869578625
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869578627
GPR[SPVAP]-1659869578627
GPR[EPVAP]-1659869579379
GPR[EPVS]-1659869579379
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869579380
GPR[SPVAP]-1659869579380
GPR[EPVAP]-1659869580133
GPR[EPVS]-1659869580133
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869580134
GPR[SPVAP]-1659869580134
GPR[EPVAP]-1659869580882
GPR[EPVS]-1659869580882
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869580883
GPR[SPVAP]-1659869580883
GPR[EPVAP]-1659869581643
GPR[EPVS]-1659869581643
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869581645
GPR[SPVAP]-1659869581645
GPR[EPVAP]-1659869582418
GPR[EPVS]-1659869582418
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869582419
GPR[SPVAP]-1659869582419
GPR[EPVAP]-1659869583211
GPR[EPVS]-1659869583211
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869583213
GPR[SPVAP]-1659869583213
GPR[EPVAP]-1659869583983
GPR[EPVS]-1659869583983
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869583984
GPR[SPVAP]-1659869583984
GPR[EPVAP]-1659869584745
GPR[EPVS]-1659869584745
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869584746
GPR[SPVAP]-1659869584746
GPR[EPVAP]-1659869585501
GPR[EPVS]-1659869585501
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869585502
GPR[SPVAP]-1659869585502
GPR[EPVAP]-1659869586296
GPR[EPVS]-1659869586296
========
clone.itemLabelGeneratorList=(ObjectList)this.itemLabelGeneratorList.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869591209
GPR[SPVAP]-1659869591209
GPR[EPVAP]-1659869591968
GPR[EPVS]-1659869591968
========
clone.toolTipGeneratorList=(ObjectList)this.toolTipGeneratorList.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869591969
GPR[SPVAP]-1659869591969
GPR[EPVAP]-1659869592727
GPR[EPVS]-1659869592727
========
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869592728
GPR[SPVAP]-1659869592728
GPR[EPVAP]-1659869593484
GPR[EPVS]-1659869593484
========
if(this.item!=null){
clone.paintList=(PaintList)this.paintList.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869593486
GPR[SPVAP]-1659869593486
GPR[EPVAP]-1659869594275
GPR[EPVS]-1659869594275
========
if(clone.dataset!=null){
clone.dataset.addChangeListener((PiePlot)super.clone());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869594277
GPR[SPVAP]-1659869594277
GPR[EPVAP]-1659869595032
GPR[EPVS]-1659869595032
========
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869595033
GPR[SPVAP]-1659869595033
GPR[EPVAP]-1659869595800
GPR[EPVS]-1659869595800
========
clone.shape=ShapeUtilities.clone(this.shape);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869595801
GPR[SPVAP]-1659869595801
GPR[EPVAP]-1659869596580
GPR[EPVS]-1659869596580
========
clone.line=ShapeUtilities.clone(this.line);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869596582
GPR[SPVAP]-1659869596582
GPR[EPVAP]-1659869597359
GPR[EPVS]-1659869597359
========
TimeSeries copy=(TimeSeries)super.clone();
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869597361
GPR[SPVAP]-1659869597361
GPR[EPVAP]-1659869598122
GPR[EPVS]-1659869598122
========
TimeSeries copy=(TimeSeries)super.clone();
if(this.clone!=null){
clone.legendLine=ShapeUtilities.clone(this.legendLine);
}
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869598123
GPR[SPVAP]-1659869598123
GPR[EPVAP]-1659869598879
GPR[EPVS]-1659869598879
========
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869598880
GPR[SPVAP]-1659869598880
GPR[EPVAP]-1659869599663
GPR[EPVS]-1659869599663
========
TimeSeries copy=(TimeSeries)super.clone();
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869599665
GPR[SPVAP]-1659869599665
GPR[EPVAP]-1659869600420
GPR[EPVS]-1659869600420
========
TimeSeries copy=(TimeSeries)super.clone();
clone.seriesPaintList=(PaintList)this.seriesPaintList.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869600422
GPR[SPVAP]-1659869600422
GPR[EPVAP]-1659869601174
GPR[EPVS]-1659869601174
========
TimeSeries copy=(TimeSeries)super.clone();
clone.seriesOutlinePaintList=(PaintList)this.seriesOutlinePaintList.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869601175
GPR[SPVAP]-1659869601175
GPR[EPVAP]-1659869601927
GPR[EPVS]-1659869601927
========
clone.categoryKeys=(Comparable[])this.categoryKeys.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869601929
GPR[SPVAP]-1659869601929
GPR[EPVAP]-1659869603144
GPR[EPVS]-1659869603144
========
clone.seriesKeys=(Comparable[])this.seriesKeys.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869603148
GPR[SPVAP]-1659869603148
GPR[EPVAP]-1659869603975
GPR[EPVS]-1659869603975
========
clone.startData=clone(this.startData);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869603976
GPR[SPVAP]-1659869603976
GPR[EPVAP]-1659869604784
GPR[EPVS]-1659869604784
========
clone.endData=clone(this.endData);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869604785
GPR[SPVAP]-1659869604786
GPR[EPVAP]-1659869605597
GPR[EPVS]-1659869605597
========
if(this.item!=null){
clone.yDateFormat=(DateFormat)this.yDateFormat.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869605599
GPR[SPVAP]-1659869605599
GPR[EPVAP]-1659869606408
GPR[EPVS]-1659869606408
========
result.defaultGroup=(Comparable)KeyToGroupMap.clone(this.defaultGroup);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869606409
GPR[SPVAP]-1659869606409
GPR[EPVAP]-1659869607179
GPR[EPVS]-1659869607179
========
result.groups=(List)KeyToGroupMap.clone(this.groups);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869607180
GPR[SPVAP]-1659869607180
GPR[EPVAP]-1659869607941
GPR[EPVS]-1659869607941
========
result.keyToGroupMap=(Map)KeyToGroupMap.clone(this.keyToGroupMap);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869607943
GPR[SPVAP]-1659869607943
GPR[EPVAP]-1659869608734
GPR[EPVS]-1659869608734
========
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
TimeSeries copy=(TimeSeries)super.clone();
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869608736
GPR[SPVAP]-1659869608736
GPR[EPVAP]-1659869609504
GPR[EPVS]-1659869609504
========
TimeSeries copy=(TimeSeries)super.clone();
clone.keys=(ArrayList)this.keys.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869609505
GPR[SPVAP]-1659869609505
GPR[EPVAP]-1659869610281
GPR[EPVS]-1659869610281
========
TimeSeries copy=(TimeSeries)super.clone();
clone.values=(ArrayList)this.values.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869610283
GPR[SPVAP]-1659869610283
GPR[EPVAP]-1659869611063
GPR[EPVS]-1659869611063
========
clone.domainAxes=new ObjectList();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869611065
GPR[SPVAP]-1659869611065
GPR[EPVAP]-1659869611807
GPR[EPVS]-1659869611807
========
clone.domainAxisLocations=(ObjectList)this.domainAxisLocations.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869611808
GPR[SPVAP]-1659869611808
GPR[EPVAP]-1659869612552
GPR[EPVS]-1659869612552
========
clone.rangeAxes=new ObjectList();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869612554
GPR[SPVAP]-1659869612554
GPR[EPVAP]-1659869613303
GPR[EPVS]-1659869613303
========
result.legendBar=ShapeUtilities.clone(this.legendBar);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869613304
GPR[SPVAP]-1659869613304
GPR[EPVAP]-1659869614079
GPR[EPVS]-1659869614079
========
clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869614080
GPR[SPVAP]-1659869614080
GPR[EPVAP]-1659869614835
GPR[EPVS]-1659869614835
========
clone.shape=ShapeUtilities.clone(this.shape);
clone.line=ShapeUtilities.clone(this.line);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869614836
GPR[SPVAP]-1659869614836
GPR[EPVAP]-1659869615593
GPR[EPVS]-1659869615593
========
clone.legendLine=ShapeUtilities.clone(this.legendLine);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869615595
GPR[SPVAP]-1659869615595
GPR[EPVAP]-1659869616341
GPR[EPVS]-1659869616341
========
clone.dayFormatter=(NumberFormat)this.dayFormatter.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869616342
GPR[SPVAP]-1659869616342
GPR[EPVAP]-1659869617088
GPR[EPVS]-1659869617088
========
clone.secondFormatter=(NumberFormat)this.secondFormatter.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869617089
GPR[SPVAP]-1659869617089
GPR[EPVAP]-1659869617838
GPR[EPVS]-1659869617838
========
clone.values=(DefaultKeyedValues2D)this.values.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869617840
GPR[SPVAP]-1659869617840
GPR[EPVAP]-1659869618582
GPR[EPVS]-1659869618582
========
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869618584
GPR[SPVAP]-1659869618584
GPR[EPVAP]-1659869619341
GPR[EPVS]-1659869619341
========
if(this.item!=null){
clone.dateFormatter=(DateFormat)this.dateFormatter.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869619342
GPR[SPVAP]-1659869619342
GPR[EPVAP]-1659869620103
GPR[EPVS]-1659869620103
========
if(this.item!=null){
clone.numberFormat=(NumberFormat)this.numberFormat.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869620104
GPR[SPVAP]-1659869620104
GPR[EPVAP]-1659869620858
GPR[EPVS]-1659869620858
========
TimeSeries copy=(TimeSeries)super.clone();
if(clone.dataset!=null){
clone.dataset.addChangeListener((ThermometerPlot)super.clone());
}
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869620859
GPR[SPVAP]-1659869620859
GPR[EPVAP]-1659869621614
GPR[EPVS]-1659869621614
========
clone.valueFormat=(NumberFormat)this.valueFormat.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869621615
GPR[SPVAP]-1659869621615
GPR[EPVAP]-1659869622373
GPR[EPVS]-1659869622373
========
clone.subrangePaint=(Paint[])this.subrangePaint.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869622374
GPR[SPVAP]-1659869622374
GPR[EPVAP]-1659869623123
GPR[EPVS]-1659869623123
========
TimeSeries copy=(TimeSeries)super.clone();
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869623124
GPR[SPVAP]-1659869623124
GPR[EPVAP]-1659869623886
GPR[EPVS]-1659869623886
========
clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869623888
GPR[SPVAP]-1659869623888
GPR[EPVAP]-1659869624694
GPR[EPVS]-1659869624694
========
clone.listenerList=new EventListenerList();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869624695
GPR[SPVAP]-1659869624695
GPR[EPVAP]-1659869625438
GPR[EPVS]-1659869625439
========
clone.pieChart=(JFreeChart)this.pieChart.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869625440
GPR[SPVAP]-1659869625440
GPR[EPVAP]-1659869626208
GPR[EPVS]-1659869626208
========
clone.sectionPaints=new HashMap(this.sectionPaints);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869626210
GPR[SPVAP]-1659869626210
GPR[EPVAP]-1659869626971
GPR[EPVS]-1659869626971
========
clone.intervalDelegate=(IntervalXYDelegate)this.intervalDelegate.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869626972
GPR[SPVAP]-1659869626972
GPR[EPVAP]-1659869627731
GPR[EPVS]-1659869627731
========
TimeSeries copy=(TimeSeries)super.clone();
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869627733
GPR[SPVAP]-1659869627733
GPR[EPVAP]-1659869628497
GPR[EPVS]-1659869628497
========
TimeSeries copy=(TimeSeries)super.clone();
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869628498
GPR[SPVAP]-1659869628498
GPR[EPVAP]-1659869629247
GPR[EPVS]-1659869629247
========
clone.rangeAxisLocations=(ObjectList)ObjectUtilities.clone(this.rangeAxisLocations);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869629249
GPR[SPVAP]-1659869629249
GPR[EPVAP]-1659869629999
GPR[EPVS]-1659869629999
========
clone.datasets=(ObjectList)ObjectUtilities.clone(this.datasets);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869630000
GPR[SPVAP]-1659869630000
GPR[EPVAP]-1659869630762
GPR[EPVS]-1659869630762
========
clone.datasetToDomainAxesMap=new TreeMap();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869630763
GPR[SPVAP]-1659869630763
GPR[EPVAP]-1659869631521
GPR[EPVS]-1659869631522
========
clone.datasetToRangeAxesMap=new TreeMap();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869631523
GPR[SPVAP]-1659869631523
GPR[EPVAP]-1659869632281
GPR[EPVS]-1659869632281
========
clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869632283
GPR[SPVAP]-1659869632283
GPR[EPVAP]-1659869633041
GPR[EPVS]-1659869633041
========
clone.renderers=(ObjectList)this.renderers.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869633042
GPR[SPVAP]-1659869633042
GPR[EPVAP]-1659869633830
GPR[EPVS]-1659869633830
========
if(this.clone!=null){
clone.fixedDomainAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869633831
GPR[SPVAP]-1659869633831
GPR[EPVAP]-1659869634598
GPR[EPVS]-1659869634598
========
clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869634599
GPR[SPVAP]-1659869634599
GPR[EPVAP]-1659869635357
GPR[EPVS]-1659869635357
========
clone.intervals=new java.util.ArrayList(this.intervals);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869635359
GPR[SPVAP]-1659869635359
GPR[EPVAP]-1659869636113
GPR[EPVS]-1659869636113
========
if(clone.dataset!=null){
clone.dataset.addChangeListener((MeterPlot)super.clone());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869636114
GPR[SPVAP]-1659869636114
GPR[EPVAP]-1659869636902
GPR[EPVS]-1659869636902
========
if(this.clone!=null){
clone.legendLine=ShapeUtilities.clone(this.legendLine);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869636904
GPR[SPVAP]-1659869636904
GPR[EPVAP]-1659869637667
GPR[EPVS]-1659869637667
========
if(this.item!=null){
clone.dateFormatOverride=(DateFormat)this.dateFormatOverride.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869637669
GPR[SPVAP]-1659869637669
GPR[EPVAP]-1659869638426
GPR[EPVS]-1659869638426
========
if(this.item!=null){
clone.numberFormatOverride=(NumberFormat)this.numberFormatOverride.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869638427
GPR[SPVAP]-1659869638427
GPR[EPVAP]-1659869639195
GPR[EPVS]-1659869639195
========
clone.legendArea=ShapeUtilities.clone(this.legendArea);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869639196
GPR[SPVAP]-1659869639196
GPR[EPVAP]-1659869639952
GPR[EPVS]-1659869639952
========
clone.zValues=DataUtilities.clone(this.zValues);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869639954
GPR[SPVAP]-1659869639954
GPR[EPVAP]-1659869640706
GPR[EPVS]-1659869640706
========
clone.timeZone=(TimeZone)this.timeZone.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869640708
GPR[SPVAP]-1659869640708
GPR[EPVAP]-1659869641499
GPR[EPVS]-1659869641499
========
clone.formatter=(NumberFormat)this.formatter.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869641501
GPR[SPVAP]-1659869641501
GPR[EPVAP]-1659869642255
GPR[EPVS]-1659869642255
========
clone.seriesFilled=(BooleanList)this.seriesFilled.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869642256
GPR[SPVAP]-1659869642256
GPR[EPVAP]-1659869643015
GPR[EPVS]-1659869643015
========
clone.underlying=(TaskSeriesCollection)this.underlying.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869643017
GPR[SPVAP]-1659869643017
GPR[EPVAP]-1659869643779
GPR[EPVS]-1659869643779
========
clone.data=(KeyedObjects2D)this.data.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869643780
GPR[SPVAP]-1659869643780
GPR[EPVAP]-1659869644559
GPR[EPVS]-1659869644559
========
clone.data=(KeyedObjects)this.data.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869644561
GPR[SPVAP]-1659869644561
GPR[EPVAP]-1659869645315
GPR[EPVS]-1659869645315
========
clone.intervalDelegate=new IntervalXYDelegate(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869645316
GPR[SPVAP]-1659869645316
GPR[EPVAP]-1659869646072
GPR[EPVS]-1659869646072
========
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869646073
GPR[SPVAP]-1659869646073
GPR[EPVAP]-1659869646841
GPR[EPVS]-1659869646841
========
clone.intervalDelegate.setAutoWidth(isAutoWidth());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869646843
GPR[SPVAP]-1659869646843
GPR[EPVAP]-1659869647579
GPR[EPVS]-1659869647579
========
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869647580
GPR[SPVAP]-1659869647580
GPR[EPVAP]-1659869648323
GPR[EPVS]-1659869648323
========
clone.updateXPoints();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869648324
GPR[SPVAP]-1659869648324
GPR[EPVAP]-1659869649072
GPR[EPVS]-1659869649072
========
clone.keys=new java.util.ArrayList(this.keys);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869649074
GPR[SPVAP]-1659869649074
GPR[EPVAP]-1659869649866
GPR[EPVS]-1659869649866
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>index){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869649868
GPR[SPVAP]-1659869649868
GPR[EPVAP]-1659869650625
GPR[EPVS]-1659869650625
========
clone.dates=new java.util.ArrayList(this.dates);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869650627
GPR[SPVAP]-1659869650627
GPR[EPVAP]-1659869651382
GPR[EPVS]-1659869651382
========
clone.items=new java.util.ArrayList(this.items);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869651383
GPR[SPVAP]-1659869651383
GPR[EPVAP]-1659869652141
GPR[EPVS]-1659869652142
========
TimeSeries copy=(TimeSeries)super.clone();
clone.seriesKeys=new java.util.ArrayList(this.seriesKeys);
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869652143
GPR[SPVAP]-1659869652143
GPR[EPVAP]-1659869652887
GPR[EPVS]-1659869652887
========
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869652889
GPR[SPVAP]-1659869652889
GPR[EPVAP]-1659869653636
GPR[EPVS]-1659869653636
========
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869653638
GPR[SPVAP]-1659869653638
GPR[EPVAP]-1659869654395
GPR[EPVS]-1659869654395
========
clone.rows=(List)ObjectUtilities.deepClone(this.rows);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869654397
GPR[SPVAP]-1659869654397
GPR[EPVAP]-1659869655147
GPR[EPVS]-1659869655147
========
if(this.clone!=null){
clone.toolTipSeries=new java.util.ArrayList(this.toolTipSeries);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869655149
GPR[SPVAP]-1659869655149
GPR[EPVAP]-1659869655932
GPR[EPVS]-1659869655932
========
clone=(TimeSeriesDataItem)item.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869655934
GPR[SPVAP]-1659869655934
GPR[EPVAP]-1659869656712
GPR[EPVS]-1659869656712
========
clone.lookupTable=new java.util.ArrayList(this.lookupTable);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869656714
GPR[SPVAP]-1659869656714
GPR[EPVAP]-1659869657454
GPR[EPVS]-1659869657454
========
clone.tickUnits=new java.util.ArrayList(this.tickUnits);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869657456
GPR[SPVAP]-1659869657456
GPR[EPVAP]-1659869658213
GPR[EPVS]-1659869658213
========
clone.urlSeries=new java.util.ArrayList(this.urlSeries);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869658214
GPR[SPVAP]-1659869658214
GPR[EPVAP]-1659869659019
GPR[EPVS]-1659869659019
========
fireSeriesChanged();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869659020
GPR[SPVAP]-1659869659020
GPR[EPVAP]-1659869660363
GPR[SPVATF]-1659869660363
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869661490
GPR[EPVS]-1659869661490
========
this.data.clear();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869661493
GPR[SPVAP]-1659869661493
GPR[EPVAP]-1659869662773
GPR[SPVATF]-1659869662773
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869663894
GPR[EPVS]-1659869663894
========
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869663896
GPR[SPVAP]-1659869663896
GPR[EPVAP]-1659869664658
GPR[EPVS]-1659869664658
========
clone.seriesLabelLists=new HashMap();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869664659
GPR[SPVAP]-1659869664659
GPR[EPVAP]-1659869665409
GPR[EPVS]-1659869665409
========
updateBoundsForRemovedItem(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869665410
GPR[SPVAP]-1659869665410
GPR[EPVAP]-1659869666154
GPR[EPVS]-1659869666154
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
break;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869666157
GPR[SPVAP]-1659869666157
GPR[EPVAP]-1659869666914
GPR[EPVS]-1659869666914
========
if(clone!=null){
removeLayer(existing);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869666916
GPR[SPVAP]-1659869666916
GPR[EPVAP]-1659869667692
GPR[EPVS]-1659869667692
========
fireChangeEvent();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869667694
GPR[SPVAP]-1659869667694
GPR[EPVAP]-1659869668451
GPR[EPVS]-1659869668451
========
if(item!=null){
layer.removeChangeListener(this);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869668453
GPR[SPVAP]-1659869668453
GPR[EPVAP]-1659869669209
GPR[EPVS]-1659869669209
========
this.data.remove(index);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869669211
GPR[SPVAP]-1659869669211
GPR[EPVAP]-1659869669986
GPR[EPVS]-1659869669987
========
if(item!=null){
pointer.removeChangeListener(this);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869669988
GPR[SPVAP]-1659869669988
GPR[EPVAP]-1659869670749
GPR[EPVS]-1659869670749
========
this.data.remove(index);
fireChangeEvent();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869670751
GPR[SPVAP]-1659869670751
GPR[EPVAP]-1659869671495
GPR[EPVS]-1659869671495
========
if(index<0){
throw new IllegalArgumentException("Negative \'index\'.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869671497
GPR[SPVAP]-1659869671497
GPR[EPVAP]-1659869672249
GPR[EPVS]-1659869672249
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869672252
GPR[SPVAP]-1659869672252
GPR[EPVAP]-1659869673545
GPR[SPVATF]-1659869673545
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869674688
GPR[EPVS]-1659869674688
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=numberOfColumns;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869674689
GPR[SPVAP]-1659869674689
GPR[EPVAP]-1659869675446
GPR[EPVS]-1659869675446
========
TimeSeries copy=(TimeSeries)super.clone();
clone.values=(DefaultKeyedValues2D)this.values.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869675447
GPR[SPVAP]-1659869675447
GPR[EPVAP]-1659869676227
GPR[EPVS]-1659869676227
========
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
clone.intervalDelegate.setAutoWidth(isAutoWidth());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869676228
GPR[SPVAP]-1659869676228
GPR[EPVAP]-1659869676968
GPR[EPVS]-1659869676968
========
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869676969
GPR[SPVAP]-1659869676969
GPR[EPVAP]-1659869677723
GPR[EPVS]-1659869677723
========
clone.intervalDelegate.setAutoWidth(isAutoWidth());
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869677725
GPR[SPVAP]-1659869677725
GPR[EPVAP]-1659869678493
GPR[EPVS]-1659869678493
========
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
clone.intervalDelegate.setAutoWidth(isAutoWidth());
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869678495
GPR[SPVAP]-1659869678495
GPR[EPVAP]-1659869679287
GPR[EPVS]-1659869679287
========
clone.items=(List)ObjectUtilities.deepClone(this.items);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869679290
GPR[SPVAP]-1659869679290
GPR[EPVAP]-1659869680043
GPR[EPVS]-1659869680043
========
clone.tasks=(List)ObjectUtilities.deepClone(this.tasks);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869680044
GPR[SPVAP]-1659869680044
GPR[EPVAP]-1659869680846
GPR[EPVS]-1659869680846
========
clone.bins=(List)ObjectUtilities.deepClone(this.bins);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869680848
GPR[SPVAP]-1659869680848
GPR[EPVAP]-1659869681599
GPR[EPVS]-1659869681599
========
clone.seriesList=(List)ObjectUtilities.deepClone(this.seriesList);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869681600
GPR[SPVAP]-1659869681600
GPR[EPVAP]-1659869682349
GPR[EPVS]-1659869682349
========
if(item!=null){
start=urlMap.size();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869682351
GPR[SPVAP]-1659869682351
GPR[EPVAP]-1659869683123
GPR[EPVS]-1659869683123
========
clone.sublabels=new HashMap(this.sublabels);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869683125
GPR[SPVAP]-1659869683125
GPR[EPVAP]-1659869683877
GPR[EPVS]-1659869683877
========
if(start<0||index>=index){
throw new IllegalArgumentException("Index "+index);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869683879
GPR[SPVAP]-1659869683879
GPR[EPVAP]-1659869684622
GPR[EPVS]-1659869684622
========
duplicate.listenerList=new EventListenerList();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869684624
GPR[SPVAP]-1659869684624
GPR[EPVAP]-1659869685376
GPR[EPVS]-1659869685376
========
clone.plot=null;
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869685378
GPR[SPVAP]-1659869685378
GPR[EPVAP]-1659869686127
GPR[EPVS]-1659869686127
========
this.clone=new ZoomHandler();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869686128
GPR[SPVAP]-1659869686128
GPR[EPVAP]-1659869686870
GPR[EPVS]-1659869686870
========
this.data.add(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869686871
GPR[SPVAP]-1659869686871
GPR[EPVAP]-1659869687618
GPR[EPVS]-1659869687618
========
if(item.startsWith("mac os x")){
index=InputEvent.ALT_MASK;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869687620
GPR[SPVAP]-1659869687620
GPR[EPVAP]-1659869688364
GPR[EPVS]-1659869688364
========
new PanHandler().setModifier(index);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869688365
GPR[SPVAP]-1659869688365
GPR[EPVAP]-1659869689110
GPR[EPVS]-1659869689110
========
this.data.add(new PanHandler());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869689111
GPR[SPVAP]-1659869689111
GPR[EPVAP]-1659869689866
GPR[EPVS]-1659869689866
========
if(item!=null){
existing.removeChangeListener(this);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869689867
GPR[SPVAP]-1659869689868
GPR[EPVAP]-1659869690638
GPR[EPVS]-1659869690638
========
datasetChanged(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869690639
GPR[SPVAP]-1659869690639
GPR[EPVAP]-1659869691423
GPR[EPVS]-1659869691423
========
if(item!=null){
existing.removeChangeListener(this);
}
datasetChanged(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869691425
GPR[SPVAP]-1659869691425
GPR[EPVAP]-1659869692194
GPR[EPVS]-1659869692194
========
if((Object[])data.get(index+1)[0]==null){
start=-((Integer)(Object[])data.get(index)[0]).intValue()-1;
}else {
series=((Integer)curr[0]).intValue();
if(series<0){
series=-((Integer)prev[0]).intValue()-1;
}
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869692197
GPR[SPVAP]-1659869692197
GPR[EPVAP]-1659869692941
GPR[EPVS]-1659869692941
========
clone.xCrosshairs=(List)ObjectUtilities.deepClone(this.xCrosshairs);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869692943
GPR[SPVAP]-1659869692943
GPR[EPVAP]-1659869693697
GPR[EPVS]-1659869693697
========
clone.yCrosshairs=(List)ObjectUtilities.deepClone(this.yCrosshairs);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869693698
GPR[SPVAP]-1659869693698
GPR[EPVAP]-1659869694440
GPR[EPVS]-1659869694440
========
clone.listeners=new EventListenerList();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869694441
GPR[SPVAP]-1659869694441
GPR[EPVAP]-1659869695199
GPR[EPVS]-1659869695199
========
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869695200
GPR[SPVAP]-1659869695200
GPR[EPVAP]-1659869695952
GPR[EPVS]-1659869695952
========
configureDomainAxes();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869695954
GPR[SPVAP]-1659869695954
GPR[EPVAP]-1659869696701
GPR[EPVS]-1659869696701
========
configureRangeAxes();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869696703
GPR[SPVAP]-1659869696703
GPR[EPVAP]-1659869697445
GPR[EPVS]-1659869697445
========
if(maximumItemCount>1){
minY=width+this.minY*(blockCount-1);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869697447
GPR[SPVAP]-1659869697447
GPR[EPVAP]-1659869698198
GPR[EPVS]-1659869698198
========
if(maximumItemCount>1){
minY=height+this.minY*(blockCount-1);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869698200
GPR[SPVAP]-1659869698200
GPR[EPVAP]-1659869698948
GPR[EPVS]-1659869698948
========
if((index<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869698951
GPR[SPVAP]-1659869698951
GPR[EPVAP]-1659869699703
GPR[EPVS]-1659869699703
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
item.removeChangeListener(this);
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869699704
GPR[SPVAP]-1659869699704
GPR[EPVAP]-1659869700466
GPR[EPVS]-1659869700466
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
this.data.remove(index);
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869700467
GPR[SPVAP]-1659869700467
GPR[EPVAP]-1659869701223
GPR[EPVS]-1659869701223
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>end){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869701225
GPR[SPVAP]-1659869701225
GPR[EPVAP]-1659869702506
GPR[SPVATF]-1659869702506
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869703640
GPR[EPVS]-1659869703640
========
clone.tickLabelFontMap=new HashMap(this.tickLabelFontMap);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869703643
GPR[SPVAP]-1659869703643
GPR[EPVAP]-1659869704392
GPR[EPVS]-1659869704392
========
clone.tickLabelPaintMap=new HashMap(this.tickLabelPaintMap);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869704394
GPR[SPVAP]-1659869704394
GPR[EPVAP]-1659869705170
GPR[EPVS]-1659869705171
========
clone.categoryLabelToolTips=new HashMap(this.categoryLabelToolTips);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869705172
GPR[SPVAP]-1659869705172
GPR[EPVAP]-1659869705937
GPR[EPVS]-1659869705937
========
if(data.isEmpty()){
return null;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869705939
GPR[SPVAP]-1659869705939
GPR[EPVAP]-1659869707262
GPR[SPVATF]-1659869707262
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869708383
GPR[EPVS]-1659869708383
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869708387
GPR[SPVAP]-1659869708387
GPR[EPVAP]-1659869709143
GPR[EPVS]-1659869709143
========
item.removeChangeListener(this);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869709145
GPR[SPVAP]-1659869709145
GPR[EPVAP]-1659869709903
GPR[EPVS]-1659869709903
========
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869709904
GPR[SPVAP]-1659869709904
GPR[EPVAP]-1659869710655
GPR[EPVS]-1659869710655
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869710656
GPR[SPVAP]-1659869710656
GPR[EPVAP]-1659869711455
GPR[EPVS]-1659869711455
========
item.removeChangeListener(this);
this.data.remove(index);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869711457
GPR[SPVAP]-1659869711457
GPR[EPVAP]-1659869712207
GPR[EPVS]-1659869712207
========
item.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869712209
GPR[SPVAP]-1659869712209
GPR[EPVAP]-1659869712965
GPR[EPVS]-1659869712965
========
item.removeChangeListener(this);
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869712967
GPR[SPVAP]-1659869712967
GPR[EPVAP]-1659869713718
GPR[EPVS]-1659869713718
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
item.removeChangeListener(this);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869713719
GPR[SPVAP]-1659869713719
GPR[EPVAP]-1659869714474
GPR[EPVS]-1659869714474
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
this.data.remove(index);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869714476
GPR[SPVAP]-1659869714476
GPR[EPVAP]-1659869715267
GPR[EPVS]-1659869715267
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869715268
GPR[SPVAP]-1659869715268
GPR[EPVAP]-1659869716050
GPR[EPVS]-1659869716050
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
item.removeChangeListener(this);
this.data.remove(index);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869716051
GPR[SPVAP]-1659869716051
GPR[EPVAP]-1659869716798
GPR[EPVS]-1659869716798
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
item.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869716799
GPR[SPVAP]-1659869716799
GPR[EPVAP]-1659869717552
GPR[EPVS]-1659869717552
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869717553
GPR[SPVAP]-1659869717553
GPR[EPVAP]-1659869718326
GPR[EPVS]-1659869718326
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
item.removeChangeListener(this);
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869718328
GPR[SPVAP]-1659869718328
GPR[EPVAP]-1659869719107
GPR[EPVS]-1659869719107
========
if(!Arrays.equals((double[][])this.data.get(index)[0],(double[][])that.seriesList.get(index)[0])){
return false;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869719109
GPR[SPVAP]-1659869719109
GPR[EPVAP]-1659869719897
GPR[EPVS]-1659869719897
========
if(!Arrays.equals(clone,(double[][])that.seriesList.get(index)[1])){
return false;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869719898
GPR[SPVAP]-1659869719898
GPR[EPVAP]-1659869720648
GPR[EPVS]-1659869720648
========
if(index<0||series>=getSeriesCount()){
throw new IllegalArgumentException("Invalid series index: "+series);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869720651
GPR[SPVAP]-1659869720651
GPR[EPVAP]-1659869721403
GPR[EPVS]-1659869721403
========
result.subplots=(List)ObjectUtilities.deepClone(this.subplots);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869721404
GPR[SPVAP]-1659869721404
GPR[EPVAP]-1659869722174
GPR[EPVS]-1659869722174
========
case 1 :

TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869722176
GPR[SPVAP]-1659869722176
GPR[EPVAP]-1659869722785
GPR[EPVS]-1659869722785
========
if((CombinedRangeXYPlot)super.clone().getRangeAxis()!=null){
rangeAxis.configure();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869722789
GPR[SPVAP]-1659869722789
GPR[EPVAP]-1659869723539
GPR[EPVS]-1659869723539
========
if((CombinedRangeCategoryPlot)super.clone().getRangeAxis()!=null){
rangeAxis.configure();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869723541
GPR[SPVAP]-1659869723541
GPR[EPVAP]-1659869724293
GPR[EPVS]-1659869724293
========
if((CombinedDomainXYPlot)super.clone().getDomainAxis()!=null){
domainAxis.configure();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869724294
GPR[SPVAP]-1659869724294
GPR[EPVAP]-1659869725063
GPR[EPVS]-1659869725063
========
if(item!=null){
minY=n.doubleValue();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869725071
GPR[SPVAP]-1659869725071
GPR[EPVAP]-1659869725833
GPR[EPVS]-1659869725833
========
new HashMap().put("values.length",new Integer(values.length));
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869725851
GPR[SPVAP]-1659869725851
GPR[EPVAP]-1659869726599
GPR[EPVS]-1659869726599
========
new HashMap().put("bin width",new Double(minY));
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869726600
GPR[SPVAP]-1659869726600
GPR[EPVAP]-1659869727377
GPR[EPVS]-1659869727377
========
this.data.add(new HashMap());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869727378
GPR[SPVAP]-1659869727378
GPR[EPVAP]-1659869728136
GPR[EPVS]-1659869728136
========
TimeSeries copy=(TimeSeries)super.clone();
item=(TimeSeriesDataItem)item.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869728137
GPR[SPVAP]-1659869728138
GPR[EPVAP]-1659869728897
GPR[EPVS]-1659869728897
========
if(item==null){
return ;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869728898
GPR[SPVAP]-1659869728898
GPR[EPVAP]-1659869729659
GPR[EPVS]-1659869729659
========
if(index>=getDatasetCount()){
return ;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869729662
GPR[SPVAP]-1659869729662
GPR[EPVAP]-1659869730416
GPR[EPVS]-1659869730416
========
if(item==null){
return ;
}
if(index>=getDatasetCount()){
return ;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869730418
GPR[SPVAP]-1659869730418
GPR[EPVAP]-1659869731174
GPR[EPVS]-1659869731174
========
TimeSeries copy=(TimeSeries)super.clone();
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869731178
GPR[SPVAP]-1659869731178
GPR[EPVAP]-1659869732506
GPR[SPVATF]-1659869732506
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869733667
GPR[EPVS]-1659869733667
========
this.data.add(clone);
TimeSeries copy=(TimeSeries)super.clone();
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869733668
GPR[SPVAP]-1659869733668
GPR[EPVAP]-1659869734446
GPR[EPVS]-1659869734446
========
if(index==null){
throw new IllegalArgumentException("Unsupported image format - "+DEFAULT_RANGE_DESCRIPTION);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869734451
GPR[SPVAP]-1659869734451
GPR[EPVAP]-1659869735209
GPR[EPVS]-1659869735209
========
if(!getItemVisible(end,end)){
return ;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869735213
GPR[SPVAP]-1659869735213
GPR[EPVAP]-1659869735968
GPR[EPVS]-1659869735968
========
if(index<0){
return ;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869735970
GPR[SPVAP]-1659869735970
GPR[EPVAP]-1659869736745
GPR[EPVS]-1659869736745
========
item.setBounds(new Rectangle2D.Double(0.0,0.0,s.width,s.height));
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869736748
GPR[SPVAP]-1659869736748
GPR[EPVAP]-1659869737516
GPR[EPVS]-1659869737516
========
minY=direction%360;
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869737518
GPR[SPVAP]-1659869737519
GPR[EPVAP]-1659869738272
GPR[EPVS]-1659869738272
========
if(minY<0.0){
direction=direction+360.0;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869738274
GPR[SPVAP]-1659869738274
GPR[EPVAP]-1659869739030
GPR[EPVS]-1659869739030
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869739031
GPR[SPVAP]-1659869739031
GPR[EPVAP]-1659869739775
GPR[EPVS]-1659869739775
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869739779
GPR[SPVAP]-1659869739779
GPR[EPVAP]-1659869740525
GPR[EPVS]-1659869740525
========
item.setBounds(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869740527
GPR[SPVAP]-1659869740527
GPR[EPVAP]-1659869741317
GPR[EPVS]-1659869741317
========
TimeSeries copy=(TimeSeries)super.clone();
start=4*lenX;
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869741322
GPR[SPVAP]-1659869741322
GPR[EPVAP]-1659869742097
GPR[EPVS]-1659869742097
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
item.removeChangeListener(this);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869742099
GPR[SPVAP]-1659869742099
GPR[EPVAP]-1659869742875
GPR[EPVS]-1659869742875
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
this.data.remove(index);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869742877
GPR[SPVAP]-1659869742877
GPR[EPVAP]-1659869743676
GPR[EPVS]-1659869743676
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869743678
GPR[SPVAP]-1659869743678
GPR[EPVAP]-1659869744429
GPR[EPVS]-1659869744429
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
item.removeChangeListener(this);
this.data.remove(index);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869744430
GPR[SPVAP]-1659869744430
GPR[EPVAP]-1659869745190
GPR[EPVS]-1659869745190
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
item.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869745191
GPR[SPVAP]-1659869745191
GPR[EPVAP]-1659869745956
GPR[EPVS]-1659869745956
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869745957
GPR[SPVAP]-1659869745957
GPR[EPVAP]-1659869746739
GPR[EPVS]-1659869746739
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
item.removeChangeListener(this);
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869746740
GPR[SPVAP]-1659869746740
GPR[EPVAP]-1659869747509
GPR[EPVS]-1659869747509
========
if(item==null){
return -1;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869747513
GPR[SPVAP]-1659869747513
GPR[EPVAP]-1659869748302
GPR[EPVS]-1659869748302
========
this.minY=1.0;
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
MM Copying to MM
GPR[SPVS]-1659869748306
GPR[SPVAP]-1659869748306
GPR[EPVAP]-1659869749591
GPR[SPVATF]-1659869749591
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869750740
GPR[EPVS]-1659869750740
GPR[ESUN]-1659869750750
GPR[SSUN]-1659869750750
org.jfree.data.time.TimeSeries,1058
GPR[ESUN]-1659869751250
GPR[SSUN]-1659869751250
org.jfree.data.time.TimeSeries,1059
GPR[ESUN]-1659869751603
GPR[SSUN]-1659869751603
org.jfree.data.time.TimeSeries,1060
GPR[ESUN]-1659869751991
GPR[SSUN]-1659869751991
org.jfree.data.time.TimeSeries,1062
GPR[ESUN]-1659869752346
GPR[SSUN]-1659869752346
org.jfree.data.time.TimeSeries,1064
GPR[ESUN]-1659869752710
GPR[SSUN]-1659869752710
org.jfree.data.time.TimeSeries,1068
Find no block!
GPR[SSUN]-1659869753087
org.jfree.data.time.TimeSeries,1071
========
if(this.data.size()>index){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869758542
GPR[SPVAP]-1659869758542
GPR[EPVAP]-1659869761057
GPR[EPVS]-1659869761057
========
if(this.data.size()>0){
break;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869761063
GPR[SPVAP]-1659869761063
GPR[EPVAP]-1659869762045
GPR[EPVS]-1659869762045
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869762047
GPR[SPVAP]-1659869762047
GPR[EPVAP]-1659869765142
GPR[SPVATF]-1659869765142
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869766304
GPR[EPVS]-1659869766304
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869766305
GPR[SPVAP]-1659869766305
GPR[EPVAP]-1659869767067
GPR[EPVS]-1659869767067
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869767068
GPR[SPVAP]-1659869767068
GPR[EPVAP]-1659869767855
GPR[EPVS]-1659869767855
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869767856
GPR[SPVAP]-1659869767856
GPR[EPVAP]-1659869768602
GPR[EPVS]-1659869768602
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869768603
GPR[SPVAP]-1659869768603
GPR[EPVAP]-1659869769365
GPR[EPVS]-1659869769365
========
this.data.clear();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869769367
GPR[SPVAP]-1659869769367
GPR[EPVAP]-1659869770691
GPR[SPVATF]-1659869770691
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869771824
GPR[EPVS]-1659869771824
========
fireDatasetChanged(new DatasetChangeInfo());
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869771826
GPR[SPVAP]-1659869771826
GPR[EPVAP]-1659869772603
GPR[EPVS]-1659869772603
========
if(this.data.size()>0){
for(int index=start;index<=numberOfColumns;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869772606
GPR[SPVAP]-1659869772606
GPR[EPVAP]-1659869773378
GPR[EPVS]-1659869773378
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869773382
GPR[SPVAP]-1659869773382
GPR[EPVAP]-1659869774165
GPR[EPVS]-1659869774165
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
clone.data=(List)ObjectUtilities.deepClone(this.data);
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869774166
GPR[SPVAP]-1659869774166
GPR[EPVAP]-1659869774930
GPR[EPVS]-1659869774930
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return ts;

========
MM Copying to MM
GPR[SPVS]-1659869774932
GPR[SPVAP]-1659869774932
GPR[EPVAP]-1659869775699
GPR[EPVS]-1659869775699
========
if(this.data.size()>end){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869775712
GPR[SPVAP]-1659869775712
GPR[EPVAP]-1659869777049
GPR[SPVATF]-1659869777049
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869778191
GPR[EPVS]-1659869778191
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
minval=Math.min(Double.POSITIVE_INFINITY,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869778195
GPR[SPVAP]-1659869778195
GPR[EPVAP]-1659869778943
GPR[EPVS]-1659869778943
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
maxval=Math.max(Double.NEGATIVE_INFINITY,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869778945
GPR[SPVAP]-1659869778945
GPR[EPVAP]-1659869779704
GPR[EPVS]-1659869779704
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
minval=Math.min(Double.POSITIVE_INFINITY,clone);
maxval=Math.max(Double.NEGATIVE_INFINITY,clone);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869779705
GPR[SPVAP]-1659869779705
GPR[EPVAP]-1659869780505
GPR[EPVS]-1659869780505
========
if((index<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869780507
GPR[SPVAP]-1659869780508
GPR[EPVAP]-1659869781259
GPR[EPVS]-1659869781259
========
item.removeChangeListener(this);
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869781261
GPR[SPVAP]-1659869781261
GPR[EPVAP]-1659869782014
GPR[EPVS]-1659869782014
========
this.data.remove(index);
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869782016
GPR[SPVAP]-1659869782016
GPR[EPVAP]-1659869782771
GPR[EPVS]-1659869782771
========
case 1 :

if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869782773
GPR[SPVAP]-1659869782773
GPR[EPVAP]-1659869783429
GPR[EPVS]-1659869783429
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return VALUE_ANTIALIAS_ON;

========
MM Copying to MM
GPR[SPVS]-1659869783447
GPR[SPVAP]-1659869783447
GPR[EPVAP]-1659869784203
GPR[EPVS]-1659869784203
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return null;

========
MM Copying to MM
GPR[SPVS]-1659869784211
GPR[SPVAP]-1659869784211
GPR[EPVAP]-1659869785521
GPR[SPVATF]-1659869785521
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869786654
GPR[EPVS]-1659869786654
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659869786655
GPR[SPVAP]-1659869786655
GPR[EPVAP]-1659869787408
GPR[EPVS]-1659869787408
========
index=4*lenX;
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869787415
GPR[SPVAP]-1659869787415
GPR[EPVAP]-1659869788168
GPR[EPVS]-1659869788168
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869788177
GPR[SPVAP]-1659869788177
GPR[EPVAP]-1659869788957
GPR[EPVS]-1659869788957
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869788958
GPR[SPVAP]-1659869788958
GPR[EPVAP]-1659869789722
GPR[EPVS]-1659869789722
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869789724
GPR[SPVAP]-1659869789724
GPR[EPVAP]-1659869790487
GPR[EPVS]-1659869790487
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869790488
GPR[SPVAP]-1659869790488
GPR[EPVAP]-1659869791249
GPR[EPVS]-1659869791249
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869791250
GPR[SPVAP]-1659869791250
GPR[EPVAP]-1659869792025
GPR[EPVS]-1659869792025
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869792026
GPR[SPVAP]-1659869792026
GPR[EPVAP]-1659869792804
GPR[EPVS]-1659869792804
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869792806
GPR[SPVAP]-1659869792806
GPR[EPVAP]-1659869793586
GPR[EPVS]-1659869793586
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869793588
GPR[SPVAP]-1659869793588
GPR[EPVAP]-1659869794395
GPR[EPVS]-1659869794395
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869794396
GPR[SPVAP]-1659869794396
GPR[EPVAP]-1659869795142
GPR[EPVS]-1659869795142
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869795144
GPR[SPVAP]-1659869795144
GPR[EPVAP]-1659869795904
GPR[EPVS]-1659869795904
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869795905
GPR[SPVAP]-1659869795905
GPR[EPVAP]-1659869796709
GPR[EPVS]-1659869796709
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869796711
GPR[SPVAP]-1659869796711
GPR[EPVAP]-1659869797492
GPR[EPVS]-1659869797492
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869797494
GPR[SPVAP]-1659869797494
GPR[EPVAP]-1659869798270
GPR[EPVS]-1659869798270
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869798272
GPR[SPVAP]-1659869798272
GPR[EPVAP]-1659869799039
GPR[EPVS]-1659869799039
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869799040
GPR[SPVAP]-1659869799040
GPR[EPVAP]-1659869799786
GPR[EPVS]-1659869799786
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869799788
GPR[SPVAP]-1659869799788
GPR[EPVAP]-1659869800546
GPR[EPVS]-1659869800546
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869800547
GPR[SPVAP]-1659869800547
GPR[EPVAP]-1659869801333
GPR[EPVS]-1659869801333
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869801335
GPR[SPVAP]-1659869801335
GPR[EPVAP]-1659869802104
GPR[EPVS]-1659869802104
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869802105
GPR[SPVAP]-1659869802105
GPR[EPVAP]-1659869802879
GPR[EPVS]-1659869802879
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869802881
GPR[SPVAP]-1659869802881
GPR[EPVAP]-1659869803650
GPR[EPVS]-1659869803650
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869803651
GPR[SPVAP]-1659869803651
GPR[EPVAP]-1659869804413
GPR[EPVS]-1659869804413
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869804415
GPR[SPVAP]-1659869804415
GPR[EPVAP]-1659869805203
GPR[EPVS]-1659869805203
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869805204
GPR[SPVAP]-1659869805204
GPR[EPVAP]-1659869805968
GPR[EPVS]-1659869805968
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869805970
GPR[SPVAP]-1659869805970
GPR[EPVAP]-1659869806744
GPR[EPVS]-1659869806744
========
if(this.data.size()>0){
if(end>0){
average=minY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869806745
GPR[SPVAP]-1659869806745
GPR[EPVAP]-1659869807549
GPR[EPVS]-1659869807549
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return black;

========
MM Copying to MM
GPR[SPVS]-1659869807552
GPR[SPVAP]-1659869807552
GPR[EPVAP]-1659869808350
GPR[EPVS]-1659869808350
========
try{
return Color.decode(DEFAULT_RANGE_DESCRIPTION);
}catch (NumberFormatException nfe) {
  try {
    final Field f=Color.class.getField(value);
    return (Color)f.get(null);
  }
 catch (  Exception ce) {
    return Color.black;
  }
}

if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
MM Copying to MM
GPR[SPVS]-1659869808351
GPR[SPVAP]-1659869808351
GPR[EPVAP]-1659869809109
GPR[EPVS]-1659869809109
GPR[ESUN]-1659869809114
GPR[SSUN]-1659869809114
org.jfree.data.time.TimeSeries,564
========
add(minY,true);

========
MM Copying to MM
GPR[SPVS]-1659869811624
GPR[SPVAP]-1659869811624
GPR[EPVAP]-1659869814106
GPR[EPVS]-1659869814106
========
add(item);

========
MM Copying to MM
GPR[SPVS]-1659869814108
GPR[SPVAP]-1659869814108
GPR[EPVAP]-1659869817285
GPR[SPVATF]-1659869817285
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869818443
GPR[EPVS]-1659869818443
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869818449
GPR[SPVAP]-1659869818449
GPR[EPVAP]-1659869819791
GPR[SPVATF]-1659869819791
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869820946
GPR[EPVS]-1659869820946
========
this.data.add(DEFAULT_DOMAIN_DESCRIPTION);
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869820947
GPR[SPVAP]-1659869820947
GPR[EPVAP]-1659869822247
GPR[SPVATF]-1659869822247
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869823398
GPR[EPVS]-1659869823398
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
this.data.add(DEFAULT_DOMAIN_DESCRIPTION);
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869823399
GPR[SPVAP]-1659869823399
GPR[EPVAP]-1659869824733
GPR[SPVATF]-1659869824733
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869825933
GPR[EPVS]-1659869825933
========
add(minY+(minY*maximumItemCount),true);

========
MM Copying to MM
GPR[SPVS]-1659869825935
GPR[SPVAP]-1659869825935
GPR[EPVAP]-1659869826706
GPR[EPVS]-1659869826706
========
fireChangeEvent();
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869826707
GPR[SPVAP]-1659869826707
GPR[EPVAP]-1659869827453
GPR[EPVS]-1659869827453
========
fireOverlayChanged();
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869827454
GPR[SPVAP]-1659869827454
GPR[EPVAP]-1659869828225
GPR[EPVS]-1659869828225
========
fireChartChanged();
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869828227
GPR[SPVAP]-1659869828227
GPR[EPVAP]-1659869828972
GPR[EPVS]-1659869828972
========
new java.util.ArrayList(1).add(new Integer(maximumItemCount));
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869828974
GPR[SPVAP]-1659869828974
GPR[EPVAP]-1659869830307
GPR[SPVATF]-1659869830307
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869831421
GPR[EPVS]-1659869831421
========
fireDatasetChanged(new DatasetChangeInfo());
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869831423
GPR[SPVAP]-1659869831423
GPR[EPVAP]-1659869832197
GPR[EPVS]-1659869832197
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869832198
GPR[SPVAP]-1659869832198
GPR[EPVAP]-1659869833517
GPR[SPVATF]-1659869833517
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869834640
GPR[EPVS]-1659869834640
========
this.data.add(item);
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869834641
GPR[SPVAP]-1659869834641
GPR[EPVAP]-1659869835919
GPR[SPVATF]-1659869835919
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869837055
GPR[EPVS]-1659869837055
========
fireSeriesChanged();
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869837057
GPR[SPVAP]-1659869837057
GPR[EPVAP]-1659869838387
GPR[SPVATF]-1659869838387
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869839511
GPR[EPVS]-1659869839511
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869839513
GPR[SPVAP]-1659869839513
GPR[EPVAP]-1659869840804
GPR[SPVATF]-1659869840804
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869841984
GPR[EPVS]-1659869841984
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
fireSeriesChanged();
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869841986
GPR[SPVAP]-1659869841986
GPR[EPVAP]-1659869843333
GPR[SPVATF]-1659869843333
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869844488
GPR[EPVS]-1659869844488
========
this.data.add(item);
fireSeriesChanged();
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869844490
GPR[SPVAP]-1659869844490
GPR[EPVAP]-1659869845781
GPR[SPVATF]-1659869845781
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869846969
GPR[EPVS]-1659869846969
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
fireSeriesChanged();
add(item,true);

========
MM Copying to MM
GPR[SPVS]-1659869846970
GPR[SPVAP]-1659869846970
GPR[EPVAP]-1659869848258
GPR[SPVATF]-1659869848258
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869849444
GPR[EPVS]-1659869849444
GPR[ESUN]-1659869849445
GPR[SSUN]-1659869849445
org.jfree.data.time.TimeSeries,565
Find no block!
GPR[SSUN]-1659869849975
org.jfree.data.general.Series,243
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.categoryKeys=(Comparable[])this.categoryKeys.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869852309
GPR[SPVAP]-1659869852309
GPR[EPVAP]-1659869854628
GPR[EPVS]-1659869854628
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesKeys=(Comparable[])this.seriesKeys.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869854629
GPR[SPVAP]-1659869854629
GPR[EPVAP]-1659869855766
GPR[EPVS]-1659869855766
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.startData=clone(this.startData);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869855767
GPR[SPVAP]-1659869855767
GPR[EPVAP]-1659869856894
GPR[EPVS]-1659869856894
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.endData=clone(this.endData);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869856896
GPR[SPVAP]-1659869856896
GPR[EPVAP]-1659869858028
GPR[EPVS]-1659869858028
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869858030
GPR[SPVAP]-1659869858030
GPR[EPVAP]-1659869859136
GPR[EPVS]-1659869859136
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesPaintList=(PaintList)this.seriesPaintList.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869859137
GPR[SPVAP]-1659869859137
GPR[EPVAP]-1659869860248
GPR[EPVS]-1659869860248
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesOutlinePaintList=(PaintList)this.seriesOutlinePaintList.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869860249
GPR[SPVAP]-1659869860249
GPR[EPVAP]-1659869861414
GPR[EPVS]-1659869861414
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesOutlineStrokeList=(StrokeList)this.seriesOutlineStrokeList.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869861415
GPR[SPVAP]-1659869861415
GPR[EPVAP]-1659869862569
GPR[EPVS]-1659869862569
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869862570
GPR[SPVAP]-1659869862570
GPR[EPVAP]-1659869863687
GPR[EPVS]-1659869863687
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869863688
GPR[SPVAP]-1659869863688
GPR[EPVAP]-1659869864845
GPR[EPVS]-1659869864845
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869864846
GPR[SPVAP]-1659869864846
GPR[EPVAP]-1659869865985
GPR[EPVS]-1659869865985
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

return clone;

========
MM Copying to MM
GPR[SPVS]-1659869865986
GPR[SPVAP]-1659869865986
GPR[EPVAP]-1659869867099
GPR[EPVS]-1659869867099
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869867100
GPR[SPVAP]-1659869867100
GPR[EPVAP]-1659869868245
GPR[EPVS]-1659869868245
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869868246
GPR[SPVAP]-1659869868246
GPR[EPVAP]-1659869869355
GPR[EPVS]-1659869869355
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869869357
GPR[SPVAP]-1659869869357
GPR[EPVAP]-1659869870479
GPR[EPVS]-1659869870479
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869870480
GPR[SPVAP]-1659869870480
GPR[EPVAP]-1659869871580
GPR[EPVS]-1659869871580
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.keys=(ArrayList)this.keys.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869871582
GPR[SPVAP]-1659869871582
GPR[EPVAP]-1659869872696
GPR[EPVS]-1659869872696
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.values=(ArrayList)this.values.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869872698
GPR[SPVAP]-1659869872698
GPR[EPVAP]-1659869873809
GPR[EPVS]-1659869873809
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.indexMap=(HashMap)this.indexMap.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869873810
GPR[SPVAP]-1659869873810
GPR[EPVAP]-1659869874935
GPR[EPVS]-1659869874935
========
result.defaultGroup=(Comparable)KeyToGroupMap.clone(this.defaultGroup);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869874936
GPR[SPVAP]-1659869874936
GPR[EPVAP]-1659869876056
GPR[EPVS]-1659869876056
========
result.groups=(List)KeyToGroupMap.clone(this.groups);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869876058
GPR[SPVAP]-1659869876058
GPR[EPVAP]-1659869877187
GPR[EPVS]-1659869877187
========
result.keyToGroupMap=(Map)KeyToGroupMap.clone(this.keyToGroupMap);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869877188
GPR[SPVAP]-1659869877188
GPR[EPVAP]-1659869878322
GPR[EPVS]-1659869878322
========
Series clone=(Series)super.clone();
clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869878324
GPR[SPVAP]-1659869878324
GPR[EPVAP]-1659869879445
GPR[EPVS]-1659869879445
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.dayFormatter=(NumberFormat)this.dayFormatter.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869879446
GPR[SPVAP]-1659869879446
GPR[EPVAP]-1659869880567
GPR[EPVS]-1659869880567
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.secondFormatter=(NumberFormat)this.secondFormatter.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869880568
GPR[SPVAP]-1659869880568
GPR[EPVAP]-1659869881678
GPR[EPVS]-1659869881678
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.values=(DefaultKeyedValues2D)this.values.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869881679
GPR[SPVAP]-1659869881679
GPR[EPVAP]-1659869882775
GPR[EPVS]-1659869882775
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869882776
GPR[SPVAP]-1659869882776
GPR[EPVAP]-1659869883890
GPR[EPVS]-1659869883890
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.legendLine=ShapeUtilities.clone(this.legendLine);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869883891
GPR[SPVAP]-1659869883892
GPR[EPVAP]-1659869884975
GPR[EPVS]-1659869884975
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.shape=ShapeUtilities.clone(this.shape);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869884976
GPR[SPVAP]-1659869884976
GPR[EPVAP]-1659869886135
GPR[EPVS]-1659869886135
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.line=ShapeUtilities.clone(this.line);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869886136
GPR[SPVAP]-1659869886136
GPR[EPVAP]-1659869887269
GPR[EPVS]-1659869887269
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.quadrantOrigin=(Point2D)ObjectUtilities.clone(this.quadrantOrigin);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869887270
GPR[SPVAP]-1659869887270
GPR[EPVAP]-1659869888403
GPR[EPVS]-1659869888403
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.quadrantPaint=(Paint[])this.quadrantPaint.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869888404
GPR[SPVAP]-1659869888404
GPR[EPVAP]-1659869889533
GPR[EPVS]-1659869889533
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869889535
GPR[SPVAP]-1659869889535
GPR[EPVAP]-1659869890654
GPR[EPVS]-1659869890654
========
result.legendBar=ShapeUtilities.clone(this.legendBar);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869890655
GPR[SPVAP]-1659869890655
GPR[EPVAP]-1659869891774
GPR[EPVS]-1659869891774
========
if(this.key instanceof PublicCloneable){
PublicCloneable (PublicCloneable)this.key=(PublicCloneable)this.seriesKey;
clone.seriesKey=(Comparable)pc.clone();
}
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869891776
GPR[SPVAP]-1659869891776
GPR[EPVAP]-1659869892476
GPR[EPVS]-1659869892476
========
clone.shape=ShapeUtilities.clone(this.shape);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869892477
GPR[SPVAP]-1659869892477
GPR[EPVAP]-1659869893585
GPR[EPVS]-1659869893585
========
clone.itemLabelGeneratorList=(ObjectList)this.itemLabelGeneratorList.clone();
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869893587
GPR[SPVAP]-1659869893587
GPR[EPVAP]-1659869894715
GPR[EPVS]-1659869894715
========
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869894717
GPR[SPVAP]-1659869894717
GPR[EPVAP]-1659869898070
GPR[SPVATF]-1659869898070
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869899169
GPR[EPVS]-1659869899169
========
Series clone=(Series)super.clone();
this.key=key;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869899170
GPR[SPVAP]-1659869899170
GPR[EPVAP]-1659869900450
GPR[SPVATF]-1659869900450
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869901607
GPR[EPVS]-1659869901607
========
Series clone=(Series)super.clone();
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869901608
GPR[SPVAP]-1659869901608
GPR[EPVAP]-1659869902836
GPR[SPVATF]-1659869902836
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869903969
GPR[EPVS]-1659869903969
========
this.notify=true;
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869903970
GPR[SPVAP]-1659869903970
GPR[EPVAP]-1659869905190
GPR[SPVATF]-1659869905190
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869906303
GPR[EPVS]-1659869906303
========
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869906304
GPR[SPVAP]-1659869906304
GPR[EPVAP]-1659869907562
GPR[SPVATF]-1659869907562
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869908665
GPR[EPVS]-1659869908665
========
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869908666
GPR[SPVAP]-1659869908666
GPR[EPVAP]-1659869909897
GPR[SPVATF]-1659869909897
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869911020
GPR[EPVS]-1659869911020
========
this.notify=true;
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869911021
GPR[SPVAP]-1659869911021
GPR[EPVAP]-1659869912249
GPR[SPVATF]-1659869912249
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869913397
GPR[EPVS]-1659869913397
========
Series clone=(Series)super.clone();
this.key=key;
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869913398
GPR[SPVAP]-1659869913398
GPR[EPVAP]-1659869915385
GPR[SPVATF]-1659869915385
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869916744
GPR[EPVS]-1659869916744
========
this.notify=true;
Series clone=(Series)super.clone();
this.key=key;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869916746
GPR[SPVAP]-1659869916746
GPR[EPVAP]-1659869918132
GPR[SPVATF]-1659869918132
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869919279
GPR[EPVS]-1659869919279
========
this.notify=true;
Series clone=(Series)super.clone();
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869919280
GPR[SPVAP]-1659869919280
GPR[EPVAP]-1659869920537
GPR[SPVATF]-1659869920537
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869921682
GPR[EPVS]-1659869921682
========
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869921683
GPR[SPVAP]-1659869921683
GPR[EPVAP]-1659869922944
GPR[SPVATF]-1659869922944
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869924054
GPR[EPVS]-1659869924054
========
this.notify=true;
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869924055
GPR[SPVAP]-1659869924055
GPR[EPVAP]-1659869925283
GPR[SPVATF]-1659869925283
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869926403
GPR[EPVS]-1659869926403
========
this.notify=true;
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869926404
GPR[SPVAP]-1659869926404
GPR[EPVAP]-1659869927656
GPR[SPVATF]-1659869927656
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869928787
GPR[EPVS]-1659869928787
========
this.notify=true;
Series clone=(Series)super.clone();
this.key=key;
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869928789
GPR[SPVAP]-1659869928789
GPR[EPVAP]-1659869930014
GPR[SPVATF]-1659869930014
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869931159
GPR[EPVS]-1659869931159
========
this.notify=true;
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869931160
GPR[SPVAP]-1659869931160
GPR[EPVAP]-1659869932449
GPR[SPVATF]-1659869932449
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869933589
GPR[EPVS]-1659869933589
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.pieChart=(JFreeChart)this.pieChart.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869933590
GPR[SPVAP]-1659869933590
GPR[EPVAP]-1659869934314
GPR[EPVS]-1659869934314
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.sectionPaints=new HashMap(this.sectionPaints);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869934316
GPR[SPVAP]-1659869934316
GPR[EPVAP]-1659869935035
GPR[EPVS]-1659869935035
========
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869935036
GPR[SPVAP]-1659869935036
GPR[EPVAP]-1659869935745
GPR[EPVS]-1659869935745
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.formatter=(NumberFormat)this.formatter.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869935746
GPR[SPVAP]-1659869935746
GPR[EPVAP]-1659869936460
GPR[EPVS]-1659869936460
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesFilled=(BooleanList)this.seriesFilled.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869936462
GPR[SPVAP]-1659869936462
GPR[EPVAP]-1659869937176
GPR[EPVS]-1659869937176
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.underlying=(TaskSeriesCollection)this.underlying.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869937177
GPR[SPVAP]-1659869937177
GPR[EPVAP]-1659869937923
GPR[EPVS]-1659869937923
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.data=(KeyedObjects2D)this.data.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869937924
GPR[SPVAP]-1659869937924
GPR[EPVAP]-1659869938635
GPR[EPVS]-1659869938635
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.data=(KeyedObjects)this.data.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869938636
GPR[SPVAP]-1659869938636
GPR[EPVAP]-1659869939345
GPR[EPVS]-1659869939345
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.legendArea=ShapeUtilities.clone(this.legendArea);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869939347
GPR[SPVAP]-1659869939347
GPR[EPVAP]-1659869940058
GPR[EPVS]-1659869940058
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.zValues=DataUtilities.clone(this.zValues);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869940059
GPR[SPVAP]-1659869940059
GPR[EPVAP]-1659869940790
GPR[EPVS]-1659869940790
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.timeZone=(TimeZone)this.timeZone.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869940791
GPR[SPVAP]-1659869940791
GPR[EPVAP]-1659869941519
GPR[EPVS]-1659869941519
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.data=(List)ObjectUtilities.deepClone(this.data);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869941520
GPR[SPVAP]-1659869941520
GPR[EPVAP]-1659869942225
GPR[EPVS]-1659869942225
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.intervalDelegate=(IntervalXYDelegate)this.intervalDelegate.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869942226
GPR[SPVAP]-1659869942226
GPR[EPVAP]-1659869942935
GPR[EPVS]-1659869942935
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.data=(List)ObjectUtilities.deepClone(this.data);
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869942936
GPR[SPVAP]-1659869942936
GPR[EPVAP]-1659869943652
GPR[EPVS]-1659869943652
========
clone.rangeAxisLocations=(ObjectList)this.rangeAxisLocations.clone();
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869943653
GPR[SPVAP]-1659869943653
GPR[EPVAP]-1659869944365
GPR[EPVS]-1659869944365
========
clone.datasets=(ObjectList)this.datasets.clone();
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869944366
GPR[SPVAP]-1659869944366
GPR[EPVAP]-1659869945087
GPR[EPVS]-1659869945087
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869945088
GPR[SPVAP]-1659869945088
GPR[EPVAP]-1659869945797
GPR[EPVS]-1659869945797
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.intervals=new java.util.ArrayList(this.intervals);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869945798
GPR[SPVAP]-1659869945798
GPR[EPVAP]-1659869946510
GPR[EPVS]-1659869946510
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
if(clone.dataset!=null){
clone.dataset.addChangeListener(clone);
}
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869946511
GPR[SPVAP]-1659869946511
GPR[EPVAP]-1659869947227
GPR[EPVS]-1659869947227
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
if(clone.rangeAxis!=null){
clone.rangeAxis.setPlot(clone);
clone.rangeAxis.addChangeListener(clone);
}
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869947228
GPR[SPVAP]-1659869947228
GPR[EPVAP]-1659869947952
GPR[EPVS]-1659869947952
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.valueFormat=(NumberFormat)this.valueFormat.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869947953
GPR[SPVAP]-1659869947953
GPR[EPVAP]-1659869948664
GPR[EPVS]-1659869948664
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.subrangePaint=(Paint[])this.subrangePaint.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869948665
GPR[SPVAP]-1659869948665
GPR[EPVAP]-1659869949373
GPR[EPVS]-1659869949373
========
clone.domainAxisLocations=(ObjectList)this.domainAxisLocations.clone();
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869949375
GPR[SPVAP]-1659869949375
GPR[EPVAP]-1659869950091
GPR[EPVS]-1659869950091
========
clone.rangeAxes=(ObjectList)ObjectUtilities.clone(this.rangeAxes);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869950092
GPR[SPVAP]-1659869950092
GPR[EPVAP]-1659869950843
GPR[EPVS]-1659869950843
========
clone.rangeAxisLocations=(ObjectList)ObjectUtilities.clone(this.rangeAxisLocations);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869950844
GPR[SPVAP]-1659869950844
GPR[EPVAP]-1659869951555
GPR[EPVS]-1659869951555
========
clone.datasets=(ObjectList)ObjectUtilities.clone(this.datasets);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869951556
GPR[SPVAP]-1659869951556
GPR[EPVAP]-1659869952290
GPR[EPVS]-1659869952290
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.entities=new java.util.ArrayList(this.entities.size());
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869952291
GPR[SPVAP]-1659869952291
GPR[EPVAP]-1659869953031
GPR[EPVS]-1659869953031
========
Series clone=(Series)super.clone();
clone.domainAxisLocations=(ObjectList)this.domainAxisLocations.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869953032
GPR[SPVAP]-1659869953032
GPR[EPVAP]-1659869953757
GPR[EPVS]-1659869953757
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.lookupTable=new java.util.ArrayList(this.lookupTable);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869953759
GPR[SPVAP]-1659869953759
GPR[EPVAP]-1659869954462
GPR[EPVS]-1659869954462
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.tickUnits=new java.util.ArrayList(this.tickUnits);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869954464
GPR[SPVAP]-1659869954464
GPR[EPVAP]-1659869955165
GPR[EPVS]-1659869955165
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.sublabels=new HashMap(this.sublabels);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869955166
GPR[SPVAP]-1659869955166
GPR[EPVAP]-1659869955875
GPR[EPVS]-1659869955875
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.urlSeries=new java.util.ArrayList(this.urlSeries);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869955876
GPR[SPVAP]-1659869955876
GPR[EPVAP]-1659869956584
GPR[EPVS]-1659869956584
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.items=(List)ObjectUtilities.deepClone(this.items);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869956585
GPR[SPVAP]-1659869956585
GPR[EPVAP]-1659869957310
GPR[EPVS]-1659869957310
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.tasks=(List)ObjectUtilities.deepClone(this.tasks);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869957311
GPR[SPVAP]-1659869957311
GPR[EPVAP]-1659869958021
GPR[EPVS]-1659869958021
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.bins=(List)ObjectUtilities.deepClone(this.bins);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869958022
GPR[SPVAP]-1659869958022
GPR[EPVAP]-1659869958816
GPR[EPVS]-1659869958816
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesList=(List)ObjectUtilities.deepClone(this.seriesList);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869958817
GPR[SPVAP]-1659869958817
GPR[EPVAP]-1659869959523
GPR[EPVS]-1659869959523
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.data=new java.util.ArrayList();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869959524
GPR[SPVAP]-1659869959524
GPR[EPVAP]-1659869960239
GPR[EPVS]-1659869960239
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.data=new java.util.ArrayList(getSeriesCount());
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869960240
GPR[SPVAP]-1659869960240
GPR[EPVAP]-1659869960953
GPR[EPVS]-1659869960953
========
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869960954
GPR[SPVAP]-1659869960954
GPR[EPVAP]-1659869961665
GPR[EPVS]-1659869961665
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.dates=new java.util.ArrayList(this.dates);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869961666
GPR[SPVAP]-1659869961666
GPR[EPVAP]-1659869962373
GPR[EPVS]-1659869962373
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.items=new java.util.ArrayList(this.items);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869962374
GPR[SPVAP]-1659869962374
GPR[EPVAP]-1659869963082
GPR[EPVS]-1659869963082
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.keys=new java.util.ArrayList(this.keys);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869963083
GPR[SPVAP]-1659869963083
GPR[EPVAP]-1659869963790
GPR[EPVS]-1659869963790
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.xCrosshairs=(List)ObjectUtilities.deepClone(this.xCrosshairs);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869963791
GPR[SPVAP]-1659869963791
GPR[EPVAP]-1659869964507
GPR[EPVS]-1659869964507
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.yCrosshairs=(List)ObjectUtilities.deepClone(this.yCrosshairs);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869964507
GPR[SPVAP]-1659869964507
GPR[EPVAP]-1659869965214
GPR[EPVS]-1659869965214
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.intervalDelegate=new IntervalXYDelegate(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869965215
GPR[SPVAP]-1659869965215
GPR[EPVAP]-1659869965922
GPR[EPVS]-1659869965922
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869965923
GPR[SPVAP]-1659869965923
GPR[EPVAP]-1659869966630
GPR[EPVS]-1659869966630
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.intervalDelegate.setAutoWidth(isAutoWidth());
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869966631
GPR[SPVAP]-1659869966631
GPR[EPVAP]-1659869967335
GPR[EPVS]-1659869967335
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869967336
GPR[SPVAP]-1659869967336
GPR[EPVAP]-1659869968052
GPR[EPVS]-1659869968052
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.tickLabelFontMap=new HashMap(this.tickLabelFontMap);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869968053
GPR[SPVAP]-1659869968053
GPR[EPVAP]-1659869968783
GPR[EPVS]-1659869968783
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.tickLabelPaintMap=new HashMap(this.tickLabelPaintMap);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869968784
GPR[SPVAP]-1659869968784
GPR[EPVAP]-1659869969495
GPR[EPVS]-1659869969495
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.categoryLabelToolTips=new HashMap(this.categoryLabelToolTips);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869969496
GPR[SPVAP]-1659869969496
GPR[EPVAP]-1659869970251
GPR[EPVS]-1659869970251
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869970252
GPR[SPVAP]-1659869970252
GPR[EPVAP]-1659869970964
GPR[EPVS]-1659869970964
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869970965
GPR[SPVAP]-1659869970965
GPR[EPVAP]-1659869971719
GPR[EPVS]-1659869971719
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.rows=(List)ObjectUtilities.deepClone(this.rows);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869971720
GPR[SPVAP]-1659869971720
GPR[EPVAP]-1659869972447
GPR[EPVS]-1659869972447
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.cornerTextItems=new ArrayList(this.cornerTextItems);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869972449
GPR[SPVAP]-1659869972449
GPR[EPVAP]-1659869973189
GPR[EPVS]-1659869973189
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869973190
GPR[SPVAP]-1659869973190
GPR[EPVAP]-1659869973898
GPR[EPVS]-1659869973898
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869973899
GPR[SPVAP]-1659869973899
GPR[EPVAP]-1659869974607
GPR[EPVS]-1659869974607
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869974608
GPR[SPVAP]-1659869974608
GPR[EPVAP]-1659869975323
GPR[EPVS]-1659869975323
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.list=new java.util.ArrayList(getSeriesCount());
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869975324
GPR[SPVAP]-1659869975324
GPR[EPVAP]-1659869976047
GPR[EPVS]-1659869976047
========
result.subplots=(List)ObjectUtilities.deepClone(this.subplots);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869976048
GPR[SPVAP]-1659869976048
GPR[EPVAP]-1659869976765
GPR[EPVS]-1659869976765
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.quadrantOrigin=(Point2D)ObjectUtilities.clone(this.quadrantOrigin);
clone.quadrantPaint=(Paint[])this.quadrantPaint.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659869976766
GPR[SPVAP]-1659869976766
GPR[EPVAP]-1659869977510
GPR[EPVS]-1659869977510
GPR[ESUN]-1659869977511
GPR[SSUN]-1659869977511
org.jfree.data.general.Series,244
GPR[ESUN]-1659869978057
GPR[SSUN]-1659869978057
org.jfree.data.general.Series,245
GPR[ESUN]-1659869978388
GPR[SSUN]-1659869978388
org.jfree.data.general.Series,246
GPR[ESUN]-1659869978754
GPR[SSUN]-1659869978754
org.jfree.data.time.TimeSeries,345
GPR[ESUN]-1659869980786
GPR[SSUN]-1659869980786
org.jfree.data.time.TimeSeries,360
GPR[ESUN]-1659869982803
GPR[SSUN]-1659869982803
org.jfree.data.time.TimeSeries,653
========
add(BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(data),value,true);

========
MM Copying to MM
GPR[SPVS]-1659869985305
GPR[SPVAP]-1659869985305
GPR[EPVAP]-1659869987752
GPR[EPVS]-1659869987752
========
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659869987756
GPR[SPVAP]-1659869987756
GPR[EPVAP]-1659869990906
GPR[SPVATF]-1659869990906
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869992015
GPR[EPVS]-1659869992015
========
this.data.add(DEFAULT_RANGE_DESCRIPTION);
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659869992016
GPR[SPVAP]-1659869992016
GPR[EPVAP]-1659869993401
GPR[SPVATF]-1659869993401
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869994536
GPR[EPVS]-1659869994536
========
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
this.data.add(DEFAULT_RANGE_DESCRIPTION);
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659869994537
GPR[SPVAP]-1659869994537
GPR[EPVAP]-1659869995836
GPR[SPVATF]-1659869995836
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869996951
GPR[EPVS]-1659869996951
========
new java.util.ArrayList(1).add(new Integer(maximumItemCount));
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659869996953
GPR[SPVAP]-1659869996953
GPR[EPVAP]-1659869998288
GPR[SPVATF]-1659869998289
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659869999400
GPR[EPVS]-1659869999400
========
this.maxY=value;
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659869999402
GPR[SPVAP]-1659869999402
GPR[EPVAP]-1659870000746
GPR[SPVATF]-1659870000746
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870001867
GPR[EPVS]-1659870001867
========
this.value=value;
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659870001868
GPR[SPVAP]-1659870001868
GPR[EPVAP]-1659870002613
GPR[EPVS]-1659870002613
========
this.minY=value;
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659870002615
GPR[SPVAP]-1659870002615
GPR[EPVAP]-1659870003881
GPR[SPVATF]-1659870003881
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870004999
GPR[EPVS]-1659870004999
========
fireChangeEvent();
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659870005001
GPR[SPVAP]-1659870005001
GPR[EPVAP]-1659870005746
GPR[EPVS]-1659870005746
========
fireOverlayChanged();
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659870005747
GPR[SPVAP]-1659870005747
GPR[EPVAP]-1659870006521
GPR[EPVS]-1659870006521
========
fireChartChanged();
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659870006522
GPR[SPVAP]-1659870006522
GPR[EPVAP]-1659870007302
GPR[EPVS]-1659870007302
========
if(value<=0.0){
throw new IllegalArgumentException("Requires \'value\' > 0.0.");
}
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659870007304
GPR[SPVAP]-1659870007304
GPR[EPVAP]-1659870008602
GPR[SPVATF]-1659870008602
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870009715
GPR[EPVS]-1659870009715
========
if(value<=0.0){
throw new IllegalArgumentException("Requires \'value\' > 0.0.");
}
this.minY=value;
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659870009716
GPR[SPVAP]-1659870009716
GPR[EPVAP]-1659870011026
GPR[SPVATF]-1659870011026
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870012167
GPR[EPVS]-1659870012167
========
fireDatasetChanged(new DatasetChangeInfo());
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659870012169
GPR[SPVAP]-1659870012169
GPR[EPVAP]-1659870012914
GPR[EPVS]-1659870012914
========
fireSeriesChanged();
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659870012917
GPR[SPVAP]-1659870012917
GPR[EPVAP]-1659870014204
GPR[SPVATF]-1659870014204
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870015322
GPR[EPVS]-1659870015322
========
if(Collections.binarySearch(this.data,new TimeSeriesDataItem(period,value))<0){
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}
add(period,value,true);

========
MM Copying to MM
GPR[SPVS]-1659870015323
GPR[SPVAP]-1659870015323
GPR[EPVAP]-1659870016628
GPR[SPVATF]-1659870016628
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870017791
GPR[EPVS]-1659870017791
GPR[ESUN]-1659870017796
GPR[SSUN]-1659870017796
org.jfree.data.time.TimeSeries,654
Find no block!
GPR[SSUN]-1659870018240
org.jfree.data.time.TimeSeries,666
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(period,notify);

========
MM Copying to MM
GPR[SPVS]-1659870021081
GPR[SPVAP]-1659870021081
GPR[EPVAP]-1659870023531
GPR[EPVS]-1659870023531
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(value,notify);

========
MM Copying to MM
GPR[SPVS]-1659870023533
GPR[SPVAP]-1659870023533
GPR[EPVAP]-1659870024522
GPR[EPVS]-1659870024522
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item);

========
MM Copying to MM
GPR[SPVS]-1659870024524
GPR[SPVAP]-1659870024524
GPR[EPVAP]-1659870027603
GPR[SPVATF]-1659870027603
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870028745
GPR[EPVS]-1659870028745
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
item=(TimeSeriesDataItem)item.clone();
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870028746
GPR[SPVAP]-1659870028746
GPR[EPVAP]-1659870030041
GPR[SPVATF]-1659870030041
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870031184
GPR[EPVS]-1659870031184
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.data.add(-maximumItemCount-1,item);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870031185
GPR[SPVAP]-1659870031185
GPR[EPVAP]-1659870032493
GPR[SPVATF]-1659870032493
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870033632
GPR[EPVS]-1659870033632
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
item=(TimeSeriesDataItem)item.clone();
this.data.add(-maximumItemCount-1,item);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870033633
GPR[SPVAP]-1659870033633
GPR[EPVAP]-1659870034954
GPR[SPVATF]-1659870034954
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870036075
GPR[EPVS]-1659870036075
========
maximumItemCount++;
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870036080
GPR[SPVAP]-1659870036080
GPR[EPVAP]-1659870037381
GPR[SPVATF]-1659870037381
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870038518
GPR[EPVS]-1659870038518
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(minY+(minY*maximumItemCount),notify);

========
MM Copying to MM
GPR[SPVS]-1659870038521
GPR[SPVAP]-1659870038521
GPR[EPVAP]-1659870039263
GPR[EPVS]-1659870039263
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(minY,notify);

========
MM Copying to MM
GPR[SPVS]-1659870039265
GPR[SPVAP]-1659870039265
GPR[EPVAP]-1659870040039
GPR[EPVS]-1659870040039
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(Collections.binarySearch(this.data,item)<0){
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870040041
GPR[SPVAP]-1659870040041
GPR[EPVAP]-1659870041327
GPR[SPVATF]-1659870041327
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870042475
GPR[EPVS]-1659870042475
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.minY=value;
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870042477
GPR[SPVAP]-1659870042477
GPR[EPVAP]-1659870043755
GPR[SPVATF]-1659870043755
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870044912
GPR[EPVS]-1659870044912
========
this.data=new java.util.ArrayList();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870044915
GPR[SPVAP]-1659870044915
GPR[EPVAP]-1659870046213
GPR[SPVATF]-1659870046213
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870047346
GPR[EPVS]-1659870047346
========
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870047349
GPR[SPVAP]-1659870047349
GPR[EPVAP]-1659870048106
GPR[EPVS]-1659870048106
========
configureRangeAxes();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870048108
GPR[SPVAP]-1659870048108
GPR[EPVAP]-1659870048876
GPR[EPVS]-1659870048876
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,RectangleEdge.RIGHT);

========
MM Copying to MM
GPR[SPVS]-1659870048879
GPR[SPVAP]-1659870048879
GPR[EPVAP]-1659870049626
GPR[EPVS]-1659870049626
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,RectangleEdge.TOP);

========
MM Copying to MM
GPR[SPVS]-1659870049628
GPR[SPVAP]-1659870049628
GPR[EPVAP]-1659870050398
GPR[EPVS]-1659870050399
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
new java.util.ArrayList(1).add(new Integer(maximumItemCount));
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870050400
GPR[SPVAP]-1659870050400
GPR[EPVAP]-1659870051734
GPR[SPVATF]-1659870051734
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870052876
GPR[EPVS]-1659870052876
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(!Double.isNaN(value)){
notify=oldY<=this.minY||oldY>=this.maxY;
}
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870052878
GPR[SPVAP]-1659870052878
GPR[EPVAP]-1659870053650
GPR[EPVS]-1659870053650
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.maxY=value;
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870053653
GPR[SPVAP]-1659870053653
GPR[EPVAP]-1659870054949
GPR[SPVATF]-1659870054949
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870056071
GPR[EPVS]-1659870056071
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.value=value;
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870056073
GPR[SPVAP]-1659870056073
GPR[EPVAP]-1659870056850
GPR[EPVS]-1659870056850
========
if(notify){
fireChangeEvent();
}
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870056852
GPR[SPVAP]-1659870056852
GPR[EPVAP]-1659870057638
GPR[EPVS]-1659870057638
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870057641
GPR[SPVAP]-1659870057641
GPR[EPVAP]-1659870058937
GPR[SPVATF]-1659870058938
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870060083
GPR[EPVS]-1659870060083
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.data.add(DEFAULT_RANGE_DESCRIPTION);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870060085
GPR[SPVAP]-1659870060085
GPR[EPVAP]-1659870061393
GPR[SPVATF]-1659870061393
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870062531
GPR[EPVS]-1659870062531
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
this.data.add(DEFAULT_RANGE_DESCRIPTION);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870062532
GPR[SPVAP]-1659870062532
GPR[EPVAP]-1659870063832
GPR[SPVATF]-1659870063832
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870064971
GPR[EPVS]-1659870064971
========
if(notify){
fireDatasetChanged(new DatasetChangeInfo());
}
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870064973
GPR[SPVAP]-1659870064973
GPR[EPVAP]-1659870065747
GPR[EPVS]-1659870065747
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
setValue(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870065748
GPR[SPVAP]-1659870065748
GPR[EPVAP]-1659870066496
GPR[EPVS]-1659870066496
========
if(notify){
notifyListeners(new RendererChangeEvent(this));
}
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870066499
GPR[SPVAP]-1659870066499
GPR[EPVAP]-1659870067254
GPR[EPVS]-1659870067254
========
if(notify){
fireSelectionEvent();
}
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870067256
GPR[SPVAP]-1659870067256
GPR[EPVAP]-1659870068004
GPR[EPVS]-1659870068004
========
fireChangeEvent();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870068006
GPR[SPVAP]-1659870068006
GPR[EPVAP]-1659870068793
GPR[EPVS]-1659870068793
========
fireOverlayChanged();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870068794
GPR[SPVAP]-1659870068794
GPR[EPVAP]-1659870069555
GPR[EPVS]-1659870069555
========
fireChartChanged();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870069557
GPR[SPVAP]-1659870069557
GPR[EPVAP]-1659870070355
GPR[EPVS]-1659870070355
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.notify=circular;
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870070356
GPR[SPVAP]-1659870070356
GPR[EPVAP]-1659870071110
GPR[EPVS]-1659870071110
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.maximumItemCount=maximumItemCount;
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870071112
GPR[SPVAP]-1659870071112
GPR[EPVAP]-1659870073537
GPR[SPVATF]-1659870073537
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870074871
GPR[EPVS]-1659870074871
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.notify=notify;
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870074873
GPR[SPVAP]-1659870074873
GPR[EPVAP]-1659870075705
GPR[EPVS]-1659870075705
========
if(notify){
RendererChangeEvent new RendererChangeEvent(this,true)=new RendererChangeEvent(this,true);
notifyListeners(e);
}
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870075708
GPR[SPVAP]-1659870075708
GPR[EPVAP]-1659870076419
GPR[EPVS]-1659870076419
========
fireDatasetChanged(new DatasetChangeInfo());
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870076426
GPR[SPVAP]-1659870076426
GPR[EPVAP]-1659870077181
GPR[EPVS]-1659870077181
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(range==null){
throw new IllegalArgumentException("Null \'range\' argument.");
}
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870077183
GPR[SPVAP]-1659870077183
GPR[EPVAP]-1659870078483
GPR[SPVATF]-1659870078483
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870079615
GPR[EPVS]-1659870079615
========
this.notify=true;
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870079617
GPR[SPVAP]-1659870079617
GPR[EPVAP]-1659870080394
GPR[EPVS]-1659870080394
========
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870080400
GPR[SPVAP]-1659870080400
GPR[EPVAP]-1659870081175
GPR[EPVS]-1659870081175
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(maximumItemCount!=0){
throw new IllegalArgumentException("Invalid series: "+series);
}
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870081176
GPR[SPVAP]-1659870081176
GPR[EPVAP]-1659870081916
GPR[EPVS]-1659870081916
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.notify[item]=selected;
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870081918
GPR[SPVAP]-1659870081918
GPR[EPVAP]-1659870082666
GPR[EPVS]-1659870082666
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870082667
GPR[SPVAP]-1659870082667
GPR[EPVAP]-1659870083963
GPR[SPVATF]-1659870083963
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870085890
GPR[EPVS]-1659870085890
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.data.add(item);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870085892
GPR[SPVAP]-1659870085892
GPR[EPVAP]-1659870088623
GPR[SPVATF]-1659870088623
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870089731
GPR[EPVS]-1659870089731
========
fireSeriesChanged();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870089732
GPR[SPVAP]-1659870089732
GPR[EPVAP]-1659870091027
GPR[SPVATF]-1659870091027
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870092187
GPR[EPVS]-1659870092187
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870092188
GPR[SPVAP]-1659870092188
GPR[EPVAP]-1659870093473
GPR[SPVATF]-1659870093473
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870094602
GPR[EPVS]-1659870094602
========
fireSeriesChanged();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870094604
GPR[SPVAP]-1659870094604
GPR[EPVAP]-1659870095887
GPR[SPVATF]-1659870095887
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870097000
GPR[EPVS]-1659870097000
========
fireSeriesChanged();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.data.add(item);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870097001
GPR[SPVAP]-1659870097001
GPR[EPVAP]-1659870098285
GPR[SPVATF]-1659870098285
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870099438
GPR[EPVS]-1659870099438
========
fireSeriesChanged();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870099440
GPR[SPVAP]-1659870099440
GPR[EPVAP]-1659870100747
GPR[SPVATF]-1659870100747
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870101866
GPR[EPVS]-1659870101866
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(value<=0.0){
throw new IllegalArgumentException("Requires \'value\' > 0.0.");
}
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870101871
GPR[SPVAP]-1659870101871
GPR[EPVAP]-1659870103347
GPR[SPVATF]-1659870103347
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870104473
GPR[EPVS]-1659870104473
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(value<=0.0){
throw new IllegalArgumentException("Requires \'value\' > 0.0.");
}
this.minY=value;
add(item,notify);

========
MM Copying to MM
GPR[SPVS]-1659870104475
GPR[SPVAP]-1659870104475
GPR[EPVAP]-1659870105777
GPR[SPVATF]-1659870105777
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870106910
GPR[EPVS]-1659870106910
GPR[ESUN]-1659870106919
GPR[SSUN]-1659870106919
org.jfree.data.time.TimeSeries,667
GPR[ESUN]-1659870107461
GPR[SSUN]-1659870107461
org.jfree.data.time.TimeSeries,668
Find no block!
GPR[SSUN]-1659870107823
org.jfree.data.time.Year,171
GPR[ESUN]-1659870109861
GPR[SSUN]-1659870109861
org.jfree.data.time.Year,253
GPR[ESUN]-1659870110224
GPR[SSUN]-1659870110224
org.jfree.data.time.Year,348
========
if(o1 instanceof RegularTimePeriod){
result=this.getFirstMillisecond()<(RegularTimePeriod)o1.getFirstMillisecond()?0:(this.getFirstMillisecond()==(RegularTimePeriod)o1.getFirstMillisecond()?0:1);
}else {
result=1;
}

========
MM Copying to MM
GPR[SPVS]-1659870112781
GPR[SPVAP]-1659870112781
GPR[EPVAP]-1659870115234
GPR[EPVS]-1659870115234
========
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear().getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}

========
MM Copying to MM
GPR[SPVS]-1659870117686
GPR[SPVAP]-1659870117686
GPR[EPVAP]-1659870118744
GPR[EPVS]-1659870118744
========
if(o1 instanceof Year){
if(this.firstMillisecond<s.firstMillisecond){
return -1;
}else if(this.firstMillisecond>s.firstMillisecond){
return 1;
}else {
return 0;
}
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}

========
MM Copying to MM
GPR[SPVS]-1659870118746
GPR[SPVAP]-1659870118746
GPR[EPVAP]-1659870119723
GPR[EPVS]-1659870119723
========
if(o1 instanceof Year){
if(result==0){
result=this.MINIMUM_YEAR-y.getMonth();
}
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}

========
MM Copying to MM
GPR[SPVS]-1659870119724
GPR[SPVAP]-1659870119724
GPR[EPVAP]-1659870120629
GPR[EPVS]-1659870120629
========
if(o1 instanceof Year){
Year y=(Year)o1;
difference=this.serialVersionUID-t1.time;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}

========
MM Copying to MM
GPR[SPVS]-1659870120631
GPR[SPVAP]-1659870120631
GPR[EPVAP]-1659870121541
GPR[EPVS]-1659870121541
========
if(o1==this){
return true;
}
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}

========
MM Copying to MM
GPR[SPVS]-1659870121553
GPR[SPVAP]-1659870121553
GPR[EPVAP]-1659870122456
GPR[EPVS]-1659870122456
GPR[ESUN]-1659870122457
GPR[SSUN]-1659870122457
org.jfree.data.time.Year,349
GPR[ESUN]-1659870122884
GPR[SSUN]-1659870122884
org.jfree.data.time.Year,350
GPR[ESUN]-1659870123240
GPR[SSUN]-1659870123240
org.jfree.data.time.Year,351
Find no block!
GPR[SSUN]-1659870123568
org.jfree.data.time.Year,367
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear().getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870126338
GPR[SPVAP]-1659870126338
GPR[EPVAP]-1659870128782
GPR[EPVS]-1659870128782
========
int result;
if(o1 instanceof Year){
if(this.firstMillisecond<s.firstMillisecond){
return -1;
}else if(this.firstMillisecond>s.firstMillisecond){
return 1;
}else {
return 0;
}
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870128784
GPR[SPVAP]-1659870128784
GPR[EPVAP]-1659870129781
GPR[EPVS]-1659870129781
========
int result;
if(o1 instanceof Year){
if(result==0){
result=this.MINIMUM_YEAR-y.getMonth();
}
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870129783
GPR[SPVAP]-1659870129783
GPR[EPVAP]-1659870130745
GPR[EPVS]-1659870130745
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+this.year;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870130747
GPR[SPVAP]-1659870130747
GPR[EPVAP]-1659870133923
GPR[SPVATF]-1659870133923
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870135053
GPR[EPVS]-1659870135053
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(o1!=null){
result=object.hashCode();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870135054
GPR[SPVAP]-1659870135054
GPR[EPVAP]-1659870135751
GPR[EPVS]-1659870135751
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
difference=this.serialVersionUID-t1.time;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870135753
GPR[SPVAP]-1659870135753
GPR[EPVAP]-1659870136456
GPR[EPVS]-1659870136456
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(y!=null){
result=dataset.getSeriesCount();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870136458
GPR[SPVAP]-1659870136458
GPR[EPVAP]-1659870137167
GPR[EPVS]-1659870137167
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(this.equals(SeriesChangeType.ADD)){
result=SeriesChangeType.ADD;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870137168
GPR[SPVAP]-1659870137168
GPR[EPVAP]-1659870137874
GPR[EPVS]-1659870137874
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(this.equals(PieDatasetChangeType.ADD)){
result=PieDatasetChangeType.ADD;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870137875
GPR[SPVAP]-1659870137875
GPR[EPVAP]-1659870138581
GPR[EPVS]-1659870138581
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(y!=null){
result=tooltips.size();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870138582
GPR[SPVAP]-1659870138582
GPR[EPVAP]-1659870139306
GPR[EPVS]-1659870139306
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(y!=null){
result=urls.size();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870139307
GPR[SPVAP]-1659870139307
GPR[EPVAP]-1659870140034
GPR[EPVS]-1659870140034
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(y!=null){
result=urlMap.size();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870140035
GPR[SPVAP]-1659870140035
GPR[EPVAP]-1659870140733
GPR[EPVS]-1659870140733
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(y!=null){
result=kobj.getObject();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870140734
GPR[SPVAP]-1659870140734
GPR[EPVAP]-1659870141443
GPR[EPVS]-1659870141443
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=HashUtilities.hashCode(result,getToolTipText());
return result;

========
MM Copying to MM
GPR[SPVS]-1659870141444
GPR[SPVAP]-1659870141444
GPR[EPVAP]-1659870142167
GPR[EPVS]-1659870142167
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=HashUtilities.hashCode(result,getURLText());
return result;

========
MM Copying to MM
GPR[SPVS]-1659870142168
GPR[SPVAP]-1659870142168
GPR[EPVAP]-1659870142878
GPR[EPVS]-1659870142878
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=HashUtilities.hashCode(result,getToolTipText());
result=HashUtilities.hashCode(result,getURLText());
return result;

========
MM Copying to MM
GPR[SPVS]-1659870142879
GPR[SPVAP]-1659870142879
GPR[EPVAP]-1659870143587
GPR[EPVS]-1659870143587
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=29*result+(this.o1!=null?this.obj.hashCode():0);
return result;

========
MM Copying to MM
GPR[SPVS]-1659870143588
GPR[SPVAP]-1659870143588
GPR[EPVAP]-1659870144319
GPR[EPVS]-1659870144319
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
return result+1;

========
MM Copying to MM
GPR[SPVS]-1659870144320
GPR[SPVAP]-1659870144320
GPR[EPVAP]-1659870145586
GPR[SPVATF]-1659870145586
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870146694
GPR[EPVS]-1659870146694
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=HashUtilities.hashCode(result,this.MINIMUM_YEAR);
return result;

========
MM Copying to MM
GPR[SPVS]-1659870146696
GPR[SPVAP]-1659870146696
GPR[EPVAP]-1659870147401
GPR[EPVS]-1659870147401
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+this.MINIMUM_YEAR;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870147403
GPR[SPVAP]-1659870147403
GPR[EPVAP]-1659870148633
GPR[SPVATF]-1659870148633
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870149756
GPR[EPVS]-1659870149756
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+getSecond().hashCode();
return result;

========
MM Copying to MM
GPR[SPVS]-1659870149757
GPR[SPVAP]-1659870149757
GPR[EPVAP]-1659870150482
GPR[EPVS]-1659870150482
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870150484
GPR[SPVAP]-1659870150484
GPR[EPVAP]-1659870151784
GPR[SPVATF]-1659870151784
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870152914
GPR[EPVS]-1659870152914
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+this.MINIMUM_YEAR;
result=37*result+this.year;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870152916
GPR[SPVAP]-1659870152916
GPR[EPVAP]-1659870154187
GPR[SPVATF]-1659870154188
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870155304
GPR[EPVS]-1659870155304
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(this.equals(PlotOrientation.HORIZONTAL)){
result=PlotOrientation.HORIZONTAL;
}else if(this.equals(PlotOrientation.VERTICAL)){
result=PlotOrientation.VERTICAL;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870155305
GPR[SPVAP]-1659870155305
GPR[EPVAP]-1659870156009
GPR[EPVS]-1659870156009
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(this.equals(TickType.MAJOR)){
result=TickType.MAJOR;
}else if(this.equals(TickType.MINOR)){
result=TickType.MINOR;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870156010
GPR[SPVAP]-1659870156010
GPR[EPVAP]-1659870156714
GPR[EPVS]-1659870156714
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(this.equals(PieLabelLinkStyle.STANDARD)){
result=PieLabelLinkStyle.STANDARD;
}else if(this.equals(PieLabelLinkStyle.QUAD_CURVE)){
result=PieLabelLinkStyle.QUAD_CURVE;
}else if(this.equals(PieLabelLinkStyle.CUBIC_CURVE)){
result=PieLabelLinkStyle.CUBIC_CURVE;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870156716
GPR[SPVAP]-1659870156716
GPR[EPVAP]-1659870157431
GPR[EPVS]-1659870157431
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(this.equals(AreaRendererEndType.LEVEL)){
result=AreaRendererEndType.LEVEL;
}else if(this.equals(AreaRendererEndType.TAPER)){
result=AreaRendererEndType.TAPER;
}else if(this.equals(AreaRendererEndType.TRUNCATE)){
result=AreaRendererEndType.TRUNCATE;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870157432
GPR[SPVAP]-1659870157432
GPR[EPVAP]-1659870158119
GPR[EPVS]-1659870158119
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=(int)(serialVersionUID^(temp>>>32));
return result;

========
MM Copying to MM
GPR[SPVS]-1659870158120
GPR[SPVAP]-1659870158120
GPR[EPVAP]-1659870158828
GPR[EPVS]-1659870158828
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=29*result+(int)(serialVersionUID^(temp>>>32));
return result;

========
MM Copying to MM
GPR[SPVS]-1659870158829
GPR[SPVAP]-1659870158829
GPR[EPVAP]-1659870159534
GPR[EPVS]-1659870159534
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+(int)(this.serialVersionUID^(this.segmentSize>>>32));
return result;

========
MM Copying to MM
GPR[SPVS]-1659870159536
GPR[SPVAP]-1659870159536
GPR[EPVAP]-1659870160232
GPR[EPVS]-1659870160232
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+(int)(this.serialVersionUID^(this.startTime>>>32));
return result;

========
MM Copying to MM
GPR[SPVS]-1659870160233
GPR[SPVAP]-1659870160233
GPR[EPVAP]-1659870160931
GPR[EPVS]-1659870160931
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+(int)(serialVersionUID^(temp>>>32));
return result;

========
MM Copying to MM
GPR[SPVS]-1659870160932
GPR[SPVAP]-1659870160932
GPR[EPVAP]-1659870161638
GPR[EPVS]-1659870161638
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=HashUtilities.hashCode(result,size());
return result;

========
MM Copying to MM
GPR[SPVS]-1659870161639
GPR[SPVAP]-1659870161639
GPR[EPVAP]-1659870162341
GPR[EPVS]-1659870162341
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=(int)(serialVersionUID^(temp>>>32));
result=29*result+(int)(serialVersionUID^(temp>>>32));
return result;

========
MM Copying to MM
GPR[SPVS]-1659870162345
GPR[SPVAP]-1659870162345
GPR[EPVAP]-1659870163093
GPR[EPVS]-1659870163093
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+(int)(serialVersionUID^(l>>>32));
return result;

========
MM Copying to MM
GPR[SPVS]-1659870163095
GPR[SPVAP]-1659870163095
GPR[EPVAP]-1659870163799
GPR[EPVS]-1659870163799
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870163801
GPR[SPVAP]-1659870163801
GPR[EPVAP]-1659870164417
GPR[EPVS]-1659870164417
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870164418
GPR[SPVAP]-1659870164418
GPR[EPVAP]-1659870165018
GPR[EPVS]-1659870165018
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870165020
GPR[SPVAP]-1659870165020
GPR[EPVAP]-1659870165627
GPR[EPVS]-1659870165627
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870165628
GPR[SPVAP]-1659870165628
GPR[EPVAP]-1659870166877
GPR[SPVATF]-1659870166877
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870168006
GPR[EPVS]-1659870168006
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870168007
GPR[SPVAP]-1659870168007
GPR[EPVAP]-1659870169268
GPR[SPVATF]-1659870169268
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870170398
GPR[EPVS]-1659870170398
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=29*result+this.MINIMUM_YEAR;
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870170399
GPR[SPVAP]-1659870170399
GPR[EPVAP]-1659870171657
GPR[SPVATF]-1659870171657
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870172776
GPR[EPVS]-1659870172776
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+(int)(this.serialVersionUID^(this.baseMillis>>>32));
return result;

========
MM Copying to MM
GPR[SPVS]-1659870172779
GPR[SPVAP]-1659870172779
GPR[EPVAP]-1659870173475
GPR[EPVS]-1659870173475
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
return retval;

========
MM Copying to MM
GPR[SPVS]-1659870173557
GPR[SPVAP]-1659870173557
GPR[EPVAP]-1659870174254
GPR[EPVS]-1659870174254
========
int result;
if(o1==this){
return true;
}
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870174257
GPR[SPVAP]-1659870174257
GPR[EPVAP]-1659870174996
GPR[EPVS]-1659870174996
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870174998
GPR[SPVAP]-1659870174998
GPR[EPVAP]-1659870175593
GPR[EPVS]-1659870175593
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870175594
GPR[SPVAP]-1659870175594
GPR[EPVAP]-1659870176218
GPR[EPVS]-1659870176218
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870176219
GPR[SPVAP]-1659870176220
GPR[EPVAP]-1659870176814
GPR[EPVS]-1659870176814
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870176815
GPR[SPVAP]-1659870176815
GPR[EPVAP]-1659870177406
GPR[EPVS]-1659870177406
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870177407
GPR[SPVAP]-1659870177407
GPR[EPVAP]-1659870178014
GPR[EPVS]-1659870178014
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870178016
GPR[SPVAP]-1659870178016
GPR[EPVAP]-1659870178618
GPR[EPVS]-1659870178618
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870178619
GPR[SPVAP]-1659870178619
GPR[EPVAP]-1659870179248
GPR[EPVS]-1659870179248
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870179249
GPR[SPVAP]-1659870179249
GPR[EPVAP]-1659870179847
GPR[EPVS]-1659870179847
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870179848
GPR[SPVAP]-1659870179848
GPR[EPVAP]-1659870180453
GPR[EPVS]-1659870180453
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659870180455
GPR[SPVAP]-1659870180455
GPR[EPVAP]-1659870181061
GPR[EPVS]-1659870181061
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870181063
GPR[SPVAP]-1659870181063
GPR[EPVAP]-1659870181669
GPR[EPVS]-1659870181669
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870181670
GPR[SPVAP]-1659870181670
GPR[EPVAP]-1659870182279
GPR[EPVS]-1659870182279
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870182280
GPR[SPVAP]-1659870182281
GPR[EPVAP]-1659870182875
GPR[EPVS]-1659870182875
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870182876
GPR[SPVAP]-1659870182876
GPR[EPVAP]-1659870183475
GPR[EPVS]-1659870183475
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870183477
GPR[SPVAP]-1659870183477
GPR[EPVAP]-1659870184090
GPR[EPVS]-1659870184090
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870184091
GPR[SPVAP]-1659870184091
GPR[EPVAP]-1659870184749
GPR[EPVS]-1659870184749
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870184750
GPR[SPVAP]-1659870184750
GPR[EPVAP]-1659870185367
GPR[EPVS]-1659870185367
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870185368
GPR[SPVAP]-1659870185368
GPR[EPVAP]-1659870186015
GPR[EPVS]-1659870186015
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870186016
GPR[SPVAP]-1659870186016
GPR[EPVAP]-1659870186653
GPR[EPVS]-1659870186653
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870186654
GPR[SPVAP]-1659870186654
GPR[EPVAP]-1659870187288
GPR[EPVS]-1659870187288
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870187289
GPR[SPVAP]-1659870187289
GPR[EPVAP]-1659870187879
GPR[EPVS]-1659870187879
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870187880
GPR[SPVAP]-1659870187880
GPR[EPVAP]-1659870188490
GPR[EPVS]-1659870188490
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870188491
GPR[SPVAP]-1659870188491
GPR[EPVAP]-1659870189116
GPR[EPVS]-1659870189116
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
result=29*result+(int)this.serialVersionUID;
return result;

========
MM Copying to MM
GPR[SPVS]-1659870189117
GPR[SPVAP]-1659870189117
GPR[EPVAP]-1659870189726
GPR[EPVS]-1659870189726
GPR[ESUN]-1659870189727
GPR[SSUN]-1659870189727
org.jfree.data.time.TimeSeriesDataItem,121
========
this.value=value;
this(period,new Double(value));

========
MM Copying to MM
GPR[SPVS]-1659870191984
GPR[SPVAP]-1659870191984
GPR[EPVAP]-1659870194345
GPR[EPVS]-1659870194345
GPR[ESUN]-1659870194351
GPR[SSUN]-1659870194351
org.jfree.data.time.TimeSeriesDataItem,122
Find no block!
GPR[SSUN]-1659870194778
org.jfree.data.time.Year,114
Find no block!
GPR[SSUN]-1659870195124
org.jfree.data.time.Year,115
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870197098
GPR[SPVAP]-1659870197098
GPR[EPVAP]-1659870201576
GPR[SPVATF]-1659870201576
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870202691
GPR[EPVS]-1659870202691
========
if((year>=1900)&&(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870202692
GPR[SPVAP]-1659870202692
GPR[EPVAP]-1659870203966
GPR[SPVATF]-1659870203966
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870205093
GPR[EPVS]-1659870205093
========
if((year>=1900)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870205094
GPR[SPVAP]-1659870205094
GPR[EPVAP]-1659870206353
GPR[SPVATF]-1659870206353
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870207471
GPR[EPVS]-1659870207471
========
if((year<Year.MINIMUM_YEAR)||(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870207472
GPR[SPVAP]-1659870207472
GPR[EPVAP]-1659870208748
GPR[SPVATF]-1659870208748
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870209879
GPR[EPVS]-1659870209879
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659870209880
GPR[SPVAP]-1659870209880
GPR[EPVAP]-1659870211175
GPR[SPVATF]-1659870211175
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870212322
GPR[EPVS]-1659870212322
========
if((year>=1900)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870212324
GPR[SPVAP]-1659870212324
GPR[EPVAP]-1659870213556
GPR[SPVATF]-1659870213557
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870214731
GPR[EPVS]-1659870214731
========
if((year<Year.MINIMUM_YEAR)&&(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870214732
GPR[SPVAP]-1659870214732
GPR[EPVAP]-1659870215987
GPR[SPVATF]-1659870215987
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870217130
GPR[EPVS]-1659870217130
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659870217131
GPR[SPVAP]-1659870217131
GPR[EPVAP]-1659870218370
GPR[SPVATF]-1659870218370
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870219536
GPR[EPVS]-1659870219536
========
if((year>=1900)&&(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659870219537
GPR[SPVAP]-1659870219537
GPR[EPVAP]-1659870220780
GPR[SPVATF]-1659870220780
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870221896
GPR[EPVS]-1659870221896
========
if((year>=1900)||(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870221897
GPR[SPVAP]-1659870221897
GPR[EPVAP]-1659870223218
GPR[SPVATF]-1659870223218
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870224352
GPR[EPVS]-1659870224352
========
if((year>=1900)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659870224354
GPR[SPVAP]-1659870224354
GPR[EPVAP]-1659870225603
GPR[SPVATF]-1659870225603
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870226751
GPR[EPVS]-1659870226751
========
if((year<Year.MINIMUM_YEAR)||(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659870226752
GPR[SPVAP]-1659870226752
GPR[EPVAP]-1659870227979
GPR[SPVATF]-1659870227979
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870229104
GPR[EPVS]-1659870229104
========
if((year>=1900)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659870229105
GPR[SPVAP]-1659870229105
GPR[EPVAP]-1659870230330
GPR[SPVATF]-1659870230330
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870232417
GPR[EPVS]-1659870232417
========
if((year<Year.MINIMUM_YEAR)&&(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659870232418
GPR[SPVAP]-1659870232418
GPR[EPVAP]-1659870233777
GPR[SPVATF]-1659870233777
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870235053
GPR[EPVS]-1659870235053
========
if((year>=1900)||(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659870235054
GPR[SPVAP]-1659870235054
GPR[EPVAP]-1659870236372
GPR[SPVATF]-1659870236372
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870237497
GPR[EPVS]-1659870237497
========
if((day<Year.MINIMUM_YEAR)||(day>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870237498
GPR[SPVAP]-1659870237499
GPR[EPVAP]-1659870238196
GPR[EPVS]-1659870238196
========
if((year>=1)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870238197
GPR[SPVAP]-1659870238197
GPR[EPVAP]-1659870239439
GPR[SPVATF]-1659870239439
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870240557
GPR[EPVS]-1659870240557
========
if((year>=1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870240558
GPR[SPVAP]-1659870240558
GPR[EPVAP]-1659870241809
GPR[SPVATF]-1659870241809
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870242963
GPR[EPVS]-1659870242963
========
if((year<Year.MINIMUM_YEAR)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870242964
GPR[SPVAP]-1659870242964
GPR[EPVAP]-1659870244213
GPR[SPVATF]-1659870244213
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870245362
GPR[EPVS]-1659870245362
========
if((day<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870245363
GPR[SPVAP]-1659870245363
GPR[EPVAP]-1659870246058
GPR[EPVS]-1659870246058
========
if((year<Year.MINIMUM_YEAR)||(day>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870246060
GPR[SPVAP]-1659870246060
GPR[EPVAP]-1659870246795
GPR[EPVS]-1659870246795
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659870246797
GPR[SPVAP]-1659870246797
GPR[EPVAP]-1659870248105
GPR[SPVATF]-1659870248105
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870249243
GPR[EPVS]-1659870249243
========
if((year>=1)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870249244
GPR[SPVAP]-1659870249244
GPR[EPVAP]-1659870250488
GPR[SPVATF]-1659870250488
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870251632
GPR[EPVS]-1659870251632
========
if((year<Year.MINIMUM_YEAR)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870251633
GPR[SPVAP]-1659870251633
GPR[EPVAP]-1659870252879
GPR[SPVATF]-1659870252879
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870254003
GPR[EPVS]-1659870254003
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659870254005
GPR[SPVAP]-1659870254005
GPR[EPVAP]-1659870255236
GPR[SPVATF]-1659870255236
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870256395
GPR[EPVS]-1659870256395
========
if((year>=1)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659870256396
GPR[SPVAP]-1659870256396
GPR[EPVAP]-1659870257627
GPR[SPVATF]-1659870257627
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870258784
GPR[EPVS]-1659870258784
========
if((year>=1)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870258785
GPR[SPVAP]-1659870258785
GPR[EPVAP]-1659870260040
GPR[SPVATF]-1659870260040
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870261164
GPR[EPVS]-1659870261164
========
if((year>=1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659870261165
GPR[SPVAP]-1659870261165
GPR[EPVAP]-1659870262444
GPR[SPVATF]-1659870262444
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870263567
GPR[EPVS]-1659870263567
========
if((year<Year.MINIMUM_YEAR)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659870263568
GPR[SPVAP]-1659870263568
GPR[EPVAP]-1659870264828
GPR[SPVATF]-1659870264828
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870265976
GPR[EPVS]-1659870265976
========
if((year>=1)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659870265977
GPR[SPVAP]-1659870265977
GPR[EPVAP]-1659870267225
GPR[SPVATF]-1659870267226
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870268340
GPR[EPVS]-1659870268340
========
if((year<Year.MINIMUM_YEAR)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659870268341
GPR[SPVAP]-1659870268341
GPR[EPVAP]-1659870269593
GPR[SPVATF]-1659870269593
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870270712
GPR[EPVS]-1659870270712
========
if((year>=1)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659870270714
GPR[SPVAP]-1659870270714
GPR[EPVAP]-1659870271964
GPR[SPVATF]-1659870271964
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870273138
GPR[EPVS]-1659870273138
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
if(this.year!=that.year){
return false;
}
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870273139
GPR[SPVAP]-1659870273139
GPR[EPVAP]-1659870273845
GPR[EPVS]-1659870273845
========
if((month<Year.MINIMUM_YEAR)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870273847
GPR[SPVAP]-1659870273847
GPR[EPVAP]-1659870274548
GPR[EPVS]-1659870274548
========
if((year<1)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870274549
GPR[SPVAP]-1659870274549
GPR[EPVAP]-1659870275777
GPR[SPVATF]-1659870275777
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870276909
GPR[EPVS]-1659870276909
========
if((year<1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870276910
GPR[SPVAP]-1659870276910
GPR[EPVAP]-1659870278159
GPR[SPVATF]-1659870278159
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870279280
GPR[EPVS]-1659870279280
========
if((year<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870279281
GPR[SPVAP]-1659870279281
GPR[EPVAP]-1659870280521
GPR[SPVATF]-1659870280521
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870281652
GPR[EPVS]-1659870281652
========
if((month<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870281653
GPR[SPVAP]-1659870281653
GPR[EPVAP]-1659870282348
GPR[EPVS]-1659870282348
========
if((year<Year.MINIMUM_YEAR)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870282349
GPR[SPVAP]-1659870282349
GPR[EPVAP]-1659870283057
GPR[EPVS]-1659870283057
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870283058
GPR[SPVAP]-1659870283058
GPR[EPVAP]-1659870284290
GPR[SPVATF]-1659870284290
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870285399
GPR[EPVS]-1659870285399
========
this.year=month;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870285400
GPR[SPVAP]-1659870285400
GPR[EPVAP]-1659870286128
GPR[EPVS]-1659870286128
========
this.year=year;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870286129
GPR[SPVAP]-1659870286129
GPR[EPVAP]-1659870286823
GPR[EPVS]-1659870286823
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870286825
GPR[SPVAP]-1659870286825
GPR[EPVAP]-1659870288061
GPR[SPVATF]-1659870288061
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870289191
GPR[EPVS]-1659870289191
========
if((year<1)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870289192
GPR[SPVAP]-1659870289192
GPR[EPVAP]-1659870290411
GPR[SPVATF]-1659870290411
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870291546
GPR[EPVS]-1659870291546
========
peg(Calendar.getInstance());
if((year<1)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870291547
GPR[SPVAP]-1659870291547
GPR[EPVAP]-1659870292801
GPR[SPVATF]-1659870292801
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870293961
GPR[EPVS]-1659870293961
========
if((year<1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870293963
GPR[SPVAP]-1659870293963
GPR[EPVAP]-1659870295255
GPR[SPVATF]-1659870295255
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870296451
GPR[EPVS]-1659870296451
========
peg(Calendar.getInstance());
if((year<1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870296452
GPR[SPVAP]-1659870296452
GPR[EPVAP]-1659870297679
GPR[SPVATF]-1659870297679
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870298839
GPR[EPVS]-1659870298839
========
if((year<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870298840
GPR[SPVAP]-1659870298840
GPR[EPVAP]-1659870300078
GPR[SPVATF]-1659870300078
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870301214
GPR[EPVS]-1659870301214
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870301215
GPR[SPVAP]-1659870301215
GPR[EPVAP]-1659870302442
GPR[SPVATF]-1659870302442
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870303587
GPR[EPVS]-1659870303587
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870303588
GPR[SPVAP]-1659870303588
GPR[EPVAP]-1659870304817
GPR[SPVATF]-1659870304817
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870305972
GPR[EPVS]-1659870305972
========
peg(Calendar.getInstance());
if((year<1)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870305973
GPR[SPVAP]-1659870305973
GPR[EPVAP]-1659870307249
GPR[SPVATF]-1659870307249
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870308378
GPR[EPVS]-1659870308378
========
peg(Calendar.getInstance());
if((year<1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870308379
GPR[SPVAP]-1659870308379
GPR[EPVAP]-1659870309617
GPR[SPVATF]-1659870309617
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870310743
GPR[EPVS]-1659870310743
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870310744
GPR[SPVAP]-1659870310744
GPR[EPVAP]-1659870311993
GPR[SPVATF]-1659870311993
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870313135
GPR[EPVS]-1659870313135
========
if((week<Year.MINIMUM_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870313136
GPR[SPVAP]-1659870313136
GPR[EPVAP]-1659870313849
GPR[EPVS]-1659870313849
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870313850
GPR[SPVAP]-1659870313850
GPR[EPVAP]-1659870314541
GPR[EPVS]-1659870314541
========
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870314542
GPR[SPVAP]-1659870314542
GPR[EPVAP]-1659870315250
GPR[EPVS]-1659870315250
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870315251
GPR[SPVAP]-1659870315251
GPR[EPVAP]-1659870315953
GPR[EPVS]-1659870315953
========
if((week<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870315955
GPR[SPVAP]-1659870315955
GPR[EPVAP]-1659870316651
GPR[EPVS]-1659870316651
========
if((year<Year.MINIMUM_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870316653
GPR[SPVAP]-1659870316653
GPR[EPVAP]-1659870317359
GPR[EPVS]-1659870317359
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870317360
GPR[SPVAP]-1659870317360
GPR[EPVAP]-1659870318599
GPR[SPVATF]-1659870318599
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870319731
GPR[EPVS]-1659870319731
========
this.year=(byte)week;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870319733
GPR[SPVAP]-1659870319733
GPR[EPVAP]-1659870320441
GPR[EPVS]-1659870320441
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870320442
GPR[SPVAP]-1659870320442
GPR[EPVAP]-1659870321673
GPR[SPVATF]-1659870321673
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870322819
GPR[EPVS]-1659870322819
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870322821
GPR[SPVAP]-1659870322821
GPR[EPVAP]-1659870323526
GPR[EPVS]-1659870323526
========
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870323527
GPR[SPVAP]-1659870323527
GPR[EPVAP]-1659870324218
GPR[EPVS]-1659870324218
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870324219
GPR[SPVAP]-1659870324219
GPR[EPVAP]-1659870325439
GPR[SPVATF]-1659870325439
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870326555
GPR[EPVS]-1659870326555
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870326556
GPR[SPVAP]-1659870326556
GPR[EPVAP]-1659870327820
GPR[SPVATF]-1659870327820
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870328951
GPR[EPVS]-1659870328951
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870328952
GPR[SPVAP]-1659870328952
GPR[EPVAP]-1659870330179
GPR[SPVATF]-1659870330179
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870331291
GPR[EPVS]-1659870331291
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870331292
GPR[SPVAP]-1659870331292
GPR[EPVAP]-1659870331994
GPR[EPVS]-1659870331994
========
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870331996
GPR[SPVAP]-1659870331996
GPR[EPVAP]-1659870332709
GPR[EPVS]-1659870332710
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870332711
GPR[SPVAP]-1659870332711
GPR[EPVAP]-1659870333426
GPR[EPVS]-1659870333426
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870333428
GPR[SPVAP]-1659870333428
GPR[EPVAP]-1659870334129
GPR[EPVS]-1659870334129
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870334130
GPR[SPVAP]-1659870334130
GPR[EPVAP]-1659870334821
GPR[EPVS]-1659870334821
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870334822
GPR[SPVAP]-1659870334822
GPR[EPVAP]-1659870335521
GPR[EPVS]-1659870335521
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870335522
GPR[SPVAP]-1659870335522
GPR[EPVAP]-1659870336217
GPR[EPVS]-1659870336217
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870336218
GPR[SPVAP]-1659870336218
GPR[EPVAP]-1659870337470
GPR[SPVATF]-1659870337470
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870338595
GPR[EPVS]-1659870338595
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870338596
GPR[SPVAP]-1659870338596
GPR[EPVAP]-1659870339824
GPR[SPVATF]-1659870339824
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870340956
GPR[EPVS]-1659870340956
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870340957
GPR[SPVAP]-1659870340957
GPR[EPVAP]-1659870342217
GPR[SPVATF]-1659870342217
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870343350
GPR[EPVS]-1659870343350
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870343352
GPR[SPVAP]-1659870343352
GPR[EPVAP]-1659870344047
GPR[EPVS]-1659870344047
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870344049
GPR[SPVAP]-1659870344049
GPR[EPVAP]-1659870344742
GPR[EPVS]-1659870344742
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870344743
GPR[SPVAP]-1659870344743
GPR[EPVAP]-1659870345439
GPR[EPVS]-1659870345439
========
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870345440
GPR[SPVAP]-1659870345440
GPR[EPVAP]-1659870346132
GPR[EPVS]-1659870346132
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870346134
GPR[SPVAP]-1659870346134
GPR[EPVAP]-1659870346838
GPR[EPVS]-1659870346838
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870346840
GPR[SPVAP]-1659870346840
GPR[EPVAP]-1659870347543
GPR[EPVS]-1659870347543
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870347544
GPR[SPVAP]-1659870347544
GPR[EPVAP]-1659870348803
GPR[SPVATF]-1659870348803
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870349951
GPR[EPVS]-1659870349951
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870349952
GPR[SPVAP]-1659870349952
GPR[EPVAP]-1659870351175
GPR[SPVATF]-1659870351175
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870352315
GPR[EPVS]-1659870352315
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870352316
GPR[SPVAP]-1659870352316
GPR[EPVAP]-1659870353569
GPR[SPVATF]-1659870353569
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870354682
GPR[EPVS]-1659870354682
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870354683
GPR[SPVAP]-1659870354683
GPR[EPVAP]-1659870355391
GPR[EPVS]-1659870355391
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870355392
GPR[SPVAP]-1659870355392
GPR[EPVAP]-1659870356131
GPR[EPVS]-1659870356131
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870356132
GPR[SPVAP]-1659870356132
GPR[EPVAP]-1659870356823
GPR[EPVS]-1659870356823
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870356824
GPR[SPVAP]-1659870356825
GPR[EPVAP]-1659870357527
GPR[EPVS]-1659870357527
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870357528
GPR[SPVAP]-1659870357528
GPR[EPVAP]-1659870358253
GPR[EPVS]-1659870358253
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870358254
GPR[SPVAP]-1659870358254
GPR[EPVAP]-1659870358947
GPR[EPVS]-1659870358947
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870358948
GPR[SPVAP]-1659870358948
GPR[EPVAP]-1659870359693
GPR[EPVS]-1659870359693
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870359694
GPR[SPVAP]-1659870359694
GPR[EPVAP]-1659870360393
GPR[EPVS]-1659870360393
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870360394
GPR[SPVAP]-1659870360394
GPR[EPVAP]-1659870361086
GPR[EPVS]-1659870361086
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870361087
GPR[SPVAP]-1659870361087
GPR[EPVAP]-1659870362347
GPR[SPVATF]-1659870362347
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870363523
GPR[EPVS]-1659870363523
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870363525
GPR[SPVAP]-1659870363525
GPR[EPVAP]-1659870364222
GPR[EPVS]-1659870364222
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870364223
GPR[SPVAP]-1659870364223
GPR[EPVAP]-1659870364922
GPR[EPVS]-1659870364922
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870364923
GPR[SPVAP]-1659870364923
GPR[EPVAP]-1659870365615
GPR[EPVS]-1659870365615
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870365616
GPR[SPVAP]-1659870365616
GPR[EPVAP]-1659870366311
GPR[EPVS]-1659870366311
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870366312
GPR[SPVAP]-1659870366312
GPR[EPVAP]-1659870367015
GPR[EPVS]-1659870367015
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870367016
GPR[SPVAP]-1659870367016
GPR[EPVAP]-1659870367710
GPR[EPVS]-1659870367710
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870367711
GPR[SPVAP]-1659870367711
GPR[EPVAP]-1659870368434
GPR[EPVS]-1659870368434
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870368435
GPR[SPVAP]-1659870368435
GPR[EPVAP]-1659870369148
GPR[EPVS]-1659870369148
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870369149
GPR[SPVAP]-1659870369149
GPR[EPVAP]-1659870369839
GPR[EPVS]-1659870369839
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870369840
GPR[SPVAP]-1659870369840
GPR[EPVAP]-1659870371093
GPR[SPVATF]-1659870371093
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870372228
GPR[EPVS]-1659870372228
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870372229
GPR[SPVAP]-1659870372229
GPR[EPVAP]-1659870372942
GPR[EPVS]-1659870372942
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870372944
GPR[SPVAP]-1659870372944
GPR[EPVAP]-1659870373644
GPR[EPVS]-1659870373645
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870373646
GPR[SPVAP]-1659870373646
GPR[EPVAP]-1659870374354
GPR[EPVS]-1659870374354
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870374355
GPR[SPVAP]-1659870374355
GPR[EPVAP]-1659870375068
GPR[EPVS]-1659870375068
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659870375069
GPR[SPVAP]-1659870375069
GPR[EPVAP]-1659870375764
GPR[EPVS]-1659870375764
========
if((quarter<Year.MINIMUM_YEAR)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870375765
GPR[SPVAP]-1659870375765
GPR[EPVAP]-1659870376457
GPR[EPVS]-1659870376457
========
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870376458
GPR[SPVAP]-1659870376458
GPR[EPVAP]-1659870377171
GPR[EPVS]-1659870377171
========
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870377172
GPR[SPVAP]-1659870377172
GPR[EPVAP]-1659870377867
GPR[EPVS]-1659870377867
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870377868
GPR[SPVAP]-1659870377868
GPR[EPVAP]-1659870378575
GPR[EPVS]-1659870378575
========
if((quarter<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870378576
GPR[SPVAP]-1659870378576
GPR[EPVAP]-1659870379280
GPR[EPVS]-1659870379280
========
if((year<Year.MINIMUM_YEAR)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870379281
GPR[SPVAP]-1659870379281
GPR[EPVAP]-1659870379977
GPR[EPVS]-1659870379977
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870379979
GPR[SPVAP]-1659870379979
GPR[EPVAP]-1659870381239
GPR[SPVATF]-1659870381239
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870382360
GPR[EPVS]-1659870382360
========
this.year=(byte)quarter;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870382361
GPR[SPVAP]-1659870382361
GPR[EPVAP]-1659870383101
GPR[EPVS]-1659870383101
========
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870383103
GPR[SPVAP]-1659870383103
GPR[EPVAP]-1659870383798
GPR[EPVS]-1659870383798
========
this.year=(short)year;
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870383799
GPR[SPVAP]-1659870383799
GPR[EPVAP]-1659870384509
GPR[EPVS]-1659870384509
========
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870384510
GPR[SPVAP]-1659870384510
GPR[EPVAP]-1659870385233
GPR[EPVS]-1659870385233
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870385234
GPR[SPVAP]-1659870385234
GPR[EPVAP]-1659870385943
GPR[EPVS]-1659870385943
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870385944
GPR[SPVAP]-1659870385944
GPR[EPVAP]-1659870386641
GPR[EPVS]-1659870386641
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870386642
GPR[SPVAP]-1659870386642
GPR[EPVAP]-1659870387339
GPR[EPVS]-1659870387339
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870387340
GPR[SPVAP]-1659870387340
GPR[EPVAP]-1659870388573
GPR[SPVATF]-1659870388573
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870389706
GPR[EPVS]-1659870389706
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870389707
GPR[SPVAP]-1659870389707
GPR[EPVAP]-1659870390931
GPR[SPVATF]-1659870390931
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870392882
GPR[EPVS]-1659870392882
========
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870392883
GPR[SPVAP]-1659870392883
GPR[EPVAP]-1659870393637
GPR[EPVS]-1659870393637
========
this.year=(short)year;
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870393638
GPR[SPVAP]-1659870393638
GPR[EPVAP]-1659870394439
GPR[EPVS]-1659870394439
========
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870394440
GPR[SPVAP]-1659870394440
GPR[EPVAP]-1659870395195
GPR[EPVS]-1659870395195
========
this.year=(short)year;
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870395196
GPR[SPVAP]-1659870395196
GPR[EPVAP]-1659870395900
GPR[EPVS]-1659870395900
========
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870395901
GPR[SPVAP]-1659870395901
GPR[EPVAP]-1659870396603
GPR[EPVS]-1659870396603
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870396604
GPR[SPVAP]-1659870396604
GPR[EPVAP]-1659870397301
GPR[EPVS]-1659870397301
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870397302
GPR[SPVAP]-1659870397302
GPR[EPVAP]-1659870397998
GPR[EPVS]-1659870397998
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870397999
GPR[SPVAP]-1659870397999
GPR[EPVAP]-1659870398693
GPR[EPVS]-1659870398693
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870398694
GPR[SPVAP]-1659870398694
GPR[EPVAP]-1659870399396
GPR[EPVS]-1659870399396
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870399397
GPR[SPVAP]-1659870399397
GPR[EPVAP]-1659870400653
GPR[SPVATF]-1659870400653
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870401808
GPR[EPVS]-1659870401808
========
this.year=(short)year;
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870401809
GPR[SPVAP]-1659870401809
GPR[EPVAP]-1659870402507
GPR[EPVS]-1659870402507
========
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870402508
GPR[SPVAP]-1659870402508
GPR[EPVAP]-1659870403205
GPR[EPVS]-1659870403205
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659870403206
GPR[SPVAP]-1659870403206
GPR[EPVAP]-1659870403907
GPR[EPVS]-1659870403907
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870403908
GPR[SPVAP]-1659870403908
GPR[EPVAP]-1659870404603
GPR[EPVS]-1659870404603
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659870404604
GPR[SPVAP]-1659870404604
GPR[EPVAP]-1659870405323
GPR[EPVS]-1659870405323
GPR[ESUN]-1659870405323
GPR[SSUN]-1659870405323
org.jfree.data.time.Year,119
========
if((month<Year.MINIMUM_YEAR)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870407639
GPR[SPVAP]-1659870407639
GPR[EPVAP]-1659870410074
GPR[EPVS]-1659870410074
========
if((year<1)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870410076
GPR[SPVAP]-1659870410076
GPR[EPVAP]-1659870413207
GPR[SPVATF]-1659870413207
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870414355
GPR[EPVS]-1659870414355
========
if((year<1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870414356
GPR[SPVAP]-1659870414356
GPR[EPVAP]-1659870415629
GPR[SPVATF]-1659870415629
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870416775
GPR[EPVS]-1659870416775
========
if((year<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870416776
GPR[SPVAP]-1659870416776
GPR[EPVAP]-1659870418011
GPR[SPVATF]-1659870418011
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870419129
GPR[EPVS]-1659870419129
========
if((month<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870419130
GPR[SPVAP]-1659870419130
GPR[EPVAP]-1659870419875
GPR[EPVS]-1659870419875
========
if((year<Year.MINIMUM_YEAR)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870419876
GPR[SPVAP]-1659870419876
GPR[EPVAP]-1659870420582
GPR[EPVS]-1659870420582
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870420584
GPR[SPVAP]-1659870420584
GPR[EPVAP]-1659870421875
GPR[SPVATF]-1659870421875
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870423036
GPR[EPVS]-1659870423036
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870423037
GPR[SPVAP]-1659870423037
GPR[EPVAP]-1659870423741
GPR[EPVS]-1659870423741
========
if((year<1)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870423742
GPR[SPVAP]-1659870423742
GPR[EPVAP]-1659870424976
GPR[SPVATF]-1659870424976
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870426095
GPR[EPVS]-1659870426095
========
if((year<1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870426096
GPR[SPVAP]-1659870426096
GPR[EPVAP]-1659870427349
GPR[SPVATF]-1659870427349
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870428471
GPR[EPVS]-1659870428471
========
if((year<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870428472
GPR[SPVAP]-1659870428472
GPR[EPVAP]-1659870429711
GPR[SPVATF]-1659870429711
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870430833
GPR[EPVS]-1659870430833
========
if((week<Year.MINIMUM_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870430835
GPR[SPVAP]-1659870430835
GPR[EPVAP]-1659870431528
GPR[EPVS]-1659870431528
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870431530
GPR[SPVAP]-1659870431530
GPR[EPVAP]-1659870432789
GPR[SPVATF]-1659870432789
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870433947
GPR[EPVS]-1659870433947
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870433948
GPR[SPVAP]-1659870433948
GPR[EPVAP]-1659870434673
GPR[EPVS]-1659870434673
========
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870434674
GPR[SPVAP]-1659870434674
GPR[EPVAP]-1659870435390
GPR[EPVS]-1659870435390
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870435391
GPR[SPVAP]-1659870435391
GPR[EPVAP]-1659870436102
GPR[EPVS]-1659870436102
========
if((week<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870436103
GPR[SPVAP]-1659870436103
GPR[EPVAP]-1659870436799
GPR[EPVS]-1659870436799
========
if((year<Year.MINIMUM_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870436800
GPR[SPVAP]-1659870436800
GPR[EPVAP]-1659870437518
GPR[EPVS]-1659870437518
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870437520
GPR[SPVAP]-1659870437520
GPR[EPVAP]-1659870438770
GPR[SPVATF]-1659870438770
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870439887
GPR[EPVS]-1659870439887
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870439888
GPR[SPVAP]-1659870439888
GPR[EPVAP]-1659870441123
GPR[SPVATF]-1659870441123
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870442270
GPR[EPVS]-1659870442270
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870442271
GPR[SPVAP]-1659870442271
GPR[EPVAP]-1659870442963
GPR[EPVS]-1659870442963
========
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870442964
GPR[SPVAP]-1659870442964
GPR[EPVAP]-1659870443661
GPR[EPVS]-1659870443661
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870443662
GPR[SPVAP]-1659870443662
GPR[EPVAP]-1659870444919
GPR[SPVATF]-1659870444919
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870446059
GPR[EPVS]-1659870446059
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870446060
GPR[SPVAP]-1659870446060
GPR[EPVAP]-1659870447313
GPR[SPVATF]-1659870447313
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870448435
GPR[EPVS]-1659870448435
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870448437
GPR[SPVAP]-1659870448437
GPR[EPVAP]-1659870449132
GPR[EPVS]-1659870449132
========
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870449133
GPR[SPVAP]-1659870449133
GPR[EPVAP]-1659870449835
GPR[EPVS]-1659870449835
========
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870449836
GPR[SPVAP]-1659870449836
GPR[EPVAP]-1659870450537
GPR[EPVS]-1659870450537
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870450538
GPR[SPVAP]-1659870450538
GPR[EPVAP]-1659870451246
GPR[EPVS]-1659870451246
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870451248
GPR[SPVAP]-1659870451248
GPR[EPVAP]-1659870451950
GPR[EPVS]-1659870451950
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870451951
GPR[SPVAP]-1659870451951
GPR[EPVAP]-1659870453192
GPR[SPVATF]-1659870453192
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870454316
GPR[EPVS]-1659870454316
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870454317
GPR[SPVAP]-1659870454317
GPR[EPVAP]-1659870455055
GPR[EPVS]-1659870455055
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870455056
GPR[SPVAP]-1659870455056
GPR[EPVAP]-1659870455761
GPR[EPVS]-1659870455761
========
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870455762
GPR[SPVAP]-1659870455762
GPR[EPVAP]-1659870456459
GPR[EPVS]-1659870456459
========
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870456460
GPR[SPVAP]-1659870456460
GPR[EPVAP]-1659870457173
GPR[EPVS]-1659870457173
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870457174
GPR[SPVAP]-1659870457174
GPR[EPVAP]-1659870458457
GPR[SPVATF]-1659870458457
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870459584
GPR[EPVS]-1659870459584
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870459586
GPR[SPVAP]-1659870459586
GPR[EPVAP]-1659870460277
GPR[EPVS]-1659870460277
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870460278
GPR[SPVAP]-1659870460278
GPR[EPVAP]-1659870461026
GPR[EPVS]-1659870461026
========
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870461027
GPR[SPVAP]-1659870461027
GPR[EPVAP]-1659870461775
GPR[EPVS]-1659870461775
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870461777
GPR[SPVAP]-1659870461777
GPR[EPVAP]-1659870462496
GPR[EPVS]-1659870462496
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870462498
GPR[SPVAP]-1659870462498
GPR[EPVAP]-1659870463201
GPR[EPVS]-1659870463201
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870463202
GPR[SPVAP]-1659870463202
GPR[EPVAP]-1659870463905
GPR[EPVS]-1659870463905
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870463906
GPR[SPVAP]-1659870463906
GPR[EPVAP]-1659870464622
GPR[EPVS]-1659870464622
========
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870464623
GPR[SPVAP]-1659870464623
GPR[EPVAP]-1659870465318
GPR[EPVS]-1659870465318
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870465319
GPR[SPVAP]-1659870465319
GPR[EPVAP]-1659870466015
GPR[EPVS]-1659870466015
========
if((quarter<Year.MINIMUM_YEAR)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870466016
GPR[SPVAP]-1659870466016
GPR[EPVAP]-1659870466714
GPR[EPVS]-1659870466714
========
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870466715
GPR[SPVAP]-1659870466715
GPR[EPVAP]-1659870467418
GPR[EPVS]-1659870467418
========
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870467419
GPR[SPVAP]-1659870467419
GPR[EPVAP]-1659870468151
GPR[EPVS]-1659870468151
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870468152
GPR[SPVAP]-1659870468152
GPR[EPVAP]-1659870468863
GPR[EPVS]-1659870468863
========
if((quarter<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870468864
GPR[SPVAP]-1659870468864
GPR[EPVAP]-1659870469607
GPR[EPVS]-1659870469607
========
if((year<Year.MINIMUM_YEAR)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870469608
GPR[SPVAP]-1659870469608
GPR[EPVAP]-1659870470339
GPR[EPVS]-1659870470339
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870470340
GPR[SPVAP]-1659870470340
GPR[EPVAP]-1659870471585
GPR[SPVATF]-1659870471585
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870472740
GPR[EPVS]-1659870472740
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(byte)quarter;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870472742
GPR[SPVAP]-1659870472742
GPR[EPVAP]-1659870473435
GPR[EPVS]-1659870473435
========
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870473436
GPR[SPVAP]-1659870473436
GPR[EPVAP]-1659870474123
GPR[EPVS]-1659870474123
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870474124
GPR[SPVAP]-1659870474124
GPR[EPVAP]-1659870474813
GPR[EPVS]-1659870474813
========
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870474814
GPR[SPVAP]-1659870474814
GPR[EPVAP]-1659870475510
GPR[EPVS]-1659870475510
========
if((year>=1900)&&(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870475511
GPR[SPVAP]-1659870475511
GPR[EPVAP]-1659870476738
GPR[SPVATF]-1659870476738
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870477854
GPR[EPVS]-1659870477854
========
if((year>=1900)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870477855
GPR[SPVAP]-1659870477855
GPR[EPVAP]-1659870479111
GPR[SPVATF]-1659870479111
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870480247
GPR[EPVS]-1659870480247
========
if((year<Year.MINIMUM_YEAR)||(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870480248
GPR[SPVAP]-1659870480248
GPR[EPVAP]-1659870481509
GPR[SPVATF]-1659870481509
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870482633
GPR[EPVS]-1659870482633
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870482634
GPR[SPVAP]-1659870482634
GPR[EPVAP]-1659870483899
GPR[SPVATF]-1659870483899
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870485031
GPR[EPVS]-1659870485031
========
if((year>=1900)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870485032
GPR[SPVAP]-1659870485032
GPR[EPVAP]-1659870486264
GPR[SPVATF]-1659870486264
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870487397
GPR[EPVS]-1659870487397
========
if((year<Year.MINIMUM_YEAR)&&(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870487398
GPR[SPVAP]-1659870487398
GPR[EPVAP]-1659870488632
GPR[SPVATF]-1659870488632
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870489759
GPR[EPVS]-1659870489759
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870489760
GPR[SPVAP]-1659870489760
GPR[EPVAP]-1659870490996
GPR[SPVATF]-1659870490996
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870492183
GPR[EPVS]-1659870492183
========
if((year>=1900)&&(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870492185
GPR[SPVAP]-1659870492185
GPR[EPVAP]-1659870493417
GPR[SPVATF]-1659870493417
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870494546
GPR[EPVS]-1659870494546
========
if((year>=1900)||(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870494547
GPR[SPVAP]-1659870494547
GPR[EPVAP]-1659870495789
GPR[SPVATF]-1659870495789
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870496952
GPR[EPVS]-1659870496952
========
if((year>=1900)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870496954
GPR[SPVAP]-1659870496954
GPR[EPVAP]-1659870498191
GPR[SPVATF]-1659870498191
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870499328
GPR[EPVS]-1659870499328
========
if((year<Year.MINIMUM_YEAR)||(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870499329
GPR[SPVAP]-1659870499329
GPR[EPVAP]-1659870500561
GPR[SPVATF]-1659870500561
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870501711
GPR[EPVS]-1659870501711
========
if((year>=1900)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870501713
GPR[SPVAP]-1659870501713
GPR[EPVAP]-1659870502965
GPR[SPVATF]-1659870502965
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870504116
GPR[EPVS]-1659870504116
========
if((year<Year.MINIMUM_YEAR)&&(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870504117
GPR[SPVAP]-1659870504117
GPR[EPVAP]-1659870505361
GPR[SPVATF]-1659870505361
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870506509
GPR[EPVS]-1659870506509
========
if((year>=1900)||(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870506510
GPR[SPVAP]-1659870506510
GPR[EPVAP]-1659870507813
GPR[SPVATF]-1659870507813
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870508970
GPR[EPVS]-1659870508970
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
if(this.year!=that.year){
return false;
}
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870508971
GPR[SPVAP]-1659870508971
GPR[EPVAP]-1659870509683
GPR[EPVS]-1659870509683
========
if((day<Year.MINIMUM_YEAR)||(day>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870509685
GPR[SPVAP]-1659870509685
GPR[EPVAP]-1659870510403
GPR[EPVS]-1659870510403
========
if((year>=1)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870510404
GPR[SPVAP]-1659870510404
GPR[EPVAP]-1659870511647
GPR[SPVATF]-1659870511647
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870512766
GPR[EPVS]-1659870512766
========
if((year>=1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870512767
GPR[SPVAP]-1659870512767
GPR[EPVAP]-1659870514013
GPR[SPVATF]-1659870514013
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870515134
GPR[EPVS]-1659870515134
========
if((year<Year.MINIMUM_YEAR)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870515136
GPR[SPVAP]-1659870515136
GPR[EPVAP]-1659870516387
GPR[SPVATF]-1659870516387
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870517523
GPR[EPVS]-1659870517523
========
if((day<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870517524
GPR[SPVAP]-1659870517524
GPR[EPVAP]-1659870518222
GPR[EPVS]-1659870518222
========
if((year<Year.MINIMUM_YEAR)||(day>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870518223
GPR[SPVAP]-1659870518223
GPR[EPVAP]-1659870518917
GPR[EPVS]-1659870518917
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870518919
GPR[SPVAP]-1659870518919
GPR[EPVAP]-1659870520181
GPR[SPVATF]-1659870520181
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870521293
GPR[EPVS]-1659870521293
========
if((year>=1)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870521294
GPR[SPVAP]-1659870521294
GPR[EPVAP]-1659870522545
GPR[SPVATF]-1659870522545
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870523651
GPR[EPVS]-1659870523651
========
if((year<Year.MINIMUM_YEAR)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870523652
GPR[SPVAP]-1659870523652
GPR[EPVAP]-1659870524884
GPR[SPVATF]-1659870524884
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870526024
GPR[EPVS]-1659870526024
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870526025
GPR[SPVAP]-1659870526025
GPR[EPVAP]-1659870527263
GPR[SPVATF]-1659870527263
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870528390
GPR[EPVS]-1659870528390
========
if((year>=1)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870528391
GPR[SPVAP]-1659870528391
GPR[EPVAP]-1659870529628
GPR[SPVATF]-1659870529628
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870530755
GPR[EPVS]-1659870530755
========
if((year>=1)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870530756
GPR[SPVAP]-1659870530756
GPR[EPVAP]-1659870532010
GPR[SPVATF]-1659870532010
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870533166
GPR[EPVS]-1659870533166
========
if((year>=1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870533167
GPR[SPVAP]-1659870533167
GPR[EPVAP]-1659870534420
GPR[SPVATF]-1659870534420
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870535523
GPR[EPVS]-1659870535523
========
if((year<Year.MINIMUM_YEAR)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870535525
GPR[SPVAP]-1659870535525
GPR[EPVAP]-1659870536773
GPR[SPVATF]-1659870536773
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870537900
GPR[EPVS]-1659870537900
========
if((year>=1)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870537901
GPR[SPVAP]-1659870537901
GPR[EPVAP]-1659870539137
GPR[SPVATF]-1659870539137
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870540263
GPR[EPVS]-1659870540263
========
if((year<Year.MINIMUM_YEAR)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870540264
GPR[SPVAP]-1659870540264
GPR[EPVAP]-1659870541503
GPR[SPVATF]-1659870541503
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870542726
GPR[EPVS]-1659870542726
========
if((year>=1)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870542727
GPR[SPVAP]-1659870542727
GPR[EPVAP]-1659870544040
GPR[SPVATF]-1659870544040
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870545156
GPR[EPVS]-1659870545156
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Null \'serialDate\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870545157
GPR[SPVAP]-1659870545157
GPR[EPVAP]-1659870546416
GPR[SPVATF]-1659870546416
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870547539
GPR[EPVS]-1659870547539
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=year.getYear();
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870547541
GPR[SPVAP]-1659870547541
GPR[EPVAP]-1659870548227
GPR[EPVS]-1659870548227
========
if((month<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870548228
GPR[SPVAP]-1659870548228
GPR[EPVAP]-1659870548927
GPR[EPVS]-1659870548927
========
if((month<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870548928
GPR[SPVAP]-1659870548928
GPR[EPVAP]-1659870549613
GPR[EPVS]-1659870549613
========
if((year<1)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870549614
GPR[SPVAP]-1659870549614
GPR[EPVAP]-1659870550308
GPR[EPVS]-1659870550308
========
if((year<Year.MINIMUM_YEAR)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870550309
GPR[SPVAP]-1659870550309
GPR[EPVAP]-1659870551010
GPR[EPVS]-1659870551010
========
if((month<Year.MINIMUM_YEAR)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870551013
GPR[SPVAP]-1659870551013
GPR[EPVAP]-1659870552478
GPR[EPVS]-1659870552478
========
if((month<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870552479
GPR[SPVAP]-1659870552479
GPR[EPVAP]-1659870553210
GPR[EPVS]-1659870553210
========
if((year<1)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870553369
GPR[SPVAP]-1659870553369
GPR[EPVAP]-1659870554121
GPR[EPVS]-1659870554121
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year.getYear();
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870554124
GPR[SPVAP]-1659870554124
GPR[EPVAP]-1659870554861
GPR[EPVS]-1659870554861
========
if((week<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870554862
GPR[SPVAP]-1659870554862
GPR[EPVAP]-1659870555635
GPR[EPVS]-1659870555635
========
if((week<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870555636
GPR[SPVAP]-1659870555636
GPR[EPVAP]-1659870556329
GPR[EPVS]-1659870556329
========
if((week<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870556330
GPR[SPVAP]-1659870556330
GPR[EPVAP]-1659870557055
GPR[EPVS]-1659870557055
========
if((week<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870557056
GPR[SPVAP]-1659870557056
GPR[EPVAP]-1659870557771
GPR[EPVS]-1659870557771
========
if((year<Year.MINIMUM_YEAR)&&(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870557772
GPR[SPVAP]-1659870557772
GPR[EPVAP]-1659870558492
GPR[EPVS]-1659870558492
========
if((year<FIRST_WEEK_IN_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870558493
GPR[SPVAP]-1659870558493
GPR[EPVAP]-1659870559198
GPR[EPVS]-1659870559198
========
if((year<Year.MINIMUM_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870559200
GPR[SPVAP]-1659870559200
GPR[EPVAP]-1659870559902
GPR[EPVS]-1659870559902
========
if((year<Year.MINIMUM_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870559903
GPR[SPVAP]-1659870559903
GPR[EPVAP]-1659870560603
GPR[EPVS]-1659870560603
========
if((week<Year.MINIMUM_YEAR)&&(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870560604
GPR[SPVAP]-1659870560604
GPR[EPVAP]-1659870561304
GPR[EPVS]-1659870561304
========
if((week<FIRST_WEEK_IN_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870561306
GPR[SPVAP]-1659870561306
GPR[EPVAP]-1659870562003
GPR[EPVS]-1659870562003
========
if((week<Year.MINIMUM_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870562005
GPR[SPVAP]-1659870562005
GPR[EPVAP]-1659870562731
GPR[EPVS]-1659870562731
========
if((week<Year.MINIMUM_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870562732
GPR[SPVAP]-1659870562732
GPR[EPVAP]-1659870563423
GPR[EPVS]-1659870563423
========
if((week<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870563424
GPR[SPVAP]-1659870563424
GPR[EPVAP]-1659870564123
GPR[EPVS]-1659870564123
========
if((week<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870564124
GPR[SPVAP]-1659870564124
GPR[EPVAP]-1659870564834
GPR[EPVS]-1659870564834
========
if((week<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870564836
GPR[SPVAP]-1659870564836
GPR[EPVAP]-1659870565538
GPR[EPVS]-1659870565538
========
if((week<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870565539
GPR[SPVAP]-1659870565539
GPR[EPVAP]-1659870566233
GPR[EPVS]-1659870566233
========
if((week<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870566234
GPR[SPVAP]-1659870566234
GPR[EPVAP]-1659870566938
GPR[EPVS]-1659870566938
========
if((week<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870566940
GPR[SPVAP]-1659870566940
GPR[EPVAP]-1659870567661
GPR[EPVS]-1659870567661
========
if((year<FIRST_WEEK_IN_YEAR)&&(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870567662
GPR[SPVAP]-1659870567662
GPR[EPVAP]-1659870568374
GPR[EPVS]-1659870568374
========
if((year<Year.MINIMUM_YEAR)&&(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870568375
GPR[SPVAP]-1659870568375
GPR[EPVAP]-1659870569067
GPR[EPVS]-1659870569067
========
if((year<Year.MINIMUM_YEAR)&&(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870569069
GPR[SPVAP]-1659870569069
GPR[EPVAP]-1659870569760
GPR[EPVS]-1659870569760
========
if((year<FIRST_WEEK_IN_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870569761
GPR[SPVAP]-1659870569761
GPR[EPVAP]-1659870570467
GPR[EPVS]-1659870570467
========
if((year<FIRST_WEEK_IN_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870570468
GPR[SPVAP]-1659870570468
GPR[EPVAP]-1659870571189
GPR[EPVS]-1659870571189
========
if((year<Year.MINIMUM_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870571190
GPR[SPVAP]-1659870571190
GPR[EPVAP]-1659870571935
GPR[EPVS]-1659870571935
========
if((week<FIRST_WEEK_IN_YEAR)&&(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870571937
GPR[SPVAP]-1659870571937
GPR[EPVAP]-1659870572635
GPR[EPVS]-1659870572635
========
if((week<Year.MINIMUM_YEAR)&&(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870572636
GPR[SPVAP]-1659870572636
GPR[EPVAP]-1659870573328
GPR[EPVS]-1659870573328
========
if((week<Year.MINIMUM_YEAR)&&(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870573329
GPR[SPVAP]-1659870573329
GPR[EPVAP]-1659870574041
GPR[EPVS]-1659870574041
========
if((week<FIRST_WEEK_IN_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870574042
GPR[SPVAP]-1659870574042
GPR[EPVAP]-1659870574759
GPR[EPVS]-1659870574759
========
if((week<FIRST_WEEK_IN_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870574760
GPR[SPVAP]-1659870574760
GPR[EPVAP]-1659870575448
GPR[EPVS]-1659870575448
========
if((week<Year.MINIMUM_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870575449
GPR[SPVAP]-1659870575449
GPR[EPVAP]-1659870576141
GPR[EPVS]-1659870576141
========
if((week<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870576143
GPR[SPVAP]-1659870576143
GPR[EPVAP]-1659870576833
GPR[EPVS]-1659870576833
========
if((week<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870576834
GPR[SPVAP]-1659870576834
GPR[EPVAP]-1659870577553
GPR[EPVS]-1659870577553
========
if((week<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870577554
GPR[SPVAP]-1659870577554
GPR[EPVAP]-1659870578261
GPR[EPVS]-1659870578261
========
if((week<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870578262
GPR[SPVAP]-1659870578262
GPR[EPVAP]-1659870578974
GPR[EPVS]-1659870578974
========
if((year<FIRST_WEEK_IN_YEAR)&&(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870578975
GPR[SPVAP]-1659870578975
GPR[EPVAP]-1659870579665
GPR[EPVS]-1659870579665
========
if((year<FIRST_WEEK_IN_YEAR)&&(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870579666
GPR[SPVAP]-1659870579666
GPR[EPVAP]-1659870580356
GPR[EPVS]-1659870580356
========
if((year<Year.MINIMUM_YEAR)&&(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870580357
GPR[SPVAP]-1659870580357
GPR[EPVAP]-1659870581059
GPR[EPVS]-1659870581059
========
if((year<FIRST_WEEK_IN_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870581060
GPR[SPVAP]-1659870581060
GPR[EPVAP]-1659870581764
GPR[EPVS]-1659870581764
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year.getYear();
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870581770
GPR[SPVAP]-1659870581770
GPR[EPVAP]-1659870582498
GPR[EPVS]-1659870582498
========
if((quarter<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870582499
GPR[SPVAP]-1659870582499
GPR[EPVAP]-1659870583225
GPR[EPVS]-1659870583225
========
if((quarter<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870583226
GPR[SPVAP]-1659870583226
GPR[EPVAP]-1659870583948
GPR[EPVS]-1659870583949
========
if((quarter<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870583950
GPR[SPVAP]-1659870583950
GPR[EPVAP]-1659870584668
GPR[EPVS]-1659870584668
========
if((year<FIRST_QUARTER)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870584670
GPR[SPVAP]-1659870584670
GPR[EPVAP]-1659870585366
GPR[EPVS]-1659870585366
========
if((year<Year.MINIMUM_YEAR)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870585368
GPR[SPVAP]-1659870585368
GPR[EPVAP]-1659870586074
GPR[EPVS]-1659870586074
========
if((year<Year.MINIMUM_YEAR)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870586075
GPR[SPVAP]-1659870586075
GPR[EPVAP]-1659870586767
GPR[EPVS]-1659870586767
========
if((quarter<FIRST_QUARTER)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870586768
GPR[SPVAP]-1659870586768
GPR[EPVAP]-1659870587452
GPR[EPVS]-1659870587452
========
if((quarter<Year.MINIMUM_YEAR)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870587454
GPR[SPVAP]-1659870587454
GPR[EPVAP]-1659870588178
GPR[EPVS]-1659870588178
========
if((quarter<Year.MINIMUM_YEAR)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870588180
GPR[SPVAP]-1659870588180
GPR[EPVAP]-1659870588903
GPR[EPVS]-1659870588903
========
if((quarter<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870588904
GPR[SPVAP]-1659870588904
GPR[EPVAP]-1659870589619
GPR[EPVS]-1659870589619
========
if((quarter<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870589620
GPR[SPVAP]-1659870589620
GPR[EPVAP]-1659870590339
GPR[EPVS]-1659870590339
========
if((quarter<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870590340
GPR[SPVAP]-1659870590340
GPR[EPVAP]-1659870591037
GPR[EPVS]-1659870591037
========
if((year<FIRST_QUARTER)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870591038
GPR[SPVAP]-1659870591038
GPR[EPVAP]-1659870591740
GPR[EPVS]-1659870591740
========
if((year<FIRST_QUARTER)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870591742
GPR[SPVAP]-1659870591742
GPR[EPVAP]-1659870592447
GPR[EPVS]-1659870592447
========
if((year<Year.MINIMUM_YEAR)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870592448
GPR[SPVAP]-1659870592448
GPR[EPVAP]-1659870593147
GPR[EPVS]-1659870593147
========
if((quarter<FIRST_QUARTER)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870593148
GPR[SPVAP]-1659870593148
GPR[EPVAP]-1659870593851
GPR[EPVS]-1659870593851
========
if((quarter<FIRST_QUARTER)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870593852
GPR[SPVAP]-1659870593852
GPR[EPVAP]-1659870594538
GPR[EPVS]-1659870594538
========
if((quarter<Year.MINIMUM_YEAR)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870594540
GPR[SPVAP]-1659870594540
GPR[EPVAP]-1659870595243
GPR[EPVS]-1659870595243
========
if((quarter<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870595244
GPR[SPVAP]-1659870595244
GPR[EPVAP]-1659870595967
GPR[EPVS]-1659870595967
========
if((year<FIRST_QUARTER)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870595969
GPR[SPVAP]-1659870595969
GPR[EPVAP]-1659870596673
GPR[EPVS]-1659870596673
========
this.MINIMUM_YEAR=START;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870596676
GPR[SPVAP]-1659870596676
GPR[EPVAP]-1659870597391
GPR[EPVS]-1659870597391
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
super();
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659870597392
GPR[SPVAP]-1659870597392
GPR[EPVAP]-1659870598081
GPR[EPVS]-1659870598081
GPR[ESUN]-1659870598082
GPR[SSUN]-1659870598082
org.jfree.data.time.Year,120
GPR[ESUN]-1659870598618
GPR[SSUN]-1659870598618
org.jfree.data.time.Year,121
Find no block!
GPR[SSUN]-1659870598967
org.jfree.data.time.Year,211
========
peg(calendar);
this.firstMillisecond=getFirstMillisecond(calendar);
this.lastMillisecond=getLastMillisecond(calendar);

========
MM Copying to MM
GPR[SPVS]-1659870601033
GPR[SPVAP]-1659870601033
GPR[EPVAP]-1659870605631
GPR[SPVATF]-1659870605631
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870606772
GPR[EPVS]-1659870606772
========
MINIMUM_YEAR=calendar.get(Calendar.YEAR);
this.firstMillisecond=getFirstMillisecond(calendar);
this.lastMillisecond=getLastMillisecond(calendar);

========
MM Copying to MM
GPR[SPVS]-1659870606774
GPR[SPVAP]-1659870606774
GPR[EPVAP]-1659870607482
GPR[EPVS]-1659870607482
========
calendar.set(MINIMUM_YEAR,MINIMUM_YEAR,MINIMUM_YEAR,MINIMUM_YEAR,MINIMUM_YEAR,MINIMUM_YEAR);
this.firstMillisecond=getFirstMillisecond(calendar);
this.lastMillisecond=getLastMillisecond(calendar);

========
MM Copying to MM
GPR[SPVS]-1659870607484
GPR[SPVAP]-1659870607484
GPR[EPVAP]-1659870608775
GPR[SPVATF]-1659870608775
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870609922
GPR[EPVS]-1659870609923
GPR[ESUN]-1659870609926
GPR[SSUN]-1659870609926
org.jfree.data.time.Year,212
GPR[ESUN]-1659870610405
GPR[SSUN]-1659870610405
org.jfree.data.time.Year,213
Find no block!
GPR[SSUN]-1659870610726
org.jfree.data.time.Year,268
========
calendar.set(this.year,Calendar.DECEMBER,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870613013
GPR[SPVAP]-1659870613013
GPR[EPVAP]-1659870617550
GPR[SPVATF]-1659870617550
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870618687
GPR[EPVS]-1659870618687
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870618689
GPR[SPVAP]-1659870618689
GPR[EPVAP]-1659870619396
GPR[EPVS]-1659870619397
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870619398
GPR[SPVAP]-1659870619398
GPR[EPVAP]-1659870620127
GPR[EPVS]-1659870620127
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870620128
GPR[SPVAP]-1659870620128
GPR[EPVAP]-1659870620850
GPR[EPVS]-1659870620850
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870620851
GPR[SPVAP]-1659870620851
GPR[EPVAP]-1659870621543
GPR[EPVS]-1659870621543
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870621544
GPR[SPVAP]-1659870621544
GPR[EPVAP]-1659870622806
GPR[SPVATF]-1659870622806
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870623943
GPR[EPVS]-1659870623943
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870623944
GPR[SPVAP]-1659870623944
GPR[EPVAP]-1659870624654
GPR[EPVS]-1659870624654
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870624655
GPR[SPVAP]-1659870624655
GPR[EPVAP]-1659870625909
GPR[SPVATF]-1659870625909
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870627074
GPR[EPVS]-1659870627074
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870627075
GPR[SPVAP]-1659870627075
GPR[EPVAP]-1659870628336
GPR[SPVATF]-1659870628336
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870629464
GPR[EPVS]-1659870629464
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870629465
GPR[SPVAP]-1659870629465
GPR[EPVAP]-1659870630757
GPR[SPVATF]-1659870630757
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870631871
GPR[EPVS]-1659870631871
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870631872
GPR[SPVAP]-1659870631872
GPR[EPVAP]-1659870633128
GPR[SPVATF]-1659870633128
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870634277
GPR[EPVS]-1659870634277
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870634278
GPR[SPVAP]-1659870634278
GPR[EPVAP]-1659870635539
GPR[SPVATF]-1659870635539
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870636694
GPR[EPVS]-1659870636694
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870636695
GPR[SPVAP]-1659870636695
GPR[EPVAP]-1659870637953
GPR[SPVATF]-1659870637953
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870639126
GPR[EPVS]-1659870639126
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870639128
GPR[SPVAP]-1659870639128
GPR[EPVAP]-1659870639821
GPR[EPVS]-1659870639821
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870639822
GPR[SPVAP]-1659870639822
GPR[EPVAP]-1659870640523
GPR[EPVS]-1659870640523
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870640524
GPR[SPVAP]-1659870640524
GPR[EPVAP]-1659870641233
GPR[EPVS]-1659870641233
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870641235
GPR[SPVAP]-1659870641235
GPR[EPVAP]-1659870641959
GPR[EPVS]-1659870641959
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870641960
GPR[SPVAP]-1659870641960
GPR[EPVAP]-1659870642672
GPR[EPVS]-1659870642672
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870642673
GPR[SPVAP]-1659870642673
GPR[EPVAP]-1659870643393
GPR[EPVS]-1659870643393
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870643394
GPR[SPVAP]-1659870643394
GPR[EPVAP]-1659870644100
GPR[EPVS]-1659870644100
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870644101
GPR[SPVAP]-1659870644101
GPR[EPVAP]-1659870644826
GPR[EPVS]-1659870644826
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870644827
GPR[SPVAP]-1659870644827
GPR[EPVAP]-1659870645528
GPR[EPVS]-1659870645528
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870645529
GPR[SPVAP]-1659870645529
GPR[EPVAP]-1659870646248
GPR[EPVS]-1659870646248
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870646249
GPR[SPVAP]-1659870646249
GPR[EPVAP]-1659870646962
GPR[EPVS]-1659870646962
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870646963
GPR[SPVAP]-1659870646963
GPR[EPVAP]-1659870647679
GPR[EPVS]-1659870647679
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870647680
GPR[SPVAP]-1659870647680
GPR[EPVAP]-1659870648366
GPR[EPVS]-1659870648366
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870648367
GPR[SPVAP]-1659870648367
GPR[EPVAP]-1659870649063
GPR[EPVS]-1659870649063
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870649065
GPR[SPVAP]-1659870649065
GPR[EPVAP]-1659870649795
GPR[EPVS]-1659870649795
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870649796
GPR[SPVAP]-1659870649796
GPR[EPVAP]-1659870650489
GPR[EPVS]-1659870650489
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870650490
GPR[SPVAP]-1659870650490
GPR[EPVAP]-1659870651251
GPR[EPVS]-1659870651251
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870651252
GPR[SPVAP]-1659870651252
GPR[EPVAP]-1659870651955
GPR[EPVS]-1659870651955
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870651956
GPR[SPVAP]-1659870651956
GPR[EPVAP]-1659870652672
GPR[EPVS]-1659870652672
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870652672
GPR[SPVAP]-1659870652672
GPR[EPVAP]-1659870653367
GPR[EPVS]-1659870653367
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870653368
GPR[SPVAP]-1659870653368
GPR[EPVAP]-1659870654073
GPR[EPVS]-1659870654073
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870654074
GPR[SPVAP]-1659870654074
GPR[EPVAP]-1659870654782
GPR[EPVS]-1659870654782
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870654783
GPR[SPVAP]-1659870654783
GPR[EPVAP]-1659870655475
GPR[EPVS]-1659870655475
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870655476
GPR[SPVAP]-1659870655476
GPR[EPVAP]-1659870656171
GPR[EPVS]-1659870656171
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870656173
GPR[SPVAP]-1659870656173
GPR[EPVAP]-1659870656867
GPR[EPVS]-1659870656867
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870656868
GPR[SPVAP]-1659870656868
GPR[EPVAP]-1659870657566
GPR[EPVS]-1659870657566
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870657567
GPR[SPVAP]-1659870657567
GPR[EPVAP]-1659870658276
GPR[EPVS]-1659870658276
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870658277
GPR[SPVAP]-1659870658277
GPR[EPVAP]-1659870658974
GPR[EPVS]-1659870658974
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870658975
GPR[SPVAP]-1659870658975
GPR[EPVAP]-1659870659667
GPR[EPVS]-1659870659667
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870659668
GPR[SPVAP]-1659870659668
GPR[EPVAP]-1659870660360
GPR[EPVS]-1659870660360
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870660361
GPR[SPVAP]-1659870660361
GPR[EPVAP]-1659870661070
GPR[EPVS]-1659870661070
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870661071
GPR[SPVAP]-1659870661071
GPR[EPVAP]-1659870661758
GPR[EPVS]-1659870661758
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870661759
GPR[SPVAP]-1659870661759
GPR[EPVAP]-1659870662449
GPR[EPVS]-1659870662449
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870662450
GPR[SPVAP]-1659870662450
GPR[EPVAP]-1659870663170
GPR[EPVS]-1659870663170
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870663172
GPR[SPVAP]-1659870663172
GPR[EPVAP]-1659870663885
GPR[EPVS]-1659870663885
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870663886
GPR[SPVAP]-1659870663886
GPR[EPVAP]-1659870664593
GPR[EPVS]-1659870664593
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870664595
GPR[SPVAP]-1659870664595
GPR[EPVAP]-1659870665295
GPR[EPVS]-1659870665295
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870665296
GPR[SPVAP]-1659870665296
GPR[EPVAP]-1659870666004
GPR[EPVS]-1659870666004
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870666005
GPR[SPVAP]-1659870666005
GPR[EPVAP]-1659870666753
GPR[EPVS]-1659870666753
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870666754
GPR[SPVAP]-1659870666754
GPR[EPVAP]-1659870667461
GPR[EPVS]-1659870667461
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870667462
GPR[SPVAP]-1659870667462
GPR[EPVAP]-1659870668157
GPR[EPVS]-1659870668157
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870668158
GPR[SPVAP]-1659870668158
GPR[EPVAP]-1659870668861
GPR[EPVS]-1659870668861
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870668862
GPR[SPVAP]-1659870668862
GPR[EPVAP]-1659870669559
GPR[EPVS]-1659870669559
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870669560
GPR[SPVAP]-1659870669560
GPR[EPVAP]-1659870670253
GPR[EPVS]-1659870670253
========
calendar.set(year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870670255
GPR[SPVAP]-1659870670255
GPR[EPVAP]-1659870671508
GPR[SPVATF]-1659870671508
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870672643
GPR[EPVS]-1659870672643
========
calendar.set(this.year,MINIMUM_YEAR,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870672644
GPR[SPVAP]-1659870672644
GPR[EPVAP]-1659870673880
GPR[SPVATF]-1659870673880
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870674992
GPR[EPVS]-1659870674992
========
calendar.set(year,MINIMUM_YEAR,dom,this.hour,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870674993
GPR[SPVAP]-1659870674993
GPR[EPVAP]-1659870675687
GPR[EPVS]-1659870675687
========
calendar.set(year,MINIMUM_YEAR,dom,this.hour,59,59);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870675688
GPR[SPVAP]-1659870675688
GPR[EPVAP]-1659870676375
GPR[EPVS]-1659870676375
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime();

========
MM Copying to MM
GPR[SPVS]-1659870676376
GPR[SPVAP]-1659870676376
GPR[EPVAP]-1659870677082
GPR[EPVS]-1659870677082
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870677083
GPR[SPVAP]-1659870677083
GPR[EPVAP]-1659870678337
GPR[SPVATF]-1659870678337
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870679476
GPR[EPVS]-1659870679476
========
cal.set(this.year,Calendar.JANUARY,1,0,0,0);
cal.set(Calendar.MILLISECOND,0);
return cal.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870679478
GPR[SPVAP]-1659870679478
GPR[EPVAP]-1659870680212
GPR[EPVS]-1659870680212
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
cal.set(Calendar.MILLISECOND,0);
return cal.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870680213
GPR[SPVAP]-1659870680213
GPR[EPVAP]-1659870680919
GPR[EPVS]-1659870680919
========
cal.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870680921
GPR[SPVAP]-1659870680921
GPR[EPVAP]-1659870681620
GPR[EPVS]-1659870681620
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
cal.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870681621
GPR[SPVAP]-1659870681621
GPR[EPVAP]-1659870682317
GPR[EPVS]-1659870682317
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.add(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870682318
GPR[SPVAP]-1659870682318
GPR[EPVAP]-1659870683549
GPR[SPVATF]-1659870683549
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870684695
GPR[EPVS]-1659870684695
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return cal.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870684696
GPR[SPVAP]-1659870684696
GPR[EPVAP]-1659870685418
GPR[EPVS]-1659870685418
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,this.MINIMUM_YEAR);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870685419
GPR[SPVAP]-1659870685419
GPR[EPVAP]-1659870686679
GPR[SPVATF]-1659870686679
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870687795
GPR[EPVS]-1659870687795
========
prevYearCalendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870687797
GPR[SPVAP]-1659870687797
GPR[EPVAP]-1659870688494
GPR[EPVS]-1659870688494
========
notifyListeners(new AxisChangeEvent(this));
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870688495
GPR[SPVAP]-1659870688495
GPR[EPVAP]-1659870689183
GPR[EPVS]-1659870689183
========
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870689184
GPR[SPVAP]-1659870689184
GPR[EPVAP]-1659870689912
GPR[EPVS]-1659870689912
========
this.mapDatasetToDomainAxis(0,0);
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870689913
GPR[SPVAP]-1659870689913
GPR[EPVAP]-1659870690613
GPR[EPVS]-1659870690613
========
peg(calendar);
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870690615
GPR[SPVAP]-1659870690615
GPR[EPVAP]-1659870691851
GPR[SPVATF]-1659870691851
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870692969
GPR[EPVS]-1659870692969
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return (this.calendar.getTime());

========
MM Copying to MM
GPR[SPVS]-1659870692972
GPR[SPVAP]-1659870692972
GPR[EPVAP]-1659870693669
GPR[EPVS]-1659870693669
========
fireChangeEvent();
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870693670
GPR[SPVAP]-1659870693670
GPR[EPVAP]-1659870694361
GPR[EPVS]-1659870694361
========
case Types.TIME :

calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870694363
GPR[SPVAP]-1659870694363
GPR[EPVAP]-1659870694965
GPR[EPVS]-1659870694965
========
case Types.NULL :

calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870694966
GPR[SPVAP]-1659870694966
GPR[EPVAP]-1659870695570
GPR[EPVS]-1659870695570
GPR[ESUN]-1659870695571
GPR[SSUN]-1659870695571
org.jfree.data.time.Year,269
GPR[ESUN]-1659870696118
GPR[SSUN]-1659870696118
org.jfree.data.time.Year,272
GPR[ESUN]-1659870696448
GPR[SSUN]-1659870696448
org.jfree.data.time.Year,287
========
calendar.set(this.year,Calendar.JANUARY,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870698731
GPR[SPVAP]-1659870698731
GPR[EPVAP]-1659870703289
GPR[SPVATF]-1659870703289
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870704411
GPR[EPVS]-1659870704411
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870704413
GPR[SPVAP]-1659870704413
GPR[EPVAP]-1659870705127
GPR[EPVS]-1659870705127
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870705128
GPR[SPVAP]-1659870705128
GPR[EPVAP]-1659870705868
GPR[EPVS]-1659870705868
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870705887
GPR[SPVAP]-1659870705887
GPR[EPVAP]-1659870706580
GPR[EPVS]-1659870706580
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870706580
GPR[SPVAP]-1659870706580
GPR[EPVAP]-1659870707282
GPR[EPVS]-1659870707282
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870707283
GPR[SPVAP]-1659870707283
GPR[EPVAP]-1659870708574
GPR[SPVATF]-1659870708574
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870709707
GPR[EPVS]-1659870709707
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870709708
GPR[SPVAP]-1659870709708
GPR[EPVAP]-1659870710408
GPR[EPVS]-1659870710408
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870710409
GPR[SPVAP]-1659870710409
GPR[EPVAP]-1659870711649
GPR[SPVATF]-1659870711649
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870712825
GPR[EPVS]-1659870712825
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870712826
GPR[SPVAP]-1659870712826
GPR[EPVAP]-1659870714302
GPR[SPVATF]-1659870714302
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870715976
GPR[EPVS]-1659870715976
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870715978
GPR[SPVAP]-1659870715978
GPR[EPVAP]-1659870717269
GPR[SPVATF]-1659870717269
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870718595
GPR[EPVS]-1659870718595
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870718597
GPR[SPVAP]-1659870718597
GPR[EPVAP]-1659870719845
GPR[SPVATF]-1659870719845
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870720981
GPR[EPVS]-1659870720981
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870720982
GPR[SPVAP]-1659870720982
GPR[EPVAP]-1659870722240
GPR[SPVATF]-1659870722240
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870723368
GPR[EPVS]-1659870723368
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870723369
GPR[SPVAP]-1659870723369
GPR[EPVAP]-1659870724630
GPR[SPVATF]-1659870724630
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870725757
GPR[EPVS]-1659870725757
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870725759
GPR[SPVAP]-1659870725759
GPR[EPVAP]-1659870726464
GPR[EPVS]-1659870726464
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870726465
GPR[SPVAP]-1659870726465
GPR[EPVAP]-1659870727180
GPR[EPVS]-1659870727180
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870727181
GPR[SPVAP]-1659870727181
GPR[EPVAP]-1659870727915
GPR[EPVS]-1659870727915
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870727915
GPR[SPVAP]-1659870727915
GPR[EPVAP]-1659870728630
GPR[EPVS]-1659870728630
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870728631
GPR[SPVAP]-1659870728631
GPR[EPVAP]-1659870729325
GPR[EPVS]-1659870729325
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870729326
GPR[SPVAP]-1659870729326
GPR[EPVAP]-1659870730035
GPR[EPVS]-1659870730035
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870730036
GPR[SPVAP]-1659870730036
GPR[EPVAP]-1659870730737
GPR[EPVS]-1659870730738
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870730739
GPR[SPVAP]-1659870730739
GPR[EPVAP]-1659870731458
GPR[EPVS]-1659870731458
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870731459
GPR[SPVAP]-1659870731459
GPR[EPVAP]-1659870732171
GPR[EPVS]-1659870732171
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870732172
GPR[SPVAP]-1659870732172
GPR[EPVAP]-1659870732878
GPR[EPVS]-1659870732878
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870732879
GPR[SPVAP]-1659870732879
GPR[EPVAP]-1659870733585
GPR[EPVS]-1659870733585
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870733586
GPR[SPVAP]-1659870733586
GPR[EPVAP]-1659870734297
GPR[EPVS]-1659870734297
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870734298
GPR[SPVAP]-1659870734298
GPR[EPVAP]-1659870735015
GPR[EPVS]-1659870735015
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870735016
GPR[SPVAP]-1659870735016
GPR[EPVAP]-1659870735709
GPR[EPVS]-1659870735709
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870735711
GPR[SPVAP]-1659870735711
GPR[EPVAP]-1659870736451
GPR[EPVS]-1659870736451
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870736452
GPR[SPVAP]-1659870736452
GPR[EPVAP]-1659870737169
GPR[EPVS]-1659870737169
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870737170
GPR[SPVAP]-1659870737170
GPR[EPVAP]-1659870737900
GPR[EPVS]-1659870737900
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870737901
GPR[SPVAP]-1659870737901
GPR[EPVAP]-1659870738629
GPR[EPVS]-1659870738629
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870738630
GPR[SPVAP]-1659870738630
GPR[EPVAP]-1659870739335
GPR[EPVS]-1659870739335
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870739336
GPR[SPVAP]-1659870739336
GPR[EPVAP]-1659870740046
GPR[EPVS]-1659870740046
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870740047
GPR[SPVAP]-1659870740047
GPR[EPVAP]-1659870740765
GPR[EPVS]-1659870740765
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870740766
GPR[SPVAP]-1659870740766
GPR[EPVAP]-1659870741466
GPR[EPVS]-1659870741466
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870741467
GPR[SPVAP]-1659870741467
GPR[EPVAP]-1659870742195
GPR[EPVS]-1659870742195
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870742196
GPR[SPVAP]-1659870742196
GPR[EPVAP]-1659870742885
GPR[EPVS]-1659870742885
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870742887
GPR[SPVAP]-1659870742887
GPR[EPVAP]-1659870743613
GPR[EPVS]-1659870743613
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870743614
GPR[SPVAP]-1659870743614
GPR[EPVAP]-1659870744323
GPR[EPVS]-1659870744323
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870744324
GPR[SPVAP]-1659870744324
GPR[EPVAP]-1659870745035
GPR[EPVS]-1659870745035
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870745036
GPR[SPVAP]-1659870745036
GPR[EPVAP]-1659870745749
GPR[EPVS]-1659870745749
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870745750
GPR[SPVAP]-1659870745750
GPR[EPVAP]-1659870746444
GPR[EPVS]-1659870746444
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870746446
GPR[SPVAP]-1659870746446
GPR[EPVAP]-1659870747168
GPR[EPVS]-1659870747168
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870747169
GPR[SPVAP]-1659870747169
GPR[EPVAP]-1659870747872
GPR[EPVS]-1659870747872
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870747873
GPR[SPVAP]-1659870747873
GPR[EPVAP]-1659870748570
GPR[EPVS]-1659870748570
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870748572
GPR[SPVAP]-1659870748572
GPR[EPVAP]-1659870749313
GPR[EPVS]-1659870749313
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870749314
GPR[SPVAP]-1659870749314
GPR[EPVAP]-1659870750011
GPR[EPVS]-1659870750011
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870750012
GPR[SPVAP]-1659870750012
GPR[EPVAP]-1659870750718
GPR[EPVS]-1659870750718
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870750719
GPR[SPVAP]-1659870750719
GPR[EPVAP]-1659870751419
GPR[EPVS]-1659870751419
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870751420
GPR[SPVAP]-1659870751420
GPR[EPVAP]-1659870752134
GPR[EPVS]-1659870752134
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870752136
GPR[SPVAP]-1659870752136
GPR[EPVAP]-1659870752833
GPR[EPVS]-1659870752833
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870752835
GPR[SPVAP]-1659870752835
GPR[EPVAP]-1659870753535
GPR[EPVS]-1659870753535
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870753537
GPR[SPVAP]-1659870753537
GPR[EPVAP]-1659870754249
GPR[EPVS]-1659870754249
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870754250
GPR[SPVAP]-1659870754250
GPR[EPVAP]-1659870755006
GPR[EPVS]-1659870755006
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870755007
GPR[SPVAP]-1659870755007
GPR[EPVAP]-1659870755714
GPR[EPVS]-1659870755714
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870755715
GPR[SPVAP]-1659870755715
GPR[EPVAP]-1659870756448
GPR[EPVS]-1659870756448
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870756450
GPR[SPVAP]-1659870756450
GPR[EPVAP]-1659870757158
GPR[EPVS]-1659870757158
========
calendar.set(year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870757160
GPR[SPVAP]-1659870757160
GPR[EPVAP]-1659870758438
GPR[SPVATF]-1659870758438
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870759608
GPR[EPVS]-1659870759608
========
calendar.set(this.year,MINIMUM_YEAR,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870759609
GPR[SPVAP]-1659870759609
GPR[EPVAP]-1659870760875
GPR[SPVATF]-1659870760875
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870762041
GPR[EPVS]-1659870762041
========
calendar.set(year,MINIMUM_YEAR,dom,this.hour,0,0);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870762042
GPR[SPVAP]-1659870762042
GPR[EPVAP]-1659870762748
GPR[EPVS]-1659870762748
========
calendar.set(year,MINIMUM_YEAR,dom,this.hour,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870762750
GPR[SPVAP]-1659870762750
GPR[EPVAP]-1659870763483
GPR[EPVS]-1659870763483
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime();

========
MM Copying to MM
GPR[SPVS]-1659870763485
GPR[SPVAP]-1659870763485
GPR[EPVAP]-1659870764213
GPR[EPVS]-1659870764213
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870764214
GPR[SPVAP]-1659870764214
GPR[EPVAP]-1659870765458
GPR[SPVATF]-1659870765458
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870766612
GPR[EPVS]-1659870766612
========
cal.set(this.year,Calendar.DECEMBER,31,23,59,59);
cal.set(Calendar.MILLISECOND,999);
return cal.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870766614
GPR[SPVAP]-1659870766614
GPR[EPVAP]-1659870767304
GPR[EPVS]-1659870767304
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
cal.set(Calendar.MILLISECOND,999);
return cal.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870767305
GPR[SPVAP]-1659870767305
GPR[EPVAP]-1659870768043
GPR[EPVS]-1659870768043
========
cal.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870768044
GPR[SPVAP]-1659870768044
GPR[EPVAP]-1659870768743
GPR[EPVS]-1659870768743
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
cal.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870768744
GPR[SPVAP]-1659870768744
GPR[EPVAP]-1659870769447
GPR[EPVS]-1659870769447
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.add(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870769448
GPR[SPVAP]-1659870769448
GPR[EPVAP]-1659870770670
GPR[SPVATF]-1659870770670
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870771824
GPR[EPVS]-1659870771824
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return cal.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870771825
GPR[SPVAP]-1659870771825
GPR[EPVAP]-1659870772545
GPR[EPVS]-1659870772545
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,this.MINIMUM_YEAR);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870772546
GPR[SPVAP]-1659870772546
GPR[EPVAP]-1659870773802
GPR[SPVATF]-1659870773802
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870774925
GPR[EPVS]-1659870774925
========
prevYearCalendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870774927
GPR[SPVAP]-1659870774927
GPR[EPVAP]-1659870775631
GPR[EPVS]-1659870775631
========
notifyListeners(new AxisChangeEvent(this));
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870775632
GPR[SPVAP]-1659870775632
GPR[EPVAP]-1659870776324
GPR[EPVS]-1659870776324
========
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870776326
GPR[SPVAP]-1659870776326
GPR[EPVAP]-1659870777036
GPR[EPVS]-1659870777036
========
this.mapDatasetToDomainAxis(0,0);
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870777037
GPR[SPVAP]-1659870777037
GPR[EPVAP]-1659870777729
GPR[EPVS]-1659870777729
========
peg(calendar);
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870777732
GPR[SPVAP]-1659870777732
GPR[EPVAP]-1659870779004
GPR[SPVATF]-1659870779004
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870780147
GPR[EPVS]-1659870780147
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return (this.calendar.getTime());

========
MM Copying to MM
GPR[SPVS]-1659870780148
GPR[SPVAP]-1659870780148
GPR[EPVAP]-1659870780895
GPR[EPVS]-1659870780895
========
fireChangeEvent();
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870780896
GPR[SPVAP]-1659870780896
GPR[EPVAP]-1659870781590
GPR[EPVS]-1659870781590
========
case Types.TIME :

calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870781591
GPR[SPVAP]-1659870781591
GPR[EPVAP]-1659870782199
GPR[EPVS]-1659870782199
========
case Types.NULL :

calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659870782200
GPR[SPVAP]-1659870782200
GPR[EPVAP]-1659870782794
GPR[EPVS]-1659870782794
GPR[ESUN]-1659870782795
GPR[SSUN]-1659870782795
org.jfree.data.time.Year,288
GPR[ESUN]-1659870783317
GPR[SSUN]-1659870783317
org.jfree.data.time.Year,291
GPR[ESUN]-1659870783659
GPR[SSUN]-1659870783659
org.jfree.data.time.TimeSeries,680
GPR[ESUN]-1659870784030
GPR[SSUN]-1659870784030
org.jfree.data.time.TimeSeries,681
Find no block!
GPR[SSUN]-1659870784398
org.jfree.data.time.TimeSeries,693
GPR[ESUN]-1659870784757
GPR[SSUN]-1659870784757
org.jfree.data.time.TimeSeries,694
GPR[ESUN]-1659870785101
GPR[SSUN]-1659870785101
org.jfree.data.time.TimeSeries,695
Find no block!
GPR[SSUN]-1659870785482
org.jfree.data.time.TimeSeries,429
========
return (TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(index).clone();

========
MM Copying to MM
GPR[SPVS]-1659870787965
GPR[SPVAP]-1659870787965
GPR[EPVAP]-1659870790410
GPR[EPVS]-1659870790410
========
if((index<0)||(index>=getSubtitleCount())){
throw new IllegalArgumentException("Index out of range.");
}
return (TimeSeriesDataItem)this.data.get(index);

========
MM Copying to MM
GPR[SPVS]-1659870790413
GPR[SPVAP]-1659870790413
GPR[EPVAP]-1659870791435
GPR[EPVS]-1659870791435
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
return (TimeSeriesDataItem)this.data.get(index);

========
MM Copying to MM
GPR[SPVS]-1659870791437
GPR[SPVAP]-1659870791437
GPR[EPVAP]-1659870792407
GPR[EPVS]-1659870792407
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
return (TimeSeriesDataItem)this.data.get(index);

========
MM Copying to MM
GPR[SPVS]-1659870792409
GPR[SPVAP]-1659870792409
GPR[EPVAP]-1659870793349
GPR[EPVS]-1659870793349
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
return (TimeSeriesDataItem)this.data.get(index);

========
MM Copying to MM
GPR[SPVS]-1659870793351
GPR[SPVAP]-1659870793351
GPR[EPVAP]-1659870794286
GPR[EPVS]-1659870794286
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("The \'series\' argument is out of bounds ("+series);
}
return (TimeSeriesDataItem)this.data.get(index);

========
MM Copying to MM
GPR[SPVS]-1659870794288
GPR[SPVAP]-1659870794288
GPR[EPVAP]-1659870795219
GPR[EPVS]-1659870795219
========
if(index<0||series>=getSeriesCount()){
throw new IllegalArgumentException("Invalid series index: "+series);
}
return (TimeSeriesDataItem)this.data.get(index);

========
MM Copying to MM
GPR[SPVS]-1659870795221
GPR[SPVAP]-1659870795221
GPR[EPVAP]-1659870796167
GPR[EPVS]-1659870796167
GPR[ESUN]-1659870796170
GPR[SSUN]-1659870796170
org.jfree.data.time.TimeSeries,463
========
return (OHLCItem)getDataItem(index).getPeriod();

========
MM Copying to MM
GPR[SPVS]-1659870798443
GPR[SPVAP]-1659870798443
GPR[EPVAP]-1659870800839
GPR[EPVS]-1659870800839
GPR[ESUN]-1659870800840
GPR[SSUN]-1659870800840
org.jfree.data.time.TimeSeries,584
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException("You are trying to add data where the time "+"period class is "+c.getName());
}

========
MM Copying to MM
GPR[SPVS]-1659870803674
GPR[SPVAP]-1659870803674
GPR[EPVAP]-1659870808219
GPR[SPVATF]-1659870808219
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870809355
GPR[EPVS]-1659870809355
========
if(!this.timePeriodClass.equals(that.majorTickTimePeriodClass)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870809357
GPR[SPVAP]-1659870809357
GPR[EPVAP]-1659870810109
GPR[EPVS]-1659870810109
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.timePeriodClass.equals(that.majorTickTimePeriodClass)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870810110
GPR[SPVAP]-1659870810110
GPR[EPVAP]-1659870810880
GPR[EPVS]-1659870810880
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new IllegalArgumentException("Can\'t mix RegularTimePeriod class types.");
}

========
MM Copying to MM
GPR[SPVS]-1659870810881
GPR[SPVAP]-1659870810881
GPR[EPVAP]-1659870812226
GPR[SPVATF]-1659870812226
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870813357
GPR[EPVS]-1659870813357
========
if(!this.timePeriodClass.equals(that.outlineStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870813358
GPR[SPVAP]-1659870813358
GPR[EPVAP]-1659870814114
GPR[EPVS]-1659870814114
========
if(!this.timePeriodClass.equals(axis.subCategories)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870814115
GPR[SPVAP]-1659870814115
GPR[EPVAP]-1659870814874
GPR[EPVS]-1659870814874
========
if(!this.timePeriodClass.equals(axis.subLabelFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870814875
GPR[SPVAP]-1659870814875
GPR[EPVAP]-1659870815631
GPR[EPVS]-1659870815631
========
if(!this.timePeriodClass.equals(axis.subLabelPaint)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870815633
GPR[SPVAP]-1659870815633
GPR[EPVAP]-1659870816398
GPR[EPVS]-1659870816398
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(axis.subCategories)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870816400
GPR[SPVAP]-1659870816400
GPR[EPVAP]-1659870817189
GPR[EPVS]-1659870817189
========
if(!this.timePeriodClass.equals(that.foregroundAnnotations)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870817191
GPR[SPVAP]-1659870817191
GPR[EPVAP]-1659870817939
GPR[EPVS]-1659870817939
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.foregroundAnnotations)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870817940
GPR[SPVAP]-1659870817940
GPR[EPVAP]-1659870818684
GPR[EPVS]-1659870818684
========
if(!this.data.equals(that.backgroundAnnotations)){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870818686
GPR[SPVAP]-1659870818686
GPR[EPVAP]-1659870819423
GPR[EPVS]-1659870819423
========
if(!ObjectUtilities.equal(this.DEFAULT_RANGE_DESCRIPTION,that.toolTipText)){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870819424
GPR[SPVAP]-1659870819424
GPR[EPVAP]-1659870820215
GPR[EPVS]-1659870820215
========
if(!ObjectUtilities.equal(this.DEFAULT_RANGE_DESCRIPTION,that.urlText)){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870820217
GPR[SPVAP]-1659870820217
GPR[EPVAP]-1659870820961
GPR[EPVS]-1659870820961
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!ObjectUtilities.equal(this.c,that.timePeriodClass)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870820963
GPR[SPVAP]-1659870820963
GPR[EPVAP]-1659870821708
GPR[EPVS]-1659870821708
========
if(!this.timePeriodClass.equals(DEFAULT_RANGE_DESCRIPTION)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870821711
GPR[SPVAP]-1659870821711
GPR[EPVAP]-1659870823060
GPR[SPVATF]-1659870823060
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659870824184
GPR[EPVS]-1659870824184
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870824188
GPR[SPVAP]-1659870824188
GPR[EPVAP]-1659870824941
GPR[EPVS]-1659870824941
========
if(!this.timePeriodClass.equals(that.scale)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870824944
GPR[SPVAP]-1659870824944
GPR[EPVAP]-1659870825736
GPR[EPVS]-1659870825736
========
if(!this.timePeriodClass.equals(that.stripOutlineStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870825738
GPR[SPVAP]-1659870825738
GPR[EPVAP]-1659870826534
GPR[EPVS]-1659870826534
========
if(!this.timePeriodClass.equals(that.itemFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870826535
GPR[SPVAP]-1659870826535
GPR[EPVAP]-1659870827281
GPR[EPVS]-1659870827281
========
if(!this.timePeriodClass.equals(that.itemPaint)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870827282
GPR[SPVAP]-1659870827282
GPR[EPVAP]-1659870828040
GPR[EPVS]-1659870828040
========
if(!this.timePeriodClass.equals(that.hLayout)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870828042
GPR[SPVAP]-1659870828042
GPR[EPVAP]-1659870828799
GPR[EPVS]-1659870828799
========
if(!this.timePeriodClass.equals(that.vLayout)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870828801
GPR[SPVAP]-1659870828801
GPR[EPVAP]-1659870829621
GPR[EPVS]-1659870829621
========
if(!this.timePeriodClass.equals(that.formatPattern)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870829622
GPR[SPVAP]-1659870829622
GPR[EPVAP]-1659870830374
GPR[EPVS]-1659870830374
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.formatPattern)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870830375
GPR[SPVAP]-1659870830375
GPR[EPVAP]-1659870831145
GPR[EPVS]-1659870831145
========
if(!this.timePeriodClass.equals(that.formatString)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870831147
GPR[SPVAP]-1659870831147
GPR[EPVAP]-1659870831901
GPR[EPVS]-1659870831901
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.formatString)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870831902
GPR[SPVAP]-1659870831902
GPR[EPVAP]-1659870832662
GPR[EPVS]-1659870832662
========
if(!this.timePeriodClass.equals(that.nullYString)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870832664
GPR[SPVAP]-1659870832664
GPR[EPVAP]-1659870833419
GPR[EPVS]-1659870833419
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.nullYString)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870833420
GPR[SPVAP]-1659870833420
GPR[EPVAP]-1659870834181
GPR[EPVS]-1659870834181
========
if(!this.timePeriodClass.equals(that.additionalFormatPattern)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870834183
GPR[SPVAP]-1659870834183
GPR[EPVAP]-1659870834935
GPR[EPVS]-1659870834935
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.additionalFormatPattern)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870834936
GPR[SPVAP]-1659870834936
GPR[EPVAP]-1659870835719
GPR[EPVS]-1659870835719
========
if(!this.timePeriodClass.equals(that.seriesLabelLists)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870835720
GPR[SPVAP]-1659870835720
GPR[EPVAP]-1659870836480
GPR[EPVS]-1659870836480
========
if(!this.timePeriodClass.equals(that.labelTemplate)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870836482
GPR[SPVAP]-1659870836482
GPR[EPVAP]-1659870837238
GPR[EPVS]-1659870837238
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.labelTemplate)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870837240
GPR[SPVAP]-1659870837240
GPR[EPVAP]-1659870838023
GPR[EPVS]-1659870838023
========
if(!this.timePeriodClass.equals(that.numberFormat)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870838024
GPR[SPVAP]-1659870838024
GPR[EPVAP]-1659870838794
GPR[EPVS]-1659870838794
========
if(!this.timePeriodClass.equals(generator.dateFormatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870838795
GPR[SPVAP]-1659870838795
GPR[EPVAP]-1659870839549
GPR[EPVS]-1659870839549
========
if(!this.timePeriodClass.equals(generator.numberFormatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870839550
GPR[SPVAP]-1659870839550
GPR[EPVAP]-1659870840306
GPR[EPVS]-1659870840306
========
if(!this.timePeriodClass.equals(that.labelFormat)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870840307
GPR[SPVAP]-1659870840307
GPR[EPVAP]-1659870841067
GPR[EPVS]-1659870841067
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.labelFormat)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870841068
GPR[SPVAP]-1659870841068
GPR[EPVAP]-1659870841864
GPR[EPVS]-1659870841864
========
if(!this.timePeriodClass.equals(that.percentFormat)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870841865
GPR[SPVAP]-1659870841865
GPR[EPVAP]-1659870842626
GPR[EPVS]-1659870842626
========
if(!this.timePeriodClass.equals(layer.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870842627
GPR[SPVAP]-1659870842627
GPR[EPVAP]-1659870843375
GPR[EPVS]-1659870843375
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(layer.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870843376
GPR[SPVAP]-1659870843376
GPR[EPVAP]-1659870844147
GPR[EPVS]-1659870844147
========
if(!this.timePeriodClass.equals(that.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870844149
GPR[SPVAP]-1659870844149
GPR[EPVAP]-1659870844957
GPR[EPVS]-1659870844957
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870844959
GPR[SPVAP]-1659870844959
GPR[EPVAP]-1659870845723
GPR[EPVS]-1659870845723
========
if(!this.timePeriodClass.equals(t.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870845724
GPR[SPVAP]-1659870845724
GPR[EPVAP]-1659870846481
GPR[EPVS]-1659870846481
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(t.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870846482
GPR[SPVAP]-1659870846482
GPR[EPVAP]-1659870847247
GPR[EPVS]-1659870847247
========
if(!this.timePeriodClass.equals(alignment.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870847248
GPR[SPVAP]-1659870847248
GPR[EPVAP]-1659870848053
GPR[EPVS]-1659870848053
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(alignment.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870848055
GPR[SPVAP]-1659870848055
GPR[EPVAP]-1659870848799
GPR[EPVS]-1659870848799
========
if(!this.timePeriodClass.equals(that.baseLabel)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870848801
GPR[SPVAP]-1659870848801
GPR[EPVAP]-1659870849588
GPR[EPVS]-1659870849588
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.baseLabel)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870849589
GPR[SPVAP]-1659870849589
GPR[EPVAP]-1659870850338
GPR[EPVS]-1659870850338
========
if(!this.timePeriodClass.equals(that.formatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870850339
GPR[SPVAP]-1659870850339
GPR[EPVAP]-1659870851092
GPR[EPVS]-1659870851092
========
if(!this.timePeriodClass.equals(order.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870851094
GPR[SPVAP]-1659870851094
GPR[EPVAP]-1659870851835
GPR[EPVS]-1659870851835
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(order.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870851836
GPR[SPVAP]-1659870851836
GPR[EPVAP]-1659870852588
GPR[EPVS]-1659870852588
========
if(!this.timePeriodClass.equals(that.positivePrefix)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870852590
GPR[SPVAP]-1659870852590
GPR[EPVAP]-1659870853339
GPR[EPVS]-1659870853339
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.positivePrefix)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870853341
GPR[SPVAP]-1659870853341
GPR[EPVAP]-1659870854129
GPR[EPVS]-1659870854129
========
if(!this.timePeriodClass.equals(that.daySuffix)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870854131
GPR[SPVAP]-1659870854131
GPR[EPVAP]-1659870854904
GPR[EPVS]-1659870854904
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.daySuffix)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870854906
GPR[SPVAP]-1659870854906
GPR[EPVAP]-1659870855657
GPR[EPVS]-1659870855657
========
if(!this.timePeriodClass.equals(that.hourSuffix)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870855659
GPR[SPVAP]-1659870855659
GPR[EPVAP]-1659870856423
GPR[EPVS]-1659870856423
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.hourSuffix)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870856425
GPR[SPVAP]-1659870856425
GPR[EPVAP]-1659870857191
GPR[EPVS]-1659870857191
========
if(!this.timePeriodClass.equals(that.minuteSuffix)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870857192
GPR[SPVAP]-1659870857192
GPR[EPVAP]-1659870857941
GPR[EPVS]-1659870857941
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.minuteSuffix)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870857943
GPR[SPVAP]-1659870857943
GPR[EPVAP]-1659870858702
GPR[EPVS]-1659870858702
========
if(!this.timePeriodClass.equals(that.secondSuffix)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870858703
GPR[SPVAP]-1659870858703
GPR[EPVAP]-1659870859450
GPR[EPVS]-1659870859450
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.secondSuffix)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870859452
GPR[SPVAP]-1659870859452
GPR[EPVAP]-1659870860224
GPR[EPVS]-1659870860224
========
if(!this.timePeriodClass.equals(that.dayFormatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870860226
GPR[SPVAP]-1659870860226
GPR[EPVAP]-1659870860975
GPR[EPVS]-1659870860975
========
if(!this.timePeriodClass.equals(that.hourFormatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870860976
GPR[SPVAP]-1659870860976
GPR[EPVAP]-1659870861749
GPR[EPVS]-1659870861749
========
if(!this.timePeriodClass.equals(that.minuteFormatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870861750
GPR[SPVAP]-1659870861750
GPR[EPVAP]-1659870862511
GPR[EPVS]-1659870862512
========
if(!this.timePeriodClass.equals(that.secondFormatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870862513
GPR[SPVAP]-1659870862513
GPR[EPVAP]-1659870863256
GPR[EPVS]-1659870863256
========
if(!this.timePeriodClass.equals(that.shadowColor)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870863258
GPR[SPVAP]-1659870863258
GPR[EPVAP]-1659870864009
GPR[EPVS]-1659870864009
========
if(!this.timePeriodClass.equals(that.label)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870864011
GPR[SPVAP]-1659870864011
GPR[EPVAP]-1659870864779
GPR[EPVS]-1659870864779
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.label)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870864780
GPR[SPVAP]-1659870864780
GPR[EPVAP]-1659870865542
GPR[EPVS]-1659870865542
========
if(!this.timePeriodClass.equals(that.lineStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870865543
GPR[SPVAP]-1659870865543
GPR[EPVAP]-1659870866294
GPR[EPVS]-1659870866294
========
if(!this.timePeriodClass.equals(that.items)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870866295
GPR[SPVAP]-1659870866295
GPR[EPVAP]-1659870867041
GPR[EPVS]-1659870867041
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.items)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870867043
GPR[SPVAP]-1659870867043
GPR[EPVAP]-1659870867799
GPR[EPVS]-1659870867799
========
if(!this.timePeriodClass.equals(that.drawingSupplier)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870867800
GPR[SPVAP]-1659870867800
GPR[EPVAP]-1659870868549
GPR[EPVS]-1659870868549
========
if(!this.timePeriodClass.equals(that.aggregatedItemsKey)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870868550
GPR[SPVAP]-1659870868550
GPR[EPVAP]-1659870869293
GPR[EPVS]-1659870869293
========
if(!this.timePeriodClass.equals(that.key)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870869295
GPR[SPVAP]-1659870869295
GPR[EPVAP]-1659870870045
GPR[EPVS]-1659870870045
========
if(!this.timePeriodClass.equals(that.angleLabelFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870870046
GPR[SPVAP]-1659870870046
GPR[EPVAP]-1659870870817
GPR[EPVS]-1659870870817
========
if(!this.timePeriodClass.equals(that.cornerTextItems)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870870818
GPR[SPVAP]-1659870870818
GPR[EPVAP]-1659870871598
GPR[EPVS]-1659870871598
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.cornerTextItems)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870871599
GPR[SPVAP]-1659870871599
GPR[EPVAP]-1659870872407
GPR[EPVS]-1659870872407
========
if(!this.timePeriodClass.equals(that.axisLineStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870872408
GPR[SPVAP]-1659870872408
GPR[EPVAP]-1659870873187
GPR[EPVS]-1659870873187
========
if(!this.timePeriodClass.equals(that.baseSeriesOutlineStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870873188
GPR[SPVAP]-1659870873188
GPR[EPVAP]-1659870873948
GPR[EPVS]-1659870873948
========
if(!this.timePeriodClass.equals(that.labelFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870873949
GPR[SPVAP]-1659870873949
GPR[EPVAP]-1659870874694
GPR[EPVS]-1659870874695
========
if(!this.timePeriodClass.equals(that.labelGenerator)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870874696
GPR[SPVAP]-1659870874696
GPR[EPVAP]-1659870875517
GPR[EPVS]-1659870875517
========
if(!this.timePeriodClass.equals(that.quadrantOrigin)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870875521
GPR[SPVAP]-1659870875521
GPR[EPVAP]-1659870877089
GPR[EPVS]-1659870877089
========
if(!this.timePeriodClass.equals(that.stroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870877091
GPR[SPVAP]-1659870877091
GPR[EPVAP]-1659870877882
GPR[EPVS]-1659870877882
========
if(!this.timePeriodClass.equals(that.labelOutlineStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870877883
GPR[SPVAP]-1659870877883
GPR[EPVAP]-1659870878694
GPR[EPVS]-1659870878694
========
if(!this.timePeriodClass.equals(that.dialFrame)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870878696
GPR[SPVAP]-1659870878696
GPR[EPVAP]-1659870879493
GPR[EPVS]-1659870879493
========
if(!this.timePeriodClass.equals(that.layers)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870879495
GPR[SPVAP]-1659870879495
GPR[EPVAP]-1659870880303
GPR[EPVS]-1659870880303
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.layers)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870880305
GPR[SPVAP]-1659870880305
GPR[EPVAP]-1659870881060
GPR[EPVS]-1659870881060
========
if(!this.timePeriodClass.equals(that.pointers)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870881061
GPR[SPVAP]-1659870881061
GPR[EPVAP]-1659870881840
GPR[EPVS]-1659870881840
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.pointers)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870881842
GPR[SPVAP]-1659870881842
GPR[EPVAP]-1659870882599
GPR[EPVS]-1659870882599
========
if(!this.timePeriodClass.equals(that.font)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870882600
GPR[SPVAP]-1659870882600
GPR[EPVAP]-1659870883379
GPR[EPVS]-1659870883379
========
if(!this.timePeriodClass.equals(that.templateValue)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870883381
GPR[SPVAP]-1659870883381
GPR[EPVAP]-1659870884163
GPR[EPVS]-1659870884163
========
if(!this.timePeriodClass.equals(that.majorTickStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870884164
GPR[SPVAP]-1659870884164
GPR[EPVAP]-1659870884927
GPR[EPVS]-1659870884927
========
if(!this.timePeriodClass.equals(that.minorTickStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870884937
GPR[SPVAP]-1659870884937
GPR[EPVAP]-1659870885724
GPR[EPVS]-1659870885724
========
if(!this.timePeriodClass.equals(that.tickLabelFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870885725
GPR[SPVAP]-1659870885725
GPR[EPVAP]-1659870886481
GPR[EPVS]-1659870886481
========
if(!this.timePeriodClass.equals(that.gradientPaintTransformer)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870886483
GPR[SPVAP]-1659870886483
GPR[EPVAP]-1659870887233
GPR[EPVS]-1659870887234
========
if(!this.timePeriodClass.equals(that.arrowPaint)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870887235
GPR[SPVAP]-1659870887235
GPR[EPVAP]-1659870887983
GPR[EPVS]-1659870887983
========
if(!this.timePeriodClass.equals(that.shape)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870887984
GPR[SPVAP]-1659870887984
GPR[EPVAP]-1659870888756
GPR[EPVS]-1659870888756
========
if(!this.timePeriodClass.equals(that.text)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870888758
GPR[SPVAP]-1659870888758
GPR[EPVAP]-1659870889525
GPR[EPVS]-1659870889525
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.text)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870889526
GPR[SPVAP]-1659870889526
GPR[EPVAP]-1659870890273
GPR[EPVS]-1659870890273
========
if(!this.timePeriodClass.equals(that.barPainter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870890274
GPR[SPVAP]-1659870890274
GPR[EPVAP]-1659870891024
GPR[EPVS]-1659870891024
========
if(!this.timePeriodClass.equals(that.groupStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870891026
GPR[SPVAP]-1659870891026
GPR[EPVAP]-1659870891787
GPR[EPVS]-1659870891787
========
if(!this.timePeriodClass.equals(that.point)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870891789
GPR[SPVAP]-1659870891789
GPR[EPVAP]-1659870892559
GPR[EPVS]-1659870892559
========
if(!this.timePeriodClass.equals(that.paintScale)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870892561
GPR[SPVAP]-1659870892561
GPR[EPVAP]-1659870893315
GPR[EPVS]-1659870893315
========
if(!this.timePeriodClass.equals(that.gradientTransformer)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870893316
GPR[SPVAP]-1659870893316
GPR[EPVAP]-1659870894083
GPR[EPVS]-1659870894083
========
if(!this.timePeriodClass.equals(that.backgroundAnnotations)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870894085
GPR[SPVAP]-1659870894085
GPR[EPVAP]-1659870894833
GPR[EPVS]-1659870894833
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.backgroundAnnotations)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870894834
GPR[SPVAP]-1659870894834
GPR[EPVAP]-1659870895581
GPR[EPVS]-1659870895581
========
if(!this.timePeriodClass.equals(that.guideLinePaint)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870895583
GPR[SPVAP]-1659870895583
GPR[EPVAP]-1659870896332
GPR[EPVS]-1659870896332
========
if(!this.timePeriodClass.equals(that.guideLineStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870896334
GPR[SPVAP]-1659870896334
GPR[EPVAP]-1659870897091
GPR[EPVS]-1659870897091
========
if(!this.timePeriodClass.equals(that.lookupTable)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870897092
GPR[SPVAP]-1659870897092
GPR[EPVAP]-1659870897847
GPR[EPVS]-1659870897847
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.lookupTable)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870897849
GPR[SPVAP]-1659870897849
GPR[EPVAP]-1659870898604
GPR[EPVS]-1659870898604
========
if(!this.timePeriodClass.equals(this.c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870898605
GPR[SPVAP]-1659870898605
GPR[EPVAP]-1659870899351
GPR[EPVS]-1659870899351
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!info.periodClass.equals(this.periodClass)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870899353
GPR[SPVAP]-1659870899353
GPR[EPVAP]-1659870900101
GPR[EPVS]-1659870900101
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!info.dateFormat.equals(this.dateFormat)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870900102
GPR[SPVAP]-1659870900102
GPR[EPVAP]-1659870900878
GPR[EPVS]-1659870900878
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!info.labelFont.equals(this.labelFont)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870900880
GPR[SPVAP]-1659870900880
GPR[EPVAP]-1659870901634
GPR[EPVS]-1659870901634
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!info.labelPaint.equals(this.labelPaint)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870901635
GPR[SPVAP]-1659870901635
GPR[EPVAP]-1659870902412
GPR[EPVS]-1659870902412
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!info.dividerStroke.equals(this.dividerStroke)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870902413
GPR[SPVAP]-1659870902413
GPR[EPVAP]-1659870903155
GPR[EPVS]-1659870903155
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!info.dividerPaint.equals(this.dividerPaint)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870903156
GPR[SPVAP]-1659870903156
GPR[EPVAP]-1659870903915
GPR[EPVS]-1659870903915
========
if(!this.timePeriodClass.equals(that.yearFormatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870903916
GPR[SPVAP]-1659870903916
GPR[EPVAP]-1659870904669
GPR[EPVS]-1659870904669
========
if(!this.timePeriodClass.equals(that.sublabelFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870904670
GPR[SPVAP]-1659870904670
GPR[EPVAP]-1659870905425
GPR[EPVS]-1659870905425
========
if(!this.timePeriodClass.equals(that.sublabels)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870905426
GPR[SPVAP]-1659870905426
GPR[EPVAP]-1659870906200
GPR[EPVS]-1659870906200
========
if(!this.timePeriodClass.equals(that.first)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870906201
GPR[SPVAP]-1659870906201
GPR[EPVAP]-1659870906968
GPR[EPVS]-1659870906969
========
if(!this.timePeriodClass.equals(that.last)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870906970
GPR[SPVAP]-1659870906970
GPR[EPVAP]-1659870907723
GPR[EPVS]-1659870907723
========
if(!this.timePeriodClass.equals(that.timeZone)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870907724
GPR[SPVAP]-1659870907724
GPR[EPVAP]-1659870908465
GPR[EPVS]-1659870908465
========
if(!this.timePeriodClass.equals(that.locale)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870908467
GPR[SPVAP]-1659870908467
GPR[EPVAP]-1659870909231
GPR[EPVS]-1659870909231
========
if(!this.timePeriodClass.equals(that.autoRangeTimePeriodClass)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870909233
GPR[SPVAP]-1659870909233
GPR[EPVAP]-1659870909990
GPR[EPVS]-1659870909990
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.c.equals(that.autoRangeTimePeriodClass)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870909991
GPR[SPVAP]-1659870909991
GPR[EPVAP]-1659870910752
GPR[EPVS]-1659870910752
========
if(!this.timePeriodClass.equals(that.minorTickTimePeriodClass)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870910754
GPR[SPVAP]-1659870910754
GPR[EPVAP]-1659870911504
GPR[EPVS]-1659870911504
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.c.equals(that.minorTickTimePeriodClass)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870911505
GPR[SPVAP]-1659870911506
GPR[EPVAP]-1659870912257
GPR[EPVS]-1659870912258
========
if(!this.timePeriodClass.equals(that.minorTickMarkPaint)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870912259
GPR[SPVAP]-1659870912259
GPR[EPVAP]-1659870913018
GPR[EPVS]-1659870913018
========
if(!this.timePeriodClass.equals(that.minorTickMarkStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870913019
GPR[SPVAP]-1659870913019
GPR[EPVAP]-1659870913766
GPR[EPVS]-1659870913766
========
if(!this.timePeriodClass.equals(that.symbols)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870913768
GPR[SPVAP]-1659870913768
GPR[EPVAP]-1659870914534
GPR[EPVS]-1659870914534
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.symbols)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870914535
GPR[SPVAP]-1659870914535
GPR[EPVAP]-1659870915299
GPR[EPVS]-1659870915299
========
if(!this.timePeriodClass.equals(that.xCrosshairs)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870915301
GPR[SPVAP]-1659870915301
GPR[EPVAP]-1659870916066
GPR[EPVS]-1659870916066
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.xCrosshairs)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870916068
GPR[SPVAP]-1659870916068
GPR[EPVAP]-1659870916837
GPR[EPVS]-1659870916837
========
if(!this.timePeriodClass.equals(that.yCrosshairs)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870916839
GPR[SPVAP]-1659870916839
GPR[EPVAP]-1659870917597
GPR[EPVS]-1659870917597
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.yCrosshairs)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870917599
GPR[SPVAP]-1659870917599
GPR[EPVAP]-1659870918356
GPR[EPVS]-1659870918356
========
if(!this.timePeriodClass.equals(that.extraLargeFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870918357
GPR[SPVAP]-1659870918357
GPR[EPVAP]-1659870919144
GPR[EPVS]-1659870919144
========
if(!this.timePeriodClass.equals(that.largeFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870919145
GPR[SPVAP]-1659870919145
GPR[EPVAP]-1659870919901
GPR[EPVS]-1659870919901
========
if(!this.timePeriodClass.equals(that.regularFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870919902
GPR[SPVAP]-1659870919902
GPR[EPVAP]-1659870920660
GPR[EPVS]-1659870920660
========
if(!this.timePeriodClass.equals(that.smallFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870920661
GPR[SPVAP]-1659870920661
GPR[EPVAP]-1659870921430
GPR[EPVS]-1659870921430
========
if(!this.timePeriodClass.equals(that.xyBarPainter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870921432
GPR[SPVAP]-1659870921432
GPR[EPVAP]-1659870922180
GPR[EPVS]-1659870922180
========
if(!this.timePeriodClass.equals(that.dateFormat)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870922182
GPR[SPVAP]-1659870922182
GPR[EPVAP]-1659870922975
GPR[EPVS]-1659870922975
========
if(!this.timePeriodClass.equals(that.itemParameterName)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870922976
GPR[SPVAP]-1659870922976
GPR[EPVAP]-1659870923744
GPR[EPVS]-1659870923744
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.itemParameterName)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870923745
GPR[SPVAP]-1659870923745
GPR[EPVAP]-1659870924515
GPR[EPVS]-1659870924515
========
if(!this.timePeriodClass.equals(that.prefix)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870924516
GPR[SPVAP]-1659870924517
GPR[EPVAP]-1659870925265
GPR[EPVS]-1659870925265
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.prefix)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870925266
GPR[SPVAP]-1659870925266
GPR[EPVAP]-1659870926039
GPR[EPVS]-1659870926039
========
if(!this.timePeriodClass.equals(that.seriesParameterName)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870926041
GPR[SPVAP]-1659870926041
GPR[EPVAP]-1659870926799
GPR[EPVS]-1659870926799
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.seriesParameterName)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870926800
GPR[SPVAP]-1659870926800
GPR[EPVAP]-1659870927551
GPR[EPVS]-1659870927551
========
if(!this.timePeriodClass.equals(that.categoryParameterName)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870927553
GPR[SPVAP]-1659870927553
GPR[EPVAP]-1659870928291
GPR[EPVS]-1659870928291
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.categoryParameterName)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870928292
GPR[SPVAP]-1659870928292
GPR[EPVAP]-1659870929039
GPR[EPVS]-1659870929039
========
if(!this.timePeriodClass.equals(that.rowKey)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870929040
GPR[SPVAP]-1659870929040
GPR[EPVAP]-1659870929792
GPR[EPVS]-1659870929792
========
if(!this.timePeriodClass.equals(that.columnKey)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870929793
GPR[SPVAP]-1659870929793
GPR[EPVAP]-1659870930544
GPR[EPVS]-1659870930544
========
if(!this.timePeriodClass.equals(that.area)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870931684
GPR[SPVAP]-1659870931684
GPR[EPVAP]-1659870932442
GPR[EPVS]-1659870932442
========
if(!this.timePeriodClass.equals(that.renderingHints)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870932443
GPR[SPVAP]-1659870932443
GPR[EPVAP]-1659870933199
GPR[EPVS]-1659870933199
========
if(!this.timePeriodClass.equals(other.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870933200
GPR[SPVAP]-1659870933200
GPR[EPVAP]-1659870933965
GPR[EPVS]-1659870933965
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(other.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870933966
GPR[SPVAP]-1659870933966
GPR[EPVAP]-1659870934743
GPR[EPVS]-1659870934743
========
if(!this.timePeriodClass.equals(tf.text)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870934744
GPR[SPVAP]-1659870934744
GPR[EPVAP]-1659870935499
GPR[EPVS]-1659870935499
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(tf.text)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870935500
GPR[SPVAP]-1659870935500
GPR[EPVAP]-1659870936261
GPR[EPVS]-1659870936261
========
if(!this.timePeriodClass.equals(tf.font)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870936262
GPR[SPVAP]-1659870936262
GPR[EPVAP]-1659870937008
GPR[EPVS]-1659870937008
========
if(!this.timePeriodClass.equals(tf.paint)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870937010
GPR[SPVAP]-1659870937010
GPR[EPVAP]-1659870937794
GPR[EPVS]-1659870937794
========
if(!this.timePeriodClass.equals(that.frame)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870937795
GPR[SPVAP]-1659870937795
GPR[EPVAP]-1659870938547
GPR[EPVS]-1659870938547
========
if(!this.timePeriodClass.equals(that.bounds)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870938549
GPR[SPVAP]-1659870938549
GPR[EPVAP]-1659870939310
GPR[EPVS]-1659870939310
========
if(!this.timePeriodClass.equals(that.arrangement)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870939311
GPR[SPVAP]-1659870939311
GPR[EPVAP]-1659870940078
GPR[EPVS]-1659870940078
========
if(!this.timePeriodClass.equals(that.blocks)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870940080
GPR[SPVAP]-1659870940080
GPR[EPVAP]-1659870940832
GPR[EPVS]-1659870940832
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.blocks)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870940834
GPR[SPVAP]-1659870940834
GPR[EPVAP]-1659870941589
GPR[EPVS]-1659870941589
========
if(!this.timePeriodClass.equals(that.keyToGroupMap)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870941590
GPR[SPVAP]-1659870941590
GPR[EPVAP]-1659870942335
GPR[EPVS]-1659870942335
========
if(!this.timePeriodClass.equals(type.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870942336
GPR[SPVAP]-1659870942336
GPR[EPVAP]-1659870943119
GPR[EPVS]-1659870943119
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(type.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870943120
GPR[SPVAP]-1659870943120
GPR[EPVAP]-1659870943871
GPR[EPVS]-1659870943871
========
if(!this.timePeriodClass.equals(that.underlying)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870943880
GPR[SPVAP]-1659870943880
GPR[EPVAP]-1659870945128
GPR[EPVS]-1659870945128
========
if(!this.timePeriodClass.equals(that.tasks)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870945129
GPR[SPVAP]-1659870945129
GPR[EPVAP]-1659870946039
GPR[EPVS]-1659870946039
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.tasks)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870946047
GPR[SPVAP]-1659870946047
GPR[EPVAP]-1659870947758
GPR[EPVS]-1659870947758
========
if(!this.timePeriodClass.equals(that.dates)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870947759
GPR[SPVAP]-1659870947759
GPR[EPVAP]-1659870948528
GPR[EPVS]-1659870948528
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.dates)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870948530
GPR[SPVAP]-1659870948530
GPR[EPVAP]-1659870949279
GPR[EPVS]-1659870949279
========
if(!this.timePeriodClass.equals(that.bins)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870949280
GPR[SPVAP]-1659870949280
GPR[EPVAP]-1659870950040
GPR[EPVS]-1659870950040
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.bins)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870950042
GPR[SPVAP]-1659870950042
GPR[EPVAP]-1659870950797
GPR[EPVS]-1659870950797
========
if(!this.timePeriodClass.equals(that.seriesKeys)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870950799
GPR[SPVAP]-1659870950799
GPR[EPVAP]-1659870951564
GPR[EPVS]-1659870951564
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.seriesKeys)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870951565
GPR[SPVAP]-1659870951565
GPR[EPVAP]-1659870952325
GPR[EPVS]-1659870952325
========
if(!this.timePeriodClass.equals(that.allSeriesData)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870952326
GPR[SPVAP]-1659870952326
GPR[EPVAP]-1659870953078
GPR[EPVS]-1659870953078
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.allSeriesData)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870953080
GPR[SPVAP]-1659870953080
GPR[EPVAP]-1659870953834
GPR[EPVS]-1659870953834
========
if(!this.timePeriodClass.equals(that.x)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870953835
GPR[SPVAP]-1659870953835
GPR[EPVAP]-1659870954588
GPR[EPVS]-1659870954588
========
if(!this.timePeriodClass.equals(that.windDir)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870954590
GPR[SPVAP]-1659870954590
GPR[EPVAP]-1659870955354
GPR[EPVS]-1659870955354
========
if(!this.timePeriodClass.equals(that.windForce)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870955355
GPR[SPVAP]-1659870955355
GPR[EPVAP]-1659870956129
GPR[EPVS]-1659870956129
========
if(!this.timePeriodClass.equals(that.date)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870956130
GPR[SPVAP]-1659870956130
GPR[EPVAP]-1659870956883
GPR[EPVS]-1659870956883
========
if(!this.timePeriodClass.equals(that.high)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870956884
GPR[SPVAP]-1659870956884
GPR[EPVAP]-1659870957640
GPR[EPVS]-1659870957640
========
if(!this.timePeriodClass.equals(that.low)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870957641
GPR[SPVAP]-1659870957641
GPR[EPVAP]-1659870958400
GPR[EPVS]-1659870958400
========
if(!this.timePeriodClass.equals(that.open)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870958401
GPR[SPVAP]-1659870958401
GPR[EPVAP]-1659870959151
GPR[EPVS]-1659870959151
========
if(!this.timePeriodClass.equals(that.close)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870959153
GPR[SPVAP]-1659870959153
GPR[EPVAP]-1659870959905
GPR[EPVS]-1659870959905
========
if(!this.timePeriodClass.equals(that.seriesKey)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870959906
GPR[SPVAP]-1659870959906
GPR[EPVAP]-1659870960697
GPR[EPVS]-1659870960697
========
if(!this.timePeriodClass.equals(that.id)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870960698
GPR[SPVAP]-1659870960698
GPR[EPVAP]-1659870961460
GPR[EPVS]-1659870961460
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.id)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870961462
GPR[SPVAP]-1659870961462
GPR[EPVAP]-1659870962227
GPR[EPVS]-1659870962227
========
if(!this.timePeriodClass.equals(that.period)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870962228
GPR[SPVAP]-1659870962228
GPR[EPVAP]-1659870963010
GPR[EPVS]-1659870963010
========
if(!this.timePeriodClass.equals(position.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870963011
GPR[SPVAP]-1659870963011
GPR[EPVAP]-1659870963792
GPR[EPVS]-1659870963792
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(position.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870963793
GPR[SPVAP]-1659870963793
GPR[EPVAP]-1659870964559
GPR[EPVS]-1659870964560
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!Arrays.equals(this.data,that.data)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870964561
GPR[SPVAP]-1659870964561
GPR[EPVAP]-1659870965319
GPR[EPVS]-1659870965319
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!DEFAULT_RANGE_DESCRIPTION.equals(DEFAULT_RANGE_DESCRIPTION)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870965321
GPR[SPVAP]-1659870965321
GPR[EPVAP]-1659870966078
GPR[EPVS]-1659870966078
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!Arrays.equals(p1.xpoints,p2.xpoints)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870966080
GPR[SPVAP]-1659870966080
GPR[EPVAP]-1659870966849
GPR[EPVS]-1659870966849
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!Arrays.equals(p1.ypoints,p2.ypoints)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870966850
GPR[SPVAP]-1659870966850
GPR[EPVAP]-1659870967610
GPR[EPVS]-1659870967610
========
if(!ObjectUtilities.equal(this.data,that.backgroundAnnotations)){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870967612
GPR[SPVAP]-1659870967612
GPR[EPVAP]-1659870968365
GPR[EPVS]-1659870968365
========
if(!ObjectUtilities.equal(this.data,that.foregroundAnnotations)){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870968367
GPR[SPVAP]-1659870968367
GPR[EPVAP]-1659870969121
GPR[EPVS]-1659870969121
========
if(this.notify!=that.rangeZeroBaselineVisible){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870969122
GPR[SPVAP]-1659870969122
GPR[EPVAP]-1659870969873
GPR[EPVS]-1659870969873
========
if(this.maximumItemCount!=that.maximumLinesToDisplay){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870969874
GPR[SPVAP]-1659870969874
GPR[EPVAP]-1659870970641
GPR[EPVS]-1659870970641
========
if(this.notify!=that.expandToFitSpace){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870970643
GPR[SPVAP]-1659870970643
GPR[EPVAP]-1659870971400
GPR[EPVS]-1659870971400
========
if(!ObjectUtilities.equal(this.DEFAULT_RANGE_DESCRIPTION,that.toolTipText)){
return false;
}
if(!ObjectUtilities.equal(this.DEFAULT_RANGE_DESCRIPTION,that.urlText)){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870971402
GPR[SPVAP]-1659870971402
GPR[EPVAP]-1659870972171
GPR[EPVS]-1659870972171
========
if(this.notify!=that.lineVisible){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870972172
GPR[SPVAP]-1659870972172
GPR[EPVAP]-1659870972929
GPR[EPVS]-1659870972929
========
if(this.minY!=that.startPercent){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870972930
GPR[SPVAP]-1659870972930
GPR[EPVAP]-1659870973719
GPR[EPVS]-1659870973719
========
if(this.minY!=that.endPercent){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870973721
GPR[SPVAP]-1659870973721
GPR[EPVAP]-1659870974482
GPR[EPVS]-1659870974482
========
if(this.maximumItemCount!=that.pieIndex){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870974483
GPR[SPVAP]-1659870974483
GPR[EPVAP]-1659870975233
GPR[EPVS]-1659870975233
========
if(this.maximumItemCount!=that.sectionIndex){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870975234
GPR[SPVAP]-1659870975234
GPR[EPVAP]-1659870975999
GPR[EPVS]-1659870975999
========
if(this.minY!=that.innerSeparatorExtension){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870976001
GPR[SPVAP]-1659870976001
GPR[EPVAP]-1659870976762
GPR[EPVS]-1659870976762
========
if(this.minY!=that.outerSeparatorExtension){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870976764
GPR[SPVAP]-1659870976764
GPR[EPVAP]-1659870977529
GPR[EPVS]-1659870977529
========
if(this.minY!=that.sectionDepth){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870977530
GPR[SPVAP]-1659870977530
GPR[EPVAP]-1659870978304
GPR[EPVS]-1659870978304
========
if(this.notify!=that.drawXError){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870978306
GPR[SPVAP]-1659870978306
GPR[EPVAP]-1659870979059
GPR[EPVS]-1659870979059
========
if(this.notify!=that.drawYError){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870979061
GPR[SPVAP]-1659870979061
GPR[EPVAP]-1659870979829
GPR[EPVS]-1659870979829
========
if(this.minY!=that.capLength){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870979831
GPR[SPVAP]-1659870979831
GPR[EPVAP]-1659870980608
GPR[EPVS]-1659870980608
========
if(!this.timePeriodClass.equals(library.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870980609
GPR[SPVAP]-1659870980609
GPR[EPVAP]-1659870981354
GPR[EPVS]-1659870981354
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(this.DEFAULT_RANGE_DESCRIPTION!=null?!this.name.equals(library.name):library.name!=null){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870981356
GPR[SPVAP]-1659870981356
GPR[EPVAP]-1659870982107
GPR[EPVS]-1659870982107
========
if(!this.timePeriodClass.equals(that.value)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870982108
GPR[SPVAP]-1659870982108
GPR[EPVAP]-1659870982863
GPR[EPVS]-1659870982863
========
if(!this.timePeriodClass.equals(timePeriodValue.period)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870982864
GPR[SPVAP]-1659870982864
GPR[EPVAP]-1659870983632
GPR[EPVS]-1659870983632
========
if(!this.timePeriodClass.equals(timePeriodValue.value)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870983633
GPR[SPVAP]-1659870983633
GPR[EPVAP]-1659870984411
GPR[EPVS]-1659870984411
========
if(this.minY!=that.widthRadius){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870984413
GPR[SPVAP]-1659870984413
GPR[EPVAP]-1659870985172
GPR[EPVS]-1659870985172
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!ObjectUtilities.equal(this.data,that.subplots)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870985175
GPR[SPVAP]-1659870985175
GPR[EPVAP]-1659870985925
GPR[EPVS]-1659870985925
========
if(this.minY!=that.gap){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870985927
GPR[SPVAP]-1659870985927
GPR[EPVAP]-1659870986677
GPR[EPVS]-1659870986677
========
if(this.minY!=that.gap){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!ObjectUtilities.equal(this.data,that.subplots)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870986679
GPR[SPVAP]-1659870986679
GPR[EPVAP]-1659870987455
GPR[EPVS]-1659870987455
========
if(this.notify!=that.showOutline){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870987457
GPR[SPVAP]-1659870987457
GPR[EPVAP]-1659870988198
GPR[EPVS]-1659870988198
========
if(this.minY!=that.lowerBound){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870988200
GPR[SPVAP]-1659870988200
GPR[EPVAP]-1659870988997
GPR[EPVS]-1659870988997
========
if(this.minY!=that.upperBound){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870988998
GPR[SPVAP]-1659870988998
GPR[EPVAP]-1659870989751
GPR[EPVS]-1659870989751
========
if(this.minY!=that.innerRadius){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870989752
GPR[SPVAP]-1659870989752
GPR[EPVAP]-1659870990522
GPR[EPVS]-1659870990522
========
if(this.minY!=that.outerRadius){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870990525
GPR[SPVAP]-1659870990525
GPR[EPVAP]-1659870991291
GPR[EPVS]-1659870991291
========
if(this.notify!=that.baseShapesFilled){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870991292
GPR[SPVAP]-1659870991292
GPR[EPVAP]-1659870992055
GPR[EPVS]-1659870992055
========
if(this.notify!=that.useOutlinePaint){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870992057
GPR[SPVAP]-1659870992057
GPR[EPVAP]-1659870992803
GPR[EPVS]-1659870992803
========
if(this.notify!=that.useSeriesOffset){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870992805
GPR[SPVAP]-1659870992805
GPR[EPVAP]-1659870993563
GPR[EPVS]-1659870993563
========
if(this.minY!=that.itemMargin){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870993564
GPR[SPVAP]-1659870993564
GPR[EPVAP]-1659870994324
GPR[EPVS]-1659870994324
========
if(this.minY!=that.maximumBarWidth){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870994325
GPR[SPVAP]-1659870994325
GPR[EPVAP]-1659870995085
GPR[EPVS]-1659870995085
========
if(this.notify!=that.meanVisible){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870995086
GPR[SPVAP]-1659870995086
GPR[EPVAP]-1659870995836
GPR[EPVS]-1659870995836
========
if(this.notify!=that.medianVisible){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870995838
GPR[SPVAP]-1659870995838
GPR[EPVAP]-1659870996607
GPR[EPVS]-1659870996607
========
if(this.maximumItemCount!=that.autoWidthMethod){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870996609
GPR[SPVAP]-1659870996609
GPR[EPVAP]-1659870997363
GPR[EPVS]-1659870997363
========
if(this.minY!=that.autoWidthFactor){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870997364
GPR[SPVAP]-1659870997364
GPR[EPVAP]-1659870998123
GPR[EPVS]-1659870998123
========
if(this.minY!=that.autoWidthGap){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870998124
GPR[SPVAP]-1659870998124
GPR[EPVAP]-1659870998869
GPR[EPVS]-1659870998869
========
if(this.minY!=that.fixedAutoRange){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870998870
GPR[SPVAP]-1659870998870
GPR[EPVAP]-1659870999644
GPR[EPVS]-1659870999644
========
if(this.notify!=that.autoTickUnitSelection){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659870999646
GPR[SPVAP]-1659870999646
GPR[EPVAP]-1659871000395
GPR[EPVS]-1659871000395
========
if(this.notify!=that.verticalTickLabels){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871000396
GPR[SPVAP]-1659871000396
GPR[EPVAP]-1659871001178
GPR[EPVS]-1659871001178
========
if(this.maximumItemCount!=that.minorTickCount){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871001179
GPR[SPVAP]-1659871001179
GPR[EPVAP]-1659871001937
GPR[EPVS]-1659871001937
========
if(this.minY!=that.xOffset){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871001938
GPR[SPVAP]-1659871001938
GPR[EPVAP]-1659871002703
GPR[EPVS]-1659871002703
========
if(this.minY!=that.yOffset){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871002704
GPR[SPVAP]-1659871002704
GPR[EPVAP]-1659871003462
GPR[EPVS]-1659871003462
========
if(this.minY!=that.xOffset){
return false;
}
if(this.minY!=that.yOffset){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871003463
GPR[SPVAP]-1659871003463
GPR[EPVAP]-1659871004228
GPR[EPVS]-1659871004229
========
if(this.maximumItemCount!=that.dotWidth){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871004230
GPR[SPVAP]-1659871004230
GPR[EPVAP]-1659871004994
GPR[EPVS]-1659871004994
========
if(this.maximumItemCount!=that.dotHeight){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871004995
GPR[SPVAP]-1659871004995
GPR[EPVAP]-1659871005767
GPR[EPVS]-1659871005767
========
if(!this.timePeriodClass.equals(that.formatPattern)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.formatPattern)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871005769
GPR[SPVAP]-1659871005769
GPR[EPVAP]-1659871006545
GPR[EPVS]-1659871006545
========
if(!this.timePeriodClass.equals(that.labelFormat)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.labelFormat)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871006547
GPR[SPVAP]-1659871006547
GPR[EPVAP]-1659871007336
GPR[EPVS]-1659871007336
========
if(!this.timePeriodClass.equals(that.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871007337
GPR[SPVAP]-1659871007337
GPR[EPVAP]-1659871008106
GPR[EPVS]-1659871008106
========
if(!this.timePeriodClass.equals(order.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(order.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871008108
GPR[SPVAP]-1659871008108
GPR[EPVAP]-1659871008881
GPR[EPVS]-1659871008881
========
if(!this.timePeriodClass.equals(that.label)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.label)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871008883
GPR[SPVAP]-1659871008883
GPR[EPVAP]-1659871009627
GPR[EPVS]-1659871009627
========
if(!this.timePeriodClass.equals(that.prefix)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.prefix)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871009629
GPR[SPVAP]-1659871009629
GPR[EPVAP]-1659871010387
GPR[EPVS]-1659871010387
========
if(!this.timePeriodClass.equals(that.text)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(that.text)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871010388
GPR[SPVAP]-1659871010388
GPR[EPVAP]-1659871011166
GPR[EPVS]-1659871011166
========
if(!this.timePeriodClass.equals(t.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(t.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871011168
GPR[SPVAP]-1659871011168
GPR[EPVAP]-1659871011954
GPR[EPVS]-1659871011954
========
if(!this.timePeriodClass.equals(that.items)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.items)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871011956
GPR[SPVAP]-1659871011956
GPR[EPVAP]-1659871012706
GPR[EPVS]-1659871012706
========
if(!this.timePeriodClass.equals(that.seriesKeys)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.seriesKeys)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871012707
GPR[SPVAP]-1659871012707
GPR[EPVAP]-1659871013485
GPR[EPVS]-1659871013485
========
if(!this.timePeriodClass.equals(type.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_RANGE_DESCRIPTION.equals(type.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871013486
GPR[SPVAP]-1659871013486
GPR[EPVAP]-1659871014235
GPR[EPVS]-1659871014235
========
if(!this.timePeriodClass.equals(DEFAULT_RANGE_DESCRIPTION)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!DEFAULT_RANGE_DESCRIPTION.equals(DEFAULT_RANGE_DESCRIPTION)){
return false;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871014237
GPR[SPVAP]-1659871014237
GPR[EPVAP]-1659871014997
GPR[EPVS]-1659871014997
GPR[ESUN]-1659871014998
GPR[SSUN]-1659871014998
org.jfree.data.time.TimeSeries,603
========
if(index<0){
if(!index){
b.append(" alt=\"\"");
}
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871019518
GPR[SPVAP]-1659871019518
GPR[EPVAP]-1659871021883
GPR[EPVS]-1659871021883
========
if(index<0){
b.append("/>");
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871021884
GPR[SPVAP]-1659871021884
GPR[EPVAP]-1659871022871
GPR[EPVS]-1659871022871
========
if(index<0){
if(!index){
b.append(" alt=\"\"");
}
b.append("/>");

this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871022873
GPR[SPVAP]-1659871022873
GPR[EPVAP]-1659871023792
GPR[EPVS]-1659871023792
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException("X-value already exists.");
}

========
MM Copying to MM
GPR[SPVS]-1659871023797
GPR[SPVAP]-1659871023797
GPR[EPVAP]-1659871026841
GPR[SPVATF]-1659871026841
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871027972
GPR[EPVS]-1659871027972
========
if(index<0){
updateBoundsForRemovedItem(item);
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871027974
GPR[SPVAP]-1659871027974
GPR[EPVAP]-1659871029292
GPR[SPVATF]-1659871029292
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871030421
GPR[EPVS]-1659871030421
========
if(index<0){
fireSeriesChanged();
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871030423
GPR[SPVAP]-1659871030423
GPR[EPVAP]-1659871031721
GPR[SPVATF]-1659871031721
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871032884
GPR[EPVS]-1659871032884
========
if(index<0){
updateBoundsForRemovedItem(item);
fireSeriesChanged();

this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871032886
GPR[SPVAP]-1659871032886
GPR[EPVAP]-1659871034183
GPR[SPVATF]-1659871034183
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871035331
GPR[EPVS]-1659871035331
========
if(index<0){
updateBoundsForRemovedItem(item);
fireSeriesChanged();
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871035333
GPR[SPVAP]-1659871035333
GPR[EPVAP]-1659871037772
GPR[SPVATF]-1659871037772
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871039105
GPR[EPVS]-1659871039105
========
if(index<0){
updateBoundsForRemovedItem(item);
updateBoundsForRemovedItem(item);
fireSeriesChanged();

this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871039107
GPR[SPVAP]-1659871039107
GPR[EPVAP]-1659871040483
GPR[SPVATF]-1659871040483
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871041595
GPR[EPVS]-1659871041595
========
if(index<0){
fireSeriesChanged();
updateBoundsForRemovedItem(item);
fireSeriesChanged();

this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871041597
GPR[SPVAP]-1659871041597
GPR[EPVAP]-1659871042879
GPR[SPVATF]-1659871042879
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871044010
GPR[EPVS]-1659871044010
========
if(index<0){
updateBoundsForRemovedItem(item);
fireSeriesChanged();
updateBoundsForRemovedItem(item);
fireSeriesChanged();

this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871044012
GPR[SPVAP]-1659871044012
GPR[EPVAP]-1659871045361
GPR[SPVATF]-1659871045361
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871046495
GPR[EPVS]-1659871046495
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}

========
MM Copying to MM
GPR[SPVS]-1659871046497
GPR[SPVAP]-1659871046497
GPR[EPVAP]-1659871047779
GPR[SPVATF]-1659871047779
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871048913
GPR[EPVS]-1659871048913
========
fireDatasetChanged(new DatasetChangeInfo());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871048915
GPR[SPVAP]-1659871048915
GPR[EPVAP]-1659871049665
GPR[EPVS]-1659871049665
========
if(index<count){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871049667
GPR[SPVAP]-1659871049667
GPR[EPVAP]-1659871051033
GPR[SPVATF]-1659871051033
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871052174
GPR[EPVS]-1659871052174
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659871052176
GPR[SPVAP]-1659871052176
GPR[EPVAP]-1659871053477
GPR[SPVATF]-1659871053477
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871054611
GPR[EPVS]-1659871054611
========
if(count<0){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871054613
GPR[SPVAP]-1659871054613
GPR[EPVAP]-1659871055945
GPR[SPVATF]-1659871055945
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871057051
GPR[EPVS]-1659871057051
========
copy.data=new java.util.ArrayList();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871057053
GPR[SPVAP]-1659871057053
GPR[EPVAP]-1659871057823
GPR[EPVS]-1659871057823
========
if(this.data.size()>0){
for(int count=count;index<=index;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem item=(TimeSeriesDataItem)item.clone();
try{
(TimeSeries)super.clone().add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871057825
GPR[SPVAP]-1659871057825
GPR[EPVAP]-1659871058441
GPR[EPVS]-1659871058441
========
if(index<count){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659871058442
GPR[SPVAP]-1659871058442
GPR[EPVAP]-1659871059760
GPR[SPVATF]-1659871059760
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871060864
GPR[EPVS]-1659871060864
========
if(count<0){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(index<count){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871060865
GPR[SPVAP]-1659871060865
GPR[EPVAP]-1659871062188
GPR[SPVATF]-1659871062188
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871063306
GPR[EPVS]-1659871063306
========
if(count<0){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659871063307
GPR[SPVAP]-1659871063307
GPR[EPVAP]-1659871064613
GPR[SPVATF]-1659871064613
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871065743
GPR[EPVS]-1659871065743
========
if(count<0){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(index<count){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659871065745
GPR[SPVAP]-1659871065745
GPR[EPVAP]-1659871067024
GPR[SPVATF]-1659871067024
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871068156
GPR[EPVS]-1659871068156
========
if(index<0||index>getSubtitleCount()){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871068158
GPR[SPVAP]-1659871068158
GPR[EPVAP]-1659871068949
GPR[EPVS]-1659871068949
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}

========
MM Copying to MM
GPR[SPVS]-1659871068950
GPR[SPVAP]-1659871068950
GPR[EPVAP]-1659871070263
GPR[SPVATF]-1659871070263
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871071386
GPR[EPVS]-1659871071386
========
fireChartChanged();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871071388
GPR[SPVAP]-1659871071388
GPR[EPVAP]-1659871072149
GPR[EPVS]-1659871072149
========
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871072150
GPR[SPVAP]-1659871072150
GPR[EPVAP]-1659871073469
GPR[SPVATF]-1659871073469
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871074613
GPR[EPVS]-1659871074613
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(index>=0){
return (TimeSeriesDataItem)this.data.get(index);
}else {
return null;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871074614
GPR[SPVAP]-1659871074614
GPR[EPVAP]-1659871075360
GPR[EPVS]-1659871075360
========
removeValue(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871075363
GPR[SPVAP]-1659871075363
GPR[EPVAP]-1659871076117
GPR[EPVS]-1659871076117
========
removeRow(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871076119
GPR[SPVAP]-1659871076119
GPR[EPVAP]-1659871076872
GPR[EPVS]-1659871076872
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
row=new KeyedObjects();
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871076874
GPR[SPVAP]-1659871076874
GPR[EPVAP]-1659871077620
GPR[EPVS]-1659871077620
========
if(index<0){
setSeriesNeedle(count,new ArrowNeedle(true));
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871077623
GPR[SPVAP]-1659871077623
GPR[EPVAP]-1659871078375
GPR[EPVS]-1659871078375
========
if(index<0){
setSeriesPaint(count,Color.red);
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871078376
GPR[SPVAP]-1659871078376
GPR[EPVAP]-1659871079123
GPR[EPVS]-1659871079123
========
if(index<0){
setSeriesNeedle(count,new ArrowNeedle(true));
setSeriesPaint(count,Color.red);

this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871079125
GPR[SPVAP]-1659871079125
GPR[EPVAP]-1659871079881
GPR[EPVS]-1659871079881
========
case 1 :

if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871079882
GPR[SPVAP]-1659871079882
GPR[EPVAP]-1659871080504
GPR[EPVS]-1659871080504
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires \'index\' >= 0.");
}

========
MM Copying to MM
GPR[SPVS]-1659871080506
GPR[SPVAP]-1659871080506
GPR[EPVAP]-1659871081801
GPR[SPVATF]-1659871081801
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871082948
GPR[EPVS]-1659871082948
========
datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871082950
GPR[SPVAP]-1659871082950
GPR[EPVAP]-1659871083701
GPR[EPVS]-1659871083701
========
datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires \'index\' >= 0.");
}

========
MM Copying to MM
GPR[SPVS]-1659871083703
GPR[SPVAP]-1659871083703
GPR[EPVAP]-1659871084465
GPR[EPVS]-1659871084465
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Negative \'index\'.");
}

========
MM Copying to MM
GPR[SPVS]-1659871084467
GPR[SPVAP]-1659871084467
GPR[EPVAP]-1659871085776
GPR[SPVATF]-1659871085776
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871086911
GPR[EPVS]-1659871086911
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(index>=0){
return getDataItem(index);
}else {
return null;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871086913
GPR[SPVAP]-1659871086913
GPR[EPVAP]-1659871087685
GPR[EPVS]-1659871087685
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(index>=0){
return getValue(index);
}else {
return null;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871087687
GPR[SPVAP]-1659871087687
GPR[EPVAP]-1659871088438
GPR[EPVS]-1659871088438
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Null \'location\' for index 0 not permitted.");
}

========
MM Copying to MM
GPR[SPVS]-1659871088440
GPR[SPVAP]-1659871088440
GPR[EPVAP]-1659871089779
GPR[SPVATF]-1659871089779
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871090895
GPR[EPVS]-1659871090895
========
if(notify){
fireChangeEvent();
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871090897
GPR[SPVAP]-1659871090897
GPR[EPVAP]-1659871091652
GPR[EPVS]-1659871091652
========
if(notify){
fireChangeEvent();
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Null \'location\' for index 0 not permitted.");
}

========
MM Copying to MM
GPR[SPVS]-1659871091654
GPR[SPVAP]-1659871091654
GPR[EPVAP]-1659871092399
GPR[EPVS]-1659871092399
========
if((index<0)||(index>=getSubtitleCount())){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871092401
GPR[SPVAP]-1659871092401
GPR[EPVAP]-1659871093154
GPR[EPVS]-1659871093154
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Index out of range.");
}

========
MM Copying to MM
GPR[SPVS]-1659871093155
GPR[SPVAP]-1659871093155
GPR[EPVAP]-1659871094455
GPR[SPVATF]-1659871094455
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871095629
GPR[EPVS]-1659871095629
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(index==-1){
return DEFAULT_RANGE_DESCRIPTION;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871095632
GPR[SPVAP]-1659871095632
GPR[EPVAP]-1659871096412
GPR[EPVS]-1659871096412
========
if(DEFAULT_RANGE_DESCRIPTION.startsWith("/")){
return name.substring(1);
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871096414
GPR[SPVAP]-1659871096414
GPR[EPVAP]-1659871097157
GPR[EPVS]-1659871097157
========
if(index<0||index>=getItemCount()){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871097159
GPR[SPVAP]-1659871097159
GPR[EPVAP]-1659871098481
GPR[SPVATF]-1659871098481
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871099623
GPR[EPVS]-1659871099623
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IndexOutOfBoundsException("Invalid \'index\': "+index);
}

========
MM Copying to MM
GPR[SPVS]-1659871099625
GPR[SPVAP]-1659871099625
GPR[EPVAP]-1659871100923
GPR[SPVATF]-1659871100923
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871102048
GPR[EPVS]-1659871102048
========
if(index<0||index>=getItemCount()){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IndexOutOfBoundsException("Invalid \'index\': "+index);
}

========
MM Copying to MM
GPR[SPVS]-1659871102049
GPR[SPVAP]-1659871102049
GPR[EPVAP]-1659871103343
GPR[SPVATF]-1659871103343
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871104471
GPR[EPVS]-1659871104471
========
if(index<0){
start=count+1;
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871104473
GPR[SPVAP]-1659871104473
GPR[EPVAP]-1659871105246
GPR[EPVS]-1659871105246
========
if(index<0){
count++;
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871105247
GPR[SPVAP]-1659871105247
GPR[EPVAP]-1659871106545
GPR[SPVATF]-1659871106545
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871107691
GPR[EPVS]-1659871107691
========
if(index<0){
start=count+1;
count++;

this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871107693
GPR[SPVAP]-1659871107693
GPR[EPVAP]-1659871108471
GPR[EPVS]-1659871108471
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
start=count+1;
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871108472
GPR[SPVAP]-1659871108472
GPR[EPVAP]-1659871109251
GPR[EPVS]-1659871109251
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
count++;
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871109252
GPR[SPVAP]-1659871109252
GPR[EPVAP]-1659871110537
GPR[SPVATF]-1659871110537
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871111691
GPR[EPVS]-1659871111691
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
start=count+1;
count++;

StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871111693
GPR[SPVAP]-1659871111693
GPR[EPVAP]-1659871112454
GPR[EPVS]-1659871112454
========
new java.util.ArrayList().add(removeStringDelimiters(b.substring(count,line.length())));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871112456
GPR[SPVAP]-1659871112456
GPR[EPVAP]-1659871113211
GPR[EPVS]-1659871113211
========
if(index<0){
count++;
this.data.add(-index-1,item);
added=true;
}else {
count++;
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871113212
GPR[SPVAP]-1659871113212
GPR[EPVAP]-1659871114549
GPR[SPVATF]-1659871114549
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871115704
GPR[EPVS]-1659871115704
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Index "+count);
}

========
MM Copying to MM
GPR[SPVS]-1659871115706
GPR[SPVAP]-1659871115706
GPR[EPVAP]-1659871117024
GPR[SPVATF]-1659871117024
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871118151
GPR[EPVS]-1659871118151
========
if(index<count){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Index "+count);
}

========
MM Copying to MM
GPR[SPVS]-1659871118153
GPR[SPVAP]-1659871118153
GPR[EPVAP]-1659871119457
GPR[SPVATF]-1659871119457
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871120588
GPR[EPVS]-1659871120588
========
if(index<0||index>3){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871120591
GPR[SPVAP]-1659871120591
GPR[EPVAP]-1659871121913
GPR[SPVATF]-1659871121913
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871123045
GPR[EPVS]-1659871123045
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("The index value ("+index);
}

========
MM Copying to MM
GPR[SPVS]-1659871123046
GPR[SPVAP]-1659871123046
GPR[EPVAP]-1659871124329
GPR[SPVATF]-1659871124329
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871125455
GPR[EPVS]-1659871125455
========
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871125456
GPR[SPVAP]-1659871125456
GPR[EPVAP]-1659871126205
GPR[EPVS]-1659871126205
========
if(index<0||index>3){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("The index value ("+index);
}

========
MM Copying to MM
GPR[SPVS]-1659871126207
GPR[SPVAP]-1659871126207
GPR[EPVAP]-1659871127500
GPR[SPVATF]-1659871127500
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871128632
GPR[EPVS]-1659871128632
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("The \'weight\' must be positive.");
}

========
MM Copying to MM
GPR[SPVS]-1659871128634
GPR[SPVAP]-1659871128634
GPR[EPVAP]-1659871129954
GPR[SPVATF]-1659871129954
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871131131
GPR[EPVS]-1659871131131
========
configureRangeAxes();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871131133
GPR[SPVAP]-1659871131133
GPR[EPVAP]-1659871131896
GPR[EPVS]-1659871131896
========
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("The \'weight\' must be positive.");
}

========
MM Copying to MM
GPR[SPVS]-1659871131897
GPR[SPVAP]-1659871131897
GPR[EPVAP]-1659871133238
GPR[SPVATF]-1659871133238
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871134367
GPR[EPVS]-1659871134367
========
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871134369
GPR[SPVAP]-1659871134369
GPR[EPVAP]-1659871135117
GPR[EPVS]-1659871135117
========
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("The \'weight\' must be positive.");
}

========
MM Copying to MM
GPR[SPVS]-1659871135118
GPR[SPVAP]-1659871135118
GPR[EPVAP]-1659871135860
GPR[EPVS]-1659871135860
========
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("The \'weight\' must be positive.");
}

========
MM Copying to MM
GPR[SPVS]-1659871135861
GPR[SPVAP]-1659871135861
GPR[EPVAP]-1659871136616
GPR[EPVS]-1659871136616
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(count>=0){
return (TickUnit)this.data.get(index);
}else {
index=-(index+1);
return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871136618
GPR[SPVAP]-1659871136618
GPR[EPVAP]-1659871137368
GPR[EPVS]-1659871137368
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
index=-(count+1);
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871137370
GPR[SPVAP]-1659871137370
GPR[EPVAP]-1659871138678
GPR[SPVATF]-1659871138678
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871139822
GPR[EPVS]-1659871139822
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.valueOf("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871139825
GPR[SPVAP]-1659871139825
GPR[EPVAP]-1659871140578
GPR[EPVS]-1659871140578
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871140580
GPR[SPVAP]-1659871140580
GPR[EPVAP]-1659871141873
GPR[SPVATF]-1659871141873
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871143027
GPR[EPVS]-1659871143027
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871143029
GPR[SPVAP]-1659871143029
GPR[EPVAP]-1659871143784
GPR[EPVS]-1659871143784
========
b.setParent(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871143786
GPR[SPVAP]-1659871143786
GPR[EPVAP]-1659871144546
GPR[EPVS]-1659871144546
========
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871144549
GPR[SPVAP]-1659871144549
GPR[EPVAP]-1659871145295
GPR[EPVS]-1659871145295
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871145296
GPR[SPVAP]-1659871145296
GPR[EPVAP]-1659871146083
GPR[EPVS]-1659871146083
========
b.setDomainAxis(null);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871146085
GPR[SPVAP]-1659871146085
GPR[EPVAP]-1659871146844
GPR[EPVS]-1659871146844
========
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871146845
GPR[SPVAP]-1659871146845
GPR[EPVAP]-1659871147595
GPR[EPVS]-1659871147595
========
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871147597
GPR[SPVAP]-1659871147597
GPR[EPVAP]-1659871148370
GPR[EPVS]-1659871148370
========
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871148372
GPR[SPVAP]-1659871148372
GPR[EPVAP]-1659871149114
GPR[EPVS]-1659871149114
========
if(getDomainAxis()!=null){
axis.configure();
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871149115
GPR[SPVAP]-1659871149115
GPR[EPVAP]-1659871149867
GPR[EPVS]-1659871149867
========
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871149868
GPR[SPVAP]-1659871149868
GPR[EPVAP]-1659871150611
GPR[EPVS]-1659871150611
========
b.setRangeAxis(null);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871150612
GPR[SPVAP]-1659871150612
GPR[EPVAP]-1659871151369
GPR[EPVS]-1659871151369
========
if(getRangeAxis()!=null){
axis.configure();
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871151371
GPR[SPVAP]-1659871151371
GPR[EPVAP]-1659871152114
GPR[EPVS]-1659871152114
========
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871152116
GPR[SPVAP]-1659871152116
GPR[EPVAP]-1659871153409
GPR[SPVATF]-1659871153409
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871154538
GPR[EPVS]-1659871154538
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871154540
GPR[SPVAP]-1659871154540
GPR[EPVAP]-1659871155287
GPR[EPVS]-1659871155287
========
b.setParent(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871155289
GPR[SPVAP]-1659871155289
GPR[EPVAP]-1659871156035
GPR[EPVS]-1659871156035
========
b.setWeight(index);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871156036
GPR[SPVAP]-1659871156036
GPR[EPVAP]-1659871156796
GPR[EPVS]-1659871156796
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871156797
GPR[SPVAP]-1659871156797
GPR[EPVAP]-1659871157546
GPR[EPVS]-1659871157546
========
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871157547
GPR[SPVAP]-1659871157547
GPR[EPVAP]-1659871158310
GPR[EPVS]-1659871158311
========
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871158312
GPR[SPVAP]-1659871158312
GPR[EPVAP]-1659871159111
GPR[EPVS]-1659871159111
========
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871159112
GPR[SPVAP]-1659871159112
GPR[EPVAP]-1659871159873
GPR[EPVS]-1659871159873
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871159874
GPR[SPVAP]-1659871159874
GPR[EPVAP]-1659871160627
GPR[EPVS]-1659871160627
========
b.setParent(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871160629
GPR[SPVAP]-1659871160629
GPR[EPVAP]-1659871161381
GPR[EPVS]-1659871161381
========
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871161382
GPR[SPVAP]-1659871161382
GPR[EPVAP]-1659871162141
GPR[EPVS]-1659871162141
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871162142
GPR[SPVAP]-1659871162143
GPR[EPVAP]-1659871162895
GPR[EPVS]-1659871162895
========
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871162896
GPR[SPVAP]-1659871162896
GPR[EPVAP]-1659871163653
GPR[EPVS]-1659871163653
========
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871163654
GPR[SPVAP]-1659871163654
GPR[EPVAP]-1659871164421
GPR[EPVS]-1659871164421
========
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871164423
GPR[SPVAP]-1659871164423
GPR[EPVAP]-1659871165191
GPR[EPVS]-1659871165191
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871165192
GPR[SPVAP]-1659871165192
GPR[EPVAP]-1659871165942
GPR[EPVS]-1659871165942
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871165943
GPR[SPVAP]-1659871165943
GPR[EPVAP]-1659871166699
GPR[EPVS]-1659871166699
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871166701
GPR[SPVAP]-1659871166701
GPR[EPVAP]-1659871167448
GPR[EPVS]-1659871167448
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871167450
GPR[SPVAP]-1659871167450
GPR[EPVAP]-1659871168207
GPR[EPVS]-1659871168207
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871168209
GPR[SPVAP]-1659871168209
GPR[EPVAP]-1659871168958
GPR[EPVS]-1659871168958
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871168959
GPR[SPVAP]-1659871168959
GPR[EPVAP]-1659871169713
GPR[EPVS]-1659871169713
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871169715
GPR[SPVAP]-1659871169715
GPR[EPVAP]-1659871170481
GPR[EPVS]-1659871170481
========
b.setParent(this);
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871170482
GPR[SPVAP]-1659871170482
GPR[EPVAP]-1659871171245
GPR[EPVS]-1659871171245
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871171246
GPR[SPVAP]-1659871171246
GPR[EPVAP]-1659871172006
GPR[EPVS]-1659871172006
========
b.setParent(this);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871172007
GPR[SPVAP]-1659871172007
GPR[EPVAP]-1659871172757
GPR[EPVS]-1659871172757
========
b.setParent(this);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871172758
GPR[SPVAP]-1659871172758
GPR[EPVAP]-1659871173518
GPR[EPVS]-1659871173518
========
b.setParent(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871173520
GPR[SPVAP]-1659871173520
GPR[EPVAP]-1659871174267
GPR[EPVS]-1659871174267
========
b.setParent(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871174268
GPR[SPVAP]-1659871174269
GPR[EPVAP]-1659871175014
GPR[EPVS]-1659871175014
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871175015
GPR[SPVAP]-1659871175015
GPR[EPVAP]-1659871175767
GPR[EPVS]-1659871175767
========
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871175768
GPR[SPVAP]-1659871175768
GPR[EPVAP]-1659871176520
GPR[EPVS]-1659871176520
========
b.setWeight(index);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871176522
GPR[SPVAP]-1659871176522
GPR[EPVAP]-1659871177297
GPR[EPVS]-1659871177297
========
b.setWeight(index);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871177298
GPR[SPVAP]-1659871177298
GPR[EPVAP]-1659871178063
GPR[EPVS]-1659871178063
========
b.setWeight(index);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871178065
GPR[SPVAP]-1659871178065
GPR[EPVAP]-1659871178815
GPR[EPVS]-1659871178815
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871178817
GPR[SPVAP]-1659871178817
GPR[EPVAP]-1659871179562
GPR[EPVS]-1659871179562
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871179563
GPR[SPVAP]-1659871179563
GPR[EPVAP]-1659871180315
GPR[EPVS]-1659871180315
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871180316
GPR[SPVAP]-1659871180316
GPR[EPVAP]-1659871181063
GPR[EPVS]-1659871181063
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871181064
GPR[SPVAP]-1659871181064
GPR[EPVAP]-1659871181814
GPR[EPVS]-1659871181814
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871181815
GPR[SPVAP]-1659871181815
GPR[EPVAP]-1659871182573
GPR[EPVS]-1659871182573
========
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871182575
GPR[SPVAP]-1659871182575
GPR[EPVAP]-1659871183320
GPR[EPVS]-1659871183321
========
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871183322
GPR[SPVAP]-1659871183322
GPR[EPVAP]-1659871184078
GPR[EPVS]-1659871184078
========
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871184079
GPR[SPVAP]-1659871184079
GPR[EPVAP]-1659871184832
GPR[EPVS]-1659871184832
========
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871184834
GPR[SPVAP]-1659871184834
GPR[EPVAP]-1659871185586
GPR[EPVS]-1659871185586
========
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871185588
GPR[SPVAP]-1659871185588
GPR[EPVAP]-1659871186321
GPR[EPVS]-1659871186321
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871186323
GPR[SPVAP]-1659871186323
GPR[EPVAP]-1659871187076
GPR[EPVS]-1659871187076
========
b.setParent(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871187078
GPR[SPVAP]-1659871187078
GPR[EPVAP]-1659871187827
GPR[EPVS]-1659871187827
========
b.setWeight(index);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871187829
GPR[SPVAP]-1659871187829
GPR[EPVAP]-1659871188568
GPR[EPVS]-1659871188568
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871188570
GPR[SPVAP]-1659871188570
GPR[EPVAP]-1659871189346
GPR[EPVS]-1659871189346
========
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871189347
GPR[SPVAP]-1659871189348
GPR[EPVAP]-1659871190093
GPR[EPVS]-1659871190093
========
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871190094
GPR[SPVAP]-1659871190094
GPR[EPVAP]-1659871190850
GPR[EPVS]-1659871190850
========
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871190851
GPR[SPVAP]-1659871190851
GPR[EPVAP]-1659871191595
GPR[EPVS]-1659871191595
========
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871191597
GPR[SPVAP]-1659871191597
GPR[EPVAP]-1659871192353
GPR[EPVS]-1659871192353
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871192354
GPR[SPVAP]-1659871192354
GPR[EPVAP]-1659871193104
GPR[EPVS]-1659871193104
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871193106
GPR[SPVAP]-1659871193106
GPR[EPVAP]-1659871193854
GPR[EPVS]-1659871193854
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871193855
GPR[SPVAP]-1659871193855
GPR[EPVAP]-1659871195281
GPR[EPVS]-1659871195281
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871195285
GPR[SPVAP]-1659871195285
GPR[EPVAP]-1659871196113
GPR[EPVS]-1659871196113
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871196115
GPR[SPVAP]-1659871196115
GPR[EPVAP]-1659871196922
GPR[EPVS]-1659871196922
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871196923
GPR[SPVAP]-1659871196923
GPR[EPVAP]-1659871197673
GPR[EPVS]-1659871197673
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871197674
GPR[SPVAP]-1659871197674
GPR[EPVAP]-1659871198510
GPR[EPVS]-1659871198510
========
b.setParent(this);
b.setWeight(index);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871198512
GPR[SPVAP]-1659871198512
GPR[EPVAP]-1659871199321
GPR[EPVS]-1659871199321
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871199322
GPR[SPVAP]-1659871199322
GPR[EPVAP]-1659871200083
GPR[EPVS]-1659871200083
========
b.setParent(this);
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871200084
GPR[SPVAP]-1659871200084
GPR[EPVAP]-1659871200827
GPR[EPVS]-1659871200827
========
b.setParent(this);
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871200829
GPR[SPVAP]-1659871200829
GPR[EPVAP]-1659871201586
GPR[EPVS]-1659871201586
========
b.setParent(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871201587
GPR[SPVAP]-1659871201587
GPR[EPVAP]-1659871202336
GPR[EPVS]-1659871202336
========
b.setParent(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871202337
GPR[SPVAP]-1659871202337
GPR[EPVAP]-1659871203121
GPR[EPVS]-1659871203121
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871203123
GPR[SPVAP]-1659871203123
GPR[EPVAP]-1659871203879
GPR[EPVS]-1659871203879
========
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871203880
GPR[SPVAP]-1659871203880
GPR[EPVAP]-1659871204639
GPR[EPVS]-1659871204639
========
b.setWeight(index);
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871204641
GPR[SPVAP]-1659871204641
GPR[EPVAP]-1659871205394
GPR[EPVS]-1659871205394
========
b.setWeight(index);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871205395
GPR[SPVAP]-1659871205395
GPR[EPVAP]-1659871206151
GPR[EPVS]-1659871206151
========
b.setWeight(index);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871206153
GPR[SPVAP]-1659871206153
GPR[EPVAP]-1659871206917
GPR[EPVS]-1659871206917
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871206918
GPR[SPVAP]-1659871206918
GPR[EPVAP]-1659871207676
GPR[EPVS]-1659871207676
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871207678
GPR[SPVAP]-1659871207678
GPR[EPVAP]-1659871208432
GPR[EPVS]-1659871208432
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871208434
GPR[SPVAP]-1659871208434
GPR[EPVAP]-1659871209185
GPR[EPVS]-1659871209185
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871209186
GPR[SPVAP]-1659871209186
GPR[EPVAP]-1659871209932
GPR[EPVS]-1659871209932
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871209940
GPR[SPVAP]-1659871209940
GPR[EPVAP]-1659871210687
GPR[EPVS]-1659871210687
========
b.setOrientation(getOrientation());
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871210688
GPR[SPVAP]-1659871210688
GPR[EPVAP]-1659871211516
GPR[EPVS]-1659871211516
========
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871211517
GPR[SPVAP]-1659871211517
GPR[EPVAP]-1659871212271
GPR[EPVS]-1659871212271
========
b.addChangeListener(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871212272
GPR[SPVAP]-1659871212272
GPR[EPVAP]-1659871213035
GPR[EPVS]-1659871213035
========
b.addChangeListener(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871213036
GPR[SPVAP]-1659871213036
GPR[EPVAP]-1659871213785
GPR[EPVS]-1659871213785
========
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871213787
GPR[SPVAP]-1659871213787
GPR[EPVAP]-1659871214567
GPR[EPVS]-1659871214567
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871214568
GPR[SPVAP]-1659871214568
GPR[EPVAP]-1659871215334
GPR[EPVS]-1659871215334
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871215336
GPR[SPVAP]-1659871215336
GPR[EPVAP]-1659871216096
GPR[EPVS]-1659871216096
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871216098
GPR[SPVAP]-1659871216098
GPR[EPVAP]-1659871216850
GPR[EPVS]-1659871216850
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871216851
GPR[SPVAP]-1659871216851
GPR[EPVAP]-1659871217626
GPR[EPVS]-1659871217626
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871217627
GPR[SPVAP]-1659871217627
GPR[EPVAP]-1659871218382
GPR[EPVS]-1659871218382
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871218384
GPR[SPVAP]-1659871218384
GPR[EPVAP]-1659871219131
GPR[EPVS]-1659871219131
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871219132
GPR[SPVAP]-1659871219132
GPR[EPVAP]-1659871219885
GPR[EPVS]-1659871219885
========
b.setParent(this);
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871219887
GPR[SPVAP]-1659871219887
GPR[EPVAP]-1659871220632
GPR[EPVS]-1659871220632
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871220633
GPR[SPVAP]-1659871220633
GPR[EPVAP]-1659871221401
GPR[EPVS]-1659871221401
========
b.setParent(this);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871221402
GPR[SPVAP]-1659871221402
GPR[EPVAP]-1659871222159
GPR[EPVS]-1659871222159
========
b.setParent(this);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871222160
GPR[SPVAP]-1659871222160
GPR[EPVAP]-1659871222957
GPR[EPVS]-1659871222957
========
b.setParent(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871222958
GPR[SPVAP]-1659871222958
GPR[EPVAP]-1659871223724
GPR[EPVS]-1659871223724
========
b.setParent(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871223726
GPR[SPVAP]-1659871223726
GPR[EPVAP]-1659871224479
GPR[EPVS]-1659871224479
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871224480
GPR[SPVAP]-1659871224480
GPR[EPVAP]-1659871225281
GPR[EPVS]-1659871225281
========
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871225282
GPR[SPVAP]-1659871225282
GPR[EPVAP]-1659871226026
GPR[EPVS]-1659871226026
========
b.setWeight(index);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871226027
GPR[SPVAP]-1659871226027
GPR[EPVAP]-1659871226795
GPR[EPVS]-1659871226795
========
b.setWeight(index);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871226796
GPR[SPVAP]-1659871226796
GPR[EPVAP]-1659871227549
GPR[EPVS]-1659871227549
========
b.setWeight(index);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871227551
GPR[SPVAP]-1659871227551
GPR[EPVAP]-1659871228315
GPR[EPVS]-1659871228315
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871228317
GPR[SPVAP]-1659871228317
GPR[EPVAP]-1659871229111
GPR[EPVS]-1659871229111
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871229112
GPR[SPVAP]-1659871229112
GPR[EPVAP]-1659871229879
GPR[EPVS]-1659871229879
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871229881
GPR[SPVAP]-1659871229881
GPR[EPVAP]-1659871230636
GPR[EPVS]-1659871230636
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871230637
GPR[SPVAP]-1659871230637
GPR[EPVAP]-1659871231411
GPR[EPVS]-1659871231411
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871231412
GPR[SPVAP]-1659871231412
GPR[EPVAP]-1659871232191
GPR[EPVS]-1659871232191
========
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871232193
GPR[SPVAP]-1659871232193
GPR[EPVAP]-1659871232961
GPR[EPVS]-1659871232961
========
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871232962
GPR[SPVAP]-1659871232962
GPR[EPVAP]-1659871233711
GPR[EPVS]-1659871233711
========
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871233712
GPR[SPVAP]-1659871233712
GPR[EPVAP]-1659871234475
GPR[EPVS]-1659871234475
========
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871234477
GPR[SPVAP]-1659871234477
GPR[EPVAP]-1659871235228
GPR[EPVS]-1659871235228
========
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871235230
GPR[SPVAP]-1659871235230
GPR[EPVAP]-1659871235986
GPR[EPVS]-1659871235986
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871235988
GPR[SPVAP]-1659871235988
GPR[EPVAP]-1659871236745
GPR[EPVS]-1659871236745
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871236747
GPR[SPVAP]-1659871236747
GPR[EPVAP]-1659871237519
GPR[EPVS]-1659871237519
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871237520
GPR[SPVAP]-1659871237520
GPR[EPVAP]-1659871238277
GPR[EPVS]-1659871238277
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871238278
GPR[SPVAP]-1659871238278
GPR[EPVAP]-1659871239030
GPR[EPVS]-1659871239030
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871239032
GPR[SPVAP]-1659871239032
GPR[EPVAP]-1659871239803
GPR[EPVS]-1659871239803
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871239804
GPR[SPVAP]-1659871239805
GPR[EPVAP]-1659871240560
GPR[EPVS]-1659871240560
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871240562
GPR[SPVAP]-1659871240562
GPR[EPVAP]-1659871241364
GPR[EPVS]-1659871241364
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871241366
GPR[SPVAP]-1659871241366
GPR[EPVAP]-1659871242123
GPR[EPVS]-1659871242123
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871242124
GPR[SPVAP]-1659871242124
GPR[EPVAP]-1659871242880
GPR[EPVS]-1659871242880
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871242882
GPR[SPVAP]-1659871242882
GPR[EPVAP]-1659871243637
GPR[EPVS]-1659871243637
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871243638
GPR[SPVAP]-1659871243638
GPR[EPVAP]-1659871244415
GPR[EPVS]-1659871244415
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871244417
GPR[SPVAP]-1659871244417
GPR[EPVAP]-1659871245170
GPR[EPVS]-1659871245170
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871245171
GPR[SPVAP]-1659871245171
GPR[EPVAP]-1659871245924
GPR[EPVS]-1659871245924
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871245926
GPR[SPVAP]-1659871245926
GPR[EPVAP]-1659871246691
GPR[EPVS]-1659871246691
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871246692
GPR[SPVAP]-1659871246692
GPR[EPVAP]-1659871247442
GPR[EPVS]-1659871247442
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871247443
GPR[SPVAP]-1659871247443
GPR[EPVAP]-1659871248231
GPR[EPVS]-1659871248231
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871248232
GPR[SPVAP]-1659871248232
GPR[EPVAP]-1659871249011
GPR[EPVS]-1659871249011
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871249012
GPR[SPVAP]-1659871249012
GPR[EPVAP]-1659871249774
GPR[EPVS]-1659871249774
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871249776
GPR[SPVAP]-1659871249776
GPR[EPVAP]-1659871250532
GPR[EPVS]-1659871250532
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871250534
GPR[SPVAP]-1659871250534
GPR[EPVAP]-1659871251285
GPR[EPVS]-1659871251285
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871251286
GPR[SPVAP]-1659871251286
GPR[EPVAP]-1659871252066
GPR[EPVS]-1659871252066
========
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871252067
GPR[SPVAP]-1659871252067
GPR[EPVAP]-1659871252811
GPR[EPVS]-1659871252811
========
b.setParent(this);
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871252812
GPR[SPVAP]-1659871252812
GPR[EPVAP]-1659871253567
GPR[EPVS]-1659871253567
========
b.setParent(this);
b.setWeight(index);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871253568
GPR[SPVAP]-1659871253568
GPR[EPVAP]-1659871254333
GPR[EPVS]-1659871254333
========
b.setParent(this);
b.setWeight(index);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871254335
GPR[SPVAP]-1659871254335
GPR[EPVAP]-1659871255083
GPR[EPVS]-1659871255083
========
b.setParent(this);
b.setWeight(index);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871255085
GPR[SPVAP]-1659871255085
GPR[EPVAP]-1659871255843
GPR[EPVS]-1659871255843
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871255845
GPR[SPVAP]-1659871255845
GPR[EPVAP]-1659871256602
GPR[EPVS]-1659871256602
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871256604
GPR[SPVAP]-1659871256604
GPR[EPVAP]-1659871257352
GPR[EPVS]-1659871257352
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871257354
GPR[SPVAP]-1659871257354
GPR[EPVAP]-1659871258133
GPR[EPVS]-1659871258133
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871258134
GPR[SPVAP]-1659871258134
GPR[EPVAP]-1659871258896
GPR[EPVS]-1659871258896
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871258898
GPR[SPVAP]-1659871258898
GPR[EPVAP]-1659871259671
GPR[EPVS]-1659871259671
========
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871259672
GPR[SPVAP]-1659871259672
GPR[EPVAP]-1659871260461
GPR[EPVS]-1659871260461
========
b.setParent(this);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871260463
GPR[SPVAP]-1659871260463
GPR[EPVAP]-1659871261214
GPR[EPVS]-1659871261214
========
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871261216
GPR[SPVAP]-1659871261216
GPR[EPVAP]-1659871261967
GPR[EPVS]-1659871261967
========
b.setParent(this);
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871261968
GPR[SPVAP]-1659871261968
GPR[EPVAP]-1659871262730
GPR[EPVS]-1659871262730
========
b.setParent(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871262731
GPR[SPVAP]-1659871262731
GPR[EPVAP]-1659871263478
GPR[EPVS]-1659871263478
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871263479
GPR[SPVAP]-1659871263479
GPR[EPVAP]-1659871264246
GPR[EPVS]-1659871264246
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871264247
GPR[SPVAP]-1659871264247
GPR[EPVAP]-1659871264996
GPR[EPVS]-1659871264996
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871264998
GPR[SPVAP]-1659871264998
GPR[EPVAP]-1659871265760
GPR[EPVS]-1659871265760
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871265761
GPR[SPVAP]-1659871265761
GPR[EPVAP]-1659871266523
GPR[EPVS]-1659871266523
========
b.setWeight(index);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871266525
GPR[SPVAP]-1659871266525
GPR[EPVAP]-1659871267293
GPR[EPVS]-1659871267293
========
b.setWeight(index);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871267295
GPR[SPVAP]-1659871267295
GPR[EPVAP]-1659871268043
GPR[EPVS]-1659871268043
========
b.setWeight(index);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871268044
GPR[SPVAP]-1659871268044
GPR[EPVAP]-1659871268791
GPR[EPVS]-1659871268791
========
b.setWeight(index);
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871268792
GPR[SPVAP]-1659871268792
GPR[EPVAP]-1659871269550
GPR[EPVS]-1659871269550
========
b.setWeight(index);
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871269552
GPR[SPVAP]-1659871269552
GPR[EPVAP]-1659871270305
GPR[EPVS]-1659871270305
========
b.setWeight(index);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871270306
GPR[SPVAP]-1659871270306
GPR[EPVAP]-1659871271075
GPR[EPVS]-1659871271075
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871271077
GPR[SPVAP]-1659871271077
GPR[EPVAP]-1659871271824
GPR[EPVS]-1659871271824
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871271833
GPR[SPVAP]-1659871271833
GPR[EPVAP]-1659871272607
GPR[EPVS]-1659871272607
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871272608
GPR[SPVAP]-1659871272608
GPR[EPVAP]-1659871273362
GPR[EPVS]-1659871273362
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871273363
GPR[SPVAP]-1659871273363
GPR[EPVAP]-1659871274142
GPR[EPVS]-1659871274142
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871274144
GPR[SPVAP]-1659871274144
GPR[EPVAP]-1659871274961
GPR[EPVS]-1659871274961
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871274962
GPR[SPVAP]-1659871274962
GPR[EPVAP]-1659871275711
GPR[EPVS]-1659871275711
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871275713
GPR[SPVAP]-1659871275713
GPR[EPVAP]-1659871276489
GPR[EPVS]-1659871276489
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871276491
GPR[SPVAP]-1659871276491
GPR[EPVAP]-1659871277233
GPR[EPVS]-1659871277233
========
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871277234
GPR[SPVAP]-1659871277234
GPR[EPVAP]-1659871278007
GPR[EPVS]-1659871278007
========
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871278008
GPR[SPVAP]-1659871278008
GPR[EPVAP]-1659871278758
GPR[EPVS]-1659871278758
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871278759
GPR[SPVAP]-1659871278759
GPR[EPVAP]-1659871279524
GPR[EPVS]-1659871279524
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871279526
GPR[SPVAP]-1659871279526
GPR[EPVAP]-1659871280272
GPR[EPVS]-1659871280272
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871280274
GPR[SPVAP]-1659871280274
GPR[EPVAP]-1659871281042
GPR[EPVS]-1659871281042
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871281043
GPR[SPVAP]-1659871281043
GPR[EPVAP]-1659871281806
GPR[EPVS]-1659871281806
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871281807
GPR[SPVAP]-1659871281807
GPR[EPVAP]-1659871282576
GPR[EPVS]-1659871282576
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871282578
GPR[SPVAP]-1659871282578
GPR[EPVAP]-1659871283334
GPR[EPVS]-1659871283334
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871283336
GPR[SPVAP]-1659871283336
GPR[EPVAP]-1659871284083
GPR[EPVS]-1659871284083
========
b.setParent(this);
b.setWeight(index);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871284084
GPR[SPVAP]-1659871284084
GPR[EPVAP]-1659871284842
GPR[EPVS]-1659871284842
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871284844
GPR[SPVAP]-1659871284844
GPR[EPVAP]-1659871285587
GPR[EPVS]-1659871285587
========
b.setParent(this);
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871285588
GPR[SPVAP]-1659871285588
GPR[EPVAP]-1659871286341
GPR[EPVS]-1659871286341
========
b.setParent(this);
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871286342
GPR[SPVAP]-1659871286342
GPR[EPVAP]-1659871287116
GPR[EPVS]-1659871287116
========
b.setParent(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871287118
GPR[SPVAP]-1659871287118
GPR[EPVAP]-1659871287875
GPR[EPVS]-1659871287875
========
b.setParent(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871287876
GPR[SPVAP]-1659871287876
GPR[EPVAP]-1659871288627
GPR[EPVS]-1659871288627
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871288628
GPR[SPVAP]-1659871288628
GPR[EPVAP]-1659871289374
GPR[EPVS]-1659871289374
========
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871289375
GPR[SPVAP]-1659871289375
GPR[EPVAP]-1659871290167
GPR[EPVS]-1659871290167
========
b.setWeight(index);
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871290168
GPR[SPVAP]-1659871290168
GPR[EPVAP]-1659871290961
GPR[EPVS]-1659871290961
========
b.setWeight(index);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871290962
GPR[SPVAP]-1659871290962
GPR[EPVAP]-1659871291743
GPR[EPVS]-1659871291743
========
b.setWeight(index);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871291745
GPR[SPVAP]-1659871291745
GPR[EPVAP]-1659871292523
GPR[EPVS]-1659871292523
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871292524
GPR[SPVAP]-1659871292524
GPR[EPVAP]-1659871293270
GPR[EPVS]-1659871293270
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871293271
GPR[SPVAP]-1659871293271
GPR[EPVAP]-1659871294057
GPR[EPVS]-1659871294057
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871294058
GPR[SPVAP]-1659871294058
GPR[EPVAP]-1659871294813
GPR[EPVS]-1659871294813
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871294814
GPR[SPVAP]-1659871294814
GPR[EPVAP]-1659871295562
GPR[EPVS]-1659871295562
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871295563
GPR[SPVAP]-1659871295563
GPR[EPVAP]-1659871296341
GPR[EPVS]-1659871296341
========
b.setOrientation(getOrientation());
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871296343
GPR[SPVAP]-1659871296343
GPR[EPVAP]-1659871297117
GPR[EPVS]-1659871297117
========
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871297118
GPR[SPVAP]-1659871297118
GPR[EPVAP]-1659871297886
GPR[EPVS]-1659871297886
========
b.addChangeListener(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871297888
GPR[SPVAP]-1659871297888
GPR[EPVAP]-1659871298663
GPR[EPVS]-1659871298663
========
b.addChangeListener(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871298664
GPR[SPVAP]-1659871298664
GPR[EPVAP]-1659871299451
GPR[EPVS]-1659871299451
========
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871299452
GPR[SPVAP]-1659871299452
GPR[EPVAP]-1659871300209
GPR[EPVS]-1659871300209
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871300210
GPR[SPVAP]-1659871300210
GPR[EPVAP]-1659871300965
GPR[EPVS]-1659871300965
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871300966
GPR[SPVAP]-1659871300966
GPR[EPVAP]-1659871301728
GPR[EPVS]-1659871301728
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871301730
GPR[SPVAP]-1659871301730
GPR[EPVAP]-1659871302505
GPR[EPVS]-1659871302505
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871302506
GPR[SPVAP]-1659871302506
GPR[EPVAP]-1659871303282
GPR[EPVS]-1659871303282
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871303284
GPR[SPVAP]-1659871303284
GPR[EPVAP]-1659871304059
GPR[EPVS]-1659871304059
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871304061
GPR[SPVAP]-1659871304061
GPR[EPVAP]-1659871304804
GPR[EPVS]-1659871304804
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871304805
GPR[SPVAP]-1659871304805
GPR[EPVAP]-1659871305576
GPR[EPVS]-1659871305576
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871305577
GPR[SPVAP]-1659871305577
GPR[EPVAP]-1659871306330
GPR[EPVS]-1659871306330
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871306339
GPR[SPVAP]-1659871306339
GPR[EPVAP]-1659871307135
GPR[EPVS]-1659871307135
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871307136
GPR[SPVAP]-1659871307136
GPR[EPVAP]-1659871307891
GPR[EPVS]-1659871307891
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871307892
GPR[SPVAP]-1659871307892
GPR[EPVAP]-1659871308643
GPR[EPVS]-1659871308643
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871308644
GPR[SPVAP]-1659871308644
GPR[EPVAP]-1659871309406
GPR[EPVS]-1659871309406
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871309407
GPR[SPVAP]-1659871309407
GPR[EPVAP]-1659871310157
GPR[EPVS]-1659871310157
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871310159
GPR[SPVAP]-1659871310159
GPR[EPVAP]-1659871310907
GPR[EPVS]-1659871310907
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871310908
GPR[SPVAP]-1659871310908
GPR[EPVAP]-1659871311676
GPR[EPVS]-1659871311676
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871311678
GPR[SPVAP]-1659871311678
GPR[EPVAP]-1659871312430
GPR[EPVS]-1659871312430
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871312431
GPR[SPVAP]-1659871312431
GPR[EPVAP]-1659871313189
GPR[EPVS]-1659871313189
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871313191
GPR[SPVAP]-1659871313191
GPR[EPVAP]-1659871313959
GPR[EPVS]-1659871313959
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871313961
GPR[SPVAP]-1659871313961
GPR[EPVAP]-1659871314747
GPR[EPVS]-1659871314747
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871314749
GPR[SPVAP]-1659871314749
GPR[EPVAP]-1659871315537
GPR[EPVS]-1659871315537
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871315538
GPR[SPVAP]-1659871315538
GPR[EPVAP]-1659871316317
GPR[EPVS]-1659871316317
========
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871316318
GPR[SPVAP]-1659871316318
GPR[EPVAP]-1659871317089
GPR[EPVS]-1659871317089
========
b.setParent(this);
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871317090
GPR[SPVAP]-1659871317090
GPR[EPVAP]-1659871317869
GPR[EPVS]-1659871317869
========
b.setParent(this);
b.setWeight(index);
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871317870
GPR[SPVAP]-1659871317870
GPR[EPVAP]-1659871318625
GPR[EPVS]-1659871318625
========
b.setParent(this);
b.setWeight(index);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871318627
GPR[SPVAP]-1659871318627
GPR[EPVAP]-1659871319391
GPR[EPVS]-1659871319391
========
b.setParent(this);
b.setWeight(index);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871319393
GPR[SPVAP]-1659871319393
GPR[EPVAP]-1659871320142
GPR[EPVS]-1659871320142
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871320143
GPR[SPVAP]-1659871320143
GPR[EPVAP]-1659871320923
GPR[EPVS]-1659871320923
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871320925
GPR[SPVAP]-1659871320925
GPR[EPVAP]-1659871321674
GPR[EPVS]-1659871321674
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871321676
GPR[SPVAP]-1659871321676
GPR[EPVAP]-1659871322427
GPR[EPVS]-1659871322427
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871322428
GPR[SPVAP]-1659871322428
GPR[EPVAP]-1659871323175
GPR[EPVS]-1659871323175
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871323177
GPR[SPVAP]-1659871323177
GPR[EPVAP]-1659871323970
GPR[EPVS]-1659871323970
========
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871323972
GPR[SPVAP]-1659871323972
GPR[EPVAP]-1659871324756
GPR[EPVS]-1659871324756
========
b.setParent(this);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871324758
GPR[SPVAP]-1659871324758
GPR[EPVAP]-1659871325507
GPR[EPVS]-1659871325507
========
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871325509
GPR[SPVAP]-1659871325509
GPR[EPVAP]-1659871326262
GPR[EPVS]-1659871326262
========
b.setParent(this);
b.addChangeListener(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871326263
GPR[SPVAP]-1659871326263
GPR[EPVAP]-1659871327028
GPR[EPVS]-1659871327028
========
b.setParent(this);
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871327029
GPR[SPVAP]-1659871327029
GPR[EPVAP]-1659871327780
GPR[EPVS]-1659871327780
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871327782
GPR[SPVAP]-1659871327782
GPR[EPVAP]-1659871328580
GPR[EPVS]-1659871328580
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871328581
GPR[SPVAP]-1659871328581
GPR[EPVAP]-1659871329374
GPR[EPVS]-1659871329374
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871329376
GPR[SPVAP]-1659871329376
GPR[EPVAP]-1659871330132
GPR[EPVS]-1659871330132
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871330134
GPR[SPVAP]-1659871330134
GPR[EPVAP]-1659871330898
GPR[EPVS]-1659871330898
========
b.setWeight(index);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871330900
GPR[SPVAP]-1659871330900
GPR[EPVAP]-1659871331643
GPR[EPVS]-1659871331643
========
b.setWeight(index);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871331645
GPR[SPVAP]-1659871331645
GPR[EPVAP]-1659871332428
GPR[EPVS]-1659871332428
========
b.setWeight(index);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871332430
GPR[SPVAP]-1659871332430
GPR[EPVAP]-1659871333179
GPR[EPVS]-1659871333179
========
b.setWeight(index);
b.addChangeListener(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871333181
GPR[SPVAP]-1659871333181
GPR[EPVAP]-1659871333941
GPR[EPVS]-1659871333941
========
b.setWeight(index);
b.addChangeListener(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871333942
GPR[SPVAP]-1659871333942
GPR[EPVAP]-1659871334733
GPR[EPVS]-1659871334733
========
b.setWeight(index);
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871334735
GPR[SPVAP]-1659871334735
GPR[EPVAP]-1659871335507
GPR[EPVS]-1659871335507
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871335508
GPR[SPVAP]-1659871335508
GPR[EPVAP]-1659871336247
GPR[EPVS]-1659871336247
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871336249
GPR[SPVAP]-1659871336249
GPR[EPVAP]-1659871337038
GPR[EPVS]-1659871337038
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871337039
GPR[SPVAP]-1659871337039
GPR[EPVAP]-1659871337810
GPR[EPVS]-1659871337810
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871337812
GPR[SPVAP]-1659871337812
GPR[EPVAP]-1659871338565
GPR[EPVS]-1659871338565
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871338566
GPR[SPVAP]-1659871338566
GPR[EPVAP]-1659871339353
GPR[EPVS]-1659871339353
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871339354
GPR[SPVAP]-1659871339354
GPR[EPVAP]-1659871340105
GPR[EPVS]-1659871340105
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871340106
GPR[SPVAP]-1659871340106
GPR[EPVAP]-1659871340859
GPR[EPVS]-1659871340859
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871340860
GPR[SPVAP]-1659871340860
GPR[EPVAP]-1659871341635
GPR[EPVS]-1659871341635
========
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871341636
GPR[SPVAP]-1659871341636
GPR[EPVAP]-1659871342386
GPR[EPVS]-1659871342386
========
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871342388
GPR[SPVAP]-1659871342388
GPR[EPVAP]-1659871343135
GPR[EPVS]-1659871343135
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871343137
GPR[SPVAP]-1659871343137
GPR[EPVAP]-1659871343889
GPR[EPVS]-1659871343889
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871343890
GPR[SPVAP]-1659871343890
GPR[EPVAP]-1659871344658
GPR[EPVS]-1659871344658
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871344659
GPR[SPVAP]-1659871344659
GPR[EPVAP]-1659871345411
GPR[EPVS]-1659871345411
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871345412
GPR[SPVAP]-1659871345412
GPR[EPVAP]-1659871346182
GPR[EPVS]-1659871346182
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871346183
GPR[SPVAP]-1659871346183
GPR[EPVAP]-1659871346937
GPR[EPVS]-1659871346937
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871346938
GPR[SPVAP]-1659871346938
GPR[EPVAP]-1659871347686
GPR[EPVS]-1659871347686
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871347687
GPR[SPVAP]-1659871347687
GPR[EPVAP]-1659871348431
GPR[EPVS]-1659871348431
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871348433
GPR[SPVAP]-1659871348433
GPR[EPVAP]-1659871349197
GPR[EPVS]-1659871349197
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871349199
GPR[SPVAP]-1659871349199
GPR[EPVAP]-1659871349951
GPR[EPVS]-1659871349951
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871349953
GPR[SPVAP]-1659871349953
GPR[EPVAP]-1659871350698
GPR[EPVS]-1659871350698
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871350699
GPR[SPVAP]-1659871350699
GPR[EPVAP]-1659871351459
GPR[EPVS]-1659871351459
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871351461
GPR[SPVAP]-1659871351461
GPR[EPVAP]-1659871352235
GPR[EPVS]-1659871352235
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871352237
GPR[SPVAP]-1659871352237
GPR[EPVAP]-1659871352996
GPR[EPVS]-1659871352996
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871352998
GPR[SPVAP]-1659871352998
GPR[EPVAP]-1659871353862
GPR[EPVS]-1659871353862
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871353866
GPR[SPVAP]-1659871353866
GPR[EPVAP]-1659871355028
GPR[EPVS]-1659871355028
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871355030
GPR[SPVAP]-1659871355030
GPR[EPVAP]-1659871355840
GPR[EPVS]-1659871355840
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871355842
GPR[SPVAP]-1659871355842
GPR[EPVAP]-1659871356655
GPR[EPVS]-1659871356655
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871356657
GPR[SPVAP]-1659871356657
GPR[EPVAP]-1659871357495
GPR[EPVS]-1659871357495
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871357500
GPR[SPVAP]-1659871357500
GPR[EPVAP]-1659871358290
GPR[EPVS]-1659871358290
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871358292
GPR[SPVAP]-1659871358292
GPR[EPVAP]-1659871359044
GPR[EPVS]-1659871359044
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871359045
GPR[SPVAP]-1659871359045
GPR[EPVAP]-1659871359794
GPR[EPVS]-1659871359794
========
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871359795
GPR[SPVAP]-1659871359795
GPR[EPVAP]-1659871360551
GPR[EPVS]-1659871360551
========
b.setParent(this);
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871360553
GPR[SPVAP]-1659871360553
GPR[EPVAP]-1659871361345
GPR[EPVS]-1659871361345
========
b.setParent(this);
b.setWeight(index);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871361347
GPR[SPVAP]-1659871361347
GPR[EPVAP]-1659871362093
GPR[EPVS]-1659871362093
========
b.setParent(this);
b.setWeight(index);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871362094
GPR[SPVAP]-1659871362094
GPR[EPVAP]-1659871362868
GPR[EPVS]-1659871362868
========
b.setParent(this);
b.setWeight(index);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871362870
GPR[SPVAP]-1659871362870
GPR[EPVAP]-1659871363663
GPR[EPVS]-1659871363663
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871363664
GPR[SPVAP]-1659871363664
GPR[EPVAP]-1659871364409
GPR[EPVS]-1659871364409
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871364410
GPR[SPVAP]-1659871364410
GPR[EPVAP]-1659871365171
GPR[EPVS]-1659871365171
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871365175
GPR[SPVAP]-1659871365175
GPR[EPVAP]-1659871365939
GPR[EPVS]-1659871365939
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871365940
GPR[SPVAP]-1659871365940
GPR[EPVAP]-1659871366705
GPR[EPVS]-1659871366705
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871366707
GPR[SPVAP]-1659871366707
GPR[EPVAP]-1659871367469
GPR[EPVS]-1659871367469
========
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871367471
GPR[SPVAP]-1659871367471
GPR[EPVAP]-1659871368212
GPR[EPVS]-1659871368212
========
b.setParent(this);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871368213
GPR[SPVAP]-1659871368213
GPR[EPVAP]-1659871368964
GPR[EPVS]-1659871368964
========
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871368966
GPR[SPVAP]-1659871368966
GPR[EPVAP]-1659871369733
GPR[EPVS]-1659871369733
========
b.setParent(this);
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871369735
GPR[SPVAP]-1659871369735
GPR[EPVAP]-1659871370493
GPR[EPVS]-1659871370493
========
b.setParent(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871370495
GPR[SPVAP]-1659871370495
GPR[EPVAP]-1659871371244
GPR[EPVS]-1659871371244
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871371245
GPR[SPVAP]-1659871371245
GPR[EPVAP]-1659871372008
GPR[EPVS]-1659871372008
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871372010
GPR[SPVAP]-1659871372010
GPR[EPVAP]-1659871372777
GPR[EPVS]-1659871372777
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871372778
GPR[SPVAP]-1659871372778
GPR[EPVAP]-1659871373554
GPR[EPVS]-1659871373554
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871373555
GPR[SPVAP]-1659871373555
GPR[EPVAP]-1659871374297
GPR[EPVS]-1659871374297
========
b.setWeight(index);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871374299
GPR[SPVAP]-1659871374299
GPR[EPVAP]-1659871375047
GPR[EPVS]-1659871375047
========
b.setWeight(index);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871375048
GPR[SPVAP]-1659871375048
GPR[EPVAP]-1659871375797
GPR[EPVS]-1659871375797
========
b.setWeight(index);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871375798
GPR[SPVAP]-1659871375798
GPR[EPVAP]-1659871376572
GPR[EPVS]-1659871376572
========
b.setWeight(index);
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871376574
GPR[SPVAP]-1659871376574
GPR[EPVAP]-1659871377322
GPR[EPVS]-1659871377322
========
b.setWeight(index);
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871377323
GPR[SPVAP]-1659871377323
GPR[EPVAP]-1659871378087
GPR[EPVS]-1659871378087
========
b.setWeight(index);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871378088
GPR[SPVAP]-1659871378088
GPR[EPVAP]-1659871378843
GPR[EPVS]-1659871378843
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871378844
GPR[SPVAP]-1659871378844
GPR[EPVAP]-1659871379640
GPR[EPVS]-1659871379640
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871379641
GPR[SPVAP]-1659871379641
GPR[EPVAP]-1659871380418
GPR[EPVS]-1659871380418
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871380420
GPR[SPVAP]-1659871380420
GPR[EPVAP]-1659871381179
GPR[EPVS]-1659871381179
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871381180
GPR[SPVAP]-1659871381180
GPR[EPVAP]-1659871381966
GPR[EPVS]-1659871381966
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871381968
GPR[SPVAP]-1659871381968
GPR[EPVAP]-1659871382719
GPR[EPVS]-1659871382719
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871382720
GPR[SPVAP]-1659871382720
GPR[EPVAP]-1659871383493
GPR[EPVS]-1659871383493
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871383494
GPR[SPVAP]-1659871383494
GPR[EPVAP]-1659871384246
GPR[EPVS]-1659871384246
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871384248
GPR[SPVAP]-1659871384248
GPR[EPVAP]-1659871385002
GPR[EPVS]-1659871385002
========
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871385003
GPR[SPVAP]-1659871385003
GPR[EPVAP]-1659871385759
GPR[EPVS]-1659871385759
========
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871385760
GPR[SPVAP]-1659871385760
GPR[EPVAP]-1659871386522
GPR[EPVS]-1659871386522
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871386524
GPR[SPVAP]-1659871386524
GPR[EPVAP]-1659871387293
GPR[EPVS]-1659871387293
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871387294
GPR[SPVAP]-1659871387294
GPR[EPVAP]-1659871388054
GPR[EPVS]-1659871388054
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871388055
GPR[SPVAP]-1659871388055
GPR[EPVAP]-1659871388828
GPR[EPVS]-1659871388828
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871388830
GPR[SPVAP]-1659871388830
GPR[EPVAP]-1659871389569
GPR[EPVS]-1659871389569
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871389570
GPR[SPVAP]-1659871389570
GPR[EPVAP]-1659871390316
GPR[EPVS]-1659871390316
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871390317
GPR[SPVAP]-1659871390317
GPR[EPVAP]-1659871391079
GPR[EPVS]-1659871391079
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871391081
GPR[SPVAP]-1659871391081
GPR[EPVAP]-1659871391832
GPR[EPVS]-1659871391832
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871391833
GPR[SPVAP]-1659871391833
GPR[EPVAP]-1659871392590
GPR[EPVS]-1659871392590
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871392591
GPR[SPVAP]-1659871392591
GPR[EPVAP]-1659871393349
GPR[EPVS]-1659871393349
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871393351
GPR[SPVAP]-1659871393351
GPR[EPVAP]-1659871394126
GPR[EPVS]-1659871394126
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871394128
GPR[SPVAP]-1659871394128
GPR[EPVAP]-1659871394892
GPR[EPVS]-1659871394892
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871394893
GPR[SPVAP]-1659871394893
GPR[EPVAP]-1659871395644
GPR[EPVS]-1659871395644
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871395646
GPR[SPVAP]-1659871395646
GPR[EPVAP]-1659871396402
GPR[EPVS]-1659871396402
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871396403
GPR[SPVAP]-1659871396403
GPR[EPVAP]-1659871397167
GPR[EPVS]-1659871397167
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871397168
GPR[SPVAP]-1659871397168
GPR[EPVAP]-1659871397897
GPR[EPVS]-1659871397897
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871397898
GPR[SPVAP]-1659871397898
GPR[EPVAP]-1659871398643
GPR[EPVS]-1659871398644
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871398645
GPR[SPVAP]-1659871398645
GPR[EPVAP]-1659871399395
GPR[EPVS]-1659871399395
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871399396
GPR[SPVAP]-1659871399396
GPR[EPVAP]-1659871400155
GPR[EPVS]-1659871400155
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871400156
GPR[SPVAP]-1659871400156
GPR[EPVAP]-1659871400906
GPR[EPVS]-1659871400906
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871400908
GPR[SPVAP]-1659871400908
GPR[EPVAP]-1659871401683
GPR[EPVS]-1659871401683
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871401684
GPR[SPVAP]-1659871401685
GPR[EPVAP]-1659871402439
GPR[EPVS]-1659871402439
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871402441
GPR[SPVAP]-1659871402441
GPR[EPVAP]-1659871403203
GPR[EPVS]-1659871403203
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871403204
GPR[SPVAP]-1659871403204
GPR[EPVAP]-1659871403967
GPR[EPVS]-1659871403967
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871403968
GPR[SPVAP]-1659871403968
GPR[EPVAP]-1659871404718
GPR[EPVS]-1659871404718
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871404719
GPR[SPVAP]-1659871404719
GPR[EPVAP]-1659871405495
GPR[EPVS]-1659871405495
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871405496
GPR[SPVAP]-1659871405496
GPR[EPVAP]-1659871406249
GPR[EPVS]-1659871406249
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871406250
GPR[SPVAP]-1659871406250
GPR[EPVAP]-1659871407007
GPR[EPVS]-1659871407007
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871407008
GPR[SPVAP]-1659871407008
GPR[EPVAP]-1659871407748
GPR[EPVS]-1659871407748
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871407749
GPR[SPVAP]-1659871407749
GPR[EPVAP]-1659871408502
GPR[EPVS]-1659871408502
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871408503
GPR[SPVAP]-1659871408503
GPR[EPVAP]-1659871409256
GPR[EPVS]-1659871409256
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871409257
GPR[SPVAP]-1659871409257
GPR[EPVAP]-1659871410008
GPR[EPVS]-1659871410008
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871410009
GPR[SPVAP]-1659871410009
GPR[EPVAP]-1659871410763
GPR[EPVS]-1659871410763
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871410765
GPR[SPVAP]-1659871410765
GPR[EPVAP]-1659871411535
GPR[EPVS]-1659871411535
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871411537
GPR[SPVAP]-1659871411537
GPR[EPVAP]-1659871412289
GPR[EPVS]-1659871412289
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871412290
GPR[SPVAP]-1659871412290
GPR[EPVAP]-1659871413052
GPR[EPVS]-1659871413052
========
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871413054
GPR[SPVAP]-1659871413054
GPR[EPVAP]-1659871413825
GPR[EPVS]-1659871413825
========
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871413826
GPR[SPVAP]-1659871413826
GPR[EPVAP]-1659871414608
GPR[EPVS]-1659871414608
========
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871414609
GPR[SPVAP]-1659871414609
GPR[EPVAP]-1659871415361
GPR[EPVS]-1659871415361
========
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871415362
GPR[SPVAP]-1659871415362
GPR[EPVAP]-1659871416122
GPR[EPVS]-1659871416122
========
b.setParent(this);
b.setWeight(index);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871416123
GPR[SPVAP]-1659871416123
GPR[EPVAP]-1659871416888
GPR[EPVS]-1659871416888
========
b.setParent(this);
b.setWeight(index);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871416890
GPR[SPVAP]-1659871416890
GPR[EPVAP]-1659871417650
GPR[EPVS]-1659871417650
========
b.setParent(this);
b.setWeight(index);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871417651
GPR[SPVAP]-1659871417651
GPR[EPVAP]-1659871418427
GPR[EPVS]-1659871418427
========
b.setParent(this);
b.setWeight(index);
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871418428
GPR[SPVAP]-1659871418428
GPR[EPVAP]-1659871419184
GPR[EPVS]-1659871419184
========
b.setParent(this);
b.setWeight(index);
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871419186
GPR[SPVAP]-1659871419186
GPR[EPVAP]-1659871419966
GPR[EPVS]-1659871419966
========
b.setParent(this);
b.setWeight(index);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871419968
GPR[SPVAP]-1659871419968
GPR[EPVAP]-1659871420728
GPR[EPVS]-1659871420728
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871420729
GPR[SPVAP]-1659871420729
GPR[EPVAP]-1659871421485
GPR[EPVS]-1659871421486
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871421487
GPR[SPVAP]-1659871421487
GPR[EPVAP]-1659871422228
GPR[EPVS]-1659871422229
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871422230
GPR[SPVAP]-1659871422230
GPR[EPVAP]-1659871422984
GPR[EPVS]-1659871422984
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871422986
GPR[SPVAP]-1659871422986
GPR[EPVAP]-1659871423755
GPR[EPVS]-1659871423755
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871423757
GPR[SPVAP]-1659871423757
GPR[EPVAP]-1659871424508
GPR[EPVS]-1659871424508
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871424509
GPR[SPVAP]-1659871424509
GPR[EPVAP]-1659871425264
GPR[EPVS]-1659871425264
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871425266
GPR[SPVAP]-1659871425266
GPR[EPVAP]-1659871426021
GPR[EPVS]-1659871426021
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871426023
GPR[SPVAP]-1659871426023
GPR[EPVAP]-1659871426792
GPR[EPVS]-1659871426792
========
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871426794
GPR[SPVAP]-1659871426794
GPR[EPVAP]-1659871427589
GPR[EPVS]-1659871427589
========
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871427590
GPR[SPVAP]-1659871427590
GPR[EPVAP]-1659871428359
GPR[EPVS]-1659871428359
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871428360
GPR[SPVAP]-1659871428360
GPR[EPVAP]-1659871429126
GPR[EPVS]-1659871429126
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871429127
GPR[SPVAP]-1659871429127
GPR[EPVAP]-1659871429884
GPR[EPVS]-1659871429884
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871429885
GPR[SPVAP]-1659871429885
GPR[EPVAP]-1659871430653
GPR[EPVS]-1659871430653
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871430655
GPR[SPVAP]-1659871430655
GPR[EPVAP]-1659871431396
GPR[EPVS]-1659871431396
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871431397
GPR[SPVAP]-1659871431397
GPR[EPVAP]-1659871432173
GPR[EPVS]-1659871432173
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871432175
GPR[SPVAP]-1659871432175
GPR[EPVAP]-1659871432954
GPR[EPVS]-1659871432954
========
b.setWeight(index);
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871432955
GPR[SPVAP]-1659871432955
GPR[EPVAP]-1659871433719
GPR[EPVS]-1659871433719
========
b.setWeight(index);
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871433720
GPR[SPVAP]-1659871433720
GPR[EPVAP]-1659871434469
GPR[EPVS]-1659871434469
========
b.setWeight(index);
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871434470
GPR[SPVAP]-1659871434470
GPR[EPVAP]-1659871435257
GPR[EPVS]-1659871435257
========
b.setWeight(index);
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871435259
GPR[SPVAP]-1659871435259
GPR[EPVAP]-1659871436013
GPR[EPVS]-1659871436013
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871436014
GPR[SPVAP]-1659871436014
GPR[EPVAP]-1659871436767
GPR[EPVS]-1659871436767
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871436768
GPR[SPVAP]-1659871436768
GPR[EPVAP]-1659871437546
GPR[EPVS]-1659871437546
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871437548
GPR[SPVAP]-1659871437548
GPR[EPVAP]-1659871438299
GPR[EPVS]-1659871438299
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871438300
GPR[SPVAP]-1659871438300
GPR[EPVAP]-1659871439046
GPR[EPVS]-1659871439046
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871439047
GPR[SPVAP]-1659871439047
GPR[EPVAP]-1659871439802
GPR[EPVS]-1659871439802
========
if(getDomainAxis()!=null){
axis.configure();
}
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871439804
GPR[SPVAP]-1659871439804
GPR[EPVAP]-1659871440575
GPR[EPVS]-1659871440575
========
if(getDomainAxis()!=null){
axis.configure();
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871440576
GPR[SPVAP]-1659871440576
GPR[EPVAP]-1659871441339
GPR[EPVS]-1659871441339
========
if(getDomainAxis()!=null){
axis.configure();
}
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871441340
GPR[SPVAP]-1659871441340
GPR[EPVAP]-1659871442089
GPR[EPVS]-1659871442089
========
if(getDomainAxis()!=null){
axis.configure();
}
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871442090
GPR[SPVAP]-1659871442090
GPR[EPVAP]-1659871442834
GPR[EPVS]-1659871442834
========
if(getDomainAxis()!=null){
axis.configure();
}
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871442835
GPR[SPVAP]-1659871442835
GPR[EPVAP]-1659871443593
GPR[EPVS]-1659871443593
========
if(getDomainAxis()!=null){
axis.configure();
}
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871443594
GPR[SPVAP]-1659871443594
GPR[EPVAP]-1659871444361
GPR[EPVS]-1659871444361
========
if(getDomainAxis()!=null){
axis.configure();
}
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
MM Copying to MM
GPR[SPVS]-1659871444363
GPR[SPVAP]-1659871444363
GPR[EPVAP]-1659871445124
GPR[EPVS]-1659871445124
========
fireDatasetChanged(new PieDatasetChangeInfo(PieDatasetChangeType.ADD,index,index));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871445126
GPR[SPVAP]-1659871445126
GPR[EPVAP]-1659871445867
GPR[EPVS]-1659871445867
========
if(index<ORIENTATION_VERTICAL){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871445870
GPR[SPVAP]-1659871445870
GPR[EPVAP]-1659871446622
GPR[EPVS]-1659871446622
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(count>=this.index&&index<=lastCategoryIndex()){
return index-this.firstCategoryIndex;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871446626
GPR[SPVAP]-1659871446626
GPR[EPVAP]-1659871447384
GPR[EPVS]-1659871447384
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(index>=getDatasetCount()){
return ;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871447386
GPR[SPVAP]-1659871447386
GPR[EPVAP]-1659871448132
GPR[EPVS]-1659871448132
========
if(getRenderer(index)==null){
return ;
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871448133
GPR[SPVAP]-1659871448133
GPR[EPVAP]-1659871448899
GPR[EPVS]-1659871448899
========
if(getRenderer(index)==null){
return ;
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(index>=getDatasetCount()){
return ;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871448901
GPR[SPVAP]-1659871448901
GPR[EPVAP]-1659871449670
GPR[EPVS]-1659871449670
========
if(index<0||index>this.data.size()){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871449677
GPR[SPVAP]-1659871449677
GPR[EPVAP]-1659871451003
GPR[SPVATF]-1659871451003
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871452118
GPR[EPVS]-1659871452118
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("\'position\' out of bounds.");
}

========
MM Copying to MM
GPR[SPVS]-1659871452119
GPR[SPVAP]-1659871452119
GPR[EPVAP]-1659871453400
GPR[SPVATF]-1659871453400
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871454546
GPR[EPVS]-1659871454546
========
if(index<0||index>this.data.size()){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("\'position\' out of bounds.");
}

========
MM Copying to MM
GPR[SPVS]-1659871454547
GPR[SPVAP]-1659871454547
GPR[EPVAP]-1659871455848
GPR[SPVATF]-1659871455848
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871456998
GPR[EPVS]-1659871456998
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires index >= 0.");
}

========
MM Copying to MM
GPR[SPVS]-1659871457001
GPR[SPVAP]-1659871457001
GPR[EPVAP]-1659871458312
GPR[SPVATF]-1659871458312
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871459439
GPR[EPVS]-1659871459439
========
this.count=Math.max(this.size,count+1);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871459441
GPR[SPVAP]-1659871459441
GPR[EPVAP]-1659871460195
GPR[EPVS]-1659871460195
========
if(index<maximumItemCount){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871460204
GPR[SPVAP]-1659871460204
GPR[EPVAP]-1659871461506
GPR[SPVATF]-1659871461506
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871462620
GPR[EPVS]-1659871462620
========
this.count=Math.max(this.size,count+1);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires index >= 0.");
}

========
MM Copying to MM
GPR[SPVS]-1659871462623
GPR[SPVAP]-1659871462623
GPR[EPVAP]-1659871463408
GPR[EPVS]-1659871463408
========
if(index<count){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(count>=this.index&&index<=lastCategoryIndex()){
return index-this.firstCategoryIndex;
}
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659871463410
GPR[SPVAP]-1659871463410
GPR[EPVAP]-1659871464162
GPR[EPVS]-1659871464162
GPR[ESUN]-1659871469129
GPR[SSUN]-1659871469129
org.jfree.data.time.TimeSeries,604
========
this.data.add(item);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871474298
GPR[SPVAP]-1659871474298
GPR[EPVAP]-1659871478850
GPR[SPVATF]-1659871478850
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871479978
GPR[EPVS]-1659871479978
========
updateBounds(item.getPeriod(),this.data.size()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871479980
GPR[SPVAP]-1659871479980
GPR[EPVAP]-1659871480736
GPR[EPVS]-1659871480736
========
fireSeriesChanged();
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871480738
GPR[SPVAP]-1659871480738
GPR[EPVAP]-1659871482091
GPR[SPVATF]-1659871482091
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871483252
GPR[EPVS]-1659871483252
========
this.data.add(item);
fireSeriesChanged();
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871483254
GPR[SPVAP]-1659871483254
GPR[EPVAP]-1659871484582
GPR[SPVATF]-1659871484582
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871485725
GPR[EPVS]-1659871485725
========
fireDatasetChanged(new DatasetChangeInfo());
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871485730
GPR[SPVAP]-1659871485730
GPR[EPVAP]-1659871486493
GPR[EPVS]-1659871486493
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871486496
GPR[SPVAP]-1659871486496
GPR[EPVAP]-1659871487255
GPR[EPVS]-1659871487255
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871487257
GPR[SPVAP]-1659871487257
GPR[EPVAP]-1659871488571
GPR[SPVATF]-1659871488571
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871489682
GPR[EPVS]-1659871489682
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871489683
GPR[SPVAP]-1659871489683
GPR[EPVAP]-1659871490993
GPR[SPVATF]-1659871490993
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871492136
GPR[EPVS]-1659871492136
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871492138
GPR[SPVAP]-1659871492138
GPR[EPVAP]-1659871493473
GPR[SPVATF]-1659871493473
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871494619
GPR[EPVS]-1659871494619
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871494620
GPR[SPVAP]-1659871494620
GPR[EPVAP]-1659871495925
GPR[SPVATF]-1659871495925
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871497047
GPR[EPVS]-1659871497047
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871497048
GPR[SPVAP]-1659871497048
GPR[EPVAP]-1659871498349
GPR[SPVATF]-1659871498349
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871499515
GPR[EPVS]-1659871499515
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871499517
GPR[SPVAP]-1659871499517
GPR[EPVAP]-1659871500864
GPR[SPVATF]-1659871500864
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871501990
GPR[EPVS]-1659871501990
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871501991
GPR[SPVAP]-1659871501991
GPR[EPVAP]-1659871503344
GPR[SPVATF]-1659871503344
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871504461
GPR[EPVS]-1659871504461
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871504465
GPR[SPVAP]-1659871504465
GPR[EPVAP]-1659871505763
GPR[SPVATF]-1659871505763
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871506898
GPR[EPVS]-1659871506898
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871506900
GPR[SPVAP]-1659871506900
GPR[EPVAP]-1659871508198
GPR[SPVATF]-1659871508198
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871509386
GPR[EPVS]-1659871509386
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871509388
GPR[SPVAP]-1659871509388
GPR[EPVAP]-1659871510154
GPR[EPVS]-1659871510154
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871510155
GPR[SPVAP]-1659871510155
GPR[EPVAP]-1659871510902
GPR[EPVS]-1659871510902
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871510903
GPR[SPVAP]-1659871510903
GPR[EPVAP]-1659871511661
GPR[EPVS]-1659871511661
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871511662
GPR[SPVAP]-1659871511662
GPR[EPVAP]-1659871513267
GPR[SPVATF]-1659871513267
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871514902
GPR[EPVS]-1659871514902
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871514905
GPR[SPVAP]-1659871514905
GPR[EPVAP]-1659871516333
GPR[SPVATF]-1659871516333
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871517530
GPR[EPVS]-1659871517530
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871517531
GPR[SPVAP]-1659871517531
GPR[EPVAP]-1659871518801
GPR[SPVATF]-1659871518801
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871519923
GPR[EPVS]-1659871519923
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871519924
GPR[SPVAP]-1659871519924
GPR[EPVAP]-1659871520684
GPR[EPVS]-1659871520684
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871520685
GPR[SPVAP]-1659871520685
GPR[EPVAP]-1659871521453
GPR[EPVS]-1659871521453
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871521454
GPR[SPVAP]-1659871521454
GPR[EPVAP]-1659871522212
GPR[EPVS]-1659871522212
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871522214
GPR[SPVAP]-1659871522214
GPR[EPVAP]-1659871523515
GPR[SPVATF]-1659871523515
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871524657
GPR[EPVS]-1659871524657
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871524658
GPR[SPVAP]-1659871524658
GPR[EPVAP]-1659871525436
GPR[EPVS]-1659871525436
========
if(item.getPeriod().compareTo(last)>0){
data.add(new Outlier(minY,minY,minY));
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871525437
GPR[SPVAP]-1659871525437
GPR[EPVAP]-1659871526206
GPR[EPVS]-1659871526206
========
if(item.getPeriod().compareTo(last)>0){
this.data.setHighlightPaint(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871526210
GPR[SPVAP]-1659871526210
GPR[EPVAP]-1659871526963
GPR[EPVS]-1659871526963
========
if(item.getPeriod().compareTo(last)>0){
setSeriesNeedle(count,new ArrowNeedle(true));
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871526965
GPR[SPVAP]-1659871526965
GPR[EPVAP]-1659871527716
GPR[EPVS]-1659871527716
========
if(item.getPeriod().compareTo(last)>0){
setSeriesPaint(count,Color.red);
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871527717
GPR[SPVAP]-1659871527717
GPR[EPVAP]-1659871528487
GPR[EPVS]-1659871528487
========
if(item.getPeriod().compareTo(last)>0){
setSeriesNeedle(count,new ArrowNeedle(true));
setSeriesPaint(count,Color.red);

this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871528489
GPR[SPVAP]-1659871528489
GPR[EPVAP]-1659871529248
GPR[EPVS]-1659871529249
========
case 1 :

if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871529250
GPR[SPVAP]-1659871529250
GPR[EPVAP]-1659871529872
GPR[EPVS]-1659871529872
========
this.last=last;
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871529890
GPR[SPVAP]-1659871529890
GPR[EPVAP]-1659871530662
GPR[EPVS]-1659871530662
========
notifyListeners(new AxisChangeEvent(this));
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
MM Copying to MM
GPR[SPVS]-1659871530664
GPR[SPVAP]-1659871530664
GPR[EPVAP]-1659871531439
GPR[EPVS]-1659871531439
GPR[ESUN]-1659871531448
GPR[SSUN]-1659871531448
org.jfree.data.time.TimeSeries,605
========
{
fireChangeEvent();
this.data.add(item);
added=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871534324
GPR[SPVAP]-1659871534324
GPR[EPVAP]-1659871535276
GPR[EPVS]-1659871535276
========
{
this.data.add((Task)(TaskSeries)this.data.get(count).getTasks().iterator().next().getDescription());
added=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871535283
GPR[SPVAP]-1659871535283
GPR[EPVAP]-1659871536249
GPR[EPVS]-1659871536249
========
{
notifyListeners(new RendererChangeEvent(this));
this.data.add(item);
added=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871536251
GPR[SPVAP]-1659871536251
GPR[EPVAP]-1659871537231
GPR[EPVS]-1659871537231
GPR[ESUN]-1659871537237
GPR[SSUN]-1659871537237
org.jfree.data.time.TimeSeries,606
GPR[ESUN]-1659871537643
GPR[SSUN]-1659871537643
org.jfree.data.time.TimeSeries,878
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while(getItemCount()>0&&(latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871540001
GPR[SPVAP]-1659871540001
GPR[EPVAP]-1659871544562
GPR[SPVATF]-1659871544562
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871545691
GPR[EPVS]-1659871545691
========
boolean latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871545693
GPR[SPVAP]-1659871545693
GPR[EPVAP]-1659871546448
GPR[EPVS]-1659871546448
========
fireChangeEvent();
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871546450
GPR[SPVAP]-1659871546450
GPR[EPVAP]-1659871547241
GPR[EPVS]-1659871547241
========
notifyListeners(new RendererChangeEvent(this));
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871547243
GPR[SPVAP]-1659871547243
GPR[EPVAP]-1659871548007
GPR[EPVS]-1659871548007
========
if(notify&&notify){
fireChangeEvent();
}
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871548010
GPR[SPVAP]-1659871548010
GPR[EPVAP]-1659871548754
GPR[EPVS]-1659871548754
========
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871548755
GPR[SPVAP]-1659871548755
GPR[EPVAP]-1659871549503
GPR[EPVS]-1659871549503
========
fireDatasetChanged(new DatasetChangeInfo());
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871549505
GPR[SPVAP]-1659871549505
GPR[EPVAP]-1659871550256
GPR[EPVS]-1659871550256
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(maximumItemCount);
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871550258
GPR[SPVAP]-1659871550258
GPR[EPVAP]-1659871551538
GPR[SPVATF]-1659871551538
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871552663
GPR[EPVS]-1659871552663
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
fireDatasetChanged(new DatasetChangeInfo());
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871552664
GPR[SPVAP]-1659871552664
GPR[EPVAP]-1659871553454
GPR[EPVS]-1659871553454
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(maximumItemCount);
fireDatasetChanged(new DatasetChangeInfo());

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871553455
GPR[SPVAP]-1659871553455
GPR[EPVAP]-1659871554209
GPR[EPVS]-1659871554209
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
n=maximumItemCount+1;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871554211
GPR[SPVAP]-1659871554211
GPR[EPVAP]-1659871554965
GPR[EPVS]-1659871554965
========
this.removed=notify;
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871554967
GPR[SPVAP]-1659871554967
GPR[EPVAP]-1659871555708
GPR[EPVS]-1659871555708
========
int latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871555710
GPR[SPVAP]-1659871555710
GPR[EPVAP]-1659871556454
GPR[EPVS]-1659871556454
========
fireSeriesChanged();
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871556455
GPR[SPVAP]-1659871556455
GPR[EPVAP]-1659871557797
GPR[SPVATF]-1659871557797
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871558971
GPR[EPVS]-1659871558971
========
if(notify&&notify){
fireChangeEvent();
}
boolean latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871558973
GPR[SPVAP]-1659871558973
GPR[EPVAP]-1659871559749
GPR[EPVS]-1659871559749
========
updateBoundsForRemovedItem((XYDataItem)this.data.remove(maximumItemCount));
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871559750
GPR[SPVAP]-1659871559750
GPR[EPVAP]-1659871560502
GPR[EPVS]-1659871560502
========
(TaskSeries)this.data.get(maximumItemCount).removeChangeListener(this);
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871560503
GPR[SPVAP]-1659871560503
GPR[EPVAP]-1659871561130
GPR[EPVS]-1659871561130
========
this.data.remove(maximumItemCount);
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871561131
GPR[SPVAP]-1659871561131
GPR[EPVAP]-1659871562460
GPR[SPVATF]-1659871562460
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871563574
GPR[EPVS]-1659871563574
========
this.data.remove(maximumItemCount);
fireDatasetChanged(new DatasetChangeInfo());
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871563575
GPR[SPVAP]-1659871563575
GPR[EPVAP]-1659871564331
GPR[EPVS]-1659871564331
========
(XIntervalSeries)this.data.get(maximumItemCount).removeChangeListener(this);
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871564332
GPR[SPVAP]-1659871564332
GPR[EPVAP]-1659871564952
GPR[EPVS]-1659871564952
========
(XYIntervalSeries)this.data.get(maximumItemCount).removeChangeListener(this);
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871564954
GPR[SPVAP]-1659871564954
GPR[EPVAP]-1659871565600
GPR[EPVS]-1659871565600
========
(YIntervalSeries)this.data.get(maximumItemCount).removeChangeListener(this);
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871565602
GPR[SPVAP]-1659871565602
GPR[EPVAP]-1659871566223
GPR[EPVS]-1659871566224
========
(XYSeries)this.data.get(maximumItemCount).removeChangeListener(this);
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871566225
GPR[SPVAP]-1659871566225
GPR[EPVAP]-1659871566841
GPR[EPVS]-1659871566841
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
findBoundsByIteration();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871566843
GPR[SPVAP]-1659871566843
GPR[EPVAP]-1659871568110
GPR[SPVATF]-1659871568110
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871569243
GPR[EPVS]-1659871569243
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
fireSeriesChanged();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871569245
GPR[SPVAP]-1659871569245
GPR[EPVAP]-1659871570544
GPR[SPVATF]-1659871570544
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871571656
GPR[EPVS]-1659871571656
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
findBoundsByIteration();
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871571658
GPR[SPVAP]-1659871571658
GPR[EPVAP]-1659871572999
GPR[SPVATF]-1659871572999
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871574175
GPR[EPVS]-1659871574175
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
findBoundsByIteration();
fireSeriesChanged();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871574176
GPR[SPVAP]-1659871574176
GPR[EPVAP]-1659871575468
GPR[SPVATF]-1659871575468
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871576615
GPR[EPVS]-1659871576615
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
findBoundsByIteration();
findBoundsByIteration();
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871576616
GPR[SPVAP]-1659871576616
GPR[EPVAP]-1659871577905
GPR[SPVATF]-1659871577905
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871579019
GPR[EPVS]-1659871579019
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
fireSeriesChanged();
findBoundsByIteration();
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871579021
GPR[SPVAP]-1659871579021
GPR[EPVAP]-1659871580289
GPR[SPVATF]-1659871580289
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871581419
GPR[EPVS]-1659871581419
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
findBoundsByIteration();
fireSeriesChanged();
findBoundsByIteration();
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871581420
GPR[SPVAP]-1659871581420
GPR[EPVAP]-1659871582746
GPR[SPVATF]-1659871582746
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871583879
GPR[EPVS]-1659871583879
========
(XYSeries)this.data.get(maximumItemCount).removeChangeListener(this);
this.data.remove(maximumItemCount);
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871583881
GPR[SPVAP]-1659871583881
GPR[EPVAP]-1659871584496
GPR[EPVS]-1659871584496
========
double latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871584498
GPR[SPVAP]-1659871584498
GPR[EPVAP]-1659871585782
GPR[SPVATF]-1659871585782
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871586926
GPR[EPVS]-1659871586926
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
configureRangeAxes();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871586928
GPR[SPVAP]-1659871586928
GPR[EPVAP]-1659871587709
GPR[EPVS]-1659871587709
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
fireChangeEvent();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871587710
GPR[SPVAP]-1659871587710
GPR[EPVAP]-1659871588464
GPR[EPVS]-1659871588464
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
configureRangeAxes();
fireChangeEvent();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871588466
GPR[SPVAP]-1659871588466
GPR[EPVAP]-1659871589242
GPR[EPVS]-1659871589242
========
this.latest=maximumItemAge;
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871589244
GPR[SPVAP]-1659871589244
GPR[EPVAP]-1659871590021
GPR[EPVS]-1659871590021
========
removeAgedItems(true);
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871590022
GPR[SPVAP]-1659871590022
GPR[EPVAP]-1659871591326
GPR[SPVATF]-1659871591326
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871592483
GPR[EPVS]-1659871592483
========
notifyListeners(new AxisChangeEvent(this));
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871592485
GPR[SPVAP]-1659871592485
GPR[EPVAP]-1659871593230
GPR[EPVS]-1659871593230
========
if(maximumItemCount<maximumItemCount+1){
throw new IllegalArgumentException("Not enough data.");
}
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871593231
GPR[SPVAP]-1659871593231
GPR[EPVAP]-1659871594549
GPR[SPVATF]-1659871594549
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871595673
GPR[EPVS]-1659871595673
========
if(maximumItemCount<maximumItemCount+1){
throw new IllegalArgumentException("Not enough data.");
}
int latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871595675
GPR[SPVAP]-1659871595675
GPR[EPVAP]-1659871596426
GPR[EPVS]-1659871596426
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871596428
GPR[SPVAP]-1659871596428
GPR[EPVAP]-1659871597174
GPR[EPVS]-1659871597174
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871597175
GPR[SPVAP]-1659871597175
GPR[EPVAP]-1659871597926
GPR[EPVS]-1659871597926
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871597927
GPR[SPVAP]-1659871597927
GPR[EPVAP]-1659871598682
GPR[EPVS]-1659871598682
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871598683
GPR[SPVAP]-1659871598683
GPR[EPVAP]-1659871599431
GPR[EPVS]-1659871599431
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871599432
GPR[SPVAP]-1659871599432
GPR[EPVAP]-1659871600178
GPR[EPVS]-1659871600178
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871600179
GPR[SPVAP]-1659871600179
GPR[EPVAP]-1659871600967
GPR[EPVS]-1659871600967
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.TOP_RIGHT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871600969
GPR[SPVAP]-1659871600969
GPR[EPVAP]-1659871601714
GPR[EPVS]-1659871601714
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.TOP_LEFT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871601715
GPR[SPVAP]-1659871601715
GPR[EPVAP]-1659871602482
GPR[EPVS]-1659871602482
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.TOP_RIGHT;
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.TOP_LEFT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871602484
GPR[SPVAP]-1659871602484
GPR[EPVAP]-1659871603245
GPR[EPVS]-1659871603245
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871603246
GPR[SPVAP]-1659871603246
GPR[EPVAP]-1659871604035
GPR[EPVS]-1659871604035
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871604036
GPR[SPVAP]-1659871604036
GPR[EPVAP]-1659871604780
GPR[EPVS]-1659871604780
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871604782
GPR[SPVAP]-1659871604782
GPR[EPVAP]-1659871605536
GPR[EPVS]-1659871605536
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871605538
GPR[SPVAP]-1659871605538
GPR[EPVAP]-1659871606305
GPR[EPVS]-1659871606305
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871606306
GPR[SPVAP]-1659871606306
GPR[EPVAP]-1659871607082
GPR[EPVS]-1659871607082
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871607083
GPR[SPVAP]-1659871607083
GPR[EPVAP]-1659871607844
GPR[EPVS]-1659871607844
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871607846
GPR[SPVAP]-1659871607846
GPR[EPVAP]-1659871608593
GPR[EPVS]-1659871608593
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871608594
GPR[SPVAP]-1659871608594
GPR[EPVAP]-1659871609354
GPR[EPVS]-1659871609354
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.TOP_LEFT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871609356
GPR[SPVAP]-1659871609356
GPR[EPVAP]-1659871610109
GPR[EPVS]-1659871610109
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.BOTTOM_LEFT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871610110
GPR[SPVAP]-1659871610110
GPR[EPVAP]-1659871610871
GPR[EPVS]-1659871610871
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.TOP_LEFT;
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.BOTTOM_LEFT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871610873
GPR[SPVAP]-1659871610873
GPR[EPVAP]-1659871611631
GPR[EPVS]-1659871611631
========
if(getItemCount()>1){
XYDataItem getRawDataItem(getItemCount()-1)=getRawDataItem(count-1);
maximumItemCount=29*result+item.hashCode();
}
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871611633
GPR[SPVAP]-1659871611633
GPR[EPVAP]-1659871612256
GPR[EPVS]-1659871612256
========
if(getItemCount()>1){
ComparableObjectItem getDataItem(getItemCount()-1)=getDataItem(count-1);
maximumItemCount=29*result+item.hashCode();
}
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871612258
GPR[SPVAP]-1659871612258
GPR[EPVAP]-1659871612894
GPR[EPVS]-1659871612894
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
this.data.remove(maximumItemCount);
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871612895
GPR[SPVAP]-1659871612895
GPR[EPVAP]-1659871614195
GPR[SPVATF]-1659871614195
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871615321
GPR[EPVS]-1659871615321
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
this.data=new java.util.ArrayList();
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871615323
GPR[SPVAP]-1659871615323
GPR[EPVAP]-1659871616618
GPR[SPVATF]-1659871616618
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871617791
GPR[EPVS]-1659871617791
========
setSelectionState(this);
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871617792
GPR[SPVAP]-1659871617792
GPR[EPVAP]-1659871618550
GPR[EPVS]-1659871618550
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=false;
}

========
MM Copying to MM
GPR[SPVS]-1659871618551
GPR[SPVAP]-1659871618551
GPR[EPVAP]-1659871619831
GPR[SPVATF]-1659871619831
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871620940
GPR[EPVS]-1659871620940
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
maximumItemCount=29*result+(this.range!=null?this.range.hashCode():0);
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871620942
GPR[SPVAP]-1659871620942
GPR[EPVAP]-1659871621691
GPR[EPVS]-1659871621691
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
maximumItemCount=29*result+(this.timePeriodClass!=null?this.timePeriodClass.hashCode():0);
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871621693
GPR[SPVAP]-1659871621693
GPR[EPVAP]-1659871622444
GPR[EPVS]-1659871622444
========
if(getItemCount()>1){
TimeSeriesDataItem getRawDataItem(getItemCount()-1)=getRawDataItem(count-1);
maximumItemCount=29*result+item.hashCode();
}
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871622445
GPR[SPVAP]-1659871622445
GPR[EPVAP]-1659871623060
GPR[EPVS]-1659871623060
========
this.data.remove(maximumItemCount);
fireChangeEvent();
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871623062
GPR[SPVAP]-1659871623062
GPR[EPVAP]-1659871623827
GPR[EPVS]-1659871623827
========
fireSelectionEvent();
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871623828
GPR[SPVAP]-1659871623828
GPR[EPVAP]-1659871624607
GPR[EPVS]-1659871624607
========
(MatrixSeries)this.data.get(maximumItemCount).removeChangeListener(this);
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871624608
GPR[SPVAP]-1659871624608
GPR[EPVAP]-1659871625221
GPR[EPVS]-1659871625221
========
if(minY>=minY){
throw new IllegalArgumentException("Requires xLow < xHigh.");
}
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871625224
GPR[SPVAP]-1659871625224
GPR[EPVAP]-1659871626519
GPR[SPVATF]-1659871626519
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871627664
GPR[EPVS]-1659871627664
========
if(maximumItemCount<=1){
return 0;
}
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871627665
GPR[SPVAP]-1659871627665
GPR[EPVAP]-1659871628409
GPR[EPVS]-1659871628409
========
if(minY>=minY){
throw new IllegalArgumentException("Requires xLow < xHigh.");
}
int latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871628411
GPR[SPVAP]-1659871628411
GPR[EPVAP]-1659871629162
GPR[EPVS]-1659871629162
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.getKey(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871629164
GPR[SPVAP]-1659871629164
GPR[EPVAP]-1659871629917
GPR[EPVS]-1659871629917
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871629919
GPR[SPVAP]-1659871629919
GPR[EPVAP]-1659871631197
GPR[SPVATF]-1659871631197
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871632343
GPR[EPVS]-1659871632343
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871632345
GPR[SPVAP]-1659871632345
GPR[EPVAP]-1659871633641
GPR[SPVATF]-1659871633641
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871634755
GPR[EPVS]-1659871634755
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append(this.timePeriodClass.getName());
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871634756
GPR[SPVAP]-1659871634756
GPR[EPVAP]-1659871636022
GPR[SPVATF]-1659871636022
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871637143
GPR[EPVS]-1659871637143
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append(".");
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871637145
GPR[SPVAP]-1659871637145
GPR[EPVAP]-1659871638466
GPR[SPVATF]-1659871638466
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871639603
GPR[EPVS]-1659871639603
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871639604
GPR[SPVAP]-1659871639604
GPR[EPVAP]-1659871640885
GPR[SPVATF]-1659871640885
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871642018
GPR[EPVS]-1659871642018
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871642019
GPR[SPVAP]-1659871642019
GPR[EPVAP]-1659871643339
GPR[SPVATF]-1659871643339
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871644451
GPR[EPVS]-1659871644451
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append(this.timePeriodClass.getName());
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871644452
GPR[SPVAP]-1659871644452
GPR[EPVAP]-1659871645745
GPR[SPVATF]-1659871645745
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871646877
GPR[EPVS]-1659871646877
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append(".");
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871646879
GPR[SPVAP]-1659871646879
GPR[EPVAP]-1659871648191
GPR[SPVATF]-1659871648191
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871649314
GPR[EPVS]-1659871649314
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871649316
GPR[SPVAP]-1659871649316
GPR[EPVAP]-1659871650619
GPR[SPVATF]-1659871650619
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871651748
GPR[EPVS]-1659871651748
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871651749
GPR[SPVAP]-1659871651749
GPR[EPVAP]-1659871653026
GPR[SPVATF]-1659871653026
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871654144
GPR[EPVS]-1659871654144
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871654145
GPR[SPVAP]-1659871654145
GPR[EPVAP]-1659871655457
GPR[SPVATF]-1659871655457
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871656591
GPR[EPVS]-1659871656591
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871656592
GPR[SPVAP]-1659871656592
GPR[EPVAP]-1659871657907
GPR[SPVATF]-1659871657907
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871659022
GPR[EPVS]-1659871659022
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871659024
GPR[SPVAP]-1659871659024
GPR[EPVAP]-1659871660342
GPR[SPVATF]-1659871660342
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871661481
GPR[EPVS]-1659871661481
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871661482
GPR[SPVAP]-1659871661482
GPR[EPVAP]-1659871662758
GPR[SPVATF]-1659871662758
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871663895
GPR[EPVS]-1659871663895
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append(".");
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871663896
GPR[SPVAP]-1659871663896
GPR[EPVAP]-1659871665204
GPR[SPVATF]-1659871665204
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871666325
GPR[EPVS]-1659871666325
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871666327
GPR[SPVAP]-1659871666327
GPR[EPVAP]-1659871667595
GPR[SPVATF]-1659871667595
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871668715
GPR[EPVS]-1659871668715
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871668716
GPR[SPVAP]-1659871668716
GPR[EPVAP]-1659871669990
GPR[SPVATF]-1659871669990
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871671120
GPR[EPVS]-1659871671120
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871671122
GPR[SPVAP]-1659871671122
GPR[EPVAP]-1659871672419
GPR[SPVATF]-1659871672419
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871674430
GPR[EPVS]-1659871674430
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871674431
GPR[SPVAP]-1659871674431
GPR[EPVAP]-1659871675893
GPR[SPVATF]-1659871675893
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871677218
GPR[EPVS]-1659871677218
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871677220
GPR[SPVAP]-1659871677220
GPR[EPVAP]-1659871678566
GPR[SPVATF]-1659871678566
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871679710
GPR[EPVS]-1659871679710
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append(".");
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871679711
GPR[SPVAP]-1659871679711
GPR[EPVAP]-1659871681027
GPR[SPVATF]-1659871681027
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871682179
GPR[EPVS]-1659871682179
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871682181
GPR[SPVAP]-1659871682181
GPR[EPVAP]-1659871683448
GPR[SPVATF]-1659871683448
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871684591
GPR[EPVS]-1659871684591
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871684592
GPR[SPVAP]-1659871684592
GPR[EPVAP]-1659871685861
GPR[SPVATF]-1659871685861
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871686984
GPR[EPVS]-1659871686984
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871686985
GPR[SPVAP]-1659871686985
GPR[EPVAP]-1659871688264
GPR[SPVATF]-1659871688264
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871689408
GPR[EPVS]-1659871689408
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871689410
GPR[SPVAP]-1659871689410
GPR[EPVAP]-1659871690713
GPR[SPVATF]-1659871690713
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871691877
GPR[EPVS]-1659871691877
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871691878
GPR[SPVAP]-1659871691878
GPR[EPVAP]-1659871693168
GPR[SPVATF]-1659871693168
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871694289
GPR[EPVS]-1659871694289
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871694291
GPR[SPVAP]-1659871694291
GPR[EPVAP]-1659871695615
GPR[SPVATF]-1659871695615
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871696739
GPR[EPVS]-1659871696739
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871696741
GPR[SPVAP]-1659871696741
GPR[EPVAP]-1659871698050
GPR[SPVATF]-1659871698050
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871699204
GPR[EPVS]-1659871699204
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append("is ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871699206
GPR[SPVAP]-1659871699206
GPR[EPVAP]-1659871700508
GPR[SPVATF]-1659871700508
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871701645
GPR[EPVS]-1659871701645
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");
new StringBuffer().append("is ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(this.timePeriodClass.getName());
new StringBuffer().append(".");

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871701646
GPR[SPVAP]-1659871701646
GPR[EPVAP]-1659871702912
GPR[SPVATF]-1659871702912
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871704064
GPR[EPVS]-1659871704064
========
this.data.clear();
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871704067
GPR[SPVAP]-1659871704067
GPR[EPVAP]-1659871705349
GPR[SPVATF]-1659871705349
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871706455
GPR[EPVS]-1659871706455
========
this.data.clear();
fireDatasetChanged(new DatasetChangeInfo());
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871706457
GPR[SPVAP]-1659871706457
GPR[EPVAP]-1659871707224
GPR[EPVS]-1659871707224
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871707226
GPR[SPVAP]-1659871707226
GPR[EPVAP]-1659871708505
GPR[SPVATF]-1659871708505
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871709646
GPR[EPVS]-1659871709646
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.minY=Double.NaN;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871709647
GPR[SPVAP]-1659871709647
GPR[EPVAP]-1659871710925
GPR[SPVATF]-1659871710925
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871712068
GPR[EPVS]-1659871712068
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.maxY=Double.NaN;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871712069
GPR[SPVAP]-1659871712069
GPR[EPVAP]-1659871713378
GPR[SPVATF]-1659871713378
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871714507
GPR[EPVS]-1659871714507
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871714509
GPR[SPVAP]-1659871714509
GPR[EPVAP]-1659871715849
GPR[SPVATF]-1659871715849
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871716984
GPR[EPVS]-1659871716984
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.minY=Double.NaN;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871716985
GPR[SPVAP]-1659871716985
GPR[EPVAP]-1659871718276
GPR[SPVATF]-1659871718276
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871719392
GPR[EPVS]-1659871719392
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.maxY=Double.NaN;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871719393
GPR[SPVAP]-1659871719393
GPR[EPVAP]-1659871720729
GPR[SPVATF]-1659871720729
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871721851
GPR[EPVS]-1659871721851
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
fireSeriesChanged();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871721853
GPR[SPVAP]-1659871721853
GPR[EPVAP]-1659871723128
GPR[SPVATF]-1659871723128
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871724266
GPR[EPVS]-1659871724266
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871724268
GPR[SPVAP]-1659871724268
GPR[EPVAP]-1659871725572
GPR[SPVATF]-1659871725572
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871726695
GPR[EPVS]-1659871726695
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.minY=Double.NaN;
this.maxY=Double.NaN;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871726697
GPR[SPVAP]-1659871726697
GPR[EPVAP]-1659871727984
GPR[SPVATF]-1659871727984
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871729108
GPR[EPVS]-1659871729108
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.minY=Double.NaN;
fireSeriesChanged();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871729110
GPR[SPVAP]-1659871729110
GPR[EPVAP]-1659871730396
GPR[SPVATF]-1659871730396
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871731563
GPR[EPVS]-1659871731563
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.minY=Double.NaN;
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871731565
GPR[SPVAP]-1659871731565
GPR[EPVAP]-1659871732831
GPR[SPVATF]-1659871732831
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871733951
GPR[EPVS]-1659871733951
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.maxY=Double.NaN;
fireSeriesChanged();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871733952
GPR[SPVAP]-1659871733952
GPR[EPVAP]-1659871735252
GPR[SPVATF]-1659871735253
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871736378
GPR[EPVS]-1659871736378
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.maxY=Double.NaN;
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871736380
GPR[SPVAP]-1659871736380
GPR[EPVAP]-1659871737680
GPR[SPVATF]-1659871737680
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871738802
GPR[EPVS]-1659871738802
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
fireSeriesChanged();
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871738803
GPR[SPVAP]-1659871738803
GPR[EPVAP]-1659871740095
GPR[SPVATF]-1659871740095
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871741235
GPR[EPVS]-1659871741235
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871741237
GPR[SPVAP]-1659871741237
GPR[EPVAP]-1659871742556
GPR[SPVATF]-1659871742556
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871743681
GPR[EPVS]-1659871743681
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.minY=Double.NaN;
fireSeriesChanged();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871743682
GPR[SPVAP]-1659871743682
GPR[EPVAP]-1659871744969
GPR[SPVATF]-1659871744969
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871746092
GPR[EPVS]-1659871746092
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.minY=Double.NaN;
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871746094
GPR[SPVAP]-1659871746094
GPR[EPVAP]-1659871747370
GPR[SPVATF]-1659871747370
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871748498
GPR[EPVS]-1659871748498
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.maxY=Double.NaN;
fireSeriesChanged();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871748500
GPR[SPVAP]-1659871748500
GPR[EPVAP]-1659871749797
GPR[SPVATF]-1659871749798
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871750919
GPR[EPVS]-1659871750919
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.maxY=Double.NaN;
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871750920
GPR[SPVAP]-1659871750920
GPR[EPVAP]-1659871752230
GPR[SPVATF]-1659871752231
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871753355
GPR[EPVS]-1659871753355
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
fireSeriesChanged();
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871753357
GPR[SPVAP]-1659871753357
GPR[EPVAP]-1659871754642
GPR[SPVATF]-1659871754642
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871755794
GPR[EPVS]-1659871755794
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871755796
GPR[SPVAP]-1659871755796
GPR[EPVAP]-1659871757093
GPR[SPVATF]-1659871757093
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871758252
GPR[EPVS]-1659871758252
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.minY=Double.NaN;
this.maxY=Double.NaN;
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871758253
GPR[SPVAP]-1659871758253
GPR[EPVAP]-1659871759581
GPR[SPVATF]-1659871759581
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871760699
GPR[EPVS]-1659871760699
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.minY=Double.NaN;
fireSeriesChanged();
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871760701
GPR[SPVAP]-1659871760701
GPR[EPVAP]-1659871761983
GPR[SPVATF]-1659871761983
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871763120
GPR[EPVS]-1659871763120
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.maxY=Double.NaN;
fireSeriesChanged();
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871763121
GPR[SPVAP]-1659871763121
GPR[EPVAP]-1659871764458
GPR[SPVATF]-1659871764458
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871765579
GPR[EPVS]-1659871765579
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871765581
GPR[SPVAP]-1659871765581
GPR[EPVAP]-1659871766893
GPR[SPVATF]-1659871766893
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871768001
GPR[EPVS]-1659871768001
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871768002
GPR[SPVAP]-1659871768002
GPR[EPVAP]-1659871769304
GPR[SPVATF]-1659871769304
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871770463
GPR[EPVS]-1659871770463
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.minY=Double.NaN;
fireSeriesChanged();
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871770464
GPR[SPVAP]-1659871770464
GPR[EPVAP]-1659871771749
GPR[SPVATF]-1659871771749
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871772867
GPR[EPVS]-1659871772867
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.maxY=Double.NaN;
fireSeriesChanged();
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871772869
GPR[SPVAP]-1659871772869
GPR[EPVAP]-1659871774171
GPR[SPVATF]-1659871774171
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871775316
GPR[EPVS]-1659871775316
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871775317
GPR[SPVAP]-1659871775317
GPR[EPVAP]-1659871776614
GPR[SPVATF]-1659871776615
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871777748
GPR[EPVS]-1659871777748
========
getAveragedOutlier().getPoint().setLocation(new Point2D.Double(removed/getItemCount(),minY/size));
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871777750
GPR[SPVAP]-1659871777750
GPR[EPVAP]-1659871778503
GPR[EPVS]-1659871778503
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.maxX=getX(getItemCount()-1).doubleValue();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871778504
GPR[SPVAP]-1659871778504
GPR[EPVAP]-1659871779255
GPR[EPVS]-1659871779255
========
this.maximumItemCount=maximumItemCount;
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871779256
GPR[SPVAP]-1659871779256
GPR[EPVAP]-1659871780606
GPR[SPVATF]-1659871780606
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871781768
GPR[EPVS]-1659871781768
========
if(this.data.size()>maximumItemCount){
delete(0,count-maximum);
}
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871781769
GPR[SPVAP]-1659871781769
GPR[EPVAP]-1659871782515
GPR[EPVS]-1659871782515
========
this.maximumItemCount=maximumItemCount;
int latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871782517
GPR[SPVAP]-1659871782517
GPR[EPVAP]-1659871783267
GPR[EPVS]-1659871783267
========
if(Double.isNaN(removed)){
y0=0.0;
}
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871783278
GPR[SPVAP]-1659871783278
GPR[EPVAP]-1659871784029
GPR[EPVS]-1659871784029
========
if(Double.isNaN(removed)){
y2=0.0;
}
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871784031
GPR[SPVAP]-1659871784031
GPR[EPVAP]-1659871784791
GPR[EPVS]-1659871784791
========
maximumItemCount=29*result+this.maximumItemCount;
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871784794
GPR[SPVAP]-1659871784794
GPR[EPVAP]-1659871785547
GPR[EPVS]-1659871785548
========
maximumItemCount=29*result+(int)this.maximumItemAge;
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871785549
GPR[SPVAP]-1659871785549
GPR[EPVAP]-1659871786303
GPR[EPVS]-1659871786303
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.minX=Double.NaN;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871786306
GPR[SPVAP]-1659871786306
GPR[EPVAP]-1659871787055
GPR[EPVS]-1659871787055
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.maxX=Double.NaN;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871787057
GPR[SPVAP]-1659871787057
GPR[EPVAP]-1659871787812
GPR[EPVS]-1659871787812
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.minX=Double.NaN;
this.maxX=Double.NaN;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871787813
GPR[SPVAP]-1659871787813
GPR[EPVAP]-1659871788573
GPR[EPVS]-1659871788573
========
this.minY=Double.NaN;
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871788575
GPR[SPVAP]-1659871788575
GPR[EPVAP]-1659871789865
GPR[SPVATF]-1659871789865
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871791007
GPR[EPVS]-1659871791007
========
this.maxY=Double.NaN;
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871791009
GPR[SPVAP]-1659871791009
GPR[EPVAP]-1659871792336
GPR[SPVATF]-1659871792336
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871793476
GPR[EPVS]-1659871793476
========
this.minY=Double.NaN;
this.maxY=Double.NaN;
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871793477
GPR[SPVAP]-1659871793477
GPR[EPVAP]-1659871794775
GPR[SPVATF]-1659871794775
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871795890
GPR[EPVS]-1659871795890
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
clone.data=new java.util.ArrayList(this.data.size());
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871795892
GPR[SPVAP]-1659871795892
GPR[EPVAP]-1659871796651
GPR[EPVS]-1659871796651
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(maximumItemCount);
fireDatasetChanged(new DatasetChangeInfo());
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871796653
GPR[SPVAP]-1659871796653
GPR[EPVAP]-1659871797409
GPR[EPVS]-1659871797409
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(maximumItemCount);
this.data.remove(maximumItemCount);
fireDatasetChanged(new DatasetChangeInfo());

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871797410
GPR[SPVAP]-1659871797410
GPR[EPVAP]-1659871798166
GPR[EPVS]-1659871798166
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
fireDatasetChanged(new DatasetChangeInfo());
this.data.remove(maximumItemCount);
fireDatasetChanged(new DatasetChangeInfo());

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871798168
GPR[SPVAP]-1659871798168
GPR[EPVAP]-1659871798913
GPR[EPVS]-1659871798913
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(maximumItemCount);
fireDatasetChanged(new DatasetChangeInfo());
this.data.remove(maximumItemCount);
fireDatasetChanged(new DatasetChangeInfo());

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871798915
GPR[SPVAP]-1659871798915
GPR[EPVAP]-1659871799658
GPR[EPVS]-1659871799658
========
copy.data=new java.util.ArrayList();
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871799660
GPR[SPVAP]-1659871799660
GPR[EPVAP]-1659871800417
GPR[EPVS]-1659871800417
========
copy.data=new ArrayList();
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871800419
GPR[SPVAP]-1659871800419
GPR[EPVAP]-1659871801162
GPR[EPVS]-1659871801162
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
lvalue=minY-(minY-minY)/2.0;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871801165
GPR[SPVAP]-1659871801165
GPR[EPVAP]-1659871801922
GPR[EPVS]-1659871801922
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
uvalue=minY-(minY-minY)/2.0;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871801924
GPR[SPVAP]-1659871801924
GPR[EPVAP]-1659871802815
GPR[EPVS]-1659871802815
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
minimum=Math.min(minY,minY);
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871802823
GPR[SPVAP]-1659871802823
GPR[EPVAP]-1659871803799
GPR[EPVS]-1659871803799
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
maximum=Math.max(minY,minY);
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871803800
GPR[SPVAP]-1659871803800
GPR[EPVAP]-1659871804748
GPR[EPVS]-1659871804748
========
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
lvalue=minY-(minY-minY)/2.0;
uvalue=minY-(minY-minY)/2.0;
minimum=Math.min(minY,minY);
maximum=Math.max(minY,minY);

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871804756
GPR[SPVAP]-1659871804756
GPR[EPVAP]-1659871806418
GPR[EPVS]-1659871806418
========
int latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
maximum=Math.max(minY,minY);
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871806424
GPR[SPVAP]-1659871806424
GPR[EPVAP]-1659871807216
GPR[EPVS]-1659871807216
========
if(maximumItemCount<=1){
return 0;
}
int latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871807220
GPR[SPVAP]-1659871807220
GPR[EPVAP]-1659871807972
GPR[EPVS]-1659871807972
========
if(minY>=minY){
throw new IllegalArgumentException("Requires xLow < xHigh.");
}
if(maximumItemCount<=1){
return 0;
}
long latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871807974
GPR[SPVAP]-1659871807974
GPR[EPVAP]-1659871808726
GPR[EPVS]-1659871808726
========
if(minY>=minY){
throw new IllegalArgumentException("Requires xLow < xHigh.");
}
if(maximumItemCount<=1){
return 0;
}
int latest=getTimePeriod(getItemCount()-1).getSerialIndex();
boolean removed=false;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659871808728
GPR[SPVAP]-1659871808728
GPR[EPVAP]-1659871809486
GPR[EPVS]-1659871809486
GPR[ESUN]-1659871809489
GPR[SSUN]-1659871809489
org.jfree.data.time.TimeSeries,879
GPR[ESUN]-1659871810026
GPR[SSUN]-1659871810026
org.jfree.data.time.TimeSeries,881
Find no block!
GPR[SSUN]-1659871810346
org.jfree.data.time.TimeSeries,885
========
if(notify){
if(notify){
fireSeriesChanged();
}
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871812423
GPR[SPVAP]-1659871812423
GPR[EPVAP]-1659871817003
GPR[SPVATF]-1659871817003
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871818151
GPR[EPVS]-1659871818151
========
if(notify){
this.notify=notify;
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871818153
GPR[SPVAP]-1659871818153
GPR[EPVAP]-1659871818910
GPR[EPVS]-1659871818910
========
this.notify=notify;
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871818911
GPR[SPVAP]-1659871818911
GPR[EPVAP]-1659871819691
GPR[EPVS]-1659871819691
========
this.removed=circular;
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871819692
GPR[SPVAP]-1659871819692
GPR[EPVAP]-1659871820475
GPR[EPVS]-1659871820475
========
this.maximumItemCount=maximumItemCount;
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871820476
GPR[SPVAP]-1659871820476
GPR[EPVAP]-1659871821814
GPR[SPVATF]-1659871821814
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871822978
GPR[EPVS]-1659871822978
========
this.minY=minY;
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871822979
GPR[SPVAP]-1659871822979
GPR[EPVAP]-1659871824319
GPR[SPVATF]-1659871824319
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871825443
GPR[EPVS]-1659871825443
========
this.notify=removed;
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871825444
GPR[SPVAP]-1659871825444
GPR[EPVAP]-1659871826273
GPR[EPVS]-1659871826273
========
this.removed=removed;
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871826274
GPR[SPVAP]-1659871826274
GPR[EPVAP]-1659871827047
GPR[EPVS]-1659871827047
========
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871827048
GPR[SPVAP]-1659871827048
GPR[EPVAP]-1659871827799
GPR[EPVS]-1659871827799
========
if(notify){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871827801
GPR[SPVAP]-1659871827801
GPR[EPVAP]-1659871829107
GPR[SPVATF]-1659871829107
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871830235
GPR[EPVS]-1659871830235
========
if(notify){
fireSeriesChanged();
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871830236
GPR[SPVAP]-1659871830236
GPR[EPVAP]-1659871831549
GPR[SPVATF]-1659871831549
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871832716
GPR[EPVS]-1659871832716
========
if(notify){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871832717
GPR[SPVAP]-1659871832717
GPR[EPVAP]-1659871834655
GPR[SPVATF]-1659871834655
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871836001
GPR[EPVS]-1659871836001
========
if(notify){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871836003
GPR[SPVAP]-1659871836003
GPR[EPVAP]-1659871837419
GPR[SPVATF]-1659871837419
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871838562
GPR[EPVS]-1659871838562
========
if(notify){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871838564
GPR[SPVAP]-1659871838564
GPR[EPVAP]-1659871839841
GPR[SPVATF]-1659871839841
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871840959
GPR[EPVS]-1659871840959
========
if(notify){
fireSeriesChanged();
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871840960
GPR[SPVAP]-1659871840960
GPR[EPVAP]-1659871842281
GPR[SPVATF]-1659871842281
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871843396
GPR[EPVS]-1659871843396
========
if(notify){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871843398
GPR[SPVAP]-1659871843398
GPR[EPVAP]-1659871844674
GPR[SPVATF]-1659871844674
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871845834
GPR[EPVS]-1659871845834
========
if(notify){
this.data.subList(0,maximumItemCount).clear();
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871845836
GPR[SPVAP]-1659871845836
GPR[EPVAP]-1659871847135
GPR[SPVATF]-1659871847135
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871848285
GPR[EPVS]-1659871848285
========
if(notify){
this.data.subList(0,maximumItemCount).clear();
fireSeriesChanged();

fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871848286
GPR[SPVAP]-1659871848286
GPR[EPVAP]-1659871849602
GPR[SPVATF]-1659871849602
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871850724
GPR[EPVS]-1659871850724
========
if(notify){
this.data.subList(0,maximumItemCount).clear();
fireSeriesChanged();
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871850726
GPR[SPVAP]-1659871850726
GPR[EPVAP]-1659871852011
GPR[SPVATF]-1659871852011
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871853127
GPR[EPVS]-1659871853127
========
if(notify){
this.data.subList(0,maximumItemCount).clear();
this.data.subList(0,maximumItemCount).clear();
fireSeriesChanged();

fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871853128
GPR[SPVAP]-1659871853128
GPR[EPVAP]-1659871854504
GPR[SPVATF]-1659871854504
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871855623
GPR[EPVS]-1659871855623
========
if(notify){
fireSeriesChanged();
this.data.subList(0,maximumItemCount).clear();
fireSeriesChanged();

fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871855624
GPR[SPVAP]-1659871855624
GPR[EPVAP]-1659871856897
GPR[SPVATF]-1659871856897
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871858037
GPR[EPVS]-1659871858037
========
if(notify){
this.data.subList(0,maximumItemCount).clear();
fireSeriesChanged();
this.data.subList(0,maximumItemCount).clear();
fireSeriesChanged();

fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871858039
GPR[SPVAP]-1659871858039
GPR[EPVAP]-1659871859347
GPR[SPVATF]-1659871859347
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871860472
GPR[EPVS]-1659871860472
========
if(notify){
this.autoTickUnitSelection=removed;
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871860473
GPR[SPVAP]-1659871860473
GPR[EPVAP]-1659871861234
GPR[EPVS]-1659871861234
========
if(notify){
this.autoRange=removed;
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871861235
GPR[SPVAP]-1659871861235
GPR[EPVAP]-1659871861995
GPR[EPVS]-1659871861995
========
if(notify){
if(this.removed){
autoAdjustRange();
}
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871861996
GPR[SPVAP]-1659871861996
GPR[EPVAP]-1659871862783
GPR[EPVS]-1659871862783
========
if(notify){
this.autoRange=removed;
if(this.removed){
autoAdjustRange();
}

fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871862784
GPR[SPVAP]-1659871862784
GPR[EPVAP]-1659871863534
GPR[EPVS]-1659871863534
========
if(notify){
this.autoRangeMinimumSize=minY;
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871863535
GPR[SPVAP]-1659871863535
GPR[EPVAP]-1659871864291
GPR[EPVS]-1659871864291
========
if(notify){
this.autoRangeMinimumSize=minY;
if(this.removed){
autoAdjustRange();
}

fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871864292
GPR[SPVAP]-1659871864292
GPR[EPVAP]-1659871865039
GPR[EPVS]-1659871865039
========
fireSeriesChanged();
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871865040
GPR[SPVAP]-1659871865040
GPR[EPVAP]-1659871866348
GPR[SPVATF]-1659871866348
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871867439
GPR[EPVS]-1659871867439
========
(SimpleHistogramBin)this.data.get(maximumItemCount).setSelected(removed);
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871867441
GPR[SPVAP]-1659871867441
GPR[EPVAP]-1659871868058
GPR[EPVS]-1659871868058
========
if(notify){
fireChangeEvent();
}
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871868060
GPR[SPVAP]-1659871868060
GPR[EPVAP]-1659871868800
GPR[EPVS]-1659871868800
========
this.removed[maximumItemCount]=selected;
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871868801
GPR[SPVAP]-1659871868801
GPR[EPVAP]-1659871869554
GPR[EPVS]-1659871869554
========
if(notify){
fireSelectionEvent();
}
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871869556
GPR[SPVAP]-1659871869556
GPR[EPVAP]-1659871870347
GPR[EPVS]-1659871870347
========
(SelectableValue)this.data.getObject(maximumItemCount,maximumItemCount).setSelected(removed);
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871870348
GPR[SPVAP]-1659871870348
GPR[EPVAP]-1659871870957
GPR[EPVS]-1659871870957
========
getSeries(maximumItemCount).getRawDataItem(maximumItemCount).setSelected(removed);
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871870959
GPR[SPVAP]-1659871870959
GPR[EPVAP]-1659871871721
GPR[EPVS]-1659871871721
========
super.setAutoRangeMinimumSize(minY,notify);
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871871722
GPR[SPVAP]-1659871871722
GPR[EPVAP]-1659871872493
GPR[EPVS]-1659871872493
========
super.setRange(range,removed,notify);
if(notify){
fireSeriesChanged();
}

========
MM Copying to MM
GPR[SPVS]-1659871872495
GPR[SPVAP]-1659871872495
GPR[EPVAP]-1659871873243
GPR[EPVS]-1659871873243
========
if(removed){
this.notify=notify;
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871875011
GPR[SPVAP]-1659871875011
GPR[EPVAP]-1659871875801
GPR[EPVS]-1659871875801
========
if(removed){
this.data.subList(0,maximumItemCount).clear();
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871875803
GPR[SPVAP]-1659871875803
GPR[EPVAP]-1659871877105
GPR[SPVATF]-1659871877105
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871878214
GPR[EPVS]-1659871878214
========
if(removed){
fireSeriesChanged();
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871878215
GPR[SPVAP]-1659871878215
GPR[EPVAP]-1659871879493
GPR[SPVATF]-1659871879493
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871880626
GPR[EPVS]-1659871880626
========
if(removed){
this.data.subList(0,maximumItemCount).clear();
fireSeriesChanged();

findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871880628
GPR[SPVAP]-1659871880628
GPR[EPVAP]-1659871881934
GPR[SPVATF]-1659871881934
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871883086
GPR[EPVS]-1659871883086
========
if(removed){
this.data.subList(0,maximumItemCount).clear();
fireSeriesChanged();
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871883087
GPR[SPVAP]-1659871883087
GPR[EPVAP]-1659871884375
GPR[SPVATF]-1659871884375
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871885495
GPR[EPVS]-1659871885495
========
if(removed){
this.data.subList(0,maximumItemCount).clear();
this.data.subList(0,maximumItemCount).clear();
fireSeriesChanged();

findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871885496
GPR[SPVAP]-1659871885496
GPR[EPVAP]-1659871886829
GPR[SPVATF]-1659871886829
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871887954
GPR[EPVS]-1659871887954
========
if(removed){
fireSeriesChanged();
this.data.subList(0,maximumItemCount).clear();
fireSeriesChanged();

findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871887956
GPR[SPVAP]-1659871887956
GPR[EPVAP]-1659871889244
GPR[SPVATF]-1659871889244
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871890387
GPR[EPVS]-1659871890387
========
if(removed){
this.data.subList(0,maximumItemCount).clear();
fireSeriesChanged();
this.data.subList(0,maximumItemCount).clear();
fireSeriesChanged();

findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871890388
GPR[SPVAP]-1659871890388
GPR[EPVAP]-1659871891654
GPR[SPVATF]-1659871891654
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871892807
GPR[EPVS]-1659871892807
========
fireSeriesChanged();
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871892809
GPR[SPVAP]-1659871892809
GPR[EPVAP]-1659871894123
GPR[SPVATF]-1659871894123
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871895244
GPR[EPVS]-1659871895244
========
this.notify=removed;
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871895250
GPR[SPVAP]-1659871895250
GPR[EPVAP]-1659871896002
GPR[EPVS]-1659871896002
========
this.notify=notify;
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871896003
GPR[SPVAP]-1659871896003
GPR[EPVAP]-1659871896745
GPR[EPVS]-1659871896745
========
this.removed=circular;
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871896747
GPR[SPVAP]-1659871896747
GPR[EPVAP]-1659871897494
GPR[EPVS]-1659871897494
========
this.maximumItemCount=maximumItemCount;
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871897496
GPR[SPVAP]-1659871897496
GPR[EPVAP]-1659871898777
GPR[SPVATF]-1659871898777
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871899887
GPR[EPVS]-1659871899887
========
this.minY=minY;
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871899889
GPR[SPVAP]-1659871899889
GPR[EPVAP]-1659871901171
GPR[SPVATF]-1659871901171
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871902274
GPR[EPVS]-1659871902274
========
this.removed=removed;
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871902275
GPR[SPVAP]-1659871902275
GPR[EPVAP]-1659871903050
GPR[EPVS]-1659871903050
========
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871903052
GPR[SPVAP]-1659871903052
GPR[EPVAP]-1659871903805
GPR[EPVS]-1659871903805
========
if(removed){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871903808
GPR[SPVAP]-1659871903808
GPR[EPVAP]-1659871905125
GPR[SPVATF]-1659871905126
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871906280
GPR[EPVS]-1659871906280
========
if(removed){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871906281
GPR[SPVAP]-1659871906281
GPR[EPVAP]-1659871907566
GPR[SPVATF]-1659871907566
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871908716
GPR[EPVS]-1659871908716
========
if(removed){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871908717
GPR[SPVAP]-1659871908717
GPR[EPVAP]-1659871910008
GPR[SPVATF]-1659871910008
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871911171
GPR[EPVS]-1659871911171
========
if(removed){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871911172
GPR[SPVAP]-1659871911172
GPR[EPVAP]-1659871912439
GPR[SPVATF]-1659871912439
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871913555
GPR[EPVS]-1659871913555
========
if(removed){
fireSeriesChanged();
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871913557
GPR[SPVAP]-1659871913557
GPR[EPVAP]-1659871914881
GPR[SPVATF]-1659871914881
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871916023
GPR[EPVS]-1659871916023
========
if(removed){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871916024
GPR[SPVAP]-1659871916024
GPR[EPVAP]-1659871917314
GPR[SPVATF]-1659871917314
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871918435
GPR[EPVS]-1659871918435
========
if(removed){
if(this.removed){
autoAdjustRange();
}
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871918436
GPR[SPVAP]-1659871918436
GPR[EPVAP]-1659871919190
GPR[EPVS]-1659871919190
========
if(removed){
this.autoRangeMinimumSize=minY;
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871919192
GPR[SPVAP]-1659871919192
GPR[EPVAP]-1659871919964
GPR[EPVS]-1659871919964
========
if(removed){
this.autoRangeMinimumSize=minY;
if(this.removed){
autoAdjustRange();
}

findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871919966
GPR[SPVAP]-1659871919966
GPR[EPVAP]-1659871920719
GPR[EPVS]-1659871920719
========
if(removed){
this.autoTickUnitSelection=removed;
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871920721
GPR[SPVAP]-1659871920721
GPR[EPVAP]-1659871921463
GPR[EPVS]-1659871921463
========
(SimpleHistogramBin)this.data.get(maximumItemCount).setSelected(removed);
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871921465
GPR[SPVAP]-1659871921465
GPR[EPVAP]-1659871922077
GPR[EPVS]-1659871922077
========
if(removed){
fireDatasetChanged(new DatasetChangeInfo());
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871922079
GPR[SPVAP]-1659871922079
GPR[EPVAP]-1659871922836
GPR[EPVS]-1659871922836
========
if(range==null){
throw new IllegalArgumentException("Null \'range\' argument.");
}
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871922838
GPR[SPVAP]-1659871922838
GPR[EPVAP]-1659871924116
GPR[SPVATF]-1659871924116
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871925248
GPR[EPVS]-1659871925248
========
this.range=range;
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871925250
GPR[SPVAP]-1659871925250
GPR[EPVAP]-1659871926539
GPR[SPVATF]-1659871926539
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871927656
GPR[EPVS]-1659871927656
========
if(range==null){
throw new IllegalArgumentException("Null \'range\' argument.");
}
this.range=range;
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871927657
GPR[SPVAP]-1659871927657
GPR[EPVAP]-1659871928968
GPR[SPVATF]-1659871928968
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871930075
GPR[EPVS]-1659871930075
========
if(range==null){
throw new IllegalArgumentException("Null \'range\' argument.");
}
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871930076
GPR[SPVAP]-1659871930076
GPR[EPVAP]-1659871930834
GPR[EPVS]-1659871930834
========
this.range=range;
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871930835
GPR[SPVAP]-1659871930835
GPR[EPVAP]-1659871931584
GPR[EPVS]-1659871931584
========
if(range==null){
throw new IllegalArgumentException("Null \'range\' argument.");
}
this.range=range;
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871931586
GPR[SPVAP]-1659871931586
GPR[EPVAP]-1659871932362
GPR[EPVS]-1659871932362
========
invalidateRangeInfo();
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871932364
GPR[SPVAP]-1659871932364
GPR[EPVAP]-1659871933106
GPR[EPVS]-1659871933106
========
(SelectableValue)this.data.getObject(maximumItemCount,maximumItemCount).setSelected(removed);
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871933108
GPR[SPVAP]-1659871933108
GPR[EPVAP]-1659871933731
GPR[EPVS]-1659871933731
========
if(notify){
fireChangeEvent();
}
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871933733
GPR[SPVAP]-1659871933733
GPR[EPVAP]-1659871934480
GPR[EPVS]-1659871934480
========
this.removed[maximumItemCount]=selected;
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871934481
GPR[SPVAP]-1659871934481
GPR[EPVAP]-1659871935234
GPR[EPVS]-1659871935234
========
if(notify){
fireSelectionEvent();
}
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871935235
GPR[SPVAP]-1659871935235
GPR[EPVAP]-1659871935985
GPR[EPVS]-1659871935985
========
getSeries(maximumItemCount).getRawDataItem(maximumItemCount).setSelected(removed);
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871935987
GPR[SPVAP]-1659871935987
GPR[EPVAP]-1659871936741
GPR[EPVS]-1659871936741
========
super.setAutoRangeMinimumSize(minY,notify);
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871936744
GPR[SPVAP]-1659871936744
GPR[EPVAP]-1659871937489
GPR[EPVS]-1659871937489
========
super.setRange(range,removed,notify);
if(removed){
findBoundsByIteration();
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659871937491
GPR[SPVAP]-1659871937491
GPR[EPVAP]-1659871938237
GPR[EPVS]-1659871938237
GPR[ESUN]-1659871938238
GPR[SSUN]-1659871938238
org.jfree.data.time.TimeSeries,1269
========
if(Double.isNaN(b)){
return a;
}else {
return Math.max(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871940855
GPR[SPVAP]-1659871940855
GPR[EPVAP]-1659871945346
GPR[SPVATF]-1659871945346
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871946443
GPR[EPVS]-1659871946443
========
if(Double.isNaN(a)){
return a;
}else {
return Math.min(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871946445
GPR[SPVAP]-1659871946445
GPR[EPVAP]-1659871947761
GPR[SPVATF]-1659871947761
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871948926
GPR[EPVS]-1659871948926
========
if(Double.isNaN(minY)){
return a;
}else {
return Math.min(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871948929
GPR[SPVAP]-1659871948929
GPR[EPVAP]-1659871950273
GPR[SPVATF]-1659871950273
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871951467
GPR[EPVS]-1659871951467
========
if(Double.isNaN(this.b)){
return a;
}else {
return Math.min(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871951469
GPR[SPVAP]-1659871951469
GPR[EPVAP]-1659871952232
GPR[EPVS]-1659871952232
========
if(Double.isNaN(this.a)){
return a;
}else {
return Math.min(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871952233
GPR[SPVAP]-1659871952233
GPR[EPVAP]-1659871952982
GPR[EPVS]-1659871952982
========
if(Double.isInfinite(b)){
return a;
}else {
return Math.min(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871952986
GPR[SPVAP]-1659871952986
GPR[EPVAP]-1659871954301
GPR[SPVATF]-1659871954301
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871955447
GPR[EPVS]-1659871955447
========
if(Double.get(b)){
return a;
}else {
return Math.min(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871955449
GPR[SPVAP]-1659871955449
GPR[EPVAP]-1659871956225
GPR[EPVS]-1659871956225
GPR[ESUN]-1659871956229
GPR[SSUN]-1659871956229
org.jfree.data.time.TimeSeries,1273
GPR[ESUN]-1659871956696
GPR[SSUN]-1659871956696
org.jfree.data.time.TimeSeries,1292
========
if(Double.isNaN(b)){
return a;
}else {
return Math.min(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871959048
GPR[SPVAP]-1659871959048
GPR[EPVAP]-1659871963597
GPR[SPVATF]-1659871963597
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871964763
GPR[EPVS]-1659871964763
========
if(Double.isNaN(a)){
return a;
}else {
return Math.max(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871964764
GPR[SPVAP]-1659871964764
GPR[EPVAP]-1659871966111
GPR[SPVATF]-1659871966111
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871967268
GPR[EPVS]-1659871967268
========
if(Double.isNaN(minY)){
y0=0.0;
}
if(Double.isNaN(b)){
return a;
}else {
return Math.max(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871967270
GPR[SPVAP]-1659871967270
GPR[EPVAP]-1659871968016
GPR[EPVS]-1659871968016
========
if(Double.isNaN(minY)){
return a;
}else {
return Math.max(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871968017
GPR[SPVAP]-1659871968017
GPR[EPVAP]-1659871969308
GPR[SPVATF]-1659871969308
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871970427
GPR[EPVS]-1659871970427
========
if(Double.isNaN(this.b)){
return a;
}else {
return Math.max(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871970429
GPR[SPVAP]-1659871970429
GPR[EPVAP]-1659871971187
GPR[EPVS]-1659871971187
========
if(Double.isNaN(this.a)){
return a;
}else {
return Math.max(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871971188
GPR[SPVAP]-1659871971188
GPR[EPVAP]-1659871971929
GPR[EPVS]-1659871971929
========
if(Double.isInfinite(b)){
return a;
}else {
return Math.max(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871971934
GPR[SPVAP]-1659871971934
GPR[EPVAP]-1659871973278
GPR[SPVATF]-1659871973278
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871974399
GPR[EPVS]-1659871974399
========
a=Math.max(result,b);
if(Double.isNaN(b)){
return a;
}else {
return Math.max(a,b);
}

========
MM Copying to MM
GPR[SPVS]-1659871974402
GPR[SPVAP]-1659871974402
GPR[EPVAP]-1659871975142
GPR[EPVS]-1659871975142
GPR[ESUN]-1659871975146
GPR[SSUN]-1659871975146
org.jfree.data.time.TimeSeries,1296
GPR[ESUN]-1659871975649
GPR[SSUN]-1659871975649
org.jfree.data.time.RegularTimePeriod,71
Find no block!
GPR[SSUN]-1659871976006
org.jfree.data.time.TimeSeriesDataItem,105
Find no block!
GPR[SSUN]-1659871976362
org.jfree.data.time.TimeSeriesDataItem,106
GPR[ESUN]-1659871978402
GPR[SSUN]-1659871978402
org.jfree.data.time.TimeSeriesDataItem,109
========
if(period==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.period=period;
this.value=value;
this.selected=false;

========
MM Copying to MM
GPR[SPVS]-1659871980667
GPR[SPVAP]-1659871980667
GPR[EPVAP]-1659871985275
GPR[SPVATF]-1659871985275
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871986452
GPR[EPVS]-1659871986452
========
if(period==null){
throw new IllegalArgumentException("Null \'x\' argument.");
}
this.period=period;
this.value=value;
this.selected=false;

========
MM Copying to MM
GPR[SPVS]-1659871986453
GPR[SPVAP]-1659871986453
GPR[EPVAP]-1659871987702
GPR[SPVATF]-1659871987702
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871988862
GPR[EPVS]-1659871988862
========
if(period==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}
this.period=period;
this.value=y;
this.selected=false;

========
MM Copying to MM
GPR[SPVS]-1659871988863
GPR[SPVAP]-1659871988863
GPR[EPVAP]-1659871989551
GPR[EPVS]-1659871989551
========
if(period==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}
this.period=period;
this.value=value;
if(value==null){
throw new IllegalArgumentException("Null \'value\' argument.");
}
this.selected=false;

========
MM Copying to MM
GPR[SPVS]-1659871989552
GPR[SPVAP]-1659871989552
GPR[EPVAP]-1659871990776
GPR[SPVATF]-1659871990776
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871991932
GPR[EPVS]-1659871991932
========
notifyListeners(new DialLayerChangeEvent(this));
if(period==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}
this.period=period;
this.value=value;
this.selected=false;

========
MM Copying to MM
GPR[SPVS]-1659871991933
GPR[SPVAP]-1659871991933
GPR[EPVAP]-1659871992625
GPR[EPVS]-1659871992625
========
if(period==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}
this.period=period;
this.value=value;
this.selected=selected;

========
MM Copying to MM
GPR[SPVS]-1659871992626
GPR[SPVAP]-1659871992626
GPR[EPVAP]-1659871994643
GPR[SPVATF]-1659871994643
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871995944
GPR[EPVS]-1659871995944
========
if(selected){
fireSelectionEvent();
}
if(period==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}
this.period=period;
this.value=value;
this.selected=false;

========
MM Copying to MM
GPR[SPVS]-1659871995945
GPR[SPVAP]-1659871995945
GPR[EPVAP]-1659871996679
GPR[EPVS]-1659871996679
========
if(period==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}
this.period=period;
this.value=value;
this.selected=true;

========
MM Copying to MM
GPR[SPVS]-1659871996692
GPR[SPVAP]-1659871996692
GPR[EPVAP]-1659871998009
GPR[SPVATF]-1659871998009
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659871999153
GPR[EPVS]-1659871999153
GPR[ESUN]-1659871999159
GPR[SSUN]-1659871999159
org.jfree.data.time.TimeSeriesDataItem,110
GPR[ESUN]-1659871999677
GPR[SSUN]-1659871999677
org.jfree.data.time.TimeSeriesDataItem,111
GPR[ESUN]-1659872000067
GPR[SSUN]-1659872000067
org.jfree.data.time.TimeSeriesDataItem,112
Find no block!
GPR[SSUN]-1659872000460
org.jfree.data.time.TimeSeriesDataItem,130
GPR[ESUN]-1659872002441
GPR[SSUN]-1659872002441
org.jfree.data.time.TimeSeriesDataItem,141
GPR[ESUN]-1659872004398
GPR[SSUN]-1659872004398
org.jfree.data.time.TimeSeriesDataItem,266
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.formatter=(NumberFormat)this.formatter.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872006699
GPR[SPVAP]-1659872006699
GPR[EPVAP]-1659872009140
GPR[EPVS]-1659872009140
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872009141
GPR[SPVAP]-1659872009141
GPR[EPVAP]-1659872010115
GPR[EPVS]-1659872010115
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesFilled=(BooleanList)this.seriesFilled.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872010116
GPR[SPVAP]-1659872010116
GPR[EPVAP]-1659872011011
GPR[EPVS]-1659872011011
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.underlying=(TaskSeriesCollection)this.underlying.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872011012
GPR[SPVAP]-1659872011012
GPR[EPVAP]-1659872011936
GPR[EPVS]-1659872011936
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.data=(KeyedObjects2D)this.data.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872011937
GPR[SPVAP]-1659872011937
GPR[EPVAP]-1659872012844
GPR[EPVS]-1659872012844
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.data=(KeyedObjects)this.data.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872012845
GPR[SPVAP]-1659872012845
GPR[EPVAP]-1659872013752
GPR[EPVS]-1659872013752
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.legendLine=ShapeUtilities.clone(this.legendLine);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872013753
GPR[SPVAP]-1659872013753
GPR[EPVAP]-1659872014676
GPR[EPVS]-1659872014676
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.legendArea=ShapeUtilities.clone(this.legendArea);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872014677
GPR[SPVAP]-1659872014677
GPR[EPVAP]-1659872015582
GPR[EPVS]-1659872015582
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.zValues=DataUtilities.clone(this.zValues);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872015583
GPR[SPVAP]-1659872015583
GPR[EPVAP]-1659872016496
GPR[EPVS]-1659872016496
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.dayFormatter=(NumberFormat)this.dayFormatter.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872016497
GPR[SPVAP]-1659872016497
GPR[EPVAP]-1659872017390
GPR[EPVS]-1659872017390
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.secondFormatter=(NumberFormat)this.secondFormatter.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872017391
GPR[SPVAP]-1659872017391
GPR[EPVAP]-1659872018305
GPR[EPVS]-1659872018305
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.values=(DefaultKeyedValues2D)this.values.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872018306
GPR[SPVAP]-1659872018306
GPR[EPVAP]-1659872019258
GPR[EPVS]-1659872019258
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.workingCalendar=(Calendar)this.workingCalendar.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872019259
GPR[SPVAP]-1659872019259
GPR[EPVAP]-1659872020173
GPR[EPVS]-1659872020173
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
clone.legendLine=ShapeUtilities.clone(this.legendLine);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872020174
GPR[SPVAP]-1659872020174
GPR[EPVAP]-1659872021104
GPR[EPVS]-1659872021104
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.shape=ShapeUtilities.clone(this.shape);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872021105
GPR[SPVAP]-1659872021105
GPR[EPVAP]-1659872021998
GPR[EPVS]-1659872021998
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.line=ShapeUtilities.clone(this.line);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872021999
GPR[SPVAP]-1659872021999
GPR[EPVAP]-1659872022925
GPR[EPVS]-1659872022925
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872022926
GPR[SPVAP]-1659872022926
GPR[EPVAP]-1659872023818
GPR[EPVS]-1659872023818
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872023819
GPR[SPVAP]-1659872023819
GPR[EPVAP]-1659872024716
GPR[EPVS]-1659872024716
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.keys=(ArrayList)this.keys.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872024717
GPR[SPVAP]-1659872024717
GPR[EPVAP]-1659872025610
GPR[EPVS]-1659872025610
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.values=(ArrayList)this.values.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872025612
GPR[SPVAP]-1659872025612
GPR[EPVAP]-1659872026518
GPR[EPVS]-1659872026518
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.indexMap=(HashMap)this.indexMap.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872026519
GPR[SPVAP]-1659872026519
GPR[EPVAP]-1659872027471
GPR[EPVS]-1659872027471
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.categoryKeys=(Comparable[])this.categoryKeys.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872027472
GPR[SPVAP]-1659872027472
GPR[EPVAP]-1659872028403
GPR[EPVS]-1659872028403
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesKeys=(Comparable[])this.seriesKeys.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872028404
GPR[SPVAP]-1659872028404
GPR[EPVAP]-1659872029306
GPR[EPVS]-1659872029306
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.startData=clone(this.startData);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872029307
GPR[SPVAP]-1659872029307
GPR[EPVAP]-1659872030211
GPR[EPVS]-1659872030211
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.endData=clone(this.endData);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872030212
GPR[SPVAP]-1659872030212
GPR[EPVAP]-1659872031162
GPR[EPVS]-1659872031163
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872031164
GPR[SPVAP]-1659872031164
GPR[EPVAP]-1659872032107
GPR[EPVS]-1659872032107
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesPaintList=(PaintList)this.seriesPaintList.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872032108
GPR[SPVAP]-1659872032108
GPR[EPVAP]-1659872033037
GPR[EPVS]-1659872033037
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesOutlinePaintList=(PaintList)this.seriesOutlinePaintList.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872033038
GPR[SPVAP]-1659872033038
GPR[EPVAP]-1659872033941
GPR[EPVS]-1659872033941
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesOutlineStrokeList=(StrokeList)this.seriesOutlineStrokeList.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872033942
GPR[SPVAP]-1659872033942
GPR[EPVAP]-1659872034846
GPR[EPVS]-1659872034846
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872034847
GPR[SPVAP]-1659872034847
GPR[EPVAP]-1659872035768
GPR[EPVS]-1659872035768
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872035769
GPR[SPVAP]-1659872035769
GPR[EPVAP]-1659872036668
GPR[EPVS]-1659872036668
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872036670
GPR[SPVAP]-1659872036670
GPR[EPVAP]-1659872037571
GPR[EPVS]-1659872037571
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872037573
GPR[SPVAP]-1659872037573
GPR[EPVAP]-1659872038463
GPR[EPVS]-1659872038463
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.quadrantOrigin=(Point2D)ObjectUtilities.clone(this.quadrantOrigin);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872038464
GPR[SPVAP]-1659872038464
GPR[EPVAP]-1659872039419
GPR[EPVS]-1659872039419
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.quadrantPaint=(Paint[])this.quadrantPaint.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872039420
GPR[SPVAP]-1659872039420
GPR[EPVAP]-1659872040399
GPR[EPVS]-1659872040399
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872040400
GPR[SPVAP]-1659872040400
GPR[EPVAP]-1659872041318
GPR[EPVS]-1659872041318
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.shape=ShapeUtilities.clone(this.shape);
clone.line=ShapeUtilities.clone(this.line);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872041319
GPR[SPVAP]-1659872041319
GPR[EPVAP]-1659872042233
GPR[EPVS]-1659872042233
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872042234
GPR[SPVAP]-1659872042234
GPR[EPVAP]-1659872043141
GPR[EPVS]-1659872043141
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.listenerList=new EventListenerList();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872043142
GPR[SPVAP]-1659872043142
GPR[EPVAP]-1659872044069
GPR[EPVS]-1659872044069
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.pieChart=(JFreeChart)this.pieChart.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872044070
GPR[SPVAP]-1659872044070
GPR[EPVAP]-1659872045009
GPR[EPVS]-1659872045009
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.sectionPaints=new HashMap(this.sectionPaints);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872045010
GPR[SPVAP]-1659872045010
GPR[EPVAP]-1659872045940
GPR[EPVS]-1659872045940
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.data=(List)ObjectUtilities.deepClone(this.data);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872045941
GPR[SPVAP]-1659872045941
GPR[EPVAP]-1659872046867
GPR[EPVS]-1659872046867
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.intervalDelegate=(IntervalXYDelegate)this.intervalDelegate.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872046868
GPR[SPVAP]-1659872046868
GPR[EPVAP]-1659872047796
GPR[EPVS]-1659872047796
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.data=(List)ObjectUtilities.deepClone(this.data);
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872047797
GPR[SPVAP]-1659872047797
GPR[EPVAP]-1659872048782
GPR[EPVS]-1659872048782
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.timeZone=(TimeZone)this.timeZone.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872048784
GPR[SPVAP]-1659872048784
GPR[EPVAP]-1659872049682
GPR[EPVS]-1659872049682
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.plot=null;
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872049683
GPR[SPVAP]-1659872049683
GPR[EPVAP]-1659872050576
GPR[EPVS]-1659872050576
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.lookupTable=new java.util.ArrayList(this.lookupTable);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872050577
GPR[SPVAP]-1659872050577
GPR[EPVAP]-1659872051478
GPR[EPVS]-1659872051478
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.tickUnits=new java.util.ArrayList(this.tickUnits);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872051479
GPR[SPVAP]-1659872051479
GPR[EPVAP]-1659872052373
GPR[EPVS]-1659872052373
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.sublabels=new HashMap(this.sublabels);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872052374
GPR[SPVAP]-1659872052374
GPR[EPVAP]-1659872053273
GPR[EPVS]-1659872053273
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.urlSeries=new java.util.ArrayList(this.urlSeries);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872053274
GPR[SPVAP]-1659872053274
GPR[EPVAP]-1659872054185
GPR[EPVS]-1659872054185
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.items=(List)ObjectUtilities.deepClone(this.items);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872054186
GPR[SPVAP]-1659872054186
GPR[EPVAP]-1659872055087
GPR[EPVS]-1659872055087
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.tasks=(List)ObjectUtilities.deepClone(this.tasks);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872055088
GPR[SPVAP]-1659872055088
GPR[EPVAP]-1659872056017
GPR[EPVS]-1659872056017
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.bins=(List)ObjectUtilities.deepClone(this.bins);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872056018
GPR[SPVAP]-1659872056018
GPR[EPVAP]-1659872056934
GPR[EPVS]-1659872056934
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesList=(List)ObjectUtilities.deepClone(this.seriesList);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872056935
GPR[SPVAP]-1659872056935
GPR[EPVAP]-1659872057876
GPR[EPVS]-1659872057876
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.datasets=(ValueDataset[])this.datasets.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872057877
GPR[SPVAP]-1659872057877
GPR[EPVAP]-1659872058776
GPR[EPVS]-1659872058776
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.seriesNeedle=(MeterNeedle[])this.seriesNeedle.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872058776
GPR[SPVAP]-1659872058776
GPR[EPVAP]-1659872059707
GPR[EPVS]-1659872059707
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

if(clone.dataset!=null){
clone.dataset.addChangeListener(clone);
}
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872059708
GPR[SPVAP]-1659872059708
GPR[EPVAP]-1659872060600
GPR[EPVS]-1659872060600
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.rangeAxis=(ValueAxis)ObjectUtilities.clone(this.rangeAxis);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872060601
GPR[SPVAP]-1659872060601
GPR[EPVAP]-1659872061605
GPR[EPVS]-1659872061605
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

if(clone.rangeAxis!=null){
clone.rangeAxis.setPlot(clone);
clone.rangeAxis.addChangeListener(clone);
}
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872061606
GPR[SPVAP]-1659872061606
GPR[EPVAP]-1659872062497
GPR[EPVS]-1659872062497
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.valueFormat=(NumberFormat)this.valueFormat.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872062498
GPR[SPVAP]-1659872062498
GPR[EPVAP]-1659872063419
GPR[EPVS]-1659872063419
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.subrangePaint=(Paint[])this.subrangePaint.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872063420
GPR[SPVAP]-1659872063420
GPR[EPVAP]-1659872064316
GPR[EPVS]-1659872064317
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872064318
GPR[SPVAP]-1659872064318
GPR[EPVAP]-1659872065227
GPR[EPVS]-1659872065227
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.intervals=new java.util.ArrayList(this.intervals);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872065228
GPR[SPVAP]-1659872065228
GPR[EPVAP]-1659872066183
GPR[EPVS]-1659872066183
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.listeners=new EventListenerList();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872066184
GPR[SPVAP]-1659872066184
GPR[EPVAP]-1659872067132
GPR[EPVS]-1659872067132
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872067133
GPR[SPVAP]-1659872067133
GPR[EPVAP]-1659872068047
GPR[EPVS]-1659872068047
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.dates=new java.util.ArrayList(this.dates);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872068049
GPR[SPVAP]-1659872068049
GPR[EPVAP]-1659872068947
GPR[EPVS]-1659872068948
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.items=new java.util.ArrayList(this.items);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872068949
GPR[SPVAP]-1659872068949
GPR[EPVAP]-1659872069857
GPR[EPVS]-1659872069857
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.keys=new java.util.ArrayList(this.keys);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872069858
GPR[SPVAP]-1659872069858
GPR[EPVAP]-1659872070766
GPR[EPVS]-1659872070766
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.xCrosshairs=(List)ObjectUtilities.deepClone(this.xCrosshairs);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872070768
GPR[SPVAP]-1659872070768
GPR[EPVAP]-1659872071671
GPR[EPVS]-1659872071671
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.yCrosshairs=(List)ObjectUtilities.deepClone(this.yCrosshairs);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872071672
GPR[SPVAP]-1659872071672
GPR[EPVAP]-1659872072565
GPR[EPVS]-1659872072565
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.subplotInfo=new java.util.ArrayList(this.subplotInfo.size());
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872072566
GPR[SPVAP]-1659872072566
GPR[EPVAP]-1659872073473
GPR[EPVS]-1659872073473
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.tickLabelFontMap=new HashMap(this.tickLabelFontMap);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872073475
GPR[SPVAP]-1659872073475
GPR[EPVAP]-1659872074389
GPR[EPVS]-1659872074389
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.tickLabelPaintMap=new HashMap(this.tickLabelPaintMap);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872074390
GPR[SPVAP]-1659872074390
GPR[EPVAP]-1659872075355
GPR[EPVS]-1659872075355
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.categoryLabelToolTips=new HashMap(this.categoryLabelToolTips);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872075356
GPR[SPVAP]-1659872075356
GPR[EPVAP]-1659872076266
GPR[EPVS]-1659872076266
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.columnKeys=new java.util.ArrayList(this.columnKeys);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872076268
GPR[SPVAP]-1659872076268
GPR[EPVAP]-1659872077175
GPR[EPVS]-1659872077175
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.rowKeys=new java.util.ArrayList(this.rowKeys);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872077176
GPR[SPVAP]-1659872077176
GPR[EPVAP]-1659872078102
GPR[EPVS]-1659872078102
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.rows=(List)ObjectUtilities.deepClone(this.rows);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872078103
GPR[SPVAP]-1659872078103
GPR[EPVAP]-1659872079014
GPR[EPVS]-1659872079014
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.entities=new java.util.ArrayList(this.entities.size());
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872079015
GPR[SPVAP]-1659872079015
GPR[EPVAP]-1659872079959
GPR[EPVS]-1659872079959
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.data=new java.util.ArrayList();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872079961
GPR[SPVAP]-1659872079961
GPR[EPVAP]-1659872080862
GPR[EPVS]-1659872080862
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.cornerTextItems=new ArrayList(this.cornerTextItems);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872080863
GPR[SPVAP]-1659872080863
GPR[EPVAP]-1659872081804
GPR[EPVS]-1659872081804
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.data=new java.util.ArrayList(getSeriesCount());
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872081805
GPR[SPVAP]-1659872081805
GPR[EPVAP]-1659872082776
GPR[EPVS]-1659872082776
========
Object clone=null;
copy.data=new java.util.ArrayList();
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

return clone;

========
MM Copying to MM
GPR[SPVS]-1659872082778
GPR[SPVAP]-1659872082778
GPR[EPVAP]-1659872083691
GPR[EPVS]-1659872083691
========
Object clone=null;
copy.data=new ArrayList();
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

return clone;

========
MM Copying to MM
GPR[SPVS]-1659872083692
GPR[SPVAP]-1659872083692
GPR[EPVAP]-1659872084587
GPR[EPVS]-1659872084587
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.intervalDelegate=new IntervalXYDelegate(clone);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872084589
GPR[SPVAP]-1659872084589
GPR[EPVAP]-1659872085490
GPR[EPVS]-1659872085490
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872085491
GPR[SPVAP]-1659872085491
GPR[EPVAP]-1659872086397
GPR[EPVS]-1659872086397
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.intervalDelegate.setAutoWidth(isAutoWidth());
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872086398
GPR[SPVAP]-1659872086398
GPR[EPVAP]-1659872087345
GPR[EPVS]-1659872087345
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872087346
GPR[SPVAP]-1659872087346
GPR[EPVAP]-1659872088243
GPR[EPVS]-1659872088243
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872088244
GPR[SPVAP]-1659872088244
GPR[EPVAP]-1659872089136
GPR[EPVS]-1659872089136
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872089137
GPR[SPVAP]-1659872089137
GPR[EPVAP]-1659872090053
GPR[EPVS]-1659872090053
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872090054
GPR[SPVAP]-1659872090054
GPR[EPVAP]-1659872090959
GPR[EPVS]-1659872090959
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872090961
GPR[SPVAP]-1659872090961
GPR[EPVAP]-1659872091891
GPR[EPVS]-1659872091891
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.list=new java.util.ArrayList(getSeriesCount());
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872091892
GPR[SPVAP]-1659872091892
GPR[EPVAP]-1659872092799
GPR[EPVS]-1659872092799
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.rows=new java.util.ArrayList(this.rows.size());
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872092800
GPR[SPVAP]-1659872092800
GPR[EPVAP]-1659872093707
GPR[EPVS]-1659872093707
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.columnKeys=new java.util.ArrayList(this.columnKeys);
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872093708
GPR[SPVAP]-1659872093708
GPR[EPVAP]-1659872094623
GPR[EPVS]-1659872094623
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872094625
GPR[SPVAP]-1659872094625
GPR[EPVAP]-1659872095535
GPR[EPVS]-1659872095535
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872095536
GPR[SPVAP]-1659872095536
GPR[EPVAP]-1659872096451
GPR[EPVS]-1659872096451
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872096452
GPR[SPVAP]-1659872096452
GPR[EPVAP]-1659872097351
GPR[EPVS]-1659872097351
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872097352
GPR[SPVAP]-1659872097352
GPR[EPVAP]-1659872098249
GPR[EPVS]-1659872098249
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872098250
GPR[SPVAP]-1659872098250
GPR[EPVAP]-1659872099184
GPR[EPVS]-1659872099184
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872099185
GPR[SPVAP]-1659872099185
GPR[EPVAP]-1659872100123
GPR[EPVS]-1659872100123
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872100124
GPR[SPVAP]-1659872100124
GPR[EPVAP]-1659872101045
GPR[EPVS]-1659872101045
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872101046
GPR[SPVAP]-1659872101046
GPR[EPVAP]-1659872101960
GPR[EPVS]-1659872101960
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872101961
GPR[SPVAP]-1659872101961
GPR[EPVAP]-1659872102905
GPR[EPVS]-1659872102905
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872102906
GPR[SPVAP]-1659872102906
GPR[EPVAP]-1659872103844
GPR[EPVS]-1659872103844
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872103845
GPR[SPVAP]-1659872103845
GPR[EPVAP]-1659872104764
GPR[EPVS]-1659872104764
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872104765
GPR[SPVAP]-1659872104765
GPR[EPVAP]-1659872105679
GPR[EPVS]-1659872105679
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.quadrantOrigin=(Point2D)ObjectUtilities.clone(this.quadrantOrigin);
clone.quadrantPaint=(Paint[])this.quadrantPaint.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872105681
GPR[SPVAP]-1659872105681
GPR[EPVAP]-1659872106617
GPR[EPVS]-1659872106617
========
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

clone.datasets=(ValueDataset[])this.datasets.clone();
clone.seriesNeedle=(MeterNeedle[])this.seriesNeedle.clone();
return clone;

========
MM Copying to MM
GPR[SPVS]-1659872106619
GPR[SPVAP]-1659872106619
GPR[EPVAP]-1659872107517
GPR[EPVS]-1659872107517
GPR[ESUN]-1659872107517
GPR[SSUN]-1659872107517
org.jfree.data.time.TimeSeriesDataItem,268
GPR[ESUN]-1659872107963
GPR[SSUN]-1659872107963
org.jfree.data.time.TimeSeriesDataItem,272
Find no block!
GPR[SSUN]-1659872108302
org.jfree.data.time.TimeSeriesDataItem,273
GPR[ESUN]-1659872108666
GPR[SSUN]-1659872108666
org.jfree.data.time.TimeSeries,576
========
if(item==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659872110691
GPR[SPVAP]-1659872110691
GPR[EPVAP]-1659872115287
GPR[SPVATF]-1659872115287
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872116403
GPR[EPVS]-1659872116403
========
if(item!=null){
throw new IllegalArgumentException("Null \'item\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659872116404
GPR[SPVAP]-1659872116404
GPR[EPVAP]-1659872117743
GPR[SPVATF]-1659872117743
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872118907
GPR[EPVS]-1659872118907
========
updateBoundsForAddedItem(item);
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659872118908
GPR[SPVAP]-1659872118908
GPR[EPVAP]-1659872120185
GPR[SPVATF]-1659872120185
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872121296
GPR[EPVS]-1659872121296
========
this.data.add(-maximumItemCount-1,item);
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659872121297
GPR[SPVAP]-1659872121297
GPR[EPVAP]-1659872122584
GPR[SPVATF]-1659872122584
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872123717
GPR[EPVS]-1659872123717
========
this.data.add(-maximumItemCount-1,item);
updateBoundsForAddedItem(item);
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659872123719
GPR[SPVAP]-1659872123719
GPR[EPVAP]-1659872125050
GPR[SPVATF]-1659872125050
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872126200
GPR[EPVS]-1659872126200
GPR[ESUN]-1659872126200
GPR[SSUN]-1659872126200
org.jfree.data.time.TimeSeries,579
========
if(item!=null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872128650
GPR[SPVAP]-1659872128650
GPR[EPVAP]-1659872133213
GPR[SPVATF]-1659872133213
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872134371
GPR[EPVS]-1659872134371
========
if(item==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872134373
GPR[SPVAP]-1659872134373
GPR[EPVAP]-1659872135687
GPR[SPVATF]-1659872135687
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872136840
GPR[EPVS]-1659872136840
========
if(this.c==null){
this.timePeriodClass=item.getPeriod().getClass();
}else if(!this.timePeriodClass.equals(periodClass)){
String "You are trying to add data where the time "+"period class is "+item.getPeriod().getClass().getName()="You are trying to add data where the time "+"period class is "+periodClass.getName();
throw new SeriesException(msg);
}
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872136841
GPR[SPVAP]-1659872136841
GPR[EPVAP]-1659872137447
GPR[EPVS]-1659872137447
========
clone.quadrantOrigin=(Point2D)ObjectUtilities.clone(this.quadrantOrigin);
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872137448
GPR[SPVAP]-1659872137448
GPR[EPVAP]-1659872138191
GPR[EPVS]-1659872138191
========
clone.quadrantPaint=(Paint[])this.quadrantPaint.clone();
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872138192
GPR[SPVAP]-1659872138192
GPR[EPVAP]-1659872138976
GPR[EPVS]-1659872138976
========
if(item==null){
throw new IllegalArgumentException("Null \'polygon\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872138979
GPR[SPVAP]-1659872138979
GPR[EPVAP]-1659872140283
GPR[SPVATF]-1659872140283
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872141392
GPR[EPVS]-1659872141392
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
if(polygon.length%2!=0){
throw new IllegalArgumentException("The \'polygon\' array must "+"contain an even number of items.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872141393
GPR[SPVAP]-1659872141393
GPR[EPVAP]-1659872142163
GPR[EPVS]-1659872142163
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
this.data.add(-maximumItemCount-1,item);
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872142165
GPR[SPVAP]-1659872142165
GPR[EPVAP]-1659872143502
GPR[SPVATF]-1659872143502
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872144614
GPR[EPVS]-1659872144614
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
updateBoundsForAddedItem(item);
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872144615
GPR[SPVAP]-1659872144615
GPR[EPVAP]-1659872145901
GPR[SPVATF]-1659872145901
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872147013
GPR[EPVS]-1659872147013
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
this.data.add(-maximumItemCount-1,item);
updateBoundsForAddedItem(item);
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872147014
GPR[SPVAP]-1659872147014
GPR[EPVAP]-1659872148313
GPR[SPVATF]-1659872148313
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872149429
GPR[EPVS]-1659872149429
========
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872149430
GPR[SPVAP]-1659872149430
GPR[EPVAP]-1659872150186
GPR[EPVS]-1659872150186
========
if(item==null){
throw new IllegalArgumentException("Null \'coefficients\' argument");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872150187
GPR[SPVAP]-1659872150187
GPR[EPVAP]-1659872151462
GPR[SPVATF]-1659872151462
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872152636
GPR[EPVS]-1659872152636
========
if(this.data!=null){
clone.data=ArrayUtilities.clone(this.data);
}
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872152637
GPR[SPVAP]-1659872152637
GPR[EPVAP]-1659872153395
GPR[EPVS]-1659872153395
========
clone.listenerList=new EventListenerList();
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872153397
GPR[SPVAP]-1659872153397
GPR[EPVAP]-1659872154200
GPR[EPVS]-1659872154200
========
try{
Method c.getMethod("getInstance",(Class[])null)=c.getMethod("getInstance",(Class[])null);
return (Library)m.invoke(null,(Object[])null);
}catch (Exception e) {
}

if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872154202
GPR[SPVAP]-1659872154202
GPR[EPVAP]-1659872154826
GPR[EPVS]-1659872154826
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872154827
GPR[SPVAP]-1659872154827
GPR[EPVAP]-1659872156875
GPR[SPVATF]-1659872156875
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872158183
GPR[EPVS]-1659872158183
========
this.data.add(item);
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872158184
GPR[SPVAP]-1659872158184
GPR[EPVAP]-1659872159606
GPR[SPVATF]-1659872159606
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872160760
GPR[EPVS]-1659872160760
========
updateBounds(item.getPeriod(),this.data.size()-1);
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872160761
GPR[SPVAP]-1659872160761
GPR[EPVAP]-1659872161540
GPR[EPVS]-1659872161540
========
fireSeriesChanged();
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872161542
GPR[SPVAP]-1659872161542
GPR[EPVAP]-1659872162829
GPR[SPVATF]-1659872162829
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872163970
GPR[EPVS]-1659872163970
========
this.data.add(item);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872163972
GPR[SPVAP]-1659872163972
GPR[EPVAP]-1659872165275
GPR[SPVATF]-1659872165275
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872166409
GPR[EPVS]-1659872166409
========
fireSeriesChanged();
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872166410
GPR[SPVAP]-1659872166410
GPR[EPVAP]-1659872167727
GPR[SPVATF]-1659872167727
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872168840
GPR[EPVS]-1659872168840
========
this.data.add(item);
fireSeriesChanged();
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872168842
GPR[SPVAP]-1659872168842
GPR[EPVAP]-1659872170135
GPR[SPVATF]-1659872170135
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872171256
GPR[EPVS]-1659872171256
========
this.data.add(item);
fireSeriesChanged();
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872171258
GPR[SPVAP]-1659872171258
GPR[EPVAP]-1659872172536
GPR[SPVATF]-1659872172536
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872173664
GPR[EPVS]-1659872173664
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
clone.entities=new java.util.ArrayList(this.entities.size());
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872173665
GPR[SPVAP]-1659872173665
GPR[EPVAP]-1659872174486
GPR[EPVS]-1659872174486
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
clone.data=new java.util.ArrayList();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872174488
GPR[SPVAP]-1659872174488
GPR[EPVAP]-1659872175239
GPR[EPVS]-1659872175239
========
if(item==null){
throw new NullPointerException("Library must not be null.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872175240
GPR[SPVAP]-1659872175240
GPR[EPVAP]-1659872176533
GPR[SPVATF]-1659872176533
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872177640
GPR[EPVS]-1659872177640
========
if(item.getValue()!=null){
double item.getValue().doubleValue()=oldYN.doubleValue();
if(!Double.isNaN(oldY)){
notify=oldY<=this.minY||oldY>=this.maxY;
}
}
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872177642
GPR[SPVAP]-1659872177642
GPR[EPVAP]-1659872178290
GPR[EPVS]-1659872178290
========
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872178291
GPR[SPVAP]-1659872178291
GPR[EPVAP]-1659872179048
GPR[EPVS]-1659872179048
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
clone.values=(DefaultKeyedValues2D)this.values.clone();
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872179049
GPR[SPVAP]-1659872179049
GPR[EPVAP]-1659872179814
GPR[EPVS]-1659872179814
========
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872179815
GPR[SPVAP]-1659872179815
GPR[EPVAP]-1659872180564
GPR[EPVS]-1659872180564
========
clone.intervalDelegate.setAutoWidth(isAutoWidth());
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872180566
GPR[SPVAP]-1659872180566
GPR[EPVAP]-1659872181322
GPR[EPVS]-1659872181322
========
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872181323
GPR[SPVAP]-1659872181323
GPR[EPVAP]-1659872182078
GPR[EPVS]-1659872182078
========
c=(TimeSeriesDataItem)item.clone();
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872182080
GPR[SPVAP]-1659872182080
GPR[EPVAP]-1659872182828
GPR[EPVS]-1659872182828
========
if(timePeriodClass.getClassLoader()==null){
return ClassLoader.getSystemClassLoader();
}else {
return applicationCL;
}
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872182829
GPR[SPVAP]-1659872182829
GPR[EPVAP]-1659872183578
GPR[EPVS]-1659872183578
========
c=(XYDataItem)(XYDataItem)this.data.get(maximumItemCount).clone();
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872183580
GPR[SPVAP]-1659872183580
GPR[EPVAP]-1659872184334
GPR[EPVS]-1659872184334
========
if(!Double.isNaN((XYDataItem)this.data.get(maximumItemCount).getYValue())){
notify=oldY<=this.minY||oldY>=this.maxY;
}
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872184336
GPR[SPVAP]-1659872184336
GPR[EPVAP]-1659872185119
GPR[EPVS]-1659872185119
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
if(DEFAULT_RANGE_DESCRIPTION.startsWith("/")){
return name.substring(1);
}
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872185121
GPR[SPVAP]-1659872185121
GPR[EPVAP]-1659872185871
GPR[EPVS]-1659872185871
========
if(c.getName().lastIndexOf('.')==-1){
return DEFAULT_RANGE_DESCRIPTION;
}
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872185872
GPR[SPVAP]-1659872185872
GPR[EPVAP]-1659872186646
GPR[EPVS]-1659872186646
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
result.subplots=(List)ObjectUtilities.deepClone(this.subplots);
Class c=item.getPeriod().getClass();

========
MM Copying to MM
GPR[SPVS]-1659872186647
GPR[SPVAP]-1659872186647
GPR[EPVAP]-1659872187399
GPR[EPVS]-1659872187399
GPR[ESUN]-1659872187399
GPR[SSUN]-1659872187399
org.jfree.data.time.TimeSeries,580
GPR[ESUN]-1659872187916
GPR[SSUN]-1659872187916
org.jfree.data.time.TimeSeries,581
========
if(this.timePeriodClass!=null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659872190665
GPR[SPVAP]-1659872190665
GPR[EPVAP]-1659872195283
GPR[SPVATF]-1659872195283
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872196416
GPR[EPVS]-1659872196416
========
b.append(new Arc2D.Double(-9.0,-7.0,10,14,0.0,25.5,Arc2D.OPEN),true);
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659872196417
GPR[SPVAP]-1659872196418
GPR[EPVAP]-1659872197177
GPR[EPVS]-1659872197177
========
b.append(new Arc2D.Double(0.0,-7.0,10,14,154.5,25.5,Arc2D.OPEN),true);
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659872197179
GPR[SPVAP]-1659872197179
GPR[EPVAP]-1659872197992
GPR[EPVS]-1659872197992
========
b.closePath();
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659872197993
GPR[SPVAP]-1659872197993
GPR[EPVAP]-1659872198749
GPR[EPVS]-1659872198749
========
b.transform(getTransform());
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659872198750
GPR[SPVAP]-1659872198750
GPR[EPVAP]-1659872199498
GPR[EPVS]-1659872199498
========
if(this.timePeriodClass==Second.class){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659872199500
GPR[SPVAP]-1659872199500
GPR[EPVAP]-1659872200834
GPR[SPVATF]-1659872200834
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872201971
GPR[EPVS]-1659872201971
========
this.maximumItemCount=maximumItemCount-1;
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659872201973
GPR[SPVAP]-1659872201973
GPR[EPVAP]-1659872203272
GPR[SPVATF]-1659872203272
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872204445
GPR[EPVS]-1659872204445
========
this.maximumItemCount=START;
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659872204446
GPR[SPVAP]-1659872204446
GPR[EPVAP]-1659872205205
GPR[EPVS]-1659872205205
========
this.maximumItemCount=maximumItemCount-1;
if(this.timePeriodClass==Second.class){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659872205206
GPR[SPVAP]-1659872205206
GPR[EPVAP]-1659872206515
GPR[SPVATF]-1659872206515
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872207665
GPR[EPVS]-1659872207665
GPR[ESUN]-1659872207674
GPR[SSUN]-1659872207674
org.jfree.data.time.TimeSeries,582
GPR[ESUN]-1659872209847
GPR[SSUN]-1659872209847
org.jfree.data.time.TimeSeries,596
========
if(this.timePeriodClass!=null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872212867
GPR[SPVAP]-1659872212867
GPR[EPVAP]-1659872217378
GPR[SPVATF]-1659872217378
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872218502
GPR[EPVS]-1659872218502
========
b.append(new Arc2D.Double(-9.0,-7.0,10,14,0.0,25.5,Arc2D.OPEN),true);
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872218505
GPR[SPVAP]-1659872218505
GPR[EPVAP]-1659872219275
GPR[EPVS]-1659872219275
========
b.append(new Arc2D.Double(0.0,-7.0,10,14,154.5,25.5,Arc2D.OPEN),true);
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872219276
GPR[SPVAP]-1659872219276
GPR[EPVAP]-1659872220099
GPR[EPVS]-1659872220099
========
b.closePath();
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872220101
GPR[SPVAP]-1659872220101
GPR[EPVAP]-1659872220855
GPR[EPVS]-1659872220855
========
b.transform(getTransform());
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872220856
GPR[SPVAP]-1659872220856
GPR[EPVAP]-1659872221633
GPR[EPVS]-1659872221633
========
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
if(!ObjectUtilities.equal(this.c,that.timePeriodClass)){
return false;
}
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872221634
GPR[SPVAP]-1659872221634
GPR[EPVAP]-1659872222385
GPR[EPVS]-1659872222385
========
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872222387
GPR[SPVAP]-1659872222387
GPR[EPVAP]-1659872223146
GPR[EPVS]-1659872223146
========
if(this.timePeriodClass==Second.class){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872223151
GPR[SPVAP]-1659872223151
GPR[EPVAP]-1659872224505
GPR[SPVATF]-1659872224505
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872225630
GPR[EPVS]-1659872225630
========
this.maximumItemCount=maximumItemCount;
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872225631
GPR[SPVAP]-1659872225631
GPR[EPVAP]-1659872226948
GPR[SPVATF]-1659872226949
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872228101
GPR[EPVS]-1659872228101
========
this.count=maximumItemCount-1;
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872228102
GPR[SPVAP]-1659872228102
GPR[EPVAP]-1659872228864
GPR[EPVS]-1659872228864
========
this.maximumItemCount=START;
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872228865
GPR[SPVAP]-1659872228865
GPR[EPVAP]-1659872229618
GPR[EPVS]-1659872229618
========
this.added=true;
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872229620
GPR[SPVAP]-1659872229620
GPR[EPVAP]-1659872230414
GPR[EPVS]-1659872230414
========
this.maximumItemCount=maximumItemCount;
if(this.timePeriodClass==Second.class){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872230416
GPR[SPVAP]-1659872230416
GPR[EPVAP]-1659872231719
GPR[SPVATF]-1659872231719
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872232877
GPR[EPVS]-1659872232877
========
if(count==0){
throw new IllegalArgumentException("Empty list not permitted.");
}
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872232882
GPR[SPVAP]-1659872232882
GPR[EPVAP]-1659872233634
GPR[EPVS]-1659872233634
========
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
b.defaultWriteObject();
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872233642
GPR[SPVAP]-1659872233642
GPR[EPVAP]-1659872234414
GPR[EPVS]-1659872234414
========
b.writeInt(count);
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872234415
GPR[SPVAP]-1659872234415
GPR[EPVAP]-1659872235166
GPR[EPVS]-1659872235166
========
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
boolean count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872235169
GPR[SPVAP]-1659872235169
GPR[EPVAP]-1659872235935
GPR[EPVS]-1659872235935
========
if(maximumItemCount<maximumItemCount+1){
throw new IllegalArgumentException("Not enough data.");
}
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872235938
GPR[SPVAP]-1659872235938
GPR[EPVAP]-1659872237220
GPR[SPVATF]-1659872237220
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872238370
GPR[EPVS]-1659872238370
========
if(Double.isNaN(minY)){
y1=0.0;
notify=true;
}
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872238372
GPR[SPVAP]-1659872238372
GPR[EPVAP]-1659872239132
GPR[EPVS]-1659872239132
========
if(item.getValue()!=null){
double item.getValue().doubleValue()=oldYN.doubleValue();
if(!Double.isNaN(oldY)){
added=oldY<=this.minY||oldY>=this.maxY;
}
}
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872239135
GPR[SPVAP]-1659872239135
GPR[EPVAP]-1659872239762
GPR[EPVS]-1659872239762
========
fireSeriesChanged();
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872239763
GPR[SPVAP]-1659872239763
GPR[EPVAP]-1659872241090
GPR[SPVATF]-1659872241090
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872242224
GPR[EPVS]-1659872242224
========
if(count==0){
return true;
}
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
MM Copying to MM
GPR[SPVS]-1659872242228
GPR[SPVAP]-1659872242228
GPR[EPVAP]-1659872242994
GPR[EPVS]-1659872242994
GPR[ESUN]-1659872243007
GPR[SSUN]-1659872243007
org.jfree.data.time.TimeSeries,597
GPR[ESUN]-1659872243426
GPR[SSUN]-1659872243426
org.jfree.data.time.TimeSeries,598
========
if(count==0){
if(!index){
b.append(" alt=\"\"");
}
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872249257
GPR[SPVAP]-1659872249257
GPR[EPVAP]-1659872251639
GPR[EPVS]-1659872251639
========
if(count==0){
b.append("/>");
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872251640
GPR[SPVAP]-1659872251640
GPR[EPVAP]-1659872252627
GPR[EPVS]-1659872252627
========
if(count==0){
if(!index){
b.append(" alt=\"\"");
}
b.append("/>");

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872252628
GPR[SPVAP]-1659872252628
GPR[EPVAP]-1659872253578
GPR[EPVS]-1659872253578
========
if(seriesIndex==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872253582
GPR[SPVAP]-1659872253582
GPR[EPVAP]-1659872254576
GPR[EPVS]-1659872254576
========
if(count==0){
this.data.add(data);
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872254578
GPR[SPVAP]-1659872254578
GPR[EPVAP]-1659872257726
GPR[SPVATF]-1659872257726
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872258850
GPR[EPVS]-1659872258850
========
if(end==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872258851
GPR[SPVAP]-1659872258851
GPR[EPVAP]-1659872259593
GPR[EPVS]-1659872259593
========
if(count==maximumItemCount){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872259594
GPR[SPVAP]-1659872259594
GPR[EPVAP]-1659872260900
GPR[SPVATF]-1659872260901
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872262013
GPR[EPVS]-1659872262013
========
if(maximumItemCount<0){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872262014
GPR[SPVAP]-1659872262014
GPR[EPVAP]-1659872263347
GPR[SPVATF]-1659872263347
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872264555
GPR[EPVS]-1659872264555
========
copy.data=new java.util.ArrayList();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872264557
GPR[SPVAP]-1659872264557
GPR[EPVAP]-1659872265310
GPR[EPVS]-1659872265310
========
if(this.data.size()>0){
for(int index=maximumItemCount;index<=count;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem last=(TimeSeriesDataItem)item.clone();
try{
(TimeSeries)super.clone().add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872265312
GPR[SPVAP]-1659872265312
GPR[EPVAP]-1659872265930
GPR[EPVS]-1659872265930
========
if(maximumItemCount<0){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(count==maximumItemCount){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872265931
GPR[SPVAP]-1659872265931
GPR[EPVAP]-1659872267260
GPR[SPVATF]-1659872267260
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872268387
GPR[EPVS]-1659872268387
========
if(index==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872268389
GPR[SPVAP]-1659872268389
GPR[EPVAP]-1659872269140
GPR[EPVS]-1659872269140
========
if(position==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872269143
GPR[SPVAP]-1659872269143
GPR[EPVAP]-1659872269914
GPR[EPVS]-1659872269914
========
if(days==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872269917
GPR[SPVAP]-1659872269917
GPR[EPVAP]-1659872270683
GPR[EPVS]-1659872270683
========
if(hours==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872270684
GPR[SPVAP]-1659872270684
GPR[EPVAP]-1659872271471
GPR[EPVS]-1659872271471
========
added=(minY<=minY)&&(minY<=minY);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872271473
GPR[SPVAP]-1659872271473
GPR[EPVAP]-1659872272774
GPR[SPVATF]-1659872272774
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872273909
GPR[EPVS]-1659872273909
========
if(rowIndex==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872273911
GPR[SPVAP]-1659872273911
GPR[EPVAP]-1659872274660
GPR[EPVS]-1659872274660
========
if(keyIndex==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872274663
GPR[SPVAP]-1659872274663
GPR[EPVAP]-1659872275422
GPR[EPVS]-1659872275422
========
if(middle==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872275424
GPR[SPVAP]-1659872275424
GPR[EPVAP]-1659872276199
GPR[EPVS]-1659872276199
========
if(maximumItemCount==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872276202
GPR[SPVAP]-1659872276202
GPR[EPVAP]-1659872277474
GPR[SPVATF]-1659872277474
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872278595
GPR[EPVS]-1659872278595
========
if(pos==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872278597
GPR[SPVAP]-1659872278597
GPR[EPVAP]-1659872279359
GPR[EPVS]-1659872279359
========
if(count==0){
start=maximumItemCount+1;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872279362
GPR[SPVAP]-1659872279362
GPR[EPVAP]-1659872280157
GPR[EPVS]-1659872280157
========
if(count==0){
index++;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872280158
GPR[SPVAP]-1659872280158
GPR[EPVAP]-1659872280912
GPR[EPVS]-1659872280912
========
if(count==0){
start=maximumItemCount+1;
index++;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872280913
GPR[SPVAP]-1659872280913
GPR[EPVAP]-1659872281681
GPR[EPVS]-1659872281681
========
data.add(removeStringDelimiters(b.substring(maximumItemCount,line.length())));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872281682
GPR[SPVAP]-1659872281682
GPR[EPVAP]-1659872282441
GPR[EPVS]-1659872282441
========
fireChartChanged();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872282442
GPR[SPVAP]-1659872282442
GPR[EPVAP]-1659872283225
GPR[EPVS]-1659872283225
========
if(value==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872283228
GPR[SPVAP]-1659872283228
GPR[EPVAP]-1659872283974
GPR[EPVS]-1659872283975
========
if(count==0){
if(minY>maxY){
maxOutlier=minY;
}
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872283976
GPR[SPVAP]-1659872283976
GPR[EPVAP]-1659872284734
GPR[EPVS]-1659872284734
========
if(start==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872284737
GPR[SPVAP]-1659872284737
GPR[EPVAP]-1659872285489
GPR[EPVS]-1659872285489
========
if(count!=0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872285492
GPR[SPVAP]-1659872285492
GPR[EPVAP]-1659872286792
GPR[SPVATF]-1659872286792
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872287930
GPR[EPVS]-1659872287930
========
if(!ObjectUtilities.equal(getDomainDescription(),b.getDomainDescription())){
return false;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872287932
GPR[SPVAP]-1659872287932
GPR[EPVAP]-1659872288673
GPR[EPVS]-1659872288673
========
if(!ObjectUtilities.equal(getRangeDescription(),b.getRangeDescription())){
return false;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872288674
GPR[SPVAP]-1659872288674
GPR[EPVAP]-1659872289450
GPR[EPVS]-1659872289450
========
if(!ObjectUtilities.equal(this.timePeriodClass,that.timePeriodClass)){
return false;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872289452
GPR[SPVAP]-1659872289452
GPR[EPVAP]-1659872290235
GPR[EPVS]-1659872290235
========
if(getMaximumItemAge()!=b.getMaximumItemAge()){
return false;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872290237
GPR[SPVAP]-1659872290237
GPR[EPVAP]-1659872290995
GPR[EPVS]-1659872290995
========
if(getMaximumItemCount()!=b.getMaximumItemCount()){
return false;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872290996
GPR[SPVAP]-1659872290996
GPR[EPVAP]-1659872291749
GPR[EPVS]-1659872291749
========
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872291751
GPR[SPVAP]-1659872291751
GPR[EPVAP]-1659872292535
GPR[EPVS]-1659872292535
========
if(count==0){
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872292538
GPR[SPVAP]-1659872292538
GPR[EPVAP]-1659872293309
GPR[EPVS]-1659872293309
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872293310
GPR[SPVAP]-1659872293310
GPR[EPVAP]-1659872294092
GPR[EPVS]-1659872294092
========
if(count==0){
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872294093
GPR[SPVAP]-1659872294093
GPR[EPVAP]-1659872294871
GPR[EPVS]-1659872294871
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872294873
GPR[SPVAP]-1659872294873
GPR[EPVAP]-1659872295643
GPR[EPVS]-1659872295643
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872295644
GPR[SPVAP]-1659872295644
GPR[EPVAP]-1659872296423
GPR[EPVS]-1659872296423
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872296425
GPR[SPVAP]-1659872296425
GPR[EPVAP]-1659872297221
GPR[EPVS]-1659872297221
========
if(count==0){
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.TOP_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872297223
GPR[SPVAP]-1659872297223
GPR[EPVAP]-1659872298031
GPR[EPVS]-1659872298031
========
if(count==0){
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.TOP_LEFT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872298032
GPR[SPVAP]-1659872298032
GPR[EPVAP]-1659872298870
GPR[EPVS]-1659872298870
========
if(count==0){
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.TOP_RIGHT;
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.TOP_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872298871
GPR[SPVAP]-1659872298871
GPR[EPVAP]-1659872299643
GPR[EPVS]-1659872299643
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872299644
GPR[SPVAP]-1659872299644
GPR[EPVAP]-1659872300417
GPR[EPVS]-1659872300417
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872300419
GPR[SPVAP]-1659872300419
GPR[EPVAP]-1659872301178
GPR[EPVS]-1659872301178
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872301179
GPR[SPVAP]-1659872301179
GPR[EPVAP]-1659872301963
GPR[EPVS]-1659872301963
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872301964
GPR[SPVAP]-1659872301964
GPR[EPVAP]-1659872302722
GPR[EPVS]-1659872302722
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872302724
GPR[SPVAP]-1659872302724
GPR[EPVAP]-1659872303492
GPR[EPVS]-1659872303492
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872303502
GPR[SPVAP]-1659872303502
GPR[EPVAP]-1659872304258
GPR[EPVS]-1659872304258
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872304260
GPR[SPVAP]-1659872304260
GPR[EPVAP]-1659872305019
GPR[EPVS]-1659872305019
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872305021
GPR[SPVAP]-1659872305021
GPR[EPVAP]-1659872305778
GPR[EPVS]-1659872305778
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.TOP_LEFT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872305780
GPR[SPVAP]-1659872305780
GPR[EPVAP]-1659872306527
GPR[EPVS]-1659872306527
========
if(count==0){
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.BOTTOM_LEFT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872306528
GPR[SPVAP]-1659872306528
GPR[EPVAP]-1659872307273
GPR[EPVS]-1659872307273
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.TOP_LEFT;
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.BOTTOM_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872307274
GPR[SPVAP]-1659872307274
GPR[EPVAP]-1659872308028
GPR[EPVS]-1659872308028
========
if(columnIndex==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872308030
GPR[SPVAP]-1659872308030
GPR[EPVAP]-1659872308823
GPR[EPVS]-1659872308823
========
if(y==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872308827
GPR[SPVAP]-1659872308827
GPR[EPVAP]-1659872309579
GPR[EPVS]-1659872309579
========
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872309581
GPR[SPVAP]-1659872309581
GPR[EPVAP]-1659872310369
GPR[EPVS]-1659872310369
========
configureRangeAxes();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872310370
GPR[SPVAP]-1659872310370
GPR[EPVAP]-1659872311145
GPR[EPVS]-1659872311145
========
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872311146
GPR[SPVAP]-1659872311146
GPR[EPVAP]-1659872311909
GPR[EPVS]-1659872311909
========
if(currentTickValue==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872311911
GPR[SPVAP]-1659872311911
GPR[EPVAP]-1659872312671
GPR[EPVS]-1659872312671
========
if(count==0){
this.data.add(last);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872312672
GPR[SPVAP]-1659872312672
GPR[EPVAP]-1659872313437
GPR[EPVS]-1659872313437
========
if(startIndex==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872313440
GPR[SPVAP]-1659872313440
GPR[EPVAP]-1659872314225
GPR[EPVS]-1659872314225
========
if(total==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872314228
GPR[SPVAP]-1659872314228
GPR[EPVAP]-1659872314994
GPR[EPVS]-1659872314994
========
if(tickVal==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872314996
GPR[SPVAP]-1659872314996
GPR[EPVAP]-1659872315762
GPR[EPVS]-1659872315762
========
if(getDomainAxis()!=null){
axis.configure();
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872315764
GPR[SPVAP]-1659872315764
GPR[EPVAP]-1659872316530
GPR[EPVS]-1659872316530
========
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872316531
GPR[SPVAP]-1659872316531
GPR[EPVAP]-1659872317274
GPR[EPVS]-1659872317274
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872317276
GPR[SPVAP]-1659872317276
GPR[EPVAP]-1659872318896
GPR[EPVS]-1659872318896
========
b.setParent(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872318897
GPR[SPVAP]-1659872318897
GPR[EPVAP]-1659872319687
GPR[EPVS]-1659872319687
========
b.setWeight(count);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872319688
GPR[SPVAP]-1659872319688
GPR[EPVAP]-1659872320466
GPR[EPVS]-1659872320466
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872320468
GPR[SPVAP]-1659872320468
GPR[EPVAP]-1659872321287
GPR[EPVS]-1659872321287
========
b.setDomainAxis(null);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872321288
GPR[SPVAP]-1659872321288
GPR[EPVAP]-1659872322096
GPR[EPVS]-1659872322096
========
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872322098
GPR[SPVAP]-1659872322098
GPR[EPVAP]-1659872322916
GPR[EPVS]-1659872322916
========
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872322917
GPR[SPVAP]-1659872322917
GPR[EPVAP]-1659872323709
GPR[EPVS]-1659872323709
========
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872323710
GPR[SPVAP]-1659872323710
GPR[EPVAP]-1659872324475
GPR[EPVS]-1659872324475
========
if(getDomainAxis()!=null){
axis.configure();
}
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872324476
GPR[SPVAP]-1659872324476
GPR[EPVAP]-1659872325224
GPR[EPVS]-1659872325224
========
if(getDomainAxis()!=null){
axis.configure();
}
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872325225
GPR[SPVAP]-1659872325225
GPR[EPVAP]-1659872325983
GPR[EPVS]-1659872325983
========
if(getDomainAxis()!=null){
axis.configure();
}
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872325984
GPR[SPVAP]-1659872325984
GPR[EPVAP]-1659872326730
GPR[EPVS]-1659872326730
========
b.setRangeAxis(null);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872326731
GPR[SPVAP]-1659872326731
GPR[EPVAP]-1659872327499
GPR[EPVS]-1659872327499
========
if(getRangeAxis()!=null){
axis.configure();
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872327500
GPR[SPVAP]-1659872327500
GPR[EPVAP]-1659872328247
GPR[EPVS]-1659872328247
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872328249
GPR[SPVAP]-1659872328249
GPR[EPVAP]-1659872328999
GPR[EPVS]-1659872328999
========
b.setParent(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872329000
GPR[SPVAP]-1659872329000
GPR[EPVAP]-1659872329753
GPR[EPVS]-1659872329753
========
b.setWeight(count);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872329754
GPR[SPVAP]-1659872329754
GPR[EPVAP]-1659872330503
GPR[EPVS]-1659872330503
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872330504
GPR[SPVAP]-1659872330504
GPR[EPVAP]-1659872331273
GPR[EPVS]-1659872331273
========
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872331275
GPR[SPVAP]-1659872331275
GPR[EPVAP]-1659872332037
GPR[EPVS]-1659872332037
========
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872332038
GPR[SPVAP]-1659872332038
GPR[EPVAP]-1659872332791
GPR[EPVS]-1659872332791
========
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872332792
GPR[SPVAP]-1659872332792
GPR[EPVAP]-1659872333563
GPR[EPVS]-1659872333563
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872333564
GPR[SPVAP]-1659872333564
GPR[EPVAP]-1659872334325
GPR[EPVS]-1659872334325
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872334326
GPR[SPVAP]-1659872334326
GPR[EPVAP]-1659872335092
GPR[EPVS]-1659872335092
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872335093
GPR[SPVAP]-1659872335093
GPR[EPVAP]-1659872335864
GPR[EPVS]-1659872335864
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872335865
GPR[SPVAP]-1659872335865
GPR[EPVAP]-1659872336614
GPR[EPVS]-1659872336614
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872336616
GPR[SPVAP]-1659872336616
GPR[EPVAP]-1659872337363
GPR[EPVS]-1659872337363
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872337364
GPR[SPVAP]-1659872337364
GPR[EPVAP]-1659872338115
GPR[EPVS]-1659872338115
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872338116
GPR[SPVAP]-1659872338116
GPR[EPVAP]-1659872338902
GPR[EPVS]-1659872338902
========
b.setParent(this);
b.setWeight(count);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872338904
GPR[SPVAP]-1659872338904
GPR[EPVAP]-1659872339649
GPR[EPVS]-1659872339649
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872339650
GPR[SPVAP]-1659872339650
GPR[EPVAP]-1659872340402
GPR[EPVS]-1659872340402
========
b.setParent(this);
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872340403
GPR[SPVAP]-1659872340403
GPR[EPVAP]-1659872341161
GPR[EPVS]-1659872341161
========
b.setParent(this);
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872341162
GPR[SPVAP]-1659872341162
GPR[EPVAP]-1659872341946
GPR[EPVS]-1659872341946
========
b.setParent(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872341952
GPR[SPVAP]-1659872341952
GPR[EPVAP]-1659872342706
GPR[EPVS]-1659872342706
========
b.setParent(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872342707
GPR[SPVAP]-1659872342707
GPR[EPVAP]-1659872343466
GPR[EPVS]-1659872343466
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872343467
GPR[SPVAP]-1659872343467
GPR[EPVAP]-1659872344249
GPR[EPVS]-1659872344249
========
b.setWeight(count);
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872344250
GPR[SPVAP]-1659872344250
GPR[EPVAP]-1659872344998
GPR[EPVS]-1659872344998
========
b.setWeight(count);
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872344999
GPR[SPVAP]-1659872344999
GPR[EPVAP]-1659872345747
GPR[EPVS]-1659872345747
========
b.setWeight(count);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872345748
GPR[SPVAP]-1659872345748
GPR[EPVAP]-1659872346503
GPR[EPVS]-1659872346503
========
b.setWeight(count);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872346504
GPR[SPVAP]-1659872346504
GPR[EPVAP]-1659872347264
GPR[EPVS]-1659872347264
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872347265
GPR[SPVAP]-1659872347265
GPR[EPVAP]-1659872348043
GPR[EPVS]-1659872348043
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872348044
GPR[SPVAP]-1659872348044
GPR[EPVAP]-1659872348803
GPR[EPVS]-1659872348803
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872348805
GPR[SPVAP]-1659872348805
GPR[EPVAP]-1659872349563
GPR[EPVS]-1659872349563
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872349564
GPR[SPVAP]-1659872349564
GPR[EPVAP]-1659872350330
GPR[EPVS]-1659872350330
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872350332
GPR[SPVAP]-1659872350332
GPR[EPVAP]-1659872351089
GPR[EPVS]-1659872351089
========
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872351090
GPR[SPVAP]-1659872351090
GPR[EPVAP]-1659872351858
GPR[EPVS]-1659872351858
========
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872351860
GPR[SPVAP]-1659872351860
GPR[EPVAP]-1659872352616
GPR[EPVS]-1659872352616
========
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872352617
GPR[SPVAP]-1659872352617
GPR[EPVAP]-1659872353382
GPR[EPVS]-1659872353382
========
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872353383
GPR[SPVAP]-1659872353383
GPR[EPVAP]-1659872354147
GPR[EPVS]-1659872354147
========
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872354148
GPR[SPVAP]-1659872354148
GPR[EPVAP]-1659872354915
GPR[EPVS]-1659872354915
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872354916
GPR[SPVAP]-1659872354916
GPR[EPVAP]-1659872355664
GPR[EPVS]-1659872355664
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872355666
GPR[SPVAP]-1659872355666
GPR[EPVAP]-1659872356430
GPR[EPVS]-1659872356430
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872356431
GPR[SPVAP]-1659872356431
GPR[EPVAP]-1659872357180
GPR[EPVS]-1659872357180
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872357197
GPR[SPVAP]-1659872357197
GPR[EPVAP]-1659872357978
GPR[EPVS]-1659872357978
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872357980
GPR[SPVAP]-1659872357980
GPR[EPVAP]-1659872358735
GPR[EPVS]-1659872358735
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872358737
GPR[SPVAP]-1659872358737
GPR[EPVAP]-1659872359487
GPR[EPVS]-1659872359487
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872359489
GPR[SPVAP]-1659872359489
GPR[EPVAP]-1659872360254
GPR[EPVS]-1659872360254
========
b.setParent(this);
b.setWeight(count);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872360255
GPR[SPVAP]-1659872360255
GPR[EPVAP]-1659872361017
GPR[EPVS]-1659872361017
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872361018
GPR[SPVAP]-1659872361018
GPR[EPVAP]-1659872361765
GPR[EPVS]-1659872361766
========
b.setParent(this);
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872361767
GPR[SPVAP]-1659872361767
GPR[EPVAP]-1659872362529
GPR[EPVS]-1659872362529
========
b.setParent(this);
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872362530
GPR[SPVAP]-1659872362530
GPR[EPVAP]-1659872363293
GPR[EPVS]-1659872363293
========
b.setParent(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872363295
GPR[SPVAP]-1659872363295
GPR[EPVAP]-1659872364084
GPR[EPVS]-1659872364084
========
b.setParent(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872364085
GPR[SPVAP]-1659872364085
GPR[EPVAP]-1659872364865
GPR[EPVS]-1659872364865
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872364867
GPR[SPVAP]-1659872364867
GPR[EPVAP]-1659872365634
GPR[EPVS]-1659872365634
========
b.setWeight(count);
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872365636
GPR[SPVAP]-1659872365636
GPR[EPVAP]-1659872366379
GPR[EPVS]-1659872366379
========
b.setWeight(count);
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872366381
GPR[SPVAP]-1659872366381
GPR[EPVAP]-1659872367149
GPR[EPVS]-1659872367149
========
b.setWeight(count);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872367150
GPR[SPVAP]-1659872367150
GPR[EPVAP]-1659872367930
GPR[EPVS]-1659872367930
========
b.setWeight(count);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872367931
GPR[SPVAP]-1659872367931
GPR[EPVAP]-1659872368691
GPR[EPVS]-1659872368691
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872368692
GPR[SPVAP]-1659872368692
GPR[EPVAP]-1659872369437
GPR[EPVS]-1659872369437
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872369439
GPR[SPVAP]-1659872369439
GPR[EPVAP]-1659872370193
GPR[EPVS]-1659872370193
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872370194
GPR[SPVAP]-1659872370194
GPR[EPVAP]-1659872370940
GPR[EPVS]-1659872370940
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872370941
GPR[SPVAP]-1659872370941
GPR[EPVAP]-1659872371699
GPR[EPVS]-1659872371699
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872371700
GPR[SPVAP]-1659872371700
GPR[EPVAP]-1659872372463
GPR[EPVS]-1659872372463
========
b.setOrientation(getOrientation());
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872372465
GPR[SPVAP]-1659872372465
GPR[EPVAP]-1659872373209
GPR[EPVS]-1659872373209
========
b.setOrientation(getOrientation());
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872373210
GPR[SPVAP]-1659872373210
GPR[EPVAP]-1659872373975
GPR[EPVS]-1659872373975
========
b.addChangeListener(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872373976
GPR[SPVAP]-1659872373976
GPR[EPVAP]-1659872374729
GPR[EPVS]-1659872374729
========
b.addChangeListener(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872374730
GPR[SPVAP]-1659872374730
GPR[EPVAP]-1659872375472
GPR[EPVS]-1659872375472
========
this.data.add(b);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872375474
GPR[SPVAP]-1659872375474
GPR[EPVAP]-1659872376228
GPR[EPVS]-1659872376229
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(count);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872376232
GPR[SPVAP]-1659872376232
GPR[EPVAP]-1659872376987
GPR[EPVS]-1659872376987
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872376988
GPR[SPVAP]-1659872376988
GPR[EPVAP]-1659872377747
GPR[EPVS]-1659872377747
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872377749
GPR[SPVAP]-1659872377749
GPR[EPVAP]-1659872378497
GPR[EPVS]-1659872378497
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872378499
GPR[SPVAP]-1659872378499
GPR[EPVAP]-1659872379253
GPR[EPVS]-1659872379253
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872379255
GPR[SPVAP]-1659872379255
GPR[EPVAP]-1659872380020
GPR[EPVS]-1659872380020
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872380022
GPR[SPVAP]-1659872380022
GPR[EPVAP]-1659872380767
GPR[EPVS]-1659872380767
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872380768
GPR[SPVAP]-1659872380768
GPR[EPVAP]-1659872381521
GPR[EPVS]-1659872381521
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872381522
GPR[SPVAP]-1659872381522
GPR[EPVAP]-1659872382311
GPR[EPVS]-1659872382311
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872382312
GPR[SPVAP]-1659872382312
GPR[EPVAP]-1659872383069
GPR[EPVS]-1659872383069
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872383070
GPR[SPVAP]-1659872383070
GPR[EPVAP]-1659872383839
GPR[EPVS]-1659872383839
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872383841
GPR[SPVAP]-1659872383841
GPR[EPVAP]-1659872384606
GPR[EPVS]-1659872384606
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872384608
GPR[SPVAP]-1659872384608
GPR[EPVAP]-1659872385381
GPR[EPVS]-1659872385381
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872385382
GPR[SPVAP]-1659872385382
GPR[EPVAP]-1659872386148
GPR[EPVS]-1659872386148
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872386149
GPR[SPVAP]-1659872386149
GPR[EPVAP]-1659872386908
GPR[EPVS]-1659872386908
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872386909
GPR[SPVAP]-1659872386909
GPR[EPVAP]-1659872387679
GPR[EPVS]-1659872387679
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872387680
GPR[SPVAP]-1659872387680
GPR[EPVAP]-1659872388426
GPR[EPVS]-1659872388426
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872388428
GPR[SPVAP]-1659872388428
GPR[EPVAP]-1659872389170
GPR[EPVS]-1659872389170
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872389171
GPR[SPVAP]-1659872389171
GPR[EPVAP]-1659872389921
GPR[EPVS]-1659872389921
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872389922
GPR[SPVAP]-1659872389922
GPR[EPVAP]-1659872390676
GPR[EPVS]-1659872390676
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872390677
GPR[SPVAP]-1659872390677
GPR[EPVAP]-1659872391429
GPR[EPVS]-1659872391429
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872391430
GPR[SPVAP]-1659872391430
GPR[EPVAP]-1659872392195
GPR[EPVS]-1659872392195
========
b.setParent(this);
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872392196
GPR[SPVAP]-1659872392196
GPR[EPVAP]-1659872392942
GPR[EPVS]-1659872392942
========
b.setParent(this);
b.setWeight(count);
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872392943
GPR[SPVAP]-1659872392943
GPR[EPVAP]-1659872393720
GPR[EPVS]-1659872393720
========
b.setParent(this);
b.setWeight(count);
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872393721
GPR[SPVAP]-1659872393721
GPR[EPVAP]-1659872394481
GPR[EPVS]-1659872394481
========
b.setParent(this);
b.setWeight(count);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872394482
GPR[SPVAP]-1659872394483
GPR[EPVAP]-1659872395236
GPR[EPVS]-1659872395236
========
b.setParent(this);
b.setWeight(count);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872395238
GPR[SPVAP]-1659872395238
GPR[EPVAP]-1659872395987
GPR[EPVS]-1659872395987
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872395989
GPR[SPVAP]-1659872395989
GPR[EPVAP]-1659872396762
GPR[EPVS]-1659872396762
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872396764
GPR[SPVAP]-1659872396764
GPR[EPVAP]-1659872397543
GPR[EPVS]-1659872397543
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872397549
GPR[SPVAP]-1659872397549
GPR[EPVAP]-1659872398299
GPR[EPVS]-1659872398299
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872399417
GPR[SPVAP]-1659872399417
GPR[EPVAP]-1659872400179
GPR[EPVS]-1659872400179
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872400180
GPR[SPVAP]-1659872400180
GPR[EPVAP]-1659872400957
GPR[EPVS]-1659872400957
========
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872400958
GPR[SPVAP]-1659872400958
GPR[EPVAP]-1659872401729
GPR[EPVS]-1659872401729
========
b.setParent(this);
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872401730
GPR[SPVAP]-1659872401730
GPR[EPVAP]-1659872402507
GPR[EPVS]-1659872402507
========
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872402508
GPR[SPVAP]-1659872402508
GPR[EPVAP]-1659872403255
GPR[EPVS]-1659872403255
========
b.setParent(this);
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872403257
GPR[SPVAP]-1659872403257
GPR[EPVAP]-1659872404013
GPR[EPVS]-1659872404013
========
b.setParent(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872404015
GPR[SPVAP]-1659872404015
GPR[EPVAP]-1659872404771
GPR[EPVS]-1659872404771
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872404772
GPR[SPVAP]-1659872404772
GPR[EPVAP]-1659872405523
GPR[EPVS]-1659872405523
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872405525
GPR[SPVAP]-1659872405525
GPR[EPVAP]-1659872406289
GPR[EPVS]-1659872406289
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872406291
GPR[SPVAP]-1659872406291
GPR[EPVAP]-1659872407047
GPR[EPVS]-1659872407047
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872407048
GPR[SPVAP]-1659872407048
GPR[EPVAP]-1659872407799
GPR[EPVS]-1659872407799
========
b.setWeight(count);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872407801
GPR[SPVAP]-1659872407801
GPR[EPVAP]-1659872408580
GPR[EPVS]-1659872408580
========
b.setWeight(count);
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872408581
GPR[SPVAP]-1659872408581
GPR[EPVAP]-1659872409348
GPR[EPVS]-1659872409348
========
b.setWeight(count);
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872409349
GPR[SPVAP]-1659872409349
GPR[EPVAP]-1659872410113
GPR[EPVS]-1659872410113
========
b.setWeight(count);
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872410114
GPR[SPVAP]-1659872410114
GPR[EPVAP]-1659872410876
GPR[EPVS]-1659872410876
========
b.setWeight(count);
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872410877
GPR[SPVAP]-1659872410877
GPR[EPVAP]-1659872411688
GPR[EPVS]-1659872411688
========
b.setWeight(count);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872411689
GPR[SPVAP]-1659872411689
GPR[EPVAP]-1659872412439
GPR[EPVS]-1659872412439
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872412440
GPR[SPVAP]-1659872412440
GPR[EPVAP]-1659872413245
GPR[EPVS]-1659872413245
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872413246
GPR[SPVAP]-1659872413246
GPR[EPVAP]-1659872414024
GPR[EPVS]-1659872414024
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872414026
GPR[SPVAP]-1659872414026
GPR[EPVAP]-1659872414785
GPR[EPVS]-1659872414785
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872414786
GPR[SPVAP]-1659872414786
GPR[EPVAP]-1659872415588
GPR[EPVS]-1659872415588
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872415589
GPR[SPVAP]-1659872415589
GPR[EPVAP]-1659872416349
GPR[EPVS]-1659872416349
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872416351
GPR[SPVAP]-1659872416351
GPR[EPVAP]-1659872417102
GPR[EPVS]-1659872417102
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872417104
GPR[SPVAP]-1659872417104
GPR[EPVAP]-1659872417863
GPR[EPVS]-1659872417863
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872417864
GPR[SPVAP]-1659872417864
GPR[EPVAP]-1659872418652
GPR[EPVS]-1659872418652
========
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872418653
GPR[SPVAP]-1659872418653
GPR[EPVAP]-1659872419445
GPR[EPVS]-1659872419445
========
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872419447
GPR[SPVAP]-1659872419447
GPR[EPVAP]-1659872420198
GPR[EPVS]-1659872420198
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(count);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872420199
GPR[SPVAP]-1659872420199
GPR[EPVAP]-1659872420948
GPR[EPVS]-1659872420948
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872420949
GPR[SPVAP]-1659872420949
GPR[EPVAP]-1659872421734
GPR[EPVS]-1659872421734
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872421735
GPR[SPVAP]-1659872421735
GPR[EPVAP]-1659872422503
GPR[EPVS]-1659872422503
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872422504
GPR[SPVAP]-1659872422504
GPR[EPVAP]-1659872423256
GPR[EPVS]-1659872423256
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872423257
GPR[SPVAP]-1659872423257
GPR[EPVAP]-1659872424005
GPR[EPVS]-1659872424005
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872424006
GPR[SPVAP]-1659872424006
GPR[EPVAP]-1659872424776
GPR[EPVS]-1659872424776
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872424778
GPR[SPVAP]-1659872424778
GPR[EPVAP]-1659872425525
GPR[EPVS]-1659872425525
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872425526
GPR[SPVAP]-1659872425526
GPR[EPVAP]-1659872426284
GPR[EPVS]-1659872426284
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872426285
GPR[SPVAP]-1659872426285
GPR[EPVAP]-1659872427062
GPR[EPVS]-1659872427062
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872427063
GPR[SPVAP]-1659872427063
GPR[EPVAP]-1659872427823
GPR[EPVS]-1659872427823
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872427824
GPR[SPVAP]-1659872427824
GPR[EPVAP]-1659872428627
GPR[EPVS]-1659872428627
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872428628
GPR[SPVAP]-1659872428628
GPR[EPVAP]-1659872429401
GPR[EPVS]-1659872429401
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872429403
GPR[SPVAP]-1659872429403
GPR[EPVAP]-1659872430183
GPR[EPVS]-1659872430183
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872430184
GPR[SPVAP]-1659872430184
GPR[EPVAP]-1659872430932
GPR[EPVS]-1659872430932
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872430934
GPR[SPVAP]-1659872430934
GPR[EPVAP]-1659872431691
GPR[EPVS]-1659872431691
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872431692
GPR[SPVAP]-1659872431692
GPR[EPVAP]-1659872432583
GPR[EPVS]-1659872432583
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872432585
GPR[SPVAP]-1659872432585
GPR[EPVAP]-1659872433423
GPR[EPVS]-1659872433423
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872433425
GPR[SPVAP]-1659872433425
GPR[EPVAP]-1659872434189
GPR[EPVS]-1659872434189
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872434191
GPR[SPVAP]-1659872434191
GPR[EPVAP]-1659872434947
GPR[EPVS]-1659872434947
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872434948
GPR[SPVAP]-1659872434948
GPR[EPVAP]-1659872435700
GPR[EPVS]-1659872435700
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872435701
GPR[SPVAP]-1659872435701
GPR[EPVAP]-1659872436480
GPR[EPVS]-1659872436480
========
b.setParent(this);
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872436482
GPR[SPVAP]-1659872436482
GPR[EPVAP]-1659872437231
GPR[EPVS]-1659872437231
========
b.setParent(this);
b.setWeight(count);
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872437232
GPR[SPVAP]-1659872437232
GPR[EPVAP]-1659872437986
GPR[EPVS]-1659872437986
========
b.setParent(this);
b.setWeight(count);
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872437988
GPR[SPVAP]-1659872437988
GPR[EPVAP]-1659872438736
GPR[EPVS]-1659872438736
========
b.setParent(this);
b.setWeight(count);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872438738
GPR[SPVAP]-1659872438738
GPR[EPVAP]-1659872439495
GPR[EPVS]-1659872439495
========
b.setParent(this);
b.setWeight(count);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872439497
GPR[SPVAP]-1659872439497
GPR[EPVAP]-1659872440260
GPR[EPVS]-1659872440260
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872440262
GPR[SPVAP]-1659872440262
GPR[EPVAP]-1659872441008
GPR[EPVS]-1659872441008
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872441010
GPR[SPVAP]-1659872441010
GPR[EPVAP]-1659872441759
GPR[EPVS]-1659872441759
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872441760
GPR[SPVAP]-1659872441760
GPR[EPVAP]-1659872442501
GPR[EPVS]-1659872442501
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872442503
GPR[SPVAP]-1659872442503
GPR[EPVAP]-1659872443257
GPR[EPVS]-1659872443257
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872443259
GPR[SPVAP]-1659872443259
GPR[EPVAP]-1659872444029
GPR[EPVS]-1659872444029
========
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872444030
GPR[SPVAP]-1659872444030
GPR[EPVAP]-1659872444841
GPR[EPVS]-1659872444841
========
b.setParent(this);
b.setOrientation(getOrientation());
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872444843
GPR[SPVAP]-1659872444843
GPR[EPVAP]-1659872445595
GPR[EPVS]-1659872445595
========
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872445597
GPR[SPVAP]-1659872445597
GPR[EPVAP]-1659872446360
GPR[EPVS]-1659872446360
========
b.setParent(this);
b.addChangeListener(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872446361
GPR[SPVAP]-1659872446361
GPR[EPVAP]-1659872447132
GPR[EPVS]-1659872447132
========
b.setParent(this);
this.data.add(b);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872447134
GPR[SPVAP]-1659872447134
GPR[EPVAP]-1659872447886
GPR[EPVS]-1659872447886
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872447887
GPR[SPVAP]-1659872447887
GPR[EPVAP]-1659872448673
GPR[EPVS]-1659872448673
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872448675
GPR[SPVAP]-1659872448675
GPR[EPVAP]-1659872449443
GPR[EPVS]-1659872449443
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872449444
GPR[SPVAP]-1659872449444
GPR[EPVAP]-1659872450204
GPR[EPVS]-1659872450204
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872450205
GPR[SPVAP]-1659872450206
GPR[EPVAP]-1659872450964
GPR[EPVS]-1659872450964
========
b.setWeight(count);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872450965
GPR[SPVAP]-1659872450965
GPR[EPVAP]-1659872451752
GPR[EPVS]-1659872451752
========
b.setWeight(count);
b.setOrientation(getOrientation());
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872451753
GPR[SPVAP]-1659872451753
GPR[EPVAP]-1659872452506
GPR[EPVS]-1659872452506
========
b.setWeight(count);
b.setOrientation(getOrientation());
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872452508
GPR[SPVAP]-1659872452508
GPR[EPVAP]-1659872453261
GPR[EPVS]-1659872453261
========
b.setWeight(count);
b.addChangeListener(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872453262
GPR[SPVAP]-1659872453262
GPR[EPVAP]-1659872454018
GPR[EPVS]-1659872454018
========
b.setWeight(count);
b.addChangeListener(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872454020
GPR[SPVAP]-1659872454020
GPR[EPVAP]-1659872454800
GPR[EPVS]-1659872454800
========
b.setWeight(count);
this.data.add(b);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872454802
GPR[SPVAP]-1659872454802
GPR[EPVAP]-1659872455594
GPR[EPVS]-1659872455594
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872455596
GPR[SPVAP]-1659872455596
GPR[EPVAP]-1659872456391
GPR[EPVS]-1659872456391
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872456393
GPR[SPVAP]-1659872456393
GPR[EPVAP]-1659872457135
GPR[EPVS]-1659872457135
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872457136
GPR[SPVAP]-1659872457136
GPR[EPVAP]-1659872457907
GPR[EPVS]-1659872457907
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872457908
GPR[SPVAP]-1659872457908
GPR[EPVAP]-1659872458645
GPR[EPVS]-1659872458645
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872458646
GPR[SPVAP]-1659872458646
GPR[EPVAP]-1659872459423
GPR[EPVS]-1659872459423
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872459424
GPR[SPVAP]-1659872459424
GPR[EPVAP]-1659872460179
GPR[EPVS]-1659872460179
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872460180
GPR[SPVAP]-1659872460180
GPR[EPVAP]-1659872460936
GPR[EPVS]-1659872460936
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872460937
GPR[SPVAP]-1659872460937
GPR[EPVAP]-1659872461694
GPR[EPVS]-1659872461694
========
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872461695
GPR[SPVAP]-1659872461695
GPR[EPVAP]-1659872462446
GPR[EPVS]-1659872462446
========
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872462447
GPR[SPVAP]-1659872462447
GPR[EPVAP]-1659872463211
GPR[EPVS]-1659872463211
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872463212
GPR[SPVAP]-1659872463212
GPR[EPVAP]-1659872463985
GPR[EPVS]-1659872463985
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(count);
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872463986
GPR[SPVAP]-1659872463986
GPR[EPVAP]-1659872464776
GPR[EPVS]-1659872464776
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(count);
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872464778
GPR[SPVAP]-1659872464778
GPR[EPVAP]-1659872465531
GPR[EPVS]-1659872465531
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(count);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872465532
GPR[SPVAP]-1659872465532
GPR[EPVAP]-1659872466332
GPR[EPVS]-1659872466332
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(count);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872466334
GPR[SPVAP]-1659872466334
GPR[EPVAP]-1659872467094
GPR[EPVS]-1659872467094
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872467096
GPR[SPVAP]-1659872467096
GPR[EPVAP]-1659872467847
GPR[EPVS]-1659872467847
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872467848
GPR[SPVAP]-1659872467848
GPR[EPVAP]-1659872468635
GPR[EPVS]-1659872468635
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872468636
GPR[SPVAP]-1659872468636
GPR[EPVAP]-1659872469431
GPR[EPVS]-1659872469431
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872469432
GPR[SPVAP]-1659872469432
GPR[EPVAP]-1659872470187
GPR[EPVS]-1659872470187
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872470188
GPR[SPVAP]-1659872470188
GPR[EPVAP]-1659872470963
GPR[EPVS]-1659872470963
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872470964
GPR[SPVAP]-1659872470964
GPR[EPVAP]-1659872471737
GPR[EPVS]-1659872471737
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872471738
GPR[SPVAP]-1659872471738
GPR[EPVAP]-1659872472486
GPR[EPVS]-1659872472486
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872472488
GPR[SPVAP]-1659872472488
GPR[EPVAP]-1659872473235
GPR[EPVS]-1659872473235
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872473236
GPR[SPVAP]-1659872473236
GPR[EPVAP]-1659872474026
GPR[EPVS]-1659872474026
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872474030
GPR[SPVAP]-1659872474030
GPR[EPVAP]-1659872475439
GPR[EPVS]-1659872475439
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872475440
GPR[SPVAP]-1659872475440
GPR[EPVAP]-1659872476254
GPR[EPVS]-1659872476254
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872476256
GPR[SPVAP]-1659872476256
GPR[EPVAP]-1659872477089
GPR[EPVS]-1659872477089
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872477091
GPR[SPVAP]-1659872477091
GPR[EPVAP]-1659872477915
GPR[EPVS]-1659872477915
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872477916
GPR[SPVAP]-1659872477916
GPR[EPVAP]-1659872478713
GPR[EPVS]-1659872478713
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872478714
GPR[SPVAP]-1659872478714
GPR[EPVAP]-1659872479466
GPR[EPVS]-1659872479466
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872479467
GPR[SPVAP]-1659872479467
GPR[EPVAP]-1659872480221
GPR[EPVS]-1659872480221
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872480222
GPR[SPVAP]-1659872480222
GPR[EPVAP]-1659872480977
GPR[EPVS]-1659872480977
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872480979
GPR[SPVAP]-1659872480979
GPR[EPVAP]-1659872481727
GPR[EPVS]-1659872481727
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872481729
GPR[SPVAP]-1659872481729
GPR[EPVAP]-1659872482512
GPR[EPVS]-1659872482512
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872482514
GPR[SPVAP]-1659872482514
GPR[EPVAP]-1659872483295
GPR[EPVS]-1659872483295
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872483297
GPR[SPVAP]-1659872483297
GPR[EPVAP]-1659872484059
GPR[EPVS]-1659872484059
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872484060
GPR[SPVAP]-1659872484060
GPR[EPVAP]-1659872484819
GPR[EPVS]-1659872484819
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872484820
GPR[SPVAP]-1659872484820
GPR[EPVAP]-1659872485572
GPR[EPVS]-1659872485572
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872485574
GPR[SPVAP]-1659872485574
GPR[EPVAP]-1659872486346
GPR[EPVS]-1659872486346
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872486348
GPR[SPVAP]-1659872486348
GPR[EPVAP]-1659872487107
GPR[EPVS]-1659872487107
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872487108
GPR[SPVAP]-1659872487109
GPR[EPVAP]-1659872487868
GPR[EPVS]-1659872487868
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872487870
GPR[SPVAP]-1659872487870
GPR[EPVAP]-1659872488630
GPR[EPVS]-1659872488630
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872488632
GPR[SPVAP]-1659872488632
GPR[EPVAP]-1659872489382
GPR[EPVS]-1659872489382
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872489384
GPR[SPVAP]-1659872489384
GPR[EPVAP]-1659872490137
GPR[EPVS]-1659872490137
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872490139
GPR[SPVAP]-1659872490139
GPR[EPVAP]-1659872490886
GPR[EPVS]-1659872490886
========
b.setParent(this);
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872490887
GPR[SPVAP]-1659872490887
GPR[EPVAP]-1659872491649
GPR[EPVS]-1659872491649
========
b.setParent(this);
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872491650
GPR[SPVAP]-1659872491650
GPR[EPVAP]-1659872492425
GPR[EPVS]-1659872492425
========
b.setParent(this);
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872492426
GPR[SPVAP]-1659872492426
GPR[EPVAP]-1659872493197
GPR[EPVS]-1659872493198
========
b.setParent(this);
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872493199
GPR[SPVAP]-1659872493199
GPR[EPVAP]-1659872493946
GPR[EPVS]-1659872493946
========
b.setParent(this);
b.setWeight(count);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872493948
GPR[SPVAP]-1659872493948
GPR[EPVAP]-1659872494706
GPR[EPVS]-1659872494706
========
b.setParent(this);
b.setWeight(count);
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872494707
GPR[SPVAP]-1659872494707
GPR[EPVAP]-1659872495458
GPR[EPVS]-1659872495458
========
b.setParent(this);
b.setWeight(count);
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872495459
GPR[SPVAP]-1659872495459
GPR[EPVAP]-1659872496220
GPR[EPVS]-1659872496220
========
b.setParent(this);
b.setWeight(count);
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872496222
GPR[SPVAP]-1659872496222
GPR[EPVAP]-1659872496977
GPR[EPVS]-1659872496977
========
b.setParent(this);
b.setWeight(count);
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872496979
GPR[SPVAP]-1659872496979
GPR[EPVAP]-1659872497755
GPR[EPVS]-1659872497755
========
b.setParent(this);
b.setWeight(count);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872497757
GPR[SPVAP]-1659872497757
GPR[EPVAP]-1659872498513
GPR[EPVS]-1659872498513
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872498515
GPR[SPVAP]-1659872498515
GPR[EPVAP]-1659872499268
GPR[EPVS]-1659872499268
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872499269
GPR[SPVAP]-1659872499269
GPR[EPVAP]-1659872500024
GPR[EPVS]-1659872500024
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872500025
GPR[SPVAP]-1659872500025
GPR[EPVAP]-1659872500777
GPR[EPVS]-1659872500777
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872500778
GPR[SPVAP]-1659872500778
GPR[EPVAP]-1659872501527
GPR[EPVS]-1659872501527
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872501528
GPR[SPVAP]-1659872501528
GPR[EPVAP]-1659872502275
GPR[EPVS]-1659872502275
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872502276
GPR[SPVAP]-1659872502276
GPR[EPVAP]-1659872503033
GPR[EPVS]-1659872503033
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872503034
GPR[SPVAP]-1659872503034
GPR[EPVAP]-1659872503787
GPR[EPVS]-1659872503787
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872503788
GPR[SPVAP]-1659872503788
GPR[EPVAP]-1659872504543
GPR[EPVS]-1659872504543
========
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872504544
GPR[SPVAP]-1659872504544
GPR[EPVAP]-1659872505349
GPR[EPVS]-1659872505349
========
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872505350
GPR[SPVAP]-1659872505350
GPR[EPVAP]-1659872506102
GPR[EPVS]-1659872506102
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872506104
GPR[SPVAP]-1659872506104
GPR[EPVAP]-1659872506852
GPR[EPVS]-1659872506852
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872506854
GPR[SPVAP]-1659872506854
GPR[EPVAP]-1659872507607
GPR[EPVS]-1659872507607
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872507609
GPR[SPVAP]-1659872507609
GPR[EPVAP]-1659872508360
GPR[EPVS]-1659872508360
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872508362
GPR[SPVAP]-1659872508362
GPR[EPVAP]-1659872509110
GPR[EPVS]-1659872509110
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872509111
GPR[SPVAP]-1659872509111
GPR[EPVAP]-1659872509892
GPR[EPVS]-1659872509892
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872509894
GPR[SPVAP]-1659872509894
GPR[EPVAP]-1659872510646
GPR[EPVS]-1659872510646
========
b.setWeight(count);
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872510648
GPR[SPVAP]-1659872510648
GPR[EPVAP]-1659872511406
GPR[EPVS]-1659872511406
========
b.setWeight(count);
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872511408
GPR[SPVAP]-1659872511408
GPR[EPVAP]-1659872512153
GPR[EPVS]-1659872512153
========
b.setWeight(count);
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872512155
GPR[SPVAP]-1659872512155
GPR[EPVAP]-1659872512906
GPR[EPVS]-1659872512906
========
b.setWeight(count);
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872512908
GPR[SPVAP]-1659872512908
GPR[EPVAP]-1659872513657
GPR[EPVS]-1659872513657
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872513659
GPR[SPVAP]-1659872513659
GPR[EPVAP]-1659872514436
GPR[EPVS]-1659872514436
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872514437
GPR[SPVAP]-1659872514437
GPR[EPVAP]-1659872515181
GPR[EPVS]-1659872515181
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872515182
GPR[SPVAP]-1659872515182
GPR[EPVAP]-1659872515944
GPR[EPVS]-1659872515944
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872515945
GPR[SPVAP]-1659872515945
GPR[EPVAP]-1659872516695
GPR[EPVS]-1659872516695
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872516697
GPR[SPVAP]-1659872516697
GPR[EPVAP]-1659872517488
GPR[EPVS]-1659872517488
========
if(series==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872517490
GPR[SPVAP]-1659872517490
GPR[EPVAP]-1659872518237
GPR[EPVS]-1659872518237
========
if(index!=0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872518240
GPR[SPVAP]-1659872518240
GPR[EPVAP]-1659872518985
GPR[EPVS]-1659872518985
========
if(count==0){
this.data.setHighlightPaint(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872518988
GPR[SPVAP]-1659872518988
GPR[EPVAP]-1659872519745
GPR[EPVS]-1659872519745
========
if(count==0){
setSeriesNeedle(count,new ArrowNeedle(true));
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872519746
GPR[SPVAP]-1659872519746
GPR[EPVAP]-1659872520556
GPR[EPVS]-1659872520556
========
if(count==0){
setSeriesPaint(count,Color.red);
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872520558
GPR[SPVAP]-1659872520558
GPR[EPVAP]-1659872521313
GPR[EPVS]-1659872521313
========
if(count==0){
setSeriesNeedle(count,new ArrowNeedle(true));
setSeriesPaint(count,Color.red);

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872521314
GPR[SPVAP]-1659872521314
GPR[EPVAP]-1659872522083
GPR[EPVS]-1659872522083
========
case 1 :

if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872522085
GPR[SPVAP]-1659872522085
GPR[EPVAP]-1659872522714
GPR[EPVS]-1659872522714
========
if(notify){
fireChangeEvent();
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872522719
GPR[SPVAP]-1659872522719
GPR[EPVAP]-1659872523467
GPR[EPVS]-1659872523467
========
if(notify){
fireChangeEvent();
}
if(index==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872523469
GPR[SPVAP]-1659872523469
GPR[EPVAP]-1659872524223
GPR[EPVS]-1659872524223
========
checkAxisIndices(data);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872524225
GPR[SPVAP]-1659872524225
GPR[EPVAP]-1659872524985
GPR[EPVS]-1659872524985
========
datasetChanged(new DatasetChangeEvent(this,getDataset(count),new DatasetChangeInfo()));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872524986
GPR[SPVAP]-1659872524986
GPR[EPVAP]-1659872525773
GPR[EPVS]-1659872525773
========
checkAxisIndices(data);
if(index==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872525774
GPR[SPVAP]-1659872525774
GPR[EPVAP]-1659872526539
GPR[EPVS]-1659872526539
========
datasetChanged(new DatasetChangeEvent(this,getDataset(count),new DatasetChangeInfo()));
if(index==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872526540
GPR[SPVAP]-1659872526540
GPR[EPVAP]-1659872527294
GPR[EPVS]-1659872527294
========
checkAxisIndices(data);
datasetChanged(new DatasetChangeEvent(this,getDataset(count),new DatasetChangeInfo()));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872527295
GPR[SPVAP]-1659872527295
GPR[EPVAP]-1659872528079
GPR[EPVS]-1659872528079
========
checkAxisIndices(data);
datasetChanged(new DatasetChangeEvent(this,getDataset(count),new DatasetChangeInfo()));
if(index==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872528080
GPR[SPVAP]-1659872528080
GPR[EPVAP]-1659872528852
GPR[EPVS]-1659872528853
========
if(column==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872528860
GPR[SPVAP]-1659872528860
GPR[EPVAP]-1659872529638
GPR[EPVS]-1659872529638
========
if(index>=0){
return (KeyedObjects)this.data.get(last).getObject(index);
}else {
return null;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872529639
GPR[SPVAP]-1659872529639
GPR[EPVAP]-1659872530418
GPR[EPVS]-1659872530418
========
if(seriesNumber==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872530420
GPR[SPVAP]-1659872530420
GPR[EPVAP]-1659872531180
GPR[EPVS]-1659872531180
========
invalidateRangeInfo();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872531181
GPR[SPVAP]-1659872531181
GPR[EPVAP]-1659872531934
GPR[EPVS]-1659872531934
========
fireSeriesChanged();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872531935
GPR[SPVAP]-1659872531935
GPR[EPVAP]-1659872533275
GPR[SPVATF]-1659872533275
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872534416
GPR[EPVS]-1659872534416
========
if(count==0){
this.data.valueOf(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872534418
GPR[SPVAP]-1659872534418
GPR[EPVAP]-1659872535181
GPR[EPVS]-1659872535181
========
if(index==index){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872535183
GPR[SPVAP]-1659872535183
GPR[EPVAP]-1659872535946
GPR[EPVS]-1659872535946
========
if(count==index){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872535947
GPR[SPVAP]-1659872535947
GPR[EPVAP]-1659872536695
GPR[EPVS]-1659872536695
========
if(item==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872536699
GPR[SPVAP]-1659872536699
GPR[EPVAP]-1659872537447
GPR[EPVS]-1659872537447
========
if(count==0){
this.data.setComposite(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872537448
GPR[SPVAP]-1659872537448
GPR[EPVAP]-1659872538199
GPR[EPVS]-1659872538199
========
if(count==0){
b.moveTo((float)(double[])drState.lowerCoordinates.get(0)[0],(float)coords[1]);
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872538200
GPR[SPVAP]-1659872538200
GPR[EPVAP]-1659872538962
GPR[EPVS]-1659872538962
========
if(count==0){
coords=(double[])drState.upperCoordinates.get(index-1);
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872538963
GPR[SPVAP]-1659872538963
GPR[EPVAP]-1659872539740
GPR[EPVS]-1659872539740
========
if(count==0){
b.lineTo((float)(double[])drState.lowerCoordinates.get(0)[0],(float)coords[1]);
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872539742
GPR[SPVAP]-1659872539742
GPR[EPVAP]-1659872540514
GPR[EPVS]-1659872540514
========
if(count==0){
b.closePath();
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872540515
GPR[SPVAP]-1659872540515
GPR[EPVAP]-1659872541283
GPR[EPVS]-1659872541283
========
if(count==0){
drState.lowerCoordinates.clear();
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872541284
GPR[SPVAP]-1659872541284
GPR[EPVAP]-1659872542074
GPR[EPVS]-1659872542074
========
if(count==0){
drState.upperCoordinates.clear();
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872542075
GPR[SPVAP]-1659872542075
GPR[EPVAP]-1659872542831
GPR[EPVS]-1659872542831
========
if(count==0){
b.moveTo((float)(double[])drState.lowerCoordinates.get(0)[0],(float)coords[1]);
coords=(double[])drState.upperCoordinates.get(index-1);
b.lineTo((float)(double[])drState.lowerCoordinates.get(0)[0],(float)coords[1]);
b.closePath();
drState.lowerCoordinates.clear();
drState.upperCoordinates.clear();

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872542833
GPR[SPVAP]-1659872542833
GPR[EPVAP]-1659872543605
GPR[EPVS]-1659872543605
========
if(count==0){
this.data.draw(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872543607
GPR[SPVAP]-1659872543607
GPR[EPVAP]-1659872544359
GPR[EPVS]-1659872544359
========
this.index=count;
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872544362
GPR[SPVAP]-1659872544362
GPR[EPVAP]-1659872545109
GPR[EPVS]-1659872545109
========
notifyListeners(new TitleChangeEvent(this));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872545110
GPR[SPVAP]-1659872545110
GPR[EPVAP]-1659872545861
GPR[EPVS]-1659872545861
========
notifyListeners(new DialLayerChangeEvent(this));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872545862
GPR[SPVAP]-1659872545862
GPR[EPVAP]-1659872546607
GPR[EPVS]-1659872546607
========
if(section==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872546609
GPR[SPVAP]-1659872546609
GPR[EPVAP]-1659872547361
GPR[EPVS]-1659872547361
========
if(++count%index==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872547366
GPR[SPVAP]-1659872547366
GPR[EPVAP]-1659872548098
GPR[EPVS]-1659872548098
========
if(valuesPerColor==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872548100
GPR[SPVAP]-1659872548100
GPR[EPVAP]-1659872548872
GPR[EPVS]-1659872548872
========
if(paint==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872548874
GPR[SPVAP]-1659872548874
GPR[EPVAP]-1659872549621
GPR[EPVS]-1659872549621
========
if(count==0){
this.data.remove(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872549623
GPR[SPVAP]-1659872549623
GPR[EPVAP]-1659872550927
GPR[SPVATF]-1659872550927
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872552091
GPR[EPVS]-1659872552091
========
if(rollMultiple==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872552093
GPR[SPVAP]-1659872552094
GPR[EPVAP]-1659872552869
GPR[EPVS]-1659872552869
========
if(maximumItemCount<=0){
throw new IllegalArgumentException("Requires \'multiple\' > 0.");
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872552871
GPR[SPVAP]-1659872552871
GPR[EPVAP]-1659872554179
GPR[SPVATF]-1659872554179
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872555327
GPR[EPVS]-1659872555327
========
this.index=maximumItemCount;
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872555328
GPR[SPVAP]-1659872555328
GPR[EPVAP]-1659872556082
GPR[EPVS]-1659872556082
========
this.maximumItemCount=count;
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872556083
GPR[SPVAP]-1659872556083
GPR[EPVAP]-1659872557377
GPR[SPVATF]-1659872557377
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872558527
GPR[EPVS]-1659872558527
========
if(maximumItemCount<=0){
throw new IllegalArgumentException("Requires \'multiple\' > 0.");
}
this.maximumItemCount=count;
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872558529
GPR[SPVAP]-1659872558529
GPR[EPVAP]-1659872559832
GPR[SPVATF]-1659872559832
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872560947
GPR[EPVS]-1659872560947
========
if(count==0){
return null;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872560949
GPR[SPVAP]-1659872560949
GPR[EPVAP]-1659872561708
GPR[EPVS]-1659872561708
========
if(newMin==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872561710
GPR[SPVAP]-1659872561710
GPR[EPVAP]-1659872562466
GPR[EPVS]-1659872562466
========
this.last=minY;
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872562468
GPR[SPVAP]-1659872562468
GPR[EPVAP]-1659872563254
GPR[EPVS]-1659872563254
========
if(newMax==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872563256
GPR[SPVAP]-1659872563256
GPR[EPVAP]-1659872564031
GPR[EPVS]-1659872564031
========
if(data==null){
throw new IllegalArgumentException("Null \'values\' argument.");
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872564033
GPR[SPVAP]-1659872564033
GPR[EPVAP]-1659872565353
GPR[SPVATF]-1659872565353
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872566531
GPR[EPVS]-1659872566531
========
if(subinterval==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872566540
GPR[SPVAP]-1659872566540
GPR[EPVAP]-1659872567285
GPR[EPVS]-1659872567286
========
if(seriesIndex==0){
this.data.add(data);
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872567290
GPR[SPVAP]-1659872567290
GPR[EPVAP]-1659872568049
GPR[EPVS]-1659872568049
========
if(seen==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872568055
GPR[SPVAP]-1659872568055
GPR[EPVAP]-1659872568829
GPR[EPVS]-1659872568829
========
if(index>maximumItemCount){
item=(PaintItem)this.data.get(high);
if(minY<item.value){
item=(PaintItem)this.lookupTable.get(low);
}
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872568833
GPR[SPVAP]-1659872568833
GPR[EPVAP]-1659872569572
GPR[EPVS]-1659872569572
========
if(this.count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872569577
GPR[SPVAP]-1659872569577
GPR[EPVAP]-1659872570323
GPR[EPVS]-1659872570323
========
if(count==that.count){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
MM Copying to MM
GPR[SPVS]-1659872570325
GPR[SPVAP]-1659872570325
GPR[EPVAP]-1659872571077
GPR[EPVS]-1659872571077
GPR[ESUN]-1659872571078
GPR[SSUN]-1659872571078
org.jfree.data.time.TimeSeries,599
GPR[ESUN]-1659872571616
GPR[SSUN]-1659872571616
org.jfree.data.time.TimeSeries,600
GPR[ESUN]-1659872571983
GPR[SSUN]-1659872571983
org.jfree.data.time.TimeSeries,626
========
if(getItemCount()>this.maximumItemCount){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872574194
GPR[SPVAP]-1659872574194
GPR[EPVAP]-1659872578831
GPR[SPVATF]-1659872578831
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872579954
GPR[EPVS]-1659872579954
========
if(getItemCount()>this.maximumItemCount){
fireSeriesChanged();
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872579955
GPR[SPVAP]-1659872579955
GPR[EPVAP]-1659872581257
GPR[SPVATF]-1659872581257
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872582391
GPR[EPVS]-1659872582391
========
if(getItemCount()>this.maximumItemCount){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872582392
GPR[SPVAP]-1659872582392
GPR[EPVAP]-1659872583677
GPR[SPVATF]-1659872583677
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872584831
GPR[EPVS]-1659872584831
========
if(getItemCount()>this.maximumItemCount){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872584832
GPR[SPVAP]-1659872584832
GPR[EPVAP]-1659872586140
GPR[SPVATF]-1659872586140
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872587263
GPR[EPVS]-1659872587263
========
if(getItemCount()>this.maximumItemCount){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872587265
GPR[SPVAP]-1659872587265
GPR[EPVAP]-1659872588638
GPR[SPVATF]-1659872588638
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872589775
GPR[EPVS]-1659872589775
========
if(getItemCount()>this.maximumItemCount){
fireSeriesChanged();
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872589777
GPR[SPVAP]-1659872589777
GPR[EPVAP]-1659872591092
GPR[SPVATF]-1659872591092
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872592227
GPR[EPVS]-1659872592227
========
if(getItemCount()>this.maximumItemCount){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872592228
GPR[SPVAP]-1659872592228
GPR[EPVAP]-1659872593510
GPR[SPVATF]-1659872593510
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872594626
GPR[EPVS]-1659872594626
========
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
this.data.remove(maximumItemCount);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872594627
GPR[SPVAP]-1659872594627
GPR[EPVAP]-1659872595909
GPR[SPVATF]-1659872595909
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872597049
GPR[EPVS]-1659872597049
========
if(minY>=minY){
throw new IllegalArgumentException("Requires xLow < xHigh.");
}
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872597052
GPR[SPVAP]-1659872597052
GPR[EPVAP]-1659872598356
GPR[SPVATF]-1659872598356
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872599485
GPR[EPVS]-1659872599485
========
if(getItemCount()>maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872599486
GPR[SPVAP]-1659872599486
GPR[EPVAP]-1659872600842
GPR[SPVATF]-1659872600842
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872601959
GPR[EPVS]-1659872601959
========
if(getItemCount()>this.maximumItemCount){
result=(SelectableValue)this.data.getObject(maximumItemCount).getValue();
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872601960
GPR[SPVAP]-1659872601960
GPR[EPVAP]-1659872602712
GPR[EPVS]-1659872602712
========
if(getItemCount()>count){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872602714
GPR[SPVAP]-1659872602714
GPR[EPVAP]-1659872604014
GPR[SPVATF]-1659872604014
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872605157
GPR[EPVS]-1659872605157
========
if(count<0){
throw new IllegalArgumentException("Negative \'maximum\' argument.");
}
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872605158
GPR[SPVAP]-1659872605158
GPR[EPVAP]-1659872606462
GPR[SPVATF]-1659872606462
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872607612
GPR[EPVS]-1659872607612
========
this.maximumItemCount=count;
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872607613
GPR[SPVAP]-1659872607613
GPR[EPVAP]-1659872608916
GPR[SPVATF]-1659872608916
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872610060
GPR[EPVS]-1659872610060
========
if(count<0){
throw new IllegalArgumentException("Negative \'maximum\' argument.");
}
if(getItemCount()>count){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872610061
GPR[SPVAP]-1659872610061
GPR[EPVAP]-1659872611363
GPR[SPVATF]-1659872611363
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872612502
GPR[EPVS]-1659872612502
========
this.maximumItemCount=count;
if(getItemCount()>count){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872612504
GPR[SPVAP]-1659872612504
GPR[EPVAP]-1659872613809
GPR[SPVATF]-1659872613809
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872614936
GPR[EPVS]-1659872614936
========
if(count<0){
throw new IllegalArgumentException("Negative \'maximum\' argument.");
}
this.maximumItemCount=count;
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872614937
GPR[SPVAP]-1659872614937
GPR[EPVAP]-1659872616233
GPR[SPVATF]-1659872616233
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872617367
GPR[EPVS]-1659872617367
========
if(count<0){
throw new IllegalArgumentException("Negative \'maximum\' argument.");
}
this.maximumItemCount=count;
if(getItemCount()>count){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872617368
GPR[SPVAP]-1659872617368
GPR[EPVAP]-1659872618717
GPR[SPVATF]-1659872618717
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872619841
GPR[EPVS]-1659872619841
========
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
setParent(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872619843
GPR[SPVAP]-1659872619843
GPR[EPVAP]-1659872620594
GPR[EPVS]-1659872620594
========
if(getItemCount()>this.maximumItemCount){
configureRangeAxes();
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872620595
GPR[SPVAP]-1659872620595
GPR[EPVAP]-1659872621349
GPR[EPVS]-1659872621349
========
if(getItemCount()>this.maximumItemCount){
fireChangeEvent();
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872621351
GPR[SPVAP]-1659872621351
GPR[EPVAP]-1659872622110
GPR[EPVS]-1659872622110
========
if(getItemCount()>this.maximumItemCount){
this.data.remove(maximumItemCount);
configureRangeAxes();
fireChangeEvent();

TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872622111
GPR[SPVAP]-1659872622111
GPR[EPVAP]-1659872622876
GPR[EPVS]-1659872622876
========
copy.data=new java.util.ArrayList();
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872622878
GPR[SPVAP]-1659872622878
GPR[EPVAP]-1659872623628
GPR[EPVS]-1659872623628
========
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
removeValue(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872623629
GPR[SPVAP]-1659872623629
GPR[EPVAP]-1659872624406
GPR[EPVS]-1659872624406
========
this.data.add(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872624408
GPR[SPVAP]-1659872624408
GPR[EPVAP]-1659872625726
GPR[SPVATF]-1659872625726
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872626867
GPR[EPVS]-1659872626867
========
count=29*result+(this.timePeriodClass!=null?this.timePeriodClass.hashCode():0);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
MM Copying to MM
GPR[SPVS]-1659872626869
GPR[SPVAP]-1659872626869
GPR[EPVAP]-1659872627619
GPR[EPVS]-1659872627619
========
if(added){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872629715
GPR[SPVAP]-1659872629715
GPR[EPVAP]-1659872631942
GPR[SPVATF]-1659872631942
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872633195
GPR[EPVS]-1659872633195
========
findBoundsByIteration();
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872633197
GPR[SPVAP]-1659872633197
GPR[EPVAP]-1659872634636
GPR[SPVATF]-1659872634636
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 0
GPR[EPVATF]-1659872635775
GPR[SPVATR]-1659872635776
TESTING : chart_3
MM messageFailing tests: 0
GPR[EPVATR]-1659872647817
GPR[EPVS]-1659872647817
GPR[PF]-1659872647817
sourceFile  script/workingdir/SimFix/chart/chart_3_buggy/source/org/jfree/data/time/TimeSeries.java
location   script/workingdir/SimFix/chart/chart_3_buggy
MM Out patch at /experiment_home///results/SimFix/Chart/3/seed_260/patch/chart/3/0/patch_3877095_1_ts_1659872647817.diff
MM Command diff diff -w -b  --label=/source/org/jfree/data/time/TimeSeries.java --label=/source/org/jfree/data/time/TimeSeries.java /tmp/tmpDirMM8191290367446672670/TimeSeries.java  /experiment_home///results/SimFix/Chart/3/seed_260/patch/chart/3/0/1_TimeSeries.java  --unified=3  > /experiment_home///results/SimFix/Chart/3/seed_260/patch/chart/3/0/patch_3877095_1_ts_1659872647817.diff
MMOut command diff: []
========
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872647831
GPR[SPVAP]-1659872647831
GPR[EPVAP]-1659872649109
GPR[SPVATF]-1659872649109
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872650227
GPR[EPVS]-1659872650227
========
if(notify){
fireSeriesChanged();
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872650228
GPR[SPVAP]-1659872650228
GPR[EPVAP]-1659872651501
GPR[SPVATF]-1659872651501
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872652612
GPR[EPVS]-1659872652612
========
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
if(notify){
fireSeriesChanged();
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872652614
GPR[SPVAP]-1659872652614
GPR[EPVAP]-1659872653893
GPR[SPVATF]-1659872653893
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872655041
GPR[EPVS]-1659872655041
========
if(added){
this.data.subList(0,d).clear();
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872655043
GPR[SPVAP]-1659872655043
GPR[EPVAP]-1659872655812
GPR[EPVS]-1659872655812
========
this.maximumItemCount=maximumItemCount;
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872655813
GPR[SPVAP]-1659872655813
GPR[EPVAP]-1659872657086
GPR[SPVATF]-1659872657086
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872658208
GPR[EPVS]-1659872658208
========
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872658209
GPR[SPVAP]-1659872658209
GPR[EPVAP]-1659872658958
GPR[EPVS]-1659872658958
========
if(added){
this.data.remove(maximumItemCount);
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872658959
GPR[SPVAP]-1659872658959
GPR[EPVAP]-1659872660752
GPR[SPVATF]-1659872660752
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872663369
GPR[EPVS]-1659872663369
========
if(added){
this.notify=notify;
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872663371
GPR[SPVAP]-1659872663371
GPR[EPVAP]-1659872664110
GPR[EPVS]-1659872664110
========
(TaskSeries)this.data.get(count).removeChangeListener(this);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872664112
GPR[SPVAP]-1659872664112
GPR[EPVAP]-1659872664724
GPR[EPVS]-1659872664724
========
this.data.remove(count);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872664725
GPR[SPVAP]-1659872664725
GPR[EPVAP]-1659872666009
GPR[SPVATF]-1659872666009
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872667123
GPR[EPVS]-1659872667123
========
fireDatasetChanged(new DatasetChangeInfo());
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872667124
GPR[SPVAP]-1659872667124
GPR[EPVAP]-1659872667882
GPR[EPVS]-1659872667882
========
(XIntervalSeries)this.data.get(count).removeChangeListener(this);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872667883
GPR[SPVAP]-1659872667883
GPR[EPVAP]-1659872668503
GPR[EPVS]-1659872668503
========
this.data.remove(count);
fireDatasetChanged(new DatasetChangeInfo());
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872668504
GPR[SPVAP]-1659872668504
GPR[EPVAP]-1659872669250
GPR[EPVS]-1659872669250
========
(XYIntervalSeries)this.data.get(count).removeChangeListener(this);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872669252
GPR[SPVAP]-1659872669252
GPR[EPVAP]-1659872669898
GPR[EPVS]-1659872669898
========
(YIntervalSeries)this.data.get(count).removeChangeListener(this);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872669899
GPR[SPVAP]-1659872669899
GPR[EPVAP]-1659872670517
GPR[EPVS]-1659872670517
========
(XYSeries)this.data.get(count).removeChangeListener(this);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872670518
GPR[SPVAP]-1659872670518
GPR[EPVAP]-1659872671145
GPR[EPVS]-1659872671145
========
(XYSeries)this.data.get(count).removeChangeListener(this);
this.data.remove(count);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872671147
GPR[SPVAP]-1659872671147
GPR[EPVAP]-1659872671755
GPR[EPVS]-1659872671755
========
(XYSeries)this.data.get(count).removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872671756
GPR[SPVAP]-1659872671756
GPR[EPVAP]-1659872672369
GPR[EPVS]-1659872672369
========
(XYSeries)this.data.get(count).removeChangeListener(this);
this.data.remove(count);
fireDatasetChanged(new DatasetChangeInfo());
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872672371
GPR[SPVAP]-1659872672371
GPR[EPVAP]-1659872672983
GPR[EPVS]-1659872672983
========
if(added&&notify){
fireChangeEvent();
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872672985
GPR[SPVAP]-1659872672985
GPR[EPVAP]-1659872673773
GPR[EPVS]-1659872673773
========
if(notify){
fireDatasetChanged(new DatasetChangeInfo());
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872673775
GPR[SPVAP]-1659872673775
GPR[EPVAP]-1659872674537
GPR[EPVS]-1659872674537
========
this.maximumItemCount=count;
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872674540
GPR[SPVAP]-1659872674540
GPR[EPVAP]-1659872675829
GPR[SPVATF]-1659872675829
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872676966
GPR[EPVS]-1659872676966
========
if(maximumItemCount>count){
delete(0,count-maximum);
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872676968
GPR[SPVAP]-1659872676968
GPR[EPVAP]-1659872677734
GPR[EPVS]-1659872677734
========
if(added){
setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872677736
GPR[SPVAP]-1659872677736
GPR[EPVAP]-1659872678510
GPR[EPVS]-1659872678510
========
if(added){
configureRangeAxes();
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872678511
GPR[SPVAP]-1659872678511
GPR[EPVAP]-1659872679261
GPR[EPVS]-1659872679261
========
if(added){
fireChangeEvent();
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872679262
GPR[SPVAP]-1659872679262
GPR[EPVAP]-1659872680000
GPR[EPVS]-1659872680000
========
if(added){
this.data.remove(maximumItemCount);
configureRangeAxes();
fireChangeEvent();

updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872680002
GPR[SPVAP]-1659872680002
GPR[EPVAP]-1659872680753
GPR[EPVS]-1659872680753
========
if(added){
if(domain!=null){
domain.configure();
}
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872680755
GPR[SPVAP]-1659872680755
GPR[EPVAP]-1659872681502
GPR[EPVS]-1659872681502
========
if(added){
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872681503
GPR[SPVAP]-1659872681503
GPR[EPVAP]-1659872682252
GPR[EPVS]-1659872682252
========
if(added){
this.data.remove(maximumItemCount);
setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872682254
GPR[SPVAP]-1659872682254
GPR[EPVAP]-1659872683002
GPR[EPVS]-1659872683002
========
if(added){
fireChangeEvent();
setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872683003
GPR[SPVAP]-1659872683003
GPR[EPVAP]-1659872683765
GPR[EPVS]-1659872683765
========
if(added){
this.data.remove(maximumItemCount);
fireChangeEvent();
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872683767
GPR[SPVAP]-1659872683767
GPR[EPVAP]-1659872684531
GPR[EPVS]-1659872684531
========
if(added){
this.data.remove(maximumItemCount);
fireChangeEvent();
setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872684532
GPR[SPVAP]-1659872684532
GPR[EPVAP]-1659872685295
GPR[EPVS]-1659872685295
========
if(added){
if(domain!=null){
domain.configure();
}
setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872685296
GPR[SPVAP]-1659872685296
GPR[EPVAP]-1659872686058
GPR[EPVS]-1659872686058
========
if(added){
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872686059
GPR[SPVAP]-1659872686059
GPR[EPVAP]-1659872686807
GPR[EPVS]-1659872686807
========
if(added){
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872686809
GPR[SPVAP]-1659872686809
GPR[EPVAP]-1659872687562
GPR[EPVS]-1659872687562
========
if(added){
this.data.remove(maximumItemCount);
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872687563
GPR[SPVAP]-1659872687563
GPR[EPVAP]-1659872688349
GPR[EPVS]-1659872688349
========
if(added){
if(domain!=null){
domain.configure();
}
fireChangeEvent();
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872688350
GPR[SPVAP]-1659872688350
GPR[EPVAP]-1659872689098
GPR[EPVS]-1659872689098
========
if(added){
if(domain!=null){
domain.configure();
}
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872689100
GPR[SPVAP]-1659872689100
GPR[EPVAP]-1659872689881
GPR[EPVS]-1659872689881
========
if(added){
fireChangeEvent();
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872689882
GPR[SPVAP]-1659872689882
GPR[EPVAP]-1659872690629
GPR[EPVS]-1659872690629
========
if(added){
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872690630
GPR[SPVAP]-1659872690630
GPR[EPVAP]-1659872691383
GPR[EPVS]-1659872691383
========
if(added){
this.data.remove(maximumItemCount);
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872691384
GPR[SPVAP]-1659872691384
GPR[EPVAP]-1659872692143
GPR[EPVS]-1659872692143
========
if(added){
if(domain!=null){
domain.configure();
}
fireChangeEvent();
setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872692145
GPR[SPVAP]-1659872692145
GPR[EPVAP]-1659872692911
GPR[EPVS]-1659872692911
========
if(added){
if(domain!=null){
domain.configure();
}
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872692912
GPR[SPVAP]-1659872692912
GPR[EPVAP]-1659872693676
GPR[EPVS]-1659872693676
========
if(added){
fireChangeEvent();
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872693677
GPR[SPVAP]-1659872693677
GPR[EPVAP]-1659872694423
GPR[EPVS]-1659872694423
========
if(added){
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872694424
GPR[SPVAP]-1659872694424
GPR[EPVAP]-1659872695188
GPR[EPVS]-1659872695188
========
if(added){
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872695189
GPR[SPVAP]-1659872695189
GPR[EPVAP]-1659872695958
GPR[EPVS]-1659872695958
========
if(added){
this.data.remove(maximumItemCount);
fireChangeEvent();
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872695959
GPR[SPVAP]-1659872695959
GPR[EPVAP]-1659872696730
GPR[EPVS]-1659872696730
========
if(added){
if(domain!=null){
domain.configure();
}
fireChangeEvent();
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872696731
GPR[SPVAP]-1659872696731
GPR[EPVAP]-1659872697519
GPR[EPVS]-1659872697519
========
if(added){
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();
setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872697520
GPR[SPVAP]-1659872697520
GPR[EPVAP]-1659872698273
GPR[EPVS]-1659872698273
========
if(added){
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872698274
GPR[SPVAP]-1659872698275
GPR[EPVAP]-1659872699020
GPR[EPVS]-1659872699020
========
if(added){
this.data.remove(maximumItemCount);
fireChangeEvent();
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872699021
GPR[SPVAP]-1659872699021
GPR[EPVAP]-1659872699769
GPR[EPVS]-1659872699769
========
if(added){
if(domain!=null){
domain.configure();
}
fireChangeEvent();
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

setParent(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872699770
GPR[SPVAP]-1659872699770
GPR[EPVAP]-1659872700525
GPR[EPVS]-1659872700525
========
if(added){
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();
this.data.remove(maximumItemCount);
if(domain!=null){
domain.configure();
}
fireChangeEvent();

updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872700526
GPR[SPVAP]-1659872700526
GPR[EPVAP]-1659872701278
GPR[EPVS]-1659872701278
========
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872701279
GPR[SPVAP]-1659872701279
GPR[EPVAP]-1659872702051
GPR[EPVS]-1659872702051
========
this.notify=added;
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872702052
GPR[SPVAP]-1659872702052
GPR[EPVAP]-1659872702814
GPR[EPVS]-1659872702814
========
this.notify=notify;
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872702815
GPR[SPVAP]-1659872702815
GPR[EPVAP]-1659872703596
GPR[EPVS]-1659872703596
========
(MatrixSeries)this.data.get(count).removeChangeListener(this);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872703600
GPR[SPVAP]-1659872703600
GPR[EPVAP]-1659872704254
GPR[EPVS]-1659872704254
========
if(added){
if(range!=null){
range.configure();
}
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872704255
GPR[SPVAP]-1659872704255
GPR[EPVAP]-1659872705056
GPR[EPVS]-1659872705056
========
if(added){
if(getRangeAxis(1)!=null){
getRangeAxis(1).configure();
}
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872705057
GPR[SPVAP]-1659872705057
GPR[EPVAP]-1659872705814
GPR[EPVS]-1659872705814
========
if(added){
this.data.remove(maximumItemCount);
if(range!=null){
range.configure();
}
if(getRangeAxis(1)!=null){
getRangeAxis(1).configure();
}
fireChangeEvent();

updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872705815
GPR[SPVAP]-1659872705815
GPR[EPVAP]-1659872706574
GPR[EPVS]-1659872706574
========
if(getRenderer(count)!=null){
existing.removeChangeListener(this);
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872706577
GPR[SPVAP]-1659872706577
GPR[EPVAP]-1659872707331
GPR[EPVS]-1659872707331
========
configureDomainAxes();
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872707333
GPR[SPVAP]-1659872707333
GPR[EPVAP]-1659872708103
GPR[EPVS]-1659872708103
========
configureRangeAxes();
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872708104
GPR[SPVAP]-1659872708104
GPR[EPVAP]-1659872708855
GPR[EPVS]-1659872708855
========
this.maximumItemAge=maximumItemAge;
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872708857
GPR[SPVAP]-1659872708857
GPR[EPVAP]-1659872710169
GPR[SPVATF]-1659872710169
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872711284
GPR[EPVS]-1659872711284
========
removeAgedItems(true);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872711285
GPR[SPVAP]-1659872711285
GPR[EPVAP]-1659872712571
GPR[SPVATF]-1659872712571
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872713708
GPR[EPVS]-1659872713708
========
this.maximumItemAge=maximumItemAge;
removeAgedItems(true);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872713709
GPR[SPVAP]-1659872713709
GPR[EPVAP]-1659872715013
GPR[SPVATF]-1659872715014
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872716138
GPR[EPVS]-1659872716138
========
if(added){
if(this.added){
autoAdjustRange();
}
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872716140
GPR[SPVAP]-1659872716140
GPR[EPVAP]-1659872716885
GPR[EPVS]-1659872716885
========
if(added){
this.autoRangeMinimumSize=minY;
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872716887
GPR[SPVAP]-1659872716887
GPR[EPVAP]-1659872717651
GPR[EPVS]-1659872717651
========
if(added){
this.autoRangeMinimumSize=minY;
if(this.added){
autoAdjustRange();
}

updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872717653
GPR[SPVAP]-1659872717653
GPR[EPVAP]-1659872718449
GPR[EPVS]-1659872718449
========
if(added){
removeValue(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872718451
GPR[SPVAP]-1659872718451
GPR[EPVAP]-1659872719225
GPR[EPVS]-1659872719225
========
this.added=added;
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872719226
GPR[SPVAP]-1659872719226
GPR[EPVAP]-1659872719974
GPR[EPVS]-1659872719974
========
configureDomainAxes();
configureRangeAxes();
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872719975
GPR[SPVAP]-1659872719975
GPR[EPVAP]-1659872720728
GPR[EPVS]-1659872720728
========
(SimpleHistogramBin)this.data.get(item).setSelected(added);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872720730
GPR[SPVAP]-1659872720730
GPR[EPVAP]-1659872721346
GPR[EPVS]-1659872721346
========
item.setSelected(added);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872721347
GPR[SPVAP]-1659872721347
GPR[EPVAP]-1659872722635
GPR[SPVATF]-1659872722635
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872723800
GPR[EPVS]-1659872723800
========
if(added){
this.autoTickUnitSelection=added;
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872723802
GPR[SPVAP]-1659872723802
GPR[EPVAP]-1659872724550
GPR[EPVS]-1659872724550
========
if(notify){
fireChangeEvent();
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872724552
GPR[SPVAP]-1659872724552
GPR[EPVAP]-1659872725299
GPR[EPVS]-1659872725299
========
invalidateRangeInfo();
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872725301
GPR[SPVAP]-1659872725301
GPR[EPVAP]-1659872726052
GPR[EPVS]-1659872726052
========
fireSeriesChanged();
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872726054
GPR[SPVAP]-1659872726054
GPR[EPVAP]-1659872727364
GPR[SPVATF]-1659872727364
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872728493
GPR[EPVS]-1659872728493
========
if(getDomainAxis(count)!=null){
existing.removeChangeListener(this);
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872728494
GPR[SPVAP]-1659872728494
GPR[EPVAP]-1659872729251
GPR[EPVS]-1659872729251
========
if(getRangeAxis(count)!=null){
existing.removeChangeListener(this);
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872729252
GPR[SPVAP]-1659872729252
GPR[EPVAP]-1659872730003
GPR[EPVS]-1659872730003
========
if(range==null){
throw new IllegalArgumentException("Null \'range\' argument.");
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872730004
GPR[SPVAP]-1659872730004
GPR[EPVAP]-1659872731313
GPR[SPVATF]-1659872731314
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872732459
GPR[EPVS]-1659872732459
========
this.range=range;
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872732460
GPR[SPVAP]-1659872732460
GPR[EPVAP]-1659872733777
GPR[SPVATF]-1659872733777
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872734903
GPR[EPVS]-1659872734903
========
if(range==null){
throw new IllegalArgumentException("Null \'range\' argument.");
}
this.range=range;
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872734904
GPR[SPVAP]-1659872734904
GPR[EPVAP]-1659872736204
GPR[SPVATF]-1659872736204
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872737316
GPR[EPVS]-1659872737316
========
if(range==null){
throw new IllegalArgumentException("Null \'range\' argument.");
}
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872737318
GPR[SPVAP]-1659872737318
GPR[EPVAP]-1659872738076
GPR[EPVS]-1659872738076
========
this.range=range;
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872738077
GPR[SPVAP]-1659872738077
GPR[EPVAP]-1659872738847
GPR[EPVS]-1659872738847
========
if(range==null){
throw new IllegalArgumentException("Null \'range\' argument.");
}
this.range=range;
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872738848
GPR[SPVAP]-1659872738848
GPR[EPVAP]-1659872739590
GPR[EPVS]-1659872739590
========
this.added=circular;
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872739592
GPR[SPVAP]-1659872739592
GPR[EPVAP]-1659872740335
GPR[EPVS]-1659872740335
========
this.count=count;
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872740337
GPR[SPVAP]-1659872740337
GPR[EPVAP]-1659872741088
GPR[EPVS]-1659872741088
========
this.minY=minY;
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872741090
GPR[SPVAP]-1659872741090
GPR[EPVAP]-1659872742405
GPR[SPVATF]-1659872742405
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872743560
GPR[EPVS]-1659872743560
========
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
exactBoxWidth=minY/maximumItemCount*4.5/7;
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872743564
GPR[SPVAP]-1659872743564
GPR[EPVAP]-1659872744339
GPR[EPVS]-1659872744339
========
getSeries(count).getRawDataItem(item).setSelected(added);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872744342
GPR[SPVAP]-1659872744342
GPR[EPVAP]-1659872745127
GPR[EPVS]-1659872745127
========
d.setSelected(added);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872745128
GPR[SPVAP]-1659872745129
GPR[EPVAP]-1659872745875
GPR[EPVS]-1659872745875
========
(SelectableValue)this.data.getObject(count,count).setSelected(added);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872745876
GPR[SPVAP]-1659872745876
GPR[EPVAP]-1659872746497
GPR[EPVS]-1659872746497
========
this.added[item]=selected;
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872746499
GPR[SPVAP]-1659872746499
GPR[EPVAP]-1659872747255
GPR[EPVS]-1659872747255
========
if(notify){
fireSelectionEvent();
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872747256
GPR[SPVAP]-1659872747256
GPR[EPVAP]-1659872748015
GPR[EPVS]-1659872748015
========
if(added){
rollingSumForPeriod-=item.getValue().doubleValue();
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872748023
GPR[SPVAP]-1659872748023
GPR[EPVAP]-1659872748770
GPR[EPVS]-1659872748770
========
if(count>1){
XYDataItem item=getRawDataItem(count-1);
count=29*result+item.hashCode();
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872748772
GPR[SPVAP]-1659872748772
GPR[EPVAP]-1659872749545
GPR[EPVS]-1659872749545
========
if(count>2){
XYDataItem item=getRawDataItem(count/2);
count=29*result+item.hashCode();
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872749547
GPR[SPVAP]-1659872749547
GPR[EPVAP]-1659872750309
GPR[EPVS]-1659872750309
========
if(count>1){
ComparableObjectItem item=getDataItem(count-1);
count=29*result+item.hashCode();
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872750311
GPR[SPVAP]-1659872750311
GPR[EPVAP]-1659872751098
GPR[EPVS]-1659872751098
========
if(count>2){
ComparableObjectItem item=getDataItem(count/2);
count=29*result+item.hashCode();
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872751099
GPR[SPVAP]-1659872751099
GPR[EPVAP]-1659872751889
GPR[EPVS]-1659872751889
========
super.setRange(range,added,notify);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872751894
GPR[SPVAP]-1659872751894
GPR[EPVAP]-1659872752665
GPR[EPVS]-1659872752665
========
if(Double.isNaN(d)){
y0=0.0;
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872752668
GPR[SPVAP]-1659872752668
GPR[EPVAP]-1659872753430
GPR[EPVS]-1659872753430
========
super.setAutoRangeMinimumSize(minY,notify);
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872753432
GPR[SPVAP]-1659872753432
GPR[EPVAP]-1659872754236
GPR[EPVS]-1659872754236
========
(XYDataItem)this.data.get(count).setY(item.getY());
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872754239
GPR[SPVAP]-1659872754239
GPR[EPVAP]-1659872754858
GPR[EPVS]-1659872754858
========
if(added){
findBoundsByIteration();
}else if(item.getY()!=null){
double d=item.getY().doubleValue();
this.minY=minIgnoreNaN(this.minY,yy);
this.maxY=minIgnoreNaN(this.maxY,yy);
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872754859
GPR[SPVAP]-1659872754859
GPR[EPVAP]-1659872755623
GPR[EPVS]-1659872755623
========
if(Double.isNaN(minY)){
y2=0.0;
}
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872755625
GPR[SPVAP]-1659872755625
GPR[EPVAP]-1659872756408
GPR[EPVS]-1659872756408
========
case WIDTHMETHOD_SMALLEST :

if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
MM Copying to MM
GPR[SPVS]-1659872756417
GPR[SPVAP]-1659872756417
GPR[EPVAP]-1659872757037
GPR[EPVS]-1659872757037
GPR[ESUN]-1659872757038
GPR[SSUN]-1659872757038
org.jfree.data.time.TimeSeries,627
GPR[ESUN]-1659872757479
GPR[SSUN]-1659872757479
org.jfree.data.time.TimeSeries,629
GPR[ESUN]-1659872757771
GPR[SSUN]-1659872757771
org.jfree.data.time.TimeSeries,634
GPR[ESUN]-1659872758060
GPR[SSUN]-1659872758060
org.jfree.data.time.TimeSeries,637
GPR[ESUN]-1659872758361
GPR[SSUN]-1659872758361
org.jfree.data.time.TimeSeries,638
GPR[ESUN]-1659872758651
GPR[SSUN]-1659872758651
org.jfree.data.time.TimeSeries,642
Find no block!
GPR[SSUN]-1659872758939
org.jfree.data.time.TimeSeries,877
========
while(getItemCount()>0&&(latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872761030
GPR[SPVAP]-1659872761030
GPR[EPVAP]-1659872765760
GPR[SPVATF]-1659872765760
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872766899
GPR[EPVS]-1659872766899
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(maximumItemCount);
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872766902
GPR[SPVAP]-1659872766902
GPR[EPVAP]-1659872768263
GPR[SPVATF]-1659872768263
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872769415
GPR[EPVS]-1659872769415
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
fireDatasetChanged(new DatasetChangeInfo());
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872769417
GPR[SPVAP]-1659872769417
GPR[EPVAP]-1659872770157
GPR[EPVS]-1659872770157
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(maximumItemCount);
fireDatasetChanged(new DatasetChangeInfo());

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872770159
GPR[SPVAP]-1659872770159
GPR[EPVAP]-1659872770907
GPR[EPVS]-1659872770907
========
if(removed&&notify){
fireChangeEvent();
}
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872770908
GPR[SPVAP]-1659872770908
GPR[EPVAP]-1659872771665
GPR[EPVS]-1659872771665
========
this.removed=notify;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872771667
GPR[SPVAP]-1659872771667
GPR[EPVAP]-1659872772440
GPR[EPVS]-1659872772440
========
fireDatasetChanged(new DatasetChangeInfo());
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872772441
GPR[SPVAP]-1659872772441
GPR[EPVAP]-1659872773195
GPR[EPVS]-1659872773195
========
(TaskSeries)this.data.get(maximumItemCount).removeChangeListener(this);
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872773198
GPR[SPVAP]-1659872773198
GPR[EPVAP]-1659872773840
GPR[EPVS]-1659872773840
========
this.data.remove(maximumItemCount);
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872773841
GPR[SPVAP]-1659872773841
GPR[EPVAP]-1659872775208
GPR[SPVATF]-1659872775208
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872776386
GPR[EPVS]-1659872776386
========
this.data.remove(maximumItemCount);
fireDatasetChanged(new DatasetChangeInfo());
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872776388
GPR[SPVAP]-1659872776388
GPR[EPVAP]-1659872777133
GPR[EPVS]-1659872777133
========
(XIntervalSeries)this.data.get(maximumItemCount).removeChangeListener(this);
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872777134
GPR[SPVAP]-1659872777134
GPR[EPVAP]-1659872777752
GPR[EPVS]-1659872777752
========
(XYIntervalSeries)this.data.get(maximumItemCount).removeChangeListener(this);
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872777753
GPR[SPVAP]-1659872777753
GPR[EPVAP]-1659872778371
GPR[EPVS]-1659872778371
========
(YIntervalSeries)this.data.get(maximumItemCount).removeChangeListener(this);
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872778373
GPR[SPVAP]-1659872778373
GPR[EPVAP]-1659872778986
GPR[EPVS]-1659872778986
========
(XYSeries)this.data.get(maximumItemCount).removeChangeListener(this);
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872778987
GPR[SPVAP]-1659872778987
GPR[EPVAP]-1659872779614
GPR[EPVS]-1659872779614
========
this.removed=maximumItemAge;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872779616
GPR[SPVAP]-1659872779616
GPR[EPVAP]-1659872780373
GPR[EPVS]-1659872780373
========
removeAgedItems(true);
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872780375
GPR[SPVAP]-1659872780375
GPR[EPVAP]-1659872781716
GPR[SPVATF]-1659872781716
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872782869
GPR[EPVS]-1659872782869
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
n=maximumItemCount+1;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872782871
GPR[SPVAP]-1659872782871
GPR[EPVAP]-1659872783655
GPR[EPVS]-1659872783655
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
fireSeriesChanged();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872783657
GPR[SPVAP]-1659872783657
GPR[EPVAP]-1659872784994
GPR[SPVATF]-1659872784994
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872786131
GPR[EPVS]-1659872786131
========
notifyListeners(new AxisChangeEvent(this));
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872786132
GPR[SPVAP]-1659872786132
GPR[EPVAP]-1659872786909
GPR[EPVS]-1659872786909
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
configureRangeAxes();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872786911
GPR[SPVAP]-1659872786911
GPR[EPVAP]-1659872787679
GPR[EPVS]-1659872787679
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
fireChangeEvent();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872787682
GPR[SPVAP]-1659872787682
GPR[EPVAP]-1659872789200
GPR[EPVS]-1659872789200
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
configureRangeAxes();
fireChangeEvent();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872789201
GPR[SPVAP]-1659872789201
GPR[EPVAP]-1659872790010
GPR[EPVS]-1659872790010
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872790011
GPR[SPVAP]-1659872790011
GPR[EPVAP]-1659872790826
GPR[EPVS]-1659872790826
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872790828
GPR[SPVAP]-1659872790828
GPR[EPVAP]-1659872791660
GPR[EPVS]-1659872791660
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872791662
GPR[SPVAP]-1659872791662
GPR[EPVAP]-1659872792413
GPR[EPVS]-1659872792413
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872792414
GPR[SPVAP]-1659872792414
GPR[EPVAP]-1659872793171
GPR[EPVS]-1659872793171
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872793173
GPR[SPVAP]-1659872793173
GPR[EPVAP]-1659872793927
GPR[EPVS]-1659872793927
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872793929
GPR[SPVAP]-1659872793929
GPR[EPVAP]-1659872794680
GPR[EPVS]-1659872794680
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.TOP_RIGHT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872794682
GPR[SPVAP]-1659872794682
GPR[EPVAP]-1659872795431
GPR[EPVS]-1659872795431
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.TOP_LEFT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872795433
GPR[SPVAP]-1659872795433
GPR[EPVAP]-1659872796175
GPR[EPVS]-1659872796175
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.TOP_RIGHT;
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.TOP_LEFT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872796176
GPR[SPVAP]-1659872796176
GPR[EPVAP]-1659872796927
GPR[EPVS]-1659872796927
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872796929
GPR[SPVAP]-1659872796929
GPR[EPVAP]-1659872797702
GPR[EPVS]-1659872797702
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872797704
GPR[SPVAP]-1659872797704
GPR[EPVAP]-1659872798459
GPR[EPVS]-1659872798459
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872798460
GPR[SPVAP]-1659872798460
GPR[EPVAP]-1659872799210
GPR[EPVS]-1659872799210
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872799211
GPR[SPVAP]-1659872799211
GPR[EPVAP]-1659872799976
GPR[EPVS]-1659872799976
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872799977
GPR[SPVAP]-1659872799977
GPR[EPVAP]-1659872800723
GPR[EPVS]-1659872800723
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872800725
GPR[SPVAP]-1659872800725
GPR[EPVAP]-1659872801481
GPR[EPVS]-1659872801481
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872801483
GPR[SPVAP]-1659872801483
GPR[EPVAP]-1659872802249
GPR[EPVS]-1659872802249
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872802250
GPR[SPVAP]-1659872802250
GPR[EPVAP]-1659872803016
GPR[EPVS]-1659872803016
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.TOP_LEFT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872803018
GPR[SPVAP]-1659872803018
GPR[EPVAP]-1659872803776
GPR[EPVS]-1659872803776
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.BOTTOM_LEFT;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872803778
GPR[SPVAP]-1659872803778
GPR[EPVAP]-1659872804534
GPR[EPVS]-1659872804534
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.TOP_LEFT;
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.BOTTOM_LEFT;

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872804536
GPR[SPVAP]-1659872804536
GPR[EPVAP]-1659872805297
GPR[EPVS]-1659872805297
========
fireChangeEvent();
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872805299
GPR[SPVAP]-1659872805299
GPR[EPVAP]-1659872806055
GPR[EPVS]-1659872806055
========
this.data.remove(maximumItemCount);
fireChangeEvent();
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872806056
GPR[SPVAP]-1659872806056
GPR[EPVAP]-1659872806828
GPR[EPVS]-1659872806828
========
fireSeriesChanged();
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872806830
GPR[SPVAP]-1659872806830
GPR[EPVAP]-1659872808151
GPR[SPVATF]-1659872808151
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872809314
GPR[EPVS]-1659872809314
========
copy.data=new java.util.ArrayList();
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872809316
GPR[SPVAP]-1659872809316
GPR[EPVAP]-1659872810106
GPR[EPVS]-1659872810106
========
this.data=new java.util.ArrayList();
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872810108
GPR[SPVAP]-1659872810108
GPR[EPVAP]-1659872811415
GPR[SPVATF]-1659872811415
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872812589
GPR[EPVS]-1659872812589
========
this.removed=TimePeriodAnchor.MIDDLE;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872812591
GPR[SPVAP]-1659872812591
GPR[EPVAP]-1659872813342
GPR[EPVS]-1659872813342
========
setSelectionState(this);
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872813344
GPR[SPVAP]-1659872813344
GPR[EPVAP]-1659872814092
GPR[EPVS]-1659872814092
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
this.timePeriodClass=null;
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872814093
GPR[SPVAP]-1659872814093
GPR[EPVAP]-1659872815387
GPR[SPVATF]-1659872815387
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872816528
GPR[EPVS]-1659872816528
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.maxY=Double.NaN;
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872816529
GPR[SPVAP]-1659872816529
GPR[EPVAP]-1659872817814
GPR[SPVATF]-1659872817814
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872818934
GPR[EPVS]-1659872818934
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872818936
GPR[SPVAP]-1659872818936
GPR[EPVAP]-1659872820251
GPR[SPVATF]-1659872820251
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872821370
GPR[EPVS]-1659872821370
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.maxY=Double.NaN;
this.data.remove(0);
this.timePeriodClass=null;
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872821371
GPR[SPVAP]-1659872821371
GPR[EPVAP]-1659872822661
GPR[SPVATF]-1659872822661
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872823808
GPR[EPVS]-1659872823808
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
fireSeriesChanged();
this.data.remove(0);
this.timePeriodClass=null;
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872823813
GPR[SPVAP]-1659872823813
GPR[EPVAP]-1659872825134
GPR[SPVATF]-1659872825134
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872826348
GPR[EPVS]-1659872826348
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.timePeriodClass=null;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
this.timePeriodClass=null;
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872826349
GPR[SPVAP]-1659872826349
GPR[EPVAP]-1659872827661
GPR[SPVATF]-1659872827661
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872828832
GPR[EPVS]-1659872828832
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.maxY=Double.NaN;
fireSeriesChanged();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872828833
GPR[SPVAP]-1659872828833
GPR[EPVAP]-1659872830129
GPR[SPVATF]-1659872830129
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872831315
GPR[EPVS]-1659872831315
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.maxY=Double.NaN;
this.timePeriodClass=null;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872831316
GPR[SPVAP]-1659872831316
GPR[EPVAP]-1659872832613
GPR[SPVATF]-1659872832613
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872833752
GPR[EPVS]-1659872833752
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
fireSeriesChanged();
this.timePeriodClass=null;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872833753
GPR[SPVAP]-1659872833753
GPR[EPVAP]-1659872835043
GPR[SPVATF]-1659872835043
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872836167
GPR[EPVS]-1659872836167
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.maxY=Double.NaN;
fireSeriesChanged();
this.data.remove(0);
this.timePeriodClass=null;
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872836168
GPR[SPVAP]-1659872836168
GPR[EPVAP]-1659872837449
GPR[SPVATF]-1659872837449
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872838590
GPR[EPVS]-1659872838590
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.maxY=Double.NaN;
this.timePeriodClass=null;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
this.timePeriodClass=null;
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872838591
GPR[SPVAP]-1659872838591
GPR[EPVAP]-1659872839872
GPR[SPVATF]-1659872839872
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872841015
GPR[EPVS]-1659872841015
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
fireSeriesChanged();
this.timePeriodClass=null;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
this.timePeriodClass=null;
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872841016
GPR[SPVAP]-1659872841016
GPR[EPVAP]-1659872842309
GPR[SPVATF]-1659872842309
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872843435
GPR[EPVS]-1659872843435
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.maxY=Double.NaN;
fireSeriesChanged();
this.timePeriodClass=null;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872843437
GPR[SPVAP]-1659872843437
GPR[EPVAP]-1659872844739
GPR[SPVATF]-1659872844739
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872845910
GPR[EPVS]-1659872845910
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.maxY=Double.NaN;
fireSeriesChanged();
this.timePeriodClass=null;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
this.timePeriodClass=null;
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872845913
GPR[SPVAP]-1659872845913
GPR[EPVAP]-1659872847208
GPR[SPVATF]-1659872847208
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872848353
GPR[EPVS]-1659872848353
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
findBoundsByIteration();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872848355
GPR[SPVAP]-1659872848355
GPR[EPVAP]-1659872849651
GPR[SPVATF]-1659872849651
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872850789
GPR[EPVS]-1659872850789
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
findBoundsByIteration();
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872850790
GPR[SPVAP]-1659872850790
GPR[EPVAP]-1659872852079
GPR[SPVATF]-1659872852079
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872853206
GPR[EPVS]-1659872853206
========
this.removed=maximumItemCount;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872853208
GPR[SPVAP]-1659872853208
GPR[EPVAP]-1659872853978
GPR[EPVS]-1659872853978
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
findBoundsByIteration();
fireSeriesChanged();
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872853979
GPR[SPVAP]-1659872853979
GPR[EPVAP]-1659872855271
GPR[SPVATF]-1659872855271
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872856426
GPR[EPVS]-1659872856426
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
findBoundsByIteration();
findBoundsByIteration();
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872856427
GPR[SPVAP]-1659872856427
GPR[EPVAP]-1659872857757
GPR[SPVATF]-1659872857757
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872858931
GPR[EPVS]-1659872858931
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
fireSeriesChanged();
findBoundsByIteration();
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872858937
GPR[SPVAP]-1659872858937
GPR[EPVAP]-1659872860281
GPR[SPVATF]-1659872860281
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872861408
GPR[EPVS]-1659872861408
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
findBoundsByIteration();
fireSeriesChanged();
findBoundsByIteration();
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872861409
GPR[SPVAP]-1659872861409
GPR[EPVAP]-1659872862751
GPR[SPVATF]-1659872862751
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872863886
GPR[EPVS]-1659872863887
========
(MatrixSeries)this.data.get(maximumItemCount).removeChangeListener(this);
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872863888
GPR[SPVAP]-1659872863888
GPR[EPVAP]-1659872864513
GPR[EPVS]-1659872864513
========
if(this.data.size()>maximumItemCount){
delete(0,count-maximum);
}
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872864516
GPR[SPVAP]-1659872864516
GPR[EPVAP]-1659872865266
GPR[EPVS]-1659872865266
========
this.data.clear();
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872865269
GPR[SPVAP]-1659872865269
GPR[EPVAP]-1659872866609
GPR[SPVATF]-1659872866609
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872867767
GPR[EPVS]-1659872867767
========
this.data.clear();
fireDatasetChanged(new DatasetChangeInfo());
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872867769
GPR[SPVAP]-1659872867769
GPR[EPVAP]-1659872868575
GPR[EPVS]-1659872868575
========
this.removed=Double.NaN;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872868579
GPR[SPVAP]-1659872868579
GPR[EPVAP]-1659872869339
GPR[EPVS]-1659872869339
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
this.minX=Double.NaN;
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872869342
GPR[SPVAP]-1659872869342
GPR[EPVAP]-1659872870087
GPR[EPVS]-1659872870087
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
this.maxX=Double.NaN;
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872870088
GPR[SPVAP]-1659872870088
GPR[EPVAP]-1659872870833
GPR[EPVS]-1659872870833
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.minX=Double.NaN;
this.maxX=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872870834
GPR[SPVAP]-1659872870834
GPR[EPVAP]-1659872871585
GPR[EPVS]-1659872871585
========
maximumItemCount=29*result+this.latest;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872871589
GPR[SPVAP]-1659872871589
GPR[EPVAP]-1659872872353
GPR[EPVS]-1659872872353
========
maximumItemCount=29*result+(int)this.maximumItemAge;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872872354
GPR[SPVAP]-1659872872354
GPR[EPVAP]-1659872873108
GPR[EPVS]-1659872873108
========
this.maxY=Double.NaN;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872873111
GPR[SPVAP]-1659872873111
GPR[EPVAP]-1659872874402
GPR[SPVATF]-1659872874402
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872875536
GPR[EPVS]-1659872875536
========
this.removed=Double.NaN;
this.maxY=Double.NaN;
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872875538
GPR[SPVAP]-1659872875538
GPR[EPVAP]-1659872876313
GPR[EPVS]-1659872876313
========
clone.data=new java.util.ArrayList(this.data.size());
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872876316
GPR[SPVAP]-1659872876316
GPR[EPVAP]-1659872877063
GPR[EPVS]-1659872877063
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(maximumItemCount);
fireDatasetChanged(new DatasetChangeInfo());
this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872877065
GPR[SPVAP]-1659872877065
GPR[EPVAP]-1659872877815
GPR[EPVS]-1659872877815
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(maximumItemCount);
this.data.remove(maximumItemCount);
fireDatasetChanged(new DatasetChangeInfo());

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872877816
GPR[SPVAP]-1659872877816
GPR[EPVAP]-1659872878564
GPR[EPVS]-1659872878564
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
fireDatasetChanged(new DatasetChangeInfo());
this.data.remove(maximumItemCount);
fireDatasetChanged(new DatasetChangeInfo());

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872878566
GPR[SPVAP]-1659872878566
GPR[EPVAP]-1659872879316
GPR[EPVS]-1659872879316
========
while((latest-getTimePeriod(0).getSerialIndex())>this.maximumItemAge){
this.data.remove(maximumItemCount);
fireDatasetChanged(new DatasetChangeInfo());
this.data.remove(maximumItemCount);
fireDatasetChanged(new DatasetChangeInfo());

this.data.remove(0);
removed=true;
}

========
MM Copying to MM
GPR[SPVS]-1659872879318
GPR[SPVAP]-1659872879318
GPR[EPVAP]-1659872880085
GPR[EPVS]-1659872880085
GPR[ESUN]-1659872882241
GPR[SSUN]-1659872882241
org.jfree.data.time.TimeSeries,892
Find no block!
GPR[SSUN]-1659872882776
org.jfree.data.time.TimeSeries,1211
========
Number yN=item.getValue();
if(item.getValue()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=minIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872885557
GPR[SPVAP]-1659872885557
GPR[EPVAP]-1659872890251
GPR[SPVATF]-1659872890251
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872891427
GPR[EPVS]-1659872891427
========
if(yN!=null){
double y=yN.doubleValue();
if(!Double.isNaN(y)){
if(y<=this.minY||y>=this.maxY){
findBoundsByIteration();
}
}
}
Number yN=item.getValue();
if(item.getValue()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872891428
GPR[SPVAP]-1659872891428
GPR[EPVAP]-1659872892173
GPR[EPVS]-1659872892173
========
Number yN=item.getValue();
if(item.getY()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872892175
GPR[SPVAP]-1659872892175
GPR[EPVAP]-1659872892940
GPR[EPVS]-1659872892940
========
Number yN=item.getValue();
if(item.getY()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=minIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872892942
GPR[SPVAP]-1659872892942
GPR[EPVAP]-1659872893694
GPR[EPVS]-1659872893694
========
if(yN!=null){
minY=n.doubleValue();
}
Number yN=item.getValue();
if(item.getValue()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872893698
GPR[SPVAP]-1659872893698
GPR[EPVAP]-1659872894450
GPR[EPVS]-1659872894450
========
Number yN=item.getValue();
if(item.getValue()!=null){
double y=yN.doubleValue();
this.data.clear();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872894468
GPR[SPVAP]-1659872894468
GPR[EPVAP]-1659872895778
GPR[SPVATF]-1659872895778
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872896940
GPR[EPVS]-1659872896940
========
Number yN=item.getValue();
if(item.getValue()!=null){
double y=yN.doubleValue();
this.timePeriodClass=null;
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872896941
GPR[SPVAP]-1659872896941
GPR[EPVAP]-1659872898229
GPR[SPVATF]-1659872898229
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872899430
GPR[EPVS]-1659872899430
========
Number yN=item.getValue();
if(item.getValue()!=null){
fireSeriesChanged();
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872899431
GPR[SPVAP]-1659872899431
GPR[EPVAP]-1659872900780
GPR[SPVATF]-1659872900780
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872901901
GPR[EPVS]-1659872901901
========
Number yN=item.getValue();
if(item.getValue()!=null){
this.data.clear();
this.timePeriodClass=null;
fireSeriesChanged();

double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872901903
GPR[SPVAP]-1659872901903
GPR[EPVAP]-1659872903190
GPR[SPVATF]-1659872903190
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872904372
GPR[EPVS]-1659872904372
========
Number yN=item.getValue();
if(item.getValue()!=null){
double y=yN.doubleValue();
this.data.clear();
this.timePeriodClass=null;
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872904373
GPR[SPVAP]-1659872904373
GPR[EPVAP]-1659872905695
GPR[SPVATF]-1659872905695
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872906815
GPR[EPVS]-1659872906815
========
Number yN=item.getValue();
if(item.getValue()!=null){
fireSeriesChanged();
double y=yN.doubleValue();
this.data.clear();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872906817
GPR[SPVAP]-1659872906817
GPR[EPVAP]-1659872908119
GPR[SPVATF]-1659872908119
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872909231
GPR[EPVS]-1659872909231
========
Number yN=item.getValue();
if(item.getValue()!=null){
this.data.clear();
this.timePeriodClass=null;
fireSeriesChanged();

double y=yN.doubleValue();
this.data.clear();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872909232
GPR[SPVAP]-1659872909232
GPR[EPVAP]-1659872910501
GPR[SPVATF]-1659872910501
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872911651
GPR[EPVS]-1659872911651
========
Number yN=item.getValue();
if(item.getValue()!=null){
fireSeriesChanged();
double y=yN.doubleValue();
this.timePeriodClass=null;
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872911652
GPR[SPVAP]-1659872911652
GPR[EPVAP]-1659872912953
GPR[SPVATF]-1659872912953
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872914103
GPR[EPVS]-1659872914103
========
Number yN=item.getValue();
if(item.getValue()!=null){
this.data.clear();
this.timePeriodClass=null;
fireSeriesChanged();

double y=yN.doubleValue();
this.timePeriodClass=null;
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872914105
GPR[SPVAP]-1659872914105
GPR[EPVAP]-1659872915536
GPR[SPVATF]-1659872915536
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872916661
GPR[EPVS]-1659872916661
========
Number yN=item.getValue();
if(item.getValue()!=null){
fireSeriesChanged();
this.data.clear();
this.timePeriodClass=null;
fireSeriesChanged();

double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872916662
GPR[SPVAP]-1659872916662
GPR[EPVAP]-1659872917971
GPR[SPVATF]-1659872917971
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872919099
GPR[EPVS]-1659872919099
========
Number yN=item.getValue();
if(item.getValue()!=null){
fireSeriesChanged();
double y=yN.doubleValue();
this.data.clear();
this.timePeriodClass=null;
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872919100
GPR[SPVAP]-1659872919100
GPR[EPVAP]-1659872920391
GPR[SPVATF]-1659872920391
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872921536
GPR[EPVS]-1659872921536
========
Number yN=item.getValue();
if(item.getValue()!=null){
this.data.clear();
this.timePeriodClass=null;
fireSeriesChanged();

double y=yN.doubleValue();
this.data.clear();
this.timePeriodClass=null;
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872921538
GPR[SPVAP]-1659872921538
GPR[EPVAP]-1659872922820
GPR[SPVATF]-1659872922820
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872924026
GPR[EPVS]-1659872924026
========
Number yN=item.getValue();
if(item.getValue()!=null){
fireSeriesChanged();
this.data.clear();
this.timePeriodClass=null;
fireSeriesChanged();

double y=yN.doubleValue();
this.data.clear();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872924028
GPR[SPVAP]-1659872924028
GPR[EPVAP]-1659872925328
GPR[SPVATF]-1659872925328
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872926467
GPR[EPVS]-1659872926467
========
Number yN=item.getValue();
if(item.getValue()!=null){
fireSeriesChanged();
this.data.clear();
this.timePeriodClass=null;
fireSeriesChanged();

double y=yN.doubleValue();
this.timePeriodClass=null;
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872926468
GPR[SPVAP]-1659872926468
GPR[EPVAP]-1659872927737
GPR[SPVATF]-1659872927737
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872928866
GPR[EPVS]-1659872928866
========
Number yN=item.getValue();
if(item.getValue()!=null){
fireSeriesChanged();
this.data.clear();
this.timePeriodClass=null;
fireSeriesChanged();

double y=yN.doubleValue();
this.data.clear();
this.timePeriodClass=null;
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872928867
GPR[SPVAP]-1659872928867
GPR[EPVAP]-1659872930173
GPR[SPVATF]-1659872930173
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872931317
GPR[EPVS]-1659872931317
========
Number yN=item.getValue();
if(item.getValue()!=null){
double y=yN.doubleValue();
this.minX=Double.NaN;
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872931320
GPR[SPVAP]-1659872931320
GPR[EPVAP]-1659872932067
GPR[EPVS]-1659872932067
========
Number yN=item.getValue();
if(item.getValue()!=null){
double y=yN.doubleValue();
this.maxX=Double.NaN;
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872932069
GPR[SPVAP]-1659872932069
GPR[EPVAP]-1659872932835
GPR[EPVS]-1659872932835
========
Number yN=item.getValue();
if(item.getValue()!=null){
this.data.clear();
this.minX=Double.NaN;
this.maxX=Double.NaN;
fireSeriesChanged();

double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872932836
GPR[SPVAP]-1659872932836
GPR[EPVAP]-1659872933602
GPR[EPVS]-1659872933602
========
fireDatasetChanged(new DatasetChangeInfo());
Number yN=item.getValue();
if(item.getValue()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872933610
GPR[SPVAP]-1659872933610
GPR[EPVAP]-1659872934372
GPR[EPVS]-1659872934372
========
if(Double.isNaN(y)||Double.isNaN(minY)){
return ;
}
Number yN=item.getValue();
if(item.getValue()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872934377
GPR[SPVAP]-1659872934377
GPR[EPVAP]-1659872935151
GPR[EPVS]-1659872935151
========
Number yN=item.getValue();
if(item.getMinOutlier()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872935156
GPR[SPVAP]-1659872935156
GPR[EPVAP]-1659872935932
GPR[EPVS]-1659872935932
========
Number yN=item.getValue();
if(item.getMaxOutlier()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872935933
GPR[SPVAP]-1659872935933
GPR[EPVAP]-1659872936700
GPR[EPVS]-1659872936700
========
Number yN=item.getValue();
if(item.getValue()==null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872936710
GPR[SPVAP]-1659872936710
GPR[EPVAP]-1659872938069
GPR[SPVATF]-1659872938069
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872939227
GPR[EPVS]-1659872939227
========
Number yN=item.getValue();
if(item.getValue()!=PlotOrientation.HORIZONTAL){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872939228
GPR[SPVAP]-1659872939228
GPR[EPVAP]-1659872939961
GPR[EPVS]-1659872939961
GPR[ESUN]-1659872939964
GPR[SSUN]-1659872939964
org.jfree.data.time.TimeSeries,1212
========
if(item.getValue()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=minIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872942807
GPR[SPVAP]-1659872942807
GPR[EPVAP]-1659872947348
GPR[SPVATF]-1659872947348
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872948459
GPR[EPVS]-1659872948459
========
if(item.getY()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872948460
GPR[SPVAP]-1659872948460
GPR[EPVAP]-1659872949288
GPR[EPVS]-1659872949288
========
if(item.getY()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=minIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872949294
GPR[SPVAP]-1659872949294
GPR[EPVAP]-1659872950665
GPR[EPVS]-1659872950665
========
if(item.getValue()==null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872950679
GPR[SPVAP]-1659872950679
GPR[EPVAP]-1659872952082
GPR[SPVATF]-1659872952082
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872953423
GPR[EPVS]-1659872953423
========
if(item.getValue()!=PlotOrientation.VERTICAL){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872953424
GPR[SPVAP]-1659872953424
GPR[EPVAP]-1659872954213
GPR[EPVS]-1659872954213
========
fireDatasetChanged(new DatasetChangeInfo());
if(item.getValue()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872954219
GPR[SPVAP]-1659872954219
GPR[EPVAP]-1659872954995
GPR[EPVS]-1659872954995
========
if(item.getValue(item)!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872954997
GPR[SPVAP]-1659872954997
GPR[EPVAP]-1659872955749
GPR[EPVS]-1659872955749
========
if(item.getMinOutlier()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872955755
GPR[SPVAP]-1659872955755
GPR[EPVAP]-1659872956501
GPR[EPVS]-1659872956501
========
if(item.getMaxOutlier()!=null){
double y=yN.doubleValue();
this.minY=minIgnoreNaN(this.minY,y);
this.maxY=maxIgnoreNaN(this.maxY,y);
}

========
MM Copying to MM
GPR[SPVS]-1659872956502
GPR[SPVAP]-1659872956502
GPR[EPVAP]-1659872957278
GPR[EPVS]-1659872957278
GPR[ESUN]-1659872957291
GPR[SSUN]-1659872957291
org.jfree.data.time.TimeSeries,1213
GPR[ESUN]-1659872957764
GPR[SSUN]-1659872957764
org.jfree.data.time.TimeSeries,1214
GPR[ESUN]-1659872958096
GPR[SSUN]-1659872958096
org.jfree.data.time.TimeSeries,1215
GPR[ESUN]-1659872958439
GPR[SSUN]-1659872958439
org.jfree.data.time.TimeSeries,1217
Find no block!
GPR[SSUN]-1659872958765
org.jfree.data.time.TimeSeries,1265
========
if(Double.isNaN(a)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.max(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872961291
GPR[SPVAP]-1659872961291
GPR[EPVAP]-1659872965792
GPR[SPVATF]-1659872965792
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872966918
GPR[EPVS]-1659872966918
========
if(Double.isNaN(b)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872966920
GPR[SPVAP]-1659872966920
GPR[EPVAP]-1659872968298
GPR[SPVATF]-1659872968298
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872969472
GPR[EPVS]-1659872969472
========
if(Double.isNaN(a)){
return b;
}else {
if(Double.isNaN(this.b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872969474
GPR[SPVAP]-1659872969474
GPR[EPVAP]-1659872970220
GPR[EPVS]-1659872970220
========
if(Double.isNaN(a)){
return b;
}else {
if(Double.isNaN(this.a)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872970222
GPR[SPVAP]-1659872970222
GPR[EPVAP]-1659872970990
GPR[EPVS]-1659872970990
========
if(Double.isNaN(a)){
return b;
}else {
if(Double.isNaN(a)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872970991
GPR[SPVAP]-1659872970991
GPR[EPVAP]-1659872972313
GPR[SPVATF]-1659872972313
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872973455
GPR[EPVS]-1659872973455
========
if(Double.isNaN(b)){
return b;
}else {
if(Double.isNaN(a)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872973457
GPR[SPVAP]-1659872973457
GPR[EPVAP]-1659872974749
GPR[SPVATF]-1659872974749
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872975907
GPR[EPVS]-1659872975907
========
if(Double.isNaN(this.a)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872975909
GPR[SPVAP]-1659872975909
GPR[EPVAP]-1659872976656
GPR[EPVS]-1659872976656
========
if(Double.isNaN(this.b)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872976657
GPR[SPVAP]-1659872976657
GPR[EPVAP]-1659872977416
GPR[EPVS]-1659872977416
========
if(Double.isNaN(minY)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872977419
GPR[SPVAP]-1659872977419
GPR[EPVAP]-1659872978716
GPR[SPVATF]-1659872978716
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872979843
GPR[EPVS]-1659872979843
========
if(Double.isNaN(minY)){
y2=0.0;
}
if(Double.isNaN(a)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872979844
GPR[SPVAP]-1659872979844
GPR[EPVAP]-1659872980585
GPR[EPVS]-1659872980585
========
if(Double.isInfinite(a)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872980587
GPR[SPVAP]-1659872980587
GPR[EPVAP]-1659872981874
GPR[SPVATF]-1659872981874
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872983001
GPR[EPVS]-1659872983001
========
if(Double.get(a)){
return b;
}else {
if(Double.get(b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872983009
GPR[SPVAP]-1659872983009
GPR[EPVAP]-1659872983741
GPR[EPVS]-1659872983741
========
if(Double.get(a)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872983742
GPR[SPVAP]-1659872983742
GPR[EPVAP]-1659872984467
GPR[EPVS]-1659872984467
========
if(Double.isNaN(a)){
return b;
}else {
if(Double.get(b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872984468
GPR[SPVAP]-1659872984468
GPR[EPVAP]-1659872985223
GPR[EPVS]-1659872985223
========
if(Double.isNaN(a)){
return b;
}else {
this.week=(byte)Math.min(maximumItemCount,LAST_WEEK_IN_YEAR);
if(Double.isNaN(b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872985224
GPR[SPVAP]-1659872985224
GPR[EPVAP]-1659872985975
GPR[EPVS]-1659872985975
========
if(Double.isNaN(a)){
return b;
}else {
this.year=(short)maximumItemCount;
if(Double.isNaN(b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872985976
GPR[SPVAP]-1659872985976
GPR[EPVAP]-1659872986715
GPR[EPVS]-1659872986715
========
if(Double.isNaN(a)){
return b;
}else {
this.week=(byte)Math.min(maximumItemCount,LAST_WEEK_IN_YEAR);
this.year=(short)maximumItemCount;

if(Double.isNaN(b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872986716
GPR[SPVAP]-1659872986716
GPR[EPVAP]-1659872987479
GPR[EPVS]-1659872987479
========
b=calculateLog(value);
if(Double.isNaN(a)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872987483
GPR[SPVAP]-1659872987483
GPR[EPVAP]-1659872988219
GPR[EPVS]-1659872988219
GPR[ESUN]-1659872988220
GPR[SSUN]-1659872988220
org.jfree.data.time.TimeSeries,1266
GPR[ESUN]-1659872988723
GPR[SSUN]-1659872988723
org.jfree.data.time.TimeSeries,1288
========
if(Double.isNaN(a)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.min(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872991122
GPR[SPVAP]-1659872991122
GPR[EPVAP]-1659872995661
GPR[SPVATF]-1659872995661
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872996787
GPR[EPVS]-1659872996787
========
if(Double.isNaN(b)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.max(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872996788
GPR[SPVAP]-1659872996788
GPR[EPVAP]-1659872998107
GPR[SPVATF]-1659872998107
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659872999271
GPR[EPVS]-1659872999271
========
if(Double.isNaN(a)){
return b;
}else {
if(Double.isNaN(this.b)){
return a;
}else {
return Math.max(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659872999274
GPR[SPVAP]-1659872999274
GPR[EPVAP]-1659873000034
GPR[EPVS]-1659873000034
========
if(Double.isNaN(a)){
return b;
}else {
if(Double.isNaN(this.a)){
return a;
}else {
return Math.max(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873000036
GPR[SPVAP]-1659873000036
GPR[EPVAP]-1659873000782
GPR[EPVS]-1659873000782
========
if(Double.isNaN(a)){
return b;
}else {
if(Double.isNaN(a)){
return a;
}else {
return Math.max(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873000783
GPR[SPVAP]-1659873000783
GPR[EPVAP]-1659873002098
GPR[SPVATF]-1659873002098
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873003229
GPR[EPVS]-1659873003229
========
if(Double.isNaN(b)){
return b;
}else {
if(Double.isNaN(a)){
return a;
}else {
return Math.max(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873003231
GPR[SPVAP]-1659873003231
GPR[EPVAP]-1659873004563
GPR[SPVATF]-1659873004563
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873005723
GPR[EPVS]-1659873005723
========
if(Double.isNaN(this.a)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.max(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873005725
GPR[SPVAP]-1659873005725
GPR[EPVAP]-1659873006487
GPR[EPVS]-1659873006487
========
if(Double.isNaN(this.b)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.max(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873006488
GPR[SPVAP]-1659873006488
GPR[EPVAP]-1659873007233
GPR[EPVS]-1659873007233
========
if(Double.isNaN(minY)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.max(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873007235
GPR[SPVAP]-1659873007235
GPR[EPVAP]-1659873008551
GPR[SPVATF]-1659873008551
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873009702
GPR[EPVS]-1659873009702
========
if(Double.isNaN(minY)){
y0=0.0;
}
if(Double.isNaN(a)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.max(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873009704
GPR[SPVAP]-1659873009704
GPR[EPVAP]-1659873010420
GPR[EPVS]-1659873010420
========
if(Double.isInfinite(a)){
return b;
}else {
if(Double.isNaN(b)){
return a;
}else {
return Math.max(a,b);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873010423
GPR[SPVAP]-1659873010423
GPR[EPVAP]-1659873011704
GPR[SPVATF]-1659873011704
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873012845
GPR[EPVS]-1659873012845
GPR[ESUN]-1659873012852
GPR[SSUN]-1659873012852
org.jfree.data.time.TimeSeries,1289
GPR[ESUN]-1659873013369
GPR[SSUN]-1659873013369
org.jfree.data.general.Series,315
========
if(this.notify){
this.verticalTickLabels=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659873015569
GPR[SPVAP]-1659873015569
GPR[EPVAP]-1659873017905
GPR[EPVS]-1659873017905
========
if(this.notify){
this.inverted=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659873017906
GPR[SPVAP]-1659873017907
GPR[EPVAP]-1659873019080
GPR[EPVS]-1659873019080
========
if(this.notify){
this.gridBandsVisible=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659873019082
GPR[SPVAP]-1659873019082
GPR[EPVAP]-1659873020184
GPR[EPVS]-1659873020184
========
if(this.notify){
this.autoRangeIncludesZero=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659873020185
GPR[SPVAP]-1659873020185
GPR[EPVAP]-1659873021308
GPR[EPVS]-1659873021308
========
if(this.notify){
notifyListeners(new AxisChangeEvent(this));
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659873021309
GPR[SPVAP]-1659873021309
GPR[EPVAP]-1659873022430
GPR[EPVS]-1659873022430
========
if(this.notify){
this.autoRangeIncludesZero=notify;
notifyListeners(new AxisChangeEvent(this));

notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659873022431
GPR[SPVAP]-1659873022431
GPR[EPVAP]-1659873023611
GPR[EPVS]-1659873023611
========
if(this.notify){
this.autoRangeStickyZero=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659873023612
GPR[SPVAP]-1659873023612
GPR[EPVAP]-1659873024742
GPR[EPVS]-1659873024742
========
if(this.notify){
this.autoRangeStickyZero=notify;
notifyListeners(new AxisChangeEvent(this));

notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659873024744
GPR[SPVAP]-1659873024744
GPR[EPVAP]-1659873025883
GPR[EPVS]-1659873025883
========
if(this.notify){
this.text=description;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659873025884
GPR[SPVAP]-1659873025884
GPR[EPVAP]-1659873027009
GPR[EPVS]-1659873027009
========
notifyListeners(new DialLayerChangeEvent(this));
if(this.notify){
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659873027010
GPR[SPVAP]-1659873027010
GPR[EPVAP]-1659873028177
GPR[EPVS]-1659873028177
========
notifyListeners(new AxisChangeEvent(this));
if(this.notify){
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659873028180
GPR[SPVAP]-1659873028180
GPR[EPVAP]-1659873029305
GPR[EPVS]-1659873029305
========
if(this.notify){
this.notify=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659873029307
GPR[SPVAP]-1659873029307
GPR[EPVAP]-1659873032802
GPR[SPVATF]-1659873032802
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873033931
GPR[EPVS]-1659873033931
GPR[ESUN]-1659873033932
GPR[SSUN]-1659873033932
org.jfree.data.general.Series,316
GPR[ESUN]-1659873034451
GPR[SSUN]-1659873034451
org.jfree.data.general.Series,318
Find no block!
GPR[SSUN]-1659873034809
org.jfree.data.general.Series,328
========
if(listenerList[i]!=SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
MM Copying to MM
GPR[SPVS]-1659873037446
GPR[SPVAP]-1659873037446
GPR[EPVAP]-1659873042000
GPR[SPVATF]-1659873042000
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873043118
GPR[EPVS]-1659873043118
========
if(clone.datasets[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
MM Copying to MM
GPR[SPVS]-1659873043120
GPR[SPVAP]-1659873043120
GPR[EPVAP]-1659873043837
GPR[EPVS]-1659873043837
========
if(listenerList[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
MM Copying to MM
GPR[SPVS]-1659873043838
GPR[SPVAP]-1659873043838
GPR[EPVAP]-1659873045121
GPR[SPVATF]-1659873045121
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873046234
GPR[EPVS]-1659873046234
========
if(listenerList[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
MM Copying to MM
GPR[SPVS]-1659873046235
GPR[SPVAP]-1659873046235
GPR[EPVAP]-1659873047485
GPR[SPVATF]-1659873047485
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873048625
GPR[EPVS]-1659873048625
========
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).setPaint(event);
}

========
MM Copying to MM
GPR[SPVS]-1659873048627
GPR[SPVAP]-1659873048627
GPR[EPVAP]-1659873049343
GPR[EPVS]-1659873049343
========
description+=description.substring(0,i)+description;
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
MM Copying to MM
GPR[SPVS]-1659873049348
GPR[SPVAP]-1659873049348
GPR[EPVAP]-1659873050635
GPR[SPVATF]-1659873050635
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873051772
GPR[EPVS]-1659873051772
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873054216
GPR[SPVAP]-1659873054216
GPR[EPVAP]-1659873055451
GPR[SPVATF]-1659873055451
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873056597
GPR[EPVS]-1659873056597
========
for(int i=listeners.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873056599
GPR[SPVAP]-1659873056599
GPR[EPVAP]-1659873057356
GPR[EPVS]-1659873057356
========
for(int i=ls.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873057357
GPR[SPVAP]-1659873057357
GPR[EPVAP]-1659873058060
GPR[EPVS]-1659873058060
========
invalidateRangeInfo();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873058062
GPR[SPVAP]-1659873058062
GPR[EPVAP]-1659873058767
GPR[EPVS]-1659873058767
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]!=SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873058769
GPR[SPVAP]-1659873058769
GPR[EPVAP]-1659873059994
GPR[SPVATF]-1659873059994
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873061106
GPR[EPVS]-1659873061106
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(clone.datasets[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873061107
GPR[SPVAP]-1659873061107
GPR[EPVAP]-1659873061813
GPR[EPVS]-1659873061813
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(clone.datasets[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873061814
GPR[SPVAP]-1659873061814
GPR[EPVAP]-1659873062535
GPR[EPVS]-1659873062535
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873062536
GPR[SPVAP]-1659873062536
GPR[EPVAP]-1659873063816
GPR[SPVATF]-1659873063816
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873064932
GPR[EPVS]-1659873064932
========
for(int i=listenerList.length-2;i>=data.length;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873064934
GPR[SPVAP]-1659873064934
GPR[EPVAP]-1659873065646
GPR[EPVS]-1659873065646
========
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873065647
GPR[SPVAP]-1659873065647
GPR[EPVAP]-1659873066347
GPR[EPVS]-1659873066347
========
description=s.trim();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873066349
GPR[SPVAP]-1659873066349
GPR[EPVAP]-1659873067068
GPR[EPVS]-1659873067068
========
for(int i=listenerList.length-1;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873067070
GPR[SPVAP]-1659873067070
GPR[EPVAP]-1659873068316
GPR[SPVATF]-1659873068316
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873069443
GPR[EPVS]-1659873069443
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).setPaint(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873069445
GPR[SPVAP]-1659873069445
GPR[EPVAP]-1659873070158
GPR[EPVS]-1659873070158
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(array1[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873070159
GPR[SPVAP]-1659873070159
GPR[EPVAP]-1659873070865
GPR[EPVS]-1659873070865
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(array2[i]==null){
if(array1[i]!=null){
return false;
}
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873070866
GPR[SPVAP]-1659873070866
GPR[EPVAP]-1659873071595
GPR[EPVS]-1659873071595
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(array1[i]!=array2[i]){
return false;
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873071596
GPR[SPVAP]-1659873071596
GPR[EPVAP]-1659873072356
GPR[EPVS]-1659873072356
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(array2[i]==null){
if(array1[i]!=null){
return false;
}
}
if(array1[i]!=array2[i]){
return false;
}

if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873072357
GPR[SPVAP]-1659873072357
GPR[EPVAP]-1659873073057
GPR[EPVS]-1659873073057
========
clone.timeZone=(TimeZone)this.timeZone.clone();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873073059
GPR[SPVAP]-1659873073059
GPR[EPVAP]-1659873073791
GPR[EPVS]-1659873073791
========
clone.labelInfo=new PeriodAxisLabelInfo[this.labelInfo.length];
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873073792
GPR[SPVAP]-1659873073792
GPR[EPVAP]-1659873074517
GPR[EPVS]-1659873074517
========
for(int i=listenerList.length-2;i>0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873074519
GPR[SPVAP]-1659873074519
GPR[EPVAP]-1659873075777
GPR[SPVATF]-1659873075777
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873076946
GPR[EPVS]-1659873076946
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
start=i+1;
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873076947
GPR[SPVAP]-1659873076947
GPR[EPVAP]-1659873077679
GPR[EPVS]-1659873077679
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(getRenderer(i)!=null){
ValueAxis getDomainAxisForDataset(i)=getDomainAxisForDataset(i);
ValueAxis getRangeAxisForDataset(i)=getRangeAxisForDataset(i);
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873077680
GPR[SPVAP]-1659873077680
GPR[EPVAP]-1659873078316
GPR[EPVS]-1659873078316
========
for(int i=listenerList.length-1;i>=0;i-=2){
if(getRenderer(i)!=null){
ValueAxis getDomainAxisForDataset(i)=getDomainAxisForDataset(i);
ValueAxis getRangeAxisForDataset(i)=getRangeAxisForDataset(i);
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873078317
GPR[SPVAP]-1659873078317
GPR[EPVAP]-1659873078914
GPR[EPVS]-1659873078914
========
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]!=SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873078919
GPR[SPVAP]-1659873078919
GPR[EPVAP]-1659873079646
GPR[EPVS]-1659873079646
========
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873079647
GPR[SPVAP]-1659873079647
GPR[EPVAP]-1659873080359
GPR[EPVS]-1659873080359
========
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873080359
GPR[SPVAP]-1659873080359
GPR[EPVAP]-1659873081071
GPR[EPVS]-1659873081071
========
if(i>xData.length){
throw new IllegalArgumentException("Period can\'t be longer than dataset.");
}
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873081074
GPR[SPVAP]-1659873081074
GPR[EPVAP]-1659873081785
GPR[EPVS]-1659873081785
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873084215
GPR[SPVAP]-1659873084215
GPR[EPVAP]-1659873084945
GPR[EPVS]-1659873084945
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=ls.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873084946
GPR[SPVAP]-1659873084946
GPR[EPVAP]-1659873085672
GPR[EPVS]-1659873085672
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873085673
GPR[SPVAP]-1659873085673
GPR[EPVAP]-1659873086918
GPR[SPVATF]-1659873086918
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873088113
GPR[EPVS]-1659873088113
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]!=SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873088115
GPR[SPVAP]-1659873088115
GPR[EPVAP]-1659873089367
GPR[SPVATF]-1659873089367
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873090495
GPR[EPVS]-1659873090495
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(clone.datasets[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873090496
GPR[SPVAP]-1659873090496
GPR[EPVAP]-1659873091225
GPR[EPVS]-1659873091225
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(clone.datasets[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873091227
GPR[SPVAP]-1659873091227
GPR[EPVAP]-1659873091937
GPR[EPVS]-1659873091937
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873091938
GPR[SPVAP]-1659873091938
GPR[EPVAP]-1659873093167
GPR[SPVATF]-1659873093167
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873094316
GPR[EPVS]-1659873094316
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=data.length;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873094318
GPR[SPVAP]-1659873094318
GPR[EPVAP]-1659873095026
GPR[EPVS]-1659873095026
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873095028
GPR[SPVAP]-1659873095028
GPR[EPVAP]-1659873095728
GPR[EPVS]-1659873095728
========
description=s.trim();
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873095731
GPR[SPVAP]-1659873095731
GPR[EPVAP]-1659873096471
GPR[EPVS]-1659873096471
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).setPaint(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873096474
GPR[SPVAP]-1659873096474
GPR[EPVAP]-1659873097182
GPR[EPVS]-1659873097182
========
Object[] listenerList=this.listeners.getListenerList();
clone.timeZone=(TimeZone)this.timeZone.clone();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873097183
GPR[SPVAP]-1659873097183
GPR[EPVAP]-1659873097910
GPR[EPVS]-1659873097910
========
Object[] listenerList=this.listeners.getListenerList();
clone.labelInfo=new PeriodAxisLabelInfo[this.labelInfo.length];
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873097911
GPR[SPVAP]-1659873097911
GPR[EPVAP]-1659873098624
GPR[EPVS]-1659873098624
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(array1[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873098626
GPR[SPVAP]-1659873098626
GPR[EPVAP]-1659873099343
GPR[EPVS]-1659873099343
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(array2[i]==null){
if(array1[i]!=null){
return false;
}
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873099344
GPR[SPVAP]-1659873099344
GPR[EPVAP]-1659873100074
GPR[EPVS]-1659873100074
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(array1[i]!=array2[i]){
return false;
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873100075
GPR[SPVAP]-1659873100075
GPR[EPVAP]-1659873100789
GPR[EPVS]-1659873100789
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(array2[i]==null){
if(array1[i]!=null){
return false;
}
}
if(array1[i]!=array2[i]){
return false;
}

if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873100790
GPR[SPVAP]-1659873100790
GPR[EPVAP]-1659873101491
GPR[EPVS]-1659873101491
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-1;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873101493
GPR[SPVAP]-1659873101493
GPR[EPVAP]-1659873102729
GPR[SPVATF]-1659873102729
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873103870
GPR[EPVS]-1659873103870
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=this.length-Long.toHexString(serialVersionUID).toUpperCase().length();i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873103871
GPR[SPVAP]-1659873103871
GPR[EPVAP]-1659873104572
GPR[EPVS]-1659873104572
========
new StringBuffer("0x").append(Long.toHexString(serialVersionUID).toUpperCase());
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873104574
GPR[SPVAP]-1659873104574
GPR[EPVAP]-1659873105829
GPR[SPVATF]-1659873105829
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873106944
GPR[EPVS]-1659873106944
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873106945
GPR[SPVAP]-1659873106945
GPR[EPVAP]-1659873108176
GPR[SPVATF]-1659873108176
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873109327
GPR[EPVS]-1659873109327
========
if(i==description.length()-1){
throw new TimePeriodFormatException("Q found at end of string.");
}
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873109329
GPR[SPVAP]-1659873109329
GPR[EPVAP]-1659873110503
GPR[EPVS]-1659873110503
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(getRenderer(i)!=null){
ValueAxis getDomainAxisForDataset(i)=getDomainAxisForDataset(i);
ValueAxis getRangeAxisForDataset(i)=getRangeAxisForDataset(i);
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873110507
GPR[SPVAP]-1659873110507
GPR[EPVAP]-1659873111201
GPR[EPVS]-1659873111201
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-1;i>=0;i-=2){
if(getRenderer(i)!=null){
ValueAxis getDomainAxisForDataset(i)=getDomainAxisForDataset(i);
ValueAxis getRangeAxisForDataset(i)=getRangeAxisForDataset(i);
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873111202
GPR[SPVAP]-1659873111202
GPR[EPVAP]-1659873111848
GPR[EPVS]-1659873111848
========
description+=description.substring(0,i)+description;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873111852
GPR[SPVAP]-1659873111852
GPR[EPVAP]-1659873112585
GPR[EPVS]-1659873112585
========
if(i+description.length()<description.length()){
description+=searchReplace(inputString.substring(i+searchString.length()),searchString,description);
}
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873112586
GPR[SPVAP]-1659873112586
GPR[EPVAP]-1659873113355
GPR[EPVS]-1659873113355
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]!=SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873113359
GPR[SPVAP]-1659873113359
GPR[EPVAP]-1659873114119
GPR[EPVS]-1659873114119
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873114120
GPR[SPVAP]-1659873114120
GPR[EPVAP]-1659873114846
GPR[EPVS]-1659873114846
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873114847
GPR[SPVAP]-1659873114847
GPR[EPVAP]-1659873115573
GPR[EPVS]-1659873115573
========
if(i>xData.length){
throw new IllegalArgumentException("Period can\'t be longer than dataset.");
}
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873115576
GPR[SPVAP]-1659873115576
GPR[EPVAP]-1659873116301
GPR[EPVS]-1659873116301
========
if(data1.length!=data2.length){
throw new IllegalArgumentException("\'data1\' and \'data2\' arrays must have same length.");
}
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873116303
GPR[SPVAP]-1659873116303
GPR[EPVAP]-1659873117018
GPR[EPVS]-1659873117018
========
this.key=key;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873117021
GPR[SPVAP]-1659873117021
GPR[EPVAP]-1659873118253
GPR[SPVATF]-1659873118253
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873119380
GPR[EPVS]-1659873119380
========
this.description=description;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873119381
GPR[SPVAP]-1659873119381
GPR[EPVAP]-1659873120645
GPR[SPVATF]-1659873120645
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873121795
GPR[EPVS]-1659873121795
========
this.listeners=new EventListenerList();
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873121796
GPR[SPVAP]-1659873121796
GPR[EPVAP]-1659873123009
GPR[SPVATF]-1659873123009
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873124129
GPR[EPVS]-1659873124129
========
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873124130
GPR[SPVAP]-1659873124130
GPR[EPVAP]-1659873125377
GPR[SPVATF]-1659873125377
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873126487
GPR[EPVS]-1659873126487
========
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873126488
GPR[SPVAP]-1659873126488
GPR[EPVAP]-1659873127741
GPR[SPVATF]-1659873127741
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873128855
GPR[EPVS]-1659873128855
========
this.key=key;
this.description=description;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873128856
GPR[SPVAP]-1659873128856
GPR[EPVAP]-1659873130080
GPR[SPVATF]-1659873130080
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873131194
GPR[EPVS]-1659873131194
========
this.key=key;
this.listeners=new EventListenerList();
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873131195
GPR[SPVAP]-1659873131195
GPR[EPVAP]-1659873132479
GPR[SPVATF]-1659873132479
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873133591
GPR[EPVS]-1659873133591
========
this.key=key;
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873133591
GPR[SPVAP]-1659873133591
GPR[EPVAP]-1659873134849
GPR[SPVATF]-1659873134849
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873136010
GPR[EPVS]-1659873136010
========
this.key=key;
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873136011
GPR[SPVAP]-1659873136011
GPR[EPVAP]-1659873137280
GPR[SPVATF]-1659873137280
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873138388
GPR[EPVS]-1659873138388
========
this.description=description;
this.listeners=new EventListenerList();
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873138389
GPR[SPVAP]-1659873138389
GPR[EPVAP]-1659873139640
GPR[SPVATF]-1659873139640
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873140757
GPR[EPVS]-1659873140757
========
this.description=description;
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873140757
GPR[SPVAP]-1659873140758
GPR[EPVAP]-1659873142013
GPR[SPVATF]-1659873142013
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873143155
GPR[EPVS]-1659873143155
========
this.description=description;
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873143156
GPR[SPVAP]-1659873143156
GPR[EPVAP]-1659873144395
GPR[SPVATF]-1659873144395
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873145525
GPR[EPVS]-1659873145525
========
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873145526
GPR[SPVAP]-1659873145526
GPR[EPVAP]-1659873146756
GPR[SPVATF]-1659873146756
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873147895
GPR[EPVS]-1659873147895
========
this.listeners=new EventListenerList();
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873147896
GPR[SPVAP]-1659873147896
GPR[EPVAP]-1659873149128
GPR[SPVATF]-1659873149128
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873150267
GPR[EPVS]-1659873150267
========
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873150269
GPR[SPVAP]-1659873150269
GPR[EPVAP]-1659873151523
GPR[SPVATF]-1659873151523
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873152645
GPR[EPVS]-1659873152645
========
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873152646
GPR[SPVAP]-1659873152646
GPR[EPVAP]-1659873153864
GPR[SPVATF]-1659873153864
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873154983
GPR[EPVS]-1659873154983
========
this.key=key;
this.description=description;
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873154984
GPR[SPVAP]-1659873154984
GPR[EPVAP]-1659873156204
GPR[SPVATF]-1659873156204
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873157339
GPR[EPVS]-1659873157339
========
this.key=key;
this.description=description;
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873157339
GPR[SPVAP]-1659873157339
GPR[EPVAP]-1659873158589
GPR[SPVATF]-1659873158589
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873159706
GPR[EPVS]-1659873159706
========
this.key=key;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873159707
GPR[SPVAP]-1659873159707
GPR[EPVAP]-1659873160979
GPR[SPVATF]-1659873160979
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873162111
GPR[EPVS]-1659873162111
========
this.key=key;
this.listeners=new EventListenerList();
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873162112
GPR[SPVAP]-1659873162112
GPR[EPVAP]-1659873163344
GPR[SPVATF]-1659873163344
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873164472
GPR[EPVS]-1659873164472
========
this.key=key;
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873164473
GPR[SPVAP]-1659873164473
GPR[EPVAP]-1659873165719
GPR[SPVATF]-1659873165719
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873166831
GPR[EPVS]-1659873166831
========
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873166832
GPR[SPVAP]-1659873166832
GPR[EPVAP]-1659873168072
GPR[SPVATF]-1659873168072
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873169176
GPR[EPVS]-1659873169176
========
this.description=description;
this.listeners=new EventListenerList();
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873169177
GPR[SPVAP]-1659873169177
GPR[EPVAP]-1659873170426
GPR[SPVATF]-1659873170426
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873171582
GPR[EPVS]-1659873171582
========
this.description=description;
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873171583
GPR[SPVAP]-1659873171583
GPR[EPVAP]-1659873172826
GPR[SPVATF]-1659873172826
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873173949
GPR[EPVS]-1659873173949
========
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873173950
GPR[SPVAP]-1659873173950
GPR[EPVAP]-1659873175199
GPR[SPVATF]-1659873175199
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873176331
GPR[EPVS]-1659873176331
========
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873176332
GPR[SPVAP]-1659873176332
GPR[EPVAP]-1659873177595
GPR[SPVATF]-1659873177595
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873178740
GPR[EPVS]-1659873178740
========
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873178742
GPR[SPVAP]-1659873178742
GPR[EPVAP]-1659873179995
GPR[SPVATF]-1659873179995
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873181111
GPR[EPVS]-1659873181111
========
this.key=key;
this.description=description;
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873181112
GPR[SPVAP]-1659873181112
GPR[EPVAP]-1659873182375
GPR[SPVATF]-1659873182375
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873183515
GPR[EPVS]-1659873183515
========
this.key=key;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873183516
GPR[SPVAP]-1659873183516
GPR[EPVAP]-1659873184755
GPR[SPVATF]-1659873184755
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873185887
GPR[EPVS]-1659873185887
========
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
MM Copying to MM
GPR[SPVS]-1659873185888
GPR[SPVAP]-1659873185888
GPR[EPVAP]-1659873187112
GPR[SPVATF]-1659873187112
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873188232
GPR[EPVS]-1659873188232
GPR[ESUN]-1659873188235
GPR[SSUN]-1659873188235
org.jfree.data.general.Series,329
GPR[ESUN]-1659873188759
GPR[SSUN]-1659873188759
org.jfree.data.general.Series,336
Find no block!
GPR[SSUN]-1659873189119
org.jfree.data.event.SeriesChangeEvent,70
GPR[ESUN]-1659873191118
GPR[SSUN]-1659873191118
org.jfree.data.event.SeriesChangeEvent,71
Find no block!
GPR[SSUN]-1659873191464
org.jfree.data.event.SeriesChangeEvent,82
GPR[ESUN]-1659873193471
GPR[SSUN]-1659873193471
org.jfree.data.event.SeriesChangeEvent,83
GPR[ESUN]-1659873193801
GPR[SSUN]-1659873193801
org.jfree.data.event.SeriesChangeEvent,84
Find no block!
GPR[SSUN]-1659873194132
org.jfree.data.time.TimeSeries,254
========
return Collections.unmodifiableList(this.data);

========
MM Copying to MM
GPR[SPVS]-1659873196371
GPR[SPVAP]-1659873196371
GPR[EPVAP]-1659873198743
GPR[EPVS]-1659873198743
========
return getBins(maximumItemCount).size();

========
MM Copying to MM
GPR[SPVS]-1659873198752
GPR[SPVAP]-1659873198752
GPR[EPVAP]-1659873199745
GPR[EPVS]-1659873199745
========
return ObjectUtilities.equal(this.data,that.data);

========
MM Copying to MM
GPR[SPVS]-1659873199747
GPR[SPVAP]-1659873199747
GPR[EPVAP]-1659873200700
GPR[EPVS]-1659873200700
========
return getUniqueValues().size();

========
MM Copying to MM
GPR[SPVS]-1659873200701
GPR[SPVAP]-1659873200701
GPR[EPVAP]-1659873201613
GPR[EPVS]-1659873201613
========
return (this.data!=null?this.data.hashCode():0);

========
MM Copying to MM
GPR[SPVS]-1659873201615
GPR[SPVAP]-1659873201615
GPR[EPVAP]-1659873204738
GPR[SPVATF]-1659873204738
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873205855
GPR[EPVS]-1659873205855
========
return this.data!=null?this.data.size():null;

========
MM Copying to MM
GPR[SPVS]-1659873205856
GPR[SPVAP]-1659873205856
GPR[EPVAP]-1659873206613
GPR[EPVS]-1659873206613
========
return (List)this.data.get(maximumItemCount).size();

========
MM Copying to MM
GPR[SPVS]-1659873206615
GPR[SPVAP]-1659873206615
GPR[EPVAP]-1659873207373
GPR[EPVS]-1659873207373
========
if(maximumItemCount<0||series>=getSeriesCount()){
throw new IllegalArgumentException("Invalid series index: "+series);
}
return this.data.size();

========
MM Copying to MM
GPR[SPVS]-1659873207374
GPR[SPVAP]-1659873207374
GPR[EPVAP]-1659873208156
GPR[EPVS]-1659873208156
========
if((maximumItemCount<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
return this.data.size();

========
MM Copying to MM
GPR[SPVS]-1659873208157
GPR[SPVAP]-1659873208157
GPR[EPVAP]-1659873208911
GPR[EPVS]-1659873208911
========
if((maximumItemCount<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
return this.data.size();

========
MM Copying to MM
GPR[SPVS]-1659873208912
GPR[SPVAP]-1659873208912
GPR[EPVAP]-1659873209665
GPR[EPVS]-1659873209665
========
if((maximumItemCount<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
return this.data.size();

========
MM Copying to MM
GPR[SPVS]-1659873209667
GPR[SPVAP]-1659873209667
GPR[EPVAP]-1659873210451
GPR[EPVS]-1659873210451
========
if((maximumItemCount<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("The \'series\' argument is out of bounds ("+series);
}
return this.data.size();

========
MM Copying to MM
GPR[SPVS]-1659873210453
GPR[SPVAP]-1659873210453
GPR[EPVAP]-1659873211211
GPR[EPVS]-1659873211211
GPR[ESUN]-1659873211212
GPR[SSUN]-1659873211212
org.jfree.data.time.TimeSeries,169
GPR[ESUN]-1659873213260
GPR[SSUN]-1659873213260
org.jfree.data.time.TimeSeries,170
Find no block!
GPR[SSUN]-1659873213631
org.jfree.data.time.TimeSeries,186
========
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Double.NaN;
this.maximumItemAge=Double.NaN;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873215815
GPR[SPVAP]-1659873215815
GPR[EPVAP]-1659873218214
GPR[EPVS]-1659873218214
========
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Double.NaN;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873218215
GPR[SPVAP]-1659873218215
GPR[EPVAP]-1659873219241
GPR[EPVS]-1659873219241
========
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Double.NaN;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873219242
GPR[SPVAP]-1659873219242
GPR[EPVAP]-1659873220158
GPR[EPVS]-1659873220158
========
clone.keys=new java.util.ArrayList(this.keys);
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873220160
GPR[SPVAP]-1659873220160
GPR[EPVAP]-1659873221081
GPR[EPVS]-1659873221081
========
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=TimePeriodAnchor.MIDDLE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873221083
GPR[SPVAP]-1659873221083
GPR[EPVAP]-1659873222005
GPR[EPVS]-1659873222005
========
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=TimePeriodAnchor.START;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873222007
GPR[SPVAP]-1659873222007
GPR[EPVAP]-1659873222921
GPR[EPVS]-1659873222921
========
setSelectionState(this);
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873222922
GPR[SPVAP]-1659873222922
GPR[EPVAP]-1659873223843
GPR[EPVS]-1659873223843
========
if(this.data.size()>0){
for(int maximumItemCount=maximumItemCount;index<=maximumItemCount;index++){
TimeSeriesDataItem (TimeSeriesDataItem)this.data.get(maximumItemCount)=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem (TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(maximumItemCount).clone()=(TimeSeriesDataItem)item.clone();
try{
(TimeSeries)super.clone().add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873223844
GPR[SPVAP]-1659873223844
GPR[EPVAP]-1659873224494
GPR[EPVS]-1659873224494
========
if(this.data.size()>0){
for(int maximumItemCount=maximumItemCount;index<=maximumItemCount;index++){
XYDataItem (XYDataItem)this.data.get(maximumItemCount)=(XYDataItem)this.data.get(index);
XYDataItem (XYDataItem)(XYDataItem)this.data.get(maximumItemCount).clone()=(XYDataItem)item.clone();
try{
(XYSeries)super.clone().add(clone);
}catch (SeriesException e) {
  System.err.println("Unable to add cloned data item.");
}

}
}
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873224496
GPR[SPVAP]-1659873224496
GPR[EPVAP]-1659873225145
GPR[EPVS]-1659873225145
========
super(name);
this.domain=description;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873225147
GPR[SPVAP]-1659873225147
GPR[EPVAP]-1659873226063
GPR[EPVS]-1659873226063
========
firePropertyChange("Domain",range,DEFAULT_DOMAIN_DESCRIPTION);
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873226064
GPR[SPVAP]-1659873226064
GPR[EPVAP]-1659873226971
GPR[EPVS]-1659873226971
========
super(name);
this.domain=domain;
this.range=description;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873226972
GPR[SPVAP]-1659873226972
GPR[EPVAP]-1659873227896
GPR[EPVS]-1659873227896
========
firePropertyChange("Range",domain,DEFAULT_DOMAIN_DESCRIPTION);
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873227897
GPR[SPVAP]-1659873227897
GPR[EPVAP]-1659873228821
GPR[EPVS]-1659873228821
========
if(false){
fireSeriesChanged();
}
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873228823
GPR[SPVAP]-1659873228823
GPR[EPVAP]-1659873229778
GPR[EPVS]-1659873229778
========
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=minY;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873229780
GPR[SPVAP]-1659873229780
GPR[EPVAP]-1659873232953
GPR[SPVATF]-1659873232953
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873234080
GPR[EPVS]-1659873234080
========
super(name);
this.domain=domain;
if(Double.isInfinite(maxY)||Double.isNaN(maxY)){
throw new IllegalArgumentException("\'maxY\' cannot be INF or NaN.");
}
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873234081
GPR[SPVAP]-1659873234081
GPR[EPVAP]-1659873235390
GPR[SPVATF]-1659873235390
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873236564
GPR[EPVS]-1659873236564
========
super(name);
this.domain=domain;
this.maximumItemCount=xSamples;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873236566
GPR[SPVAP]-1659873236566
GPR[EPVAP]-1659873237318
GPR[EPVS]-1659873237318
========
this.maxY=maxY;
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873237320
GPR[SPVAP]-1659873237320
GPR[EPVAP]-1659873238067
GPR[EPVS]-1659873238067
========
super(name);
this.domain=domain;
if(Double.isInfinite(maxY)||Double.isNaN(maxY)){
throw new IllegalArgumentException("\'maxY\' cannot be INF or NaN.");
}
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=minY;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873238068
GPR[SPVAP]-1659873238068
GPR[EPVAP]-1659873239353
GPR[SPVATF]-1659873239353
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873240535
GPR[EPVS]-1659873240535
========
clone.intervalDelegate=(IntervalXYDelegate)this.intervalDelegate.clone();
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873240538
GPR[SPVAP]-1659873240538
GPR[EPVAP]-1659873241299
GPR[EPVS]-1659873241299
========
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873241301
GPR[SPVAP]-1659873241301
GPR[EPVAP]-1659873242058
GPR[EPVS]-1659873242058
========
firePropertyChange("Domain",range,DEFAULT_DOMAIN_DESCRIPTION);
super(name);
this.domain=description;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873242066
GPR[SPVAP]-1659873242066
GPR[EPVAP]-1659873242825
GPR[EPVS]-1659873242825
========
firePropertyChange("Range",domain,DEFAULT_DOMAIN_DESCRIPTION);
super(name);
this.domain=domain;
this.range=description;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873242827
GPR[SPVAP]-1659873242827
GPR[EPVAP]-1659873243577
GPR[EPVS]-1659873243577
========
if(this.data.size()>0){
for(int maximumItemCount=maximumItemCount;index<=maximumItemCount;index++){
TimePeriodValue (TimePeriodValue)this.data.get(maximumItemCount)=(TimePeriodValue)this.data.get(index);
TimePeriodValue (TimePeriodValue)(TimePeriodValue)this.data.get(maximumItemCount).clone()=(TimePeriodValue)item.clone();
try{
(TimePeriodValues)super.clone().add(clone);
}catch (SeriesException e) {
  System.err.println("Failed to add cloned item.");
}

}
}
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873243579
GPR[SPVAP]-1659873243579
GPR[EPVAP]-1659873244234
GPR[EPVS]-1659873244234
========
if(this.data.size()>1){
maxY=gap/(this.labels.size()-1);
}
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873244237
GPR[SPVAP]-1659873244237
GPR[EPVAP]-1659873244997
GPR[EPVS]-1659873244997
========
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=maxY;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873245004
GPR[SPVAP]-1659873245004
GPR[EPVAP]-1659873246357
GPR[SPVATF]-1659873246357
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873247506
GPR[EPVS]-1659873247506
========
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
if(serialVersionUID<0){
throw new IllegalArgumentException("Negative \'periods\' argument.");
}
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873247510
GPR[SPVAP]-1659873247510
GPR[EPVAP]-1659873248828
GPR[SPVATF]-1659873248828
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873249993
GPR[EPVS]-1659873249993
========
removeAgedItems(true);
super(name);
this.domain=domain;
this.range=range;
this.timePeriodClass=null;
this.data=new java.util.ArrayList();
this.maximumItemCount=Integer.MAX_VALUE;
this.maximumItemAge=Long.MAX_VALUE;
this.minY=Double.NaN;
this.maxY=Double.NaN;

========
MM Copying to MM
GPR[SPVS]-1659873249994
GPR[SPVAP]-1659873249994
GPR[EPVAP]-1659873250741
GPR[EPVS]-1659873250741
GPR[ESUN]-1659873250747
GPR[SSUN]-1659873250747
org.jfree.data.time.TimeSeries,187
GPR[ESUN]-1659873251274
GPR[SSUN]-1659873251274
org.jfree.data.time.TimeSeries,188
GPR[ESUN]-1659873251639
GPR[SSUN]-1659873251639
org.jfree.data.time.TimeSeries,189
GPR[ESUN]-1659873251989
GPR[SSUN]-1659873251989
org.jfree.data.time.TimeSeries,190
GPR[ESUN]-1659873252367
GPR[SSUN]-1659873252367
org.jfree.data.time.TimeSeries,191
GPR[ESUN]-1659873252720
GPR[SSUN]-1659873252720
org.jfree.data.time.TimeSeries,192
GPR[ESUN]-1659873253056
GPR[SSUN]-1659873253056
org.jfree.data.time.TimeSeries,193
GPR[ESUN]-1659873253388
GPR[SSUN]-1659873253388
org.jfree.data.time.TimeSeries,194
GPR[ESUN]-1659873253719
GPR[SSUN]-1659873253719
org.jfree.data.time.TimeSeries,195
Find no block!
GPR[SSUN]-1659873254059
org.jfree.data.general.Series,104
GPR[ESUN]-1659873256084
GPR[SSUN]-1659873256084
org.jfree.data.general.Series,105
Find no block!
GPR[SSUN]-1659873256421
org.jfree.data.general.Series,113
Find no block!
GPR[SSUN]-1659873256749
org.jfree.data.general.Series,114
UNKNOWN ASTNode type : catch (UnsupportedEncodingException e) {
  encodedKey=key.toString();
}

========
if(key==null){
throw new NullPointerException("Null \'key\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659873258847
GPR[SPVAP]-1659873258847
GPR[EPVAP]-1659873263347
GPR[SPVATF]-1659873263347
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873264466
GPR[EPVS]-1659873264466
========
if(key==null){
throw new UnknownKeyException("The key ("+key.toString());
}

========
MM Copying to MM
GPR[SPVS]-1659873264468
GPR[SPVAP]-1659873264468
GPR[EPVAP]-1659873265185
GPR[EPVS]-1659873265185
GPR[ESUN]-1659873265186
GPR[SSUN]-1659873265186
org.jfree.data.general.Series,117
========
fireChangeEvent();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873267515
GPR[SPVAP]-1659873267515
GPR[EPVAP]-1659873269798
GPR[EPVS]-1659873269798
========
this.propertyChangeSupport.firePropertyChange("Key",this.key,key);
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873269799
GPR[SPVAP]-1659873269799
GPR[EPVAP]-1659873273945
GPR[SPVATF]-1659873273945
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873275187
GPR[EPVS]-1659873275187
========
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
if(description==null){
throw new IllegalArgumentException("Null \'description\' argument.");
}
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873275188
GPR[SPVAP]-1659873275188
GPR[EPVAP]-1659873276511
GPR[SPVATF]-1659873276511
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873277664
GPR[EPVS]-1659873277664
========
setSelectionState(this);
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873277665
GPR[SPVAP]-1659873277665
GPR[EPVAP]-1659873278375
GPR[EPVS]-1659873278375
========
notifyListeners(new MarkerChangeEvent(this));
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873278377
GPR[SPVAP]-1659873278377
GPR[EPVAP]-1659873279130
GPR[EPVS]-1659873279130
========
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=notify;

========
MM Copying to MM
GPR[SPVS]-1659873279131
GPR[SPVAP]-1659873279131
GPR[EPVAP]-1659873280378
GPR[SPVATF]-1659873280378
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873281500
GPR[EPVS]-1659873281500
========
if(notify){
fireChangeEvent();
}
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873281501
GPR[SPVAP]-1659873281501
GPR[EPVAP]-1659873282214
GPR[EPVS]-1659873282214
========
if(key==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873282216
GPR[SPVAP]-1659873282216
GPR[EPVAP]-1659873283478
GPR[SPVATF]-1659873283478
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873284596
GPR[EPVS]-1659873284596
========
if(notify){
fireChangeEvent();
}
if(key==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873284598
GPR[SPVAP]-1659873284598
GPR[EPVAP]-1659873285321
GPR[EPVS]-1659873285321
========
if(key==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873285322
GPR[SPVAP]-1659873285322
GPR[EPVAP]-1659873286540
GPR[SPVATF]-1659873286540
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873287668
GPR[EPVS]-1659873287668
========
if(notify){
fireChangeEvent();
}
if(key==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873287669
GPR[SPVAP]-1659873287669
GPR[EPVAP]-1659873288380
GPR[EPVS]-1659873288380
========
if(key==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873288381
GPR[SPVAP]-1659873288381
GPR[EPVAP]-1659873289611
GPR[SPVATF]-1659873289611
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873290731
GPR[EPVS]-1659873290731
========
if(notify){
fireChangeEvent();
}
if(key==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873290732
GPR[SPVAP]-1659873290732
GPR[EPVAP]-1659873291443
GPR[EPVS]-1659873291443
========
if(key==null){
throw new IllegalArgumentException("Null \'position\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873291445
GPR[SPVAP]-1659873291445
GPR[EPVAP]-1659873292674
GPR[SPVATF]-1659873292674
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873293822
GPR[EPVS]-1659873293822
========
if(notify){
fireChangeEvent();
}
if(key==null){
throw new IllegalArgumentException("Null \'position\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873293823
GPR[SPVAP]-1659873293823
GPR[EPVAP]-1659873294535
GPR[EPVS]-1659873294535
========
if(key==null){
throw new IllegalArgumentException("Null \'range\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873294536
GPR[SPVAP]-1659873294536
GPR[EPVAP]-1659873295816
GPR[SPVATF]-1659873295816
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873296936
GPR[EPVS]-1659873296936
========
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=false;

========
MM Copying to MM
GPR[SPVS]-1659873296937
GPR[SPVAP]-1659873296937
GPR[EPVAP]-1659873298217
GPR[SPVATF]-1659873298217
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873299328
GPR[EPVS]-1659873299328
========
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873299330
GPR[SPVAP]-1659873299330
GPR[EPVAP]-1659873300051
GPR[EPVS]-1659873300051
========
if(key==null){
throw new IllegalArgumentException("Null \'range\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=false;

========
MM Copying to MM
GPR[SPVS]-1659873300052
GPR[SPVAP]-1659873300052
GPR[EPVAP]-1659873301306
GPR[SPVATF]-1659873301306
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873302438
GPR[EPVS]-1659873302438
========
if(k==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873302440
GPR[SPVAP]-1659873302440
GPR[EPVAP]-1659873303167
GPR[EPVS]-1659873303167
========
if(key==null){
throw new IllegalArgumentException("Null \'unit\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873303170
GPR[SPVAP]-1659873303170
GPR[EPVAP]-1659873304413
GPR[SPVATF]-1659873304413
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873305543
GPR[EPVS]-1659873305543
========
if(notify){
setAutoTickUnitSelection(false,false);
}
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873305545
GPR[SPVAP]-1659873305545
GPR[EPVAP]-1659873306270
GPR[EPVS]-1659873306270
========
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
if(key==null){
throw new IllegalArgumentException("Null \'unit\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873306271
GPR[SPVAP]-1659873306271
GPR[EPVAP]-1659873306977
GPR[EPVS]-1659873306977
========
if(key==null){
throw new NullPointerException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873306979
GPR[SPVAP]-1659873306979
GPR[EPVAP]-1659873308221
GPR[SPVATF]-1659873308221
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873309351
GPR[EPVS]-1659873309352
========
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
findBoundsByIteration();
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873309353
GPR[SPVAP]-1659873309353
GPR[EPVAP]-1659873310059
GPR[EPVS]-1659873310059
========
if(notify){
fireSeriesChanged();
}
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873310060
GPR[SPVAP]-1659873310060
GPR[EPVAP]-1659873311291
GPR[SPVATF]-1659873311291
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873312416
GPR[EPVS]-1659873312416
========
if(notify){
fireAnnotationChanged();
}
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873312419
GPR[SPVAP]-1659873312419
GPR[EPVAP]-1659873313146
GPR[EPVS]-1659873313146
========
if(notify){
RendererChangeEvent new RendererChangeEvent(this,true)=new RendererChangeEvent(this,true);
notifyListeners(e);
}
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873313147
GPR[SPVAP]-1659873313147
GPR[EPVAP]-1659873313746
GPR[EPVS]-1659873313746
========
if(notify){
notifyListeners(new PlotChangeEvent(this));
}
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873313747
GPR[SPVAP]-1659873313747
GPR[EPVAP]-1659873314450
GPR[EPVS]-1659873314450
========
if(notify){
notifyListeners(new RendererChangeEvent(this));
}
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873314451
GPR[SPVAP]-1659873314451
GPR[EPVAP]-1659873315184
GPR[EPVS]-1659873315184
========
if(notify){
notifyListeners(new ChartChangeEvent(this));
}
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873315185
GPR[SPVAP]-1659873315185
GPR[EPVAP]-1659873315883
GPR[EPVS]-1659873315883
========
if(key!=null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873315884
GPR[SPVAP]-1659873315884
GPR[EPVAP]-1659873317134
GPR[SPVATF]-1659873317134
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873318256
GPR[EPVS]-1659873318256
========
if(key==notify){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873318257
GPR[SPVAP]-1659873318257
GPR[EPVAP]-1659873318979
GPR[EPVS]-1659873318979
========
if(notify){
setAutoTickUnitSelection(false,false);
}
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873318980
GPR[SPVAP]-1659873318980
GPR[EPVAP]-1659873319716
GPR[EPVS]-1659873319716
========
if(notify){
setAutoTickUnitSelection(false,false);
}
if(key==null){
throw new IllegalArgumentException("Null \'unit\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873319721
GPR[SPVAP]-1659873319721
GPR[EPVAP]-1659873320443
GPR[EPVS]-1659873320443
========
if(notify){
setAutoTickUnitSelection(false,false);
}
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
if(key==null){
throw new IllegalArgumentException("Null \'unit\' argument.");
}
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;

========
MM Copying to MM
GPR[SPVS]-1659873320444
GPR[SPVAP]-1659873320444
GPR[EPVAP]-1659873321160
GPR[EPVS]-1659873321160
GPR[ESUN]-1659873321161
GPR[SSUN]-1659873321161
org.jfree.data.general.Series,118
GPR[ESUN]-1659873321651
GPR[SSUN]-1659873321652
org.jfree.data.general.Series,119
GPR[ESUN]-1659873321980
GPR[SSUN]-1659873321980
org.jfree.data.general.Series,120
GPR[ESUN]-1659873322294
GPR[SSUN]-1659873322294
org.jfree.data.general.Series,121
GPR[ESUN]-1659873322625
GPR[SSUN]-1659873322625
org.jfree.data.general.Series,122
Find no block!
GPR[SSUN]-1659873322925
org.jfree.data.time.RegularTimePeriod,86
========
RegularTimePeriod result=null;
try{
Constructor constructor=c.getDeclaredConstructor(new Class[]{Date.class,TimeZone.class});
result=(RegularTimePeriod)constructor.newInstance(new Object[]{millisecond,zone});
}catch (Exception e) {
}

if(constructor!=null){
result=kobj.getObject();
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659873324878
GPR[SPVAP]-1659873324878
GPR[EPVAP]-1659873327000
GPR[EPVS]-1659873327000
========
RegularTimePeriod result=null;
try{
Constructor constructor=c.getDeclaredConstructor(new Class[]{Date.class,TimeZone.class});
result=(RegularTimePeriod)constructor.newInstance(new Object[]{millisecond,zone});
}catch (Exception e) {
}

if(this.equals(SeriesChangeType.ADD)){
result=SeriesChangeType.ADD;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659873327002
GPR[SPVAP]-1659873327002
GPR[EPVAP]-1659873328677
GPR[EPVS]-1659873328677
========
RegularTimePeriod result=null;
try{
Constructor constructor=c.getDeclaredConstructor(new Class[]{Date.class,TimeZone.class});
result=(RegularTimePeriod)constructor.newInstance(new Object[]{millisecond,zone});
}catch (Exception e) {
}

if(this.equals(PieDatasetChangeType.ADD)){
result=PieDatasetChangeType.ADD;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659873328678
GPR[SPVAP]-1659873328678
GPR[EPVAP]-1659873330330
GPR[EPVS]-1659873330330
========
RegularTimePeriod result=null;
try{
Constructor constructor=c.getDeclaredConstructor(new Class[]{Date.class,TimeZone.class});
result=(RegularTimePeriod)constructor.newInstance(new Object[]{millisecond,zone});
}catch (Exception e) {
}

if(this.millisecond!=FIRST_MILLISECOND_IN_SECOND){
result=new Millisecond(this.millisecond-1,getSecond());
}else {
Second (Second)getSecond().previous()=(Second)getSecond().previous();
if(previous!=null){
result=new Millisecond(LAST_MILLISECOND_IN_SECOND,previous);
}
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659873330331
GPR[SPVAP]-1659873330331
GPR[EPVAP]-1659873331239
GPR[EPVS]-1659873331239
========
RegularTimePeriod result=null;
try{
Constructor constructor=c.getDeclaredConstructor(new Class[]{Date.class,TimeZone.class});
result=(RegularTimePeriod)constructor.newInstance(new Object[]{millisecond,zone});
}catch (Exception e) {
}

if(this.millisecond!=LAST_MILLISECOND_IN_SECOND){
result=new Millisecond(this.millisecond+1,getSecond());
}else {
Second (Second)getSecond().next()=(Second)getSecond().next();
if(next!=null){
result=new Millisecond(FIRST_MILLISECOND_IN_SECOND,next);
}
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659873331240
GPR[SPVAP]-1659873331240
GPR[EPVAP]-1659873332123
GPR[EPVS]-1659873332123
========
RegularTimePeriod result=null;
try{
Constructor constructor=c.getDeclaredConstructor(new Class[]{Date.class,TimeZone.class});
result=(RegularTimePeriod)constructor.newInstance(new Object[]{millisecond,zone});
}catch (Exception e) {
}

if(this.equals(PlotOrientation.HORIZONTAL)){
result=PlotOrientation.HORIZONTAL;
}else if(this.equals(PlotOrientation.VERTICAL)){
result=PlotOrientation.VERTICAL;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659873332124
GPR[SPVAP]-1659873332124
GPR[EPVAP]-1659873334038
GPR[EPVS]-1659873334038
========
RegularTimePeriod result=null;
try{
Constructor constructor=c.getDeclaredConstructor(new Class[]{Date.class,TimeZone.class});
result=(RegularTimePeriod)constructor.newInstance(new Object[]{millisecond,zone});
}catch (Exception e) {
}

if(this.equals(TickType.MAJOR)){
result=TickType.MAJOR;
}else if(this.equals(TickType.MINOR)){
result=TickType.MINOR;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659873334039
GPR[SPVAP]-1659873334039
GPR[EPVAP]-1659873335034
GPR[EPVS]-1659873335034
========
RegularTimePeriod result=null;
try{
Constructor constructor=c.getDeclaredConstructor(new Class[]{Date.class,TimeZone.class});
result=(RegularTimePeriod)constructor.newInstance(new Object[]{millisecond,zone});
}catch (Exception e) {
}

if(this.equals(PieLabelLinkStyle.STANDARD)){
result=PieLabelLinkStyle.STANDARD;
}else if(this.equals(PieLabelLinkStyle.QUAD_CURVE)){
result=PieLabelLinkStyle.QUAD_CURVE;
}else if(this.equals(PieLabelLinkStyle.CUBIC_CURVE)){
result=PieLabelLinkStyle.CUBIC_CURVE;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659873335035
GPR[SPVAP]-1659873335035
GPR[EPVAP]-1659873336005
GPR[EPVS]-1659873336005
========
RegularTimePeriod result=null;
try{
Constructor constructor=c.getDeclaredConstructor(new Class[]{Date.class,TimeZone.class});
result=(RegularTimePeriod)constructor.newInstance(new Object[]{millisecond,zone});
}catch (Exception e) {
}

if(this.equals(AreaRendererEndType.LEVEL)){
result=AreaRendererEndType.LEVEL;
}else if(this.equals(AreaRendererEndType.TAPER)){
result=AreaRendererEndType.TAPER;
}else if(this.equals(AreaRendererEndType.TRUNCATE)){
result=AreaRendererEndType.TRUNCATE;
}
return result;

========
MM Copying to MM
GPR[SPVS]-1659873336006
GPR[SPVAP]-1659873336006
GPR[EPVAP]-1659873336977
GPR[EPVS]-1659873336977
GPR[ESUN]-1659873336978
GPR[SSUN]-1659873336978
org.jfree.data.time.RegularTimePeriod,88
GPR[ESUN]-1659873337382
GPR[SSUN]-1659873337382
org.jfree.data.time.RegularTimePeriod,90
GPR[ESUN]-1659873337734
GPR[SSUN]-1659873337734
org.jfree.data.time.RegularTimePeriod,95
Find no block!
GPR[SSUN]-1659873338070
org.jfree.data.time.RegularTimePeriod,93
Find no block!
GPR[SSUN]-1659873338428
org.jfree.data.time.RegularTimePeriod,96
GPR[ESUN]-1659873338795
GPR[SSUN]-1659873338795
org.jfree.data.time.RegularTimePeriod,108
========
if(VALUE_ANTIALIAS_OFF.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873341182
GPR[SPVAP]-1659873341182
GPR[EPVAP]-1659873342147
GPR[EPVS]-1659873342147
========
if(VALUE_ANTIALIAS_ON.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873342148
GPR[SPVAP]-1659873342148
GPR[EPVAP]-1659873343134
GPR[EPVS]-1659873343135
========
if(periodClass.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873343137
GPR[SPVAP]-1659873343137
GPR[EPVAP]-1659873344082
GPR[EPVS]-1659873344082
========
if(c.getClassLoader()==null){
return ClassLoader.getSystemClassLoader();
}else {
return applicationCL;
}
if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873344085
GPR[SPVAP]-1659873344085
GPR[EPVAP]-1659873345059
GPR[EPVS]-1659873345059
========
if(type.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873345060
GPR[SPVAP]-1659873345060
GPR[EPVAP]-1659873346029
GPR[EPVS]-1659873346029
========
if(VALUE_ANTIALIAS_OFF.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873348214
GPR[SPVAP]-1659873348214
GPR[EPVAP]-1659873349159
GPR[EPVS]-1659873349159
========
if(VALUE_ANTIALIAS_ON.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873349160
GPR[SPVAP]-1659873349160
GPR[EPVAP]-1659873350148
GPR[EPVS]-1659873350148
========
if(periodClass.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873350150
GPR[SPVAP]-1659873350150
GPR[EPVAP]-1659873351127
GPR[EPVS]-1659873351127
========
if(c.getClassLoader()==null){
return ClassLoader.getSystemClassLoader();
}else {
return applicationCL;
}
if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873351129
GPR[SPVAP]-1659873351129
GPR[EPVAP]-1659873352143
GPR[EPVS]-1659873352143
========
if(type.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873352144
GPR[SPVAP]-1659873352144
GPR[EPVAP]-1659873353097
GPR[EPVS]-1659873353097
========
if(VALUE_ANTIALIAS_OFF.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873355212
GPR[SPVAP]-1659873355212
GPR[EPVAP]-1659873356177
GPR[EPVS]-1659873356177
========
if(VALUE_ANTIALIAS_ON.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873356178
GPR[SPVAP]-1659873356178
GPR[EPVAP]-1659873357121
GPR[EPVS]-1659873357121
========
if(periodClass.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873357123
GPR[SPVAP]-1659873357123
GPR[EPVAP]-1659873358095
GPR[EPVS]-1659873358095
========
if(c.getClassLoader()==null){
return ClassLoader.getSystemClassLoader();
}else {
return applicationCL;
}
if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873358097
GPR[SPVAP]-1659873358097
GPR[EPVAP]-1659873359066
GPR[EPVS]-1659873359066
========
if(type.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873359068
GPR[SPVAP]-1659873359068
GPR[EPVAP]-1659873360041
GPR[EPVS]-1659873360042
========
if(!this.c.equals(that.minorTickTimePeriodClass)){
return false;
}
if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873362196
GPR[SPVAP]-1659873362196
GPR[EPVAP]-1659873363162
GPR[EPVS]-1659873363162
========
if(VALUE_ANTIALIAS_OFF.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873363163
GPR[SPVAP]-1659873363163
GPR[EPVAP]-1659873364142
GPR[EPVS]-1659873364142
========
if(VALUE_ANTIALIAS_ON.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873364143
GPR[SPVAP]-1659873364143
GPR[EPVAP]-1659873365087
GPR[EPVS]-1659873365087
========
if(periodClass.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873365089
GPR[SPVAP]-1659873365089
GPR[EPVAP]-1659873366051
GPR[EPVS]-1659873366051
========
if(c.getClassLoader()==null){
return ClassLoader.getSystemClassLoader();
}else {
return applicationCL;
}
if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873366053
GPR[SPVAP]-1659873366053
GPR[EPVAP]-1659873367006
GPR[EPVS]-1659873367006
========
if(type.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873367008
GPR[SPVAP]-1659873367008
GPR[EPVAP]-1659873368029
GPR[EPVS]-1659873368029
========
if(!this.c.equals(that.minorTickTimePeriodClass)){
return false;
}
if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873370151
GPR[SPVAP]-1659873370151
GPR[EPVAP]-1659873371119
GPR[EPVS]-1659873371119
========
if(VALUE_ANTIALIAS_OFF.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873371121
GPR[SPVAP]-1659873371121
GPR[EPVAP]-1659873372094
GPR[EPVS]-1659873372094
========
if(VALUE_ANTIALIAS_ON.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873372095
GPR[SPVAP]-1659873372095
GPR[EPVAP]-1659873373057
GPR[EPVS]-1659873373057
========
if(c.getClassLoader()==null){
return ClassLoader.getSystemClassLoader();
}else {
return applicationCL;
}
if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873373058
GPR[SPVAP]-1659873373058
GPR[EPVAP]-1659873373991
GPR[EPVS]-1659873373991
========
if(periodClass.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873373993
GPR[SPVAP]-1659873373993
GPR[EPVAP]-1659873374944
GPR[EPVS]-1659873374944
========
if(type.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873374947
GPR[SPVAP]-1659873374947
GPR[EPVAP]-1659873375884
GPR[EPVS]-1659873375884
========
if(!this.c.equals(that.majorTickTimePeriodClass)){
return false;
}
if(c.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873378180
GPR[SPVAP]-1659873378180
GPR[EPVAP]-1659873379139
GPR[EPVS]-1659873379139
========
if(!this.c.equals(that.minorTickTimePeriodClass)){
return false;
}
if(c.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873379140
GPR[SPVAP]-1659873379140
GPR[EPVAP]-1659873380069
GPR[EPVS]-1659873380069
========
if(VALUE_ANTIALIAS_OFF.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873380071
GPR[SPVAP]-1659873380071
GPR[EPVAP]-1659873381043
GPR[EPVS]-1659873381043
========
if(VALUE_ANTIALIAS_ON.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873381044
GPR[SPVAP]-1659873381044
GPR[EPVAP]-1659873381995
GPR[EPVS]-1659873381995
========
if(c.getClassLoader()==null){
return ClassLoader.getSystemClassLoader();
}else {
return applicationCL;
}
if(c.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873381996
GPR[SPVAP]-1659873381996
GPR[EPVAP]-1659873382990
GPR[EPVS]-1659873382990
========
if(periodClass.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873382992
GPR[SPVAP]-1659873382992
GPR[EPVAP]-1659873383975
GPR[EPVS]-1659873383975
========
if(type.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873383978
GPR[SPVAP]-1659873383978
GPR[EPVAP]-1659873384943
GPR[EPVS]-1659873384943
========
if(!this.c.equals(that.autoRangeTimePeriodClass)){
return false;
}
if(c.equals(Year.class)){
return Quarter.class;
}else if(c.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873387083
GPR[SPVAP]-1659873387083
GPR[EPVAP]-1659873388055
GPR[EPVS]-1659873388055
========
if(!this.c.equals(that.majorTickTimePeriodClass)){
return false;
}
if(c.equals(Year.class)){
return Quarter.class;
}else if(c.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873388055
GPR[SPVAP]-1659873388055
GPR[EPVAP]-1659873389027
GPR[EPVS]-1659873389027
========
if(!this.c.equals(that.minorTickTimePeriodClass)){
return false;
}
if(c.equals(Year.class)){
return Quarter.class;
}else if(c.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873389028
GPR[SPVAP]-1659873389028
GPR[EPVAP]-1659873390009
GPR[EPVS]-1659873390009
========
if(VALUE_ANTIALIAS_OFF.equals(Year.class)){
return Quarter.class;
}else if(c.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873390010
GPR[SPVAP]-1659873390010
GPR[EPVAP]-1659873390985
GPR[EPVS]-1659873390985
========
if(VALUE_ANTIALIAS_ON.equals(Year.class)){
return Quarter.class;
}else if(c.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873390986
GPR[SPVAP]-1659873390986
GPR[EPVAP]-1659873391935
GPR[EPVS]-1659873391935
========
if(c.getClassLoader()==null){
return ClassLoader.getSystemClassLoader();
}else {
return applicationCL;
}
if(c.equals(Year.class)){
return Quarter.class;
}else if(c.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873391936
GPR[SPVAP]-1659873391936
GPR[EPVAP]-1659873392892
GPR[EPVS]-1659873392892
========
if(periodClass.equals(Year.class)){
return Quarter.class;
}else if(c.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873392895
GPR[SPVAP]-1659873392895
GPR[EPVAP]-1659873393874
GPR[EPVS]-1659873393874
========
if(type.equals(Year.class)){
return Quarter.class;
}else if(c.equals(Quarter.class)){
return Month.class;
}else if(c.equals(Month.class)){
return Day.class;
}else if(c.equals(Day.class)){
return Hour.class;
}else if(c.equals(Hour.class)){
return Minute.class;
}else if(c.equals(Minute.class)){
return Second.class;
}else if(c.equals(Second.class)){
return Millisecond.class;
}else error

========
MM Copying to MM
GPR[SPVS]-1659873393877
GPR[SPVAP]-1659873393877
GPR[EPVAP]-1659873394887
GPR[EPVS]-1659873394887
GPR[ESUN]-1659873394889
GPR[SSUN]-1659873394889
org.jfree.data.time.RegularTimePeriod,109
GPR[ESUN]-1659873396884
GPR[SSUN]-1659873396884
org.jfree.data.time.RegularTimePeriod,111
GPR[ESUN]-1659873397238
GPR[SSUN]-1659873397238
org.jfree.data.time.RegularTimePeriod,112
GPR[ESUN]-1659873399250
GPR[SSUN]-1659873399250
org.jfree.data.time.RegularTimePeriod,114
GPR[ESUN]-1659873399581
GPR[SSUN]-1659873399581
org.jfree.data.time.RegularTimePeriod,115
GPR[ESUN]-1659873401771
GPR[SSUN]-1659873401771
org.jfree.data.time.RegularTimePeriod,117
GPR[ESUN]-1659873402112
GPR[SSUN]-1659873402112
org.jfree.data.time.RegularTimePeriod,118
GPR[ESUN]-1659873402430
GPR[SSUN]-1659873402430
org.jfree.data.time.RegularTimePeriod,120
GPR[ESUN]-1659873402778
GPR[SSUN]-1659873402778
org.jfree.data.time.RegularTimePeriod,121
GPR[ESUN]-1659873403108
GPR[SSUN]-1659873403108
org.jfree.data.time.RegularTimePeriod,123
GPR[ESUN]-1659873403448
GPR[SSUN]-1659873403448
org.jfree.data.time.RegularTimePeriod,124
GPR[ESUN]-1659873403825
GPR[SSUN]-1659873403825
org.jfree.data.time.RegularTimePeriod,126
GPR[ESUN]-1659873404189
GPR[SSUN]-1659873404189
org.jfree.data.time.RegularTimePeriod,127
GPR[ESUN]-1659873404539
GPR[SSUN]-1659873404539
org.jfree.data.time.RegularTimePeriod,130
GPR[ESUN]-1659873404928
GPR[SSUN]-1659873404928
org.jfree.data.time.RegularTimePeriod,178
GPR[ESUN]-1659873406943
GPR[SSUN]-1659873406943
org.jfree.data.time.RegularTimePeriod,190
GPR[ESUN]-1659873409014
GPR[SSUN]-1659873409014
org.jfree.data.time.RegularTimePeriod,250
========
double m1=getFirstMillisecond();
double m2=getLastMillisecond();
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873411041
GPR[SPVAP]-1659873411041
GPR[EPVAP]-1659873413079
GPR[EPVS]-1659873413079
========
double m1=getFirstMillisecond();
long m2=getLastMillisecond();
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873413080
GPR[SPVAP]-1659873413080
GPR[EPVAP]-1659873414798
GPR[EPVS]-1659873414798
========
long m1=getFirstMillisecond();
double m2=getLastMillisecond();
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873414800
GPR[SPVAP]-1659873414800
GPR[EPVAP]-1659873416357
GPR[EPVS]-1659873416357
GPR[ESUN]-1659873416358
GPR[SSUN]-1659873416358
org.jfree.data.time.RegularTimePeriod,251
GPR[ESUN]-1659873416752
GPR[SSUN]-1659873416752
org.jfree.data.time.RegularTimePeriod,252
GPR[ESUN]-1659873417116
GPR[SSUN]-1659873417116
org.jfree.data.time.RegularTimePeriod,264
========
long m1=getFirstMillisecond(this.calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873419221
GPR[SPVAP]-1659873419221
GPR[EPVAP]-1659873421328
GPR[EPVS]-1659873421328
========
double m1=getFirstMillisecond(calendar);
double m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873421331
GPR[SPVAP]-1659873421331
GPR[EPVAP]-1659873423025
GPR[EPVS]-1659873423025
========
double m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873423026
GPR[SPVAP]-1659873423026
GPR[EPVAP]-1659873424649
GPR[EPVS]-1659873424649
========
long m1=getFirstMillisecond(calendar);
double m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873424650
GPR[SPVAP]-1659873424650
GPR[EPVAP]-1659873426564
GPR[EPVS]-1659873426564
========
long m1=getFirstMillisecond(calendar);
long m2=get(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873426565
GPR[SPVAP]-1659873426565
GPR[EPVAP]-1659873427574
GPR[EPVS]-1659873427574
========
long m1=getFirstMillisecond(calendar);
int m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873427575
GPR[SPVAP]-1659873427575
GPR[EPVAP]-1659873428556
GPR[EPVS]-1659873428556
========
this.m2=(byte)calendar.get(Calendar.MINUTE);
long m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873428557
GPR[SPVAP]-1659873428557
GPR[EPVAP]-1659873429552
GPR[EPVS]-1659873429552
========
long m1=getFirstMillisecond(calendar);
int m2=get(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873429553
GPR[SPVAP]-1659873429553
GPR[EPVAP]-1659873430727
GPR[EPVS]-1659873430727
========
long m1=get(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873430734
GPR[SPVAP]-1659873430734
GPR[EPVAP]-1659873432161
GPR[EPVS]-1659873432161
========
int m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873432163
GPR[SPVAP]-1659873432163
GPR[EPVAP]-1659873433182
GPR[EPVS]-1659873433182
========
if(calendar.get(Calendar.MONTH)==Calendar.JANUARY&&this.m2>=52){
calendar.get(Calendar.YEAR)--;
}
long m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873433183
GPR[SPVAP]-1659873433183
GPR[EPVAP]-1659873434171
GPR[EPVS]-1659873434171
========
calendar.set(Calendar.MILLISECOND,999);
long m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873434173
GPR[SPVAP]-1659873434173
GPR[EPVAP]-1659873437477
GPR[SPVATF]-1659873437477
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873438606
GPR[EPVS]-1659873438606
========
calendar.set(Calendar.MILLISECOND,999);
int m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873438607
GPR[SPVAP]-1659873438607
GPR[EPVAP]-1659873439302
GPR[EPVS]-1659873439302
========
this.m2=(byte)calendar.get(Calendar.HOUR_OF_DAY);
long m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873439303
GPR[SPVAP]-1659873439303
GPR[EPVAP]-1659873440013
GPR[EPVS]-1659873440013
========
calendar.set(getYYYY(),getMonth()-1,getDayOfMonth(),0,0,0);
long m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873440014
GPR[SPVAP]-1659873440014
GPR[EPVAP]-1659873440739
GPR[EPVS]-1659873440739
========
int m1=getFirstMillisecond(calendar);
int m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873440742
GPR[SPVAP]-1659873440742
GPR[EPVAP]-1659873441434
GPR[EPVS]-1659873441434
========
calendar.clear();
long m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873441435
GPR[SPVAP]-1659873441435
GPR[EPVAP]-1659873442733
GPR[SPVATF]-1659873442733
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873443867
GPR[EPVS]-1659873443867
========
calendar.set(Calendar.MILLISECOND,0);
long m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873443868
GPR[SPVAP]-1659873443868
GPR[EPVAP]-1659873445102
GPR[SPVATF]-1659873445102
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873446251
GPR[EPVS]-1659873446251
========
calendar.clear();
int m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873446252
GPR[SPVAP]-1659873446252
GPR[EPVAP]-1659873446939
GPR[EPVS]-1659873446939
========
calendar.set(Calendar.MILLISECOND,0);
int m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873446940
GPR[SPVAP]-1659873446940
GPR[EPVAP]-1659873447639
GPR[EPVS]-1659873447639
========
calendar.clear();
long m1=getFirstMillisecond(calendar);
int m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873447640
GPR[SPVAP]-1659873447640
GPR[EPVAP]-1659873448359
GPR[EPVS]-1659873448359
========
calendar.set(Calendar.MILLISECOND,0);
long m1=getFirstMillisecond(calendar);
int m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873448360
GPR[SPVAP]-1659873448360
GPR[EPVAP]-1659873449084
GPR[EPVS]-1659873449084
========
calendar.clear();
calendar.set(Calendar.MILLISECOND,0);
long m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873449086
GPR[SPVAP]-1659873449086
GPR[EPVAP]-1659873450350
GPR[SPVATF]-1659873450350
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873451483
GPR[EPVS]-1659873451483
========
calendar.clear();
int m1=getFirstMillisecond(calendar);
int m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873451484
GPR[SPVAP]-1659873451484
GPR[EPVAP]-1659873452195
GPR[EPVS]-1659873452195
========
calendar.set(Calendar.MILLISECOND,0);
int m1=getFirstMillisecond(calendar);
int m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873452196
GPR[SPVAP]-1659873452196
GPR[EPVAP]-1659873452890
GPR[EPVS]-1659873452890
========
calendar.clear();
calendar.set(Calendar.MILLISECOND,0);
int m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873452891
GPR[SPVAP]-1659873452891
GPR[EPVAP]-1659873453578
GPR[EPVS]-1659873453578
========
calendar.clear();
calendar.set(Calendar.MILLISECOND,0);
long m1=getFirstMillisecond(calendar);
int m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873453579
GPR[SPVAP]-1659873453579
GPR[EPVAP]-1659873454276
GPR[EPVS]-1659873454276
========
calendar.clear();
calendar.set(Calendar.MILLISECOND,0);
int m1=getFirstMillisecond(calendar);
int m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873454277
GPR[SPVAP]-1659873454277
GPR[EPVAP]-1659873454982
GPR[EPVS]-1659873454982
========
calendar.set(Calendar.MILLISECOND,999);
long m1=getFirstMillisecond(calendar);
int m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873454984
GPR[SPVAP]-1659873454984
GPR[EPVAP]-1659873455682
GPR[EPVS]-1659873455682
========
calendar.clear();
calendar.set(Calendar.MILLISECOND,999);
long m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873455684
GPR[SPVAP]-1659873455684
GPR[EPVAP]-1659873456955
GPR[SPVATF]-1659873456955
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873458091
GPR[EPVS]-1659873458091
========
calendar.set(Calendar.MILLISECOND,999);
int m1=getFirstMillisecond(calendar);
int m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873458093
GPR[SPVAP]-1659873458093
GPR[EPVAP]-1659873458787
GPR[EPVS]-1659873458787
========
calendar.clear();
calendar.set(Calendar.MILLISECOND,999);
int m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873458788
GPR[SPVAP]-1659873458788
GPR[EPVAP]-1659873459505
GPR[EPVS]-1659873459505
========
calendar.clear();
calendar.set(Calendar.MILLISECOND,999);
long m1=getFirstMillisecond(calendar);
int m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873459507
GPR[SPVAP]-1659873459507
GPR[EPVAP]-1659873460219
GPR[EPVS]-1659873460219
========
calendar.clear();
calendar.set(Calendar.MILLISECOND,999);
int m1=getFirstMillisecond(calendar);
int m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873460220
GPR[SPVAP]-1659873460220
GPR[EPVAP]-1659873460909
GPR[EPVS]-1659873460909
========
long m1=getActualMaximum(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873460913
GPR[SPVAP]-1659873460913
GPR[EPVAP]-1659873461638
GPR[EPVS]-1659873461639
========
m2=calendar.get(Calendar.SECOND);
long m1=getFirstMillisecond(calendar);
long m2=getLastMillisecond(calendar);
return m1+(m2-m1)/2;

========
MM Copying to MM
GPR[SPVS]-1659873461641
GPR[SPVAP]-1659873461641
GPR[EPVAP]-1659873462342
GPR[EPVS]-1659873462342
GPR[ESUN]-1659873462343
GPR[SSUN]-1659873462343
org.jfree.data.time.RegularTimePeriod,265
GPR[ESUN]-1659873462865
GPR[SSUN]-1659873462865
org.jfree.data.time.RegularTimePeriod,266
GPR[ESUN]-1659873463203
GPR[SSUN]-1659873463203
org.jfree.data.time.RegularTimePeriod,275
GPR[ESUN]-1659873465252
GPR[SSUN]-1659873465252
org.jfree.data.time.RegularTimePeriod,89
Find no block!
GPR[SSUN]-1659873465613
org.jfree.data.time.TimePeriodFormatException,55
GPR[ESUN]-1659873467603
GPR[SSUN]-1659873467603
org.jfree.data.time.TimePeriodFormatException,56
Find no block!
GPR[SSUN]-1659873467961
org.jfree.data.time.Day,113
GPR[ESUN]-1659873469964
GPR[SSUN]-1659873469964
org.jfree.data.time.Day,114
Find no block!
GPR[SSUN]-1659873470316
org.jfree.data.time.Day,123
Find no block!
GPR[SSUN]-1659873470649
org.jfree.data.time.Day,124
========
this.serialDate=SerialDate.createInstance(day,month,year);
if((month<1)||(month>12)){
throw new IllegalArgumentException("Month outside valid range.");
}
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873472742
GPR[SPVAP]-1659873472742
GPR[EPVAP]-1659873477244
GPR[SPVATF]-1659873477244
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873478396
GPR[EPVS]-1659873478396
========
this.serialDate=SerialDate.createInstance(day,month,year);
this.month=month;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873478397
GPR[SPVAP]-1659873478397
GPR[EPVAP]-1659873479117
GPR[EPVS]-1659873479117
========
this.serialDate=SerialDate.createInstance(day,month,year);
this.year=year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873479118
GPR[SPVAP]-1659873479118
GPR[EPVAP]-1659873479848
GPR[EPVS]-1659873479848
========
if(serialDate==null){
throw new IllegalArgumentException("Null \'serialDate\' argument.");
}
this.serialDate=SerialDate.createInstance(day,month,year);
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873479850
GPR[SPVAP]-1659873479850
GPR[EPVAP]-1659873481157
GPR[SPVATF]-1659873481157
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873482273
GPR[EPVS]-1659873482273
========
this.serialDate=SerialDate.createInstance(day,month,year);
if((month<FIRST_WEEK_IN_YEAR)&&(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873482274
GPR[SPVAP]-1659873482274
GPR[EPVAP]-1659873483002
GPR[EPVS]-1659873483002
========
this.serialDate=SerialDate.createInstance(day,month,year);
this.month=(byte)week;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873483004
GPR[SPVAP]-1659873483004
GPR[EPVAP]-1659873483720
GPR[EPVS]-1659873483720
========
this.serialDate=SerialDate.createInstance(day,month,year);
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873483721
GPR[SPVAP]-1659873483721
GPR[EPVAP]-1659873484431
GPR[EPVS]-1659873484431
========
this.serialDate=SerialDate.createInstance(day,month,year);
if((month<FIRST_QUARTER)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873484433
GPR[SPVAP]-1659873484433
GPR[EPVAP]-1659873485165
GPR[EPVS]-1659873485165
========
this.serialDate=SerialDate.createInstance(day,month,year);
this.month=(byte)quarter;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873485166
GPR[SPVAP]-1659873485166
GPR[EPVAP]-1659873485895
GPR[EPVS]-1659873485895
========
this.serialDate=SerialDate.createInstance(day,month,year);
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873485896
GPR[SPVAP]-1659873485896
GPR[EPVAP]-1659873487182
GPR[SPVATF]-1659873487182
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873488288
GPR[EPVS]-1659873488288
========
this.serialDate=SerialDate.createInstance(day,month,year);
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873488289
GPR[SPVAP]-1659873488289
GPR[EPVAP]-1659873489028
GPR[EPVS]-1659873489028
========
this.serialDate=SerialDate.createInstance(day,month,year);
this.year=year.getYear();
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873489030
GPR[SPVAP]-1659873489030
GPR[EPVAP]-1659873489733
GPR[EPVS]-1659873489733
========
this.serialDate=SerialDate.createInstance(day,month,year);
if((month<1)||(month>12)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.month=month;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873489734
GPR[SPVAP]-1659873489734
GPR[EPVAP]-1659873490440
GPR[EPVS]-1659873490440
========
this.DATE_FORMAT_SHORT=DATE_FORMAT_SHORT;
this.serialDate=SerialDate.createInstance(day,month,year);
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873490442
GPR[SPVAP]-1659873490442
GPR[EPVAP]-1659873491163
GPR[EPVS]-1659873491163
========
this.serialDate=SerialDate.createInstance(day,month,year);
this.month=(byte)second;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873491164
GPR[SPVAP]-1659873491164
GPR[EPVAP]-1659873491881
GPR[EPVS]-1659873491881
========
this.serialDate=SerialDate.createInstance(day,month,year);
if(day==null){
throw new IllegalArgumentException("Null \'day\' argument.");
}
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873491882
GPR[SPVAP]-1659873491882
GPR[EPVAP]-1659873492619
GPR[EPVS]-1659873492619
========
this.serialDate=SerialDate.createInstance(day,month,year);
this.month=(byte)hour;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873492621
GPR[SPVAP]-1659873492621
GPR[EPVAP]-1659873493320
GPR[EPVS]-1659873493320
========
this.serialDate=SerialDate.createInstance(day,month,year);
this.day=day;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873493321
GPR[SPVAP]-1659873493321
GPR[EPVAP]-1659873494030
GPR[EPVS]-1659873494030
========
this.serialDate=SerialDate.createInstance(day,month,year);
this.year=(short)year.getYear();
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873494031
GPR[SPVAP]-1659873494031
GPR[EPVAP]-1659873494742
GPR[EPVS]-1659873494742
========
this.serialDate=SerialDate.createInstance(day,month,year);
if((month<FIRST_WEEK_IN_YEAR)&&(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.month=(byte)week;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873494743
GPR[SPVAP]-1659873494743
GPR[EPVAP]-1659873495453
GPR[EPVS]-1659873495453
========
this.serialDate=SerialDate.createInstance(day,month,year);
if((month<FIRST_QUARTER)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year.getYear();
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873495455
GPR[SPVAP]-1659873495455
GPR[EPVAP]-1659873496185
GPR[EPVS]-1659873496185
========
this.serialDate=SerialDate.createInstance(day,month,year);
if((month<FIRST_QUARTER)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.month=(byte)quarter;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873496186
GPR[SPVAP]-1659873496186
GPR[EPVAP]-1659873496903
GPR[EPVS]-1659873496903
========
this.serialDate=SerialDate.createInstance(day,month,year);
this.year=(short)year.getYear();
this.month=(byte)quarter;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873496904
GPR[SPVAP]-1659873496904
GPR[EPVAP]-1659873497628
GPR[EPVS]-1659873497628
========
this.serialDate=SerialDate.createInstance(day,month,year);
if((month<FIRST_QUARTER)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year.getYear();
this.month=(byte)quarter;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873497628
GPR[SPVAP]-1659873497628
GPR[EPVAP]-1659873498372
GPR[EPVS]-1659873498372
========
this.month=(byte)minute;
this.serialDate=SerialDate.createInstance(day,month,year);
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873498374
GPR[SPVAP]-1659873498374
GPR[EPVAP]-1659873499077
GPR[EPVS]-1659873499077
========
if((day>=1)&&(day<=SerialDate.lastDayOfMonth(month,year))){
this.day=day;
}else {
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.serialDate=SerialDate.createInstance(day,month,year);
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873499079
GPR[SPVAP]-1659873499079
GPR[EPVAP]-1659873499780
GPR[EPVS]-1659873499780
========
this.month=millisecond;
this.serialDate=SerialDate.createInstance(day,month,year);
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873499783
GPR[SPVAP]-1659873499783
GPR[EPVAP]-1659873500501
GPR[EPVS]-1659873500501
========
this.day=this.month-month+1;
this.serialDate=SerialDate.createInstance(day,month,year);
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873500505
GPR[SPVAP]-1659873500505
GPR[EPVAP]-1659873501210
GPR[EPVS]-1659873501210
GPR[ESUN]-1659873501211
GPR[SSUN]-1659873501211
org.jfree.data.time.Day,125
GPR[ESUN]-1659873501712
GPR[SSUN]-1659873501712
org.jfree.data.time.Day,126
Find no block!
GPR[SSUN]-1659873502052
org.jfree.data.time.Day,133
Find no block!
GPR[SSUN]-1659873502425
org.jfree.data.time.Day,134
GPR[ESUN]-1659873504411
GPR[SSUN]-1659873504411
org.jfree.data.time.Day,135
GPR[ESUN]-1659873504778
GPR[SSUN]-1659873504778
org.jfree.data.time.Day,137
========
if(serialDate==null){
throw new IllegalArgumentException("Null \'day\' argument.");
}
this.serialDate=serialDate;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873506847
GPR[SPVAP]-1659873506847
GPR[EPVAP]-1659873511423
GPR[SPVATF]-1659873511423
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873512575
GPR[EPVS]-1659873512575
========
if(serialDate==null){
throw new IllegalArgumentException("Month outside valid range.");
}
this.serialDate=serialDate;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873512577
GPR[SPVAP]-1659873512577
GPR[EPVAP]-1659873513845
GPR[SPVATF]-1659873513845
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873515022
GPR[EPVS]-1659873515022
========
if(serialDate==null){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.serialDate=serialDate;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873515023
GPR[SPVAP]-1659873515023
GPR[EPVAP]-1659873516264
GPR[SPVATF]-1659873516264
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873518223
GPR[EPVS]-1659873518223
========
if(serialDate==null){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.serialDate=serialDate;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873518224
GPR[SPVAP]-1659873518224
GPR[EPVAP]-1659873521009
GPR[SPVATF]-1659873521009
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873522174
GPR[EPVS]-1659873522174
========
if(serialDate==null){
throw new IllegalArgumentException("Null \'first\' argument.");
}
this.serialDate=serialDate;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873522175
GPR[SPVAP]-1659873522175
GPR[EPVAP]-1659873523479
GPR[SPVATF]-1659873523480
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873524610
GPR[EPVS]-1659873524610
========
if(serialDate==null){
throw new IllegalArgumentException("Null \'last\' argument.");
}
this.serialDate=serialDate;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873524611
GPR[SPVAP]-1659873524611
GPR[EPVAP]-1659873525854
GPR[SPVATF]-1659873525854
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873526980
GPR[EPVS]-1659873526980
========
if(serialDate==null){
throw new IllegalArgumentException("Null \'serialDate\' argument.");
}
this.serialDate=serialDate;
super();
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659873526981
GPR[SPVAP]-1659873526981
GPR[EPVAP]-1659873527687
GPR[EPVS]-1659873527687
GPR[ESUN]-1659873527687
GPR[SSUN]-1659873527687
org.jfree.data.time.Day,138
GPR[ESUN]-1659873528174
GPR[SSUN]-1659873528174
org.jfree.data.time.Day,139
Find no block!
GPR[SSUN]-1659873528532
org.jfree.data.time.Day,151
GPR[ESUN]-1659873530527
GPR[SSUN]-1659873530527
org.jfree.data.time.Day,152
Find no block!
GPR[SSUN]-1659873530885
org.jfree.data.time.Day,160
Find no block!
GPR[SSUN]-1659873531220
org.jfree.data.time.Day,162
GPR[ESUN]-1659873533194
GPR[SSUN]-1659873533194
org.jfree.data.time.Day,163
GPR[ESUN]-1659873533544
GPR[SSUN]-1659873533544
org.jfree.data.time.Day,165
GPR[ESUN]-1659873535560
GPR[SSUN]-1659873535560
org.jfree.data.time.Day,166
GPR[ESUN]-1659873535936
GPR[SSUN]-1659873535936
org.jfree.data.time.Day,168
========
if(time==null){
throw new IllegalArgumentException("Null \'time\' argument.");
}
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);

========
MM Copying to MM
GPR[SPVS]-1659873538092
GPR[SPVAP]-1659873538092
GPR[EPVAP]-1659873542734
GPR[SPVATF]-1659873542734
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873543900
GPR[EPVS]-1659873543900
========
notifyListeners(new AxisChangeEvent(this));
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);

========
MM Copying to MM
GPR[SPVS]-1659873543901
GPR[SPVAP]-1659873543901
GPR[EPVAP]-1659873544642
GPR[EPVS]-1659873544642
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.getInstance(zone);
this.calendar=new GregorianCalendar(zone);
calendar.setTime(time);

========
MM Copying to MM
GPR[SPVS]-1659873544644
GPR[SPVAP]-1659873544644
GPR[EPVAP]-1659873545372
GPR[EPVS]-1659873545372
========
super();
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);

========
MM Copying to MM
GPR[SPVS]-1659873545373
GPR[SPVAP]-1659873545373
GPR[EPVAP]-1659873546085
GPR[EPVS]-1659873546085
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.getActualMaximum(zone);
calendar.setTime(time);

========
MM Copying to MM
GPR[SPVS]-1659873546086
GPR[SPVAP]-1659873546086
GPR[EPVAP]-1659873546790
GPR[EPVS]-1659873546790
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.getInstance(zone);
calendar.setComposite(time);

========
MM Copying to MM
GPR[SPVS]-1659873546791
GPR[SPVAP]-1659873546791
GPR[EPVAP]-1659873547497
GPR[EPVS]-1659873547497
========
calendar.set(Calendar.MILLISECOND,999);
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);

========
MM Copying to MM
GPR[SPVS]-1659873547498
GPR[SPVAP]-1659873547498
GPR[EPVAP]-1659873548210
GPR[EPVS]-1659873548210
========
calendar.set(Calendar.MILLISECOND,0);
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);

========
MM Copying to MM
GPR[SPVS]-1659873548212
GPR[SPVAP]-1659873548212
GPR[EPVAP]-1659873548921
GPR[EPVS]-1659873548921
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.get(zone);
calendar.setTime(time);

========
MM Copying to MM
GPR[SPVS]-1659873548922
GPR[SPVAP]-1659873548922
GPR[EPVAP]-1659873549628
GPR[EPVS]-1659873549628
========
calendar.set(this.serialDate.getYYYY(),this.serialDate.getMonth()-1,this.serialDate.getDayOfMonth(),0,0,0);
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);

========
MM Copying to MM
GPR[SPVS]-1659873549630
GPR[SPVAP]-1659873549630
GPR[EPVAP]-1659873550350
GPR[EPVS]-1659873550350
========
calendar.set(this.serialDate.getYYYY(),this.serialDate.getMonth()-1,this.serialDate.getDayOfMonth(),23,59,59);
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);

========
MM Copying to MM
GPR[SPVS]-1659873550351
GPR[SPVAP]-1659873550351
GPR[EPVAP]-1659873551076
GPR[EPVS]-1659873551076
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.getInstance(zone);
calendar.clear(time);

========
MM Copying to MM
GPR[SPVS]-1659873551077
GPR[SPVAP]-1659873551077
GPR[EPVAP]-1659873551809
GPR[EPVS]-1659873551809
========
if(zone!=null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);

========
MM Copying to MM
GPR[SPVS]-1659873551810
GPR[SPVAP]-1659873551810
GPR[EPVAP]-1659873553087
GPR[SPVATF]-1659873553087
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873554239
GPR[EPVS]-1659873554239
========
this.calendar=new GregorianCalendar(zone);
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);

========
MM Copying to MM
GPR[SPVS]-1659873554242
GPR[SPVAP]-1659873554242
GPR[EPVAP]-1659873554957
GPR[EPVS]-1659873554957
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
Calendar calendar=Calendar.getInstance(zone);
lastMillisecond=lastMillisecond;
calendar.setTime(time);

========
MM Copying to MM
GPR[SPVS]-1659873554958
GPR[SPVAP]-1659873554958
GPR[EPVAP]-1659873556205
GPR[SPVATF]-1659873556205
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873557308
GPR[EPVS]-1659873557308
GPR[ESUN]-1659873557309
GPR[SSUN]-1659873557309
org.jfree.data.time.Day,169
========
this.d=calendar.get(Calendar.MILLISECOND);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873560055
GPR[SPVAP]-1659873560055
GPR[EPVAP]-1659873562429
GPR[EPVS]-1659873562429
========
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.MINUTE);

========
MM Copying to MM
GPR[SPVS]-1659873562430
GPR[SPVAP]-1659873562431
GPR[EPVAP]-1659873565587
GPR[SPVATF]-1659873565587
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873566703
GPR[EPVS]-1659873566703
========
this.d=(byte)calendar.get(Calendar.HOUR_OF_DAY);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873566704
GPR[SPVAP]-1659873566704
GPR[EPVAP]-1659873567420
GPR[EPVS]-1659873567421
========
this.d=calendar.get(Calendar.MONTH)+1;
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873567422
GPR[SPVAP]-1659873567422
GPR[EPVAP]-1659873568165
GPR[EPVS]-1659873568165
========
peg(calendar);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873568166
GPR[SPVAP]-1659873568166
GPR[EPVAP]-1659873568871
GPR[EPVS]-1659873568871
========
this.d=(short)calendar.get(Calendar.YEAR);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873568872
GPR[SPVAP]-1659873568872
GPR[EPVAP]-1659873569585
GPR[EPVS]-1659873569585
========
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.WEEK_OF_YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873569587
GPR[SPVAP]-1659873569587
GPR[EPVAP]-1659873570895
GPR[SPVATF]-1659873570895
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873572054
GPR[EPVS]-1659873572054
========
Calendar calendar=Calendar.get(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873572056
GPR[SPVAP]-1659873572056
GPR[EPVAP]-1659873572775
GPR[EPVS]-1659873572775
========
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873572776
GPR[SPVAP]-1659873572776
GPR[EPVAP]-1659873574065
GPR[SPVATF]-1659873574065
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873575209
GPR[EPVS]-1659873575209
========
this.serialDate=SerialDate.createInstance(d,calendar.get(Calendar.MONTH)+1,calendar.get(Calendar.YEAR));
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873575210
GPR[SPVAP]-1659873575211
GPR[EPVAP]-1659873575959
GPR[EPVS]-1659873575959
========
Calendar calendar=Calendar.getInstance(zone);
calendar.get(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873575960
GPR[SPVAP]-1659873575960
GPR[EPVAP]-1659873576670
GPR[EPVS]-1659873576670
========
d=calendar.get(Calendar.HOUR_OF_DAY);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873576671
GPR[SPVAP]-1659873576671
GPR[EPVAP]-1659873577392
GPR[EPVS]-1659873577392
========
this.d=(byte)calendar.get(Calendar.HOUR_OF_DAY);
peg(calendar);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873577393
GPR[SPVAP]-1659873577393
GPR[EPVAP]-1659873578111
GPR[EPVS]-1659873578111
========
d=calendar.get(Calendar.HOUR_OF_DAY);
Calendar calendar=Calendar.getInstance(zone);
calendar.get(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873578112
GPR[SPVAP]-1659873578112
GPR[EPVAP]-1659873578828
GPR[EPVS]-1659873578828
========
this.d=(short)calendar.get(Calendar.YEAR);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873578829
GPR[SPVAP]-1659873578829
GPR[EPVAP]-1659873579552
GPR[EPVS]-1659873579552
========
peg(calendar);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873579554
GPR[SPVAP]-1659873579554
GPR[EPVAP]-1659873580273
GPR[EPVS]-1659873580273
========
this.d=(short)calendar.get(Calendar.YEAR);
peg(calendar);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873580274
GPR[SPVAP]-1659873580274
GPR[EPVAP]-1659873580980
GPR[EPVS]-1659873580980
========
this.d=(short)calendar.get(Calendar.YEAR);
peg(calendar);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873580981
GPR[SPVAP]-1659873580981
GPR[EPVAP]-1659873581698
GPR[EPVS]-1659873581698
========
this.d=(byte)calendar.get(Calendar.HOUR_OF_DAY);
Calendar calendar=Calendar.getInstance(zone);
calendar.get(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873581699
GPR[SPVAP]-1659873581699
GPR[EPVAP]-1659873582416
GPR[EPVS]-1659873582416
========
peg(calendar);
Calendar calendar=Calendar.getInstance(zone);
calendar.get(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873582417
GPR[SPVAP]-1659873582417
GPR[EPVAP]-1659873583146
GPR[EPVS]-1659873583146
========
this.d=(byte)calendar.get(Calendar.HOUR_OF_DAY);
peg(calendar);
Calendar calendar=Calendar.getInstance(zone);
calendar.get(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873583147
GPR[SPVAP]-1659873583147
GPR[EPVAP]-1659873583869
GPR[EPVS]-1659873583869
========
if(calendar.get(Calendar.MONTH)==Calendar.JANUARY&&this.d>=52){
calendar.get(Calendar.YEAR)--;
}
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873583871
GPR[SPVAP]-1659873583871
GPR[EPVAP]-1659873584586
GPR[EPVS]-1659873584586
========
Calendar calendar=Calendar.get(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873584588
GPR[SPVAP]-1659873584588
GPR[EPVAP]-1659873585326
GPR[EPVS]-1659873585326
========
Calendar calendar=Calendar.getInstance(zone);
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873585328
GPR[SPVAP]-1659873585328
GPR[EPVAP]-1659873586626
GPR[SPVATF]-1659873586626
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873587732
GPR[EPVS]-1659873587732
========
Calendar calendar=Calendar.getInstance(zone);
this.d=zone;
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873587733
GPR[SPVAP]-1659873587733
GPR[EPVAP]-1659873588443
GPR[EPVS]-1659873588443
========
notifyListeners(new AxisChangeEvent(this));
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873588444
GPR[SPVAP]-1659873588444
GPR[EPVAP]-1659873589168
GPR[EPVS]-1659873589168
========
this.d=START;
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873589170
GPR[SPVAP]-1659873589170
GPR[EPVAP]-1659873589892
GPR[EPVS]-1659873589892
========
Calendar calendar=Calendar.getActualMaximum(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873589893
GPR[SPVAP]-1659873589893
GPR[EPVAP]-1659873590604
GPR[EPVS]-1659873590604
========
Calendar calendar=Calendar.getInstance(zone);
c.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873590605
GPR[SPVAP]-1659873590605
GPR[EPVAP]-1659873591320
GPR[EPVS]-1659873591320
========
this.d=Calendar.getInstance(zone);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873591322
GPR[SPVAP]-1659873591322
GPR[EPVAP]-1659873592039
GPR[EPVS]-1659873592039
========
Calendar calendar=Calendar.getInstance(zone);
lowerCoordinates.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873592040
GPR[SPVAP]-1659873592040
GPR[EPVAP]-1659873593197
GPR[EPVS]-1659873593197
========
Calendar calendar=Calendar.getInstance(zone);
calendar.setComposite(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873593202
GPR[SPVAP]-1659873593202
GPR[EPVAP]-1659873593981
GPR[EPVS]-1659873593981
========
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
long d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873593984
GPR[SPVAP]-1659873593984
GPR[EPVAP]-1659873594741
GPR[EPVS]-1659873594741
========
Calendar calendar=Calendar.getInstance(zone);
calendar.add(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873594742
GPR[SPVAP]-1659873594742
GPR[EPVAP]-1659873595509
GPR[EPVS]-1659873595509
========
calendar.set(Calendar.MILLISECOND,999);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873595512
GPR[SPVAP]-1659873595512
GPR[EPVAP]-1659873596302
GPR[EPVS]-1659873596302
========
Calendar calendar=Calendar.getInstance(zone);
upperCoordinates.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873596303
GPR[SPVAP]-1659873596303
GPR[EPVAP]-1659873597067
GPR[EPVS]-1659873597067
========
Calendar calendar=Calendar.getInstance(zone);
d=lastMillisecond;
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873597068
GPR[SPVAP]-1659873597068
GPR[EPVAP]-1659873597787
GPR[EPVS]-1659873597787
========
peg(Calendar.getInstance());
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873597789
GPR[SPVAP]-1659873597789
GPR[EPVAP]-1659873599052
GPR[SPVATF]-1659873599052
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873600176
GPR[EPVS]-1659873600176
========
this.d=MeterPlot.DEFAULT_VALUE_PAINT;
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873600177
GPR[SPVAP]-1659873600177
GPR[EPVAP]-1659873600912
GPR[EPVS]-1659873600912
========
Calendar calendar=Calendar.getInstance(zone);
calendar.clear(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873600914
GPR[SPVAP]-1659873600914
GPR[EPVAP]-1659873601632
GPR[EPVS]-1659873601632
========
calendar.set(Calendar.MILLISECOND,0);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873601633
GPR[SPVAP]-1659873601633
GPR[EPVAP]-1659873602343
GPR[EPVS]-1659873602343
========
calendar.set(this.serialDate.getYYYY(),d-1,this.serialDate.getDayOfMonth(),0,0,0);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873602344
GPR[SPVAP]-1659873602344
GPR[EPVAP]-1659873603049
GPR[EPVS]-1659873603049
========
calendar.set(this.serialDate.getYYYY(),d-1,this.serialDate.getDayOfMonth(),23,59,59);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873603050
GPR[SPVAP]-1659873603050
GPR[EPVAP]-1659873603762
GPR[EPVS]-1659873603762
========
fireChangeEvent();
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873603763
GPR[SPVAP]-1659873603763
GPR[EPVAP]-1659873604487
GPR[EPVS]-1659873604487
========
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
double d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873604490
GPR[SPVAP]-1659873604490
GPR[EPVAP]-1659873605201
GPR[EPVS]-1659873605201
========
Calendar calendar=Calendar.getInstance(zone);
calendar.setComposite(time);
double d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873605205
GPR[SPVAP]-1659873605205
GPR[EPVAP]-1659873605965
GPR[EPVS]-1659873605965
========
fireDatasetChanged(new DatasetChangeInfo());
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873605968
GPR[SPVAP]-1659873605968
GPR[EPVAP]-1659873606683
GPR[EPVS]-1659873606683
========
DATE_FORMAT_SHORT.setTimeZone(zone);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873606684
GPR[SPVAP]-1659873606684
GPR[EPVAP]-1659873607945
GPR[SPVATF]-1659873607945
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873609119
GPR[EPVS]-1659873609119
========
Calendar calendar=Calendar.getInstance(zone);
this.d=new GregorianCalendar(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873609121
GPR[SPVAP]-1659873609121
GPR[EPVAP]-1659873609843
GPR[EPVS]-1659873609843
========
Calendar calendar=Calendar.getInstance(zone);
cal.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873609844
GPR[SPVAP]-1659873609844
GPR[EPVAP]-1659873610567
GPR[EPVS]-1659873610567
========
this.d=new GregorianCalendar(zone);
Calendar calendar=Calendar.getInstance(zone);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873610568
GPR[SPVAP]-1659873610568
GPR[EPVAP]-1659873611304
GPR[EPVS]-1659873611304
GPR[ESUN]-1659873611306
GPR[SSUN]-1659873611306
org.jfree.data.time.Day,170
========
calendar.get(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873614065
GPR[SPVAP]-1659873614065
GPR[EPVAP]-1659873616469
GPR[EPVS]-1659873616469
========
m=calendar.get(Calendar.MONTH);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873616470
GPR[SPVAP]-1659873616470
GPR[EPVAP]-1659873617472
GPR[EPVS]-1659873617472
========
d=calendar.get(Calendar.HOUR_OF_DAY);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873617474
GPR[SPVAP]-1659873617474
GPR[EPVAP]-1659873618454
GPR[EPVS]-1659873618454
========
m=calendar.get(Calendar.MONTH);
calendar.get(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873618456
GPR[SPVAP]-1659873618456
GPR[EPVAP]-1659873619466
GPR[EPVS]-1659873619466
========
d=calendar.get(Calendar.HOUR_OF_DAY);
calendar.get(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873619467
GPR[SPVAP]-1659873619467
GPR[EPVAP]-1659873620454
GPR[EPVS]-1659873620454
========
m=calendar.get(Calendar.MONTH);
d=calendar.get(Calendar.HOUR_OF_DAY);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873620455
GPR[SPVAP]-1659873620455
GPR[EPVAP]-1659873621490
GPR[EPVS]-1659873621490
========
m=calendar.get(Calendar.MONTH);
d=calendar.get(Calendar.HOUR_OF_DAY);
calendar.get(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873621491
GPR[SPVAP]-1659873621491
GPR[EPVAP]-1659873622540
GPR[EPVS]-1659873622540
========
this.d=calendar.get(Calendar.MILLISECOND);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873622542
GPR[SPVAP]-1659873622542
GPR[EPVAP]-1659873623586
GPR[EPVS]-1659873623586
========
this.m=(byte)calendar.get(Calendar.SECOND);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873623588
GPR[SPVAP]-1659873623588
GPR[EPVAP]-1659873624571
GPR[EPVS]-1659873624571
========
peg(calendar);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873624572
GPR[SPVAP]-1659873624572
GPR[EPVAP]-1659873627871
GPR[SPVATF]-1659873627871
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873629031
GPR[EPVS]-1659873629031
========
peg(calendar);
calendar.get(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873629032
GPR[SPVAP]-1659873629032
GPR[EPVAP]-1659873629757
GPR[EPVS]-1659873629757
========
this.m=(byte)calendar.get(Calendar.SECOND);
peg(calendar);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873629758
GPR[SPVAP]-1659873629759
GPR[EPVAP]-1659873630486
GPR[EPVS]-1659873630486
========
this.d=calendar.get(Calendar.MONTH)+1;
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873630488
GPR[SPVAP]-1659873630488
GPR[EPVAP]-1659873631207
GPR[EPVS]-1659873631207
========
this.m=calendar.get(Calendar.YEAR);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873631208
GPR[SPVAP]-1659873631208
GPR[EPVAP]-1659873631933
GPR[EPVS]-1659873631933
========
calendar.setTime(time);
int d=calendar.get(Calendar.YEAR);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873631935
GPR[SPVAP]-1659873631935
GPR[EPVAP]-1659873633221
GPR[SPVATF]-1659873633221
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873634406
GPR[EPVS]-1659873634406
========
calendar.setTime(time);
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873634407
GPR[SPVAP]-1659873634407
GPR[EPVAP]-1659873635133
GPR[EPVS]-1659873635134
========
this.m=(byte)SerialDate.monthCodeToQuarter(calendar.get(Calendar.MONTH)+1);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873635135
GPR[SPVAP]-1659873635135
GPR[EPVAP]-1659873635845
GPR[EPVS]-1659873635845
========
calendar.setTime(time);
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873635846
GPR[SPVAP]-1659873635846
GPR[EPVAP]-1659873637108
GPR[SPVATF]-1659873637108
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873638232
GPR[EPVS]-1659873638232
========
calendar.setTime(time);
int d=calendar.get(new Integer(d));
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873638236
GPR[SPVAP]-1659873638236
GPR[EPVAP]-1659873639010
GPR[EPVS]-1659873639010
========
calendar.clear(Calendar.MILLISECOND);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873639011
GPR[SPVAP]-1659873639011
GPR[EPVAP]-1659873640297
GPR[SPVATF]-1659873640297
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873641426
GPR[EPVS]-1659873641426
========
calendar.clear(Calendar.MILLISECOND);
calendar.get(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873641427
GPR[SPVAP]-1659873641427
GPR[EPVAP]-1659873642137
GPR[EPVS]-1659873642137
========
calendar.setTime(time);
int d=calendar.get(RenderingHints.KEY_ANTIALIASING);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873642138
GPR[SPVAP]-1659873642138
GPR[EPVAP]-1659873642840
GPR[EPVS]-1659873642840
========
upperCoordinates.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873642841
GPR[SPVAP]-1659873642841
GPR[EPVAP]-1659873643555
GPR[EPVS]-1659873643555
========
seriesPath.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873643556
GPR[SPVAP]-1659873643556
GPR[EPVAP]-1659873644258
GPR[EPVS]-1659873644258
========
calendar.setTime(time);
int d=lowerCoordinates.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873644260
GPR[SPVAP]-1659873644260
GPR[EPVAP]-1659873644970
GPR[EPVS]-1659873644970
========
new GeneralPath().moveTo((float)(double[])drState.lowerCoordinates.get(0)[0],(float)coords[1]);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873644972
GPR[SPVAP]-1659873644972
GPR[EPVAP]-1659873645702
GPR[EPVS]-1659873645702
========
calendar.add(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873645703
GPR[SPVAP]-1659873645703
GPR[EPVAP]-1659873646426
GPR[EPVS]-1659873646426
========
calendar.setTime(time);
int d=calendar.get(Calendar.MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873646427
GPR[SPVAP]-1659873646427
GPR[EPVAP]-1659873647721
GPR[SPVATF]-1659873647721
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873648924
GPR[EPVS]-1659873648924
========
calendar.setComposite(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873648925
GPR[SPVAP]-1659873648925
GPR[EPVAP]-1659873649662
GPR[EPVS]-1659873649662
========
calendar.setTime(time);
int d=calendar.get(d-1);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873649664
GPR[SPVAP]-1659873649664
GPR[EPVAP]-1659873650390
GPR[EPVS]-1659873650390
========
cal.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873650392
GPR[SPVAP]-1659873650392
GPR[EPVAP]-1659873651105
GPR[EPVS]-1659873651105
========
calendar.setTime(time);
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873651107
GPR[SPVAP]-1659873651107
GPR[EPVAP]-1659873651834
GPR[EPVS]-1659873651834
========
calendar.setTime(time);
if((d<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873651836
GPR[SPVAP]-1659873651836
GPR[EPVAP]-1659873652561
GPR[EPVS]-1659873652561
========
if(d>=0){
index=index+1;
}else {
index=-index;
}
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873652564
GPR[SPVAP]-1659873652564
GPR[EPVAP]-1659873653279
GPR[EPVS]-1659873653279
========
calendar.setTime(time);
int d=calendar.get(m);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873653280
GPR[SPVAP]-1659873653280
GPR[EPVAP]-1659873654010
GPR[EPVS]-1659873654011
========
fireChangeEvent();
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873654012
GPR[SPVAP]-1659873654012
GPR[EPVAP]-1659873654727
GPR[EPVS]-1659873654727
========
fireChangeEvent();
calendar.setTime(time);
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873654728
GPR[SPVAP]-1659873654728
GPR[EPVAP]-1659873655434
GPR[EPVS]-1659873655434
========
calendar.setTime(time);
if(d<0||series>=getSeriesCount()){
throw new IllegalArgumentException("Invalid series index: "+series);
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873655436
GPR[SPVAP]-1659873655436
GPR[EPVAP]-1659873656153
GPR[EPVS]-1659873656153
========
calendar.setTime(time);
if((d<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873656154
GPR[SPVAP]-1659873656154
GPR[EPVAP]-1659873656894
GPR[EPVS]-1659873656894
========
notifyListeners(new AxisChangeEvent(this));
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873656896
GPR[SPVAP]-1659873656896
GPR[EPVAP]-1659873657618
GPR[EPVS]-1659873657618
========
c.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873657619
GPR[SPVAP]-1659873657619
GPR[EPVAP]-1659873658330
GPR[EPVS]-1659873658330
========
calendar.set(Calendar.MILLISECOND,0);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873658332
GPR[SPVAP]-1659873658332
GPR[EPVAP]-1659873659594
GPR[SPVATF]-1659873659594
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873660714
GPR[EPVS]-1659873660714
========
calendar.set(Calendar.MILLISECOND,999);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873660716
GPR[SPVAP]-1659873660716
GPR[EPVAP]-1659873661973
GPR[SPVATF]-1659873661973
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873663113
GPR[EPVS]-1659873663113
========
calendar.setTime(time);
double d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873663115
GPR[SPVAP]-1659873663115
GPR[EPVAP]-1659873663845
GPR[EPVS]-1659873663845
========
calendar.setTime(time);
long d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873663847
GPR[SPVAP]-1659873663847
GPR[EPVAP]-1659873664571
GPR[EPVS]-1659873664571
========
if(calendar.getTime().getTime()>=time.getTime()){
calendar.set(Calendar.MILLISECOND,d-1);
mm=calendar.getTime();
}
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873664572
GPR[SPVAP]-1659873664572
GPR[EPVAP]-1659873665303
GPR[EPVS]-1659873665303
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873665305
GPR[SPVAP]-1659873665305
GPR[EPVAP]-1659873666557
GPR[SPVATF]-1659873666557
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873667676
GPR[EPVS]-1659873667676
========
this.zone=zone;
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873667677
GPR[SPVAP]-1659873667677
GPR[EPVAP]-1659873668427
GPR[EPVS]-1659873668427
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
notifyListeners(new AxisChangeEvent(this));
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873668428
GPR[SPVAP]-1659873668428
GPR[EPVAP]-1659873669138
GPR[EPVS]-1659873669138
========
calendar.setTime(time);
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873669140
GPR[SPVAP]-1659873669140
GPR[EPVAP]-1659873669859
GPR[EPVS]-1659873669859
========
fireDatasetChanged(new DatasetChangeInfo());
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873669861
GPR[SPVAP]-1659873669861
GPR[EPVAP]-1659873670570
GPR[EPVS]-1659873670570
========
calendar.setTime(time);
if((d<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873670571
GPR[SPVAP]-1659873670571
GPR[EPVAP]-1659873671285
GPR[EPVS]-1659873671285
========
fireDatasetChanged(new DatasetChangeInfo());
calendar.setTime(time);
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873671286
GPR[SPVAP]-1659873671286
GPR[EPVAP]-1659873672040
GPR[EPVS]-1659873672040
========
fireDatasetChanged(new DatasetChangeInfo());
calendar.setTime(time);
if((d<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873672041
GPR[SPVAP]-1659873672041
GPR[EPVAP]-1659873672767
GPR[EPVS]-1659873672767
========
fireDatasetChanged(new DatasetChangeInfo());
calendar.setTime(time);
if((d<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873672768
GPR[SPVAP]-1659873672768
GPR[EPVAP]-1659873673496
GPR[EPVS]-1659873673496
========
calendar.setTime(time);
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873673498
GPR[SPVAP]-1659873673498
GPR[EPVAP]-1659873674215
GPR[EPVS]-1659873674215
========
calendar.setTime(time);
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873674216
GPR[SPVAP]-1659873674216
GPR[EPVAP]-1659873674949
GPR[EPVS]-1659873674949
========
fireDatasetChanged(new DatasetChangeInfo());
calendar.setTime(time);
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873674950
GPR[SPVAP]-1659873674950
GPR[EPVAP]-1659873675663
GPR[EPVS]-1659873675663
========
fireDatasetChanged(new DatasetChangeInfo());
calendar.setTime(time);
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873675664
GPR[SPVAP]-1659873675664
GPR[EPVAP]-1659873676380
GPR[EPVS]-1659873676380
========
calendar.set(m,d-1,this.serialDate.getDayOfMonth(),0,0,0);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873676382
GPR[SPVAP]-1659873676382
GPR[EPVAP]-1659873677104
GPR[EPVS]-1659873677104
========
calendar.set(m,d-1,this.serialDate.getDayOfMonth(),23,59,59);
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873677105
GPR[SPVAP]-1659873677105
GPR[EPVAP]-1659873677816
GPR[EPVS]-1659873677816
========
calendar.clear(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873677818
GPR[SPVAP]-1659873677818
GPR[EPVAP]-1659873678529
GPR[EPVS]-1659873678529
========
calendar.setTime(time);
calendar.set(d,d,d,0,0,0);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873678530
GPR[SPVAP]-1659873678530
GPR[EPVAP]-1659873679239
GPR[EPVS]-1659873679239
========
calendar.setTime(time);
calendar.set(d,d,d,d,0,0);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873679240
GPR[SPVAP]-1659873679240
GPR[EPVAP]-1659873679951
GPR[EPVS]-1659873679951
========
lastMillisecond=lastMillisecond;
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873679954
GPR[SPVAP]-1659873679954
GPR[EPVAP]-1659873681212
GPR[SPVATF]-1659873681212
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873682343
GPR[EPVS]-1659873682343
========
calendar.setTime(time);
calendar.set(d,d,d,d,d,d);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873682344
GPR[SPVAP]-1659873682344
GPR[EPVAP]-1659873683059
GPR[EPVS]-1659873683059
========
calendar.clear(time);
calendar.set(d,d,d,d,d,d);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873683060
GPR[SPVAP]-1659873683060
GPR[EPVAP]-1659873683789
GPR[EPVS]-1659873683789
========
calendar.setTime(time);
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;

========
MM Copying to MM
GPR[SPVS]-1659873683792
GPR[SPVAP]-1659873683792
GPR[EPVAP]-1659873684497
GPR[EPVS]-1659873684497
GPR[ESUN]-1659873684499
GPR[SSUN]-1659873684499
org.jfree.data.time.Day,171
========
int d=calendar.get(Calendar.YEAR);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873687272
GPR[SPVAP]-1659873687272
GPR[EPVAP]-1659873691930
GPR[SPVATF]-1659873691930
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873693124
GPR[EPVS]-1659873693124
========
peg(calendar);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873693125
GPR[SPVAP]-1659873693125
GPR[EPVAP]-1659873694422
GPR[SPVATF]-1659873694422
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873695587
GPR[EPVS]-1659873695587
========
peg(calendar);
int d=calendar.get(Calendar.YEAR);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873695588
GPR[SPVAP]-1659873695588
GPR[EPVAP]-1659873696869
GPR[SPVATF]-1659873696869
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873698027
GPR[EPVS]-1659873698027
========
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873698029
GPR[SPVAP]-1659873698029
GPR[EPVAP]-1659873698741
GPR[EPVS]-1659873698741
========
int d=calendar.get(m);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(m);

========
MM Copying to MM
GPR[SPVS]-1659873698743
GPR[SPVAP]-1659873698743
GPR[EPVAP]-1659873699473
GPR[EPVS]-1659873699473
========
int d=calendar.get(m);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873699474
GPR[SPVAP]-1659873699474
GPR[EPVAP]-1659873700197
GPR[EPVS]-1659873700197
========
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(m);

========
MM Copying to MM
GPR[SPVS]-1659873700198
GPR[SPVAP]-1659873700198
GPR[EPVAP]-1659873701543
GPR[SPVATF]-1659873701543
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873702716
GPR[EPVS]-1659873702716
========
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873702717
GPR[SPVAP]-1659873702717
GPR[EPVAP]-1659873703985
GPR[SPVATF]-1659873703985
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873705151
GPR[EPVS]-1659873705151
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873705152
GPR[SPVAP]-1659873705152
GPR[EPVAP]-1659873706437
GPR[SPVATF]-1659873706437
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873707612
GPR[EPVS]-1659873707612
========
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
calendar.setTime(time);
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873707613
GPR[SPVAP]-1659873707613
GPR[EPVAP]-1659873708868
GPR[SPVATF]-1659873708868
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873710017
GPR[EPVS]-1659873710017
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873710018
GPR[SPVAP]-1659873710018
GPR[EPVAP]-1659873711294
GPR[SPVATF]-1659873711294
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873712437
GPR[EPVS]-1659873712437
========
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
calendar.setTime(time);
int y=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873712438
GPR[SPVAP]-1659873712438
GPR[EPVAP]-1659873713734
GPR[SPVATF]-1659873713734
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873714875
GPR[EPVS]-1659873714875
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
calendar.setTime(time);
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873714876
GPR[SPVAP]-1659873714876
GPR[EPVAP]-1659873716118
GPR[SPVATF]-1659873716118
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873717280
GPR[EPVS]-1659873717280
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
calendar.setTime(time);
int y=calendar.get(Calendar.DAY_OF_MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873717281
GPR[SPVAP]-1659873717281
GPR[EPVAP]-1659873718541
GPR[SPVATF]-1659873718541
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873719664
GPR[EPVS]-1659873719664
========
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873719665
GPR[SPVAP]-1659873719665
GPR[EPVAP]-1659873720916
GPR[SPVATF]-1659873720916
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873722056
GPR[EPVS]-1659873722056
========
this.y=(byte)calendar.get(Calendar.SECOND);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873722057
GPR[SPVAP]-1659873722057
GPR[EPVAP]-1659873722771
GPR[EPVS]-1659873722771
========
calendar.setTime(time);
peg(calendar);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873722773
GPR[SPVAP]-1659873722773
GPR[EPVAP]-1659873724039
GPR[SPVATF]-1659873724039
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873725155
GPR[EPVS]-1659873725155
========
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873725157
GPR[SPVAP]-1659873725157
GPR[EPVAP]-1659873726413
GPR[SPVATF]-1659873726413
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873727531
GPR[EPVS]-1659873727531
========
this.calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873727532
GPR[SPVAP]-1659873727532
GPR[EPVAP]-1659873728253
GPR[EPVS]-1659873728253
========
int d=calendar.get(Calendar.YEAR);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.MONTH);

========
MM Copying to MM
GPR[SPVS]-1659873728254
GPR[SPVAP]-1659873728254
GPR[EPVAP]-1659873729507
GPR[SPVATF]-1659873729507
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873730638
GPR[EPVS]-1659873730638
========
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(d);

========
MM Copying to MM
GPR[SPVS]-1659873730640
GPR[SPVAP]-1659873730640
GPR[EPVAP]-1659873731341
GPR[EPVS]-1659873731341
========
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(d);

========
MM Copying to MM
GPR[SPVS]-1659873731341
GPR[SPVAP]-1659873731341
GPR[EPVAP]-1659873732581
GPR[SPVATF]-1659873732581
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873733695
GPR[EPVS]-1659873733695
========
double d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873733697
GPR[SPVAP]-1659873733697
GPR[EPVAP]-1659873734409
GPR[EPVS]-1659873734409
========
this.d=calendar.get(Calendar.MONTH)+1;
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873734410
GPR[SPVAP]-1659873734410
GPR[EPVAP]-1659873735125
GPR[EPVS]-1659873735125
========
this.y=calendar.get(Calendar.YEAR);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873735126
GPR[SPVAP]-1659873735126
GPR[EPVAP]-1659873735838
GPR[EPVS]-1659873735838
========
int d=calendar.get(Calendar.DAY_OF_MONTH);
calendar.setTime(time);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873735840
GPR[SPVAP]-1659873735840
GPR[EPVAP]-1659873737088
GPR[SPVATF]-1659873737088
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873738276
GPR[EPVS]-1659873738276
========
this.y=(byte)SerialDate.monthCodeToQuarter(m);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873738277
GPR[SPVAP]-1659873738277
GPR[EPVAP]-1659873739015
GPR[EPVS]-1659873739015
========
peg(calendar);
int d=calendar.get(Calendar.DAY_OF_MONTH);
calendar.setTime(time);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873739016
GPR[SPVAP]-1659873739016
GPR[EPVAP]-1659873740224
GPR[SPVATF]-1659873740224
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873741375
GPR[EPVS]-1659873741375
========
int d=calendar.get(new Integer(d));
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873741378
GPR[SPVAP]-1659873741378
GPR[EPVAP]-1659873742091
GPR[EPVS]-1659873742091
========
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.WEEK_OF_YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873742093
GPR[SPVAP]-1659873742093
GPR[EPVAP]-1659873743324
GPR[SPVATF]-1659873743324
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873744435
GPR[EPVS]-1659873744435
========
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
calendar.setTime(time);
int y=calendar.get(Calendar.WEEK_OF_YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873744437
GPR[SPVAP]-1659873744437
GPR[EPVAP]-1659873745709
GPR[SPVATF]-1659873745709
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873746845
GPR[EPVS]-1659873746845
========
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.MINUTE);

========
MM Copying to MM
GPR[SPVS]-1659873746846
GPR[SPVAP]-1659873746846
GPR[EPVAP]-1659873748088
GPR[SPVATF]-1659873748088
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873749239
GPR[EPVS]-1659873749239
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.MINUTE);

========
MM Copying to MM
GPR[SPVS]-1659873749240
GPR[SPVAP]-1659873749240
GPR[EPVAP]-1659873750465
GPR[SPVATF]-1659873750465
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873751575
GPR[EPVS]-1659873751575
========
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
calendar.setTime(time);
int y=calendar.get(Calendar.MINUTE);

========
MM Copying to MM
GPR[SPVS]-1659873751577
GPR[SPVAP]-1659873751577
GPR[EPVAP]-1659873752818
GPR[SPVATF]-1659873752818
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873754905
GPR[EPVS]-1659873754905
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
calendar.setTime(time);
int y=calendar.get(Calendar.MINUTE);

========
MM Copying to MM
GPR[SPVS]-1659873754906
GPR[SPVAP]-1659873754906
GPR[EPVAP]-1659873756262
GPR[SPVATF]-1659873756262
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873757493
GPR[EPVS]-1659873757493
========
int d=calendar.get(RenderingHints.KEY_ANTIALIASING);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873757494
GPR[SPVAP]-1659873757494
GPR[EPVAP]-1659873758210
GPR[EPVS]-1659873758210
========
int d=lowerCoordinates.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873758213
GPR[SPVAP]-1659873758213
GPR[EPVAP]-1659873758928
GPR[EPVS]-1659873758928
========
new GeneralPath().moveTo((float)(double[])drState.lowerCoordinates.get(0)[0],(float)coords[1]);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873758930
GPR[SPVAP]-1659873758930
GPR[EPVAP]-1659873759647
GPR[EPVS]-1659873759647
========
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873759649
GPR[SPVAP]-1659873759649
GPR[EPVAP]-1659873760356
GPR[EPVS]-1659873760356
========
int d=calendar.get(d-1);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873760358
GPR[SPVAP]-1659873760358
GPR[EPVAP]-1659873761064
GPR[EPVS]-1659873761064
========
if((d<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873761066
GPR[SPVAP]-1659873761066
GPR[EPVAP]-1659873761772
GPR[EPVS]-1659873761772
========
if(d>=0){
index=index+1;
}else {
index=-index;
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873761775
GPR[SPVAP]-1659873761775
GPR[EPVAP]-1659873762481
GPR[EPVS]-1659873762481
========
int d=calendar.get(y);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873762482
GPR[SPVAP]-1659873762482
GPR[EPVAP]-1659873763189
GPR[EPVS]-1659873763189
========
if((d<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873763191
GPR[SPVAP]-1659873763191
GPR[EPVAP]-1659873763931
GPR[EPVS]-1659873763931
========
if(d<0||series>=getSeriesCount()){
throw new IllegalArgumentException("Invalid series index: "+series);
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873763932
GPR[SPVAP]-1659873763932
GPR[EPVAP]-1659873764639
GPR[EPVS]-1659873764639
========
fireChangeEvent();
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873764640
GPR[SPVAP]-1659873764640
GPR[EPVAP]-1659873765346
GPR[EPVS]-1659873765346
========
fireChangeEvent();
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873765347
GPR[SPVAP]-1659873765347
GPR[EPVAP]-1659873766075
GPR[EPVS]-1659873766075
========
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
double y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873766078
GPR[SPVAP]-1659873766078
GPR[EPVAP]-1659873766784
GPR[EPVS]-1659873766784
========
int d=calendar.get(Calendar.MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873766786
GPR[SPVAP]-1659873766786
GPR[EPVAP]-1659873768019
GPR[SPVATF]-1659873768019
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873769135
GPR[EPVS]-1659873769135
========
this.calendar.setTime(time);
int d=calendar.get(Calendar.MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873769137
GPR[SPVAP]-1659873769137
GPR[EPVAP]-1659873769841
GPR[EPVS]-1659873769841
========
double d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873769842
GPR[SPVAP]-1659873769842
GPR[EPVAP]-1659873770567
GPR[EPVS]-1659873770567
========
calendar.set(getYYYY(),getMonth()-1,getDayOfMonth(),0,0,0);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873770569
GPR[SPVAP]-1659873770569
GPR[EPVAP]-1659873771282
GPR[EPVS]-1659873771282
========
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
calendar.setTime(time);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873771284
GPR[SPVAP]-1659873771284
GPR[EPVAP]-1659873772577
GPR[SPVATF]-1659873772577
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873773719
GPR[EPVS]-1659873773719
========
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873773720
GPR[SPVAP]-1659873773720
GPR[EPVAP]-1659873774443
GPR[EPVS]-1659873774443
========
fireDatasetChanged(new DatasetChangeInfo());
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873774444
GPR[SPVAP]-1659873774444
GPR[EPVAP]-1659873775154
GPR[EPVS]-1659873775154
========
if((d<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873775156
GPR[SPVAP]-1659873775156
GPR[EPVAP]-1659873775888
GPR[EPVS]-1659873775888
========
fireDatasetChanged(new DatasetChangeInfo());
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873775889
GPR[SPVAP]-1659873775889
GPR[EPVAP]-1659873776601
GPR[EPVS]-1659873776601
========
if((d<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
fireDatasetChanged(new DatasetChangeInfo());
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873776602
GPR[SPVAP]-1659873776602
GPR[EPVAP]-1659873777312
GPR[EPVS]-1659873777312
========
if((d<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
fireDatasetChanged(new DatasetChangeInfo());
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873777313
GPR[SPVAP]-1659873777313
GPR[EPVAP]-1659873778025
GPR[EPVS]-1659873778025
========
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873778026
GPR[SPVAP]-1659873778026
GPR[EPVAP]-1659873778732
GPR[EPVS]-1659873778732
========
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873778733
GPR[SPVAP]-1659873778733
GPR[EPVAP]-1659873779471
GPR[EPVS]-1659873779471
========
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
fireDatasetChanged(new DatasetChangeInfo());
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873779473
GPR[SPVAP]-1659873779473
GPR[EPVAP]-1659873780182
GPR[EPVS]-1659873780182
========
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
fireDatasetChanged(new DatasetChangeInfo());
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873780183
GPR[SPVAP]-1659873780183
GPR[EPVAP]-1659873780889
GPR[EPVS]-1659873780889
========
calendar.clear();
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873780892
GPR[SPVAP]-1659873780892
GPR[EPVAP]-1659873782191
GPR[SPVATF]-1659873782191
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873783344
GPR[EPVS]-1659873783344
========
calendar.set(this.m,this.m-1,d,23,59,59);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873783346
GPR[SPVAP]-1659873783346
GPR[EPVAP]-1659873784069
GPR[EPVS]-1659873784069
========
calendar.set(Calendar.MILLISECOND,999);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873784070
GPR[SPVAP]-1659873784070
GPR[EPVAP]-1659873785379
GPR[SPVATF]-1659873785379
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873786576
GPR[EPVS]-1659873786576
========
int d=calendar.get(m);
int m=calendar.get(Calendar.MONTH)+1;
double y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873786578
GPR[SPVAP]-1659873786578
GPR[EPVAP]-1659873787287
GPR[EPVS]-1659873787287
========
long d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
long y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873787289
GPR[SPVAP]-1659873787289
GPR[EPVAP]-1659873787999
GPR[EPVS]-1659873787999
========
long d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873788000
GPR[SPVAP]-1659873788000
GPR[EPVAP]-1659873788715
GPR[EPVS]-1659873788715
========
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
long y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873788716
GPR[SPVAP]-1659873788716
GPR[EPVAP]-1659873789426
GPR[EPVS]-1659873789426
========
calendar.set(Calendar.MILLISECOND,d);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873789427
GPR[SPVAP]-1659873789427
GPR[EPVAP]-1659873790132
GPR[EPVS]-1659873790132
========
if(calendar.getTime().getTime()>=time.getTime()){
calendar.set(Calendar.MILLISECOND,d-1);
mm=calendar.getTime();
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873790133
GPR[SPVAP]-1659873790133
GPR[EPVAP]-1659873790848
GPR[EPVS]-1659873790848
========
calendar.clear(Calendar.MILLISECOND);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873790849
GPR[SPVAP]-1659873790849
GPR[EPVAP]-1659873792154
GPR[SPVATF]-1659873792154
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873793279
GPR[EPVS]-1659873793279
========
calendar.set(d,d,d,0,0,0);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873793280
GPR[SPVAP]-1659873793280
GPR[EPVAP]-1659873793990
GPR[EPVS]-1659873793990
========
if(calendar.getTime().getTime()>=time.getTime()){
calendar.set(Calendar.YEAR,d-1);
d3=calendar.getTime();
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873793991
GPR[SPVAP]-1659873793991
GPR[EPVAP]-1659873794695
GPR[EPVS]-1659873794695
========
calendar.set(y,d-1,m,0,0,0);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873794696
GPR[SPVAP]-1659873794696
GPR[EPVAP]-1659873795397
GPR[EPVS]-1659873795397
========
calendar.set(Calendar.MILLISECOND,0);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873795397
GPR[SPVAP]-1659873795397
GPR[EPVAP]-1659873796633
GPR[SPVATF]-1659873796633
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873797748
GPR[EPVS]-1659873797748
========
calendar.clear();
calendar.set(Calendar.MILLISECOND,0);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873797749
GPR[SPVAP]-1659873797749
GPR[EPVAP]-1659873799012
GPR[SPVATF]-1659873799012
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873800173
GPR[EPVS]-1659873800173
========
calendar.set(y,d-1,m,23,59,59);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873800174
GPR[SPVAP]-1659873800174
GPR[EPVAP]-1659873800910
GPR[EPVS]-1659873800910
========
calendar.clear();
calendar.set(Calendar.MILLISECOND,999);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873800911
GPR[SPVAP]-1659873800911
GPR[EPVAP]-1659873802197
GPR[SPVATF]-1659873802197
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873803335
GPR[EPVS]-1659873803335
========
calendar.set(d,d,d,d,0,0);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873803337
GPR[SPVAP]-1659873803337
GPR[EPVAP]-1659873804058
GPR[EPVS]-1659873804058
========
if(calendar.getTime().getTime()>=time.getTime()){
calendar.set(Calendar.DATE,d-1);
d2=calendar.getTime();
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873804059
GPR[SPVAP]-1659873804059
GPR[EPVAP]-1659873804751
GPR[EPVS]-1659873804751
========
int d=calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873804752
GPR[SPVAP]-1659873804752
GPR[EPVAP]-1659873805997
GPR[SPVATF]-1659873805997
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873807111
GPR[EPVS]-1659873807111
========
if(m>MonthConstants.FEBRUARY){
if(SerialDate.isLeapYear(m)){
m=mm+1;
}
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873807113
GPR[SPVAP]-1659873807113
GPR[EPVAP]-1659873807853
GPR[EPVS]-1659873807853
========
calendar.set(Calendar.MILLISECOND,this.m);
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873807855
GPR[SPVAP]-1659873807855
GPR[EPVAP]-1659873808560
GPR[EPVS]-1659873808560
========
if(getLabelGenerator()==null){
continue;
}
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873808561
GPR[SPVAP]-1659873808561
GPR[EPVAP]-1659873809261
GPR[EPVS]-1659873809261
========
prefetchSectionPaints();
int d=calendar.get(Calendar.DAY_OF_MONTH);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873809263
GPR[SPVAP]-1659873809263
GPR[EPVAP]-1659873809979
GPR[EPVS]-1659873809979
========
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
int d=calendar.get(d);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);

========
MM Copying to MM
GPR[SPVS]-1659873809981
GPR[SPVAP]-1659873809981
GPR[EPVAP]-1659873810695
GPR[EPVS]-1659873810695
GPR[ESUN]-1659873810698
GPR[SSUN]-1659873810698
org.jfree.data.time.Day,172
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.DAY_OF_MONTH);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873813486
GPR[SPVAP]-1659873813486
GPR[EPVAP]-1659873818065
GPR[SPVATF]-1659873818065
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873819210
GPR[EPVS]-1659873819210
========
int m=calendar.get(Calendar.MONTH)+1;
calendar.setTime(time);
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873819212
GPR[SPVAP]-1659873819212
GPR[EPVAP]-1659873820503
GPR[SPVATF]-1659873820503
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873821654
GPR[EPVS]-1659873821654
========
int m=calendar.get(Calendar.MONTH)+1;
calendar.setTime(time);
int y=calendar.get(Calendar.DAY_OF_MONTH);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873821655
GPR[SPVAP]-1659873821655
GPR[EPVAP]-1659873822893
GPR[SPVATF]-1659873822893
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873824046
GPR[EPVS]-1659873824046
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
d=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873824047
GPR[SPVAP]-1659873824047
GPR[EPVAP]-1659873825303
GPR[SPVATF]-1659873825303
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873826455
GPR[EPVS]-1659873826455
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
y=calendar.get(Calendar.MONTH);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873826456
GPR[SPVAP]-1659873826456
GPR[EPVAP]-1659873827746
GPR[SPVATF]-1659873827746
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873828879
GPR[EPVS]-1659873828879
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
m=calendar.get(Calendar.DATE);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873828880
GPR[SPVAP]-1659873828880
GPR[EPVAP]-1659873830126
GPR[SPVATF]-1659873830126
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873831283
GPR[EPVS]-1659873831283
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
d=calendar.get(Calendar.YEAR);
y=calendar.get(Calendar.MONTH);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873831284
GPR[SPVAP]-1659873831284
GPR[EPVAP]-1659873832526
GPR[SPVATF]-1659873832526
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873833664
GPR[EPVS]-1659873833664
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
d=calendar.get(Calendar.YEAR);
m=calendar.get(Calendar.DATE);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873833665
GPR[SPVAP]-1659873833665
GPR[EPVAP]-1659873834987
GPR[SPVATF]-1659873834987
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873836107
GPR[EPVS]-1659873836107
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
y=calendar.get(Calendar.MONTH);
m=calendar.get(Calendar.DATE);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873836108
GPR[SPVAP]-1659873836109
GPR[EPVAP]-1659873837359
GPR[SPVATF]-1659873837359
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873838523
GPR[EPVS]-1659873838523
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
d=calendar.get(Calendar.YEAR);
y=calendar.get(Calendar.MONTH);
m=calendar.get(Calendar.DATE);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873838524
GPR[SPVAP]-1659873838524
GPR[EPVAP]-1659873839836
GPR[SPVATF]-1659873839836
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873840995
GPR[EPVS]-1659873840995
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(y);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873840997
GPR[SPVAP]-1659873840997
GPR[EPVAP]-1659873841722
GPR[EPVS]-1659873841723
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(d);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873841724
GPR[SPVAP]-1659873841724
GPR[EPVAP]-1659873843001
GPR[SPVATF]-1659873843001
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873844191
GPR[EPVS]-1659873844191
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
calendar.setTime(time);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873844192
GPR[SPVAP]-1659873844192
GPR[EPVAP]-1659873845427
GPR[SPVATF]-1659873845427
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873846556
GPR[EPVS]-1659873846556
========
peg(calendar);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873846567
GPR[SPVAP]-1659873846567
GPR[EPVAP]-1659873847827
GPR[SPVATF]-1659873847827
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873848943
GPR[EPVS]-1659873848943
========
peg(calendar);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
calendar.setTime(time);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873848944
GPR[SPVAP]-1659873848944
GPR[EPVAP]-1659873850205
GPR[SPVATF]-1659873850205
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873851350
GPR[EPVS]-1659873851350
========
int m=calendar.get(Calendar.MONTH)+1;
this.calendar.setTime(time);
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873851352
GPR[SPVAP]-1659873851352
GPR[EPVAP]-1659873852066
GPR[EPVS]-1659873852066
========
int m=calendar.get(Calendar.MONTH)+1;
double y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873852067
GPR[SPVAP]-1659873852067
GPR[EPVAP]-1659873852819
GPR[EPVS]-1659873852819
========
this.y=calendar.get(Calendar.YEAR);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873852820
GPR[SPVAP]-1659873852820
GPR[EPVAP]-1659873853551
GPR[EPVS]-1659873853551
========
calendar.setTime(time);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873853552
GPR[SPVAP]-1659873853552
GPR[EPVAP]-1659873854820
GPR[SPVATF]-1659873854820
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873855951
GPR[EPVS]-1659873855951
========
calendar.setTime(time);
peg(calendar);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873855952
GPR[SPVAP]-1659873855952
GPR[EPVAP]-1659873857189
GPR[SPVATF]-1659873857189
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873858315
GPR[EPVS]-1659873858315
========
int m=calendar.get(Calendar.MONTH)+1;
int y=upperCoordinates.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873858318
GPR[SPVAP]-1659873858318
GPR[EPVAP]-1659873859027
GPR[EPVS]-1659873859027
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(new Integer(d));
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873859028
GPR[SPVAP]-1659873859028
GPR[EPVAP]-1659873859734
GPR[EPVS]-1659873859734
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(m);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873859736
GPR[SPVAP]-1659873859736
GPR[EPVAP]-1659873860987
GPR[SPVATF]-1659873860987
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873862125
GPR[EPVS]-1659873862125
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(RenderingHints.KEY_ANTIALIASING);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873862129
GPR[SPVAP]-1659873862129
GPR[EPVAP]-1659873862836
GPR[EPVS]-1659873862836
========
int m=calendar.get(Calendar.MONTH)+1;
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873862838
GPR[SPVAP]-1659873862838
GPR[EPVAP]-1659873864161
GPR[SPVATF]-1659873864161
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873865302
GPR[EPVS]-1659873865302
========
int m=calendar.get(Calendar.MONTH)+1;
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
int y=calendar.get(Calendar.YEAR);
calendar.setTime(time);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873865303
GPR[SPVAP]-1659873865303
GPR[EPVAP]-1659873866537
GPR[SPVATF]-1659873866537
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873867715
GPR[EPVS]-1659873867715
========
int m=calendar.get(Calendar.MONTH)+1;
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873867802
GPR[SPVAP]-1659873867802
GPR[EPVAP]-1659873868517
GPR[EPVS]-1659873868517
========
int m=calendar.get(Calendar.MONTH)+1;
if((d<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873868519
GPR[SPVAP]-1659873868519
GPR[EPVAP]-1659873869260
GPR[EPVS]-1659873869260
========
if(y>=0){
index=index+1;
}else {
index=-index;
}
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873869261
GPR[SPVAP]-1659873869261
GPR[EPVAP]-1659873869973
GPR[EPVS]-1659873869973
========
fireChangeEvent();
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873869976
GPR[SPVAP]-1659873869976
GPR[EPVAP]-1659873870690
GPR[EPVS]-1659873870690
========
fireChangeEvent();
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(d);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873870691
GPR[SPVAP]-1659873870691
GPR[EPVAP]-1659873871402
GPR[EPVS]-1659873871402
========
int m=calendar.get(Calendar.MONTH)+1;
if(d<0||series>=getSeriesCount()){
throw new IllegalArgumentException("Invalid series index: "+series);
}
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873871404
GPR[SPVAP]-1659873871404
GPR[EPVAP]-1659873872116
GPR[EPVS]-1659873872116
========
int m=calendar.get(Calendar.MONTH)+1;
if((d<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873872118
GPR[SPVAP]-1659873872118
GPR[EPVAP]-1659873872827
GPR[EPVS]-1659873872827
========
int m=calendar.get(Calendar.MONTH)+1;
double y=calendar.get(d);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873872828
GPR[SPVAP]-1659873872828
GPR[EPVAP]-1659873873554
GPR[EPVS]-1659873873554
========
double m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873873556
GPR[SPVAP]-1659873873556
GPR[EPVAP]-1659873874263
GPR[EPVS]-1659873874263
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.MONTH);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873874264
GPR[SPVAP]-1659873874264
GPR[EPVAP]-1659873875541
GPR[SPVATF]-1659873875541
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873876702
GPR[EPVS]-1659873876702
========
int m=calendar.get(Calendar.MONTH)+1;
this.calendar.setTime(time);
int y=calendar.get(Calendar.MONTH);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873876703
GPR[SPVAP]-1659873876703
GPR[EPVAP]-1659873877418
GPR[EPVS]-1659873877418
========
peg(Calendar.getInstance());
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873877420
GPR[SPVAP]-1659873877420
GPR[EPVAP]-1659873878699
GPR[SPVATF]-1659873878699
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873879880
GPR[EPVS]-1659873879880
========
int m=calendar.get(Calendar.MONTH)+1;
long y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873879883
GPR[SPVAP]-1659873879883
GPR[EPVAP]-1659873880612
GPR[EPVS]-1659873880612
========
int m=calendar.get(Calendar.MONTH)+1;
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873880616
GPR[SPVAP]-1659873880616
GPR[EPVAP]-1659873881325
GPR[EPVS]-1659873881325
========
fireDatasetChanged(new DatasetChangeInfo());
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873881326
GPR[SPVAP]-1659873881326
GPR[EPVAP]-1659873882038
GPR[EPVS]-1659873882038
========
int m=calendar.get(Calendar.MONTH)+1;
if((d<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
int y=calendar.get(d);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873882039
GPR[SPVAP]-1659873882039
GPR[EPVAP]-1659873882764
GPR[EPVS]-1659873882764
========
fireDatasetChanged(new DatasetChangeInfo());
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(d);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873882765
GPR[SPVAP]-1659873882765
GPR[EPVAP]-1659873883500
GPR[EPVS]-1659873883501
========
fireDatasetChanged(new DatasetChangeInfo());
int m=calendar.get(Calendar.MONTH)+1;
if((d<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873883502
GPR[SPVAP]-1659873883502
GPR[EPVAP]-1659873884239
GPR[EPVS]-1659873884239
========
fireDatasetChanged(new DatasetChangeInfo());
int m=calendar.get(Calendar.MONTH)+1;
if((d<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
int y=calendar.get(d);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873884240
GPR[SPVAP]-1659873884240
GPR[EPVAP]-1659873884970
GPR[EPVS]-1659873884970
========
int m=calendar.get(Calendar.MONTH)+1;
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873884972
GPR[SPVAP]-1659873884972
GPR[EPVAP]-1659873885678
GPR[EPVS]-1659873885678
========
int m=calendar.get(Calendar.MONTH)+1;
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
int y=calendar.get(d);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873885680
GPR[SPVAP]-1659873885680
GPR[EPVAP]-1659873886386
GPR[EPVS]-1659873886386
========
fireDatasetChanged(new DatasetChangeInfo());
int m=calendar.get(Calendar.MONTH)+1;
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873886387
GPR[SPVAP]-1659873886387
GPR[EPVAP]-1659873887114
GPR[EPVS]-1659873887114
========
fireDatasetChanged(new DatasetChangeInfo());
int m=calendar.get(Calendar.MONTH)+1;
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
int y=calendar.get(d);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873887115
GPR[SPVAP]-1659873887115
GPR[EPVAP]-1659873887841
GPR[EPVS]-1659873887842
========
long m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873887843
GPR[SPVAP]-1659873887843
GPR[EPVAP]-1659873888557
GPR[EPVS]-1659873888557
========
calendar.clear();
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873888558
GPR[SPVAP]-1659873888558
GPR[EPVAP]-1659873889806
GPR[SPVATF]-1659873889806
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873890955
GPR[EPVS]-1659873890955
========
calendar.set(y,this.serialDate.getMonth()-1,m,0,0,0);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873890957
GPR[SPVAP]-1659873890957
GPR[EPVAP]-1659873891714
GPR[EPVS]-1659873891714
========
calendar.set(Calendar.MILLISECOND,0);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873891715
GPR[SPVAP]-1659873891715
GPR[EPVAP]-1659873892958
GPR[SPVATF]-1659873892958
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873894088
GPR[EPVS]-1659873894088
========
calendar.clear();
calendar.set(Calendar.MILLISECOND,0);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873894089
GPR[SPVAP]-1659873894089
GPR[EPVAP]-1659873895340
GPR[SPVATF]-1659873895340
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873896460
GPR[EPVS]-1659873896460
========
calendar.set(y,this.serialDate.getMonth()-1,m,23,59,59);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873896461
GPR[SPVAP]-1659873896461
GPR[EPVAP]-1659873897163
GPR[EPVS]-1659873897164
========
calendar.set(Calendar.MILLISECOND,999);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873897165
GPR[SPVAP]-1659873897165
GPR[EPVAP]-1659873898388
GPR[SPVATF]-1659873898388
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873899517
GPR[EPVS]-1659873899517
========
calendar.clear();
calendar.set(Calendar.MILLISECOND,999);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873899518
GPR[SPVAP]-1659873899518
GPR[EPVAP]-1659873900766
GPR[SPVATF]-1659873900766
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873901896
GPR[EPVS]-1659873901896
========
(Calendar)calendar.clone().clear();
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873901897
GPR[SPVAP]-1659873901897
GPR[EPVAP]-1659873902493
GPR[EPVS]-1659873902493
========
this.lastMillisecond=getLastMillisecond(calendar);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873902494
GPR[SPVAP]-1659873902494
GPR[EPVAP]-1659873903730
GPR[SPVATF]-1659873903730
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873904869
GPR[EPVS]-1659873904869
========
calendar.set(this.m,this.d-1,y,23,59,59);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873904870
GPR[SPVAP]-1659873904870
GPR[EPVAP]-1659873905579
GPR[EPVS]-1659873905579
========
int m=calendar.get(Calendar.MONTH)+1;
calendar.set(m,d,y,0,0,0);
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873905581
GPR[SPVAP]-1659873905581
GPR[EPVAP]-1659873906297
GPR[EPVS]-1659873906297
========
if(calendar.getTime().getTime()>=time.getTime()){
calendar.set(Calendar.YEAR,m-1);
d3=calendar.getTime();
}
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873906298
GPR[SPVAP]-1659873906298
GPR[EPVAP]-1659873906995
GPR[EPVS]-1659873906995
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
if(zone==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873906996
GPR[SPVAP]-1659873906996
GPR[EPVAP]-1659873908266
GPR[SPVATF]-1659873908266
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873909404
GPR[EPVS]-1659873909404
========
notifyListeners(new AxisChangeEvent(this));
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873909405
GPR[SPVAP]-1659873909405
GPR[EPVAP]-1659873910117
GPR[EPVS]-1659873910117
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.getActualMaximum(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873910119
GPR[SPVAP]-1659873910119
GPR[EPVAP]-1659873911343
GPR[SPVATF]-1659873911343
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873913364
GPR[EPVS]-1659873913364
========
calendar.set(getYYYY(),getMonth()-1,getDayOfMonth(),0,0,0);
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873913365
GPR[SPVAP]-1659873913365
GPR[EPVAP]-1659873914167
GPR[EPVS]-1659873914167
========
int m=calendar.get(Calendar.MONTH)+1;
prefetchSectionPaints();
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873914168
GPR[SPVAP]-1659873914168
GPR[EPVAP]-1659873914885
GPR[EPVS]-1659873914885
========
int m=calendar.get(Calendar.MONTH)+1;
calendar.clear(Calendar.MILLISECOND);
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873914887
GPR[SPVAP]-1659873914887
GPR[EPVAP]-1659873916182
GPR[SPVATF]-1659873916182
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873917305
GPR[EPVS]-1659873917305
========
int m=calendar.get(Calendar.MONTH)+1;
calendar.set(Calendar.MILLISECOND,d);
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873917307
GPR[SPVAP]-1659873917307
GPR[EPVAP]-1659873918577
GPR[SPVATF]-1659873918577
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873919697
GPR[EPVS]-1659873919697
========
if(getLabelGenerator()==null){
continue;
}
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873919698
GPR[SPVAP]-1659873919698
GPR[EPVAP]-1659873920409
GPR[EPVS]-1659873920409
========
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
if(serialDate==null){
throw new IllegalArgumentException("Null \'serialDate\' argument.");
}
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873920412
GPR[SPVAP]-1659873920412
GPR[EPVAP]-1659873921671
GPR[SPVATF]-1659873921671
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873922797
GPR[EPVS]-1659873922797
========
peg(Calendar.getInstance());
int m=calendar.get(Calendar.MONTH)+1;
int y=calendar.get(Calendar.YEAR);
if(serialDate==null){
throw new IllegalArgumentException("Null \'serialDate\' argument.");
}
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873922798
GPR[SPVAP]-1659873922798
GPR[EPVAP]-1659873924041
GPR[SPVATF]-1659873924041
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM:   - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659873925156
GPR[EPVS]-1659873925156
========
int m=calendar.get(Calendar.MONTH)+1;
if((d<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
int y=calendar.get(d);
this.serialDate=SerialDate.createInstance(d,m,y);

========
MM Copying to MM
GPR[SPVS]-1659873925160
GPR[SPVAP]-1659873925160
GPR[EPVAP]-1659873925865
GPR[EPVS]-1659873925865
GPR[ESUN]-1659873925866
Successfully repair!
GPR[EFP]-1659873925867
End running Chart/3 results at /experiment_home///results/SimFix/Chart/3/seed_260/
\n\nNode: host-43\n
\n\nDate: Sun 07 Aug 2022 05:05:26 AM PDT\n
Removing checked out dir script/workingdir/SimFix/chart/chart_3_buggy
GPR[SSLE]-1659873926548
GPR[ESLE]-1659873986552
